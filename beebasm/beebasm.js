// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { assert(DYNAMICTOP_PTR);var ret = HEAP32[DYNAMICTOP_PTR>>2];var end = (((ret + size + 15)|0) & -16);HEAP32[DYNAMICTOP_PTR>>2] = end;if (end >= TOTAL_MEMORY) {var success = enlargeMemory();if (!success) {HEAP32[DYNAMICTOP_PTR>>2] = ret;return 0;}}return ret;},
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var s = func.substr(1);
      var len = lengthBytesUTF8(s)+1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var buffer;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - asm.stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var WASM_PAGE_SIZE = 64 * 1024;

var totalMemory = WASM_PAGE_SIZE;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024;
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var lastChar, end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  HEAP8.set(array, buffer);    
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;





// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 44992;
  /* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__I_000101() } }, { func: function() { __GLOBAL__sub_I_iostream_cpp() } });
  

/* memory initializer */ allocate([100,73,0,0,156,78,0,0,140,73,0,0,82,78,0,0,192,1,0,0,0,0,0,0,140,73,0,0,19,78,0,0,216,1,0,0,0,0,0,0,140,73,0,0,215,77,0,0,216,1,0,0,0,0,0,0,140,73,0,0,136,77,0,0,216,1,0,0,0,0,0,0,140,73,0,0,76,77,0,0,216,1,0,0,0,0,0,0,140,73,0,0,169,78,0,0,216,1,0,0,0,0,0,0,140,73,0,0,240,78,0,0,216,1,0,0,0,0,0,0,140,73,0,0,48,79,0,0,128,5,0,0,0,0,0,0,140,73,0,0,114,79,0,0,192,5,0,0,0,0,0,0,140,73,0,0,184,79,0,0,216,1,0,0,0,0,0,0,140,73,0,0,71,80,0,0,216,1,0,0,0,0,0,0,140,73,0,0,129,80,0,0,216,1,0,0,0,0,0,0,140,73,0,0,187,80,0,0,216,1,0,0,0,0,0,0,140,73,0,0,247,80,0,0,216,1,0,0,0,0,0,0,140,73,0,0,73,81,0,0,216,1,0,0,0,0,0,0,140,73,0,0,215,81,0,0,216,1,0,0,0,0,0,0,140,73,0,0,28,82,0,0,216,1,0,0,0,0,0,0,140,73,0,0,189,82,0,0,216,1,0,0,0,0,0,0,140,73,0,0,88,82,0,0,216,1,0,0,0,0,0,0,140,73,0,0,8,84,0,0,216,1,0,0,0,0,0,0,140,73,0,0,207,83,0,0,216,1,0,0,0,0,0,0,140,73,0,0,147,83,0,0,216,1,0,0,0,0,0,0,140,73,0,0,83,83,0,0,216,1,0,0,0,0,0,0,140,73,0,0,51,84,0,0,144,5,0,0,0,0,0,0,140,73,0,0,102,85,0,0,216,1,0,0,0,0,0,0,140,73,0,0,29,85,0,0,216,1,0,0,0,0,0,0,140,73,0,0,220,84,0,0,216,1,0,0,0,0,0,0,140,73,0,0,206,85,0,0,208,1,0,0,0,0,0,0,100,73,0,0,231,85,0,0,140,73,0,0,86,86,0,0,208,1,0,0,0,0,0,0,140,73,0,0,187,87,0,0,216,1,0,0,0,0,0,0,140,73,0,0,207,92,0,0,216,1,0,0,0,0,0,0,140,73,0,0,119,92,0,0,216,1,0,0,0,0,0,0,140,73,0,0,32,92,0,0,216,1,0,0,0,0,0,0,140,73,0,0,220,91,0,0,216,1,0,0,0,0,0,0,140,73,0,0,148,91,0,0,216,1,0,0,0,0,0,0,140,73,0,0,37,91,0,0,216,1,0,0,0,0,0,0,140,73,0,0,207,90,0,0,216,1,0,0,0,0,0,0,140,73,0,0,139,90,0,0,216,1,0,0,0,0,0,0,140,73,0,0,79,90,0,0,216,1,0,0,0,0,0,0,140,73,0,0,255,89,0,0,216,1,0,0,0,0,0,0,140,73,0,0,190,89,0,0,216,1,0,0,0,0,0,0,140,73,0,0,93,89,0,0,216,1,0,0,0,0,0,0,140,73,0,0,16,89,0,0,216,1,0,0,0,0,0,0,140,73,0,0,197,88,0,0,216,1,0,0,0,0,0,0,140,73,0,0,107,88,0,0,216,1,0,0,0,0,0,0,140,73,0,0,17,88,0,0,216,1,0,0,0,0,0,0,140,73,0,0,223,95,0,0,192,1,0,0,0,0,0,0,140,73,0,0,144,95,0,0,192,1,0,0,0,0,0,0,140,73,0,0,71,95,0,0,192,1,0,0,0,0,0,0,140,73,0,0,1,95,0,0,192,1,0,0,0,0,0,0,140,73,0,0,110,93,0,0,128,5,0,0,0,0,0,0,140,73,0,0,206,94,0,0,192,1,0,0,0,0,0,0,140,73,0,0,125,94,0,0,192,1,0,0,0,0,0,0,140,73,0,0,50,94,0,0,192,1,0,0,0,0,0,0,140,73,0,0,240,93,0,0,192,1,0,0,0,0,0,0,140,73,0,0,38,96,0,0,144,5,0,0,0,0,0,0,140,73,0,0,86,96,0,0,192,5,0,0,0,0,0,0,140,73,0,0,156,96,0,0,8,0,0,0,0,0,0,0,140,73,0,0,169,96,0,0,192,1,0,0,0,0,0,0,140,73,0,0,87,97,0,0,216,1,0,0,0,0,0,0,140,73,0,0,16,97,0,0,216,1,0,0,0,0,0,0,140,73,0,0,18,98,0,0,8,0,0,0,0,0,0,0,140,73,0,0,91,102,0,0,232,1,0,0,0,0,0,0,140,73,0,0,36,102,0,0,232,1,0,0,0,0,0,0,140,73,0,0,216,101,0,0,232,1,0,0,0,0,0,0,140,73,0,0,172,102,0,0,232,1,0,0,0,0,0,0,140,73,0,0,239,103,0,0,232,1,0,0,0,0,0,0,140,73,0,0,181,103,0,0,232,1,0,0,0,0,0,0,140,73,0,0,219,105,0,0,216,1,0,0,0,0,0,0,140,73,0,0,40,106,0,0,216,1,0,0,0,0,0,0,140,73,0,0,15,106,0,0,216,1,0,0,0,0,0,0,140,73,0,0,192,107,0,0,216,1,0,0,0,0,0,0,140,73,0,0,53,107,0,0,216,1,0,0,0,0,0,0,140,73,0,0,254,106,0,0,216,1,0,0,0,0,0,0,140,73,0,0,113,106,0,0,216,1,0,0,0,0,0,0,140,73,0,0,19,108,0,0,216,1,0,0,0,0,0,0,140,73,0,0,103,108,0,0,216,1,0,0,0,0,0,0,140,73,0,0,174,108,0,0,216,1,0,0,0,0,0,0,140,73,0,0,9,110,0,0,216,1,0,0,0,0,0,0,140,73,0,0,138,109,0,0,216,1,0,0,0,0,0,0,140,73,0,0,65,109,0,0,192,1,0,0,0,0,0,0,140,73,0,0,255,108,0,0,192,1,0,0,0,0,0,0,140,73,0,0,133,110,0,0,216,1,0,0,0,0,0,0,140,73,0,0,241,110,0,0,216,1,0,0,0,0,0,0,140,73,0,0,197,124,0,0,104,5,0,0,0,0,0,0,100,73,0,0,179,124,0,0,140,73,0,0,239,124,0,0,104,5,0,0,0,0,0,0,100,73,0,0,25,125,0,0,100,73,0,0,74,125,0,0,44,74,0,0,123,125,0,0,0,0,0,0,1,0,0,0,88,5,0,0,3,244,255,255,44,74,0,0,170,125,0,0,0,0,0,0,1,0,0,0,112,5,0,0,3,244,255,255,44,74,0,0,217,125,0,0,0,0,0,0,1,0,0,0,88,5,0,0,3,244,255,255,44,74,0,0,8,126,0,0,0,0,0,0,1,0,0,0,112,5,0,0,3,244,255,255,140,73,0,0,55,126,0,0,192,10,0,0,0,0,0,0,140,73,0,0,126,126,0,0,208,10,0,0,0,0,0,0,140,73,0,0,172,126,0,0,136,5,0,0,0,0,0,0,140,73,0,0,197,126,0,0,128,5,0,0,0,0,0,0,140,73,0,0,4,127,0,0,136,5,0,0,0,0,0,0,140,73,0,0,28,127,0,0,128,5,0,0,0,0,0,0,140,73,0,0,52,127,0,0,96,6,0,0,0,0,0,0,140,73,0,0,72,127,0,0,176,10,0,0,0,0,0,0,140,73,0,0,94,127,0,0,96,6,0,0,0,0,0,0,44,74,0,0,152,127,0,0,0,0,0,0,2,0,0,0,96,6,0,0,2,0,0,0,160,6,0,0,0,0,0,0,44,74,0,0,220,127,0,0,0,0,0,0,1,0,0,0,184,6,0,0,0,0,0,0,100,73,0,0,242,127,0,0,44,74,0,0,11,128,0,0,0,0,0,0,2,0,0,0,96,6,0,0,2,0,0,0,224,6,0,0,0,0,0,0,44,74,0,0,79,128,0,0,0,0,0,0,1,0,0,0,184,6,0,0,0,0,0,0,44,74,0,0,120,128,0,0,0,0,0,0,2,0,0,0,96,6,0,0,2,0,0,0,24,7,0,0,0,0,0,0,44,74,0,0,188,128,0,0,0,0,0,0,1,0,0,0,48,7,0,0,0,0,0,0,100,73,0,0,210,128,0,0,44,74,0,0,235,128,0,0,0,0,0,0,2,0,0,0,96,6,0,0,2,0,0,0,88,7,0,0,0,0,0,0,44,74,0,0,47,129,0,0,0,0,0,0,1,0,0,0,48,7,0,0,0,0,0,0,44,74,0,0,133,130,0,0,0,0,0,0,3,0,0,0,96,6,0,0,2,0,0,0,152,7,0,0,2,0,0,0,160,7,0,0,0,8,0,0,100,73,0,0,236,130,0,0,100,73,0,0,202,130,0,0,44,74,0,0,255,130,0,0,0,0,0,0,3,0,0,0,96,6,0,0,2,0,0,0,152,7,0,0,2,0,0,0,208,7,0,0,0,8,0,0,100,73,0,0,68,131,0,0,44,74,0,0,102,131,0,0,0,0,0,0,2,0,0,0,96,6,0,0,2,0,0,0,248,7,0,0,0,8,0,0,100,73,0,0,171,131,0,0,44,74,0,0,213,131,0,0,0,0,0,0,2,0,0,0,96,6,0,0,2,0,0,0,248,7,0,0,0,8,0,0,44,74,0,0,26,132,0,0,0,0,0,0,2,0,0,0,96,6,0,0,2,0,0,0,64,8,0,0,2,0,0,0,100,73,0,0,54,132,0,0,44,74,0,0,75,132,0,0,0,0,0,0,2,0,0,0,96,6,0,0,2,0,0,0,64,8,0,0,2,0,0,0,44,74,0,0,103,132,0,0,0,0,0,0,2,0,0,0,96,6,0,0,2,0,0,0,64,8,0,0,2,0,0,0,44,74,0,0,131,132,0,0,0,0,0,0,2,0,0,0,96,6,0,0,2,0,0,0,64,8,0,0,2,0,0,0,44,74,0,0,190,132,0,0,0,0,0,0,2,0,0,0,96,6,0,0,2,0,0,0,200,8,0,0,0,0,0,0,100,73,0,0,4,133,0,0,44,74,0,0,40,133,0,0,0,0,0,0,2,0,0,0,96,6,0,0,2,0,0,0,240,8,0,0,0,0,0,0,100,73,0,0,110,133,0,0,44,74,0,0,141,133,0,0,0,0,0,0,2,0,0,0,96,6,0,0,2,0,0,0,24,9,0,0,0,0,0,0,100,73,0,0,211,133,0,0,44,74,0,0,236,133,0,0,0,0,0,0,2,0,0,0,96,6,0,0,2,0,0,0,64,9,0,0,0,0,0,0,100,73,0,0,50,134,0,0,44,74,0,0,75,134,0,0,0,0,0,0,2,0,0,0,96,6,0,0,2,0,0,0,104,9,0,0,2,0,0,0,100,73,0,0,96,134,0,0,44,74,0,0,247,134,0,0,0,0,0,0,2,0,0,0,96,6,0,0,2,0,0,0,104,9,0,0,2,0,0,0,140,73,0,0,120,134,0,0,160,9,0,0,0,0,0,0,44,74,0,0,155,134,0,0,0,0,0,0,2,0,0,0,96,6,0,0,2,0,0,0,192,9,0,0,2,0,0,0,100,73,0,0,190,134,0,0,140,73,0,0,213,134,0,0,160,9,0,0,0,0,0,0,44,74,0,0,12,135,0,0,0,0,0,0,2,0,0,0,96,6,0,0,2,0,0,0,192,9,0,0,2,0,0,0,44,74,0,0,46,135,0,0,0,0,0,0,2,0,0,0,96,6,0,0,2,0,0,0,192,9,0,0,2,0,0,0,44,74,0,0,80,135,0,0,0,0,0,0,2,0,0,0,96,6,0,0,2,0,0,0,192,9,0,0,2,0,0,0,140,73,0,0,115,135,0,0,96,6,0,0,0,0,0,0,44,74,0,0,137,135,0,0,0,0,0,0,2,0,0,0,96,6,0,0,2,0,0,0,104,10,0,0,2,0,0,0,100,73,0,0,155,135,0,0,44,74,0,0,176,135,0,0,0,0,0,0,2,0,0,0,96,6,0,0,2,0,0,0,104,10,0,0,2,0,0,0,140,73,0,0,205,135,0,0,96,6,0,0,0,0,0,0,140,73,0,0,226,135,0,0,96,6,0,0,0,0,0,0,100,73,0,0,254,135,0,0,100,73,0,0,36,136,0,0,140,73,0,0,61,136,0,0,64,11,0,0,0,0,0,0,140,73,0,0,84,136,0,0,184,10,0,0,0,0,0,0,100,73,0,0,255,136,0,0,140,73,0,0,95,137,0,0,248,10,0,0,0,0,0,0,140,73,0,0,12,137,0,0,8,11,0,0,0,0,0,0,100,73,0,0,45,137,0,0,140,73,0,0,58,137,0,0,232,10,0,0,0,0,0,0,140,73,0,0,130,138,0,0,224,10,0,0,0,0,0,0,140,73,0,0,143,138,0,0,224,10,0,0,0,0,0,0,140,73,0,0,159,138,0,0,224,10,0,0,0,0,0,0,140,73,0,0,177,138,0,0,48,11,0,0,0,0,0,0,140,73,0,0,194,138,0,0,48,11,0,0,0,0,0,0,140,73,0,0,225,138,0,0,224,10,0,0,0,0,0,0,140,73,0,0,17,139,0,0,248,10,0,0,0,0,0,0,140,73,0,0,237,138,0,0,128,11,0,0,0,0,0,0,140,73,0,0,51,139,0,0,232,10,0,0,0,0,0,0,0,0,0,0,8,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,16,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,32,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,0,0,0,0,48,0,0,0,7,0,0,0,11,0,0,0,9,0,0,0,12,0,0,0,0,0,0,0,64,0,0,0,7,0,0,0,13,0,0,0,9,0,0,0,14,0,0,0,0,0,0,0,80,0,0,0,7,0,0,0,15,0,0,0,9,0,0,0,16,0,0,0,0,0,0,0,96,0,0,0,7,0,0,0,17,0,0,0,9,0,0,0,18,0,0,0,0,0,0,0,112,0,0,0,7,0,0,0,19,0,0,0,9,0,0,0,20,0,0,0,56,0,0,0,0,0,0,0,192,5,0,0,21,0,0,0,22,0,0,0,200,255,255,255,200,255,255,255,192,5,0,0,23,0,0,0,24,0,0,0,56,0,0,0,0,0,0,0,144,0,0,0,25,0,0,0,26,0,0,0,200,255,255,255,200,255,255,255,144,0,0,0,27,0,0,0,28,0,0,0,0,0,0,0,128,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,168,12,0,0,128,12,0,0,148,12,0,0,188,12,0,0,0,0,0,0,160,0,0,0,7,0,0,0,43,0,0,0,9,0,0,0,44,0,0,0,0,0,0,0,176,0,0,0,7,0,0,0,45,0,0,0,9,0,0,0,46,0,0,0,0,0,0,0,192,0,0,0,7,0,0,0,47,0,0,0,9,0,0,0,48,0,0,0,0,0,0,0,208,0,0,0,7,0,0,0,49,0,0,0,9,0,0,0,50,0,0,0,0,0,0,0,224,0,0,0,7,0,0,0,51,0,0,0,9,0,0,0,52,0,0,0,0,0,0,0,240,0,0,0,7,0,0,0,53,0,0,0,9,0,0,0,54,0,0,0,247,87,0,0,255,255,255,255,0,0,0,0,0,0,0,0,176,81,0,0,255,255,255,255,0,0,0,0,0,0,0,0,84,86,0,0,7,0,0,0,55,0,0,0,0,0,0,0,178,81,0,0,6,0,0,0,56,0,0,0,0,0,0,0,180,81,0,0,6,0,0,0,57,0,0,0,0,0,0,0,182,81,0,0,6,0,0,0,58,0,0,0,0,0,0,0,116,111,0,0,6,0,0,0,59,0,0,0,0,0,0,0,124,111,0,0,6,0,0,0,58,0,0,0,0,0,0,0,184,81,0,0,6,0,0,0,60,0,0,0,0,0,0,0,187,81,0,0,6,0,0,0,61,0,0,0,0,0,0,0,190,81,0,0,5,0,0,0,62,0,0,0,0,0,0,0,192,81,0,0,5,0,0,0,63,0,0,0,0,0,0,0,194,81,0,0,4,0,0,0,64,0,0,0,0,0,0,0,197,81,0,0,4,0,0,0,64,0,0,0,0,0,0,0,199,81,0,0,4,0,0,0,65,0,0,0,0,0,0,0,202,81,0,0,4,0,0,0,65,0,0,0,0,0,0,0,205,81,0,0,4,0,0,0,66,0,0,0,0,0,0,0,208,81,0,0,4,0,0,0,67,0,0,0,0,0,0,0,211,81,0,0,4,0,0,0,68,0,0,0,0,0,0,0,213,81,0,0,4,0,0,0,69,0,0,0,0,0,0,0,112,111,0,0,3,0,0,0,70,0,0,0,0,0,0,0,128,111,0,0,2,0,0,0,71,0,0,0,0,0,0,0,120,111,0,0,2,0,0,0,72,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,7,0,0,0,73,0,0,0,9,0,0,0,74,0,0,0,0,0,0,0,16,1,0,0,7,0,0,0,75,0,0,0,9,0,0,0,76,0,0,0,0,0,0,0,32,1,0,0,7,0,0,0,77,0,0,0,9,0,0,0,78,0,0,0,0,0,0,0,48,1,0,0,7,0,0,0,79,0,0,0,9,0,0,0,80,0,0,0,239,87,0,0,255,255,255,255,0,0,0,0,0,0,0,0,245,82,0,0,255,255,255,255,0,0,0,0,0,0,0,0,192,81,0,0,8,0,0,0,81,0,0,0,0,0,0,0,190,81,0,0,8,0,0,0,82,0,0,0,0,0,0,0,247,82,0,0,10,0,0,0,83,0,0,0,0,0,0,0,251,82,0,0,10,0,0,0,84,0,0,0,0,0,0,0,213,81,0,0,10,0,0,0,83,0,0,0,0,0,0,0,211,81,0,0,10,0,0,0,84,0,0,0,0,0,0,0,255,82,0,0,10,0,0,0,85,0,0,0,0,0,0,0,4,83,0,0,10,0,0,0,86,0,0,0,0,0,0,0,9,83,0,0,10,0,0,0,87,0,0,0,0,0,0,0,14,83,0,0,10,0,0,0,88,0,0,0,0,0,0,0,19,83,0,0,10,0,0,0,89,0,0,0,0,0,0,0,24,83,0,0,10,0,0,0,90,0,0,0,0,0,0,0,29,83,0,0,10,0,0,0,91,0,0,0,0,0,0,0,34,83,0,0,10,0,0,0,92,0,0,0,0,0,0,0,39,83,0,0,10,0,0,0,93,0,0,0,0,0,0,0,44,83,0,0,10,0,0,0,94,0,0,0,0,0,0,0,49,83,0,0,10,0,0,0,95,0,0,0,0,0,0,0,54,83,0,0,10,0,0,0,96,0,0,0,0,0,0,0,59,83,0,0,10,0,0,0,97,0,0,0,0,0,0,0,64,83,0,0,10,0,0,0,98,0,0,0,0,0,0,0,69,83,0,0,10,0,0,0,99,0,0,0,0,0,0,0,74,83,0,0,10,0,0,0,100,0,0,0,0,0,0,0,78,83,0,0,10,0,0,0,101,0,0,0,0,0,0,0,60,0,0,0,0,0,0,0,144,5,0,0,102,0,0,0,103,0,0,0,196,255,255,255,196,255,255,255,144,5,0,0,104,0,0,0,105,0,0,0,60,0,0,0,0,0,0,0,128,1,0,0,106,0,0,0,107,0,0,0,196,255,255,255,196,255,255,255,128,1,0,0,108,0,0,0,109,0,0,0,56,17,0,0,16,17,0,0,36,17,0,0,76,17,0,0,0,0,0,0,64,1,0,0,7,0,0,0,110,0,0,0,9,0,0,0,111,0,0,0,0,0,0,0,80,1,0,0,7,0,0,0,112,0,0,0,9,0,0,0,113,0,0,0,0,0,0,0,112,1,0,0,7,0,0,0,114,0,0,0,9,0,0,0,115,0,0,0,0,0,0,0,96,1,0,0,7,0,0,0,116,0,0,0,9,0,0,0,117,0,0,0,0,0,0,0,176,1,0,0,7,0,0,0,118,0,0,0,9,0,0,0,119,0,0,0,0,0,0,0,160,1,0,0,7,0,0,0,120,0,0,0,9,0,0,0,121,0,0,0,0,0,0,0,144,1,0,0,7,0,0,0,122,0,0,0,9,0,0,0,123,0,0,0,0,0,0,0,192,1,0,0,3,0,0,0,124,0,0,0,5,0,0,0,125,0,0,0,0,0,0,0,216,1,0,0,7,0,0,0,126,0,0,0,9,0,0,0,127,0,0,0,255,255,255,255,105,0,101,0,117,0,255,255,109,0,125,0,121,0,114,1,97,0,113,0,255,255,255,255,255,255,0,0,113,86,0,0,0,0,0,0,255,255,255,255,41,0,37,0,53,0,255,255,45,0,61,0,57,0,50,1,33,0,49,0,255,255,255,255,255,255,0,0,112,111,0,0,0,0,0,0,255,255,10,0,255,255,6,0,22,0,255,255,14,0,30,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,117,86,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,144,0,0,0,121,86,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,176,0,0,0,125,86,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,240,0,0,0,129,86,0,0,0,0,0,0,255,255,255,255,137,1,36,0,52,1,255,255,44,0,60,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,133,86,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,0,0,137,86,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,208,0,0,0,141,86,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,16,0,0,0,145,86,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,128,1,0,0,149,86,0,0,1,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,153,86,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,80,0,0,0,157,86,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,112,0,0,0,161,86,0,0,0,0,0,0,24,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,165,86,0,0,0,0,0,0,216,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,169,86,0,0,0,0,0,0,88,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,173,86,0,0,0,0,0,0,255,255,255,255,255,255,100,1,116,1,255,255,156,1,158,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,177,86,0,0,1,0,0,0,184,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,181,86,0,0,0,0,0,0,255,255,255,255,201,0,197,0,213,0,255,255,205,0,221,0,217,0,210,1,193,0,209,0,255,255,255,255,255,255,0,0,185,86,0,0,0,0,0,0,255,255,255,255,224,0,228,0,255,255,255,255,236,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,189,86,0,0,0,0,0,0,255,255,255,255,192,0,196,0,255,255,255,255,204,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,193,86,0,0,0,0,0,0,58,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,197,86,0,0,1,0,0,0,255,255,58,1,255,255,198,0,214,0,255,255,206,0,222,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,201,86,0,0,0,0,0,0,202,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,205,86,0,0,0,0,0,0,136,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,209,86,0,0,0,0,0,0,255,255,255,255,73,0,69,0,85,0,255,255,77,0,93,0,89,0,82,1,65,0,81,0,255,255,255,255,255,255,0,0,120,111,0,0,0,0,0,0,26,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,213,86,0,0,1,0,0,0,255,255,26,1,255,255,230,0,246,0,255,255,238,0,254,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,217,86,0,0,0,0,0,0,232,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,221,86,0,0,0,0,0,0,200,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,225,86,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,76,0,255,255,255,255,255,255,255,255,255,255,108,0,124,1,255,255,0,0,229,86,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,32,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,233,86,0,0,0,0,0,0,255,255,255,255,169,0,165,0,181,0,255,255,173,0,189,0,185,0,178,1,161,0,177,0,255,255,255,255,255,255,0,0,237,86,0,0,0,0,0,0,255,255,255,255,162,0,166,0,255,255,182,0,174,0,255,255,190,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,241,86,0,0,0,0,0,0,255,255,255,255,160,0,164,0,180,0,255,255,172,0,188,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,245,86,0,0,0,0,0,0,255,255,74,0,255,255,70,0,86,0,255,255,78,0,94,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,249,86,0,0,0,0,0,0,234,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,253,86,0,0,0,0,0,0,255,255,255,255,9,0,5,0,21,0,255,255,13,0,29,0,25,0,18,1,1,0,17,0,255,255,255,255,255,255,0,0,1,87,0,0,0,0,0,0,72,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,5,87,0,0,0,0,0,0,8,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,9,87,0,0,0,0,0,0,218,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,13,87,0,0,1,0,0,0,90,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,17,87,0,0,1,0,0,0,104,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,21,87,0,0,0,0,0,0,40,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,25,87,0,0,0,0,0,0,250,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,29,87,0,0,1,0,0,0,122,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,33,87,0,0,1,0,0,0,255,255,42,0,255,255,38,0,54,0,255,255,46,0,62,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,37,87,0,0,0,0,0,0,255,255,106,0,255,255,102,0,118,0,255,255,110,0,126,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,41,87,0,0,0,0,0,0,64,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,45,87,0,0,0,0,0,0,96,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,49,87,0,0,0,0,0,0,255,255,255,255,233,0,229,0,245,0,255,255,237,0,253,0,249,0,242,1,225,0,241,0,255,255,255,255,255,255,0,0,53,87,0,0,0,0,0,0,56,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,57,87,0,0,0,0,0,0,248,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,61,87,0,0,0,0,0,0,120,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,65,87,0,0,0,0,0,0,255,255,255,255,255,255,133,0,149,0,255,255,141,0,157,0,153,0,146,1,129,0,145,0,255,255,255,255,255,255,0,0,69,87,0,0,0,0,0,0,255,255,255,255,255,255,134,0,255,255,150,0,142,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,73,87,0,0,0,0,0,0,255,255,255,255,255,255,132,0,148,0,255,255,140,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,77,87,0,0,0,0,0,0,255,255,255,255,255,255,100,1,116,1,255,255,156,1,158,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,81,87,0,0,1,0,0,0,170,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,85,87,0,0,0,0,0,0,168,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,89,87,0,0,0,0,0,0,255,255,255,255,255,255,20,1,255,255,255,255,28,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,93,87,0,0,1,0,0,0,255,255,255,255,255,255,4,1,255,255,255,255,12,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,97,87,0,0,1,0,0,0,186,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,101,87,0,0,0,0,0,0,138,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,105,87,0,0,0,0,0,0,154,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,109,87,0,0,0,0,0,0,152,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,113,87,0,0,0,0,0,0,0,0,0,0,248,1,0,0,7,0,0,0,128,0,0,0,9,0,0,0,129,0,0,0,0,0,0,0,8,2,0,0,7,0,0,0,130,0,0,0,9,0,0,0,131,0,0,0,0,0,0,0,24,2,0,0,7,0,0,0,132,0,0,0,9,0,0,0,133,0,0,0,0,0,0,0,40,2,0,0,7,0,0,0,134,0,0,0,9,0,0,0,135,0,0,0,0,0,0,0,56,2,0,0,7,0,0,0,136,0,0,0,9,0,0,0,137,0,0,0,0,0,0,0,72,2,0,0,7,0,0,0,138,0,0,0,9,0,0,0,139,0,0,0,0,0,0,0,152,2,0,0,7,0,0,0,140,0,0,0,9,0,0,0,141,0,0,0,0,0,0,0,168,2,0,0,7,0,0,0,142,0,0,0,9,0,0,0,143,0,0,0,0,0,0,0,216,2,0,0,7,0,0,0,144,0,0,0,9,0,0,0,145,0,0,0,0,0,0,0,232,2,0,0,7,0,0,0,146,0,0,0,9,0,0,0,147,0,0,0,0,0,0,0,200,2,0,0,7,0,0,0,148,0,0,0,9,0,0,0,149,0,0,0,0,0,0,0,184,2,0,0,7,0,0,0,150,0,0,0,9,0,0,0,151,0,0,0,0,0,0,0,136,2,0,0,7,0,0,0,152,0,0,0,9,0,0,0,153,0,0,0,0,0,0,0,120,2,0,0,7,0,0,0,154,0,0,0,9,0,0,0,155,0,0,0,0,0,0,0,104,2,0,0,7,0,0,0,156,0,0,0,9,0,0,0,157,0,0,0,0,0,0,0,88,2,0,0,7,0,0,0,158,0,0,0,9,0,0,0,159,0,0,0,104,0,0,0,0,0,0,0,192,5,0,0,21,0,0,0,22,0,0,0,152,255,255,255,152,255,255,255,192,5,0,0,23,0,0,0,24,0,0,0,104,0,0,0,0,0,0,0,152,3,0,0,160,0,0,0,161,0,0,0,152,255,255,255,152,255,255,255,152,3,0,0,162,0,0,0,163,0,0,0,104,30,0,0,64,30,0,0,84,30,0,0,124,30,0,0,108,0,0,0,0,0,0,0,144,5,0,0,102,0,0,0,103,0,0,0,148,255,255,255,148,255,255,255,144,5,0,0,104,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,136,3,0,0,164,0,0,0,165,0,0,0,148,255,255,255,148,255,255,255,136,3,0,0,166,0,0,0,167,0,0,0,200,30,0,0,160,30,0,0,180,30,0,0,220,30,0,0,0,0,0,0,248,2,0,0,3,0,0,0,168,0,0,0,5,0,0,0,169,0,0,0,0,0,0,0,8,3,0,0,3,0,0,0,170,0,0,0,5,0,0,0,171,0,0,0,0,0,0,0,24,3,0,0,3,0,0,0,172,0,0,0,5,0,0,0,173,0,0,0,0,0,0,0,40,3,0,0,3,0,0,0,174,0,0,0,5,0,0,0,175,0,0,0,0,0,0,0,56,3,0,0,176,0,0,0,177,0,0,0,178,0,0,0,179,0,0,0,180,0,0,0,181,0,0,0,182,0,0,0,36,0,0,0,37,0,0,0,183,0,0,0,39,0,0,0,184,0,0,0,41,0,0,0,185,0,0,0,0,0,0,0,72,3,0,0,3,0,0,0,186,0,0,0,5,0,0,0,187,0,0,0,0,0,0,0,88,3,0,0,3,0,0,0,188,0,0,0,5,0,0,0,189,0,0,0,0,0,0,0,104,3,0,0,3,0,0,0,190,0,0,0,5,0,0,0,191,0,0,0,0,0,0,0,120,3,0,0,3,0,0,0,192,0,0,0,5,0,0,0,193,0,0,0,0,0,0,0,168,3,0,0,194,0,0,0,195,0,0,0,196,0,0,0,197,0,0,0,198,0,0,0,199,0,0,0,200,0,0,0,0,0,0,0,184,3,0,0,3,0,0,0,201,0,0,0,5,0,0,0,202,0,0,0,0,0,0,0,216,3,0,0,7,0,0,0,203,0,0,0,9,0,0,0,204,0,0,0,0,0,0,0,200,3,0,0,7,0,0,0,205,0,0,0,9,0,0,0,206,0,0,0,0,0,0,0,232,3,0,0,1,0,0,0,207,0,0,0,208,0,0,0,209,0,0,0,210,0,0,0,211,0,0,0,212,0,0,0,0,0,0,0,24,4,0,0,7,0,0,0,213,0,0,0,9,0,0,0,214,0,0,0,0,0,0,0,8,4,0,0,7,0,0,0,215,0,0,0,9,0,0,0,216,0,0,0,0,0,0,0,248,3,0,0,7,0,0,0,217,0,0,0,9,0,0,0,218,0,0,0,0,0,0,0,40,4,0,0,7,0,0,0,219,0,0,0,9,0,0,0,220,0,0,0,0,0,0,0,56,4,0,0,7,0,0,0,221,0,0,0,9,0,0,0,222,0,0,0,0,0,0,0,72,4,0,0,7,0,0,0,223,0,0,0,9,0,0,0,224,0,0,0,44,116,0,0,225,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,105,0,0,226,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,105,0,0,226,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,105,0,0,227,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,113,0,0,228,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,105,0,0,229,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,105,0,0,230,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,105,0,0,231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,105,0,0,232,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,105,0,0,233,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,105,0,0,232,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59,105,0,0,234,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,227,112,0,0,235,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,113,0,0,236,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,106,113,0,0,237,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,113,0,0,238,0,0,0,0,0,0,0,239,0,0,0,0,0,0,0,64,105,0,0,238,0,0,0,0,0,0,0,240,0,0,0,0,0,0,0,160,111,0,0,241,0,0,0,0,0,0,0,242,0,0,0,0,0,0,0,69,105,0,0,241,0,0,0,0,0,0,0,243,0,0,0,0,0,0,0,75,105,0,0,244,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,105,0,0,245,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,105,0,0,246,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,105,0,0,247,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,112,0,0,248,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,105,0,0,249,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,106,105,0,0,250,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,105,0,0,251,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,105,0,0,252,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,118,105,0,0,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,126,105,0,0,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,105,0,0,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,141,105,0,0,1,1,0,0,0,0,0,0,2,1,0,0,0,0,0,0,131,111,0,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,150,105,0,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,4,0,0,7,0,0,0,5,1,0,0,9,0,0,0,6,1,0,0,0,0,0,0,120,4,0,0,7,1,0,0,8,1,0,0,9,0,0,0,9,1,0,0,0,0,0,0,104,4,0,0,7,0,0,0,10,1,0,0,9,0,0,0,11,1,0,0,0,0,0,0,136,4,0,0,7,0,0,0,12,1,0,0,9,0,0,0,13,1,0,0,0,0,0,0,152,4,0,0,7,0,0,0,14,1,0,0,9,0,0,0,15,1,0,0,0,0,0,0,184,4,0,0,7,0,0,0,16,1,0,0,9,0,0,0,17,1,0,0,0,0,0,0,168,4,0,0,7,0,0,0,18,1,0,0,9,0,0,0,19,1,0,0,0,0,0,0,200,4,0,0,7,0,0,0,20,1,0,0,9,0,0,0,21,1,0,0,0,0,0,0,216,4,0,0,7,0,0,0,22,1,0,0,9,0,0,0,23,1,0,0,0,0,0,0,232,4,0,0,7,0,0,0,24,1,0,0,9,0,0,0,25,1,0,0,0,0,0,0,248,4,0,0,7,0,0,0,26,1,0,0,9,0,0,0,27,1,0,0,0,0,0,0,8,5,0,0,7,0,0,0,28,1,0,0,9,0,0,0,29,1,0,0,0,0,0,0,24,5,0,0,3,0,0,0,30,1,0,0,5,0,0,0,31,1,0,0,0,0,0,0,40,5,0,0,3,0,0,0,32,1,0,0,5,0,0,0,33,1,0,0,0,0,0,0,56,5,0,0,7,0,0,0,34,1,0,0,9,0,0,0,35,1,0,0,0,0,0,0,72,5,0,0,7,0,0,0,36,1,0,0,9,0,0,0,37,1,0,0,112,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,131,111,0,0,4,0,0,0,0,0,0,0,0,0,0,0,137,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,142,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,146,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,151,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,155,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,111,0,0,20,0,0,0,0,0,0,0,0,0,0,0,165,111,0,0,20,0,0,0,0,0,0,0,0,0,0,0,184,175,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,111,0,0,67,0,0,0,0,0,0,0,0,0,0,0,181,111,0,0,67,0,0,0,0,0,0,0,0,0,0,0,186,111,0,0,67,0,0,0,0,0,0,0,0,0,0,0,191,111,0,0,67,0,0,0,0,0,0,0,0,0,0,0,197,111,0,0,67,0,0,0,0,0,0,0,0,0,0,0,203,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,207,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,211,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,217,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,221,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,225,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,229,111,0,0,1,0,0,0,0,0,0,0,0,0,0,0,234,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,238,111,0,0,1,0,0,0,0,0,0,0,0,0,0,0,244,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,111,0,0,1,0,0,0,0,0,0,0,0,0,0,0,252,111,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,112,0,0,1,0,0,0,0,0,0,0,0,0,0,0,13,112,0,0,1,0,0,0,0,0,0,0,0,0,0,0,19,112,0,0,8,0,0,0,0,0,0,0,0,0,0,0,22,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,112], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([58,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,112,0,0,1,0,0,0,0,0,0,0,0,0,0,0,76,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,112,0,0,1,0,0,0,0,0,0,0,0,0,0,0,87,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,91,112,0,0,1,0,0,0,0,0,0,0,0,0,0,0,95,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,112,0,0,1,0,0,0,0,0,0,0,0,0,0,0,119,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,112,0,0,1,0,0,0,0,0,0,0,0,0,0,0,132,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,142,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,149,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,162,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,175,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,112,0,0,1,0,0,0,0,0,0,0,0,0,0,0,188,112,0,0,16,0,0,0,0,0,0,0,0,0,0,0,193,112,0,0,16,0,0,0,0,0,0,0,0,0,0,0,200,112,0,0,2,0,0,0,0,0,0,0,0,0,0,0,205,112,0,0,16,0,0,0,0,0,0,0,0,0,0,0,210,112,0,0,1,0,0,0,0,0,0,0,0,0,0,0,214,112,0,0,1,0,0,0,0,0,0,0,0,0,0,0,218,112,0,0,16,0,0,0,0,0,0,0,0,0,0,0,227,112,0,0,2,0,0,0,0,0,0,0,0,0,0,0,184,175,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,181,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,186,111,0,0,1,0,0,0,0,0,0,0,0,0,0,0,191,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,112,0,0,2,0,0,0,0,0,0,0,0,0,0,0,238,112,0,0,3,0,0,0,0,0,0,0,0,0,0,0,243,112,0,0,2,0,0,0,0,0,0,0,0,0,0,0,248,112,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,112,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4,113,0,0,3,0,0,0,0,0,0,0,0,0,0,0,10,113,0,0,1,0,0,0,0,0,0,0,0,0,0,0,14,113,0,0,1,0,0,0,0,0,0,0,0,0,0,0,18,113,0,0,32,0,0,0,0,0,0,0,0,0,0,0,23,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,113,0,0,2,0,0,0,0,0,0,0,0,0,0,0,31,113,0,0,2,0,0,0,0,0,0,0,0,0,0,0,36,113,0,0,1,0,0,0,0,0,0,0,0,0,0,0,40,113,0,0,1,0,0,0,0,0,0,0,0,0,0,0,48,113,0,0,2,0,0,0,0,0,0,0,0,0,0,0,57,113,0,0,2,0,0,0,0,0,0,0,0,0,0,0,61,113,0,0,18,0,0,0,0,0,0,0,0,0,0,0,67,113,0,0,18,0,0,0,0,0,0,0,0,0,0,0,72,113,0,0,2,0,0,0,0,0,0,0,0,0,0,0,77,113,0,0,2,0,0,0,0,0,0,0,0,0,0,0,80,113,0,0,2,0,0,0,0,0,0,0,0,0,0,0,86,113,0,0,4,0,0,0,0,0,0,0,0,0,0,0,90,113,0,0,2,0,0,0,0,0,0,0,0,0,0,0,96,113,0,0,2,0,0,0,0,0,0,0,0,0,0,0,101,113,0,0,2,0,0,0,0,0,0,0,0,0,0,0,106,113,0,0,2,0,0,0,0,0,0,0,0,0,0,0,111,113,0,0,2,0,0,0,0,0,0,0,0,0,0,0,114,113,0,0,2,0,0,0,0,0,0,0,0,0,0,0,118,113,0,0,2,0,0,0,0,0,0,0,0,0,0,0,123,113,0,0,2,0,0,0,0,0,0,0,0,0,0,0,129,113,0,0,10,0,0,0,0,0,0,0,0,0,0,0,134,113,0,0,2,0,0,0,0,0,0,0,0,0,0,0,139,113,0,0,32,0,0,0,0,0,0,0,0,0,0,0,143,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,150,113,0,0,1,0,0,0,0,0,0,0,0,0,0,0,157,113,0,0,18,0,0,0,0,0,0,0,0,0,0,0,165,113,0,0,1,0,0,0,0,0,0,0,0,0,0,0,172,113,0,0,1,0,0,0,0,0,0,0,0,0,0,0,176,113,0,0,1,0,0,0,0,0,0,0,0,0,0,0,181,113,0,0,2,0,0,0,0,0,0,0,0,0,0,0,188,113,0,0,18,0,0,0,0,0,0,0,0,0,0,0,194,113,0,0,2,0,0,0,0,0,0,0,0,0,0,0,200,113,0,0,2,0,0,0,0,0,0,0,0,0,0,0,206,113,0,0,2,0,0,0,0,0,0,0,0,0,0,0,64,45,0,0,5,0,0,0,0,0,0,0,0,0,0,0,38,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,1,0,0,40,1,0,0,167,167,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,45,0,0,184,45,0,0,5,0,0,0,0,0,0,0,0,0,0,0,38,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,1,0,0,40,1,0,0,175,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,46,0,0,9,0,0,0,0,0,0,0,0,0,0,0,38,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,1,0,0,0,0,0,0,40,1,0,0,183,171,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,95,112,137,0,255,9,47,15,4,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,75,0,0,0,0,0,0,104,5,0,0,44,1,0,0,45,1,0,0,0,0,0,0,128,5,0,0,46,1,0,0,47,1,0,0,31,0,0,0,32,0,0,0,48,1,0,0,49,1,0,0,35,0,0,0,36,0,0,0,37,0,0,0,50,1,0,0,39,0,0,0,51,1,0,0,41,0,0,0,52,1,0,0,0,0,0,0,136,5,0,0,53,1,0,0,54,1,0,0,55,1,0,0,56,1,0,0,57,1,0,0,58,1,0,0,59,1,0,0,60,1,0,0,61,1,0,0,62,1,0,0,63,1,0,0,64,1,0,0,65,1,0,0,66,1,0,0,8,0,0,0,0,0,0,0,144,5,0,0,102,0,0,0,103,0,0,0,248,255,255,255,248,255,255,255,144,5,0,0,104,0,0,0,105,0,0,0,8,0,0,0,0,0,0,0,168,5,0,0,67,1,0,0,68,1,0,0,248,255,255,255,248,255,255,255,168,5,0,0,69,1,0,0,70,1,0,0,4,0,0,0,0,0,0,0,192,5,0,0,21,0,0,0,22,0,0,0,252,255,255,255,252,255,255,255,192,5,0,0,23,0,0,0,24,0,0,0,4,0,0,0,0,0,0,0,216,5,0,0,71,1,0,0,72,1,0,0,252,255,255,255,252,255,255,255,216,5,0,0,73,1,0,0,74,1,0,0,0,0,0,0,240,5,0,0,75,1,0,0,76,1,0,0,77,1,0,0,0,0,0,0,0,6,0,0,78,1,0,0,79,1,0,0,80,1,0,0,81,1,0,0,82,1,0,0,83,1,0,0,84,1,0,0,0,0,0,0,16,6,0,0,53,1,0,0,85,1,0,0,86,1,0,0,56,1,0,0,57,1,0,0,58,1,0,0,87,1,0,0,60,1,0,0,61,1,0,0,62,1,0,0,63,1,0,0,64,1,0,0,88,1,0,0,89,1,0,0,0,0,0,0,32,6,0,0,46,1,0,0,90,1,0,0,91,1,0,0,32,0,0,0,48,1,0,0,49,1,0,0,92,1,0,0,36,0,0,0,37,0,0,0,50,1,0,0,39,0,0,0,51,1,0,0,93,1,0,0,94,1,0,0,0,0,0,0,48,6,0,0,53,1,0,0,95,1,0,0,96,1,0,0,56,1,0,0,57,1,0,0,58,1,0,0,59,1,0,0,60,1,0,0,61,1,0,0,97,1,0,0,98,1,0,0,99,1,0,0,65,1,0,0,66,1,0,0,0,0,0,0,64,6,0,0,46,1,0,0,100,1,0,0,101,1,0,0,32,0,0,0,48,1,0,0,49,1,0,0,35,0,0,0,36,0,0,0,37,0,0,0,102,1,0,0,103,1,0,0,104,1,0,0,41,0,0,0,52,1,0,0,0,0,0,0,80,6,0,0,105,1,0,0,106,1,0,0,107,1,0,0,108,1,0,0,109,1,0,0,110,1,0,0,0,0,0,0,112,6,0,0,111,1,0,0,112,1,0,0,107,1,0,0,113,1,0,0,114,1,0,0,115,1,0,0,0,0,0,0,128,6,0,0,116,1,0,0,117,1,0,0,107,1,0,0,118,1,0,0,119,1,0,0,120,1,0,0,121,1,0,0,122,1,0,0,123,1,0,0,124,1,0,0,125,1,0,0,126,1,0,0,127,1,0,0,128,1,0,0,0,0,0,0,192,6,0,0,129,1,0,0,130,1,0,0,107,1,0,0,131,1,0,0,132,1,0,0,133,1,0,0,134,1,0,0,135,1,0,0,136,1,0,0,137,1,0,0,138,1,0,0,139,1,0,0,140,1,0,0,141,1,0,0,0,0,0,0,248,6,0,0,142,1,0,0,143,1,0,0,107,1,0,0,144,1,0,0,145,1,0,0,146,1,0,0,147,1,0,0,148,1,0,0,149,1,0,0,150,1,0,0,151,1,0,0,0,0,0,0,56,7,0,0,152,1,0,0,153,1,0,0,107,1,0,0,154,1,0,0,155,1,0,0,156,1,0,0,157,1,0,0,158,1,0,0,159,1,0,0,160,1,0,0,161,1,0,0,0,0,0,0,112,7,0,0,162,1,0,0,163,1,0,0,107,1,0,0,164,1,0,0,165,1,0,0,166,1,0,0,167,1,0,0,168,1,0,0,169,1,0,0,170,1,0,0,248,255,255,255,112,7,0,0,171,1,0,0,172,1,0,0,173,1,0,0,174,1,0,0,175,1,0,0,176,1,0,0,177,1,0,0,0,0,0,0,168,7,0,0,178,1,0,0,179,1,0,0,107,1,0,0,180,1,0,0,181,1,0,0,182,1,0,0,183,1,0,0,184,1,0,0,185,1,0,0,186,1,0,0,248,255,255,255,168,7,0,0,187,1,0,0,188,1,0,0,189,1,0,0,190,1,0,0,191,1,0,0,192,1,0,0,193,1,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,216,7,0,0,194,1,0,0,195,1,0,0,107,1,0,0,196,1,0,0,0,0,0,0,0,8,0,0,197,1,0,0,198,1,0,0,107,1,0,0,199,1,0,0,0,0,0,0,32,8,0,0,200,1,0,0,201,1,0,0,107,1,0,0,202,1,0,0,203,1,0,0,204,1,0,0,205,1,0,0,206,1,0,0,207,1,0,0,208,1,0,0,209,1,0,0,210,1,0,0,0,0,0,0,72,8,0,0,211,1,0,0,212,1,0,0,107,1,0,0,213,1,0,0,214,1,0,0,215,1,0,0,216,1,0,0,217,1,0,0,218,1,0,0,219,1,0,0,220,1,0,0,221,1,0,0,0,0,0,0,104,8,0,0,222,1,0,0,223,1,0,0,107,1,0,0,224,1,0,0,225,1,0,0,226,1,0,0,227,1,0,0,228,1,0,0,229,1,0,0,230,1,0,0,231,1,0,0,232,1,0,0,0,0,0,0,136,8,0,0,233,1,0,0,234,1,0,0,107,1,0,0,235,1,0,0,236,1,0,0,237,1,0,0,238,1,0,0,239,1,0,0,240,1,0,0,241,1,0,0,242,1,0,0,243,1,0,0,0,0,0,0,168,8,0,0,244,1,0,0,245,1,0,0,107,1,0,0,246,1,0,0,247,1,0,0,0,0,0,0,208,8,0,0,248,1,0,0,249,1,0,0,107,1,0,0,250,1,0,0,251,1,0,0,0,0,0,0,248,8,0,0,252,1,0,0,253,1,0,0,107,1,0,0,254,1,0,0,255,1,0,0,0,0,0,0,32,9,0,0,0,2,0,0,1,2,0,0,107,1,0,0,2,2,0,0,3,2,0,0,0,0,0,0,72,9,0,0,4,2,0,0,5,2,0,0,107,1,0,0,6,2,0,0,7,2,0,0,8,2,0,0,0,0,0,0,112,9,0,0,9,2,0,0,10,2,0,0,107,1,0,0,11,2,0,0,12,2,0,0,13,2,0,0,0,0,0,0,200,9,0,0,14,2,0,0,15,2,0,0,107,1,0,0,16,2,0,0,17,2,0,0,18,2,0,0,19,2,0,0,20,2,0,0,21,2,0,0,22,2,0,0,0,0,0,0,144,9,0,0,14,2,0,0,23,2,0,0,107,1,0,0,16,2,0,0,17,2,0,0,18,2,0,0,19,2,0,0,20,2,0,0,21,2,0,0,22,2,0,0,0,0,0,0,248,9,0,0,24,2,0,0,25,2,0,0,107,1,0,0,26,2,0,0,27,2,0,0,28,2,0,0,29,2,0,0,30,2,0,0,31,2,0,0,32,2,0,0,0,0,0,0,56,10,0,0,33,2,0,0,34,2,0,0,107,1,0,0,0,0,0,0,72,10,0,0,35,2,0,0,36,2,0,0,107,1,0,0,37,2,0,0,38,2,0,0,39,2,0,0,40,2,0,0,41,2,0,0,42,2,0,0,43,2,0,0,44,2,0,0,0,0,0,0,144,10,0,0,45,2,0,0,46,2,0,0,107,1,0,0,47,2,0,0,48,2,0,0,49,2,0,0,50,2,0,0,51,2,0,0,0,0,0,0,160,10,0,0,52,2,0,0,53,2,0,0,107,1,0,0,54,2,0,0,55,2,0,0,56,2,0,0,57,2,0,0,58,2,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,96,6,0,0,14,2,0,0,59,2,0,0,107,1,0,0,0,0,0,0,112,10,0,0,14,2,0,0,60,2,0,0,107,1,0,0,61,2,0,0,62,2,0,0,63,2,0,0,64,2,0,0,65,2,0,0,66,2,0,0,67,2,0,0,68,2,0,0,69,2,0,0,70,2,0,0,71,2,0,0,72,2,0,0,0,0,0,0,216,9,0,0,14,2,0,0,73,2,0,0,107,1,0,0,74,2,0,0,75,2,0,0,76,2,0,0,77,2,0,0,78,2,0,0,79,2,0,0,80,2,0,0,0,0,0,0,24,10,0,0,14,2,0,0,81,2,0,0,107,1,0,0,82,2,0,0,83,2,0,0,84,2,0,0,85,2,0,0,86,2,0,0,87,2,0,0,88,2,0,0,0,0,0,0,160,9,0,0,14,2,0,0,89,2,0,0,107,1,0,0,16,2,0,0,17,2,0,0,18,2,0,0,19,2,0,0,20,2,0,0,21,2,0,0,22,2,0,0,0,0,0,0,192,10,0,0,90,2,0,0,91,2,0,0,77,1,0,0,92,2,0,0,246,136,0,0,0,0,0,0,232,10,0,0,93,2,0,0,94,2,0,0,95,2,0,0,96,2,0,0,97,2,0,0,98,2,0,0,99,2,0,0,100,2,0,0,0,0,0,0,16,11,0,0,93,2,0,0,101,2,0,0,95,2,0,0,96,2,0,0,97,2,0,0,102,2,0,0,103,2,0,0,104,2,0,0,0,0,0,0,32,11,0,0,105,2,0,0,106,2,0,0,107,2,0,0,0,0,0,0,48,11,0,0,108,2,0,0,109,2,0,0,110,2,0,0,0,0,0,0,64,11,0,0,111,2,0,0,112,2,0,0,77,1,0,0,0,0,0,0,80,11,0,0,108,2,0,0,113,2,0,0,110,2,0,0,0,0,0,0,96,11,0,0,108,2,0,0,114,2,0,0,110,2,0,0,0,0,0,0,112,11,0,0,115,2,0,0,116,2,0,0,117,2,0,0,0,0,0,0,160,11,0,0,93,2,0,0,118,2,0,0,95,2,0,0,96,2,0,0,97,2,0,0,119,2,0,0,120,2,0,0,121,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,3,32,2,32,2,32,2,32,2,32,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,1,96,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,4,192,4,192,4,192,4,192,4,192,4,192,4,192,8,213,8,213,8,213,8,213,8,213,8,213,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,4,192,4,192,4,192,4,192,4,192,4,192,8,214,8,214,8,214,8,214,8,214,8,214,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,4,192,4,192,4,192,4,192,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,57,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,73,102,87,105,116,104,111,117,116,69,110,100,105,102,0,73,70,32,119,105,116,104,111,117,116,32,69,78,68,73,70,46,0,51,53,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,78,111,69,110,100,77,97,99,114,111,0,85,110,116,101,114,109,105,110,97,116,101,100,32,109,97,99,114,111,32,40,69,78,68,77,65,67,82,79,32,110,111,116,32,102,111,117,110,100,41,46,0,51,57,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,70,111,114,87,105,116,104,111,117,116,78,101,120,116,0,70,79,82,32,119,105,116,104,111,117,116,32,78,69,88,84,46,0,52,49,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,77,105,115,109,97,116,99,104,101,100,66,114,97,99,101,115,0,77,105,115,109,97,116,99,104,101,100,32,98,114,97,99,101,115,46,0,51,55,65,115,109,69,120,99,101,112,116,105,111,110,95,70,105,108,101,69,114,114,111,114,95,82,101,97,100,83,111,117,114,99,101,70,105,108,101,0,80,114,111,98,108,101,109,32,114,101,97,100,105,110,103,32,102,114,111,109,32,115,111,117,114,99,101,32,102,105,108,101,46,0,49,48,83,111,117,114,99,101,67,111,100,101,0,51,54,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,84,111,111,77,97,110,121,70,79,82,115,0,84,111,111,32,109,97,110,121,32,110,101,115,116,101,100,32,70,79,82,115,32,111,114,32,98,114,97,99,101,115,46,0,51,57,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,78,101,120,116,87,105,116,104,111,117,116,70,111,114,0,78,69,88,84,32,119,105,116,104,111,117,116,32,70,79,82,46,0,64,0,95,0,78,83,116,51,95,95,50,49,53,98,97,115,105,99,95,115,116,114,105,110,103,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,78,83,116,51,95,95,50,49,57,98,97,115,105,99,95,111,115,116,114,105,110,103,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,51,53,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,84,111,111,77,97,110,121,73,70,115,0,84,111,111,32,109,97,110,121,32,110,101,115,116,101,100,32,73,70,115,46,0,109,95,105,102,83,116,97,99,107,80,116,114,32,62,32,48,0,115,111,117,114,99,101,99,111], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10244);
/* memory initializer */ allocate([100,101,46,99,112,112,0,83,101,116,67,117,114,114,101,110,116,73,102,65,115,77,97,99,114,111,68,101,102,105,110,105,116,105,111,110,0,83,101,116,67,117,114,114,101,110,116,73,102,67,111,110,100,105,116,105,111,110,0,51,56,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,69,108,115,101,87,105,116,104,111,117,116,73,102,0,69,76,83,69,32,119,105,116,104,111,117,116,32,73,70,46,0,51,56,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,69,108,105,102,87,105,116,104,111,117,116,73,102,0,69,76,73,70,32,119,105,116,104,111,117,116,32,73,70,46,0,51,57,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,69,110,100,105,102,87,105,116,104,111,117,116,73,102,0,69,78,68,73,70,32,119,105,116,104,111,117,116,32,73,70,46,0,51,57,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,78,111,78,101,115,116,101,100,77,97,99,114,111,115,0,67,97,110,110,111,116,32,100,101,102,105,110,101,32,111,110,101,32,109,97,99,114,111,32,105,110,115,105,100,101,32,97,110,111,116,104,101,114,46,0,52,51,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,69,110,100,77,97,99,114,111,85,110,101,120,112,101,99,116,101,100,0,69,78,68,77,65,67,82,79,32,101,110,99,111,117,110,116,101,114,101,100,32,119,105,116,104,111,117,116,32,97,32,109,97,116,99,104,105,110,103,32,77,65,67,82,79,32,100,105,114,101,99,116,105,118,101,46,0,93,0,42,0,47,0,37,0,60,60,0,62,62,0,43,0,45,0,61,61,0,61,0,60,62,0,33,61,0,60,61,0,62,61,0,60,0,62,0,51,55,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,77,105,115,115,105,110,103,86,97,108,117,101,0,77,105,115,115,105,110,103,32,118,97,108,117,101,32,105,110,32,101,120,112,114,101,115,115,105,111,110,46,0,51,57,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,68,105,118,105,115,105,111,110,66,121,90,101,114,111,0,68,105,118,105,115,105,111,110,32,98,121,32,122,101,114,111,46,0,52,49,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,73,108,108,101,103,97,108,79,112,101,114,97,116,105,111,110,0,79,112,101,114,97,116,105,111,110,32,97,116,116,101,109,112,116,101,100,32,119,105,116,104,32,105,110,118,97,108,105,100,32,111,114,32,111,117,116,32,111,102,32,114,97,110,103,101,32,118,97,108,117,101,115,46,0,51,55,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,78,117,109,98,101,114,84,111,111,66,105,103,0,78,117,109,98,101,114,32,116,111,111,32,98,105,103,46,0,91,0,72,73,40,0,76,79,40,0,83,73,78,40,0,67,79,83,40,0,84,65,78,40,0,65,83,78,40,0,65,67,83,40,0,65,84,78,40,0,83,81,82,40,0,82,65,68,40,0,68,69,71,40,0,73,78,84,40,0,65,66,83,40,0,83,71,78,40,0,82,78,68,40,0,78,79,84,40,0,76,79,71,40,0,76,78,40,0,69,88,80,40,0,52,49,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,83,121,109,98,111,108,78,111,116,68,101,102,105,110,101,100,0,83,121,109,98,111,108,32,110,111,116,32,100,101,102,105,110,101,100,46,0,52,49,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,73,110,118,97,108,105,100,67,104,97,114,97,99,116,101,114,0,66,97,100,32,101,120,112,114,101,115,115,105,111,110,46,0,51,49,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,66,97,100,66,105,110,0,66,97,100,32,98,105,110,97,114,121,32,101,120,112,114,101,115,115,105,111,110,46,0,51,49,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,66,97,100,72,101,120,0,66,97,100,32,104,101,120,46,0,78,83,116,51,95,95,50,49,57,98,97,115,105,99,95,105,115,116,114,105,110,103,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,109,95,108,105,110,101,91,32,109,95,99,111,108,117,109,110,32,93,32,61,61,32,39,40,39,0,101,120,112,114,101,115,115,105,111,110,46,99,112,112,0,69,118,97,108,117,97,116,101,69,120,112,114,101,115,115,105,111,110,0,111,112,72,97,110,100,108,101,114,32,33,61,32,78,85,76,76,0,109,95,118,97,108,117,101,83,116,97,99,107,80,116,114,32,60,61,32,49,0,52,48,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,69,109,112,116,121,69,120,112,114,101,115,115,105,111,110,0,69,120,112,114,101,115,115,105,111,110,32,110,111,116,32,102,111,117,110,100,46,0,52,54,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,77,105,115,109,97,116,99,104,101,100,80,97,114,101,110,116,104,101,115,101,115,0,77,105,115,109,97,116,99,104,101,100,32,112,97,114,101,110,116,104,101,115,101,115,46,0,52,53,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,69,120,112,114,101,115,115,105,111,110,84,111,111,67,111,109,112,108,101,120,0,69,120,112,114,101,115,115,105,111,110,32,116,111,111,32,99,111,109,112,108,101,120,46,0,85,110,115,112,101,99,105,102,105,101,100,32,102,105,108,101,32,101,114,114,111,114,46,0,69,114,114,111,114,58,32,0,50,50,65,115,109,69,120,99,101,112,116,105,111,110,95,70,105,108,101,69,114,114,111,114,0,49,50,65,115,109,69,120,99,101,112,116,105,111,110,0,85,110,115,112,101,99,105,102,105,101,100,32,115,121,110,116,97,120,32,101,114,114,111,114,46,0,109,95,102,105,108,101,110,97,109,101,32,33,61,32,34,34,0,97,115,109,101,120,99,101,112,116,105,111,110,46,99,112,112,0,80,114,105,110,116,0,109,95,108,105,110,101,78,117,109,98,101,114,32,33,61,32,48,0,58,32,101,114,114,111,114,58,32,0,94,0,50,52,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,0,65,68,67,0,65,83,76,0,66,67,67,0,66,67,83,0,66,69,81,0,66,73,84,0,66,77,73,0,66,78,69,0,66,80,76,0,66,82,65,0,66,82,75,0,66,86,67,0,66,86,83,0,67,76,67,0,67,76,68,0,67,76,73,0,67,76,82,0,67,76,86,0,67,77,80,0,67,80,88,0,67,80,89,0,68,69,65,0,68,69,67,0,68,69,88,0,68,69,89,0,73,78,65,0,73,78,67,0,73,78,88,0,73,78,89,0,74,77,80,0,74,83,82,0,76,68,65,0,76,68,88,0,76,68,89,0,76,83,82,0,78,79,80,0,79,82,65,0,80,72,65,0,80,72,80,0,80,72,88,0,80,72,89,0,80,76,65,0,80,76,80,0,80,76,88,0,80,76,89,0,82,79,76,0,82,79,82,0,82,84,73,0,82,84,83,0,83,66,67,0,83,69,67,0,83,69,68,0,83,69,73,0,83,84,65,0,83,84,88,0,83,84,89,0,83,84,90,0,84,65,88,0,84,65,89,0,84,82,66,0,84,83,66,0,84,83,88,0,84,88,65,0,84,88,83,0,84,89,65,0,97,115,115,101,109,98,108,101,46,99,112,112,0,72,97,115,65,100,100,114,101,115,115,105,110,103,77,111,100,101,40,32,105,110,115,116,114,117,99,116,105,111,110,73,110,100,101,120,44,32,109,111,100,101,32,41,0,32,32,32,32,32,32,32,32,32,0,32,65,0,50,54,65,115,109,69,120,99,101,112,116,105,111,110,95,65,115,115,101,109,98,108,101,69,114,114,111,114,0,118,97,108,117,101,32,60,32,48,120,49,48,48,0,32,32,32,32,32,32,0,35,0,40,0,44,88,0,44,89,0,41,0,44,88,41,0,41,44,89,0,118,97,108,117,101,32,60,32,48,120,49,48,48,48,48,0,51,53,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,78,111,73,110,100,101,120,101,100,89,0,89,32,105,110,100,101,120,101,100,32,109,111,100,101,32,100,111,101,115,32,110,111,116,32,101,120,105,115,116,32,102,111,114,32,116,104,105,115,32,105,110,115,116,114,117,99,116,105,111,110,46,0,51,53,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,78,111,73,110,100,101,120,101,100,88,0,88,32,105,110,100,101,120,101,100,32,109,111,100,101,32,100,111,101,115,32,110,111,116,32,101,120,105,115,116,32,102,111,114,32,116,104,105,115,32,105,110,115,116,114,117,99,116,105,111,110,46,0,51,53,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,66,97,100,73,110,100,101,120,101,100,0,83,121,110,116,97,120,32,101,114,114,111,114,32,105,110,32,105,110,100,101,120,101,100,32,105,110,115,116,114,117,99,116,105,111,110,46,0,51,54,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,66,97,100,65,98,115,111,108,117,116,101,0,83,121,110,116,97,120,32,101,114,114,111,114,32,105,110,32,97,98,115,111,108,117,116,101,32,105,110,115,116,114,117,99,116,105,111,110,46,0,51,53,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,78,111,65,98,115,111,108,117,116,101,0,65,98,115,111,108,117,116,101,32,97,100,100,114,101,115,115,105,110,103,32,109,111,100,101,32,110,111,116,32,97,108,108,111,119,101,100,32,102,111,114,32,116,104,105,115,32,105,110,115,116,114,117,99,116,105,111,110,46,0,52,49,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,66,114,97,110,99,104,79,117,116,79,102,82,97,110,103,101,0,66,114,97,110,99,104,32,111,117,116,32,111,102,32,114,97,110,103,101,46,0,51,54,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,66,97,100,73,110,100,105,114,101,99,116,0,73,110,99,111,114,114,101,99,116,108,121,32,102,111,114,109,101,100,32,105,110,100,105,114,101,99,116,32,105,110,115,116,114,117,99,116,105,111,110,46,0,51,53,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,66,97,100,65,100,100,114,101,115,115,0,79,117,116,32,111,102,32,114,97,110,103,101,32,97,100,100,114,101,115,115,46,0,51,54,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,78,111,116,90,101,114,111,80,97,103,101,0,65,100,100,114,101,115,115,32,105,115,32,110,111,116,32,105,110,32,122,101,114,111,45,112,97,103,101,46,0,51,53,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,78,111,73,110,100,105,114,101,99,116,0,73,110,100,105,114,101,99,116,32,109,111,100,101,32,110,111,116,32,97,108,108,111,119,101,100,32,102,111,114,32,116,104,105,115,32,105,110,115,116,114,117,99,116,105,111,110,46,0,51,50,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,54,53,48,50,66,117,103,0,74,77,80,32,40,97,100,100,114,41,32,119,105,108,108,32,110,111,116,32,101,120,101,99,117,116,101,32,97,115,32,105,110,116,101,110,100,101,100,32,100,117,101,32,116,111,32,116,104,101,32,54,53,48,50,32,98,117,103,32,40,97,100,100,114,32,61,32,38,120,120,70,70,41,46,0,52,48,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,85,110,101,120,112,101,99,116,101,100,67,111,109,109,97,0,85,110,101,120,112,101,99,116,101,100,32,99,111,109,109,97,32,101,110,111,117,110,116,101,114,101,100,46,0,51,54,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,73,109,109,78,101,103,97,116,105,118,101,0,67,111,110,115,116,97,110,116,32,99,97,110,110,111,116,32,98,101,32,110,101,103,97,116,105,118,101,46,0,51,54,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,73,109,109,84,111,111,76,97,114,103,101,0,73,109,109,101,100,105,97,116,101,32,99,111,110,115,116,97,110,116,115,32,99,97,110,110,111,116,32,98,101,32,103,114,101,97,116,101,114,32,116,104,97,110,32,50,53,53,46,0,51,54,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,78,111,73,109,109,101,100,105,97,116,101,0,73,109,109,101,100,105,97,116,101,32,109,111,100,101,32,110,111,116,32,97,108,108,111,119,101,100,32,102,111,114,32,116,104,105,115,32,105,110,115,116,114,117,99,116,105,111,110,46,0,51,52,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,78,111,73,109,112,108,105,101,100,0,73,109,112,108,105,101,100,32,109,111,100,101,32,110,111,116,32,97,108,108,111,119,101,100,32,102,111,114,32,116,104,105,115,32,105,110,115,116,114,117,99,116,105,111,110,46,0,108,101,110,103,116,104,32,62,61,32,101,110,100,83,101,99,116,111,114,65,100,100,114,32,42,32,48,120,49,48,48,0,100,105,115,99,105,109,97,103,101,46,99,112,112,0,68,105,115,99,73,109,97,103,101,0,42,66,65,83,73,67,13,42,82,85,78,32,0,33,66,111,111,116,0,78,83,116,51,95,95,50,49,51,98,97,115,105,99,95,102,105,108,101,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,115,116,97,116,105,99,95,99,97,115,116,60,32,105,110,116,32,62,40,32,109,95,111,117,116,112,117,116,70,105,108,101,46,116,101,108,108,112,40,41,32,41,32,61,61,32,115,101,99,116,111,114,65,100,100,114,79,102,84,104,105,115,70,105,108,101,32,42,32,48,120,49,48,48,0,65,100,100,70,105,108,101,0,51,49,65,115,109,69,120,99,101,112,116,105,111,110,95,70,105,108,101,69,114,114,111,114,95,68,105,115,99,70,117,108,108,0,78,111,32,114,111,111,109,32,111,110,32,68,70,83,32,100,105,115,99,32,105,109,97,103,101,32,102,117,108,108,46,0,51,51,65,115,109,69,120,99,101,112,116,105,111,110,95,70,105,108,101,69,114,114,111,114,95,70,105,108,101,69,120,105,115,116,115,0,70,105,108,101,32,97,108,114,101,97,100,121,32,101,120,105,115,116,115,32,111,110,32,68,70,83,32,100,105,115,99,32,105,109,97,103,101,46,0,51,53,65,115,109,69,120,99,101,112,116,105,111,110,95,70,105,108,101,69,114,114,111,114,95,84,111,111,77,97,110,121,70,105,108,101,115,0,84,111,111,32,109,97,110,121,32,102,105,108,101,115,32,111,110,32,68,70,83,32,100,105,115,99,32,105,109,97,103,101,32,40,109,97,120,32,51,49,41,46,0,51,48,65,115,109,69,120,99,101,112,116,105,111,110,95,70,105,108,101,69,114,114,111,114,95,66,97,100,78,97,109,101,0,66,97,100,32,68,70,83,32,102,105,108,101,110,97,109,101,46,0,51,54,65,115,109,69,120,99,101,112,116,105,111,110,95,70,105,108,101,69,114,114,111,114,95,87,114,105,116,101,68,105,115,99,68,101,115,116,0,67,111,117,108,100,32,110,111,116,32,119,114,105,116,101,32,116,111,32,100,105,115,99,32,105,109,97,103,101,46,0,51,55,65,115,109,69,120,99,101,112,116,105,111,110,95,70,105,108,101,69,114,114,111,114,95,82,101,97,100,68,105,115,99,83,111,117,114,99,101,0,80,114,111,98,108,101,109,32,114,101,97,100,105,110,103,32,102,114,111,109,32,100,105,115,99,32,105,109,97,103,101,46,0,51,55,65,115,109,69,120,99,101,112,116,105,111,110,95,70,105,108,101,69,114,114,111,114,95,79,112,101,110,68,105,115,99,83,111,117,114,99,101,0,67,111,117,108,100,32,110,111,116,32,111,112,101,110,32,100,105,115,99,32,105,109,97,103,101,32,102,111,114,32,114,101,97,100,105,110,103,46,0,51,53,65,115,109,69,120,99,101,112,116,105,111,110,95,70,105,108,101,69,114,114,111,114,95,79,112,101,110,68,105,115,99,68,101,115,116,0,67,111,117,108,100,32,110,111,116,32,99,114,101,97,116,101,32,110,101,119,32,100,105,115,99,32,105,109,97,103,101,46,0,78,83,116,51,95,95,50,49,52,98,97,115,105,99,95,105,102,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,50,49,52,98,97,115,105,99,95,111,102,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,80,114,111,99,101,115,115,101,100,32,102,105,108,101,32,39,0,39,32,111,107,0,49,48,83,111,117,114,99,101,70,105,108,101,0,51,55,65,115,109,69,120,99,101,112,116,105,111,110,95,70,105,108,101,69,114,114,111,114,95,79,112,101,110,83,111,117,114,99,101,70,105,108,101,0,67,111,117,108,100,32,110,111,116,32,111,112,101,110,32,115,111,117,114,99,101,32,102,105,108,101,32,102,111,114,32,114,101,97,100,105,110,103,46,0,32,9,13,10,0,77,97,99,114,111,32,0,69,110,100,32,109,97,99,114,111,32,0,52,52,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,76,97,98,101,108,65,108,114,101,97,100,121,68,101,102,105,110,101,100,0,83,121,109,98,111,108,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,46,0,52,50,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,85,110,114,101,99,111,103,110,105,115,101,100,84,111,107,101,110,0,85,110,114,101,99,111,103,110,105,115,101,100,32,116,111,107,101,110,46,0,105,115,97,108,112,104,97,40,32,109,95,108,105,110,101,91,32,109,95,99,111,108,117,109,110,32,93,32,41,32,124,124,32,109,95,108,105,110,101,91,32,109,95,99,111,108,117,109,110,32,93,32,61,61,32,39,95,39,0,108,105,110,101,112,97,114,115,101,114,46,99,112,112,0,71,101,116,83,121,109,98,111,108,78,97,109,101,0,105,32,62,61,32,48,0,72,97,110,100,108,101,84,111,107,101,110,0,103,108,111,98,97,108,100,97,116,97,46,99,112,112,0,49,51,77,97,99,114,111,73,110,115,116,97,110,99,101,0,109,97,99,114,111,46,99,112,112,0,45,105,0,45,111,0,45,100,111,0,45,100,105,0,45,98,111,111,116,0,45,111,112,116,0,45,118,0,45,100,0,45,45,104,101,108,112,0,98,101,101,98,97,115,109,32,49,46,48,56,0,80,111,115,115,105,98,108,101,32,111,112,116,105,111,110,115,58,0,32,45,105,32,60,102,105,108,101,62,32,32,32,32,32,32,83,112,101,99,105,102,121,32,115,111,117,114,99,101,32,102,105,108,101,110,97,109,101,0,32,45,111,32,60,102,105,108,101,62,32,32,32,32,32,32,83,112,101,99,105,102,121,32,111,117,116,112,117,116,32,102,105,108,101,110,97,109,101,32,40,119,104,101,110,32,110,111,116,32,115,112,101,99,105,102,105,101,100,32,98,121,32,83,65,86,69,32,99,111,109,109,97,110,100,41,0,32,45,100,105,32,60,102,105,108,101,62,32,32,32,32,32,83,112,101,99,105,102,121,32,97,32,100,105,115,99,32,105,109,97,103,101,32,102,105,108,101,32,116,111,32,98,101,32,97,100,100,101,100,32,116,111,0,32,45,100,111,32,60,102,105,108,101,62,32,32,32,32,32,83,112,101,99,105,102,121,32,97,32,100,105,115,99,32,105,109,97,103,101,32,102,105,108,101,32,116,111,32,111,117,116,112,117,116,0,32,45,98,111,111,116,32,60,102,105,108,101,62,32,32,32,83,112,101,99,105,102,121,32,97,32,102,105,108,101,110,97,109,101,32,116,111,32,98,101,32,114,117,110,32,98,121,32,33,66,79,79,84,32,111,110,32,97,32,110,101,119,32,100,105,115,99,32,105,109,97,103,101,0,32,45,111,112,116,32,60,111,112,116,62,32,32,32,32,32,83,112,101,99,105,102,121,32,116,104,101,32,42,79,80,84,32,52,44,110,32,102,111,114,32,116,104,101,32,103,101,110,101,114,97,116,101,100,32,100,105,115,99,32,105,109,97,103,101,0,32,45,118,32,32,32,32,32,32,32,32,32,32,32,32,32,86,101,114,98,111,115,101,32,111,117,116,112,117,116,0,32,45,100,32,32,32,32,32,32,32,32,32,32,32,32,32,68,117,109,112,32,97,108,108,32,103,108,111,98,97,108,32,115,121,109,98,111,108,115,32,97,102,116,101,114,32,97,115,115,101,109,98,108,121,0,32,45,45,104,101,108,112,32,32,32,32,32,32,32,32,32,83,101,101,32,116,104,105,115,32,104,101,108,112,32,97,103,97,105,110,0,66,97,100,32,112,97,114,97,109,101,116,101,114,58,32,0,84,121,112,101,32,98,101,101,98,97,115,109,32,45,45,104,101,108,112,32,102,111,114,32,111,112,116,105,111,110,115,0,80,97,114,97,109,101,116,101,114,32,101,114,114,111,114,32,45,0,84,121,112,101,32,98,101,101,98,97,115,109,32,45,45,104,101,108,112,32,102,111,114,32,115,121,110,116,97,120,0,78,111,32,115,111,117,114,99,101,32,102,105,108,101,0,73,102,32,97,32,100,105,115,99,32,105,109,97,103,101,32,102,105,108,101,32,105,115,32,112,114,111,118,105,100,101,100,32,97,115,32,105,110,112,117,116,44,32,97,32,100,105,102,102,101,114,101,110,116,32,102,105,108,101,110,97,109,101,32,109,117,115,116,32,98,101,32,112,114,111,118,105,100,101,100,32,97,115,32,111,117,116,112,117,116,0,119,97,114,110,105,110,103,58,32,110,111,32,83,65,86,69,32,99,111,109,109,97,110,100,32,105,110,32,115,111,117,114,99,101,32,102,105,108,101,46,0,111,98,106,101,99,116,99,111,100,101,46,99,112,112,0,115,116,97,114,116,32,60,61,32,101,110,100,0,67,108,101,97,114,0,115,116,97,114,116,32,62,61,32,48,32,38,38,32,115,116,97,114,116,32,60,32,48,120,49,48,48,48,48,0,101,110,100,32,62,32,48,32,38,38,32,101,110,100,32,60,61,32,48,120,49,48,48,48,48,0,109,95,80,67,32,62,61,32,48,32,38,38,32,109,95,80,67,32,60,32,48,120,49,48,48,48,48,0,80,117,116,66,121,116,101,0,98,121,116,101,32,60,32,48,120,49,48,48,0,51,52,65,115,109,69,120,99,101,112,116,105,111,110,95,65,115,115,101,109,98,108,101,69,114,114,111,114,95,79,118,101,114,108,97,112,0,84,114,121,105,110,103,32,116,111,32,97,115,115,101,109,98,108,101,32,111,118,101,114,32,101,120,105,115,116,105,110,103,32,99,111,100,101,46,0,51,53,65,115,109,69,120,99,101,112,116,105,111,110,95,65,115,115,101,109,98,108,101,69,114,114,111,114,95,71,117,97,114,100,72,105,116,0,71,117,97,114,100,32,112,111,105,110,116,32,104,105,116,46,0,51,56,65,115,109,69,120,99,101,112,116,105,111,110,95,65,115,115,101,109,98,108,101,69,114,114,111,114,95,79,117,116,79,102,77,101,109,111,114,121,0,79,117,116,32,111,102,32,109,101,109,111,114,121,46,0,65,115,115,101,109,98,108,101,49,0,111,112,99,111,100,101,32,60,32,48,120,49,48,48,0,52,51,65,115,109,69,120,99,101,112,116,105,111,110,95,65,115,115,101,109,98,108,101,69,114,114,111,114,95,73,110,99,111,110,115,105,115,116,101,110,116,67,111,100,101,0,65,115,115,101,109,98,108,101,100,32,111,98,106,101,99,116,32,99,111,100,101,32,104,97,115,32,99,104,97,110,103,101,100,32,98,101,116,119,101,101,110,32,49,115,116,32,97,110,100,32,50,110,100,32,112,97,115,115,46,32,72,97,115,32,97,32,122,101,114,111,45,112,97,103,101,32,115,121,109,98,111,108,32,98,101,101,110,32,102,111,114,119,97,114,100,45,100,101,99,108,97,114,101,100,63,0,65,115,115,101,109,98,108,101,50,0,118,97,108,32,60,32,48,120,49,48,48,0,65,115,115,101,109,98,108,101,51,0,97,100,100,114,32,60,32,48,120,49,48,48,48,48,0,97,100,100,114,32,62,61,32,48,32,38,38,32,97,100,100,114,32,60,32,48,120,49,48,48,48,48,0,83,101,116,71,117,97,114,100,0,98,105,110,102,105,108,101,46,103,99,111,117,110,116,40,41,32,61,61,32,49,0,73,110,99,66,105,110,0,51,53,65,115,109,69,120,99,101,112,116,105,111,110,95,65,115,115,101,109,98,108,101,69,114,114,111,114,95,70,105,108,101,82,101,97,100,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,102,105,108,101,46,0,51,53,65,115,109,69,120,99,101,112,116,105,111,110,95,65,115,115,101,109,98,108,101,69,114,114,111,114,95,70,105,108,101,79,112,101,110,0,69,114,114,111,114,32,111,112,101,110,105,110,103,32,102,105,108,101,46,0,97,115,99,105,105,32,62,32,51,49,32,38,38,32,97,115,99,105,105,32,60,32,49,50,55,0,83,101,116,77,97,112,112,105,110,103,0,109,97,112,112,101,100,32,62,61,32,48,32,38,38,32,109,97,112,112,101,100,32,60,32,50,53,54,0,71,101,116,77,97,112,112,105,110,103,0,109,95,103,73,110,115,116,97,110,99,101,32,61,61,32,78,85,76,76,0,115,121,109,98,111,108,116,97,98,108,101,46,99,112,112,0,67,114,101,97,116,101,0,33,73,115,83,121,109,98,111,108,68,101,102,105,110,101,100,40,32,115,121,109,98,111,108,32,41,0,65,100,100,83,121,109,98,111,108,0,68,101,115,116,114,111,121,0,73,115,83,121,109,98,111,108,68,101,102,105,110,101,100,40,32,115,121,109,98,111,108,32,41,0,71,101,116,83,121,109,98,111,108,0,67,104,97,110,103,101,83,121,109,98,111,108,0,82,101,109,111,118,101,83,121,109,98,111,108,0,91,123,0,125,93,0,44,0,39,58,0,92,0,59,0,58,0,67,80,85,0,79,82,71,0,73,78,67,76,85,68,69,0,69,81,85,66,0,69,81,85,68,0,69,81,85,83,0,69,81,85,87,0,69,76,73,70,0,69,78,68,73,70,0,65,76,73,71,78,0,83,75,73,80,84,79,0,83,75,73,80,0,71,85,65,82,68,0,73,78,67,66,73,78,0,123,0,125,0,77,65,80,67,72,65,82,0,80,85,84,70,73,76,69,0,80,85,84,66,65,83,73,67,0,77,65,67,82,79,0,69,78,68,77,65,67,82,79,0,67,79,80,89,66,76,79,67,75,0,109,95,103,73,110,115,116,97,110,99,101,32,33,61,32,78,85,76,76,0,46,47,103,108,111,98,97,108,100,97,116,97,46,104,0,73,110,115,116,97,110,99,101,0,46,47,111,98,106,101,99,116,99,111,100,101,46,104,0,51,53,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,79,117,116,79,102,82,97,110,103,101,0,79,117,116,32,111,102,32,114,97,110,103,101,46,0,50,50,65,115,109,69,120,99,101,112,116,105,111,110,95,85,115,101,114,69,114,114,111,114,0,51,55,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,77,105,115,115,105,110,103,81,117,111,116,101,0,85,110,116,101,114,109,105,110,97,116,101,100,32,115,116,114,105,110,103,46,0,46,47,109,97,99,114,111,46,104,0,10,0,52,50,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,73,110,118,97,108,105,100,83,121,109,98,111,108,78,97,109,101,0,73,110,118,97,108,105,100,32,115,121,109,98,111,108,32,110,97,109,101,59,32,109,117,115,116,32,115,116,97,114,116,32,119,105,116,104,32,97,32,108,101,116,116,101,114,32,97,110,100,32,99,111,110,116,97,105,110,32,111,110,108,121,32,108,101,116,116,101,114,115,44,32,110,117,109,98,101,114,115,32,97,110,100,32,117,110,100,101,114,115,99,111,114,101,46,0,51,55,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,77,105,115,115,105,110,103,67,111,109,109,97,0,77,105,115,115,105,110,103,32,99,111,109,109,97,46,0,52,49,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,73,110,118,97,108,105,100,77,97,99,114,111,78,97,109,101,0,73,110,118,97,108,105,100,32,109,97,99,114,111,32,110,97,109,101,59,32,109,117,115,116,32,115,116,97,114,116,32,119,105,116,104,32,97,32,108,101,116,116,101,114,32,97,110,100,32,99,111,110,116,97,105,110,32,111,110,108,121,32,108,101,116,116,101,114,115,44,32,110,117,109,98,101,114,115,32,97,110,100,32,117,110,100,101,114,115,99,111,114,101,46,0,52,51,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,68,117,112,108,105,99,97,116,101,77,97,99,114,111,78,97,109,101,0,77,97,99,114,111,32,110,97,109,101,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,46,0,114,98,0,32,32,32,32,32,0,51,56,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,66,97,99,107,119,97,114,100,115,83,107,105,112,0,65,116,116,101,109,112,116,101,100,32,116,111,32,115,107,105,112,32,98,97,99,107,119,97,114,100,115,32,116,111,32,97,110,32,97,100,100,114,101,115,115,46,0,51,55,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,66,97,100,65,108,105,103,110,109,101,110,116,0,66,97,100,32,97,108,105,103,110,109,101,110,116,46,0,46,47,115,121,109,98,111,108,116,97,98,108,101,46,104,0,51,50,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,66,97,100,83,116,101,112,0,83,116,101,112,32,118,97,108,117,101,32,99,97,110,110,111,116,32,98,101,32,122,101,114,111,46,0,83,97,118,105,110,103,32,102,105,108,101,32,39,0,39,0,119,98,0,51,49,65,115,109,69,120,99,101,112,116,105,111,110,95,70,105,108,101,69,114,114,111,114,95,87,114,105,116,101,79,98,106,0,80,114,111,98,108,101,109,32,119,114,105,116,105,110,103,32,116,111,32,111,98,106,101,99,116,32,102,105,108,101,46,0,51,48,65,115,109,69,120,99,101,112,116,105,111,110,95,70,105,108,101,69,114,114,111,114,95,79,112,101,110,79,98,106,0,67,111,117,108,100,32,110,111,116,32,111,112,101,110,32,111,98,106,101,99,116,32,102,105,108,101,32,102,111,114,32,119,114,105,116,105,110,103,46,0,51,53,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,78,111,65,110,111,110,83,97,118,101,0,67,97,110,110,111,116,32,115,112,101,99,105,102,121,32,83,65,86,69,32,119,105,116,104,111,117,116,32,97,32,102,105,108,101,110,97,109,101,32,105,102,32,110,111,32,100,101,102,97,117,108,116,32,111,117,116,112,117,116,32,102,105,108,101,110,97,109,101,32,104,97,115,32,98,101,101,110,32,115,112,101,99,105,102,105,101,100,46,0,52,48,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,79,110,108,121,79,110,101,65,110,111,110,83,97,118,101,0,67,97,110,32,111,110,108,121,32,117,115,101,32,83,65,86,69,32,119,105,116,104,111,117,116,32,97,32,102,105,108,101,110,97,109,101,32,111,110,99,101,32,112,101,114,32,112,114,111,106,101,99,116,46,0,32,32,32,0,32,0,46,46,46,0,73,110,99,108,117,100,105,110,103,32,102,105,108,101,32,0,51,54,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,67,97,110,116,73,110,99,108,117,100,101,0,67,97,110,110,111,116,32,105,110,99,108,117,100,101,32,97,32,115,111,117,114,99,101,32,102,105,108,101,32,119,105,116,104,105,110,32,97,32,70,79,82,32,108,111,111,112,32,111,114,32,98,114,97,99,101,100,32,98,108,111,99,107,46,0,80,37,0,38,0,52,50,65,115,109,69,120,99,101,112,116,105,111,110,95,83,121,110,116,97,120,69,114,114,111,114,95,83,101,99,111,110,100,80,97,115,115,80,114,111,98,108,101,109,0,70,97,116,97,108,32,101,114,114,111,114,58,32,116,104,101,32,115,101,99,111,110,100,32,97,115,115,101,109,98,108,101,114,32,112,97,115,115,32,104,97,115,32,103,101,110,101,114,97,116,101,100,32,100,105,102,102,101,114,101,110,116,32,99,111,100,101,32,116,111,32,116,104,101,32,102,105,114,115,116,46,0,65,78,68,0,68,73,86,0,69,79,82,0,77,79,68,0,79,82,0,69,82,82,79,82,0,76,73,78,69,0,79,70,70,0,83,84,69,80,0,83,80,67,0,84,65,66,40,0,69,76,83,69,0,84,72,69,78,0,79,80,69,78,73,78,0,80,84,82,0,80,65,71,69,0,84,73,77,69,0,76,79,77,69,77,0,72,73,77,69,77,0,65,66,83,0,65,67,83,0,65,68,86,65,76,0,65,83,67,0,65,83,78,0,65,84,78,0,66,71,69,84,0,67,79,83,0,67,79,85,78,84,0,68,69,71,0,69,82,76,0,69,82,82,0,69,86,65,76,0,69,88,80,0,69,88,84,0,70,65,76,83,69,0,70,78,0,71,69,84,0,73,78,75,69,89,0,73,78,83,84,82,40,0,73,78,84,0,76,69,78,0,76,78,0,76,79,71,0,78,79,84,0,79,80,69,78,85,80,0,79,80,69,78,79,85,84,0,80,73,0,80,79,73,78,84,40,0,80,79,83,0,82,65,68,0,82,78,68,0,83,71,78,0,83,73,78,0,83,81,82,0,84,65,78,0,84,79,0,84,82,85,69,0,85,83,82,0,86,65,76,0,86,80,79,83,0,67,72,82,36,0,71,69,84,36,0,73,78,75,69,89,36,0,76,69,70,84,36,40,0,77,73,68,36,40,0,82,73,71,72,84,36,40,0,83,84,82,36,0,83,84,82,73,78,71,36,40,0,69,79,70,0,65,85,84,79,0,68,69,76,69,84,69,0,76,79,65,68,0,76,73,83,84,0,78,69,87,0,79,76,68,0,82,69,78,85,77,66,69,82,0,83,65,86,69,0,83,79,85,78,68,0,66,80,85,84,0,67,65,76,76,0,67,72,65,73,78,0,67,76,69,65,82,0,67,76,79,83,69,0,67,76,71,0,67,76,83,0,68,65,84,65,0,68,69,70,0,68,73,77,0,68,82,65,87,0,69,78,68,0,69,78,68,80,82,79,67,0,69,78,86,69,76,79,80,69,0,70,79,82,0,71,79,83,85,66,0,71,79,84,79,0,71,67,79,76,0,73,70,0,73,78,80,85,84,0,76,69,84,0,76,79,67,65,76,0,77,79,68,69,0,77,79,86,69,0,78,69,88,84,0,79,78,0,86,68,85,0,80,76,79,84,0,80,82,73,78,84,0,80,82,79,67,0,82,69,65,68,0,82,69,77,0,82,69,80,69,65,84,0,82,69,80,79,82,84,0,82,69,83,84,79,82,69,0,82,69,84,85,82,78,0,82,85,78,0,83,84,79,80,0,67,79,76,79,85,82,0,84,82,65,67,69,0,85,78,84,73,76,0,87,73,68,84,72,0,79,83,67,76,73,0,77,97,108,102,111,114,109,101,100,32,115,116,114,105,110,103,32,108,105,116,101,114,97,108,32,111,110,32,108,105,110,101,32,37,100,0,114,116,0,77,97,108,102,111,114,109,101,100,32,108,105,110,101,32,110,117,109,98,101,114,32,97,116,32,108,105,110,101,32,37,100,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,78,65,78,0,46,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20484);
/* memory initializer */ allocate([114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,4,7,3,6,5,0,80,79,83,73,88,0,114,119,97,0,105,110,102,105,110,105,116,121,0,110,97,110,0,78,83,116,51,95,95,50,56,105,111,115,95,98,97,115,101,69,0,78,83,116,51,95,95,50,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,50,57,98,97,115,105,99,95,105,111,115,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,78,83,116,51,95,95,50,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,50,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,78,83,116,51,95,95,50,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,50,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,78,83,116,51,95,95,50,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,50,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,78,83,116,51,95,95,50,56,105,111,115,95,98,97,115,101,55,102,97,105,108,117,114,101,69,0,117,110,115,112,101,99,105,102,105,101,100,32,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,105,111,115,116,114,101,97,109,0,78,83,116,51,95,95,50,49,57,95,95,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,69,0,105,111,115,95,98,97,115,101,58,58,99,108,101,97,114,0,78,83,116,51,95,95,50,49,49,95,95,115,116,100,111,117,116,98,117,102,73,119,69,69,0,78,83,116,51,95,95,50,49,49,95,95,115,116,100,111,117,116,98,117,102,73,99,69,69,0,117,110,115,117,112,112,111,114,116,101,100,32,108,111,99,97,108,101,32,102,111,114,32,115,116,97,110,100,97,114,100,32,105,110,112,117,116,0,78,83,116,51,95,95,50,49,48,95,95,115,116,100,105,110,98,117,102,73,119,69,69,0,78,83,116,51,95,95,50,49,48,95,95,115,116,100,105,110,98,117,102,73,99,69,69,0,78,83,116,51,95,95,50,55,99,111,108,108,97,116,101,73,99,69,69,0,78,83,116,51,95,95,50,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,78,83,116,51,95,95,50,55,99,111,108,108,97,116,101,73,119,69,69,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,37,112,0,67,0,78,83,116,51,95,95,50,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,50,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,78,83,116,51,95,95,50,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,78,83,116,51,95,95,50,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,50,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,37,112,0,0,0,0,76,0,108,108,0,37,0,0,0,0,0,108,0,78,83,116,51,95,95,50,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,50,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,78,83,116,51,95,95,50,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,78,83,116,51,95,95,50,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,50,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,37,72,58,37,77,58,37,83,0,37,109,47,37,100,47,37,121,0,37,73,58,37,77,58,37,83,32,37,112,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,65,77,0,80,77,0,74,97,110,117,97,114,121,0,70,101,98,114,117,97,114,121,0,77,97,114,99,104,0,65,112,114,105,108,0,77,97,121,0,74,117,110,101,0,74,117,108,121,0,65,117,103,117,115,116,0,83,101,112,116,101,109,98,101,114,0,79,99,116,111,98,101,114,0,78,111,118,101,109,98,101,114,0,68,101,99,101,109,98,101,114,0,74,97,110,0,70,101,98,0,77,97,114,0,65,112,114,0,74,117,110,0,74,117,108,0,65,117,103,0,83,101,112,0,79,99,116,0,78,111,118,0,68,101,99,0,83,117,110,100,97,121,0,77,111,110,100,97,121,0,84,117,101,115,100,97,121,0,87,101,100,110,101,115,100,97,121,0,84,104,117,114,115,100,97,121,0,70,114,105,100,97,121,0,83,97,116,117,114,100,97,121,0,83,117,110,0,77,111,110,0,84,117,101,0,87,101,100,0,84,104,117,0,70,114,105,0,83,97,116,0,37,109,47,37,100,47,37,121,37,89,45,37,109,45,37,100,37,73,58,37,77,58,37,83,32,37,112,37,72,58,37,77,37,72,58,37,77,58,37,83,37,72,58,37,77,58,37,83,78,83,116,51,95,95,50,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,50,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,78,83,116,51,95,95,50,57,116,105,109,101,95,98,97,115,101,69,0,78,83,116,51,95,95,50,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,50,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,78,83,116,51,95,95,50,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,50,49,48,95,95,116,105,109,101,95,112,117,116,69,0,108,111,99,97,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,83,116,51,95,95,50,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,50,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,78,83,116,51,95,95,50,49,48,109,111,110,101,121,95,98,97,115,101,69,0,78,83,116,51,95,95,50,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,78,83,116,51,95,95,50,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,78,83,116,51,95,95,50,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,48,49,50,51,52,53,54,55,56,57,0,37,76,102,0,109,111,110,101,121,95,103,101,116,32,101,114,114,111,114,0,78,83,116,51,95,95,50,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,50,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,48,49,50,51,52,53,54,55,56,57,0,78,83,116,51,95,95,50,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,50,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,37,46,48,76,102,0,78,83,116,51,95,95,50,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,50,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,78,83,116,51,95,95,50,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,50,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,78,83,116,51,95,95,50,56,109,101,115,115,97,103,101,115,73,99,69,69,0,78,83,116,51,95,95,50,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,78,83,116,51,95,95,50,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,78,83,116,51,95,95,50,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,50,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,78,83,116,51,95,95,50,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,78,83,116,51,95,95,50,56,109,101,115,115,97,103,101,115,73,119,69,69,0,78,83,116,51,95,95,50,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,50,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,50,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,50,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,78,83,116,51,95,95,50,53,99,116,121,112,101,73,99,69,69,0,78,83,116,51,95,95,50,49,48,99,116,121,112,101,95,98,97,115,101,69,0,78,83,116,51,95,95,50,53,99,116,121,112,101,73,119,69,69,0,102,97,108,115,101,0,116,114,117,101,0,78,83,116,51,95,95,50,56,110,117,109,112,117,110,99,116,73,99,69,69,0,78,83,116,51,95,95,50,56,110,117,109,112,117,110,99,116,73,119,69,69,0,118,101,99,116,111,114,0,78,83,116,51,95,95,50,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,98,97,115,105,99,95,115,116,114,105,110,103,0,78,83,116,51,95,95,50,49,52,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,78,83,116,51,95,95,50,49,50,115,121,115,116,101,109,95,101,114,114,111,114,69,0,78,83,116,51,95,95,50,49,50,95,95,100,111,95,109,101,115,115,97,103,101,69,0,58,32,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,116,101,114,109,105,110,97,116,105,110,103,0,117,110,99,97,117,103,104,116,0,83,116,57,101,120,99,101,112,116,105,111,110,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,83,116,57,116,121,112,101,95,105,110,102,111,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,83,116,57,98,97,100,95,97,108,108,111,99,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,83,116,49,50,111,117,116,95,111,102,95,114,97,110,103,101,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,83,116,56,98,97,100,95,99,97,115,116,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+30724);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit() {
  return _atexit.apply(null, arguments)
  }

   
  Module["_i64Subtract"] = _i64Subtract;

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

   
  Module["_memset"] = _memset;

   
  Module["_pthread_mutex_lock"] = _pthread_mutex_lock;

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  function _abort() {
      Module['abort']();
    }

  
  
  function _free() {
  }
  Module["_free"] = _free;function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }function ___cxa_end_catch() {
      // Clear state flag.
      asm['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }


  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }

  function ___lock() {}

  function ___unlock() {}

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

   
  Module["_i64Add"] = _i64Add;

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }


  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

   
  Module["_pthread_cond_broadcast"] = _pthread_cond_broadcast;

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function ___cxa_find_matching_catch_2() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }

  function ___cxa_find_matching_catch_3() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }

  function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function _llvm_eh_typeid_for(type) {
      return type;
    }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC); 
  Module["_llvm_cttz_i32"] = _llvm_cttz_i32; 
  Module["___udivmoddi4"] = ___udivmoddi4; 
  Module["___udivdi3"] = ___udivdi3;

  
   
  Module["___muldsi3"] = ___muldsi3; 
  Module["___muldi3"] = ___muldi3;

  var _llvm_pow_f64=Math_pow;

  function ___cxa_call_unexpected(exception) {
      Module.printErr('Unexpected exception thrown, this is not properly supported - aborting');
      ABORT = true;
      throw exception;
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

   
  Module["_memmove"] = _memmove;

  function ___gxx_personality_v0() {
    }

   
  Module["___uremdi3"] = ___uremdi3;

  function _pthread_cond_wait() { return 0; }

  function ___cxa_rethrow() {
      var ptr = EXCEPTIONS.caught.pop();
      if (!EXCEPTIONS.infos[ptr].rethrown) {
        // Only pop if the corresponding push was through rethrow_primary_exception
        EXCEPTIONS.caught.push(ptr)
        EXCEPTIONS.infos[ptr].rethrown = true;
      }
      EXCEPTIONS.last = ptr;
      throw ptr;
    }

   
  Module["_pthread_mutex_unlock"] = _pthread_mutex_unlock;

   
  Module["_sbrk"] = _sbrk;


   
  Module["_pthread_self"] = _pthread_self;

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var ___dso_handle=STATICTOP; STATICTOP += 16;;
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");



function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viidi(x) { Module["printErr"]("Invalid function pointer called with signature 'viidi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viidddiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viidddiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_di(x) { Module["printErr"]("Invalid function pointer called with signature 'di'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diii(x) { Module["printErr"]("Invalid function pointer called with signature 'diii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_dii(x) { Module["printErr"]("Invalid function pointer called with signature 'dii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viid(x) { Module["printErr"]("Invalid function pointer called with signature 'viid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viidi(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viidi"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  try {
    return Module["dynCall_iiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viidddiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    Module["dynCall_viidddiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  try {
    Module["dynCall_viiiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_di(index,a1) {
  try {
    return Module["dynCall_di"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  try {
    Module["dynCall_viiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_diii(index,a1,a2,a3) {
  try {
    return Module["dynCall_diii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_dii(index,a1,a2) {
  try {
    return Module["dynCall_dii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viid(index,a1,a2,a3) {
  try {
    Module["dynCall_viid"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiid(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiid"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_iiiiiid": nullFunc_iiiiiid, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_ii": nullFunc_ii, "nullFunc_viidi": nullFunc_viidi, "nullFunc_iiiiiiiiiiii": nullFunc_iiiiiiiiiiii, "nullFunc_viidddiii": nullFunc_viidddiii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_di": nullFunc_di, "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_viiiiiiiiii": nullFunc_viiiiiiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_diii": nullFunc_diii, "nullFunc_dii": nullFunc_dii, "nullFunc_i": nullFunc_i, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_viid": nullFunc_viid, "nullFunc_iiiiid": nullFunc_iiiiid, "nullFunc_viiii": nullFunc_viiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_iiiiiid": invoke_iiiiiid, "invoke_viiiii": invoke_viiiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_ii": invoke_ii, "invoke_viidi": invoke_viidi, "invoke_iiiiiiiiiiii": invoke_iiiiiiiiiiii, "invoke_viidddiii": invoke_viidddiii, "invoke_iiii": invoke_iiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_di": invoke_di, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiiiiiiii": invoke_viiiiiiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_diii": invoke_diii, "invoke_dii": invoke_dii, "invoke_i": invoke_i, "invoke_iiiii": invoke_iiiii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_viid": invoke_viid, "invoke_iiiiid": invoke_iiiiid, "invoke_viiii": invoke_viiii, "_pthread_cleanup_pop": _pthread_cleanup_pop, "_strftime": _strftime, "_pthread_cond_wait": _pthread_cond_wait, "___lock": ___lock, "_llvm_pow_f64": _llvm_pow_f64, "_pthread_key_create": _pthread_key_create, "_abort": _abort, "_pthread_cleanup_push": _pthread_cleanup_push, "___gxx_personality_v0": ___gxx_personality_v0, "___assert_fail": ___assert_fail, "___cxa_free_exception": ___cxa_free_exception, "___cxa_find_matching_catch_2": ___cxa_find_matching_catch_2, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "__addDays": __addDays, "_strftime_l": _strftime_l, "___setErrNo": ___setErrNo, "_llvm_eh_typeid_for": _llvm_eh_typeid_for, "___cxa_allocate_exception": ___cxa_allocate_exception, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___cxa_end_catch": ___cxa_end_catch, "___resumeException": ___resumeException, "___cxa_find_matching_catch_3": ___cxa_find_matching_catch_3, "___cxa_begin_catch": ___cxa_begin_catch, "_pthread_getspecific": _pthread_getspecific, "__arraySum": __arraySum, "___syscall221": ___syscall221, "___cxa_call_unexpected": ___cxa_call_unexpected, "_pthread_once": _pthread_once, "___syscall54": ___syscall54, "___unlock": ___unlock, "__isLeapYear": __isLeapYear, "_pthread_setspecific": _pthread_setspecific, "___cxa_atexit": ___cxa_atexit, "___cxa_throw": ___cxa_throw, "___cxa_rethrow": ___cxa_rethrow, "___syscall6": ___syscall6, "___syscall5": ___syscall5, "___cxa_pure_virtual": ___cxa_pure_virtual, "_time": _time, "_atexit": _atexit, "___syscall140": ___syscall140, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "___dso_handle": ___dso_handle };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ___dso_handle=env.___dso_handle|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_iiiiiid=env.nullFunc_iiiiiid;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viidi=env.nullFunc_viidi;
  var nullFunc_iiiiiiiiiiii=env.nullFunc_iiiiiiiiiiii;
  var nullFunc_viidddiii=env.nullFunc_viidddiii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_di=env.nullFunc_di;
  var nullFunc_iiiiiiiii=env.nullFunc_iiiiiiiii;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var nullFunc_viiiiiiiiii=env.nullFunc_viiiiiiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_diii=env.nullFunc_diii;
  var nullFunc_dii=env.nullFunc_dii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_viid=env.nullFunc_viid;
  var nullFunc_iiiiid=env.nullFunc_iiiiid;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_iiiiiid=env.invoke_iiiiiid;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_viidi=env.invoke_viidi;
  var invoke_iiiiiiiiiiii=env.invoke_iiiiiiiiiiii;
  var invoke_viidddiii=env.invoke_viidddiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_di=env.invoke_di;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiiiiiiii=env.invoke_viiiiiiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_diii=env.invoke_diii;
  var invoke_dii=env.invoke_dii;
  var invoke_i=env.invoke_i;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_viid=env.invoke_viid;
  var invoke_iiiiid=env.invoke_iiiiid;
  var invoke_viiii=env.invoke_viiii;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var _strftime=env._strftime;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var ___lock=env.___lock;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _pthread_key_create=env._pthread_key_create;
  var _abort=env._abort;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___assert_fail=env.___assert_fail;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_find_matching_catch_2=env.___cxa_find_matching_catch_2;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var __addDays=env.__addDays;
  var _strftime_l=env._strftime_l;
  var ___setErrNo=env.___setErrNo;
  var _llvm_eh_typeid_for=env._llvm_eh_typeid_for;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var ___resumeException=env.___resumeException;
  var ___cxa_find_matching_catch_3=env.___cxa_find_matching_catch_3;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _pthread_getspecific=env._pthread_getspecific;
  var __arraySum=env.__arraySum;
  var ___syscall221=env.___syscall221;
  var ___cxa_call_unexpected=env.___cxa_call_unexpected;
  var _pthread_once=env._pthread_once;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var __isLeapYear=env.__isLeapYear;
  var _pthread_setspecific=env._pthread_setspecific;
  var ___cxa_atexit=env.___cxa_atexit;
  var ___cxa_throw=env.___cxa_throw;
  var ___cxa_rethrow=env.___cxa_rethrow;
  var ___syscall6=env.___syscall6;
  var ___syscall5=env.___syscall5;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var _time=env._time;
  var _atexit=env._atexit;
  var ___syscall140=env.___syscall140;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function __ZN10SourceCode7ProcessEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i59 = 0, $$0$i$i76 = 0, $$0$i$i93 = 0, $$0$i100 = 0, $$0$i105 = 0, $$0$i96 = 0, $$02$i = 0, $$02$i45 = 0, $$02$i62 = 0, $$02$i79 = 0, $$026 = 0, $$03$i = 0, $$03$i104 = 0, $$03$i99 = 0, $$036 = 0, $$07$i$i = 0, $$07$i$i58 = 0, $$07$i$i75 = 0;
 var $$07$i$i92 = 0, $$1 = 0, $$127 = 0, $$2110 = 0, $$228109 = 0, $$3 = 0, $$329 = 0, $$4 = 0, $$430 = 0, $$6 = 0, $$632 = 0, $$7 = 0, $$733 = 0, $$9 = 0, $$935 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $eh$lpad$body$indexZ2D = 0, $eh$lpad$body53$index7Z2D = 0, $eh$lpad$body53$indexZ2D = 0, $eh$lpad$body70$index12Z2D = 0, $eh$lpad$body70$indexZ2D = 0, $eh$lpad$body87$index17Z2D = 0, $eh$lpad$body87$indexZ2D = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1840|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1840|0);
 $1 = sp + 1820|0;
 $2 = sp + 1808|0;
 $3 = sp + 1796|0;
 $4 = sp + 1784|0;
 $5 = sp;
 $6 = sp + 1772|0;
 $7 = sp + 1760|0;
 $8 = sp + 1724|0;
 $9 = sp + 1712|0;
 $10 = sp + 1676|0;
 $11 = sp + 1664|0;
 $12 = sp + 1628|0;
 $13 = sp + 1616|0;
 $14 = sp + 1580|0;
 $15 = sp + 1568|0;
 $16 = ((($0)) + 18440|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($0)) + 18444|0);
 HEAP32[$18>>2] = $17;
 $19 = ((($0)) + 18448|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($0)) + 18452|0);
 HEAP32[$21>>2] = $20;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
 $22 = ((($0)) + 24616|0);
 $23 = ((($0)) + 24620|0);
 while(1) {
  $24 = HEAP32[$0>>2]|0;
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  __THREW__ = 0;
  $27 = (invoke_iii($26|0,($0|0),($4|0))|0);
  $28 = __THREW__; __THREW__ = 0;
  $29 = $28&1;
  if ($29) {
   label = 11;
   break;
  }
  $30 = HEAP32[$27>>2]|0;
  $31 = ((($30)) + -12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($27) + ($32)|0);
  $34 = ((($33)) + 16|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 & 5;
  $37 = ($36|0)==(0);
  if (!($37)) {
   label = 30;
   break;
  }
  __THREW__ = 0;
  invoke_vii(634,($4|0),8);
  $38 = __THREW__; __THREW__ = 0;
  $39 = $38&1;
  if ($39) {
   label = 11;
   break;
  }
  __THREW__ = 0;
  invoke_vii(635,($6|0),($4|0));
  $40 = __THREW__; __THREW__ = 0;
  $41 = $40&1;
  if ($41) {
   label = 14;
   break;
  }
  __THREW__ = 0;
  invoke_viii(636,($5|0),($0|0),($6|0));
  $42 = __THREW__; __THREW__ = 0;
  $43 = $42&1;
  if ($43) {
   label = 15;
   break;
  }
  __THREW__ = 0;
  invoke_vi(637,($6|0));
  $44 = __THREW__; __THREW__ = 0;
  $45 = $44&1;
  if ($45) {
   label = 14;
   break;
  }
  __THREW__ = 0;
  invoke_vi(638,($5|0));
  $46 = __THREW__; __THREW__ = 0;
  $47 = $46&1;
  if ($47) {
   label = 16;
   break;
  }
  __THREW__ = 0;
  invoke_vi(639,($5|0));
  $48 = __THREW__; __THREW__ = 0;
  $49 = $48&1;
  if ($49) {
   label = 17;
   break;
  }
  $50 = HEAP32[$22>>2]|0;
  $51 = (($50) + 1)|0;
  HEAP32[$22>>2] = $51;
  $52 = HEAP32[$0>>2]|0;
  $53 = ((($52)) + 8|0);
  $54 = HEAP32[$53>>2]|0;
  __THREW__ = 0;
  $55 = (invoke_ii($54|0,($0|0))|0);
  $56 = __THREW__; __THREW__ = 0;
  $57 = $56&1;
  if ($57) {
   label = 11;
   break;
  }
  HEAP32[$23>>2] = $55;
 }
 L12: do {
  if ((label|0) == 11) {
   $58 = ___cxa_find_matching_catch_2()|0;
   $59 = tempRet0;
   $lpad$phi$index = $58;$lpad$phi$index2 = $59;
   label = 13;
  }
  else if ((label|0) == 14) {
   $62 = ___cxa_find_matching_catch_3(472|0)|0;
   $63 = tempRet0;
   $$1 = $62;$$127 = $63;
   label = 19;
  }
  else if ((label|0) == 15) {
   $64 = ___cxa_find_matching_catch_3(472|0)|0;
   $65 = tempRet0;
   __THREW__ = 0;
   invoke_vi(637,($6|0));
   $66 = __THREW__; __THREW__ = 0;
   $67 = $66&1;
   if (!($67)) {
    $$1 = $64;$$127 = $65;
    label = 19;
   }
  }
  else if ((label|0) == 16) {
   $68 = ___cxa_find_matching_catch_3(472|0)|0;
   $69 = tempRet0;
   __THREW__ = 0;
   invoke_vi(639,($5|0));
   $70 = __THREW__; __THREW__ = 0;
   $71 = $70&1;
   if (!($71)) {
    $$0 = $68;$$026 = $69;
    label = 18;
   }
  }
  else if ((label|0) == 17) {
   $72 = ___cxa_find_matching_catch_3(472|0)|0;
   $73 = tempRet0;
   $$0 = $72;$$026 = $73;
   label = 18;
  }
  else if ((label|0) == 30) {
   $104 = HEAP32[$0>>2]|0;
   $105 = ((($104)) + 16|0);
   $106 = HEAP32[$105>>2]|0;
   __THREW__ = 0;
   $107 = (invoke_ii($106|0,($0|0))|0);
   $108 = __THREW__; __THREW__ = 0;
   $109 = $108&1;
   if ($109) {
    $60 = ___cxa_find_matching_catch_2()|0;
    $61 = tempRet0;
    $lpad$phi$index = $60;$lpad$phi$index2 = $61;
    label = 13;
    break;
   }
   if (!($107)) {
    $110 = (___cxa_allocate_exception(16)|0);
    $111 = ((($0)) + 24604|0);
    __THREW__ = 0;
    invoke_vii(635,($7|0),($111|0));
    $112 = __THREW__; __THREW__ = 0;
    $113 = $112&1;
    if ($113) {
     $118 = ___cxa_find_matching_catch_2()|0;
     $119 = tempRet0;
     $$2110 = $118;$$228109 = $119;
    } else {
     HEAP32[$110>>2] = (4628);
     $114 = ((($110)) + 4|0);
     __THREW__ = 0;
     invoke_vii(635,($114|0),($7|0));
     $115 = __THREW__; __THREW__ = 0;
     $116 = $115&1;
     if ($116) {
      $$036 = 1;
     } else {
      HEAP32[$110>>2] = (3028);
      __THREW__ = 0;
      invoke_viii(644,($110|0),(16|0),(3|0));
      $117 = __THREW__; __THREW__ = 0;
      $$036 = 0;
     }
     $120 = ___cxa_find_matching_catch_2()|0;
     $121 = tempRet0;
     __THREW__ = 0;
     invoke_vi(637,($7|0));
     $122 = __THREW__; __THREW__ = 0;
     $123 = $122&1;
     if ($123) {
      break;
     }
     if ($$036) {
      $$2110 = $120;$$228109 = $121;
     } else {
      $$9 = $120;$$935 = $121;
      label = 177;
      break;
     }
    }
    ___cxa_free_exception(($110|0));
    $$9 = $$2110;$$935 = $$228109;
    label = 177;
    break;
   }
   $124 = HEAP32[$16>>2]|0;
   $125 = HEAP32[$18>>2]|0;
   $126 = ($124|0)==($125|0);
   if (!($126)) {
    $127 = (($124) + -1)|0;
    $128 = (((((($0)) + 8|0) + (($127*72)|0)|0)) + 32|0);
    $129 = +HEAPF64[$128>>3];
    $130 = $129 == 0.0;
    L35: do {
     if ($130) {
      $131 = (((((($0)) + 8|0) + (($127*72)|0)|0)) + 52|0);
      __THREW__ = 0;
      invoke_vii(635,($9|0),($131|0));
      $132 = __THREW__; __THREW__ = 0;
      $133 = $132&1;
      if (!($133)) {
       $134 = (((((($0)) + 8|0) + (($127*72)|0)|0)) + 64|0);
       $135 = HEAP32[$134>>2]|0;
       __THREW__ = 0;
       invoke_viii(645,($8|0),($9|0),($135|0));
       $136 = __THREW__; __THREW__ = 0;
       $137 = $136&1;
       if ($137) {
        $187 = ___cxa_find_matching_catch_2()|0;
        $188 = tempRet0;
        __THREW__ = 0;
        invoke_vi(637,($9|0));
        $189 = __THREW__; __THREW__ = 0;
        $190 = $189&1;
        if ($190) {
         break L12;
        } else {
         $$9 = $187;$$935 = $188;
         label = 177;
         break L12;
        }
       }
       __THREW__ = 0;
       invoke_vi(637,($9|0));
       $138 = __THREW__; __THREW__ = 0;
       $139 = $138&1;
       if (!($139)) {
        $140 = ((($0)) + 24604|0);
        $141 = ((($8)) + 20|0);
        $142 = ((($141)) + 11|0);
        $143 = HEAP8[$142>>0]|0;
        $144 = ($143<<24>>24)<(0);
        $145 = ((($8)) + 24|0);
        $146 = HEAP32[$145>>2]|0;
        $147 = $143&255;
        $148 = $144 ? $146 : $147;
        $149 = ($148|0)==(0);
        if ($149) {
         __THREW__ = 0;
         $150 = (invoke_iiiiii(640,($141|0),0,-1,(44984|0),0)|0);
         $151 = __THREW__; __THREW__ = 0;
         $152 = $151&1;
         if ($152) {
          $153 = ___cxa_find_matching_catch_2()|0;
          $154 = tempRet0;
          ___cxa_call_unexpected(($153|0));
          // unreachable;
         }
         $155 = ($150|0)==(0);
         if ($155) {
          __THREW__ = 0;
          (invoke_iii(641,($141|0),($140|0))|0);
          $156 = __THREW__; __THREW__ = 0;
          $157 = $156&1;
          if ($157) {
           label = 59;
          } else {
           label = 49;
          }
         } else {
          label = 49;
         }
        } else {
         label = 49;
        }
        do {
         if ((label|0) == 49) {
          $158 = ((($8)) + 32|0);
          $159 = HEAP32[$158>>2]|0;
          $160 = ($159|0)==(0);
          if ($160) {
           $161 = (((((($0)) + 8|0) + (($127*72)|0)|0)) + 68|0);
           $162 = HEAP32[$161>>2]|0;
           HEAP32[$158>>2] = $162;
          }
          $163 = (___cxa_allocate_exception(36)|0);
          HEAP32[$163>>2] = (4652);
          $164 = ((($163)) + 4|0);
          $165 = ((($8)) + 4|0);
          __THREW__ = 0;
          invoke_vii(635,($164|0),($165|0));
          $166 = __THREW__; __THREW__ = 0;
          $167 = $166&1;
          if ($167) {
           $174 = ___cxa_find_matching_catch_2()|0;
           $175 = tempRet0;
           $$0$i$i = $175;$$07$i$i = $174;
          } else {
           $168 = ((($163)) + 16|0);
           $169 = ((($8)) + 16|0);
           $170 = HEAP32[$169>>2]|0;
           HEAP32[$168>>2] = $170;
           $171 = ((($163)) + 20|0);
           __THREW__ = 0;
           invoke_vii(635,($171|0),($141|0));
           $172 = __THREW__; __THREW__ = 0;
           $173 = $172&1;
           if (!($173)) {
            $182 = ((($163)) + 32|0);
            $183 = HEAP32[$158>>2]|0;
            HEAP32[$182>>2] = $183;
            HEAP32[$163>>2] = (3052);
            __THREW__ = 0;
            invoke_viii(644,($163|0),(32|0),(7|0));
            $184 = __THREW__; __THREW__ = 0;
            label = 59;
            break;
           }
           $176 = ___cxa_find_matching_catch_2()|0;
           $177 = tempRet0;
           __THREW__ = 0;
           invoke_vi(637,($164|0));
           $178 = __THREW__; __THREW__ = 0;
           $179 = $178&1;
           if ($179) {
            $180 = ___cxa_find_matching_catch_3(0|0)|0;
            $181 = tempRet0;
            ___clang_call_terminate($180);
            // unreachable;
           } else {
            $$0$i$i = $177;$$07$i$i = $176;
           }
          }
          ___cxa_free_exception(($163|0));
          $$3 = $$07$i$i;$$329 = $$0$i$i;
         }
        } while(0);
        if ((label|0) == 59) {
         $191 = ___cxa_find_matching_catch_2()|0;
         $192 = tempRet0;
         $$3 = $191;$$329 = $192;
        }
        HEAP32[$8>>2] = (4652);
        __THREW__ = 0;
        invoke_vi(637,($141|0));
        $193 = __THREW__; __THREW__ = 0;
        $194 = $193&1;
        do {
         if ($194) {
          $198 = ___cxa_find_matching_catch_3(0|0)|0;
          $199 = tempRet0;
          $200 = ((($8)) + 4|0);
          __THREW__ = 0;
          invoke_vi(637,($200|0));
          $201 = __THREW__; __THREW__ = 0;
          $202 = $201&1;
          if ($202) {
           $205 = ___cxa_find_matching_catch_3(0|0)|0;
           $206 = tempRet0;
           ___clang_call_terminate($205);
           // unreachable;
          } else {
           $$02$i45 = $198;
          }
         } else {
          $195 = ((($8)) + 4|0);
          __THREW__ = 0;
          invoke_vi(637,($195|0));
          $196 = __THREW__; __THREW__ = 0;
          $197 = $196&1;
          if ($197) {
           $203 = ___cxa_find_matching_catch_3(0|0)|0;
           $204 = tempRet0;
           $$02$i45 = $203;
           break;
          } else {
           $$9 = $$3;$$935 = $$329;
           label = 177;
           break L12;
          }
         }
        } while(0);
        $eh$lpad$body$indexZ2D = $$02$i45;
        ___clang_call_terminate($eh$lpad$body$indexZ2D);
        // unreachable;
       }
      }
     } else {
      $207 = (((((($0)) + 8|0) + (($127*72)|0)|0)) + 52|0);
      __THREW__ = 0;
      invoke_vii(635,($11|0),($207|0));
      $208 = __THREW__; __THREW__ = 0;
      $209 = $208&1;
      if (!($209)) {
       $210 = (((((($0)) + 8|0) + (($127*72)|0)|0)) + 64|0);
       $211 = HEAP32[$210>>2]|0;
       __THREW__ = 0;
       invoke_vii(635,($3|0),($11|0));
       $212 = __THREW__; __THREW__ = 0;
       $213 = $212&1;
       L75: do {
        if ($213) {
         label = 92;
        } else {
         HEAP32[$10>>2] = (4652);
         $214 = ((($10)) + 4|0);
         __THREW__ = 0;
         invoke_vii(635,($214|0),($3|0));
         $215 = __THREW__; __THREW__ = 0;
         $216 = $215&1;
         do {
          if ($216) {
           $221 = ___cxa_find_matching_catch_2()|0;
           $222 = tempRet0;
           $$0$i96 = $222;$$03$i = $221;
          } else {
           $217 = ((($10)) + 16|0);
           HEAP32[$217>>2] = $211;
           $218 = ((($10)) + 20|0);
           ;HEAP32[$218>>2]=0|0;HEAP32[$218+4>>2]=0|0;HEAP32[$218+8>>2]=0|0;
           __THREW__ = 0;
           invoke_viii(646,($218|0),(44984|0),0);
           $219 = __THREW__; __THREW__ = 0;
           $220 = $219&1;
           if ($220) {
            $223 = ___cxa_find_matching_catch_2()|0;
            $224 = tempRet0;
            __THREW__ = 0;
            invoke_vi(637,($214|0));
            $225 = __THREW__; __THREW__ = 0;
            $226 = $225&1;
            if (!($226)) {
             $$0$i96 = $224;$$03$i = $223;
             break;
            }
            $227 = ___cxa_find_matching_catch_3(0|0)|0;
            $228 = tempRet0;
            ___clang_call_terminate($227);
            // unreachable;
           }
           $229 = ((($10)) + 32|0);
           HEAP32[$229>>2] = 0;
           __THREW__ = 0;
           invoke_vi(637,($3|0));
           $230 = __THREW__; __THREW__ = 0;
           $231 = $230&1;
           if ($231) {
            label = 92;
            break L75;
           }
           HEAP32[$10>>2] = (3076);
           __THREW__ = 0;
           invoke_vi(637,($11|0));
           $236 = __THREW__; __THREW__ = 0;
           $237 = $236&1;
           if ($237) {
            break L35;
           }
           $238 = ((($0)) + 24604|0);
           $239 = ((($218)) + 11|0);
           $240 = HEAP8[$239>>0]|0;
           $241 = ($240<<24>>24)<(0);
           $242 = ((($10)) + 24|0);
           $243 = HEAP32[$242>>2]|0;
           $244 = $240&255;
           $245 = $241 ? $243 : $244;
           $246 = ($245|0)==(0);
           if ($246) {
            __THREW__ = 0;
            $247 = (invoke_iiiiii(640,($218|0),0,-1,(44984|0),0)|0);
            $248 = __THREW__; __THREW__ = 0;
            $249 = $248&1;
            if ($249) {
             $250 = ___cxa_find_matching_catch_2()|0;
             $251 = tempRet0;
             ___cxa_call_unexpected(($250|0));
             // unreachable;
            }
            $252 = ($247|0)==(0);
            if ($252) {
             __THREW__ = 0;
             (invoke_iii(641,($218|0),($238|0))|0);
             $253 = __THREW__; __THREW__ = 0;
             $254 = $253&1;
             if ($254) {
              label = 94;
             } else {
              label = 84;
             }
            } else {
             label = 84;
            }
           } else {
            label = 84;
           }
           L92: do {
            if ((label|0) == 84) {
             $255 = HEAP32[$229>>2]|0;
             $256 = ($255|0)==(0);
             if ($256) {
              $257 = (((((($0)) + 8|0) + (($127*72)|0)|0)) + 68|0);
              $258 = HEAP32[$257>>2]|0;
              HEAP32[$229>>2] = $258;
             }
             $259 = (___cxa_allocate_exception(36)|0);
             HEAP32[$259>>2] = (4652);
             $260 = ((($259)) + 4|0);
             __THREW__ = 0;
             invoke_vii(635,($260|0),($214|0));
             $261 = __THREW__; __THREW__ = 0;
             $262 = $261&1;
             do {
              if ($262) {
               $268 = ___cxa_find_matching_catch_2()|0;
               $269 = tempRet0;
               $$0$i$i59 = $269;$$07$i$i58 = $268;
              } else {
               $263 = ((($259)) + 16|0);
               $264 = HEAP32[$217>>2]|0;
               HEAP32[$263>>2] = $264;
               $265 = ((($259)) + 20|0);
               __THREW__ = 0;
               invoke_vii(635,($265|0),($218|0));
               $266 = __THREW__; __THREW__ = 0;
               $267 = $266&1;
               if (!($267)) {
                $276 = ((($259)) + 32|0);
                $277 = HEAP32[$229>>2]|0;
                HEAP32[$276>>2] = $277;
                HEAP32[$259>>2] = (3076);
                __THREW__ = 0;
                invoke_viii(644,($259|0),(48|0),(7|0));
                $278 = __THREW__; __THREW__ = 0;
                label = 94;
                break L92;
               }
               $270 = ___cxa_find_matching_catch_2()|0;
               $271 = tempRet0;
               __THREW__ = 0;
               invoke_vi(637,($260|0));
               $272 = __THREW__; __THREW__ = 0;
               $273 = $272&1;
               if (!($273)) {
                $$0$i$i59 = $271;$$07$i$i58 = $270;
                break;
               }
               $274 = ___cxa_find_matching_catch_3(0|0)|0;
               $275 = tempRet0;
               ___clang_call_terminate($274);
               // unreachable;
              }
             } while(0);
             ___cxa_free_exception(($259|0));
             $$4 = $$07$i$i58;$$430 = $$0$i$i59;
            }
           } while(0);
           if ((label|0) == 94) {
            $283 = ___cxa_find_matching_catch_2()|0;
            $284 = tempRet0;
            $$4 = $283;$$430 = $284;
           }
           HEAP32[$10>>2] = (4652);
           __THREW__ = 0;
           invoke_vi(637,($218|0));
           $285 = __THREW__; __THREW__ = 0;
           $286 = $285&1;
           do {
            if ($286) {
             $289 = ___cxa_find_matching_catch_3(0|0)|0;
             $290 = tempRet0;
             __THREW__ = 0;
             invoke_vi(637,($214|0));
             $291 = __THREW__; __THREW__ = 0;
             $292 = $291&1;
             if ($292) {
              $295 = ___cxa_find_matching_catch_3(0|0)|0;
              $296 = tempRet0;
              ___clang_call_terminate($295);
              // unreachable;
             } else {
              $$02$i62 = $289;
             }
            } else {
             __THREW__ = 0;
             invoke_vi(637,($214|0));
             $287 = __THREW__; __THREW__ = 0;
             $288 = $287&1;
             if ($288) {
              $293 = ___cxa_find_matching_catch_3(0|0)|0;
              $294 = tempRet0;
              $$02$i62 = $293;
              break;
             } else {
              $$9 = $$4;$$935 = $$430;
              label = 177;
              break L12;
             }
            }
           } while(0);
           $eh$lpad$body$indexZ2D = $$02$i62;
           ___clang_call_terminate($eh$lpad$body$indexZ2D);
           // unreachable;
          }
         } while(0);
         __THREW__ = 0;
         invoke_vi(637,($3|0));
         $232 = __THREW__; __THREW__ = 0;
         $233 = $232&1;
         if ($233) {
          $234 = ___cxa_find_matching_catch_3(0|0)|0;
          $235 = tempRet0;
          ___clang_call_terminate($234);
          // unreachable;
         } else {
          $eh$lpad$body53$index7Z2D = $$0$i96;$eh$lpad$body53$indexZ2D = $$03$i;
         }
        }
       } while(0);
       if ((label|0) == 92) {
        $279 = ___cxa_find_matching_catch_2()|0;
        $280 = tempRet0;
        $eh$lpad$body53$index7Z2D = $280;$eh$lpad$body53$indexZ2D = $279;
       }
       __THREW__ = 0;
       invoke_vi(637,($11|0));
       $281 = __THREW__; __THREW__ = 0;
       $282 = $281&1;
       if ($282) {
        break L12;
       } else {
        $$9 = $eh$lpad$body53$indexZ2D;$$935 = $eh$lpad$body53$index7Z2D;
        label = 177;
        break L12;
       }
      }
     }
    } while(0);
    $185 = ___cxa_find_matching_catch_2()|0;
    $186 = tempRet0;
    $$9 = $185;$$935 = $186;
    label = 177;
    break;
   }
   $297 = HEAP32[$19>>2]|0;
   $298 = HEAP32[$21>>2]|0;
   $299 = ($297|0)==($298|0);
   if ($299) {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
    STACKTOP = sp;return;
   }
   $300 = (($297) + -1)|0;
   $301 = (((((($0)) + 18456|0) + (($300*24)|0)|0)) + 3|0);
   $302 = HEAP8[$301>>0]|0;
   $303 = ($302<<24>>24)==(0);
   L127: do {
    if ($303) {
     $396 = (((((($0)) + 18456|0) + (($300*24)|0)|0)) + 4|0);
     __THREW__ = 0;
     invoke_vii(635,($15|0),($396|0));
     $397 = __THREW__; __THREW__ = 0;
     $398 = $397&1;
     if (!($398)) {
      $399 = (((((($0)) + 18456|0) + (($300*24)|0)|0)) + 16|0);
      $400 = HEAP32[$399>>2]|0;
      __THREW__ = 0;
      invoke_vii(635,($1|0),($15|0));
      $401 = __THREW__; __THREW__ = 0;
      $402 = $401&1;
      L130: do {
       if ($402) {
        label = 165;
       } else {
        HEAP32[$14>>2] = (4652);
        $403 = ((($14)) + 4|0);
        __THREW__ = 0;
        invoke_vii(635,($403|0),($1|0));
        $404 = __THREW__; __THREW__ = 0;
        $405 = $404&1;
        do {
         if ($405) {
          $410 = ___cxa_find_matching_catch_2()|0;
          $411 = tempRet0;
          $$0$i105 = $411;$$03$i104 = $410;
         } else {
          $406 = ((($14)) + 16|0);
          HEAP32[$406>>2] = $400;
          $407 = ((($14)) + 20|0);
          ;HEAP32[$407>>2]=0|0;HEAP32[$407+4>>2]=0|0;HEAP32[$407+8>>2]=0|0;
          __THREW__ = 0;
          invoke_viii(646,($407|0),(44984|0),0);
          $408 = __THREW__; __THREW__ = 0;
          $409 = $408&1;
          if ($409) {
           $412 = ___cxa_find_matching_catch_2()|0;
           $413 = tempRet0;
           __THREW__ = 0;
           invoke_vi(637,($403|0));
           $414 = __THREW__; __THREW__ = 0;
           $415 = $414&1;
           if (!($415)) {
            $$0$i105 = $413;$$03$i104 = $412;
            break;
           }
           $416 = ___cxa_find_matching_catch_3(0|0)|0;
           $417 = tempRet0;
           ___clang_call_terminate($416);
           // unreachable;
          }
          $418 = ((($14)) + 32|0);
          HEAP32[$418>>2] = 0;
          __THREW__ = 0;
          invoke_vi(637,($1|0));
          $419 = __THREW__; __THREW__ = 0;
          $420 = $419&1;
          if ($420) {
           label = 165;
           break L130;
          }
          HEAP32[$14>>2] = (3124);
          __THREW__ = 0;
          invoke_vi(637,($15|0));
          $425 = __THREW__; __THREW__ = 0;
          $426 = $425&1;
          if ($426) {
           break L127;
          }
          $427 = ((($0)) + 24604|0);
          $428 = ((($407)) + 11|0);
          $429 = HEAP8[$428>>0]|0;
          $430 = ($429<<24>>24)<(0);
          $431 = ((($14)) + 24|0);
          $432 = HEAP32[$431>>2]|0;
          $433 = $429&255;
          $434 = $430 ? $432 : $433;
          $435 = ($434|0)==(0);
          if ($435) {
           __THREW__ = 0;
           $436 = (invoke_iiiiii(640,($407|0),0,-1,(44984|0),0)|0);
           $437 = __THREW__; __THREW__ = 0;
           $438 = $437&1;
           if ($438) {
            $439 = ___cxa_find_matching_catch_2()|0;
            $440 = tempRet0;
            ___cxa_call_unexpected(($439|0));
            // unreachable;
           }
           $441 = ($436|0)==(0);
           if ($441) {
            __THREW__ = 0;
            (invoke_iii(641,($407|0),($427|0))|0);
            $442 = __THREW__; __THREW__ = 0;
            $443 = $442&1;
            if ($443) {
             label = 167;
            } else {
             label = 157;
            }
           } else {
            label = 157;
           }
          } else {
           label = 157;
          }
          L147: do {
           if ((label|0) == 157) {
            $444 = HEAP32[$418>>2]|0;
            $445 = ($444|0)==(0);
            if ($445) {
             $446 = (((((($0)) + 18456|0) + (($300*24)|0)|0)) + 20|0);
             $447 = HEAP32[$446>>2]|0;
             HEAP32[$418>>2] = $447;
            }
            $448 = (___cxa_allocate_exception(36)|0);
            HEAP32[$448>>2] = (4652);
            $449 = ((($448)) + 4|0);
            __THREW__ = 0;
            invoke_vii(635,($449|0),($403|0));
            $450 = __THREW__; __THREW__ = 0;
            $451 = $450&1;
            do {
             if ($451) {
              $457 = ___cxa_find_matching_catch_2()|0;
              $458 = tempRet0;
              $$0$i$i93 = $458;$$07$i$i92 = $457;
             } else {
              $452 = ((($448)) + 16|0);
              $453 = HEAP32[$406>>2]|0;
              HEAP32[$452>>2] = $453;
              $454 = ((($448)) + 20|0);
              __THREW__ = 0;
              invoke_vii(635,($454|0),($407|0));
              $455 = __THREW__; __THREW__ = 0;
              $456 = $455&1;
              if (!($456)) {
               $465 = ((($448)) + 32|0);
               $466 = HEAP32[$418>>2]|0;
               HEAP32[$465>>2] = $466;
               HEAP32[$448>>2] = (3124);
               __THREW__ = 0;
               invoke_viii(644,($448|0),(80|0),(7|0));
               $467 = __THREW__; __THREW__ = 0;
               label = 167;
               break L147;
              }
              $459 = ___cxa_find_matching_catch_2()|0;
              $460 = tempRet0;
              __THREW__ = 0;
              invoke_vi(637,($449|0));
              $461 = __THREW__; __THREW__ = 0;
              $462 = $461&1;
              if (!($462)) {
               $$0$i$i93 = $460;$$07$i$i92 = $459;
               break;
              }
              $463 = ___cxa_find_matching_catch_3(0|0)|0;
              $464 = tempRet0;
              ___clang_call_terminate($463);
              // unreachable;
             }
            } while(0);
            ___cxa_free_exception(($448|0));
            $$7 = $$07$i$i92;$$733 = $$0$i$i93;
           }
          } while(0);
          if ((label|0) == 167) {
           $472 = ___cxa_find_matching_catch_2()|0;
           $473 = tempRet0;
           $$7 = $472;$$733 = $473;
          }
          HEAP32[$14>>2] = (4652);
          __THREW__ = 0;
          invoke_vi(637,($407|0));
          $474 = __THREW__; __THREW__ = 0;
          $475 = $474&1;
          do {
           if ($475) {
            $478 = ___cxa_find_matching_catch_3(0|0)|0;
            $479 = tempRet0;
            __THREW__ = 0;
            invoke_vi(637,($403|0));
            $480 = __THREW__; __THREW__ = 0;
            $481 = $480&1;
            if ($481) {
             $484 = ___cxa_find_matching_catch_3(0|0)|0;
             $485 = tempRet0;
             ___clang_call_terminate($484);
             // unreachable;
            } else {
             $$02$i = $478;
            }
           } else {
            __THREW__ = 0;
            invoke_vi(637,($403|0));
            $476 = __THREW__; __THREW__ = 0;
            $477 = $476&1;
            if ($477) {
             $482 = ___cxa_find_matching_catch_3(0|0)|0;
             $483 = tempRet0;
             $$02$i = $482;
             break;
            } else {
             $$9 = $$7;$$935 = $$733;
             label = 177;
             break L12;
            }
           }
          } while(0);
          $eh$lpad$body$indexZ2D = $$02$i;
          ___clang_call_terminate($eh$lpad$body$indexZ2D);
          // unreachable;
         }
        } while(0);
        __THREW__ = 0;
        invoke_vi(637,($1|0));
        $421 = __THREW__; __THREW__ = 0;
        $422 = $421&1;
        if ($422) {
         $423 = ___cxa_find_matching_catch_3(0|0)|0;
         $424 = tempRet0;
         ___clang_call_terminate($423);
         // unreachable;
        } else {
         $eh$lpad$body87$index17Z2D = $$0$i105;$eh$lpad$body87$indexZ2D = $$03$i104;
        }
       }
      } while(0);
      if ((label|0) == 165) {
       $468 = ___cxa_find_matching_catch_2()|0;
       $469 = tempRet0;
       $eh$lpad$body87$index17Z2D = $469;$eh$lpad$body87$indexZ2D = $468;
      }
      __THREW__ = 0;
      invoke_vi(637,($15|0));
      $470 = __THREW__; __THREW__ = 0;
      $471 = $470&1;
      if ($471) {
       break L12;
      } else {
       $$9 = $eh$lpad$body87$indexZ2D;$$935 = $eh$lpad$body87$index17Z2D;
       label = 177;
       break L12;
      }
     }
    } else {
     $304 = (((((($0)) + 18456|0) + (($300*24)|0)|0)) + 4|0);
     __THREW__ = 0;
     invoke_vii(635,($13|0),($304|0));
     $305 = __THREW__; __THREW__ = 0;
     $306 = $305&1;
     if (!($306)) {
      $307 = (((((($0)) + 18456|0) + (($300*24)|0)|0)) + 16|0);
      $308 = HEAP32[$307>>2]|0;
      __THREW__ = 0;
      invoke_vii(635,($2|0),($13|0));
      $309 = __THREW__; __THREW__ = 0;
      $310 = $309&1;
      L179: do {
       if ($310) {
        label = 130;
       } else {
        HEAP32[$12>>2] = (4652);
        $311 = ((($12)) + 4|0);
        __THREW__ = 0;
        invoke_vii(635,($311|0),($2|0));
        $312 = __THREW__; __THREW__ = 0;
        $313 = $312&1;
        do {
         if ($313) {
          $318 = ___cxa_find_matching_catch_2()|0;
          $319 = tempRet0;
          $$0$i100 = $319;$$03$i99 = $318;
         } else {
          $314 = ((($12)) + 16|0);
          HEAP32[$314>>2] = $308;
          $315 = ((($12)) + 20|0);
          ;HEAP32[$315>>2]=0|0;HEAP32[$315+4>>2]=0|0;HEAP32[$315+8>>2]=0|0;
          __THREW__ = 0;
          invoke_viii(646,($315|0),(44984|0),0);
          $316 = __THREW__; __THREW__ = 0;
          $317 = $316&1;
          if ($317) {
           $320 = ___cxa_find_matching_catch_2()|0;
           $321 = tempRet0;
           __THREW__ = 0;
           invoke_vi(637,($311|0));
           $322 = __THREW__; __THREW__ = 0;
           $323 = $322&1;
           if (!($323)) {
            $$0$i100 = $321;$$03$i99 = $320;
            break;
           }
           $324 = ___cxa_find_matching_catch_3(0|0)|0;
           $325 = tempRet0;
           ___clang_call_terminate($324);
           // unreachable;
          }
          $326 = ((($12)) + 32|0);
          HEAP32[$326>>2] = 0;
          __THREW__ = 0;
          invoke_vi(637,($2|0));
          $327 = __THREW__; __THREW__ = 0;
          $328 = $327&1;
          if ($328) {
           label = 130;
           break L179;
          }
          HEAP32[$12>>2] = (3100);
          __THREW__ = 0;
          invoke_vi(637,($13|0));
          $333 = __THREW__; __THREW__ = 0;
          $334 = $333&1;
          if ($334) {
           break L127;
          }
          $335 = ((($0)) + 24604|0);
          $336 = ((($315)) + 11|0);
          $337 = HEAP8[$336>>0]|0;
          $338 = ($337<<24>>24)<(0);
          $339 = ((($12)) + 24|0);
          $340 = HEAP32[$339>>2]|0;
          $341 = $337&255;
          $342 = $338 ? $340 : $341;
          $343 = ($342|0)==(0);
          if ($343) {
           __THREW__ = 0;
           $344 = (invoke_iiiiii(640,($315|0),0,-1,(44984|0),0)|0);
           $345 = __THREW__; __THREW__ = 0;
           $346 = $345&1;
           if ($346) {
            $347 = ___cxa_find_matching_catch_2()|0;
            $348 = tempRet0;
            ___cxa_call_unexpected(($347|0));
            // unreachable;
           }
           $349 = ($344|0)==(0);
           if ($349) {
            __THREW__ = 0;
            (invoke_iii(641,($315|0),($335|0))|0);
            $350 = __THREW__; __THREW__ = 0;
            $351 = $350&1;
            if ($351) {
             label = 132;
            } else {
             label = 121;
            }
           } else {
            label = 121;
           }
          } else {
           label = 121;
          }
          L196: do {
           if ((label|0) == 121) {
            $352 = HEAP32[$326>>2]|0;
            $353 = ($352|0)==(0);
            if ($353) {
             $354 = (((((($0)) + 18456|0) + (($300*24)|0)|0)) + 20|0);
             $355 = HEAP32[$354>>2]|0;
             HEAP32[$326>>2] = $355;
            }
            $356 = (___cxa_allocate_exception(36)|0);
            HEAP32[$356>>2] = (4652);
            $357 = ((($356)) + 4|0);
            __THREW__ = 0;
            invoke_vii(635,($357|0),($311|0));
            $358 = __THREW__; __THREW__ = 0;
            $359 = $358&1;
            do {
             if ($359) {
              $365 = ___cxa_find_matching_catch_2()|0;
              $366 = tempRet0;
              $$0$i$i76 = $366;$$07$i$i75 = $365;
             } else {
              $360 = ((($356)) + 16|0);
              $361 = HEAP32[$314>>2]|0;
              HEAP32[$360>>2] = $361;
              $362 = ((($356)) + 20|0);
              __THREW__ = 0;
              invoke_vii(635,($362|0),($315|0));
              $363 = __THREW__; __THREW__ = 0;
              $364 = $363&1;
              if (!($364)) {
               $373 = ((($356)) + 32|0);
               $374 = HEAP32[$326>>2]|0;
               HEAP32[$373>>2] = $374;
               HEAP32[$356>>2] = (3100);
               __THREW__ = 0;
               invoke_viii(644,($356|0),(64|0),(7|0));
               $375 = __THREW__; __THREW__ = 0;
               label = 132;
               break L196;
              }
              $367 = ___cxa_find_matching_catch_2()|0;
              $368 = tempRet0;
              __THREW__ = 0;
              invoke_vi(637,($357|0));
              $369 = __THREW__; __THREW__ = 0;
              $370 = $369&1;
              if (!($370)) {
               $$0$i$i76 = $368;$$07$i$i75 = $367;
               break;
              }
              $371 = ___cxa_find_matching_catch_3(0|0)|0;
              $372 = tempRet0;
              ___clang_call_terminate($371);
              // unreachable;
             }
            } while(0);
            ___cxa_free_exception(($356|0));
            $$6 = $$07$i$i75;$$632 = $$0$i$i76;
           }
          } while(0);
          if ((label|0) == 132) {
           $382 = ___cxa_find_matching_catch_2()|0;
           $383 = tempRet0;
           $$6 = $382;$$632 = $383;
          }
          HEAP32[$12>>2] = (4652);
          __THREW__ = 0;
          invoke_vi(637,($315|0));
          $384 = __THREW__; __THREW__ = 0;
          $385 = $384&1;
          do {
           if ($385) {
            $388 = ___cxa_find_matching_catch_3(0|0)|0;
            $389 = tempRet0;
            __THREW__ = 0;
            invoke_vi(637,($311|0));
            $390 = __THREW__; __THREW__ = 0;
            $391 = $390&1;
            if ($391) {
             $394 = ___cxa_find_matching_catch_3(0|0)|0;
             $395 = tempRet0;
             ___clang_call_terminate($394);
             // unreachable;
            } else {
             $$02$i79 = $388;
            }
           } else {
            __THREW__ = 0;
            invoke_vi(637,($311|0));
            $386 = __THREW__; __THREW__ = 0;
            $387 = $386&1;
            if ($387) {
             $392 = ___cxa_find_matching_catch_3(0|0)|0;
             $393 = tempRet0;
             $$02$i79 = $392;
             break;
            } else {
             $$9 = $$6;$$935 = $$632;
             label = 177;
             break L12;
            }
           }
          } while(0);
          $eh$lpad$body$indexZ2D = $$02$i79;
          ___clang_call_terminate($eh$lpad$body$indexZ2D);
          // unreachable;
         }
        } while(0);
        __THREW__ = 0;
        invoke_vi(637,($2|0));
        $329 = __THREW__; __THREW__ = 0;
        $330 = $329&1;
        if ($330) {
         $331 = ___cxa_find_matching_catch_3(0|0)|0;
         $332 = tempRet0;
         ___clang_call_terminate($331);
         // unreachable;
        } else {
         $eh$lpad$body70$index12Z2D = $$0$i100;$eh$lpad$body70$indexZ2D = $$03$i99;
        }
       }
      } while(0);
      if ((label|0) == 130) {
       $378 = ___cxa_find_matching_catch_2()|0;
       $379 = tempRet0;
       $eh$lpad$body70$index12Z2D = $379;$eh$lpad$body70$indexZ2D = $378;
      }
      __THREW__ = 0;
      invoke_vi(637,($13|0));
      $380 = __THREW__; __THREW__ = 0;
      $381 = $380&1;
      if ($381) {
       break L12;
      } else {
       $$9 = $eh$lpad$body70$indexZ2D;$$935 = $eh$lpad$body70$index12Z2D;
       label = 177;
       break L12;
      }
     }
    }
   } while(0);
   $376 = ___cxa_find_matching_catch_2()|0;
   $377 = tempRet0;
   $$9 = $376;$$935 = $377;
   label = 177;
  }
 } while(0);
 if ((label|0) == 13) {
  $$9 = $lpad$phi$index;$$935 = $lpad$phi$index2;
  label = 177;
 }
 else if ((label|0) == 18) {
  $$1 = $$0;$$127 = $$026;
  label = 19;
 }
 if ((label|0) == 19) {
  $74 = (_llvm_eh_typeid_for((472|0))|0);
  $75 = ($$127|0)==($74|0);
  if ($75) {
   $76 = (___cxa_begin_catch(($$1|0))|0);
   $77 = ((($0)) + 24604|0);
   $78 = ((($76)) + 20|0);
   $79 = ((($76)) + 31|0);
   $80 = HEAP8[$79>>0]|0;
   $81 = ($80<<24>>24)<(0);
   $82 = ((($76)) + 24|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = $80&255;
   $85 = $81 ? $83 : $84;
   $86 = ($85|0)==(0);
   if ($86) {
    __THREW__ = 0;
    $87 = (invoke_iiiiii(640,($78|0),0,-1,(44984|0),0)|0);
    $88 = __THREW__; __THREW__ = 0;
    $89 = $88&1;
    if ($89) {
     $90 = ___cxa_find_matching_catch_2()|0;
     $91 = tempRet0;
     ___cxa_call_unexpected(($90|0));
     // unreachable;
    }
    $92 = ($87|0)==(0);
    if ($92) {
     __THREW__ = 0;
     (invoke_iii(641,($78|0),($77|0))|0);
     $93 = __THREW__; __THREW__ = 0;
     $94 = $93&1;
     if (!($94)) {
      label = 25;
     }
    } else {
     label = 25;
    }
   } else {
    label = 25;
   }
   if ((label|0) == 25) {
    $95 = ((($76)) + 32|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = ($96|0)==(0);
    if ($97) {
     $98 = HEAP32[$22>>2]|0;
     HEAP32[$95>>2] = $98;
    }
    __THREW__ = 0;
    invoke_v(642);
    $99 = __THREW__; __THREW__ = 0;
   }
   $100 = ___cxa_find_matching_catch_2()|0;
   $101 = tempRet0;
   __THREW__ = 0;
   invoke_v(643);
   $102 = __THREW__; __THREW__ = 0;
   $103 = $102&1;
   if (!($103)) {
    $$9 = $100;$$935 = $101;
    label = 177;
   }
  } else {
   $$9 = $$1;$$935 = $$127;
   label = 177;
  }
 }
 if ((label|0) == 177) {
  __THREW__ = 0;
  invoke_vi(637,($4|0));
  $486 = __THREW__; __THREW__ = 0;
  $487 = $486&1;
  if (!($487)) {
   ___resumeException($$9|0);
   // unreachable;
  }
 }
 $488 = ___cxa_find_matching_catch_3(0|0)|0;
 $489 = tempRet0;
 $eh$lpad$body$indexZ2D = $488;
 ___clang_call_terminate($eh$lpad$body$indexZ2D);
 // unreachable;
}
function __ZN22AsmException_FileErrorD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4628);
 $1 = ((($0)) + 4|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
 return;
}
function __ZN41AsmException_SyntaxError_MismatchedBracesC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$03$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3,$1);
 HEAP32[$0>>2] = (4652);
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($4|0),($3|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $11 = ___cxa_find_matching_catch_2()|0;
  $12 = tempRet0;
  $$0$i = $12;$$03$i = $11;
 } else {
  $7 = ((($0)) + 16|0);
  HEAP32[$7>>2] = $2;
  $8 = ((($0)) + 20|0);
  ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
  __THREW__ = 0;
  invoke_viii(646,($8|0),(44984|0),0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   $19 = ((($0)) + 32|0);
   HEAP32[$19>>2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
   HEAP32[$0>>2] = (3052);
   STACKTOP = sp;return;
  }
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($4|0));
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if ($16) {
   $17 = ___cxa_find_matching_catch_3(0|0)|0;
   $18 = tempRet0;
   ___clang_call_terminate($17);
   // unreachable;
  } else {
   $$0$i = $14;$$03$i = $13;
  }
 }
 __THREW__ = 0;
 invoke_vi(637,($3|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch_3(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  ___resumeException($$03$i|0);
  // unreachable;
 }
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZN24AsmException_SyntaxErrorD2Ev($0) {
 $0 = $0|0;
 var $$0 = 0, $$02 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0 = $8;$$02 = $7;
   ___resumeException($$02|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0 = $13;$$02 = $12;
 ___resumeException($$02|0);
 // unreachable;
}
function __ZN39AsmException_SyntaxError_IfWithoutEndifD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK39AsmException_SyntaxError_IfWithoutEndif7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (19830|0);
}
function __ZN35AsmException_SyntaxError_NoEndMacroD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK35AsmException_SyntaxError_NoEndMacro7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (19886|0);
}
function __ZN39AsmException_SyntaxError_ForWithoutNextD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK39AsmException_SyntaxError_ForWithoutNext7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (19969|0);
}
function __ZN41AsmException_SyntaxError_MismatchedBracesD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK41AsmException_SyntaxError_MismatchedBraces7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (20031|0);
}
function __ZN37AsmException_FileError_ReadSourceFileD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4628);
 $1 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  __ZdlPv($0);
  ___resumeException($4|0);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZNK37AsmException_FileError_ReadSourceFile7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (20090|0);
}
function __ZN10SourceCodeC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$add = 0, $$add8 = 0, $$idx = 0, $$idx7 = 0, $$ptr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (3000);
 $3 = ((($0)) + 8|0);
 $$idx = 0;
 while(1) {
  $$ptr = (((($0)) + 8|0) + (($$idx*72)|0)|0);
  ;HEAP32[$$ptr>>2]=0|0;HEAP32[$$ptr+4>>2]=0|0;HEAP32[$$ptr+8>>2]=0|0;
  $4 = (((((($0)) + 8|0) + (($$idx*72)|0)|0)) + 52|0);
  ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
  $$add = (($$idx) + 1)|0;
  $5 = ($$add|0)==(256);
  if ($5) {
   break;
  } else {
   $$idx = $$add;
  }
 }
 $6 = ((($0)) + 18440|0);
 $7 = ((($0)) + 18440|0);
 $8 = ((($0)) + 18456|0);
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;HEAP32[$7+12>>2]=0|0;
 $$idx7 = 0;
 while(1) {
  $9 = (((((($0)) + 18456|0) + (($$idx7*24)|0)|0)) + 4|0);
  ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
  $$add8 = (($$idx7) + 1)|0;
  $10 = ($$add8|0)==(256);
  if ($10) {
   break;
  } else {
   $$idx7 = $$add8;
  }
 }
 $11 = ((($0)) + 24600|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($0)) + 24604|0);
 __THREW__ = 0;
 invoke_vii(635,($12|0),($1|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if (!($14)) {
  $15 = ((($0)) + 24616|0);
  HEAP32[$15>>2] = $2;
  $16 = ((($0)) + 24620|0);
  HEAP32[$16>>2] = 0;
  return;
 }
 $17 = ___cxa_find_matching_catch_2()|0;
 $18 = tempRet0;
 $19 = ((($0)) + 24600|0);
 $21 = $19;
 while(1) {
  $20 = ((($21)) + -24|0);
  $22 = ((($21)) + -20|0);
  __THREW__ = 0;
  invoke_vi(637,($22|0));
  $23 = __THREW__; __THREW__ = 0;
  $24 = $23&1;
  if ($24) {
   label = 17;
   break;
  }
  $25 = ($20|0)==($8|0);
  if ($25) {
   $27 = $6;
   break;
  } else {
   $21 = $20;
  }
 }
 if ((label|0) == 17) {
  $42 = ___cxa_find_matching_catch_3(0|0)|0;
  $43 = tempRet0;
  $eh$lpad$body$indexZ2D = $42;
  ___clang_call_terminate($eh$lpad$body$indexZ2D);
  // unreachable;
 }
 while(1) {
  $26 = ((($27)) + -72|0);
  $28 = ((($27)) + -20|0);
  __THREW__ = 0;
  invoke_vi(637,($28|0));
  $29 = __THREW__; __THREW__ = 0;
  $30 = $29&1;
  if ($30) {
   label = 12;
   break;
  }
  __THREW__ = 0;
  invoke_vi(637,($26|0));
  $31 = __THREW__; __THREW__ = 0;
  $32 = $31&1;
  if ($32) {
   label = 16;
   break;
  }
  $39 = ($26|0)==($3|0);
  if ($39) {
   label = 15;
   break;
  } else {
   $27 = $26;
  }
 }
 if ((label|0) == 12) {
  $33 = ___cxa_find_matching_catch_3(0|0)|0;
  $34 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($26|0));
  $35 = __THREW__; __THREW__ = 0;
  $36 = $35&1;
  if ($36) {
   $37 = ___cxa_find_matching_catch_3(0|0)|0;
   $38 = tempRet0;
   ___clang_call_terminate($37);
   // unreachable;
  } else {
   $eh$lpad$body$indexZ2D = $33;
   ___clang_call_terminate($eh$lpad$body$indexZ2D);
   // unreachable;
  }
 }
 else if ((label|0) == 15) {
  ___resumeException($17|0);
  // unreachable;
 }
 else if ((label|0) == 16) {
  $40 = ___cxa_find_matching_catch_3(0|0)|0;
  $41 = tempRet0;
  $eh$lpad$body$indexZ2D = $40;
  ___clang_call_terminate($eh$lpad$body$indexZ2D);
  // unreachable;
 }
}
function __ZN10SourceCodeD2Ev($0) {
 $0 = $0|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$13 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $eh$lpad$body7$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (3000);
 $1 = ((($0)) + 24604|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 L1: do {
  if ($3) {
   $28 = ___cxa_find_matching_catch_2()|0;
   $29 = tempRet0;
   $30 = ((($0)) + 18456|0);
   $31 = ((($0)) + 24600|0);
   $42 = $31;
   while(1) {
    $41 = ((($42)) + -24|0);
    $43 = ((($42)) + -20|0);
    __THREW__ = 0;
    invoke_vi(637,($43|0));
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if ($45) {
     break;
    }
    $46 = ($41|0)==($30|0);
    if ($46) {
     $$0 = $29;$$02 = $28;
     break L1;
    } else {
     $42 = $41;
    }
   }
   $86 = ___cxa_find_matching_catch_3(0|0)|0;
   $87 = tempRet0;
   $eh$lpad$body7$indexZ2D = $86;
   ___clang_call_terminate($eh$lpad$body7$indexZ2D);
   // unreachable;
  } else {
   $4 = ((($0)) + 18456|0);
   $5 = ((($0)) + 24600|0);
   $7 = $5;
   while(1) {
    $6 = ((($7)) + -24|0);
    $8 = ((($7)) + -20|0);
    __THREW__ = 0;
    invoke_vi(637,($8|0));
    $9 = __THREW__; __THREW__ = 0;
    $10 = $9&1;
    if ($10) {
     label = 13;
     break;
    }
    $11 = ($6|0)==($4|0);
    if ($11) {
     break;
    } else {
     $7 = $6;
    }
   }
   if ((label|0) == 13) {
    $32 = ___cxa_find_matching_catch_2()|0;
    $33 = tempRet0;
    $34 = ($4|0)==($6|0);
    if ($34) {
     $$0 = $33;$$02 = $32;
     break;
    } else {
     $36 = $6;
    }
    while(1) {
     $35 = ((($36)) + -24|0);
     $37 = ((($36)) + -20|0);
     __THREW__ = 0;
     invoke_vi(637,($37|0));
     $38 = __THREW__; __THREW__ = 0;
     $39 = $38&1;
     if ($39) {
      break;
     }
     $40 = ($35|0)==($4|0);
     if ($40) {
      $$0 = $33;$$02 = $32;
      break L1;
     } else {
      $36 = $35;
     }
    }
    $84 = ___cxa_find_matching_catch_3(0|0)|0;
    $85 = tempRet0;
    $eh$lpad$body7$indexZ2D = $84;
    ___clang_call_terminate($eh$lpad$body7$indexZ2D);
    // unreachable;
   }
   $12 = ((($0)) + 8|0);
   $13 = ((($0)) + 18440|0);
   $15 = $13;
   while(1) {
    $14 = ((($15)) + -72|0);
    $16 = ((($15)) + -20|0);
    __THREW__ = 0;
    invoke_vi(637,($16|0));
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if ($18) {
     label = 8;
     break;
    }
    __THREW__ = 0;
    invoke_vi(637,($14|0));
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     label = 18;
     break;
    }
    $27 = ($14|0)==($12|0);
    if ($27) {
     label = 11;
     break;
    } else {
     $15 = $14;
    }
   }
   if ((label|0) == 8) {
    $21 = ___cxa_find_matching_catch_2()|0;
    $22 = tempRet0;
    __THREW__ = 0;
    invoke_vi(637,($14|0));
    $23 = __THREW__; __THREW__ = 0;
    $24 = $23&1;
    if ($24) {
     $25 = ___cxa_find_matching_catch_3(0|0)|0;
     $26 = tempRet0;
     ___clang_call_terminate($25);
     // unreachable;
    } else {
     $eh$lpad$body$index2Z2D = $22;$eh$lpad$body$indexZ2D = $21;
    }
   }
   else if ((label|0) == 11) {
    return;
   }
   else if ((label|0) == 18) {
    $47 = ___cxa_find_matching_catch_2()|0;
    $48 = tempRet0;
    $eh$lpad$body$index2Z2D = $48;$eh$lpad$body$indexZ2D = $47;
   }
   $49 = ($12|0)==($14|0);
   if ($49) {
    $$1 = $eh$lpad$body$index2Z2D;$$13 = $eh$lpad$body$indexZ2D;
    ___resumeException($$13|0);
    // unreachable;
   } else {
    $51 = $14;
   }
   while(1) {
    $50 = ((($51)) + -72|0);
    $52 = ((($51)) + -20|0);
    __THREW__ = 0;
    invoke_vi(637,($52|0));
    $53 = __THREW__; __THREW__ = 0;
    $54 = $53&1;
    if ($54) {
     label = 22;
     break;
    }
    __THREW__ = 0;
    invoke_vi(637,($50|0));
    $55 = __THREW__; __THREW__ = 0;
    $56 = $55&1;
    if ($56) {
     label = 32;
     break;
    }
    $63 = ($50|0)==($12|0);
    if ($63) {
     $$1 = $eh$lpad$body$index2Z2D;$$13 = $eh$lpad$body$indexZ2D;
     label = 31;
     break;
    } else {
     $51 = $50;
    }
   }
   if ((label|0) == 22) {
    $57 = ___cxa_find_matching_catch_3(0|0)|0;
    $58 = tempRet0;
    __THREW__ = 0;
    invoke_vi(637,($50|0));
    $59 = __THREW__; __THREW__ = 0;
    $60 = $59&1;
    if ($60) {
     $61 = ___cxa_find_matching_catch_3(0|0)|0;
     $62 = tempRet0;
     ___clang_call_terminate($61);
     // unreachable;
    } else {
     $eh$lpad$body7$indexZ2D = $57;
     ___clang_call_terminate($eh$lpad$body7$indexZ2D);
     // unreachable;
    }
   }
   else if ((label|0) == 31) {
    ___resumeException($$13|0);
    // unreachable;
   }
   else if ((label|0) == 32) {
    $80 = ___cxa_find_matching_catch_3(0|0)|0;
    $81 = tempRet0;
    $eh$lpad$body7$indexZ2D = $80;
    ___clang_call_terminate($eh$lpad$body7$indexZ2D);
    // unreachable;
   }
  }
 } while(0);
 $64 = ((($0)) + 8|0);
 $65 = ((($0)) + 18440|0);
 $67 = $65;
 while(1) {
  $66 = ((($67)) + -72|0);
  $68 = ((($67)) + -20|0);
  __THREW__ = 0;
  invoke_vi(637,($68|0));
  $69 = __THREW__; __THREW__ = 0;
  $70 = $69&1;
  if ($70) {
   label = 28;
   break;
  }
  __THREW__ = 0;
  invoke_vi(637,($66|0));
  $71 = __THREW__; __THREW__ = 0;
  $72 = $71&1;
  if ($72) {
   label = 33;
   break;
  }
  $79 = ($66|0)==($64|0);
  if ($79) {
   $$1 = $$0;$$13 = $$02;
   label = 31;
   break;
  } else {
   $67 = $66;
  }
 }
 if ((label|0) == 28) {
  $73 = ___cxa_find_matching_catch_3(0|0)|0;
  $74 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($66|0));
  $75 = __THREW__; __THREW__ = 0;
  $76 = $75&1;
  if ($76) {
   $77 = ___cxa_find_matching_catch_3(0|0)|0;
   $78 = tempRet0;
   ___clang_call_terminate($77);
   // unreachable;
  } else {
   $eh$lpad$body7$indexZ2D = $73;
   ___clang_call_terminate($eh$lpad$body7$indexZ2D);
   // unreachable;
  }
 }
 else if ((label|0) == 31) {
  ___resumeException($$13|0);
  // unreachable;
 }
 else if ((label|0) == 33) {
  $82 = ___cxa_find_matching_catch_3(0|0)|0;
  $83 = tempRet0;
  $eh$lpad$body7$indexZ2D = $82;
  ___clang_call_terminate($eh$lpad$body7$indexZ2D);
  // unreachable;
 }
}
function __ZN10SourceCode6AddForERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEdddiS8_i($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0 = 0, $$01418 = 0, $$01419 = 0, $$01516 = 0, $$01517 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp;
 $9 = ((($0)) + 18440|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(256);
 if (!($11)) {
  $24 = HEAP32[9091]|0;
  $25 = ($24|0)==(0|0);
  if ($25) {
   ___assert_fail((27040|0),(27806|0),38,(27075|0));
   // unreachable;
  }
  __ZN11SymbolTable9AddSymbolERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEdb($24,$1,$2,0);
  $26 = HEAP32[$9>>2]|0;
  $27 = (((($0)) + 8|0) + (($26*72)|0)|0);
  (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($27,$1)|0);
  $28 = HEAP32[$9>>2]|0;
  $29 = (((((($0)) + 8|0) + (($28*72)|0)|0)) + 16|0);
  HEAPF64[$29>>3] = $2;
  $30 = HEAP32[$9>>2]|0;
  $31 = (((((($0)) + 8|0) + (($30*72)|0)|0)) + 24|0);
  HEAPF64[$31>>3] = $3;
  $32 = HEAP32[$9>>2]|0;
  $33 = (((((($0)) + 8|0) + (($32*72)|0)|0)) + 32|0);
  HEAPF64[$33>>3] = $4;
  $34 = HEAP32[$9>>2]|0;
  $35 = (((((($0)) + 8|0) + (($34*72)|0)|0)) + 40|0);
  HEAP32[$35>>2] = $5;
  $36 = HEAP32[9088]|0;
  $37 = ($36|0)==(0|0);
  if ($37) {
   ___assert_fail((27040|0),(27060|0),38,(27075|0));
   // unreachable;
  } else {
   $38 = ((($36)) + 16|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($39) + 1)|0;
   HEAP32[$38>>2] = $40;
   $41 = HEAP32[$9>>2]|0;
   $42 = (((((($0)) + 8|0) + (($41*72)|0)|0)) + 44|0);
   HEAP32[$42>>2] = $39;
   $43 = (((((($0)) + 8|0) + (($41*72)|0)|0)) + 48|0);
   HEAP32[$43>>2] = 0;
   $44 = HEAP32[$9>>2]|0;
   $45 = (((((($0)) + 8|0) + (($44*72)|0)|0)) + 52|0);
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($45,$6)|0);
   $46 = HEAP32[$9>>2]|0;
   $47 = (((((($0)) + 8|0) + (($46*72)|0)|0)) + 64|0);
   HEAP32[$47>>2] = $7;
   $48 = ((($0)) + 24616|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = HEAP32[$9>>2]|0;
   $51 = (((((($0)) + 8|0) + (($50*72)|0)|0)) + 68|0);
   HEAP32[$51>>2] = $49;
   $52 = (($50) + 1)|0;
   HEAP32[$9>>2] = $52;
   STACKTOP = sp;return;
  }
 }
 $12 = (___cxa_allocate_exception(36)|0);
 __THREW__ = 0;
 invoke_vii(635,($8|0),($6|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $18 = ___cxa_find_matching_catch_2()|0;
  $19 = tempRet0;
  $$01419 = $19;$$01517 = $18;
 } else {
  __THREW__ = 0;
  invoke_viii(647,($12|0),($8|0),($7|0));
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if ($16) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($12|0),(96|0),(7|0));
   $17 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $20 = ___cxa_find_matching_catch_2()|0;
  $21 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($8|0));
  $22 = __THREW__; __THREW__ = 0;
  $23 = $22&1;
  if ($23) {
   $53 = ___cxa_find_matching_catch_3(0|0)|0;
   $54 = tempRet0;
   ___clang_call_terminate($53);
   // unreachable;
  }
  if ($$0) {
   $$01419 = $21;$$01517 = $20;
  } else {
   $$01418 = $21;$$01516 = $20;
   ___resumeException($$01516|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($12|0));
 $$01418 = $$01419;$$01516 = $$01517;
 ___resumeException($$01516|0);
 // unreachable;
}
function __ZN36AsmException_SyntaxError_TooManyFORsC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$03$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3,$1);
 HEAP32[$0>>2] = (4652);
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($4|0),($3|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $11 = ___cxa_find_matching_catch_2()|0;
  $12 = tempRet0;
  $$0$i = $12;$$03$i = $11;
 } else {
  $7 = ((($0)) + 16|0);
  HEAP32[$7>>2] = $2;
  $8 = ((($0)) + 20|0);
  ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
  __THREW__ = 0;
  invoke_viii(646,($8|0),(44984|0),0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   $19 = ((($0)) + 32|0);
   HEAP32[$19>>2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
   HEAP32[$0>>2] = (3148);
   STACKTOP = sp;return;
  }
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($4|0));
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if ($16) {
   $17 = ___cxa_find_matching_catch_3(0|0)|0;
   $18 = tempRet0;
   ___clang_call_terminate($17);
   // unreachable;
  } else {
   $$0$i = $14;$$03$i = $13;
  }
 }
 __THREW__ = 0;
 invoke_vi(637,($3|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch_3(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  ___resumeException($$03$i|0);
  // unreachable;
 }
}
function __ZN36AsmException_SyntaxError_TooManyFORsD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK36AsmException_SyntaxError_TooManyFORs7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (20176|0);
}
function __ZN10SourceCode9OpenBraceERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0711 = 0, $$0712 = 0, $$0810 = 0, $$089 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 18440|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(256);
 if (!($6)) {
  $19 = (((($0)) + 8|0) + (($5*72)|0)|0);
  (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($19,44984)|0);
  $20 = HEAP32[$4>>2]|0;
  $21 = (((((($0)) + 8|0) + (($20*72)|0)|0)) + 16|0);
  HEAPF64[$21>>3] = 1.0;
  $22 = HEAP32[$4>>2]|0;
  $23 = (((((($0)) + 8|0) + (($22*72)|0)|0)) + 24|0);
  HEAPF64[$23>>3] = 0.0;
  $24 = HEAP32[$4>>2]|0;
  $25 = (((((($0)) + 8|0) + (($24*72)|0)|0)) + 32|0);
  HEAPF64[$25>>3] = 0.0;
  $26 = HEAP32[$4>>2]|0;
  $27 = (((((($0)) + 8|0) + (($26*72)|0)|0)) + 40|0);
  HEAP32[$27>>2] = 0;
  $28 = HEAP32[9088]|0;
  $29 = ($28|0)==(0|0);
  if ($29) {
   ___assert_fail((27040|0),(27060|0),38,(27075|0));
   // unreachable;
  } else {
   $30 = ((($28)) + 16|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($31) + 1)|0;
   HEAP32[$30>>2] = $32;
   $33 = HEAP32[$4>>2]|0;
   $34 = (((((($0)) + 8|0) + (($33*72)|0)|0)) + 44|0);
   HEAP32[$34>>2] = $31;
   $35 = (((((($0)) + 8|0) + (($33*72)|0)|0)) + 48|0);
   HEAP32[$35>>2] = 0;
   $36 = HEAP32[$4>>2]|0;
   $37 = (((((($0)) + 8|0) + (($36*72)|0)|0)) + 52|0);
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($37,$1)|0);
   $38 = HEAP32[$4>>2]|0;
   $39 = (((((($0)) + 8|0) + (($38*72)|0)|0)) + 64|0);
   HEAP32[$39>>2] = $2;
   $40 = ((($0)) + 24616|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = HEAP32[$4>>2]|0;
   $43 = (((((($0)) + 8|0) + (($42*72)|0)|0)) + 68|0);
   HEAP32[$43>>2] = $41;
   $44 = (($42) + 1)|0;
   HEAP32[$4>>2] = $44;
   STACKTOP = sp;return;
  }
 }
 $7 = (___cxa_allocate_exception(36)|0);
 __THREW__ = 0;
 invoke_vii(635,($3|0),($1|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  $$0712 = $14;$$0810 = $13;
 } else {
  __THREW__ = 0;
  invoke_viii(647,($7|0),($3|0),($2|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($7|0),(96|0),(7|0));
   $12 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $15 = ___cxa_find_matching_catch_2()|0;
  $16 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($3|0));
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  if ($18) {
   $45 = ___cxa_find_matching_catch_3(0|0)|0;
   $46 = tempRet0;
   ___clang_call_terminate($45);
   // unreachable;
  }
  if ($$0) {
   $$0712 = $16;$$0810 = $15;
  } else {
   $$0711 = $16;$$089 = $15;
   ___resumeException($$089|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($7|0));
 $$0711 = $$0712;$$089 = $$0810;
 ___resumeException($$089|0);
 // unreachable;
}
function __ZN10SourceCode9UpdateForERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$02534 = 0, $$027 = 0, $$02933 = 0, $$12637 = 0, $$13036 = 0, $$2 = 0, $$231 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 12|0;
 $4 = sp;
 $5 = ((($0)) + 18440|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = (___cxa_allocate_exception(36)|0);
  __THREW__ = 0;
  invoke_vii(635,($3|0),($1|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $14 = ___cxa_find_matching_catch_2()|0;
   $15 = tempRet0;
   $$02534 = $14;$$02933 = $15;
  } else {
   __THREW__ = 0;
   invoke_viii(648,($8|0),($3|0),($2|0));
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if ($12) {
    $$027 = 1;
   } else {
    __THREW__ = 0;
    invoke_viii(644,($8|0),(112|0),(7|0));
    $13 = __THREW__; __THREW__ = 0;
    $$027 = 0;
   }
   $16 = ___cxa_find_matching_catch_2()|0;
   $17 = tempRet0;
   __THREW__ = 0;
   invoke_vi(637,($3|0));
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   if ($19) {
    $66 = ___cxa_find_matching_catch_3(0|0)|0;
    $67 = tempRet0;
    ___clang_call_terminate($66);
    // unreachable;
   }
   if ($$027) {
    $$02534 = $16;$$02933 = $17;
   } else {
    $$2 = $16;$$231 = $17;
    ___resumeException($$2|0);
    // unreachable;
   }
  }
  ___cxa_free_exception(($8|0));
  $$2 = $$02534;$$231 = $$02933;
  ___resumeException($$2|0);
  // unreachable;
 }
 $20 = (($6) + -1)|0;
 $21 = (((($0)) + 8|0) + (($20*72)|0)|0);
 $22 = (((((($0)) + 8|0) + (($20*72)|0)|0)) + 32|0);
 $23 = +HEAPF64[$22>>3];
 $24 = $23 == 0.0;
 if ($24) {
  $25 = (___cxa_allocate_exception(36)|0);
  __THREW__ = 0;
  invoke_vii(635,($4|0),($1|0));
  $26 = __THREW__; __THREW__ = 0;
  $27 = $26&1;
  if ($27) {
   $31 = ___cxa_find_matching_catch_2()|0;
   $32 = tempRet0;
   $$12637 = $31;$$13036 = $32;
  } else {
   __THREW__ = 0;
   invoke_viii(648,($25|0),($4|0),($2|0));
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if ($29) {
    $$0 = 1;
   } else {
    __THREW__ = 0;
    invoke_viii(644,($25|0),(112|0),(7|0));
    $30 = __THREW__; __THREW__ = 0;
    $$0 = 0;
   }
   $33 = ___cxa_find_matching_catch_2()|0;
   $34 = tempRet0;
   __THREW__ = 0;
   invoke_vi(637,($4|0));
   $35 = __THREW__; __THREW__ = 0;
   $36 = $35&1;
   if ($36) {
    $66 = ___cxa_find_matching_catch_3(0|0)|0;
    $67 = tempRet0;
    ___clang_call_terminate($66);
    // unreachable;
   }
   if ($$0) {
    $$12637 = $33;$$13036 = $34;
   } else {
    $$2 = $33;$$231 = $34;
    ___resumeException($$2|0);
    // unreachable;
   }
  }
  ___cxa_free_exception(($25|0));
  $$2 = $$12637;$$231 = $$13036;
  ___resumeException($$2|0);
  // unreachable;
 }
 $37 = (((((($0)) + 8|0) + (($20*72)|0)|0)) + 16|0);
 $38 = +HEAPF64[$37>>3];
 $39 = $23 + $38;
 HEAPF64[$37>>3] = $39;
 $40 = $23 > 0.0;
 if ($40) {
  $41 = (((((($0)) + 8|0) + (($20*72)|0)|0)) + 24|0);
  $42 = +HEAPF64[$41>>3];
  $43 = $39 > $42;
  if (!($43)) {
   label = 19;
  }
 } else {
  label = 19;
 }
 do {
  if ((label|0) == 19) {
   $44 = $23 < 0.0;
   if ($44) {
    $45 = (((((($0)) + 8|0) + (($20*72)|0)|0)) + 24|0);
    $46 = +HEAPF64[$45>>3];
    $47 = $39 < $46;
    if ($47) {
     break;
    }
   }
   $52 = HEAP32[9091]|0;
   $53 = ($52|0)==(0|0);
   if ($53) {
    ___assert_fail((27040|0),(27806|0),38,(27075|0));
    // unreachable;
   }
   __ZN11SymbolTable12ChangeSymbolERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEd($52,$21,$39);
   $54 = HEAP32[$0>>2]|0;
   $55 = ((($54)) + 12|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (((((($0)) + 8|0) + (($20*72)|0)|0)) + 40|0);
   $58 = HEAP32[$57>>2]|0;
   FUNCTION_TABLE_vii[$56 & 1023]($0,$58);
   $59 = (((((($0)) + 8|0) + (($20*72)|0)|0)) + 48|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (($60) + 1)|0;
   HEAP32[$59>>2] = $61;
   $62 = (((((($0)) + 8|0) + (($20*72)|0)|0)) + 68|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (($63) + -1)|0;
   $65 = ((($0)) + 24616|0);
   HEAP32[$65>>2] = $64;
   STACKTOP = sp;return;
  }
 } while(0);
 $48 = HEAP32[9091]|0;
 $49 = ($48|0)==(0|0);
 if ($49) {
  ___assert_fail((27040|0),(27806|0),38,(27075|0));
  // unreachable;
 }
 __ZN11SymbolTable12RemoveSymbolERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($48,$21);
 $50 = HEAP32[$5>>2]|0;
 $51 = (($50) + -1)|0;
 HEAP32[$5>>2] = $51;
 STACKTOP = sp;return;
}
function __ZN39AsmException_SyntaxError_NextWithoutForC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$03$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3,$1);
 HEAP32[$0>>2] = (4652);
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($4|0),($3|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $11 = ___cxa_find_matching_catch_2()|0;
  $12 = tempRet0;
  $$0$i = $12;$$03$i = $11;
 } else {
  $7 = ((($0)) + 16|0);
  HEAP32[$7>>2] = $2;
  $8 = ((($0)) + 20|0);
  ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
  __THREW__ = 0;
  invoke_viii(646,($8|0),(44984|0),0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   $19 = ((($0)) + 32|0);
   HEAP32[$19>>2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
   HEAP32[$0>>2] = (3172);
   STACKTOP = sp;return;
  }
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($4|0));
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if ($16) {
   $17 = ___cxa_find_matching_catch_3(0|0)|0;
   $18 = tempRet0;
   ___clang_call_terminate($17);
   // unreachable;
  } else {
   $$0$i = $14;$$03$i = $13;
  }
 }
 __THREW__ = 0;
 invoke_vi(637,($3|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch_3(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  ___resumeException($$03$i|0);
  // unreachable;
 }
}
function __ZN39AsmException_SyntaxError_NextWithoutForD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK39AsmException_SyntaxError_NextWithoutFor7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (20250|0);
}
function __ZN10SourceCode10CloseBraceERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$01119 = 0, $$013 = 0, $$01518 = 0, $$11222 = 0, $$11621 = 0, $$2 = 0, $$217 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 12|0;
 $4 = sp;
 $5 = ((($0)) + 18440|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 18444|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6|0)==($8|0);
 if ($9) {
  $10 = (___cxa_allocate_exception(36)|0);
  __THREW__ = 0;
  invoke_vii(635,($3|0),($1|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   $16 = ___cxa_find_matching_catch_2()|0;
   $17 = tempRet0;
   $$01119 = $16;$$01518 = $17;
  } else {
   __THREW__ = 0;
   invoke_viii(645,($10|0),($3|0),($2|0));
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    $$013 = 1;
   } else {
    __THREW__ = 0;
    invoke_viii(644,($10|0),(32|0),(7|0));
    $15 = __THREW__; __THREW__ = 0;
    $$013 = 0;
   }
   $18 = ___cxa_find_matching_catch_2()|0;
   $19 = tempRet0;
   __THREW__ = 0;
   invoke_vi(637,($3|0));
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if ($21) {
    $38 = ___cxa_find_matching_catch_3(0|0)|0;
    $39 = tempRet0;
    ___clang_call_terminate($38);
    // unreachable;
   }
   if ($$013) {
    $$01119 = $18;$$01518 = $19;
   } else {
    $$2 = $18;$$217 = $19;
    ___resumeException($$2|0);
    // unreachable;
   }
  }
  ___cxa_free_exception(($10|0));
  $$2 = $$01119;$$217 = $$01518;
  ___resumeException($$2|0);
  // unreachable;
 }
 $22 = (($6) + -1)|0;
 $23 = (((((($0)) + 8|0) + (($22*72)|0)|0)) + 32|0);
 $24 = +HEAPF64[$23>>3];
 $25 = $24 != 0.0;
 if (!($25)) {
  HEAP32[$5>>2] = $22;
  STACKTOP = sp;return;
 }
 $26 = (___cxa_allocate_exception(36)|0);
 __THREW__ = 0;
 invoke_vii(635,($4|0),($1|0));
 $27 = __THREW__; __THREW__ = 0;
 $28 = $27&1;
 if ($28) {
  $32 = ___cxa_find_matching_catch_2()|0;
  $33 = tempRet0;
  $$11222 = $32;$$11621 = $33;
 } else {
  __THREW__ = 0;
  invoke_viii(645,($26|0),($4|0),($2|0));
  $29 = __THREW__; __THREW__ = 0;
  $30 = $29&1;
  if ($30) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($26|0),(32|0),(7|0));
   $31 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $34 = ___cxa_find_matching_catch_2()|0;
  $35 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($4|0));
  $36 = __THREW__; __THREW__ = 0;
  $37 = $36&1;
  if ($37) {
   $38 = ___cxa_find_matching_catch_3(0|0)|0;
   $39 = tempRet0;
   ___clang_call_terminate($38);
   // unreachable;
  }
  if ($$0) {
   $$11222 = $34;$$11621 = $35;
  } else {
   $$2 = $34;$$217 = $35;
   ___resumeException($$2|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($26|0));
 $$2 = $$11222;$$217 = $$11621;
 ___resumeException($$2|0);
 // unreachable;
}
function __ZN10SourceCode12CopyForStackEPKS_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$07 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 18440|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 18440|0);
 HEAP32[$4>>2] = $3;
 $5 = ($3|0)>(0);
 if ($5) {
  $$07 = 0;
 } else {
  return;
 }
 while(1) {
  $6 = (((($0)) + 8|0) + (($$07*72)|0)|0);
  $7 = (((($1)) + 8|0) + (($$07*72)|0)|0);
  (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($6,$7)|0);
  $8 = (((((($0)) + 8|0) + (($$07*72)|0)|0)) + 16|0);
  $9 = (((((($1)) + 8|0) + (($$07*72)|0)|0)) + 16|0);
  dest=$8; src=$9; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $10 = (((((($0)) + 8|0) + (($$07*72)|0)|0)) + 52|0);
  $11 = (((((($1)) + 8|0) + (($$07*72)|0)|0)) + 52|0);
  (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($10,$11)|0);
  $12 = (((((($0)) + 8|0) + (($$07*72)|0)|0)) + 64|0);
  $13 = (((((($1)) + 8|0) + (($$07*72)|0)|0)) + 64|0);
  $14 = $13;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($14) + 4)|0;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = $12;
  $21 = $20;
  HEAP32[$21>>2] = $16;
  $22 = (($20) + 4)|0;
  $23 = $22;
  HEAP32[$23>>2] = $19;
  $24 = (($$07) + 1)|0;
  $25 = HEAP32[$4>>2]|0;
  $26 = ($24|0)<($25|0);
  if ($26) {
   $$07 = $24;
  } else {
   break;
  }
 }
 return;
}
function __ZNK10SourceCode19GetSymbolNameSuffixEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$0$i$i = 0, $$01114 = 0, $$012 = 0, $$03$i = 0, $$03$i$i = 0, $$sink$index = 0, $$sink$index7 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $3 = sp + 136|0;
 $4 = sp;
 $5 = ($2|0)==(-1);
 if ($5) {
  $6 = ((($1)) + 18440|0);
  $7 = HEAP32[$6>>2]|0;
  $$012 = $7;
 } else {
  $$012 = $2;
 }
 $8 = ((($4)) + 56|0);
 $9 = ((($4)) + 4|0);
 HEAP32[$4>>2] = ((3200));
 HEAP32[$8>>2] = ((3220));
 $10 = ((($4)) + 56|0);
 __THREW__ = 0;
 invoke_vii(649,($10|0),($9|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $35 = ___cxa_find_matching_catch_2()|0;
  $36 = tempRet0;
  $$0$i = $36;$$03$i = $35;
 } else {
  $13 = ((($4)) + 128|0);
  HEAP32[$13>>2] = 0;
  $14 = ((($4)) + 132|0);
  HEAP32[$14>>2] = -1;
  HEAP32[$4>>2] = (3240);
  HEAP32[$8>>2] = (3260);
  __THREW__ = 0;
  invoke_vi(650,($9|0));
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  do {
   if ($16) {
    $37 = ___cxa_find_matching_catch_2()|0;
    $38 = tempRet0;
    $eh$lpad$body$i$index2Z2D = $38;$eh$lpad$body$i$indexZ2D = $37;
   } else {
    HEAP32[$9>>2] = (3276);
    $17 = ((($4)) + 36|0);
    $18 = ((($4)) + 52|0);
    ;HEAP32[$17>>2]=0|0;HEAP32[$17+4>>2]=0|0;HEAP32[$17+8>>2]=0|0;HEAP32[$17+12>>2]=0|0;
    HEAP32[$18>>2] = 16;
    ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
    __THREW__ = 0;
    invoke_vii(651,($9|0),($3|0));
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    do {
     if ($20) {
      $25 = ___cxa_find_matching_catch_2()|0;
      $26 = tempRet0;
      __THREW__ = 0;
      invoke_vi(637,($3|0));
      $27 = __THREW__; __THREW__ = 0;
      $28 = $27&1;
      if ($28) {
       $33 = ___cxa_find_matching_catch_3(0|0)|0;
       $34 = tempRet0;
       ___clang_call_terminate($33);
       // unreachable;
      } else {
       $$0$i$i = $26;$$03$i$i = $25;
      }
     } else {
      __THREW__ = 0;
      invoke_vi(637,($3|0));
      $21 = __THREW__; __THREW__ = 0;
      $22 = $21&1;
      if ($22) {
       $23 = ___cxa_find_matching_catch_2()|0;
       $24 = tempRet0;
       $$0$i$i = $24;$$03$i$i = $23;
       break;
      }
      $45 = ($$012|0)>(0);
      L17: do {
       if ($45) {
        $$01114 = 0;
        while(1) {
         __THREW__ = 0;
         (invoke_iiii(655,($4|0),(20268|0),1)|0);
         $48 = __THREW__; __THREW__ = 0;
         $49 = $48&1;
         if ($49) {
          break;
         }
         $50 = (((((($1)) + 8|0) + (($$01114*72)|0)|0)) + 44|0);
         $51 = HEAP32[$50>>2]|0;
         __THREW__ = 0;
         (invoke_iii(656,($4|0),($51|0))|0);
         $52 = __THREW__; __THREW__ = 0;
         $53 = $52&1;
         if ($53) {
          break;
         }
         __THREW__ = 0;
         (invoke_iiii(655,($4|0),(20270|0),1)|0);
         $54 = __THREW__; __THREW__ = 0;
         $55 = $54&1;
         if ($55) {
          break;
         }
         $56 = (((((($1)) + 8|0) + (($$01114*72)|0)|0)) + 48|0);
         $57 = HEAP32[$56>>2]|0;
         __THREW__ = 0;
         (invoke_iii(656,($4|0),($57|0))|0);
         $58 = __THREW__; __THREW__ = 0;
         $59 = $58&1;
         if ($59) {
          break;
         }
         $60 = (($$01114) + 1)|0;
         $61 = ($60|0)<($$012|0);
         if ($61) {
          $$01114 = $60;
         } else {
          label = 20;
          break L17;
         }
        }
        $62 = ___cxa_find_matching_catch_2()|0;
        $63 = tempRet0;
        $$sink$index = $62;$$sink$index7 = $63;
       } else {
        label = 20;
       }
      } while(0);
      do {
       if ((label|0) == 20) {
        __THREW__ = 0;
        invoke_vii(654,($0|0),($9|0));
        $46 = __THREW__; __THREW__ = 0;
        $47 = $46&1;
        if ($47) {
         $64 = ___cxa_find_matching_catch_2()|0;
         $65 = tempRet0;
         $$sink$index = $64;$$sink$index7 = $65;
         break;
        } else {
         __ZNSt3__219basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
         STACKTOP = sp;return;
        }
       }
      } while(0);
      __THREW__ = 0;
      invoke_vi(25,($4|0));
      $66 = __THREW__; __THREW__ = 0;
      $67 = $66&1;
      if ($67) {
       $68 = ___cxa_find_matching_catch_3(0|0)|0;
       $69 = tempRet0;
       ___clang_call_terminate($68);
       // unreachable;
      } else {
       ___resumeException($$sink$index|0);
       // unreachable;
      }
     }
    } while(0);
    __THREW__ = 0;
    invoke_vi(637,($17|0));
    $29 = __THREW__; __THREW__ = 0;
    $30 = $29&1;
    if ($30) {
     $33 = ___cxa_find_matching_catch_3(0|0)|0;
     $34 = tempRet0;
     ___clang_call_terminate($33);
     // unreachable;
    }
    __THREW__ = 0;
    invoke_vi(302,($9|0));
    $31 = __THREW__; __THREW__ = 0;
    $32 = $31&1;
    if ($32) {
     $33 = ___cxa_find_matching_catch_3(0|0)|0;
     $34 = tempRet0;
     ___clang_call_terminate($33);
     // unreachable;
    } else {
     $eh$lpad$body$i$index2Z2D = $$0$i$i;$eh$lpad$body$i$indexZ2D = $$03$i$i;
     break;
    }
   }
  } while(0);
  __THREW__ = 0;
  invoke_vii(652,($4|0),((3336)|0));
  $39 = __THREW__; __THREW__ = 0;
  $40 = $39&1;
  if ($40) {
   $43 = ___cxa_find_matching_catch_3(0|0)|0;
   $44 = tempRet0;
   ___clang_call_terminate($43);
   // unreachable;
  } else {
   $$0$i = $eh$lpad$body$i$index2Z2D;$$03$i = $eh$lpad$body$i$indexZ2D;
  }
 }
 __THREW__ = 0;
 invoke_vi(653,($8|0));
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $43 = ___cxa_find_matching_catch_3(0|0)|0;
  $44 = tempRet0;
  ___clang_call_terminate($43);
  // unreachable;
 } else {
  ___resumeException($$03$i|0);
  // unreachable;
 }
}
function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 32|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($2,$1)|0);
 $3 = ((($0)) + 44|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 8;
 $7 = ($6|0)==(0);
 if (!($7)) {
  $8 = ((($2)) + 11|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)<(0);
  if ($10) {
   $11 = HEAP32[$2>>2]|0;
   $12 = ((($0)) + 36|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($11) + ($13)|0);
   $19 = $11;$21 = $11;$storemerge = $14;
  } else {
   $15 = $9&255;
   $16 = (($2) + ($15)|0);
   $19 = $2;$21 = $2;$storemerge = $16;
  }
  HEAP32[$3>>2] = $storemerge;
  $17 = $storemerge;
  $18 = ((($0)) + 8|0);
  HEAP32[$18>>2] = $19;
  $20 = ((($0)) + 12|0);
  HEAP32[$20>>2] = $21;
  $22 = ((($0)) + 16|0);
  HEAP32[$22>>2] = $17;
 }
 $23 = $5 & 16;
 $24 = ($23|0)==(0);
 if ($24) {
  return;
 }
 $25 = ((($2)) + 11|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = ($26<<24>>24)<(0);
 if ($27) {
  $30 = ((($0)) + 36|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = HEAP32[$2>>2]|0;
  $33 = (($32) + ($31)|0);
  HEAP32[$3>>2] = $33;
  $34 = ((($0)) + 40|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 & 2147483647;
  $phitmp$i = (($36) + -1)|0;
  $37 = $phitmp$i;$55 = $31;
 } else {
  $28 = $26&255;
  $29 = (($2) + ($28)|0);
  HEAP32[$3>>2] = $29;
  $37 = 10;$55 = $28;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($2,$37,0);
 $38 = HEAP8[$25>>0]|0;
 $39 = ($38<<24>>24)<(0);
 if ($39) {
  $40 = HEAP32[$2>>2]|0;
  $41 = ((($0)) + 36|0);
  $42 = HEAP32[$41>>2]|0;
  $45 = $40;$46 = $42;$48 = $40;
 } else {
  $43 = $38&255;
  $45 = $2;$46 = $43;$48 = $2;
 }
 $44 = (($45) + ($46)|0);
 $47 = ((($0)) + 24|0);
 HEAP32[$47>>2] = $48;
 $49 = ((($0)) + 20|0);
 HEAP32[$49>>2] = $48;
 $50 = ((($0)) + 28|0);
 HEAP32[$50>>2] = $44;
 $51 = HEAP32[$4>>2]|0;
 $52 = $51 & 3;
 $53 = ($52|0)==(0);
 if ($53) {
  return;
 }
 $54 = (($48) + ($55)|0);
 HEAP32[$47>>2] = $54;
 return;
}
function __ZNKSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$021$lcssa$i$i = 0, $$021$lcssa$i$i9 = 0, $$021$ph$i$i = 0, $$021$ph$i$i2 = 0, $$02122$i$i = 0, $$02122$i$i5 = 0, $$023$i$i = 0, $$023$i$i4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $scevgep25$i$i = 0, $scevgep25$i$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 16;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $6 = ((($1)) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($1)) + 24|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7>>>0)<($9>>>0);
  if ($10) {
   HEAP32[$6>>2] = $9;
   $14 = $9;
  } else {
   $14 = $7;
  }
  $11 = ((($1)) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
  $13 = $12;
  $15 = $14;
  $16 = (($15) - ($13))|0;
  $17 = ($16>>>0)>(4294967279);
  if ($17) {
   __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
   // unreachable;
  }
  $18 = ($16>>>0)<(11);
  if ($18) {
   $19 = $16&255;
   $20 = ((($0)) + 11|0);
   HEAP8[$20>>0] = $19;
   $$021$ph$i$i2 = $0;
  } else {
   $21 = (($16) + 16)|0;
   $22 = $21 & -16;
   $23 = (__Znwj($22)|0);
   HEAP32[$0>>2] = $23;
   $24 = $22 | -2147483648;
   $25 = ((($0)) + 8|0);
   HEAP32[$25>>2] = $24;
   $26 = ((($0)) + 4|0);
   HEAP32[$26>>2] = $16;
   $$021$ph$i$i2 = $23;
  }
  $27 = ($12|0)==($14|0);
  if ($27) {
   $$021$lcssa$i$i9 = $$021$ph$i$i2;
  } else {
   $$02122$i$i5 = $$021$ph$i$i2;$$023$i$i4 = $12;
   while(1) {
    $28 = HEAP8[$$023$i$i4>>0]|0;
    HEAP8[$$02122$i$i5>>0] = $28;
    $29 = ((($$023$i$i4)) + 1|0);
    $30 = ((($$02122$i$i5)) + 1|0);
    $31 = ($29|0)==($14|0);
    if ($31) {
     break;
    } else {
     $$02122$i$i5 = $30;$$023$i$i4 = $29;
    }
   }
   $scevgep25$i$i7 = (($$021$ph$i$i2) + ($16)|0);
   $$021$lcssa$i$i9 = $scevgep25$i$i7;
  }
  HEAP8[$$021$lcssa$i$i9>>0] = 0;
  return;
 }
 $32 = $3 & 8;
 $33 = ($32|0)==(0);
 if ($33) {
  ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
  return;
 }
 $34 = ((($1)) + 8|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($1)) + 16|0);
 $37 = HEAP32[$36>>2]|0;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $38 = $35;
 $39 = $37;
 $40 = (($39) - ($38))|0;
 $41 = ($40>>>0)>(4294967279);
 if ($41) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $42 = ($40>>>0)<(11);
 if ($42) {
  $43 = $40&255;
  $44 = ((($0)) + 11|0);
  HEAP8[$44>>0] = $43;
  $$021$ph$i$i = $0;
 } else {
  $45 = (($40) + 16)|0;
  $46 = $45 & -16;
  $47 = (__Znwj($46)|0);
  HEAP32[$0>>2] = $47;
  $48 = $46 | -2147483648;
  $49 = ((($0)) + 8|0);
  HEAP32[$49>>2] = $48;
  $50 = ((($0)) + 4|0);
  HEAP32[$50>>2] = $40;
  $$021$ph$i$i = $47;
 }
 $51 = ($35|0)==($37|0);
 if ($51) {
  $$021$lcssa$i$i = $$021$ph$i$i;
 } else {
  $$02122$i$i = $$021$ph$i$i;$$023$i$i = $35;
  while(1) {
   $52 = HEAP8[$$023$i$i>>0]|0;
   HEAP8[$$02122$i$i>>0] = $52;
   $53 = ((($$023$i$i)) + 1|0);
   $54 = ((($$02122$i$i)) + 1|0);
   $55 = ($53|0)==($37|0);
   if ($55) {
    break;
   } else {
    $$02122$i$i = $54;$$023$i$i = $53;
   }
  }
  $scevgep25$i$i = (($$021$ph$i$i) + ($40)|0);
  $$021$lcssa$i$i = $scevgep25$i$i;
 }
 HEAP8[$$021$lcssa$i$i>>0] = 0;
 return;
}
function __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$1 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 20|0;
 $3 = sp + 16|0;
 $4 = sp + 8|0;
 $5 = sp;
 __THREW__ = 0;
 invoke_vii(657,($4|0),($0|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $63 = ___cxa_find_matching_catch_3(0|0)|0;
  $64 = tempRet0;
  $$1 = $63;
 } else {
  $8 = HEAP8[$4>>0]|0;
  $9 = ($8<<24>>24)==(0);
  do {
   if ($9) {
    label = 18;
   } else {
    $10 = HEAP32[$0>>2]|0;
    $11 = ((($10)) + -12|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = (($0) + ($12)|0);
    $14 = ((($13)) + 24|0);
    $15 = HEAP32[$14>>2]|0;
    HEAP32[$5>>2] = $15;
    $16 = HEAP32[$11>>2]|0;
    $17 = (($0) + ($16)|0);
    $18 = ((($17)) + 4|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (($1) + ($2)|0);
    $21 = ((($17)) + 76|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)==(-1);
    do {
     if ($23) {
      __THREW__ = 0;
      $24 = (invoke_ii(658,($17|0))|0);
      $25 = __THREW__; __THREW__ = 0;
      $26 = $25&1;
      if ($26) {
       label = 16;
      } else {
       HEAP32[$3>>2] = $24;
       __THREW__ = 0;
       $27 = (invoke_iii(659,($3|0),(40712|0))|0);
       $28 = __THREW__; __THREW__ = 0;
       $29 = $28&1;
       if (!($29)) {
        $30 = HEAP32[$27>>2]|0;
        $31 = ((($30)) + 28|0);
        $32 = HEAP32[$31>>2]|0;
        __THREW__ = 0;
        $33 = (invoke_iii($32|0,($27|0),32)|0);
        $34 = __THREW__; __THREW__ = 0;
        $35 = $34&1;
        if (!($35)) {
         __THREW__ = 0;
         invoke_vi(660,($3|0));
         $42 = __THREW__; __THREW__ = 0;
         $43 = $42&1;
         if ($43) {
          label = 16;
          break;
         }
         $44 = $33 << 24 >> 24;
         HEAP32[$21>>2] = $44;
         $46 = $44;
         label = 12;
         break;
        }
       }
       $36 = ___cxa_find_matching_catch_3(0|0)|0;
       $37 = tempRet0;
       __THREW__ = 0;
       invoke_vi(660,($3|0));
       $38 = __THREW__; __THREW__ = 0;
       $39 = $38&1;
       if ($39) {
        $40 = ___cxa_find_matching_catch_3(0|0)|0;
        $41 = tempRet0;
        ___clang_call_terminate($40);
        // unreachable;
       } else {
        $eh$lpad$body$indexZ2D = $36;
        break;
       }
      }
     } else {
      $46 = $22;
      label = 12;
     }
    } while(0);
    if ((label|0) == 12) {
     $45 = $46&255;
     $47 = $19 & 176;
     $48 = ($47|0)==(32);
     $49 = $48 ? $20 : $1;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$5>>2]|0;
     $50 = (invoke_iiiiiii(661,($$byval_copy|0),($1|0),($49|0),($20|0),($17|0),($45|0))|0);
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      label = 16;
     } else {
      $53 = ($50|0)==(0|0);
      if (!($53)) {
       label = 18;
       break;
      }
      $54 = HEAP32[$0>>2]|0;
      $55 = ((($54)) + -12|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = (($0) + ($56)|0);
      $58 = ((($57)) + 16|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = $59 | 5;
      __THREW__ = 0;
      invoke_vii(662,($57|0),($60|0));
      $61 = __THREW__; __THREW__ = 0;
      $62 = $61&1;
      if ($62) {
       label = 16;
      } else {
       label = 18;
       break;
      }
     }
    }
    if ((label|0) == 16) {
     $65 = ___cxa_find_matching_catch_3(0|0)|0;
     $66 = tempRet0;
     $eh$lpad$body$indexZ2D = $65;
    }
    __THREW__ = 0;
    invoke_vi(663,($4|0));
    $67 = __THREW__; __THREW__ = 0;
    $68 = $67&1;
    if ($68) {
     $83 = ___cxa_find_matching_catch_3(0|0)|0;
     $84 = tempRet0;
     ___clang_call_terminate($83);
     // unreachable;
    } else {
     $$0 = $eh$lpad$body$indexZ2D;
    }
   }
  } while(0);
  do {
   if ((label|0) == 18) {
    __THREW__ = 0;
    invoke_vi(663,($4|0));
    $69 = __THREW__; __THREW__ = 0;
    $70 = $69&1;
    if ($70) {
     $71 = ___cxa_find_matching_catch_3(0|0)|0;
     $72 = tempRet0;
     $$0 = $71;
     break;
    }
    STACKTOP = sp;return ($0|0);
   }
  } while(0);
  $$1 = $$0;
 }
 (___cxa_begin_catch(($$1|0))|0);
 $73 = HEAP32[$0>>2]|0;
 $74 = ((($73)) + -12|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = (($0) + ($75)|0);
 __THREW__ = 0;
 invoke_vi(664,($76|0));
 $77 = __THREW__; __THREW__ = 0;
 $78 = $77&1;
 if (!($78)) {
  ___cxa_end_catch();
  STACKTOP = sp;return ($0|0);
 }
 $79 = ___cxa_find_matching_catch_2()|0;
 $80 = tempRet0;
 __THREW__ = 0;
 invoke_v(643);
 $81 = __THREW__; __THREW__ = 0;
 $82 = $81&1;
 if ($82) {
  $83 = ___cxa_find_matching_catch_3(0|0)|0;
  $84 = tempRet0;
  ___clang_call_terminate($83);
  // unreachable;
 } else {
  ___resumeException($79|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZNSt3__219basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $eh$lpad$body$index7Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = ((3240));
 $1 = ((($0)) + 56|0);
 HEAP32[$1>>2] = ((3260));
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = (3276);
 $3 = ((($0)) + 36|0);
 __THREW__ = 0;
 invoke_vi(637,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 do {
  if ($5) {
   $8 = ___cxa_find_matching_catch_2()|0;
   $9 = tempRet0;
   __THREW__ = 0;
   invoke_vi(302,($2|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    $12 = ___cxa_find_matching_catch_3(0|0)|0;
    $13 = tempRet0;
    ___clang_call_terminate($12);
    // unreachable;
   } else {
    $eh$lpad$body$i$index2Z2D = $9;$eh$lpad$body$i$indexZ2D = $8;
    label = 7;
   }
  } else {
   __THREW__ = 0;
   invoke_vi(302,($2|0));
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if ($7) {
    $16 = ___cxa_find_matching_catch_2()|0;
    $17 = tempRet0;
    $eh$lpad$body$i$index2Z2D = $17;$eh$lpad$body$i$indexZ2D = $16;
    label = 7;
    break;
   }
   __THREW__ = 0;
   invoke_vii(652,($0|0),((3336)|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $22 = ___cxa_find_matching_catch_2()|0;
    $23 = tempRet0;
    $eh$lpad$body$index7Z2D = $23;$eh$lpad$body$indexZ2D = $22;
    break;
   } else {
    __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($1);
    return;
   }
  }
 } while(0);
 if ((label|0) == 7) {
  __THREW__ = 0;
  invoke_vii(652,($0|0),((3336)|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if ($19) {
   $20 = ___cxa_find_matching_catch_3(0|0)|0;
   $21 = tempRet0;
   ___clang_call_terminate($20);
   // unreachable;
  } else {
   $eh$lpad$body$index7Z2D = $eh$lpad$body$i$index2Z2D;$eh$lpad$body$indexZ2D = $eh$lpad$body$i$indexZ2D;
  }
 }
 __THREW__ = 0;
 invoke_vi(653,($1|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $26 = ___cxa_find_matching_catch_3(0|0)|0;
  $27 = tempRet0;
  ___clang_call_terminate($26);
  // unreachable;
 } else {
  ___resumeException($eh$lpad$body$indexZ2D|0);
  // unreachable;
 }
}
function __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$sroa$0$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp;
 $7 = HEAP32[$0>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$sroa$0$2 = 0;
  STACKTOP = sp;return ($$sroa$0$2|0);
 }
 $9 = $3;
 $10 = $1;
 $11 = (($9) - ($10))|0;
 $12 = ((($4)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)>($11|0);
 $15 = (($13) - ($11))|0;
 $$0 = $14 ? $15 : 0;
 $16 = $2;
 $17 = (($16) - ($10))|0;
 $18 = ($17|0)>(0);
 if ($18) {
  $19 = HEAP32[$7>>2]|0;
  $20 = ((($19)) + 48|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (FUNCTION_TABLE_iiii[$21 & 1023]($7,$1,$17)|0);
  $23 = ($22|0)==($17|0);
  if (!($23)) {
   HEAP32[$0>>2] = 0;
   $$sroa$0$2 = 0;
   STACKTOP = sp;return ($$sroa$0$2|0);
  }
 }
 $24 = ($$0|0)>(0);
 do {
  if ($24) {
   ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($6,$$0,$5);
   $25 = ((($6)) + 11|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = ($26<<24>>24)<(0);
   $28 = HEAP32[$6>>2]|0;
   $29 = $27 ? $28 : $6;
   $30 = HEAP32[$7>>2]|0;
   $31 = ((($30)) + 48|0);
   $32 = HEAP32[$31>>2]|0;
   __THREW__ = 0;
   $33 = (invoke_iiii($32|0,($7|0),($29|0),($$0|0))|0);
   $34 = __THREW__; __THREW__ = 0;
   $35 = $34&1;
   if ($35) {
    $37 = ___cxa_find_matching_catch_2()|0;
    $38 = tempRet0;
    __THREW__ = 0;
    invoke_vi(637,($6|0));
    $39 = __THREW__; __THREW__ = 0;
    $40 = $39&1;
    if ($40) {
     $48 = ___cxa_find_matching_catch_3(0|0)|0;
     $49 = tempRet0;
     ___clang_call_terminate($48);
     // unreachable;
    } else {
     ___resumeException($37|0);
     // unreachable;
    }
   }
   $36 = ($33|0)==($$0|0);
   if ($36) {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
    break;
   }
   HEAP32[$0>>2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
   $$sroa$0$2 = 0;
   STACKTOP = sp;return ($$sroa$0$2|0);
  }
 } while(0);
 $41 = (($9) - ($16))|0;
 $42 = ($41|0)>(0);
 if ($42) {
  $43 = HEAP32[$7>>2]|0;
  $44 = ((($43)) + 48|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (FUNCTION_TABLE_iiii[$45 & 1023]($7,$2,$41)|0);
  $47 = ($46|0)==($41|0);
  if (!($47)) {
   HEAP32[$0>>2] = 0;
   $$sroa$0$2 = 0;
   STACKTOP = sp;return ($$sroa$0$2|0);
  }
 }
 HEAP32[$12>>2] = 0;
 $$sroa$0$2 = $7;
 STACKTOP = sp;return ($$sroa$0$2|0);
}
function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (3276);
 $1 = ((($0)) + 32|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0);
  return;
 }
 $4 = ___cxa_find_matching_catch_2()|0;
 $5 = tempRet0;
 __THREW__ = 0;
 invoke_vi(302,($0|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch_3(0|0)|0;
  $9 = tempRet0;
  ___clang_call_terminate($8);
  // unreachable;
 } else {
  ___resumeException($4|0);
  // unreachable;
 }
}
function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (3276);
 $1 = ((($0)) + 32|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = tempRet0;
  __THREW__ = 0;
  invoke_vi(302,($0|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if ($9) {
   $10 = ___cxa_find_matching_catch_3(0|0)|0;
   $11 = tempRet0;
   ___clang_call_terminate($10);
   // unreachable;
  } else {
   $eh$lpad$body$index2Z2D = $7;$eh$lpad$body$indexZ2D = $6;
   __ZdlPv($0);
   ___resumeException($eh$lpad$body$indexZ2D|0);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(302,($0|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $eh$lpad$body$index2Z2D = $13;$eh$lpad$body$indexZ2D = $12;
 __ZdlPv($0);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $or$cond = 0, $or$cond20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)<($9>>>0);
 $11 = $7;
 $12 = $9;
 if ($10) {
  HEAP32[$6>>2] = $9;
  $57 = $12;
 } else {
  $57 = $11;
 }
 $13 = $5 & 24;
 $14 = ($13|0)==(0);
 if ($14) {
  $15 = $0;
  $16 = $15;
  HEAP32[$16>>2] = 0;
  $17 = (($15) + 4)|0;
  $18 = $17;
  HEAP32[$18>>2] = 0;
  $19 = ((($0)) + 8|0);
  $20 = $19;
  $21 = $20;
  HEAP32[$21>>2] = -1;
  $22 = (($20) + 4)|0;
  $23 = $22;
  HEAP32[$23>>2] = -1;
  return;
 }
 $24 = ($13|0)==(24);
 $25 = ($4|0)==(1);
 $or$cond = $25 & $24;
 if ($or$cond) {
  $26 = $0;
  $27 = $26;
  HEAP32[$27>>2] = 0;
  $28 = (($26) + 4)|0;
  $29 = $28;
  HEAP32[$29>>2] = 0;
  $30 = ((($0)) + 8|0);
  $31 = $30;
  $32 = $31;
  HEAP32[$32>>2] = -1;
  $33 = (($31) + 4)|0;
  $34 = $33;
  HEAP32[$34>>2] = -1;
  return;
 }
 L12: do {
  switch ($4|0) {
  case 0:  {
   $69 = 0;$70 = 0;
   break;
  }
  case 1:  {
   $35 = $5 & 8;
   $36 = ($35|0)==(0);
   if ($36) {
    $44 = ((($1)) + 20|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($12) - ($45))|0;
    $47 = ($46|0)<(0);
    $48 = $47 << 31 >> 31;
    $69 = $46;$70 = $48;
    break L12;
   } else {
    $37 = ((($1)) + 12|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ((($1)) + 8|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($38) - ($40))|0;
    $42 = ($41|0)<(0);
    $43 = $42 << 31 >> 31;
    $69 = $41;$70 = $43;
    break L12;
   }
   break;
  }
  case 2:  {
   $49 = ((($1)) + 32|0);
   $50 = ((($49)) + 11|0);
   $51 = HEAP8[$50>>0]|0;
   $52 = ($51<<24>>24)<(0);
   if ($52) {
    $53 = HEAP32[$49>>2]|0;
    $54 = $53;
   } else {
    $54 = $49;
   }
   $55 = $54;
   $56 = (($57) - ($55))|0;
   $58 = ($56|0)<(0);
   $59 = $58 << 31 >> 31;
   $69 = $56;$70 = $59;
   break;
  }
  default: {
   $60 = $0;
   $61 = $60;
   HEAP32[$61>>2] = 0;
   $62 = (($60) + 4)|0;
   $63 = $62;
   HEAP32[$63>>2] = 0;
   $64 = ((($0)) + 8|0);
   $65 = $64;
   $66 = $65;
   HEAP32[$66>>2] = -1;
   $67 = (($65) + 4)|0;
   $68 = $67;
   HEAP32[$68>>2] = -1;
   return;
  }
  }
 } while(0);
 $71 = (_i64Add(($69|0),($70|0),($2|0),($3|0))|0);
 $72 = tempRet0;
 $73 = ($72|0)<(0);
 if (!($73)) {
  $74 = ((($1)) + 32|0);
  $75 = ((($74)) + 11|0);
  $76 = HEAP8[$75>>0]|0;
  $77 = ($76<<24>>24)<(0);
  if ($77) {
   $78 = HEAP32[$74>>2]|0;
   $79 = $78;
  } else {
   $79 = $74;
  }
  $80 = $79;
  $81 = (($57) - ($80))|0;
  $82 = ($81|0)<(0);
  $83 = $82 << 31 >> 31;
  $84 = ($83|0)<($72|0);
  $85 = ($81>>>0)<($71>>>0);
  $86 = ($83|0)==($72|0);
  $87 = $86 & $85;
  $88 = $84 | $87;
  if (!($88)) {
   $98 = ($71|0)==(0);
   $99 = ($72|0)==(0);
   $100 = $98 & $99;
   $$pre = $5 & 8;
   if (!($100)) {
    $101 = ($$pre|0)==(0);
    if (!($101)) {
     $102 = ((($1)) + 12|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = ($103|0)==(0|0);
     if ($104) {
      $105 = $0;
      $106 = $105;
      HEAP32[$106>>2] = 0;
      $107 = (($105) + 4)|0;
      $108 = $107;
      HEAP32[$108>>2] = 0;
      $109 = ((($0)) + 8|0);
      $110 = $109;
      $111 = $110;
      HEAP32[$111>>2] = -1;
      $112 = (($110) + 4)|0;
      $113 = $112;
      HEAP32[$113>>2] = -1;
      return;
     }
    }
    $114 = $5 & 16;
    $115 = ($114|0)!=(0);
    $116 = ($9|0)==(0|0);
    $or$cond20 = $115 & $116;
    if ($or$cond20) {
     $117 = $0;
     $118 = $117;
     HEAP32[$118>>2] = 0;
     $119 = (($117) + 4)|0;
     $120 = $119;
     HEAP32[$120>>2] = 0;
     $121 = ((($0)) + 8|0);
     $122 = $121;
     $123 = $122;
     HEAP32[$123>>2] = -1;
     $124 = (($122) + 4)|0;
     $125 = $124;
     HEAP32[$125>>2] = -1;
     return;
    }
   }
   $126 = ($$pre|0)==(0);
   if (!($126)) {
    $127 = ((($1)) + 8|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = (($128) + ($71)|0);
    $130 = ((($1)) + 12|0);
    HEAP32[$130>>2] = $129;
    $131 = ((($1)) + 16|0);
    HEAP32[$131>>2] = $57;
   }
   $132 = $5 & 16;
   $133 = ($132|0)==(0);
   if (!($133)) {
    $134 = ((($1)) + 20|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = (($135) + ($71)|0);
    HEAP32[$8>>2] = $136;
   }
   $137 = $0;
   $138 = $137;
   HEAP32[$138>>2] = 0;
   $139 = (($137) + 4)|0;
   $140 = $139;
   HEAP32[$140>>2] = 0;
   $141 = ((($0)) + 8|0);
   $142 = $141;
   $143 = $142;
   HEAP32[$143>>2] = $71;
   $144 = (($142) + 4)|0;
   $145 = $144;
   HEAP32[$145>>2] = $72;
   return;
  }
 }
 $89 = $0;
 $90 = $89;
 HEAP32[$90>>2] = 0;
 $91 = (($89) + 4)|0;
 $92 = $91;
 HEAP32[$92>>2] = 0;
 $93 = ((($0)) + 8|0);
 $94 = $93;
 $95 = $94;
 HEAP32[$95>>2] = -1;
 $96 = (($94) + 4)|0;
 $97 = $96;
 HEAP32[$97>>2] = -1;
 return;
}
function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$1>>2]|0;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 8|0);
 $8 = $7;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 FUNCTION_TABLE_viiiiii[$6 & 1023]($0,$1,$10,$13,0,$3);
 return;
}
function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 44|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)<($4>>>0);
 if ($5) {
  HEAP32[$1>>2] = $4;
  $13 = $4;
 } else {
  $13 = $2;
 }
 $6 = ((($0)) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = -1;
  return ($$0|0);
 }
 $10 = ((($0)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11>>>0)<($13>>>0);
 if ($12) {
  HEAP32[$10>>2] = $13;
  $17 = $13;
 } else {
  $17 = $11;
 }
 $14 = ((($0)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15>>>0)<($17>>>0);
 if (!($16)) {
  $$0 = -1;
  return ($$0|0);
 }
 $18 = HEAP8[$15>>0]|0;
 $19 = $18&255;
 $$0 = $19;
 return ($$0|0);
}
function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$in = 0, $$pre = 0, $$pre$phi7Z2D = 0, $$pre$phiZ2D = 0, $$pre6 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if ($6) {
  HEAP32[$2>>2] = $5;
  $$in = $5;
 } else {
  $$in = $3;
 }
 $7 = $$in;
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($0)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($9>>>0)<($11>>>0);
 if (!($12)) {
  $$0 = -1;
  return ($$0|0);
 }
 $13 = ($1|0)==(-1);
 if ($13) {
  $14 = ((($11)) + -1|0);
  HEAP32[$10>>2] = $14;
  $15 = ((($0)) + 16|0);
  HEAP32[$15>>2] = $7;
  $$0 = 0;
  return ($$0|0);
 }
 $16 = ((($0)) + 48|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & 16;
 $19 = ($18|0)==(0);
 if ($19) {
  $20 = $1&255;
  $21 = ((($11)) + -1|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = ($20<<24>>24)==($22<<24>>24);
  if ($23) {
   $$pre$phi7Z2D = $20;$$pre$phiZ2D = $21;
  } else {
   $$0 = -1;
   return ($$0|0);
  }
 } else {
  $$pre = ((($11)) + -1|0);
  $$pre6 = $1&255;
  $$pre$phi7Z2D = $$pre6;$$pre$phiZ2D = $$pre;
 }
 HEAP32[$10>>2] = $$pre$phiZ2D;
 $24 = ((($0)) + 16|0);
 HEAP32[$24>>2] = $7;
 HEAP8[$$pre$phiZ2D>>0] = $$pre$phi7Z2D;
 $$0 = $1;
 return ($$0|0);
}
function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$phi26Z2D = 0, $$pre$phi28Z2D = 0, $$pre$phiZ2D = 0, $$pre27 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0;
 var $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ($1|0)==(-1);
 if ($3) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $4 = ((($0)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) - ($7))|0;
 $9 = ((($0)) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($10|0)==($12|0);
 do {
  if ($13) {
   $14 = ((($0)) + 48|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $15 & 16;
   $17 = ($16|0)==(0);
   if ($17) {
    $$1 = -1;
    STACKTOP = sp;return ($$1|0);
   }
   $18 = ((($0)) + 20|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $10;
   $21 = (($20) - ($19))|0;
   $22 = ((($0)) + 44|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($23) - ($19))|0;
   $25 = ((($0)) + 32|0);
   __THREW__ = 0;
   invoke_vii(665,($25|0),0);
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if (!($27)) {
    $28 = ((($25)) + 11|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = ($29<<24>>24)<(0);
    if ($30) {
     $31 = ((($0)) + 40|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = $32 & 2147483647;
     $phitmp$i = (($33) + -1)|0;
     $34 = $phitmp$i;
    } else {
     $34 = 10;
    }
    __THREW__ = 0;
    invoke_viii(666,($25|0),($34|0),0);
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if (!($36)) {
     $37 = HEAP8[$28>>0]|0;
     $38 = ($37<<24>>24)<(0);
     if ($38) {
      $39 = HEAP32[$25>>2]|0;
      $40 = ((($0)) + 36|0);
      $41 = HEAP32[$40>>2]|0;
      $44 = $39;$45 = $41;
     } else {
      $42 = $37&255;
      $44 = $25;$45 = $42;
     }
     $43 = (($44) + ($45)|0);
     HEAP32[$18>>2] = $44;
     HEAP32[$11>>2] = $43;
     $46 = (($44) + ($21)|0);
     HEAP32[$9>>2] = $46;
     $47 = (($44) + ($24)|0);
     HEAP32[$22>>2] = $47;
     $$pre$phi26Z2D = $22;$$pre$phi28Z2D = $14;$$pre$phiZ2D = $22;$51 = $46;$53 = $47;$68 = $43;
     break;
    }
   }
   $48 = ___cxa_find_matching_catch_3(0|0)|0;
   $49 = tempRet0;
   (___cxa_begin_catch(($48|0))|0);
   ___cxa_end_catch();
   $$1 = -1;
   STACKTOP = sp;return ($$1|0);
  } else {
   $$phi$trans$insert = ((($0)) + 44|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $$pre27 = ((($0)) + 48|0);
   $$pre$phi26Z2D = $$phi$trans$insert;$$pre$phi28Z2D = $$pre27;$$pre$phiZ2D = $$phi$trans$insert;$51 = $10;$53 = $$pre;$68 = $12;
  }
 } while(0);
 $50 = ((($51)) + 1|0);
 HEAP32[$2>>2] = $50;
 $52 = ($50>>>0)<($53>>>0);
 $54 = $52 ? $$pre$phiZ2D : $2;
 $55 = HEAP32[$54>>2]|0;
 HEAP32[$$pre$phi26Z2D>>2] = $55;
 $56 = HEAP32[$$pre$phi28Z2D>>2]|0;
 $57 = $56 & 8;
 $58 = ($57|0)==(0);
 if (!($58)) {
  $59 = ((($0)) + 32|0);
  $60 = ((($59)) + 11|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = ($61<<24>>24)<(0);
  if ($62) {
   $63 = HEAP32[$59>>2]|0;
   $65 = $63;
  } else {
   $65 = $59;
  }
  $64 = (($65) + ($8)|0);
  HEAP32[$6>>2] = $65;
  HEAP32[$4>>2] = $64;
  $66 = ((($0)) + 16|0);
  HEAP32[$66>>2] = $55;
 }
 $67 = ($51|0)==($68|0);
 if ($67) {
  $69 = HEAP32[$0>>2]|0;
  $70 = ((($69)) + 52|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $1 & 255;
  $73 = (FUNCTION_TABLE_iii[$71 & 1023]($0,$72)|0);
  $$1 = $73;
  STACKTOP = sp;return ($$1|0);
 } else {
  $74 = $1&255;
  HEAP32[$9>>2] = $50;
  HEAP8[$51>>0] = $74;
  $75 = $1 & 255;
  $$1 = $75;
  STACKTOP = sp;return ($$1|0);
 }
 return (0)|0;
}
function __ZNSt3__219basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi(25,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  __ZdlPv($0);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZTv0_n12_NSt3__219basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__219basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
 return;
}
function __ZTv0_n12_NSt3__219basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __THREW__ = 0;
 invoke_vi(25,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  __ZdlPv($4);
  ___resumeException($7|0);
  // unreachable;
 } else {
  __ZdlPv($4);
  return;
 }
}
function __ZNK10SourceCode17IsIfConditionTrueEv($0) {
 $0 = $0|0;
 var $$068 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 18448|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(0);
 if ($3) {
  $$068 = 0;
 } else {
  $9 = 1;
  return ($9|0);
 }
 while(1) {
  $6 = (((($0)) + 18456|0) + (($$068*24)|0)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==(0);
  $4 = (($$068) + 1)|0;
  if ($8) {
   $9 = 0;
   label = 4;
   break;
  }
  $5 = ($4|0)<($2|0);
  if ($5) {
   $$068 = $4;
  } else {
   $9 = 1;
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  return ($9|0);
 }
 return (0)|0;
}
function __ZN10SourceCode10AddIfLevelERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$i = 0, $$0$lpad$bodyZZ2D = 0, $$03$i = 0, $$0714 = 0, $$0715 = 0, $$0812 = 0, $$0813 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 12|0;
 $4 = sp;
 $5 = ((($0)) + 18448|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(256);
 if (!($7)) {
  $42 = (((($0)) + 18456|0) + (($6*24)|0)|0);
  HEAP8[$42>>0] = 1;
  $43 = HEAP32[$5>>2]|0;
  $44 = (((((($0)) + 18456|0) + (($43*24)|0)|0)) + 2|0);
  HEAP8[$44>>0] = 0;
  $45 = HEAP32[$5>>2]|0;
  $46 = (((((($0)) + 18456|0) + (($45*24)|0)|0)) + 1|0);
  HEAP8[$46>>0] = 0;
  $47 = HEAP32[$5>>2]|0;
  $48 = (((((($0)) + 18456|0) + (($47*24)|0)|0)) + 3|0);
  HEAP8[$48>>0] = 0;
  $49 = HEAP32[$5>>2]|0;
  $50 = (((((($0)) + 18456|0) + (($49*24)|0)|0)) + 4|0);
  (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($50,$1)|0);
  $51 = HEAP32[$5>>2]|0;
  $52 = (((((($0)) + 18456|0) + (($51*24)|0)|0)) + 16|0);
  HEAP32[$52>>2] = $2;
  $53 = ((($0)) + 24616|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = HEAP32[$5>>2]|0;
  $56 = (((((($0)) + 18456|0) + (($55*24)|0)|0)) + 20|0);
  HEAP32[$56>>2] = $54;
  $57 = (($55) + 1)|0;
  HEAP32[$5>>2] = $57;
  STACKTOP = sp;return;
 }
 $8 = (___cxa_allocate_exception(36)|0);
 __THREW__ = 0;
 invoke_vii(635,($4|0),($1|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $36 = ___cxa_find_matching_catch_2()|0;
  $37 = tempRet0;
  $$0715 = $37;$$0813 = $36;
 } else {
  __THREW__ = 0;
  invoke_vii(635,($3|0),($4|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  L7: do {
   if ($12) {
    $$0 = 1;
    label = 14;
   } else {
    HEAP32[$8>>2] = (4652);
    $13 = ((($8)) + 4|0);
    __THREW__ = 0;
    invoke_vii(635,($13|0),($3|0));
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    do {
     if ($15) {
      $20 = ___cxa_find_matching_catch_2()|0;
      $21 = tempRet0;
      $$0$i = $21;$$03$i = $20;
     } else {
      $16 = ((($8)) + 16|0);
      HEAP32[$16>>2] = $2;
      $17 = ((($8)) + 20|0);
      ;HEAP32[$17>>2]=0|0;HEAP32[$17+4>>2]=0|0;HEAP32[$17+8>>2]=0|0;
      __THREW__ = 0;
      invoke_viii(646,($17|0),(44984|0),0);
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if ($19) {
       $22 = ___cxa_find_matching_catch_2()|0;
       $23 = tempRet0;
       __THREW__ = 0;
       invoke_vi(637,($13|0));
       $24 = __THREW__; __THREW__ = 0;
       $25 = $24&1;
       if (!($25)) {
        $$0$i = $23;$$03$i = $22;
        break;
       }
       $26 = ___cxa_find_matching_catch_3(0|0)|0;
       $27 = tempRet0;
       ___clang_call_terminate($26);
       // unreachable;
      } else {
       $28 = ((($8)) + 32|0);
       HEAP32[$28>>2] = 0;
       __THREW__ = 0;
       invoke_vi(637,($3|0));
       $29 = __THREW__; __THREW__ = 0;
       $30 = $29&1;
       if ($30) {
        $$0 = 1;
        label = 14;
        break L7;
       }
       HEAP32[$8>>2] = (3356);
       __THREW__ = 0;
       invoke_viii(644,($8|0),(160|0),(7|0));
       $35 = __THREW__; __THREW__ = 0;
       $$0 = 0;
       label = 14;
       break L7;
      }
     }
    } while(0);
    __THREW__ = 0;
    invoke_vi(637,($3|0));
    $31 = __THREW__; __THREW__ = 0;
    $32 = $31&1;
    if ($32) {
     $33 = ___cxa_find_matching_catch_3(0|0)|0;
     $34 = tempRet0;
     ___clang_call_terminate($33);
     // unreachable;
    } else {
     $$0$lpad$bodyZZ2D = 1;$eh$lpad$body$index2Z2D = $$0$i;$eh$lpad$body$indexZ2D = $$03$i;
    }
   }
  } while(0);
  if ((label|0) == 14) {
   $38 = ___cxa_find_matching_catch_2()|0;
   $39 = tempRet0;
   $$0$lpad$bodyZZ2D = $$0;$eh$lpad$body$index2Z2D = $39;$eh$lpad$body$indexZ2D = $38;
  }
  __THREW__ = 0;
  invoke_vi(637,($4|0));
  $40 = __THREW__; __THREW__ = 0;
  $41 = $40&1;
  if ($41) {
   $58 = ___cxa_find_matching_catch_3(0|0)|0;
   $59 = tempRet0;
   ___clang_call_terminate($58);
   // unreachable;
  }
  if ($$0$lpad$bodyZZ2D) {
   $$0715 = $eh$lpad$body$index2Z2D;$$0813 = $eh$lpad$body$indexZ2D;
  } else {
   $$0714 = $eh$lpad$body$index2Z2D;$$0812 = $eh$lpad$body$indexZ2D;
   ___resumeException($$0812|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($8|0));
 $$0714 = $$0715;$$0812 = $$0813;
 ___resumeException($$0812|0);
 // unreachable;
}
function __ZN35AsmException_SyntaxError_TooManyIFsD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK35AsmException_SyntaxError_TooManyIFs7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (20446|0);
}
function __ZN10SourceCode21SetCurrentIfConditionEb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 18448|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 if (!($4)) {
  ___assert_fail((20467|0),(20484|0),439,(20529|0));
  // unreachable;
 }
 $5 = (($3) + -1)|0;
 $6 = (((($0)) + 18456|0) + (($5*24)|0)|0);
 $7 = $1&1;
 HEAP8[$6>>0] = $7;
 if (!($1)) {
  return;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + -1)|0;
 $10 = (((((($0)) + 18456|0) + (($9*24)|0)|0)) + 2|0);
 HEAP8[$10>>0] = 1;
 return;
}
function __ZN10SourceCode9StartElseERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$i = 0, $$0$lpad$bodyZZ2D = 0, $$03$i = 0, $$0512 = 0, $$0513 = 0, $$0610 = 0, $$0611 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 12|0;
 $4 = sp;
 $5 = ((($0)) + 18448|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + -1)|0;
 $8 = (((((($0)) + 18456|0) + (($7*24)|0)|0)) + 1|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(0);
 if ($10) {
  HEAP8[$8>>0] = 1;
  $45 = HEAP32[$5>>2]|0;
  $46 = (($45) + -1)|0;
  $47 = (((((($0)) + 18456|0) + (($46*24)|0)|0)) + 2|0);
  $48 = HEAP8[$47>>0]|0;
  $49 = (((($0)) + 18456|0) + (($46*24)|0)|0);
  $50 = $48 ^ 1;
  HEAP8[$49>>0] = $50;
  STACKTOP = sp;return;
 }
 $11 = (___cxa_allocate_exception(36)|0);
 __THREW__ = 0;
 invoke_vii(635,($4|0),($1|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $39 = ___cxa_find_matching_catch_2()|0;
  $40 = tempRet0;
  $$0513 = $40;$$0611 = $39;
 } else {
  __THREW__ = 0;
  invoke_vii(635,($3|0),($4|0));
  $14 = __THREW__; __THREW__ = 0;
  $15 = $14&1;
  L7: do {
   if ($15) {
    $$0 = 1;
    label = 14;
   } else {
    HEAP32[$11>>2] = (4652);
    $16 = ((($11)) + 4|0);
    __THREW__ = 0;
    invoke_vii(635,($16|0),($3|0));
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    do {
     if ($18) {
      $23 = ___cxa_find_matching_catch_2()|0;
      $24 = tempRet0;
      $$0$i = $24;$$03$i = $23;
     } else {
      $19 = ((($11)) + 16|0);
      HEAP32[$19>>2] = $2;
      $20 = ((($11)) + 20|0);
      ;HEAP32[$20>>2]=0|0;HEAP32[$20+4>>2]=0|0;HEAP32[$20+8>>2]=0|0;
      __THREW__ = 0;
      invoke_viii(646,($20|0),(44984|0),0);
      $21 = __THREW__; __THREW__ = 0;
      $22 = $21&1;
      if ($22) {
       $25 = ___cxa_find_matching_catch_2()|0;
       $26 = tempRet0;
       __THREW__ = 0;
       invoke_vi(637,($16|0));
       $27 = __THREW__; __THREW__ = 0;
       $28 = $27&1;
       if (!($28)) {
        $$0$i = $26;$$03$i = $25;
        break;
       }
       $29 = ___cxa_find_matching_catch_3(0|0)|0;
       $30 = tempRet0;
       ___clang_call_terminate($29);
       // unreachable;
      } else {
       $31 = ((($11)) + 32|0);
       HEAP32[$31>>2] = 0;
       __THREW__ = 0;
       invoke_vi(637,($3|0));
       $32 = __THREW__; __THREW__ = 0;
       $33 = $32&1;
       if ($33) {
        $$0 = 1;
        label = 14;
        break L7;
       }
       HEAP32[$11>>2] = (3380);
       __THREW__ = 0;
       invoke_viii(644,($11|0),(176|0),(7|0));
       $38 = __THREW__; __THREW__ = 0;
       $$0 = 0;
       label = 14;
       break L7;
      }
     }
    } while(0);
    __THREW__ = 0;
    invoke_vi(637,($3|0));
    $34 = __THREW__; __THREW__ = 0;
    $35 = $34&1;
    if ($35) {
     $36 = ___cxa_find_matching_catch_3(0|0)|0;
     $37 = tempRet0;
     ___clang_call_terminate($36);
     // unreachable;
    } else {
     $$0$lpad$bodyZZ2D = 1;$eh$lpad$body$index2Z2D = $$0$i;$eh$lpad$body$indexZ2D = $$03$i;
    }
   }
  } while(0);
  if ((label|0) == 14) {
   $41 = ___cxa_find_matching_catch_2()|0;
   $42 = tempRet0;
   $$0$lpad$bodyZZ2D = $$0;$eh$lpad$body$index2Z2D = $42;$eh$lpad$body$indexZ2D = $41;
  }
  __THREW__ = 0;
  invoke_vi(637,($4|0));
  $43 = __THREW__; __THREW__ = 0;
  $44 = $43&1;
  if ($44) {
   $51 = ___cxa_find_matching_catch_3(0|0)|0;
   $52 = tempRet0;
   ___clang_call_terminate($51);
   // unreachable;
  }
  if ($$0$lpad$bodyZZ2D) {
   $$0513 = $eh$lpad$body$index2Z2D;$$0611 = $eh$lpad$body$indexZ2D;
  } else {
   $$0512 = $eh$lpad$body$index2Z2D;$$0610 = $eh$lpad$body$indexZ2D;
   ___resumeException($$0610|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($11|0));
 $$0512 = $$0513;$$0610 = $$0611;
 ___resumeException($$0610|0);
 // unreachable;
}
function __ZN38AsmException_SyntaxError_ElseWithoutIfD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK38AsmException_SyntaxError_ElseWithoutIf7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (20592|0);
}
function __ZN10SourceCode9StartElifERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$i = 0, $$0$lpad$bodyZZ2D = 0, $$03$i = 0, $$0512 = 0, $$0513 = 0, $$0610 = 0, $$0611 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 12|0;
 $4 = sp;
 $5 = ((($0)) + 18448|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + -1)|0;
 $8 = (((((($0)) + 18456|0) + (($7*24)|0)|0)) + 1|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(0);
 if ($10) {
  $45 = (((((($0)) + 18456|0) + (($7*24)|0)|0)) + 2|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = (((($0)) + 18456|0) + (($7*24)|0)|0);
  $48 = $46 ^ 1;
  HEAP8[$47>>0] = $48;
  STACKTOP = sp;return;
 }
 $11 = (___cxa_allocate_exception(36)|0);
 __THREW__ = 0;
 invoke_vii(635,($4|0),($1|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $39 = ___cxa_find_matching_catch_2()|0;
  $40 = tempRet0;
  $$0513 = $40;$$0611 = $39;
 } else {
  __THREW__ = 0;
  invoke_vii(635,($3|0),($4|0));
  $14 = __THREW__; __THREW__ = 0;
  $15 = $14&1;
  L7: do {
   if ($15) {
    $$0 = 1;
    label = 14;
   } else {
    HEAP32[$11>>2] = (4652);
    $16 = ((($11)) + 4|0);
    __THREW__ = 0;
    invoke_vii(635,($16|0),($3|0));
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    do {
     if ($18) {
      $23 = ___cxa_find_matching_catch_2()|0;
      $24 = tempRet0;
      $$0$i = $24;$$03$i = $23;
     } else {
      $19 = ((($11)) + 16|0);
      HEAP32[$19>>2] = $2;
      $20 = ((($11)) + 20|0);
      ;HEAP32[$20>>2]=0|0;HEAP32[$20+4>>2]=0|0;HEAP32[$20+8>>2]=0|0;
      __THREW__ = 0;
      invoke_viii(646,($20|0),(44984|0),0);
      $21 = __THREW__; __THREW__ = 0;
      $22 = $21&1;
      if ($22) {
       $25 = ___cxa_find_matching_catch_2()|0;
       $26 = tempRet0;
       __THREW__ = 0;
       invoke_vi(637,($16|0));
       $27 = __THREW__; __THREW__ = 0;
       $28 = $27&1;
       if (!($28)) {
        $$0$i = $26;$$03$i = $25;
        break;
       }
       $29 = ___cxa_find_matching_catch_3(0|0)|0;
       $30 = tempRet0;
       ___clang_call_terminate($29);
       // unreachable;
      } else {
       $31 = ((($11)) + 32|0);
       HEAP32[$31>>2] = 0;
       __THREW__ = 0;
       invoke_vi(637,($3|0));
       $32 = __THREW__; __THREW__ = 0;
       $33 = $32&1;
       if ($33) {
        $$0 = 1;
        label = 14;
        break L7;
       }
       HEAP32[$11>>2] = (3404);
       __THREW__ = 0;
       invoke_viii(644,($11|0),(192|0),(7|0));
       $38 = __THREW__; __THREW__ = 0;
       $$0 = 0;
       label = 14;
       break L7;
      }
     }
    } while(0);
    __THREW__ = 0;
    invoke_vi(637,($3|0));
    $34 = __THREW__; __THREW__ = 0;
    $35 = $34&1;
    if ($35) {
     $36 = ___cxa_find_matching_catch_3(0|0)|0;
     $37 = tempRet0;
     ___clang_call_terminate($36);
     // unreachable;
    } else {
     $$0$lpad$bodyZZ2D = 1;$eh$lpad$body$index2Z2D = $$0$i;$eh$lpad$body$indexZ2D = $$03$i;
    }
   }
  } while(0);
  if ((label|0) == 14) {
   $41 = ___cxa_find_matching_catch_2()|0;
   $42 = tempRet0;
   $$0$lpad$bodyZZ2D = $$0;$eh$lpad$body$index2Z2D = $42;$eh$lpad$body$indexZ2D = $41;
  }
  __THREW__ = 0;
  invoke_vi(637,($4|0));
  $43 = __THREW__; __THREW__ = 0;
  $44 = $43&1;
  if ($44) {
   $49 = ___cxa_find_matching_catch_3(0|0)|0;
   $50 = tempRet0;
   ___clang_call_terminate($49);
   // unreachable;
  }
  if ($$0$lpad$bodyZZ2D) {
   $$0513 = $eh$lpad$body$index2Z2D;$$0611 = $eh$lpad$body$indexZ2D;
  } else {
   $$0512 = $eh$lpad$body$index2Z2D;$$0610 = $eh$lpad$body$indexZ2D;
   ___resumeException($$0610|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($11|0));
 $$0512 = $$0513;$$0610 = $$0611;
 ___resumeException($$0610|0);
 // unreachable;
}
function __ZN38AsmException_SyntaxError_ElifWithoutIfD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK38AsmException_SyntaxError_ElifWithoutIf7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (20650|0);
}
function __ZN10SourceCode13RemoveIfLevelERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$i = 0, $$0$lpad$bodyZZ2D = 0, $$03$i = 0, $$0512 = 0, $$0513 = 0, $$0610 = 0, $$0611 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 12|0;
 $4 = sp;
 $5 = ((($0)) + 18448|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if (!($7)) {
  $42 = (($6) + -1)|0;
  HEAP32[$5>>2] = $42;
  STACKTOP = sp;return;
 }
 $8 = (___cxa_allocate_exception(36)|0);
 __THREW__ = 0;
 invoke_vii(635,($4|0),($1|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $36 = ___cxa_find_matching_catch_2()|0;
  $37 = tempRet0;
  $$0513 = $37;$$0611 = $36;
 } else {
  __THREW__ = 0;
  invoke_vii(635,($3|0),($4|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  L7: do {
   if ($12) {
    $$0 = 1;
    label = 14;
   } else {
    HEAP32[$8>>2] = (4652);
    $13 = ((($8)) + 4|0);
    __THREW__ = 0;
    invoke_vii(635,($13|0),($3|0));
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    do {
     if ($15) {
      $20 = ___cxa_find_matching_catch_2()|0;
      $21 = tempRet0;
      $$0$i = $21;$$03$i = $20;
     } else {
      $16 = ((($8)) + 16|0);
      HEAP32[$16>>2] = $2;
      $17 = ((($8)) + 20|0);
      ;HEAP32[$17>>2]=0|0;HEAP32[$17+4>>2]=0|0;HEAP32[$17+8>>2]=0|0;
      __THREW__ = 0;
      invoke_viii(646,($17|0),(44984|0),0);
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if ($19) {
       $22 = ___cxa_find_matching_catch_2()|0;
       $23 = tempRet0;
       __THREW__ = 0;
       invoke_vi(637,($13|0));
       $24 = __THREW__; __THREW__ = 0;
       $25 = $24&1;
       if (!($25)) {
        $$0$i = $23;$$03$i = $22;
        break;
       }
       $26 = ___cxa_find_matching_catch_3(0|0)|0;
       $27 = tempRet0;
       ___clang_call_terminate($26);
       // unreachable;
      } else {
       $28 = ((($8)) + 32|0);
       HEAP32[$28>>2] = 0;
       __THREW__ = 0;
       invoke_vi(637,($3|0));
       $29 = __THREW__; __THREW__ = 0;
       $30 = $29&1;
       if ($30) {
        $$0 = 1;
        label = 14;
        break L7;
       }
       HEAP32[$8>>2] = (3428);
       __THREW__ = 0;
       invoke_viii(644,($8|0),(208|0),(7|0));
       $35 = __THREW__; __THREW__ = 0;
       $$0 = 0;
       label = 14;
       break L7;
      }
     }
    } while(0);
    __THREW__ = 0;
    invoke_vi(637,($3|0));
    $31 = __THREW__; __THREW__ = 0;
    $32 = $31&1;
    if ($32) {
     $33 = ___cxa_find_matching_catch_3(0|0)|0;
     $34 = tempRet0;
     ___clang_call_terminate($33);
     // unreachable;
    } else {
     $$0$lpad$bodyZZ2D = 1;$eh$lpad$body$index2Z2D = $$0$i;$eh$lpad$body$indexZ2D = $$03$i;
    }
   }
  } while(0);
  if ((label|0) == 14) {
   $38 = ___cxa_find_matching_catch_2()|0;
   $39 = tempRet0;
   $$0$lpad$bodyZZ2D = $$0;$eh$lpad$body$index2Z2D = $39;$eh$lpad$body$indexZ2D = $38;
  }
  __THREW__ = 0;
  invoke_vi(637,($4|0));
  $40 = __THREW__; __THREW__ = 0;
  $41 = $40&1;
  if ($41) {
   $43 = ___cxa_find_matching_catch_3(0|0)|0;
   $44 = tempRet0;
   ___clang_call_terminate($43);
   // unreachable;
  }
  if ($$0$lpad$bodyZZ2D) {
   $$0513 = $eh$lpad$body$index2Z2D;$$0611 = $eh$lpad$body$indexZ2D;
  } else {
   $$0512 = $eh$lpad$body$index2Z2D;$$0610 = $eh$lpad$body$indexZ2D;
   ___resumeException($$0610|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($8|0));
 $$0512 = $$0513;$$0610 = $$0611;
 ___resumeException($$0610|0);
 // unreachable;
}
function __ZN39AsmException_SyntaxError_EndifWithoutIfD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK39AsmException_SyntaxError_EndifWithoutIf7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (20709|0);
}
function __ZN10SourceCode10StartMacroERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$i = 0, $$0$lpad$bodyZZ2D = 0, $$03$i = 0, $$0715 = 0, $$0914 = 0, $$110 = 0, $$18 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 12|0;
 $4 = sp;
 $5 = HEAP32[9088]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  ___assert_fail((27040|0),(27060|0),38,(27075|0));
  // unreachable;
 }
 $7 = HEAP32[$5>>2]|0;
 $8 = ($7|0)==(0);
 do {
  if ($8) {
   $9 = ((($0)) + 24600|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0|0);
   if ($11) {
    $12 = (__Znwj(52)|0);
    $13 = ((($0)) + 24604|0);
    $14 = ((($0)) + 24616|0);
    $15 = HEAP32[$14>>2]|0;
    __THREW__ = 0;
    invoke_viii(667,($12|0),($13|0),($15|0));
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     HEAP32[$9>>2] = $12;
     break;
    }
    $18 = ___cxa_find_matching_catch_2()|0;
    $19 = tempRet0;
    __ZdlPv($12);
    $$110 = $18;$$18 = $19;
    ___resumeException($$110|0);
    // unreachable;
   }
   $20 = (___cxa_allocate_exception(36)|0);
   __THREW__ = 0;
   invoke_vii(635,($4|0),($1|0));
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   if ($22) {
    $48 = ___cxa_find_matching_catch_2()|0;
    $49 = tempRet0;
    $$0715 = $49;$$0914 = $48;
   } else {
    __THREW__ = 0;
    invoke_vii(635,($3|0),($4|0));
    $23 = __THREW__; __THREW__ = 0;
    $24 = $23&1;
    L16: do {
     if ($24) {
      $$0 = 1;
      label = 20;
     } else {
      HEAP32[$20>>2] = (4652);
      $25 = ((($20)) + 4|0);
      __THREW__ = 0;
      invoke_vii(635,($25|0),($3|0));
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      do {
       if ($27) {
        $32 = ___cxa_find_matching_catch_2()|0;
        $33 = tempRet0;
        $$0$i = $33;$$03$i = $32;
       } else {
        $28 = ((($20)) + 16|0);
        HEAP32[$28>>2] = $2;
        $29 = ((($20)) + 20|0);
        ;HEAP32[$29>>2]=0|0;HEAP32[$29+4>>2]=0|0;HEAP32[$29+8>>2]=0|0;
        __THREW__ = 0;
        invoke_viii(646,($29|0),(44984|0),0);
        $30 = __THREW__; __THREW__ = 0;
        $31 = $30&1;
        if ($31) {
         $34 = ___cxa_find_matching_catch_2()|0;
         $35 = tempRet0;
         __THREW__ = 0;
         invoke_vi(637,($25|0));
         $36 = __THREW__; __THREW__ = 0;
         $37 = $36&1;
         if (!($37)) {
          $$0$i = $35;$$03$i = $34;
          break;
         }
         $38 = ___cxa_find_matching_catch_3(0|0)|0;
         $39 = tempRet0;
         ___clang_call_terminate($38);
         // unreachable;
        } else {
         $40 = ((($20)) + 32|0);
         HEAP32[$40>>2] = 0;
         __THREW__ = 0;
         invoke_vi(637,($3|0));
         $41 = __THREW__; __THREW__ = 0;
         $42 = $41&1;
         if ($42) {
          $$0 = 1;
          label = 20;
          break L16;
         }
         HEAP32[$20>>2] = (3452);
         __THREW__ = 0;
         invoke_viii(644,($20|0),(224|0),(7|0));
         $47 = __THREW__; __THREW__ = 0;
         $$0 = 0;
         label = 20;
         break L16;
        }
       }
      } while(0);
      __THREW__ = 0;
      invoke_vi(637,($3|0));
      $43 = __THREW__; __THREW__ = 0;
      $44 = $43&1;
      if ($44) {
       $45 = ___cxa_find_matching_catch_3(0|0)|0;
       $46 = tempRet0;
       ___clang_call_terminate($45);
       // unreachable;
      } else {
       $$0$lpad$bodyZZ2D = 1;$eh$lpad$body$index2Z2D = $$0$i;$eh$lpad$body$indexZ2D = $$03$i;
      }
     }
    } while(0);
    if ((label|0) == 20) {
     $50 = ___cxa_find_matching_catch_2()|0;
     $51 = tempRet0;
     $$0$lpad$bodyZZ2D = $$0;$eh$lpad$body$index2Z2D = $51;$eh$lpad$body$indexZ2D = $50;
    }
    __THREW__ = 0;
    invoke_vi(637,($4|0));
    $52 = __THREW__; __THREW__ = 0;
    $53 = $52&1;
    if ($53) {
     $59 = ___cxa_find_matching_catch_3(0|0)|0;
     $60 = tempRet0;
     ___clang_call_terminate($59);
     // unreachable;
    }
    if ($$0$lpad$bodyZZ2D) {
     $$0715 = $eh$lpad$body$index2Z2D;$$0914 = $eh$lpad$body$indexZ2D;
    } else {
     $$110 = $eh$lpad$body$indexZ2D;$$18 = $eh$lpad$body$index2Z2D;
     ___resumeException($$110|0);
     // unreachable;
    }
   }
   ___cxa_free_exception(($20|0));
   $$110 = $$0914;$$18 = $$0715;
   ___resumeException($$110|0);
   // unreachable;
  }
 } while(0);
 __ZN10SourceCode10AddIfLevelERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($0,$1,$2);
 $54 = ((($0)) + 18448|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)>(0);
 if ($56) {
  $57 = (($55) + -1)|0;
  $58 = (((((($0)) + 18456|0) + (($57*24)|0)|0)) + 3|0);
  HEAP8[$58>>0] = 1;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((20467|0),(20484|0),426,(20499|0));
  // unreachable;
 }
}
function __ZN39AsmException_SyntaxError_NoNestedMacrosD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK39AsmException_SyntaxError_NoNestedMacros7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (20769|0);
}
function __ZN10SourceCode8EndMacroERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$i = 0, $$0$lpad$bodyZZ2D = 0, $$03$i = 0, $$0715 = 0, $$0716 = 0, $$0813 = 0, $$0814 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 12|0;
 $4 = sp;
 $5 = HEAP32[9088]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  ___assert_fail((27040|0),(27060|0),38,(27075|0));
  // unreachable;
 }
 $7 = HEAP32[$5>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = ((($0)) + 24600|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   $12 = (___cxa_allocate_exception(36)|0);
   __THREW__ = 0;
   invoke_vii(635,($4|0),($1|0));
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    $41 = ___cxa_find_matching_catch_2()|0;
    $42 = tempRet0;
    $$0716 = $42;$$0814 = $41;
   } else {
    $15 = (($2) + -8)|0;
    __THREW__ = 0;
    invoke_vii(635,($3|0),($4|0));
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    L10: do {
     if ($17) {
      $$0 = 1;
      label = 17;
     } else {
      HEAP32[$12>>2] = (4652);
      $18 = ((($12)) + 4|0);
      __THREW__ = 0;
      invoke_vii(635,($18|0),($3|0));
      $19 = __THREW__; __THREW__ = 0;
      $20 = $19&1;
      do {
       if ($20) {
        $25 = ___cxa_find_matching_catch_2()|0;
        $26 = tempRet0;
        $$0$i = $26;$$03$i = $25;
       } else {
        $21 = ((($12)) + 16|0);
        HEAP32[$21>>2] = $15;
        $22 = ((($12)) + 20|0);
        ;HEAP32[$22>>2]=0|0;HEAP32[$22+4>>2]=0|0;HEAP32[$22+8>>2]=0|0;
        __THREW__ = 0;
        invoke_viii(646,($22|0),(44984|0),0);
        $23 = __THREW__; __THREW__ = 0;
        $24 = $23&1;
        if ($24) {
         $27 = ___cxa_find_matching_catch_2()|0;
         $28 = tempRet0;
         __THREW__ = 0;
         invoke_vi(637,($18|0));
         $29 = __THREW__; __THREW__ = 0;
         $30 = $29&1;
         if (!($30)) {
          $$0$i = $28;$$03$i = $27;
          break;
         }
         $31 = ___cxa_find_matching_catch_3(0|0)|0;
         $32 = tempRet0;
         ___clang_call_terminate($31);
         // unreachable;
        } else {
         $33 = ((($12)) + 32|0);
         HEAP32[$33>>2] = 0;
         __THREW__ = 0;
         invoke_vi(637,($3|0));
         $34 = __THREW__; __THREW__ = 0;
         $35 = $34&1;
         if ($35) {
          $$0 = 1;
          label = 17;
          break L10;
         }
         HEAP32[$12>>2] = (3476);
         __THREW__ = 0;
         invoke_viii(644,($12|0),(240|0),(7|0));
         $40 = __THREW__; __THREW__ = 0;
         $$0 = 0;
         label = 17;
         break L10;
        }
       }
      } while(0);
      __THREW__ = 0;
      invoke_vi(637,($3|0));
      $36 = __THREW__; __THREW__ = 0;
      $37 = $36&1;
      if ($37) {
       $38 = ___cxa_find_matching_catch_3(0|0)|0;
       $39 = tempRet0;
       ___clang_call_terminate($38);
       // unreachable;
      } else {
       $$0$lpad$bodyZZ2D = 1;$eh$lpad$body$index2Z2D = $$0$i;$eh$lpad$body$indexZ2D = $$03$i;
      }
     }
    } while(0);
    if ((label|0) == 17) {
     $43 = ___cxa_find_matching_catch_2()|0;
     $44 = tempRet0;
     $$0$lpad$bodyZZ2D = $$0;$eh$lpad$body$index2Z2D = $44;$eh$lpad$body$indexZ2D = $43;
    }
    __THREW__ = 0;
    invoke_vi(637,($4|0));
    $45 = __THREW__; __THREW__ = 0;
    $46 = $45&1;
    if ($46) {
     $55 = ___cxa_find_matching_catch_3(0|0)|0;
     $56 = tempRet0;
     ___clang_call_terminate($55);
     // unreachable;
    }
    if ($$0$lpad$bodyZZ2D) {
     $$0716 = $eh$lpad$body$index2Z2D;$$0814 = $eh$lpad$body$indexZ2D;
    } else {
     $$0715 = $eh$lpad$body$index2Z2D;$$0813 = $eh$lpad$body$indexZ2D;
     ___resumeException($$0813|0);
     // unreachable;
    }
   }
   ___cxa_free_exception(($12|0));
   $$0715 = $$0716;$$0813 = $$0814;
   ___resumeException($$0813|0);
   // unreachable;
  }
 }
 __ZN10SourceCode13RemoveIfLevelERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($0,$1,$2);
 $47 = HEAP32[9088]|0;
 $48 = ($47|0)==(0|0);
 if ($48) {
  ___assert_fail((27040|0),(27060|0),38,(27075|0));
  // unreachable;
 }
 $49 = HEAP32[$47>>2]|0;
 $50 = ($49|0)==(0);
 if (!($50)) {
  STACKTOP = sp;return;
 }
 $51 = HEAP32[9089]|0;
 $52 = ($51|0)==(0|0);
 if ($52) {
  ___assert_fail((27040|0),(27237|0),128,(27075|0));
  // unreachable;
 }
 $53 = ((($0)) + 24600|0);
 $54 = HEAP32[$53>>2]|0;
 __ZN10MacroTable3AddEP5Macro($51,$54);
 HEAP32[$53>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN43AsmException_SyntaxError_EndMacroUnexpectedD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK43AsmException_SyntaxError_EndMacroUnexpected7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (20855|0);
}
function __ZN10LineParser9EvalPowerEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i = 0, $$01118 = 0, $$03$i = 0, $$05 = 0, $$05$lpad$bodyZZ2D = 0, $$07 = 0, $$0919 = 0, $$11022 = 0, $$11221 = 0, $$21324 = 0, $$225 = 0, $$3 = 0, $$314 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $1 = sp + 36|0;
 $2 = sp + 24|0;
 $3 = sp + 12|0;
 $4 = sp;
 $5 = ((($0)) + 1560|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)<(2);
 if ($7) {
  $8 = (___cxa_allocate_exception(36)|0);
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vii(635,($2|0),($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $17 = ___cxa_find_matching_catch_2()|0;
   $18 = tempRet0;
   $$01118 = $17;$$0919 = $18;
  } else {
   $12 = ((($0)) + 16|0);
   $13 = HEAP32[$12>>2]|0;
   __THREW__ = 0;
   invoke_viii(668,($8|0),($2|0),($13|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $$07 = 1;
   } else {
    __THREW__ = 0;
    invoke_viii(644,($8|0),(256|0),(7|0));
    $16 = __THREW__; __THREW__ = 0;
    $$07 = 0;
   }
   $19 = ___cxa_find_matching_catch_2()|0;
   $20 = tempRet0;
   __THREW__ = 0;
   invoke_vi(637,($2|0));
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   if ($22) {
    $88 = ___cxa_find_matching_catch_3(0|0)|0;
    $89 = tempRet0;
    ___clang_call_terminate($88);
    // unreachable;
   }
   if ($$07) {
    $$01118 = $19;$$0919 = $20;
   } else {
    $$3 = $20;$$314 = $19;
    ___resumeException($$314|0);
    // unreachable;
   }
  }
  ___cxa_free_exception(($8|0));
  $$3 = $$0919;$$314 = $$01118;
  ___resumeException($$314|0);
  // unreachable;
 }
 $23 = (($6) + -2)|0;
 $24 = (((($0)) + 24|0) + ($23<<3)|0);
 $25 = +HEAPF64[$24>>3];
 $26 = (($6) + -1)|0;
 $27 = (((($0)) + 24|0) + ($26<<3)|0);
 $28 = +HEAPF64[$27>>3];
 $29 = (+Math_pow((+$25),(+$28)));
 HEAPF64[$24>>3] = $29;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + -1)|0;
 HEAP32[$5>>2] = $31;
 $32 = (___errno_location()|0);
 $33 = HEAP32[$32>>2]|0;
 switch ($33|0) {
 case 34:  {
  $34 = (___cxa_allocate_exception(36)|0);
  $35 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vii(635,($3|0),($35|0));
  $36 = __THREW__; __THREW__ = 0;
  $37 = $36&1;
  if ($37) {
   $66 = ___cxa_find_matching_catch_2()|0;
   $67 = tempRet0;
   $$11022 = $67;$$11221 = $66;
  } else {
   $38 = ((($0)) + 16|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($39) + -1)|0;
   __THREW__ = 0;
   invoke_vii(635,($1|0),($3|0));
   $41 = __THREW__; __THREW__ = 0;
   $42 = $41&1;
   L22: do {
    if ($42) {
     $$05 = 1;
     label = 22;
    } else {
     HEAP32[$34>>2] = (4652);
     $43 = ((($34)) + 4|0);
     __THREW__ = 0;
     invoke_vii(635,($43|0),($1|0));
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     do {
      if ($45) {
       $50 = ___cxa_find_matching_catch_2()|0;
       $51 = tempRet0;
       $$0$i = $51;$$03$i = $50;
      } else {
       $46 = ((($34)) + 16|0);
       HEAP32[$46>>2] = $40;
       $47 = ((($34)) + 20|0);
       ;HEAP32[$47>>2]=0|0;HEAP32[$47+4>>2]=0|0;HEAP32[$47+8>>2]=0|0;
       __THREW__ = 0;
       invoke_viii(646,($47|0),(44984|0),0);
       $48 = __THREW__; __THREW__ = 0;
       $49 = $48&1;
       if ($49) {
        $52 = ___cxa_find_matching_catch_2()|0;
        $53 = tempRet0;
        __THREW__ = 0;
        invoke_vi(637,($43|0));
        $54 = __THREW__; __THREW__ = 0;
        $55 = $54&1;
        if (!($55)) {
         $$0$i = $53;$$03$i = $52;
         break;
        }
        $56 = ___cxa_find_matching_catch_3(0|0)|0;
        $57 = tempRet0;
        ___clang_call_terminate($56);
        // unreachable;
       } else {
        $58 = ((($34)) + 32|0);
        HEAP32[$58>>2] = 0;
        __THREW__ = 0;
        invoke_vi(637,($1|0));
        $59 = __THREW__; __THREW__ = 0;
        $60 = $59&1;
        if ($60) {
         $$05 = 1;
         label = 22;
         break L22;
        }
        HEAP32[$34>>2] = (3916);
        __THREW__ = 0;
        invoke_viii(644,($34|0),(288|0),(7|0));
        $65 = __THREW__; __THREW__ = 0;
        $$05 = 0;
        label = 22;
        break L22;
       }
      }
     } while(0);
     __THREW__ = 0;
     invoke_vi(637,($1|0));
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      $63 = ___cxa_find_matching_catch_3(0|0)|0;
      $64 = tempRet0;
      ___clang_call_terminate($63);
      // unreachable;
     } else {
      $$05$lpad$bodyZZ2D = 1;$eh$lpad$body$index2Z2D = $$0$i;$eh$lpad$body$indexZ2D = $$03$i;
     }
    }
   } while(0);
   if ((label|0) == 22) {
    $68 = ___cxa_find_matching_catch_2()|0;
    $69 = tempRet0;
    $$05$lpad$bodyZZ2D = $$05;$eh$lpad$body$index2Z2D = $69;$eh$lpad$body$indexZ2D = $68;
   }
   __THREW__ = 0;
   invoke_vi(637,($3|0));
   $70 = __THREW__; __THREW__ = 0;
   $71 = $70&1;
   if ($71) {
    $88 = ___cxa_find_matching_catch_3(0|0)|0;
    $89 = tempRet0;
    ___clang_call_terminate($88);
    // unreachable;
   }
   if ($$05$lpad$bodyZZ2D) {
    $$11022 = $eh$lpad$body$index2Z2D;$$11221 = $eh$lpad$body$indexZ2D;
   } else {
    $$3 = $eh$lpad$body$index2Z2D;$$314 = $eh$lpad$body$indexZ2D;
    ___resumeException($$314|0);
    // unreachable;
   }
  }
  ___cxa_free_exception(($34|0));
  $$3 = $$11022;$$314 = $$11221;
  ___resumeException($$314|0);
  // unreachable;
  break;
 }
 case 33:  {
  $72 = (___cxa_allocate_exception(36)|0);
  $73 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vii(635,($4|0),($73|0));
  $74 = __THREW__; __THREW__ = 0;
  $75 = $74&1;
  if ($75) {
   $82 = ___cxa_find_matching_catch_2()|0;
   $83 = tempRet0;
   $$21324 = $82;$$225 = $83;
  } else {
   $76 = ((($0)) + 16|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (($77) + -1)|0;
   __THREW__ = 0;
   invoke_viii(669,($72|0),($4|0),($78|0));
   $79 = __THREW__; __THREW__ = 0;
   $80 = $79&1;
   if ($80) {
    $$0 = 1;
   } else {
    __THREW__ = 0;
    invoke_viii(644,($72|0),(304|0),(7|0));
    $81 = __THREW__; __THREW__ = 0;
    $$0 = 0;
   }
   $84 = ___cxa_find_matching_catch_2()|0;
   $85 = tempRet0;
   __THREW__ = 0;
   invoke_vi(637,($4|0));
   $86 = __THREW__; __THREW__ = 0;
   $87 = $86&1;
   if ($87) {
    $88 = ___cxa_find_matching_catch_3(0|0)|0;
    $89 = tempRet0;
    ___clang_call_terminate($88);
    // unreachable;
   }
   if ($$0) {
    $$21324 = $84;$$225 = $85;
   } else {
    $$3 = $85;$$314 = $84;
    ___resumeException($$314|0);
    // unreachable;
   }
  }
  ___cxa_free_exception(($72|0));
  $$3 = $$225;$$314 = $$21324;
  ___resumeException($$314|0);
  // unreachable;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function __ZN10LineParser12EvalMultiplyEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$037 = 0, $$038 = 0, $$045 = 0, $$046 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0;
 var $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 1560|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(2);
 if (!($4)) {
  $20 = (($3) + -2)|0;
  $21 = (((($0)) + 24|0) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = (($3) + -1)|0;
  $24 = (((($0)) + 24|0) + ($23<<3)|0);
  $25 = +HEAPF64[$24>>3];
  $26 = $22 * $25;
  HEAPF64[$21>>3] = $26;
  $27 = HEAP32[$2>>2]|0;
  $28 = (($27) + -1)|0;
  HEAP32[$2>>2] = $28;
  STACKTOP = sp;return;
 }
 $5 = (___cxa_allocate_exception(36)|0);
 $6 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($1|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  $$038 = $15;$$046 = $14;
 } else {
  $9 = ((($0)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  __THREW__ = 0;
  invoke_viii(668,($5|0),($1|0),($10|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($5|0),(256|0),(7|0));
   $13 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($1|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if ($19) {
   $29 = ___cxa_find_matching_catch_3(0|0)|0;
   $30 = tempRet0;
   ___clang_call_terminate($29);
   // unreachable;
  }
  if ($$0) {
   $$038 = $17;$$046 = $16;
  } else {
   $$037 = $17;$$045 = $16;
   ___resumeException($$045|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($5|0));
 $$037 = $$038;$$045 = $$046;
 ___resumeException($$045|0);
 // unreachable;
}
function __ZN10LineParser10EvalDivideEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$04 = 0, $$0612 = 0, $$0811 = 0, $$1715 = 0, $$1914 = 0, $$2 = 0, $$210 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 12|0;
 $2 = sp;
 $3 = ((($0)) + 1560|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(2);
 if ($5) {
  $6 = (___cxa_allocate_exception(36)|0);
  $7 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vii(635,($1|0),($7|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if ($9) {
   $15 = ___cxa_find_matching_catch_2()|0;
   $16 = tempRet0;
   $$0612 = $16;$$0811 = $15;
  } else {
   $10 = ((($0)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   __THREW__ = 0;
   invoke_viii(668,($6|0),($1|0),($11|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    $$04 = 1;
   } else {
    __THREW__ = 0;
    invoke_viii(644,($6|0),(256|0),(7|0));
    $14 = __THREW__; __THREW__ = 0;
    $$04 = 0;
   }
   $17 = ___cxa_find_matching_catch_2()|0;
   $18 = tempRet0;
   __THREW__ = 0;
   invoke_vi(637,($1|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    $47 = ___cxa_find_matching_catch_3(0|0)|0;
    $48 = tempRet0;
    ___clang_call_terminate($47);
    // unreachable;
   }
   if ($$04) {
    $$0612 = $18;$$0811 = $17;
   } else {
    $$2 = $18;$$210 = $17;
    ___resumeException($$210|0);
    // unreachable;
   }
  }
  ___cxa_free_exception(($6|0));
  $$2 = $$0612;$$210 = $$0811;
  ___resumeException($$210|0);
  // unreachable;
 }
 $21 = (($4) + -1)|0;
 $22 = (((($0)) + 24|0) + ($21<<3)|0);
 $23 = +HEAPF64[$22>>3];
 $24 = $23 == 0.0;
 if (!($24)) {
  $41 = (($4) + -2)|0;
  $42 = (((($0)) + 24|0) + ($41<<3)|0);
  $43 = +HEAPF64[$42>>3];
  $44 = $43 / $23;
  HEAPF64[$42>>3] = $44;
  $45 = HEAP32[$3>>2]|0;
  $46 = (($45) + -1)|0;
  HEAP32[$3>>2] = $46;
  STACKTOP = sp;return;
 }
 $25 = (___cxa_allocate_exception(36)|0);
 $26 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($2|0),($26|0));
 $27 = __THREW__; __THREW__ = 0;
 $28 = $27&1;
 if ($28) {
  $35 = ___cxa_find_matching_catch_2()|0;
  $36 = tempRet0;
  $$1715 = $36;$$1914 = $35;
 } else {
  $29 = ((($0)) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + -1)|0;
  __THREW__ = 0;
  invoke_viii(670,($25|0),($2|0),($31|0));
  $32 = __THREW__; __THREW__ = 0;
  $33 = $32&1;
  if ($33) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($25|0),(272|0),(7|0));
   $34 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $37 = ___cxa_find_matching_catch_2()|0;
  $38 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($2|0));
  $39 = __THREW__; __THREW__ = 0;
  $40 = $39&1;
  if ($40) {
   $47 = ___cxa_find_matching_catch_3(0|0)|0;
   $48 = tempRet0;
   ___clang_call_terminate($47);
   // unreachable;
  }
  if ($$0) {
   $$1715 = $38;$$1914 = $37;
  } else {
   $$2 = $38;$$210 = $37;
   ___resumeException($$210|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($25|0));
 $$2 = $$1715;$$210 = $$1914;
 ___resumeException($$210|0);
 // unreachable;
}
function __ZN10LineParser7EvalModEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$04 = 0, $$0612 = 0, $$0811 = 0, $$1715 = 0, $$1914 = 0, $$2 = 0, $$210 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 12|0;
 $2 = sp;
 $3 = ((($0)) + 1560|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(2);
 if ($5) {
  $6 = (___cxa_allocate_exception(36)|0);
  $7 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vii(635,($1|0),($7|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if ($9) {
   $15 = ___cxa_find_matching_catch_2()|0;
   $16 = tempRet0;
   $$0612 = $16;$$0811 = $15;
  } else {
   $10 = ((($0)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   __THREW__ = 0;
   invoke_viii(668,($6|0),($1|0),($11|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    $$04 = 1;
   } else {
    __THREW__ = 0;
    invoke_viii(644,($6|0),(256|0),(7|0));
    $14 = __THREW__; __THREW__ = 0;
    $$04 = 0;
   }
   $17 = ___cxa_find_matching_catch_2()|0;
   $18 = tempRet0;
   __THREW__ = 0;
   invoke_vi(637,($1|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    $50 = ___cxa_find_matching_catch_3(0|0)|0;
    $51 = tempRet0;
    ___clang_call_terminate($50);
    // unreachable;
   }
   if ($$04) {
    $$0612 = $18;$$0811 = $17;
   } else {
    $$2 = $18;$$210 = $17;
    ___resumeException($$210|0);
    // unreachable;
   }
  }
  ___cxa_free_exception(($6|0));
  $$2 = $$0612;$$210 = $$0811;
  ___resumeException($$210|0);
  // unreachable;
 }
 $21 = (($4) + -1)|0;
 $22 = (((($0)) + 24|0) + ($21<<3)|0);
 $23 = +HEAPF64[$22>>3];
 $24 = $23 == 0.0;
 if (!($24)) {
  $41 = (($4) + -2)|0;
  $42 = (((($0)) + 24|0) + ($41<<3)|0);
  $43 = +HEAPF64[$42>>3];
  $44 = (~~(($43)));
  $45 = (~~(($23)));
  $46 = (($44|0) % ($45|0))&-1;
  $47 = (+($46|0));
  HEAPF64[$42>>3] = $47;
  $48 = HEAP32[$3>>2]|0;
  $49 = (($48) + -1)|0;
  HEAP32[$3>>2] = $49;
  STACKTOP = sp;return;
 }
 $25 = (___cxa_allocate_exception(36)|0);
 $26 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($2|0),($26|0));
 $27 = __THREW__; __THREW__ = 0;
 $28 = $27&1;
 if ($28) {
  $35 = ___cxa_find_matching_catch_2()|0;
  $36 = tempRet0;
  $$1715 = $36;$$1914 = $35;
 } else {
  $29 = ((($0)) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + -1)|0;
  __THREW__ = 0;
  invoke_viii(670,($25|0),($2|0),($31|0));
  $32 = __THREW__; __THREW__ = 0;
  $33 = $32&1;
  if ($33) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($25|0),(272|0),(7|0));
   $34 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $37 = ___cxa_find_matching_catch_2()|0;
  $38 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($2|0));
  $39 = __THREW__; __THREW__ = 0;
  $40 = $39&1;
  if ($40) {
   $50 = ___cxa_find_matching_catch_3(0|0)|0;
   $51 = tempRet0;
   ___clang_call_terminate($50);
   // unreachable;
  }
  if ($$0) {
   $$1715 = $38;$$1914 = $37;
  } else {
   $$2 = $38;$$210 = $37;
   ___resumeException($$210|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($25|0));
 $$2 = $$1715;$$210 = $$1914;
 ___resumeException($$210|0);
 // unreachable;
}
function __ZN10LineParser7EvalDivEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$04 = 0, $$0612 = 0, $$0811 = 0, $$1715 = 0, $$1914 = 0, $$2 = 0, $$210 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 12|0;
 $2 = sp;
 $3 = ((($0)) + 1560|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(2);
 if ($5) {
  $6 = (___cxa_allocate_exception(36)|0);
  $7 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vii(635,($1|0),($7|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if ($9) {
   $15 = ___cxa_find_matching_catch_2()|0;
   $16 = tempRet0;
   $$0612 = $16;$$0811 = $15;
  } else {
   $10 = ((($0)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   __THREW__ = 0;
   invoke_viii(668,($6|0),($1|0),($11|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    $$04 = 1;
   } else {
    __THREW__ = 0;
    invoke_viii(644,($6|0),(256|0),(7|0));
    $14 = __THREW__; __THREW__ = 0;
    $$04 = 0;
   }
   $17 = ___cxa_find_matching_catch_2()|0;
   $18 = tempRet0;
   __THREW__ = 0;
   invoke_vi(637,($1|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    $50 = ___cxa_find_matching_catch_3(0|0)|0;
    $51 = tempRet0;
    ___clang_call_terminate($50);
    // unreachable;
   }
   if ($$04) {
    $$0612 = $18;$$0811 = $17;
   } else {
    $$2 = $18;$$210 = $17;
    ___resumeException($$210|0);
    // unreachable;
   }
  }
  ___cxa_free_exception(($6|0));
  $$2 = $$0612;$$210 = $$0811;
  ___resumeException($$210|0);
  // unreachable;
 }
 $21 = (($4) + -1)|0;
 $22 = (((($0)) + 24|0) + ($21<<3)|0);
 $23 = +HEAPF64[$22>>3];
 $24 = $23 == 0.0;
 if (!($24)) {
  $41 = (($4) + -2)|0;
  $42 = (((($0)) + 24|0) + ($41<<3)|0);
  $43 = +HEAPF64[$42>>3];
  $44 = (~~(($43)));
  $45 = (~~(($23)));
  $46 = (($44|0) / ($45|0))&-1;
  $47 = (+($46|0));
  HEAPF64[$42>>3] = $47;
  $48 = HEAP32[$3>>2]|0;
  $49 = (($48) + -1)|0;
  HEAP32[$3>>2] = $49;
  STACKTOP = sp;return;
 }
 $25 = (___cxa_allocate_exception(36)|0);
 $26 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($2|0),($26|0));
 $27 = __THREW__; __THREW__ = 0;
 $28 = $27&1;
 if ($28) {
  $35 = ___cxa_find_matching_catch_2()|0;
  $36 = tempRet0;
  $$1715 = $36;$$1914 = $35;
 } else {
  $29 = ((($0)) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + -1)|0;
  __THREW__ = 0;
  invoke_viii(670,($25|0),($2|0),($31|0));
  $32 = __THREW__; __THREW__ = 0;
  $33 = $32&1;
  if ($33) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($25|0),(272|0),(7|0));
   $34 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $37 = ___cxa_find_matching_catch_2()|0;
  $38 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($2|0));
  $39 = __THREW__; __THREW__ = 0;
  $40 = $39&1;
  if ($40) {
   $50 = ___cxa_find_matching_catch_3(0|0)|0;
   $51 = tempRet0;
   ___clang_call_terminate($50);
   // unreachable;
  }
  if ($$0) {
   $$1715 = $38;$$1914 = $37;
  } else {
   $$2 = $38;$$210 = $37;
   ___resumeException($$210|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($25|0));
 $$2 = $$1715;$$210 = $$1914;
 ___resumeException($$210|0);
 // unreachable;
}
function __ZN10LineParser13EvalShiftLeftEv($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $$01823 = 0, $$01824 = 0, $$01921 = 0, $$01922 = 0, $$020 = 0, $$off = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 1560|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(2);
 if (!($4)) {
  $20 = (($3) + -2)|0;
  $21 = (((($0)) + 24|0) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = (~~(($22)));
  $24 = (($3) + -1)|0;
  $25 = (((($0)) + 24|0) + ($24<<3)|0);
  $26 = +HEAPF64[$25>>3];
  $27 = (~~(($26)));
  $$off = (($27) + 31)|0;
  $28 = ($$off>>>0)>(62);
  if ($28) {
   $$0 = 0;
   $34 = (+($$0|0));
   HEAPF64[$21>>3] = $34;
   $35 = HEAP32[$2>>2]|0;
   $36 = (($35) + -1)|0;
   HEAP32[$2>>2] = $36;
   STACKTOP = sp;return;
  }
  $29 = ($27|0)>(0);
  if ($29) {
   $30 = $23 << $27;
   $$0 = $30;
   $34 = (+($$0|0));
   HEAPF64[$21>>3] = $34;
   $35 = HEAP32[$2>>2]|0;
   $36 = (($35) + -1)|0;
   HEAP32[$2>>2] = $36;
   STACKTOP = sp;return;
  } else {
   $31 = ($27|0)==(0);
   $32 = (0 - ($27))|0;
   $33 = $31 ? 0 : $32;
   $$ = $23 >> $33;
   $$0 = $$;
   $34 = (+($$0|0));
   HEAPF64[$21>>3] = $34;
   $35 = HEAP32[$2>>2]|0;
   $36 = (($35) + -1)|0;
   HEAP32[$2>>2] = $36;
   STACKTOP = sp;return;
  }
 }
 $5 = (___cxa_allocate_exception(36)|0);
 $6 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($1|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  $$01824 = $14;$$01922 = $15;
 } else {
  $9 = ((($0)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  __THREW__ = 0;
  invoke_viii(668,($5|0),($1|0),($10|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   $$020 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($5|0),(256|0),(7|0));
   $13 = __THREW__; __THREW__ = 0;
   $$020 = 0;
  }
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($1|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if ($19) {
   $37 = ___cxa_find_matching_catch_3(0|0)|0;
   $38 = tempRet0;
   ___clang_call_terminate($37);
   // unreachable;
  }
  if ($$020) {
   $$01824 = $16;$$01922 = $17;
  } else {
   $$01823 = $16;$$01921 = $17;
   ___resumeException($$01823|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($5|0));
 $$01823 = $$01824;$$01921 = $$01922;
 ___resumeException($$01823|0);
 // unreachable;
}
function __ZN10LineParser14EvalShiftRightEv($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $$01823 = 0, $$01824 = 0, $$01921 = 0, $$01922 = 0, $$020 = 0, $$off = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 1560|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(2);
 if (!($4)) {
  $20 = (($3) + -2)|0;
  $21 = (((($0)) + 24|0) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = (~~(($22)));
  $24 = (($3) + -1)|0;
  $25 = (((($0)) + 24|0) + ($24<<3)|0);
  $26 = +HEAPF64[$25>>3];
  $27 = (~~(($26)));
  $$off = (($27) + 31)|0;
  $28 = ($$off>>>0)>(62);
  if ($28) {
   $$0 = 0;
   $34 = (+($$0|0));
   HEAPF64[$21>>3] = $34;
   $35 = HEAP32[$2>>2]|0;
   $36 = (($35) + -1)|0;
   HEAP32[$2>>2] = $36;
   STACKTOP = sp;return;
  }
  $29 = ($27|0)>(0);
  if ($29) {
   $30 = $23 >> $27;
   $$0 = $30;
   $34 = (+($$0|0));
   HEAPF64[$21>>3] = $34;
   $35 = HEAP32[$2>>2]|0;
   $36 = (($35) + -1)|0;
   HEAP32[$2>>2] = $36;
   STACKTOP = sp;return;
  } else {
   $31 = ($27|0)==(0);
   $32 = (0 - ($27))|0;
   $33 = $31 ? 0 : $32;
   $$ = $23 << $33;
   $$0 = $$;
   $34 = (+($$0|0));
   HEAPF64[$21>>3] = $34;
   $35 = HEAP32[$2>>2]|0;
   $36 = (($35) + -1)|0;
   HEAP32[$2>>2] = $36;
   STACKTOP = sp;return;
  }
 }
 $5 = (___cxa_allocate_exception(36)|0);
 $6 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($1|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  $$01824 = $14;$$01922 = $15;
 } else {
  $9 = ((($0)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  __THREW__ = 0;
  invoke_viii(668,($5|0),($1|0),($10|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   $$020 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($5|0),(256|0),(7|0));
   $13 = __THREW__; __THREW__ = 0;
   $$020 = 0;
  }
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($1|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if ($19) {
   $37 = ___cxa_find_matching_catch_3(0|0)|0;
   $38 = tempRet0;
   ___clang_call_terminate($37);
   // unreachable;
  }
  if ($$020) {
   $$01824 = $16;$$01922 = $17;
  } else {
   $$01823 = $16;$$01921 = $17;
   ___resumeException($$01823|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($5|0));
 $$01823 = $$01824;$$01921 = $$01922;
 ___resumeException($$01823|0);
 // unreachable;
}
function __ZN10LineParser7EvalAddEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$037 = 0, $$038 = 0, $$045 = 0, $$046 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0;
 var $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 1560|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(2);
 if (!($4)) {
  $20 = (($3) + -2)|0;
  $21 = (((($0)) + 24|0) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = (($3) + -1)|0;
  $24 = (((($0)) + 24|0) + ($23<<3)|0);
  $25 = +HEAPF64[$24>>3];
  $26 = $22 + $25;
  HEAPF64[$21>>3] = $26;
  $27 = HEAP32[$2>>2]|0;
  $28 = (($27) + -1)|0;
  HEAP32[$2>>2] = $28;
  STACKTOP = sp;return;
 }
 $5 = (___cxa_allocate_exception(36)|0);
 $6 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($1|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  $$038 = $15;$$046 = $14;
 } else {
  $9 = ((($0)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  __THREW__ = 0;
  invoke_viii(668,($5|0),($1|0),($10|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($5|0),(256|0),(7|0));
   $13 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($1|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if ($19) {
   $29 = ___cxa_find_matching_catch_3(0|0)|0;
   $30 = tempRet0;
   ___clang_call_terminate($29);
   // unreachable;
  }
  if ($$0) {
   $$038 = $17;$$046 = $16;
  } else {
   $$037 = $17;$$045 = $16;
   ___resumeException($$045|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($5|0));
 $$037 = $$038;$$045 = $$046;
 ___resumeException($$045|0);
 // unreachable;
}
function __ZN10LineParser12EvalSubtractEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$037 = 0, $$038 = 0, $$045 = 0, $$046 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0;
 var $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 1560|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(2);
 if (!($4)) {
  $20 = (($3) + -2)|0;
  $21 = (((($0)) + 24|0) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = (($3) + -1)|0;
  $24 = (((($0)) + 24|0) + ($23<<3)|0);
  $25 = +HEAPF64[$24>>3];
  $26 = $22 - $25;
  HEAPF64[$21>>3] = $26;
  $27 = HEAP32[$2>>2]|0;
  $28 = (($27) + -1)|0;
  HEAP32[$2>>2] = $28;
  STACKTOP = sp;return;
 }
 $5 = (___cxa_allocate_exception(36)|0);
 $6 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($1|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  $$038 = $15;$$046 = $14;
 } else {
  $9 = ((($0)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  __THREW__ = 0;
  invoke_viii(668,($5|0),($1|0),($10|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($5|0),(256|0),(7|0));
   $13 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($1|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if ($19) {
   $29 = ___cxa_find_matching_catch_3(0|0)|0;
   $30 = tempRet0;
   ___clang_call_terminate($29);
   // unreachable;
  }
  if ($$0) {
   $$038 = $17;$$046 = $16;
  } else {
   $$037 = $17;$$045 = $16;
   ___resumeException($$045|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($5|0));
 $$037 = $$038;$$045 = $$046;
 ___resumeException($$045|0);
 // unreachable;
}
function __ZN10LineParser9EvalEqualEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$037 = 0, $$038 = 0, $$045 = 0, $$046 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0;
 var $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 1560|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(2);
 if (!($4)) {
  $20 = (($3) + -2)|0;
  $21 = (((($0)) + 24|0) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = (($3) + -1)|0;
  $24 = (((($0)) + 24|0) + ($23<<3)|0);
  $25 = +HEAPF64[$24>>3];
  $26 = $22 == $25;
  $27 = (+($26<<31>>31));
  HEAPF64[$21>>3] = $27;
  $28 = HEAP32[$2>>2]|0;
  $29 = (($28) + -1)|0;
  HEAP32[$2>>2] = $29;
  STACKTOP = sp;return;
 }
 $5 = (___cxa_allocate_exception(36)|0);
 $6 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($1|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  $$038 = $15;$$046 = $14;
 } else {
  $9 = ((($0)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  __THREW__ = 0;
  invoke_viii(668,($5|0),($1|0),($10|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($5|0),(256|0),(7|0));
   $13 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($1|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if ($19) {
   $30 = ___cxa_find_matching_catch_3(0|0)|0;
   $31 = tempRet0;
   ___clang_call_terminate($30);
   // unreachable;
  }
  if ($$0) {
   $$038 = $17;$$046 = $16;
  } else {
   $$037 = $17;$$045 = $16;
   ___resumeException($$045|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($5|0));
 $$037 = $$038;$$045 = $$046;
 ___resumeException($$045|0);
 // unreachable;
}
function __ZN10LineParser12EvalNotEqualEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$037 = 0, $$038 = 0, $$045 = 0, $$046 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0;
 var $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 1560|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(2);
 if (!($4)) {
  $20 = (($3) + -2)|0;
  $21 = (((($0)) + 24|0) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = (($3) + -1)|0;
  $24 = (((($0)) + 24|0) + ($23<<3)|0);
  $25 = +HEAPF64[$24>>3];
  $26 = $22 != $25;
  $27 = (+($26<<31>>31));
  HEAPF64[$21>>3] = $27;
  $28 = HEAP32[$2>>2]|0;
  $29 = (($28) + -1)|0;
  HEAP32[$2>>2] = $29;
  STACKTOP = sp;return;
 }
 $5 = (___cxa_allocate_exception(36)|0);
 $6 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($1|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  $$038 = $15;$$046 = $14;
 } else {
  $9 = ((($0)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  __THREW__ = 0;
  invoke_viii(668,($5|0),($1|0),($10|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($5|0),(256|0),(7|0));
   $13 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($1|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if ($19) {
   $30 = ___cxa_find_matching_catch_3(0|0)|0;
   $31 = tempRet0;
   ___clang_call_terminate($30);
   // unreachable;
  }
  if ($$0) {
   $$038 = $17;$$046 = $16;
  } else {
   $$037 = $17;$$045 = $16;
   ___resumeException($$045|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($5|0));
 $$037 = $$038;$$045 = $$046;
 ___resumeException($$045|0);
 // unreachable;
}
function __ZN10LineParser19EvalLessThanOrEqualEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$037 = 0, $$038 = 0, $$045 = 0, $$046 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0;
 var $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 1560|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(2);
 if (!($4)) {
  $20 = (($3) + -2)|0;
  $21 = (((($0)) + 24|0) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = (($3) + -1)|0;
  $24 = (((($0)) + 24|0) + ($23<<3)|0);
  $25 = +HEAPF64[$24>>3];
  $26 = $22 <= $25;
  $27 = (+($26<<31>>31));
  HEAPF64[$21>>3] = $27;
  $28 = HEAP32[$2>>2]|0;
  $29 = (($28) + -1)|0;
  HEAP32[$2>>2] = $29;
  STACKTOP = sp;return;
 }
 $5 = (___cxa_allocate_exception(36)|0);
 $6 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($1|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  $$038 = $15;$$046 = $14;
 } else {
  $9 = ((($0)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  __THREW__ = 0;
  invoke_viii(668,($5|0),($1|0),($10|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($5|0),(256|0),(7|0));
   $13 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($1|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if ($19) {
   $30 = ___cxa_find_matching_catch_3(0|0)|0;
   $31 = tempRet0;
   ___clang_call_terminate($30);
   // unreachable;
  }
  if ($$0) {
   $$038 = $17;$$046 = $16;
  } else {
   $$037 = $17;$$045 = $16;
   ___resumeException($$045|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($5|0));
 $$037 = $$038;$$045 = $$046;
 ___resumeException($$045|0);
 // unreachable;
}
function __ZN10LineParser19EvalMoreThanOrEqualEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$037 = 0, $$038 = 0, $$045 = 0, $$046 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0;
 var $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 1560|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(2);
 if (!($4)) {
  $20 = (($3) + -2)|0;
  $21 = (((($0)) + 24|0) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = (($3) + -1)|0;
  $24 = (((($0)) + 24|0) + ($23<<3)|0);
  $25 = +HEAPF64[$24>>3];
  $26 = $22 >= $25;
  $27 = (+($26<<31>>31));
  HEAPF64[$21>>3] = $27;
  $28 = HEAP32[$2>>2]|0;
  $29 = (($28) + -1)|0;
  HEAP32[$2>>2] = $29;
  STACKTOP = sp;return;
 }
 $5 = (___cxa_allocate_exception(36)|0);
 $6 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($1|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  $$038 = $15;$$046 = $14;
 } else {
  $9 = ((($0)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  __THREW__ = 0;
  invoke_viii(668,($5|0),($1|0),($10|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($5|0),(256|0),(7|0));
   $13 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($1|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if ($19) {
   $30 = ___cxa_find_matching_catch_3(0|0)|0;
   $31 = tempRet0;
   ___clang_call_terminate($30);
   // unreachable;
  }
  if ($$0) {
   $$038 = $17;$$046 = $16;
  } else {
   $$037 = $17;$$045 = $16;
   ___resumeException($$045|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($5|0));
 $$037 = $$038;$$045 = $$046;
 ___resumeException($$045|0);
 // unreachable;
}
function __ZN10LineParser12EvalLessThanEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$037 = 0, $$038 = 0, $$045 = 0, $$046 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0;
 var $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 1560|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(2);
 if (!($4)) {
  $20 = (($3) + -2)|0;
  $21 = (((($0)) + 24|0) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = (($3) + -1)|0;
  $24 = (((($0)) + 24|0) + ($23<<3)|0);
  $25 = +HEAPF64[$24>>3];
  $26 = $22 < $25;
  $27 = (+($26<<31>>31));
  HEAPF64[$21>>3] = $27;
  $28 = HEAP32[$2>>2]|0;
  $29 = (($28) + -1)|0;
  HEAP32[$2>>2] = $29;
  STACKTOP = sp;return;
 }
 $5 = (___cxa_allocate_exception(36)|0);
 $6 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($1|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  $$038 = $15;$$046 = $14;
 } else {
  $9 = ((($0)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  __THREW__ = 0;
  invoke_viii(668,($5|0),($1|0),($10|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($5|0),(256|0),(7|0));
   $13 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($1|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if ($19) {
   $30 = ___cxa_find_matching_catch_3(0|0)|0;
   $31 = tempRet0;
   ___clang_call_terminate($30);
   // unreachable;
  }
  if ($$0) {
   $$038 = $17;$$046 = $16;
  } else {
   $$037 = $17;$$045 = $16;
   ___resumeException($$045|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($5|0));
 $$037 = $$038;$$045 = $$046;
 ___resumeException($$045|0);
 // unreachable;
}
function __ZN10LineParser12EvalMoreThanEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$037 = 0, $$038 = 0, $$045 = 0, $$046 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0;
 var $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 1560|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(2);
 if (!($4)) {
  $20 = (($3) + -2)|0;
  $21 = (((($0)) + 24|0) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = (($3) + -1)|0;
  $24 = (((($0)) + 24|0) + ($23<<3)|0);
  $25 = +HEAPF64[$24>>3];
  $26 = $22 > $25;
  $27 = (+($26<<31>>31));
  HEAPF64[$21>>3] = $27;
  $28 = HEAP32[$2>>2]|0;
  $29 = (($28) + -1)|0;
  HEAP32[$2>>2] = $29;
  STACKTOP = sp;return;
 }
 $5 = (___cxa_allocate_exception(36)|0);
 $6 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($1|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  $$038 = $15;$$046 = $14;
 } else {
  $9 = ((($0)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  __THREW__ = 0;
  invoke_viii(668,($5|0),($1|0),($10|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($5|0),(256|0),(7|0));
   $13 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($1|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if ($19) {
   $30 = ___cxa_find_matching_catch_3(0|0)|0;
   $31 = tempRet0;
   ___clang_call_terminate($30);
   // unreachable;
  }
  if ($$0) {
   $$038 = $17;$$046 = $16;
  } else {
   $$037 = $17;$$045 = $16;
   ___resumeException($$045|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($5|0));
 $$037 = $$038;$$045 = $$046;
 ___resumeException($$045|0);
 // unreachable;
}
function __ZN10LineParser7EvalAndEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$037 = 0, $$038 = 0, $$045 = 0, $$046 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 1560|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(2);
 if (!($4)) {
  $20 = (($3) + -2)|0;
  $21 = (((($0)) + 24|0) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = (~~(($22)));
  $24 = (($3) + -1)|0;
  $25 = (((($0)) + 24|0) + ($24<<3)|0);
  $26 = +HEAPF64[$25>>3];
  $27 = (~~(($26)));
  $28 = $27 & $23;
  $29 = (+($28|0));
  HEAPF64[$21>>3] = $29;
  $30 = HEAP32[$2>>2]|0;
  $31 = (($30) + -1)|0;
  HEAP32[$2>>2] = $31;
  STACKTOP = sp;return;
 }
 $5 = (___cxa_allocate_exception(36)|0);
 $6 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($1|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  $$038 = $15;$$046 = $14;
 } else {
  $9 = ((($0)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  __THREW__ = 0;
  invoke_viii(668,($5|0),($1|0),($10|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($5|0),(256|0),(7|0));
   $13 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($1|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if ($19) {
   $32 = ___cxa_find_matching_catch_3(0|0)|0;
   $33 = tempRet0;
   ___clang_call_terminate($32);
   // unreachable;
  }
  if ($$0) {
   $$038 = $17;$$046 = $16;
  } else {
   $$037 = $17;$$045 = $16;
   ___resumeException($$045|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($5|0));
 $$037 = $$038;$$045 = $$046;
 ___resumeException($$045|0);
 // unreachable;
}
function __ZN10LineParser6EvalOrEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$037 = 0, $$038 = 0, $$045 = 0, $$046 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 1560|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(2);
 if (!($4)) {
  $20 = (($3) + -2)|0;
  $21 = (((($0)) + 24|0) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = (~~(($22)));
  $24 = (($3) + -1)|0;
  $25 = (((($0)) + 24|0) + ($24<<3)|0);
  $26 = +HEAPF64[$25>>3];
  $27 = (~~(($26)));
  $28 = $27 | $23;
  $29 = (+($28|0));
  HEAPF64[$21>>3] = $29;
  $30 = HEAP32[$2>>2]|0;
  $31 = (($30) + -1)|0;
  HEAP32[$2>>2] = $31;
  STACKTOP = sp;return;
 }
 $5 = (___cxa_allocate_exception(36)|0);
 $6 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($1|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  $$038 = $15;$$046 = $14;
 } else {
  $9 = ((($0)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  __THREW__ = 0;
  invoke_viii(668,($5|0),($1|0),($10|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($5|0),(256|0),(7|0));
   $13 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($1|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if ($19) {
   $32 = ___cxa_find_matching_catch_3(0|0)|0;
   $33 = tempRet0;
   ___clang_call_terminate($32);
   // unreachable;
  }
  if ($$0) {
   $$038 = $17;$$046 = $16;
  } else {
   $$037 = $17;$$045 = $16;
   ___resumeException($$045|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($5|0));
 $$037 = $$038;$$045 = $$046;
 ___resumeException($$045|0);
 // unreachable;
}
function __ZN10LineParser7EvalEorEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$037 = 0, $$038 = 0, $$045 = 0, $$046 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 1560|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(2);
 if (!($4)) {
  $20 = (($3) + -2)|0;
  $21 = (((($0)) + 24|0) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = (~~(($22)));
  $24 = (($3) + -1)|0;
  $25 = (((($0)) + 24|0) + ($24<<3)|0);
  $26 = +HEAPF64[$25>>3];
  $27 = (~~(($26)));
  $28 = $27 ^ $23;
  $29 = (+($28|0));
  HEAPF64[$21>>3] = $29;
  $30 = HEAP32[$2>>2]|0;
  $31 = (($30) + -1)|0;
  HEAP32[$2>>2] = $31;
  STACKTOP = sp;return;
 }
 $5 = (___cxa_allocate_exception(36)|0);
 $6 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($1|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  $$038 = $15;$$046 = $14;
 } else {
  $9 = ((($0)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  __THREW__ = 0;
  invoke_viii(668,($5|0),($1|0),($10|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($5|0),(256|0),(7|0));
   $13 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($1|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if ($19) {
   $32 = ___cxa_find_matching_catch_3(0|0)|0;
   $33 = tempRet0;
   ___clang_call_terminate($32);
   // unreachable;
  }
  if ($$0) {
   $$038 = $17;$$046 = $16;
  } else {
   $$037 = $17;$$045 = $16;
   ___resumeException($$045|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($5|0));
 $$037 = $$038;$$045 = $$046;
 ___resumeException($$045|0);
 // unreachable;
}
function __ZN37AsmException_SyntaxError_MissingValueC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$03$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3,$1);
 HEAP32[$0>>2] = (4652);
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($4|0),($3|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $11 = ___cxa_find_matching_catch_2()|0;
  $12 = tempRet0;
  $$0$i = $12;$$03$i = $11;
 } else {
  $7 = ((($0)) + 16|0);
  HEAP32[$7>>2] = $2;
  $8 = ((($0)) + 20|0);
  ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
  __THREW__ = 0;
  invoke_viii(646,($8|0),(44984|0),0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   $19 = ((($0)) + 32|0);
   HEAP32[$19>>2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
   HEAP32[$0>>2] = (3868);
   STACKTOP = sp;return;
  }
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($4|0));
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if ($16) {
   $17 = ___cxa_find_matching_catch_3(0|0)|0;
   $18 = tempRet0;
   ___clang_call_terminate($17);
   // unreachable;
  } else {
   $$0$i = $14;$$03$i = $13;
  }
 }
 __THREW__ = 0;
 invoke_vi(637,($3|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch_3(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  ___resumeException($$03$i|0);
  // unreachable;
 }
}
function __ZN37AsmException_SyntaxError_MissingValueD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK37AsmException_SyntaxError_MissingValue7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (20991|0);
}
function __ZN39AsmException_SyntaxError_DivisionByZeroC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$03$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3,$1);
 HEAP32[$0>>2] = (4652);
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($4|0),($3|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $11 = ___cxa_find_matching_catch_2()|0;
  $12 = tempRet0;
  $$0$i = $12;$$03$i = $11;
 } else {
  $7 = ((($0)) + 16|0);
  HEAP32[$7>>2] = $2;
  $8 = ((($0)) + 20|0);
  ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
  __THREW__ = 0;
  invoke_viii(646,($8|0),(44984|0),0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   $19 = ((($0)) + 32|0);
   HEAP32[$19>>2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
   HEAP32[$0>>2] = (3892);
   STACKTOP = sp;return;
  }
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($4|0));
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if ($16) {
   $17 = ___cxa_find_matching_catch_3(0|0)|0;
   $18 = tempRet0;
   ___clang_call_terminate($17);
   // unreachable;
  } else {
   $$0$i = $14;$$03$i = $13;
  }
 }
 __THREW__ = 0;
 invoke_vi(637,($3|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch_3(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  ___resumeException($$03$i|0);
  // unreachable;
 }
}
function __ZN39AsmException_SyntaxError_DivisionByZeroD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK39AsmException_SyntaxError_DivisionByZero7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21062|0);
}
function __ZN41AsmException_SyntaxError_IllegalOperationC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$03$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3,$1);
 HEAP32[$0>>2] = (4652);
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($4|0),($3|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $11 = ___cxa_find_matching_catch_2()|0;
  $12 = tempRet0;
  $$0$i = $12;$$03$i = $11;
 } else {
  $7 = ((($0)) + 16|0);
  HEAP32[$7>>2] = $2;
  $8 = ((($0)) + 20|0);
  ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
  __THREW__ = 0;
  invoke_viii(646,($8|0),(44984|0),0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   $19 = ((($0)) + 32|0);
   HEAP32[$19>>2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
   HEAP32[$0>>2] = (3940);
   STACKTOP = sp;return;
  }
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($4|0));
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if ($16) {
   $17 = ___cxa_find_matching_catch_3(0|0)|0;
   $18 = tempRet0;
   ___clang_call_terminate($17);
   // unreachable;
  } else {
   $$0$i = $14;$$03$i = $13;
  }
 }
 __THREW__ = 0;
 invoke_vi(637,($3|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch_3(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  ___resumeException($$03$i|0);
  // unreachable;
 }
}
function __ZN41AsmException_SyntaxError_IllegalOperationD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK41AsmException_SyntaxError_IllegalOperation7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21124|0);
}
function __ZN37AsmException_SyntaxError_NumberTooBigD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK37AsmException_SyntaxError_NumberTooBig7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21221|0);
}
function __ZN10LineParser10EvalNegateEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$037 = 0, $$038 = 0, $$045 = 0, $$046 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0;
 var $23 = 0.0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 1560|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(1);
 if (!($4)) {
  $20 = (($3) + -1)|0;
  $21 = (((($0)) + 24|0) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = -$22;
  HEAPF64[$21>>3] = $23;
  STACKTOP = sp;return;
 }
 $5 = (___cxa_allocate_exception(36)|0);
 $6 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($1|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  $$038 = $15;$$046 = $14;
 } else {
  $9 = ((($0)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  __THREW__ = 0;
  invoke_viii(668,($5|0),($1|0),($10|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($5|0),(256|0),(7|0));
   $13 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($1|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if ($19) {
   $24 = ___cxa_find_matching_catch_3(0|0)|0;
   $25 = tempRet0;
   ___clang_call_terminate($24);
   // unreachable;
  }
  if ($$0) {
   $$038 = $17;$$046 = $16;
  } else {
   $$037 = $17;$$045 = $16;
   ___resumeException($$045|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($5|0));
 $$037 = $$038;$$045 = $$046;
 ___resumeException($$045|0);
 // unreachable;
}
function __ZN10LineParser10EvalPosateEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$037 = 0, $$038 = 0, $$045 = 0, $$046 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 1560|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(1);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = (___cxa_allocate_exception(36)|0);
 $6 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($1|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  $$038 = $15;$$046 = $14;
 } else {
  $9 = ((($0)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  __THREW__ = 0;
  invoke_viii(668,($5|0),($1|0),($10|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($5|0),(256|0),(7|0));
   $13 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($1|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if ($19) {
   $20 = ___cxa_find_matching_catch_3(0|0)|0;
   $21 = tempRet0;
   ___clang_call_terminate($20);
   // unreachable;
  }
  if ($$0) {
   $$038 = $17;$$046 = $16;
  } else {
   $$037 = $17;$$045 = $16;
   ___resumeException($$045|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($5|0));
 $$037 = $$038;$$045 = $$046;
 ___resumeException($$045|0);
 // unreachable;
}
function __ZN10LineParser6EvalHiEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$037 = 0, $$038 = 0, $$045 = 0, $$046 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 1560|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(1);
 if (!($4)) {
  $20 = (($3) + -1)|0;
  $21 = (((($0)) + 24|0) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = (~~(($22)));
  $24 = $23 >>> 8;
  $25 = $24 & 255;
  $26 = (+($25|0));
  HEAPF64[$21>>3] = $26;
  STACKTOP = sp;return;
 }
 $5 = (___cxa_allocate_exception(36)|0);
 $6 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($1|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  $$038 = $15;$$046 = $14;
 } else {
  $9 = ((($0)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  __THREW__ = 0;
  invoke_viii(668,($5|0),($1|0),($10|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($5|0),(256|0),(7|0));
   $13 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($1|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if ($19) {
   $27 = ___cxa_find_matching_catch_3(0|0)|0;
   $28 = tempRet0;
   ___clang_call_terminate($27);
   // unreachable;
  }
  if ($$0) {
   $$038 = $17;$$046 = $16;
  } else {
   $$037 = $17;$$045 = $16;
   ___resumeException($$045|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($5|0));
 $$037 = $$038;$$045 = $$046;
 ___resumeException($$045|0);
 // unreachable;
}
function __ZN10LineParser6EvalLoEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$037 = 0, $$038 = 0, $$045 = 0, $$046 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0;
 var $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 1560|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(1);
 if (!($4)) {
  $20 = (($3) + -1)|0;
  $21 = (((($0)) + 24|0) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = (~~(($22)));
  $24 = $23 & 255;
  $25 = (+($24|0));
  HEAPF64[$21>>3] = $25;
  STACKTOP = sp;return;
 }
 $5 = (___cxa_allocate_exception(36)|0);
 $6 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($1|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  $$038 = $15;$$046 = $14;
 } else {
  $9 = ((($0)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  __THREW__ = 0;
  invoke_viii(668,($5|0),($1|0),($10|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($5|0),(256|0),(7|0));
   $13 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($1|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if ($19) {
   $26 = ___cxa_find_matching_catch_3(0|0)|0;
   $27 = tempRet0;
   ___clang_call_terminate($26);
   // unreachable;
  }
  if ($$0) {
   $$038 = $17;$$046 = $16;
  } else {
   $$037 = $17;$$045 = $16;
   ___resumeException($$045|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($5|0));
 $$037 = $$038;$$045 = $$046;
 ___resumeException($$045|0);
 // unreachable;
}
function __ZN10LineParser7EvalSinEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$037 = 0, $$038 = 0, $$045 = 0, $$046 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0;
 var $23 = 0.0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 1560|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(1);
 if (!($4)) {
  $20 = (($3) + -1)|0;
  $21 = (((($0)) + 24|0) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = (+Math_sin((+$22)));
  HEAPF64[$21>>3] = $23;
  STACKTOP = sp;return;
 }
 $5 = (___cxa_allocate_exception(36)|0);
 $6 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($1|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  $$038 = $15;$$046 = $14;
 } else {
  $9 = ((($0)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  __THREW__ = 0;
  invoke_viii(668,($5|0),($1|0),($10|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($5|0),(256|0),(7|0));
   $13 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($1|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if ($19) {
   $24 = ___cxa_find_matching_catch_3(0|0)|0;
   $25 = tempRet0;
   ___clang_call_terminate($24);
   // unreachable;
  }
  if ($$0) {
   $$038 = $17;$$046 = $16;
  } else {
   $$037 = $17;$$045 = $16;
   ___resumeException($$045|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($5|0));
 $$037 = $$038;$$045 = $$046;
 ___resumeException($$045|0);
 // unreachable;
}
function __ZN10LineParser7EvalCosEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$037 = 0, $$038 = 0, $$045 = 0, $$046 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0;
 var $23 = 0.0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 1560|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(1);
 if (!($4)) {
  $20 = (($3) + -1)|0;
  $21 = (((($0)) + 24|0) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = (+Math_cos((+$22)));
  HEAPF64[$21>>3] = $23;
  STACKTOP = sp;return;
 }
 $5 = (___cxa_allocate_exception(36)|0);
 $6 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($1|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  $$038 = $15;$$046 = $14;
 } else {
  $9 = ((($0)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  __THREW__ = 0;
  invoke_viii(668,($5|0),($1|0),($10|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($5|0),(256|0),(7|0));
   $13 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($1|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if ($19) {
   $24 = ___cxa_find_matching_catch_3(0|0)|0;
   $25 = tempRet0;
   ___clang_call_terminate($24);
   // unreachable;
  }
  if ($$0) {
   $$038 = $17;$$046 = $16;
  } else {
   $$037 = $17;$$045 = $16;
   ___resumeException($$045|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($5|0));
 $$037 = $$038;$$045 = $$046;
 ___resumeException($$045|0);
 // unreachable;
}
function __ZN10LineParser7EvalTanEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$037 = 0, $$038 = 0, $$045 = 0, $$046 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0;
 var $23 = 0.0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 1560|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(1);
 if (!($4)) {
  $20 = (($3) + -1)|0;
  $21 = (((($0)) + 24|0) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = (+Math_tan((+$22)));
  HEAPF64[$21>>3] = $23;
  STACKTOP = sp;return;
 }
 $5 = (___cxa_allocate_exception(36)|0);
 $6 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($1|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  $$038 = $15;$$046 = $14;
 } else {
  $9 = ((($0)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  __THREW__ = 0;
  invoke_viii(668,($5|0),($1|0),($10|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($5|0),(256|0),(7|0));
   $13 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($1|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if ($19) {
   $24 = ___cxa_find_matching_catch_3(0|0)|0;
   $25 = tempRet0;
   ___clang_call_terminate($24);
   // unreachable;
  }
  if ($$0) {
   $$038 = $17;$$046 = $16;
  } else {
   $$037 = $17;$$045 = $16;
   ___resumeException($$045|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($5|0));
 $$037 = $$038;$$045 = $$046;
 ___resumeException($$045|0);
 // unreachable;
}
function __ZN10LineParser10EvalArcSinEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$04 = 0, $$0612 = 0, $$0811 = 0, $$1715 = 0, $$1914 = 0, $$2 = 0, $$210 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 12|0;
 $2 = sp;
 $3 = ((($0)) + 1560|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(1);
 if ($5) {
  $6 = (___cxa_allocate_exception(36)|0);
  $7 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vii(635,($1|0),($7|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if ($9) {
   $15 = ___cxa_find_matching_catch_2()|0;
   $16 = tempRet0;
   $$0612 = $16;$$0811 = $15;
  } else {
   $10 = ((($0)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   __THREW__ = 0;
   invoke_viii(668,($6|0),($1|0),($11|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    $$04 = 1;
   } else {
    __THREW__ = 0;
    invoke_viii(644,($6|0),(256|0),(7|0));
    $14 = __THREW__; __THREW__ = 0;
    $$04 = 0;
   }
   $17 = ___cxa_find_matching_catch_2()|0;
   $18 = tempRet0;
   __THREW__ = 0;
   invoke_vi(637,($1|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    $44 = ___cxa_find_matching_catch_3(0|0)|0;
    $45 = tempRet0;
    ___clang_call_terminate($44);
    // unreachable;
   }
   if ($$04) {
    $$0612 = $18;$$0811 = $17;
   } else {
    $$2 = $18;$$210 = $17;
    ___resumeException($$210|0);
    // unreachable;
   }
  }
  ___cxa_free_exception(($6|0));
  $$2 = $$0612;$$210 = $$0811;
  ___resumeException($$210|0);
  // unreachable;
 }
 $21 = (($4) + -1)|0;
 $22 = (((($0)) + 24|0) + ($21<<3)|0);
 $23 = +HEAPF64[$22>>3];
 $24 = (+Math_asin((+$23)));
 HEAPF64[$22>>3] = $24;
 $25 = (___errno_location()|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(33);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $28 = (___cxa_allocate_exception(36)|0);
 $29 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($2|0),($29|0));
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 if ($31) {
  $38 = ___cxa_find_matching_catch_2()|0;
  $39 = tempRet0;
  $$1715 = $39;$$1914 = $38;
 } else {
  $32 = ((($0)) + 16|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + -1)|0;
  __THREW__ = 0;
  invoke_viii(669,($28|0),($2|0),($34|0));
  $35 = __THREW__; __THREW__ = 0;
  $36 = $35&1;
  if ($36) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($28|0),(304|0),(7|0));
   $37 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $40 = ___cxa_find_matching_catch_2()|0;
  $41 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($2|0));
  $42 = __THREW__; __THREW__ = 0;
  $43 = $42&1;
  if ($43) {
   $44 = ___cxa_find_matching_catch_3(0|0)|0;
   $45 = tempRet0;
   ___clang_call_terminate($44);
   // unreachable;
  }
  if ($$0) {
   $$1715 = $41;$$1914 = $40;
  } else {
   $$2 = $41;$$210 = $40;
   ___resumeException($$210|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($28|0));
 $$2 = $$1715;$$210 = $$1914;
 ___resumeException($$210|0);
 // unreachable;
}
function __ZN10LineParser10EvalArcCosEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$04 = 0, $$0612 = 0, $$0811 = 0, $$1715 = 0, $$1914 = 0, $$2 = 0, $$210 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 12|0;
 $2 = sp;
 $3 = ((($0)) + 1560|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(1);
 if ($5) {
  $6 = (___cxa_allocate_exception(36)|0);
  $7 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vii(635,($1|0),($7|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if ($9) {
   $15 = ___cxa_find_matching_catch_2()|0;
   $16 = tempRet0;
   $$0612 = $16;$$0811 = $15;
  } else {
   $10 = ((($0)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   __THREW__ = 0;
   invoke_viii(668,($6|0),($1|0),($11|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    $$04 = 1;
   } else {
    __THREW__ = 0;
    invoke_viii(644,($6|0),(256|0),(7|0));
    $14 = __THREW__; __THREW__ = 0;
    $$04 = 0;
   }
   $17 = ___cxa_find_matching_catch_2()|0;
   $18 = tempRet0;
   __THREW__ = 0;
   invoke_vi(637,($1|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    $44 = ___cxa_find_matching_catch_3(0|0)|0;
    $45 = tempRet0;
    ___clang_call_terminate($44);
    // unreachable;
   }
   if ($$04) {
    $$0612 = $18;$$0811 = $17;
   } else {
    $$2 = $18;$$210 = $17;
    ___resumeException($$210|0);
    // unreachable;
   }
  }
  ___cxa_free_exception(($6|0));
  $$2 = $$0612;$$210 = $$0811;
  ___resumeException($$210|0);
  // unreachable;
 }
 $21 = (($4) + -1)|0;
 $22 = (((($0)) + 24|0) + ($21<<3)|0);
 $23 = +HEAPF64[$22>>3];
 $24 = (+Math_acos((+$23)));
 HEAPF64[$22>>3] = $24;
 $25 = (___errno_location()|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(33);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $28 = (___cxa_allocate_exception(36)|0);
 $29 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($2|0),($29|0));
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 if ($31) {
  $38 = ___cxa_find_matching_catch_2()|0;
  $39 = tempRet0;
  $$1715 = $39;$$1914 = $38;
 } else {
  $32 = ((($0)) + 16|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + -1)|0;
  __THREW__ = 0;
  invoke_viii(669,($28|0),($2|0),($34|0));
  $35 = __THREW__; __THREW__ = 0;
  $36 = $35&1;
  if ($36) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($28|0),(304|0),(7|0));
   $37 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $40 = ___cxa_find_matching_catch_2()|0;
  $41 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($2|0));
  $42 = __THREW__; __THREW__ = 0;
  $43 = $42&1;
  if ($43) {
   $44 = ___cxa_find_matching_catch_3(0|0)|0;
   $45 = tempRet0;
   ___clang_call_terminate($44);
   // unreachable;
  }
  if ($$0) {
   $$1715 = $41;$$1914 = $40;
  } else {
   $$2 = $41;$$210 = $40;
   ___resumeException($$210|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($28|0));
 $$2 = $$1715;$$210 = $$1914;
 ___resumeException($$210|0);
 // unreachable;
}
function __ZN10LineParser10EvalArcTanEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$04 = 0, $$0612 = 0, $$0811 = 0, $$1715 = 0, $$1914 = 0, $$2 = 0, $$210 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 12|0;
 $2 = sp;
 $3 = ((($0)) + 1560|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(1);
 if ($5) {
  $6 = (___cxa_allocate_exception(36)|0);
  $7 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vii(635,($1|0),($7|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if ($9) {
   $15 = ___cxa_find_matching_catch_2()|0;
   $16 = tempRet0;
   $$0612 = $16;$$0811 = $15;
  } else {
   $10 = ((($0)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   __THREW__ = 0;
   invoke_viii(668,($6|0),($1|0),($11|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    $$04 = 1;
   } else {
    __THREW__ = 0;
    invoke_viii(644,($6|0),(256|0),(7|0));
    $14 = __THREW__; __THREW__ = 0;
    $$04 = 0;
   }
   $17 = ___cxa_find_matching_catch_2()|0;
   $18 = tempRet0;
   __THREW__ = 0;
   invoke_vi(637,($1|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    $44 = ___cxa_find_matching_catch_3(0|0)|0;
    $45 = tempRet0;
    ___clang_call_terminate($44);
    // unreachable;
   }
   if ($$04) {
    $$0612 = $18;$$0811 = $17;
   } else {
    $$2 = $18;$$210 = $17;
    ___resumeException($$210|0);
    // unreachable;
   }
  }
  ___cxa_free_exception(($6|0));
  $$2 = $$0612;$$210 = $$0811;
  ___resumeException($$210|0);
  // unreachable;
 }
 $21 = (($4) + -1)|0;
 $22 = (((($0)) + 24|0) + ($21<<3)|0);
 $23 = +HEAPF64[$22>>3];
 $24 = (+Math_atan((+$23)));
 HEAPF64[$22>>3] = $24;
 $25 = (___errno_location()|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(33);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $28 = (___cxa_allocate_exception(36)|0);
 $29 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($2|0),($29|0));
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 if ($31) {
  $38 = ___cxa_find_matching_catch_2()|0;
  $39 = tempRet0;
  $$1715 = $39;$$1914 = $38;
 } else {
  $32 = ((($0)) + 16|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + -1)|0;
  __THREW__ = 0;
  invoke_viii(669,($28|0),($2|0),($34|0));
  $35 = __THREW__; __THREW__ = 0;
  $36 = $35&1;
  if ($36) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($28|0),(304|0),(7|0));
   $37 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $40 = ___cxa_find_matching_catch_2()|0;
  $41 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($2|0));
  $42 = __THREW__; __THREW__ = 0;
  $43 = $42&1;
  if ($43) {
   $44 = ___cxa_find_matching_catch_3(0|0)|0;
   $45 = tempRet0;
   ___clang_call_terminate($44);
   // unreachable;
  }
  if ($$0) {
   $$1715 = $41;$$1914 = $40;
  } else {
   $$2 = $41;$$210 = $40;
   ___resumeException($$210|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($28|0));
 $$2 = $$1715;$$210 = $$1914;
 ___resumeException($$210|0);
 // unreachable;
}
function __ZN10LineParser8EvalSqrtEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$04 = 0, $$0612 = 0, $$0811 = 0, $$1715 = 0, $$1914 = 0, $$2 = 0, $$210 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 12|0;
 $2 = sp;
 $3 = ((($0)) + 1560|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(1);
 if ($5) {
  $6 = (___cxa_allocate_exception(36)|0);
  $7 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vii(635,($1|0),($7|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if ($9) {
   $15 = ___cxa_find_matching_catch_2()|0;
   $16 = tempRet0;
   $$0612 = $16;$$0811 = $15;
  } else {
   $10 = ((($0)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   __THREW__ = 0;
   invoke_viii(668,($6|0),($1|0),($11|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    $$04 = 1;
   } else {
    __THREW__ = 0;
    invoke_viii(644,($6|0),(256|0),(7|0));
    $14 = __THREW__; __THREW__ = 0;
    $$04 = 0;
   }
   $17 = ___cxa_find_matching_catch_2()|0;
   $18 = tempRet0;
   __THREW__ = 0;
   invoke_vi(637,($1|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    $44 = ___cxa_find_matching_catch_3(0|0)|0;
    $45 = tempRet0;
    ___clang_call_terminate($44);
    // unreachable;
   }
   if ($$04) {
    $$0612 = $18;$$0811 = $17;
   } else {
    $$2 = $18;$$210 = $17;
    ___resumeException($$210|0);
    // unreachable;
   }
  }
  ___cxa_free_exception(($6|0));
  $$2 = $$0612;$$210 = $$0811;
  ___resumeException($$210|0);
  // unreachable;
 }
 $21 = (($4) + -1)|0;
 $22 = (((($0)) + 24|0) + ($21<<3)|0);
 $23 = +HEAPF64[$22>>3];
 $24 = (+Math_sqrt((+$23)));
 HEAPF64[$22>>3] = $24;
 $25 = (___errno_location()|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(33);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $28 = (___cxa_allocate_exception(36)|0);
 $29 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($2|0),($29|0));
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 if ($31) {
  $38 = ___cxa_find_matching_catch_2()|0;
  $39 = tempRet0;
  $$1715 = $39;$$1914 = $38;
 } else {
  $32 = ((($0)) + 16|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + -1)|0;
  __THREW__ = 0;
  invoke_viii(669,($28|0),($2|0),($34|0));
  $35 = __THREW__; __THREW__ = 0;
  $36 = $35&1;
  if ($36) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($28|0),(304|0),(7|0));
   $37 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $40 = ___cxa_find_matching_catch_2()|0;
  $41 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($2|0));
  $42 = __THREW__; __THREW__ = 0;
  $43 = $42&1;
  if ($43) {
   $44 = ___cxa_find_matching_catch_3(0|0)|0;
   $45 = tempRet0;
   ___clang_call_terminate($44);
   // unreachable;
  }
  if ($$0) {
   $$1715 = $41;$$1914 = $40;
  } else {
   $$2 = $41;$$210 = $40;
   ___resumeException($$210|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($28|0));
 $$2 = $$1715;$$210 = $$1914;
 ___resumeException($$210|0);
 // unreachable;
}
function __ZN10LineParser12EvalDegToRadEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$037 = 0, $$038 = 0, $$045 = 0, $$046 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0;
 var $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 1560|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(1);
 if (!($4)) {
  $20 = (($3) + -1)|0;
  $21 = (((($0)) + 24|0) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = $22 * 3.1415926535897931;
  $24 = $23 / 180.0;
  HEAPF64[$21>>3] = $24;
  STACKTOP = sp;return;
 }
 $5 = (___cxa_allocate_exception(36)|0);
 $6 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($1|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  $$038 = $15;$$046 = $14;
 } else {
  $9 = ((($0)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  __THREW__ = 0;
  invoke_viii(668,($5|0),($1|0),($10|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($5|0),(256|0),(7|0));
   $13 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($1|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if ($19) {
   $25 = ___cxa_find_matching_catch_3(0|0)|0;
   $26 = tempRet0;
   ___clang_call_terminate($25);
   // unreachable;
  }
  if ($$0) {
   $$038 = $17;$$046 = $16;
  } else {
   $$037 = $17;$$045 = $16;
   ___resumeException($$045|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($5|0));
 $$037 = $$038;$$045 = $$046;
 ___resumeException($$045|0);
 // unreachable;
}
function __ZN10LineParser12EvalRadToDegEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$037 = 0, $$038 = 0, $$045 = 0, $$046 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0;
 var $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 1560|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(1);
 if (!($4)) {
  $20 = (($3) + -1)|0;
  $21 = (((($0)) + 24|0) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = $22 * 180.0;
  $24 = $23 / 3.1415926535897931;
  HEAPF64[$21>>3] = $24;
  STACKTOP = sp;return;
 }
 $5 = (___cxa_allocate_exception(36)|0);
 $6 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($1|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  $$038 = $15;$$046 = $14;
 } else {
  $9 = ((($0)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  __THREW__ = 0;
  invoke_viii(668,($5|0),($1|0),($10|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($5|0),(256|0),(7|0));
   $13 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($1|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if ($19) {
   $25 = ___cxa_find_matching_catch_3(0|0)|0;
   $26 = tempRet0;
   ___clang_call_terminate($25);
   // unreachable;
  }
  if ($$0) {
   $$038 = $17;$$046 = $16;
  } else {
   $$037 = $17;$$045 = $16;
   ___resumeException($$045|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($5|0));
 $$037 = $$038;$$045 = $$046;
 ___resumeException($$045|0);
 // unreachable;
}
function __ZN10LineParser7EvalIntEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$037 = 0, $$038 = 0, $$045 = 0, $$046 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0;
 var $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 1560|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(1);
 if (!($4)) {
  $20 = (($3) + -1)|0;
  $21 = (((($0)) + 24|0) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = (~~(($22)));
  $24 = (+($23|0));
  HEAPF64[$21>>3] = $24;
  STACKTOP = sp;return;
 }
 $5 = (___cxa_allocate_exception(36)|0);
 $6 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($1|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  $$038 = $15;$$046 = $14;
 } else {
  $9 = ((($0)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  __THREW__ = 0;
  invoke_viii(668,($5|0),($1|0),($10|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($5|0),(256|0),(7|0));
   $13 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($1|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if ($19) {
   $25 = ___cxa_find_matching_catch_3(0|0)|0;
   $26 = tempRet0;
   ___clang_call_terminate($25);
   // unreachable;
  }
  if ($$0) {
   $$038 = $17;$$046 = $16;
  } else {
   $$037 = $17;$$045 = $16;
   ___resumeException($$045|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($5|0));
 $$037 = $$038;$$045 = $$046;
 ___resumeException($$045|0);
 // unreachable;
}
function __ZN10LineParser7EvalAbsEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$037 = 0, $$038 = 0, $$045 = 0, $$046 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0;
 var $23 = 0.0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 1560|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(1);
 if (!($4)) {
  $20 = (($3) + -1)|0;
  $21 = (((($0)) + 24|0) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = (+Math_abs((+$22)));
  HEAPF64[$21>>3] = $23;
  STACKTOP = sp;return;
 }
 $5 = (___cxa_allocate_exception(36)|0);
 $6 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($1|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  $$038 = $15;$$046 = $14;
 } else {
  $9 = ((($0)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  __THREW__ = 0;
  invoke_viii(668,($5|0),($1|0),($10|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($5|0),(256|0),(7|0));
   $13 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($1|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if ($19) {
   $24 = ___cxa_find_matching_catch_3(0|0)|0;
   $25 = tempRet0;
   ___clang_call_terminate($24);
   // unreachable;
  }
  if ($$0) {
   $$038 = $17;$$046 = $16;
  } else {
   $$037 = $17;$$045 = $16;
   ___resumeException($$045|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($5|0));
 $$037 = $$038;$$045 = $$046;
 ___resumeException($$045|0);
 // unreachable;
}
function __ZN10LineParser7EvalSgnEv($0) {
 $0 = $0|0;
 var $$010 = 0, $$011 = 0, $$06 = 0, $$078 = 0, $$079 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0;
 var $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 1560|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(1);
 if (!($4)) {
  $20 = (($3) + -1)|0;
  $21 = (((($0)) + 24|0) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = $22 < 0.0;
  $24 = $22 > 0.0;
  $25 = $24 ? 1.0 : 0.0;
  $26 = $23 ? -1.0 : $25;
  HEAPF64[$21>>3] = $26;
  STACKTOP = sp;return;
 }
 $5 = (___cxa_allocate_exception(36)|0);
 $6 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($1|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  $$011 = $14;$$079 = $15;
 } else {
  $9 = ((($0)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  __THREW__ = 0;
  invoke_viii(668,($5|0),($1|0),($10|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   $$06 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($5|0),(256|0),(7|0));
   $13 = __THREW__; __THREW__ = 0;
   $$06 = 0;
  }
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($1|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if ($19) {
   $27 = ___cxa_find_matching_catch_3(0|0)|0;
   $28 = tempRet0;
   ___clang_call_terminate($27);
   // unreachable;
  }
  if ($$06) {
   $$011 = $16;$$079 = $17;
  } else {
   $$010 = $16;$$078 = $17;
   ___resumeException($$010|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($5|0));
 $$010 = $$011;$$078 = $$079;
 ___resumeException($$010|0);
 // unreachable;
}
function __ZN10LineParser7EvalRndEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$013 = 0.0, $$01422 = 0, $$016 = 0, $$01821 = 0, $$11525 = 0, $$11924 = 0, $$2 = 0, $$220 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 12|0;
 $2 = sp;
 $3 = ((($0)) + 1560|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(1);
 if ($5) {
  $6 = (___cxa_allocate_exception(36)|0);
  $7 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vii(635,($1|0),($7|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if ($9) {
   $15 = ___cxa_find_matching_catch_2()|0;
   $16 = tempRet0;
   $$01422 = $15;$$01821 = $16;
  } else {
   $10 = ((($0)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   __THREW__ = 0;
   invoke_viii(668,($6|0),($1|0),($11|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    $$016 = 1;
   } else {
    __THREW__ = 0;
    invoke_viii(644,($6|0),(256|0),(7|0));
    $14 = __THREW__; __THREW__ = 0;
    $$016 = 0;
   }
   $17 = ___cxa_find_matching_catch_2()|0;
   $18 = tempRet0;
   __THREW__ = 0;
   invoke_vi(637,($1|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    $51 = ___cxa_find_matching_catch_3(0|0)|0;
    $52 = tempRet0;
    ___clang_call_terminate($51);
    // unreachable;
   }
   if ($$016) {
    $$01422 = $17;$$01821 = $18;
   } else {
    $$2 = $17;$$220 = $18;
    ___resumeException($$2|0);
    // unreachable;
   }
  }
  ___cxa_free_exception(($6|0));
  $$2 = $$01422;$$220 = $$01821;
  ___resumeException($$2|0);
  // unreachable;
 }
 $21 = (($4) + -1)|0;
 $22 = (((($0)) + 24|0) + ($21<<3)|0);
 $23 = +HEAPF64[$22>>3];
 $24 = $23 < 1.0;
 if (!($24)) {
  $41 = $23 == 1.0;
  $42 = (_rand()|0);
  $43 = (+($42|0));
  $44 = $43 * 4.6566128730773926E-10;
  if ($41) {
   $$013 = $44;
   $48 = HEAP32[$3>>2]|0;
   $49 = (($48) + -1)|0;
   $50 = (((($0)) + 24|0) + ($49<<3)|0);
   HEAPF64[$50>>3] = $$013;
   STACKTOP = sp;return;
  }
  $45 = $23 * $44;
  $46 = (~~(($45)));
  $47 = (+($46|0));
  $$013 = $47;
  $48 = HEAP32[$3>>2]|0;
  $49 = (($48) + -1)|0;
  $50 = (((($0)) + 24|0) + ($49<<3)|0);
  HEAPF64[$50>>3] = $$013;
  STACKTOP = sp;return;
 }
 $25 = (___cxa_allocate_exception(36)|0);
 $26 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($2|0),($26|0));
 $27 = __THREW__; __THREW__ = 0;
 $28 = $27&1;
 if ($28) {
  $35 = ___cxa_find_matching_catch_2()|0;
  $36 = tempRet0;
  $$11525 = $35;$$11924 = $36;
 } else {
  $29 = ((($0)) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + -1)|0;
  __THREW__ = 0;
  invoke_viii(669,($25|0),($2|0),($31|0));
  $32 = __THREW__; __THREW__ = 0;
  $33 = $32&1;
  if ($33) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($25|0),(304|0),(7|0));
   $34 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $37 = ___cxa_find_matching_catch_2()|0;
  $38 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($2|0));
  $39 = __THREW__; __THREW__ = 0;
  $40 = $39&1;
  if ($40) {
   $51 = ___cxa_find_matching_catch_3(0|0)|0;
   $52 = tempRet0;
   ___clang_call_terminate($51);
   // unreachable;
  }
  if ($$0) {
   $$11525 = $37;$$11924 = $38;
  } else {
   $$2 = $37;$$220 = $38;
   ___resumeException($$2|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($25|0));
 $$2 = $$11525;$$220 = $$11924;
 ___resumeException($$2|0);
 // unreachable;
}
function __ZN10LineParser7EvalNotEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$037 = 0, $$038 = 0, $$045 = 0, $$046 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0;
 var $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 1560|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(1);
 if (!($4)) {
  $20 = (($3) + -1)|0;
  $21 = (((($0)) + 24|0) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = (~~(($22)));
  $24 = $23 ^ -1;
  $25 = (+($24|0));
  HEAPF64[$21>>3] = $25;
  STACKTOP = sp;return;
 }
 $5 = (___cxa_allocate_exception(36)|0);
 $6 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($1|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  $$038 = $15;$$046 = $14;
 } else {
  $9 = ((($0)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  __THREW__ = 0;
  invoke_viii(668,($5|0),($1|0),($10|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($5|0),(256|0),(7|0));
   $13 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($1|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if ($19) {
   $26 = ___cxa_find_matching_catch_3(0|0)|0;
   $27 = tempRet0;
   ___clang_call_terminate($26);
   // unreachable;
  }
  if ($$0) {
   $$038 = $17;$$046 = $16;
  } else {
   $$037 = $17;$$045 = $16;
   ___resumeException($$045|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($5|0));
 $$037 = $$038;$$045 = $$046;
 ___resumeException($$045|0);
 // unreachable;
}
function __ZN10LineParser7EvalLogEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$04 = 0, $$0612 = 0, $$0811 = 0, $$1715 = 0, $$1914 = 0, $$2 = 0, $$210 = 0, $$off = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 12|0;
 $2 = sp;
 $3 = ((($0)) + 1560|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(1);
 if ($5) {
  $6 = (___cxa_allocate_exception(36)|0);
  $7 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vii(635,($1|0),($7|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if ($9) {
   $15 = ___cxa_find_matching_catch_2()|0;
   $16 = tempRet0;
   $$0612 = $16;$$0811 = $15;
  } else {
   $10 = ((($0)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   __THREW__ = 0;
   invoke_viii(668,($6|0),($1|0),($11|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    $$04 = 1;
   } else {
    __THREW__ = 0;
    invoke_viii(644,($6|0),(256|0),(7|0));
    $14 = __THREW__; __THREW__ = 0;
    $$04 = 0;
   }
   $17 = ___cxa_find_matching_catch_2()|0;
   $18 = tempRet0;
   __THREW__ = 0;
   invoke_vi(637,($1|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    $43 = ___cxa_find_matching_catch_3(0|0)|0;
    $44 = tempRet0;
    ___clang_call_terminate($43);
    // unreachable;
   }
   if ($$04) {
    $$0612 = $18;$$0811 = $17;
   } else {
    $$2 = $18;$$210 = $17;
    ___resumeException($$210|0);
    // unreachable;
   }
  }
  ___cxa_free_exception(($6|0));
  $$2 = $$0612;$$210 = $$0811;
  ___resumeException($$210|0);
  // unreachable;
 }
 $21 = (($4) + -1)|0;
 $22 = (((($0)) + 24|0) + ($21<<3)|0);
 $23 = +HEAPF64[$22>>3];
 $24 = (+_log10($23));
 HEAPF64[$22>>3] = $24;
 $25 = (___errno_location()|0);
 $26 = HEAP32[$25>>2]|0;
 $$off = (($26) + -33)|0;
 $switch = ($$off>>>0)<(2);
 if (!($switch)) {
  STACKTOP = sp;return;
 }
 $27 = (___cxa_allocate_exception(36)|0);
 $28 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($2|0),($28|0));
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 if ($30) {
  $37 = ___cxa_find_matching_catch_2()|0;
  $38 = tempRet0;
  $$1715 = $38;$$1914 = $37;
 } else {
  $31 = ((($0)) + 16|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + -1)|0;
  __THREW__ = 0;
  invoke_viii(669,($27|0),($2|0),($33|0));
  $34 = __THREW__; __THREW__ = 0;
  $35 = $34&1;
  if ($35) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($27|0),(304|0),(7|0));
   $36 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $39 = ___cxa_find_matching_catch_2()|0;
  $40 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($2|0));
  $41 = __THREW__; __THREW__ = 0;
  $42 = $41&1;
  if ($42) {
   $43 = ___cxa_find_matching_catch_3(0|0)|0;
   $44 = tempRet0;
   ___clang_call_terminate($43);
   // unreachable;
  }
  if ($$0) {
   $$1715 = $40;$$1914 = $39;
  } else {
   $$2 = $40;$$210 = $39;
   ___resumeException($$210|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($27|0));
 $$2 = $$1715;$$210 = $$1914;
 ___resumeException($$210|0);
 // unreachable;
}
function __ZN10LineParser6EvalLnEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$04 = 0, $$0612 = 0, $$0811 = 0, $$1715 = 0, $$1914 = 0, $$2 = 0, $$210 = 0, $$off = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 12|0;
 $2 = sp;
 $3 = ((($0)) + 1560|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(1);
 if ($5) {
  $6 = (___cxa_allocate_exception(36)|0);
  $7 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vii(635,($1|0),($7|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if ($9) {
   $15 = ___cxa_find_matching_catch_2()|0;
   $16 = tempRet0;
   $$0612 = $16;$$0811 = $15;
  } else {
   $10 = ((($0)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   __THREW__ = 0;
   invoke_viii(668,($6|0),($1|0),($11|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    $$04 = 1;
   } else {
    __THREW__ = 0;
    invoke_viii(644,($6|0),(256|0),(7|0));
    $14 = __THREW__; __THREW__ = 0;
    $$04 = 0;
   }
   $17 = ___cxa_find_matching_catch_2()|0;
   $18 = tempRet0;
   __THREW__ = 0;
   invoke_vi(637,($1|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    $43 = ___cxa_find_matching_catch_3(0|0)|0;
    $44 = tempRet0;
    ___clang_call_terminate($43);
    // unreachable;
   }
   if ($$04) {
    $$0612 = $18;$$0811 = $17;
   } else {
    $$2 = $18;$$210 = $17;
    ___resumeException($$210|0);
    // unreachable;
   }
  }
  ___cxa_free_exception(($6|0));
  $$2 = $$0612;$$210 = $$0811;
  ___resumeException($$210|0);
  // unreachable;
 }
 $21 = (($4) + -1)|0;
 $22 = (((($0)) + 24|0) + ($21<<3)|0);
 $23 = +HEAPF64[$22>>3];
 $24 = (+Math_log((+$23)));
 HEAPF64[$22>>3] = $24;
 $25 = (___errno_location()|0);
 $26 = HEAP32[$25>>2]|0;
 $$off = (($26) + -33)|0;
 $switch = ($$off>>>0)<(2);
 if (!($switch)) {
  STACKTOP = sp;return;
 }
 $27 = (___cxa_allocate_exception(36)|0);
 $28 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($2|0),($28|0));
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 if ($30) {
  $37 = ___cxa_find_matching_catch_2()|0;
  $38 = tempRet0;
  $$1715 = $38;$$1914 = $37;
 } else {
  $31 = ((($0)) + 16|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + -1)|0;
  __THREW__ = 0;
  invoke_viii(669,($27|0),($2|0),($33|0));
  $34 = __THREW__; __THREW__ = 0;
  $35 = $34&1;
  if ($35) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($27|0),(304|0),(7|0));
   $36 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $39 = ___cxa_find_matching_catch_2()|0;
  $40 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($2|0));
  $41 = __THREW__; __THREW__ = 0;
  $42 = $41&1;
  if ($42) {
   $43 = ___cxa_find_matching_catch_3(0|0)|0;
   $44 = tempRet0;
   ___clang_call_terminate($43);
   // unreachable;
  }
  if ($$0) {
   $$1715 = $40;$$1914 = $39;
  } else {
   $$2 = $40;$$210 = $39;
   ___resumeException($$210|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($27|0));
 $$2 = $$1715;$$210 = $$1914;
 ___resumeException($$210|0);
 // unreachable;
}
function __ZN10LineParser7EvalExpEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$04 = 0, $$0612 = 0, $$0811 = 0, $$1715 = 0, $$1914 = 0, $$2 = 0, $$210 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 12|0;
 $2 = sp;
 $3 = ((($0)) + 1560|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(1);
 if ($5) {
  $6 = (___cxa_allocate_exception(36)|0);
  $7 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vii(635,($1|0),($7|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if ($9) {
   $15 = ___cxa_find_matching_catch_2()|0;
   $16 = tempRet0;
   $$0612 = $16;$$0811 = $15;
  } else {
   $10 = ((($0)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   __THREW__ = 0;
   invoke_viii(668,($6|0),($1|0),($11|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    $$04 = 1;
   } else {
    __THREW__ = 0;
    invoke_viii(644,($6|0),(256|0),(7|0));
    $14 = __THREW__; __THREW__ = 0;
    $$04 = 0;
   }
   $17 = ___cxa_find_matching_catch_2()|0;
   $18 = tempRet0;
   __THREW__ = 0;
   invoke_vi(637,($1|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    $44 = ___cxa_find_matching_catch_3(0|0)|0;
    $45 = tempRet0;
    ___clang_call_terminate($44);
    // unreachable;
   }
   if ($$04) {
    $$0612 = $18;$$0811 = $17;
   } else {
    $$2 = $18;$$210 = $17;
    ___resumeException($$210|0);
    // unreachable;
   }
  }
  ___cxa_free_exception(($6|0));
  $$2 = $$0612;$$210 = $$0811;
  ___resumeException($$210|0);
  // unreachable;
 }
 $21 = (($4) + -1)|0;
 $22 = (((($0)) + 24|0) + ($21<<3)|0);
 $23 = +HEAPF64[$22>>3];
 $24 = (+Math_exp((+$23)));
 HEAPF64[$22>>3] = $24;
 $25 = (___errno_location()|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(34);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $28 = (___cxa_allocate_exception(36)|0);
 $29 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($2|0),($29|0));
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 if ($31) {
  $38 = ___cxa_find_matching_catch_2()|0;
  $39 = tempRet0;
  $$1715 = $39;$$1914 = $38;
 } else {
  $32 = ((($0)) + 16|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + -1)|0;
  __THREW__ = 0;
  invoke_viii(669,($28|0),($2|0),($34|0));
  $35 = __THREW__; __THREW__ = 0;
  $36 = $35&1;
  if ($36) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($28|0),(304|0),(7|0));
   $37 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $40 = ___cxa_find_matching_catch_2()|0;
  $41 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($2|0));
  $42 = __THREW__; __THREW__ = 0;
  $43 = $42&1;
  if ($43) {
   $44 = ___cxa_find_matching_catch_3(0|0)|0;
   $45 = tempRet0;
   ___clang_call_terminate($44);
   // unreachable;
  }
  if ($$0) {
   $$1715 = $41;$$1914 = $40;
  } else {
   $$2 = $41;$$210 = $40;
   ___resumeException($$210|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($28|0));
 $$2 = $$1715;$$210 = $$1914;
 ___resumeException($$210|0);
 // unreachable;
}
function __ZN10LineParser8GetValueEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i = 0, $$0$i108 = 0, $$0$i67 = 0, $$0$i83 = 0, $$0$i93 = 0, $$023 = 0, $$023$lpad$bodyZZ2D = 0, $$025 = 0, $$026139 = 0, $$027$off0138 = 0, $$029113 = 0, $$03$i = 0, $$03$i107 = 0, $$03$i92 = 0, $$032 = 0, $$034 = 0, $$035 = 0, $$035$lpad$bodyZZ2D = 0, $$037 = 0;
 var $$037$lpad$bodyZZ2D = 0, $$039112 = 0, $$04$i = 0, $$04$i66 = 0, $$128$off0 = 0, $$130116 = 0, $$140115 = 0, $$231119 = 0, $$241118 = 0, $$3 = 0, $$342 = 0, $$4 = 0, $$443 = 0, $$6122 = 0, $$645121 = 0, $$7 = 0, $$746 = 0, $$8125 = 0, $$847124 = 0, $$9 = 0;
 var $$948 = 0, $$byval_copy = 0, $$byval_copy31 = 0, $$pre = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0.0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0.0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0.0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0.0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0.0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0.0, $512 = 0, $513 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0;
 var $eh$lpad$body$i64$index12Z2D = 0, $eh$lpad$body$i64$indexZ2D = 0, $eh$lpad$body$index27Z2D = 0, $eh$lpad$body$indexZ2D = 0, $eh$lpad$body62$index7Z2D = 0, $eh$lpad$body62$indexZ2D = 0, $eh$lpad$body79$index17Z2D = 0, $eh$lpad$body79$indexZ2D = 0, $isdigit = 0, $isdigittmp = 0, $lpad$phi$index = 0, $lpad$phi$index22 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(528|0);
 $$byval_copy31 = sp + 88|0;
 $$byval_copy = sp + 72|0;
 $1 = sp + 508|0;
 $2 = sp + 496|0;
 $3 = sp + 484|0;
 $4 = sp + 64|0;
 $5 = sp + 344|0;
 $6 = sp + 48|0;
 $7 = sp + 32|0;
 $8 = sp + 332|0;
 $9 = sp + 328|0;
 $10 = sp + 188|0;
 $11 = sp + 16|0;
 $12 = sp;
 $13 = sp + 176|0;
 $14 = sp + 164|0;
 $15 = sp + 152|0;
 $16 = sp + 140|0;
 $17 = sp + 128|0;
 $18 = sp + 116|0;
 $19 = sp + 104|0;
 HEAPF64[$4>>3] = 0.0;
 $20 = ((($0)) + 16|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($0)) + 4|0);
 $23 = ((($22)) + 11|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = ($24<<24>>24)<(0);
 if ($25) {
  $26 = ((($0)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $30 = $27;
 } else {
  $28 = $24&255;
  $30 = $28;
 }
 $29 = ($21>>>0)<($30>>>0);
 do {
  if ($29) {
   if ($25) {
    $31 = HEAP32[$22>>2]|0;
    $33 = $31;
   } else {
    $33 = $22;
   }
   $32 = (($33) + ($21)|0);
   $34 = HEAP8[$32>>0]|0;
   $35 = $34 << 24 >> 24;
   $isdigittmp = (($35) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if (!($isdigit)) {
    if ($25) {
     $36 = HEAP32[$22>>2]|0;
     $38 = $36;
    } else {
     $38 = $22;
    }
    $37 = (($38) + ($21)|0);
    $39 = HEAP8[$37>>0]|0;
    $40 = ($39<<24>>24)==(46);
    if (!($40)) {
     break;
    }
   }
   $41 = ((($5)) + 60|0);
   $42 = ((($5)) + 8|0);
   HEAP32[$5>>2] = ((4368));
   HEAP32[$41>>2] = ((4388));
   $43 = ((($5)) + 4|0);
   HEAP32[$43>>2] = 0;
   $44 = ((($5)) + 60|0);
   __THREW__ = 0;
   invoke_vii(649,($44|0),($42|0));
   $45 = __THREW__; __THREW__ = 0;
   $46 = $45&1;
   if ($46) {
    $63 = ___cxa_find_matching_catch_2()|0;
    $64 = tempRet0;
    $$0$i = $64;$$04$i = $63;
   } else {
    $47 = ((($5)) + 132|0);
    HEAP32[$47>>2] = 0;
    $48 = ((($5)) + 136|0);
    HEAP32[$48>>2] = -1;
    HEAP32[$5>>2] = (4408);
    HEAP32[$41>>2] = (4428);
    __THREW__ = 0;
    invoke_vi(650,($42|0));
    $49 = __THREW__; __THREW__ = 0;
    $50 = $49&1;
    do {
     if ($50) {
      $65 = ___cxa_find_matching_catch_2()|0;
      $66 = tempRet0;
      $eh$lpad$body$i$index2Z2D = $66;$eh$lpad$body$i$indexZ2D = $65;
     } else {
      HEAP32[$42>>2] = (3276);
      $51 = ((($5)) + 40|0);
      $52 = ((($5)) + 56|0);
      ;HEAP32[$51>>2]=0|0;HEAP32[$51+4>>2]=0|0;HEAP32[$51+8>>2]=0|0;HEAP32[$51+12>>2]=0|0;
      HEAP32[$52>>2] = 8;
      __THREW__ = 0;
      invoke_vii(651,($42|0),($22|0));
      $53 = __THREW__; __THREW__ = 0;
      $54 = $53&1;
      if ($54) {
       $55 = ___cxa_find_matching_catch_2()|0;
       $56 = tempRet0;
       __THREW__ = 0;
       invoke_vi(637,($51|0));
       $57 = __THREW__; __THREW__ = 0;
       $58 = $57&1;
       if ($58) {
        $61 = ___cxa_find_matching_catch_3(0|0)|0;
        $62 = tempRet0;
        ___clang_call_terminate($61);
        // unreachable;
       }
       __THREW__ = 0;
       invoke_vi(302,($42|0));
       $59 = __THREW__; __THREW__ = 0;
       $60 = $59&1;
       if (!($60)) {
        $eh$lpad$body$i$index2Z2D = $56;$eh$lpad$body$i$indexZ2D = $55;
        break;
       }
       $61 = ___cxa_find_matching_catch_3(0|0)|0;
       $62 = tempRet0;
       ___clang_call_terminate($61);
       // unreachable;
      }
      $73 = HEAP32[$20>>2]|0;
      $74 = $6;
      $75 = $74;
      HEAP32[$75>>2] = 0;
      $76 = (($74) + 4)|0;
      $77 = $76;
      HEAP32[$77>>2] = 0;
      $78 = ((($6)) + 8|0);
      $79 = $78;
      $80 = $79;
      HEAP32[$80>>2] = $73;
      $81 = (($79) + 4)|0;
      $82 = $81;
      HEAP32[$82>>2] = 0;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$6+12>>2]|0;
      (invoke_iii(672,($5|0),($$byval_copy|0))|0);
      $83 = __THREW__; __THREW__ = 0;
      $84 = $83&1;
      if (!($84)) {
       __THREW__ = 0;
       (invoke_iii(673,($5|0),($4|0))|0);
       $85 = __THREW__; __THREW__ = 0;
       $86 = $85&1;
       if (!($86)) {
        __THREW__ = 0;
        invoke_vii(674,($7|0),($5|0));
        $87 = __THREW__; __THREW__ = 0;
        $88 = $87&1;
        if (!($88)) {
         $89 = ((($7)) + 8|0);
         $90 = $89;
         $91 = $90;
         $92 = HEAP32[$91>>2]|0;
         $93 = (($90) + 4)|0;
         $94 = $93;
         $95 = HEAP32[$94>>2]|0;
         HEAP32[$20>>2] = $92;
         __ZNSt3__219basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
         $511 = +HEAPF64[$4>>3];
         STACKTOP = sp;return (+$511);
        }
       }
      }
      $96 = ___cxa_find_matching_catch_2()|0;
      $97 = tempRet0;
      __THREW__ = 0;
      invoke_vi(106,($5|0));
      $98 = __THREW__; __THREW__ = 0;
      $99 = $98&1;
      if ($99) {
       $512 = ___cxa_find_matching_catch_3(0|0)|0;
       $513 = tempRet0;
       ___clang_call_terminate($512);
       // unreachable;
      }
      $$9 = $96;$$948 = $97;
      ___resumeException($$9|0);
      // unreachable;
     }
    } while(0);
    __THREW__ = 0;
    invoke_vii(671,($5|0),((4440)|0));
    $67 = __THREW__; __THREW__ = 0;
    $68 = $67&1;
    if ($68) {
     $71 = ___cxa_find_matching_catch_3(0|0)|0;
     $72 = tempRet0;
     ___clang_call_terminate($71);
     // unreachable;
    } else {
     $$0$i = $eh$lpad$body$i$index2Z2D;$$04$i = $eh$lpad$body$i$indexZ2D;
    }
   }
   __THREW__ = 0;
   invoke_vi(653,($41|0));
   $69 = __THREW__; __THREW__ = 0;
   $70 = $69&1;
   if ($70) {
    $71 = ___cxa_find_matching_catch_3(0|0)|0;
    $72 = tempRet0;
    ___clang_call_terminate($71);
    // unreachable;
   } else {
    ___resumeException($$04$i|0);
    // unreachable;
   }
  }
 } while(0);
 if ($25) {
  $100 = ((($0)) + 8|0);
  $101 = HEAP32[$100>>2]|0;
  $104 = $101;
 } else {
  $102 = $24&255;
  $104 = $102;
 }
 $103 = ($21>>>0)<($104>>>0);
 do {
  if ($103) {
   if ($25) {
    $105 = HEAP32[$22>>2]|0;
    $107 = $105;
   } else {
    $107 = $22;
   }
   $106 = (($107) + ($21)|0);
   $108 = HEAP8[$106>>0]|0;
   $109 = ($108<<24>>24)==(38);
   if (!($109)) {
    if ($25) {
     $110 = HEAP32[$22>>2]|0;
     $112 = $110;
    } else {
     $112 = $22;
    }
    $111 = (($112) + ($21)|0);
    $113 = HEAP8[$111>>0]|0;
    $114 = ($113<<24>>24)==(36);
    if (!($114)) {
     break;
    }
   }
   $115 = (($21) + 1)|0;
   HEAP32[$20>>2] = $115;
   if ($25) {
    $116 = ((($0)) + 8|0);
    $117 = HEAP32[$116>>2]|0;
    $120 = $117;
   } else {
    $118 = $24&255;
    $120 = $118;
   }
   $119 = ($115>>>0)<($120>>>0);
   if ($119) {
    if ($25) {
     $121 = HEAP32[$22>>2]|0;
     $123 = $121;
    } else {
     $123 = $22;
    }
    $122 = (($123) + ($115)|0);
    $124 = HEAP8[$122>>0]|0;
    $125 = $124 << 24 >> 24;
    $126 = (_isxdigit($125)|0);
    $127 = ($126|0)==(0);
    if (!($127)) {
     $163 = ((($10)) + 60|0);
     $164 = ((($10)) + 8|0);
     HEAP32[$10>>2] = ((4368));
     HEAP32[$163>>2] = ((4388));
     $165 = ((($10)) + 4|0);
     HEAP32[$165>>2] = 0;
     $166 = ((($10)) + 60|0);
     __THREW__ = 0;
     invoke_vii(649,($166|0),($164|0));
     $167 = __THREW__; __THREW__ = 0;
     $168 = $167&1;
     if ($168) {
      $185 = ___cxa_find_matching_catch_2()|0;
      $186 = tempRet0;
      $$0$i67 = $186;$$04$i66 = $185;
     } else {
      $169 = ((($10)) + 132|0);
      HEAP32[$169>>2] = 0;
      $170 = ((($10)) + 136|0);
      HEAP32[$170>>2] = -1;
      HEAP32[$10>>2] = (4408);
      HEAP32[$163>>2] = (4428);
      __THREW__ = 0;
      invoke_vi(650,($164|0));
      $171 = __THREW__; __THREW__ = 0;
      $172 = $171&1;
      do {
       if ($172) {
        $187 = ___cxa_find_matching_catch_2()|0;
        $188 = tempRet0;
        $eh$lpad$body$i64$index12Z2D = $188;$eh$lpad$body$i64$indexZ2D = $187;
       } else {
        HEAP32[$164>>2] = (3276);
        $173 = ((($10)) + 40|0);
        $174 = ((($10)) + 56|0);
        ;HEAP32[$173>>2]=0|0;HEAP32[$173+4>>2]=0|0;HEAP32[$173+8>>2]=0|0;HEAP32[$173+12>>2]=0|0;
        HEAP32[$174>>2] = 8;
        __THREW__ = 0;
        invoke_vii(651,($164|0),($22|0));
        $175 = __THREW__; __THREW__ = 0;
        $176 = $175&1;
        if ($176) {
         $177 = ___cxa_find_matching_catch_2()|0;
         $178 = tempRet0;
         __THREW__ = 0;
         invoke_vi(637,($173|0));
         $179 = __THREW__; __THREW__ = 0;
         $180 = $179&1;
         if ($180) {
          $183 = ___cxa_find_matching_catch_3(0|0)|0;
          $184 = tempRet0;
          ___clang_call_terminate($183);
          // unreachable;
         }
         __THREW__ = 0;
         invoke_vi(302,($164|0));
         $181 = __THREW__; __THREW__ = 0;
         $182 = $181&1;
         if (!($182)) {
          $eh$lpad$body$i64$index12Z2D = $178;$eh$lpad$body$i64$indexZ2D = $177;
          break;
         }
         $183 = ___cxa_find_matching_catch_3(0|0)|0;
         $184 = tempRet0;
         ___clang_call_terminate($183);
         // unreachable;
        }
        $195 = HEAP32[$20>>2]|0;
        $196 = $11;
        $197 = $196;
        HEAP32[$197>>2] = 0;
        $198 = (($196) + 4)|0;
        $199 = $198;
        HEAP32[$199>>2] = 0;
        $200 = ((($11)) + 8|0);
        $201 = $200;
        $202 = $201;
        HEAP32[$202>>2] = $195;
        $203 = (($201) + 4)|0;
        $204 = $203;
        HEAP32[$204>>2] = 0;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy31>>2]=HEAP32[$11>>2]|0;HEAP32[$$byval_copy31+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$$byval_copy31+8>>2]=HEAP32[$11+8>>2]|0;HEAP32[$$byval_copy31+12>>2]=HEAP32[$11+12>>2]|0;
        (invoke_iii(672,($10|0),($$byval_copy31|0))|0);
        $205 = __THREW__; __THREW__ = 0;
        $206 = $205&1;
        do {
         if (!($206)) {
          $207 = HEAP32[$10>>2]|0;
          $208 = ((($207)) + -12|0);
          $209 = HEAP32[$208>>2]|0;
          $210 = (($10) + ($209)|0);
          $211 = ((($210)) + 4|0);
          $212 = HEAP32[$211>>2]|0;
          $213 = $212 & -75;
          $214 = $213 | 8;
          HEAP32[$211>>2] = $214;
          __THREW__ = 0;
          (invoke_iii(675,($10|0),($9|0))|0);
          $215 = __THREW__; __THREW__ = 0;
          $216 = $215&1;
          if (!($216)) {
           __THREW__ = 0;
           invoke_vii(674,($12|0),($10|0));
           $217 = __THREW__; __THREW__ = 0;
           $218 = $217&1;
           if ($218) {
            break;
           }
           $219 = ((($12)) + 8|0);
           $220 = $219;
           $221 = $220;
           $222 = HEAP32[$221>>2]|0;
           $223 = (($220) + 4)|0;
           $224 = $223;
           $225 = HEAP32[$224>>2]|0;
           HEAP32[$20>>2] = $222;
           $226 = HEAP32[$9>>2]|0;
           $227 = (+($226>>>0));
           HEAPF64[$4>>3] = $227;
           __ZNSt3__219basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($10);
           $511 = +HEAPF64[$4>>3];
           STACKTOP = sp;return (+$511);
          }
         }
        } while(0);
        $228 = ___cxa_find_matching_catch_2()|0;
        $229 = tempRet0;
        __THREW__ = 0;
        invoke_vi(106,($10|0));
        $230 = __THREW__; __THREW__ = 0;
        $231 = $230&1;
        if ($231) {
         $512 = ___cxa_find_matching_catch_3(0|0)|0;
         $513 = tempRet0;
         ___clang_call_terminate($512);
         // unreachable;
        }
        $$9 = $228;$$948 = $229;
        ___resumeException($$9|0);
        // unreachable;
       }
      } while(0);
      __THREW__ = 0;
      invoke_vii(671,($10|0),((4440)|0));
      $189 = __THREW__; __THREW__ = 0;
      $190 = $189&1;
      if ($190) {
       $193 = ___cxa_find_matching_catch_3(0|0)|0;
       $194 = tempRet0;
       ___clang_call_terminate($193);
       // unreachable;
      } else {
       $$0$i67 = $eh$lpad$body$i64$index12Z2D;$$04$i66 = $eh$lpad$body$i64$indexZ2D;
      }
     }
     __THREW__ = 0;
     invoke_vi(653,($163|0));
     $191 = __THREW__; __THREW__ = 0;
     $192 = $191&1;
     if ($192) {
      $193 = ___cxa_find_matching_catch_3(0|0)|0;
      $194 = tempRet0;
      ___clang_call_terminate($193);
      // unreachable;
     } else {
      ___resumeException($$04$i66|0);
      // unreachable;
     }
    }
   }
   $128 = (___cxa_allocate_exception(36)|0);
   __THREW__ = 0;
   invoke_vii(635,($8|0),($22|0));
   $129 = __THREW__; __THREW__ = 0;
   $130 = $129&1;
   if ($130) {
    $157 = ___cxa_find_matching_catch_2()|0;
    $158 = tempRet0;
    $$029113 = $157;$$039112 = $158;
   } else {
    $131 = HEAP32[$20>>2]|0;
    __THREW__ = 0;
    invoke_vii(635,($2|0),($8|0));
    $132 = __THREW__; __THREW__ = 0;
    $133 = $132&1;
    L109: do {
     if ($133) {
      $$037 = 1;
      label = 63;
     } else {
      HEAP32[$128>>2] = (4652);
      $134 = ((($128)) + 4|0);
      __THREW__ = 0;
      invoke_vii(635,($134|0),($2|0));
      $135 = __THREW__; __THREW__ = 0;
      $136 = $135&1;
      do {
       if ($136) {
        $141 = ___cxa_find_matching_catch_2()|0;
        $142 = tempRet0;
        $$0$i93 = $142;$$03$i92 = $141;
       } else {
        $137 = ((($128)) + 16|0);
        HEAP32[$137>>2] = $131;
        $138 = ((($128)) + 20|0);
        ;HEAP32[$138>>2]=0|0;HEAP32[$138+4>>2]=0|0;HEAP32[$138+8>>2]=0|0;
        __THREW__ = 0;
        invoke_viii(646,($138|0),(44984|0),0);
        $139 = __THREW__; __THREW__ = 0;
        $140 = $139&1;
        if ($140) {
         $143 = ___cxa_find_matching_catch_2()|0;
         $144 = tempRet0;
         __THREW__ = 0;
         invoke_vi(637,($134|0));
         $145 = __THREW__; __THREW__ = 0;
         $146 = $145&1;
         if (!($146)) {
          $$0$i93 = $144;$$03$i92 = $143;
          break;
         }
         $147 = ___cxa_find_matching_catch_3(0|0)|0;
         $148 = tempRet0;
         ___clang_call_terminate($147);
         // unreachable;
        } else {
         $149 = ((($128)) + 32|0);
         HEAP32[$149>>2] = 0;
         __THREW__ = 0;
         invoke_vi(637,($2|0));
         $150 = __THREW__; __THREW__ = 0;
         $151 = $150&1;
         if ($151) {
          $$037 = 1;
          label = 63;
          break L109;
         }
         HEAP32[$128>>2] = (4460);
         __THREW__ = 0;
         invoke_viii(644,($128|0),(320|0),(7|0));
         $156 = __THREW__; __THREW__ = 0;
         $$037 = 0;
         label = 63;
         break L109;
        }
       }
      } while(0);
      __THREW__ = 0;
      invoke_vi(637,($2|0));
      $152 = __THREW__; __THREW__ = 0;
      $153 = $152&1;
      if ($153) {
       $154 = ___cxa_find_matching_catch_3(0|0)|0;
       $155 = tempRet0;
       ___clang_call_terminate($154);
       // unreachable;
      } else {
       $$037$lpad$bodyZZ2D = 1;$eh$lpad$body62$index7Z2D = $$0$i93;$eh$lpad$body62$indexZ2D = $$03$i92;
      }
     }
    } while(0);
    if ((label|0) == 63) {
     $159 = ___cxa_find_matching_catch_2()|0;
     $160 = tempRet0;
     $$037$lpad$bodyZZ2D = $$037;$eh$lpad$body62$index7Z2D = $160;$eh$lpad$body62$indexZ2D = $159;
    }
    __THREW__ = 0;
    invoke_vi(637,($8|0));
    $161 = __THREW__; __THREW__ = 0;
    $162 = $161&1;
    if ($162) {
     $512 = ___cxa_find_matching_catch_3(0|0)|0;
     $513 = tempRet0;
     ___clang_call_terminate($512);
     // unreachable;
    }
    if ($$037$lpad$bodyZZ2D) {
     $$029113 = $eh$lpad$body62$indexZ2D;$$039112 = $eh$lpad$body62$index7Z2D;
    } else {
     $$9 = $eh$lpad$body62$indexZ2D;$$948 = $eh$lpad$body62$index7Z2D;
     ___resumeException($$9|0);
     // unreachable;
    }
   }
   ___cxa_free_exception(($128|0));
   $$9 = $$029113;$$948 = $$039112;
   ___resumeException($$9|0);
   // unreachable;
  }
 } while(0);
 if ($25) {
  $232 = ((($0)) + 8|0);
  $233 = HEAP32[$232>>2]|0;
  $236 = $233;
 } else {
  $234 = $24&255;
  $236 = $234;
 }
 $235 = ($21>>>0)<($236>>>0);
 if ($235) {
  if ($25) {
   $237 = HEAP32[$22>>2]|0;
   $239 = $237;
  } else {
   $239 = $22;
  }
  $238 = (($239) + ($21)|0);
  $240 = HEAP8[$238>>0]|0;
  $241 = ($240<<24>>24)==(37);
  if ($241) {
   $242 = (($21) + 1)|0;
   HEAP32[$20>>2] = $242;
   if ($25) {
    $243 = ((($0)) + 8|0);
    $244 = HEAP32[$243>>2]|0;
    $247 = $244;
   } else {
    $245 = $24&255;
    $247 = $245;
   }
   $246 = ($242>>>0)<($247>>>0);
   do {
    if ($246) {
     if ($25) {
      $248 = HEAP32[$22>>2]|0;
      $250 = $248;
     } else {
      $250 = $22;
     }
     $249 = (($250) + ($242)|0);
     $251 = HEAP8[$249>>0]|0;
     $252 = ($251<<24>>24)==(48);
     if (!($252)) {
      if ($25) {
       $255 = HEAP32[$22>>2]|0;
       $257 = $255;
      } else {
       $257 = $22;
      }
      $256 = (($257) + ($242)|0);
      $258 = HEAP8[$256>>0]|0;
      $259 = ($258<<24>>24)==(49);
      if (!($259)) {
       break;
      }
     }
     $253 = ((($0)) + 8|0);
     $254 = $24&255;
     $$034 = 0;$299 = $242;
     while(1) {
      $295 = $$034 << 1;
      if ($25) {
       $296 = HEAP32[$22>>2]|0;
       $298 = $296;
      } else {
       $298 = $22;
      }
      $297 = (($298) + ($299)|0);
      $300 = HEAP8[$297>>0]|0;
      $301 = $300 << 24 >> 24;
      $302 = (($295) + -48)|0;
      $303 = (($302) + ($301))|0;
      $304 = (($299) + 1)|0;
      HEAP32[$20>>2] = $304;
      if ($25) {
       $305 = HEAP32[$253>>2]|0;
       $307 = $305;
      } else {
       $307 = $254;
      }
      $306 = ($304>>>0)<($307>>>0);
      if (!($306)) {
       break;
      }
      if ($25) {
       $308 = HEAP32[$22>>2]|0;
       $310 = $308;
      } else {
       $310 = $22;
      }
      $309 = (($310) + ($304)|0);
      $311 = HEAP8[$309>>0]|0;
      $312 = ($311<<24>>24)==(48);
      if ($312) {
       $$034 = $303;$299 = $304;
       continue;
      }
      if ($25) {
       $313 = HEAP32[$22>>2]|0;
       $315 = $313;
      } else {
       $315 = $22;
      }
      $314 = (($315) + ($304)|0);
      $316 = HEAP8[$314>>0]|0;
      $317 = ($316<<24>>24)==(49);
      if ($317) {
       $$034 = $303;$299 = $304;
      } else {
       break;
      }
     }
     $318 = (+($303|0));
     HEAPF64[$4>>3] = $318;
     $511 = +HEAPF64[$4>>3];
     STACKTOP = sp;return (+$511);
    }
   } while(0);
   $260 = (___cxa_allocate_exception(36)|0);
   __THREW__ = 0;
   invoke_vii(635,($13|0),($22|0));
   $261 = __THREW__; __THREW__ = 0;
   $262 = $261&1;
   if ($262) {
    $289 = ___cxa_find_matching_catch_2()|0;
    $290 = tempRet0;
    $$130116 = $289;$$140115 = $290;
   } else {
    $263 = HEAP32[$20>>2]|0;
    __THREW__ = 0;
    invoke_vii(635,($1|0),($13|0));
    $264 = __THREW__; __THREW__ = 0;
    $265 = $264&1;
    L181: do {
     if ($265) {
      $$035 = 1;
      label = 118;
     } else {
      HEAP32[$260>>2] = (4652);
      $266 = ((($260)) + 4|0);
      __THREW__ = 0;
      invoke_vii(635,($266|0),($1|0));
      $267 = __THREW__; __THREW__ = 0;
      $268 = $267&1;
      do {
       if ($268) {
        $273 = ___cxa_find_matching_catch_2()|0;
        $274 = tempRet0;
        $$0$i83 = $274;$$03$i = $273;
       } else {
        $269 = ((($260)) + 16|0);
        HEAP32[$269>>2] = $263;
        $270 = ((($260)) + 20|0);
        ;HEAP32[$270>>2]=0|0;HEAP32[$270+4>>2]=0|0;HEAP32[$270+8>>2]=0|0;
        __THREW__ = 0;
        invoke_viii(646,($270|0),(44984|0),0);
        $271 = __THREW__; __THREW__ = 0;
        $272 = $271&1;
        if ($272) {
         $275 = ___cxa_find_matching_catch_2()|0;
         $276 = tempRet0;
         __THREW__ = 0;
         invoke_vi(637,($266|0));
         $277 = __THREW__; __THREW__ = 0;
         $278 = $277&1;
         if (!($278)) {
          $$0$i83 = $276;$$03$i = $275;
          break;
         }
         $279 = ___cxa_find_matching_catch_3(0|0)|0;
         $280 = tempRet0;
         ___clang_call_terminate($279);
         // unreachable;
        } else {
         $281 = ((($260)) + 32|0);
         HEAP32[$281>>2] = 0;
         __THREW__ = 0;
         invoke_vi(637,($1|0));
         $282 = __THREW__; __THREW__ = 0;
         $283 = $282&1;
         if ($283) {
          $$035 = 1;
          label = 118;
          break L181;
         }
         HEAP32[$260>>2] = (4484);
         __THREW__ = 0;
         invoke_viii(644,($260|0),(336|0),(7|0));
         $288 = __THREW__; __THREW__ = 0;
         $$035 = 0;
         label = 118;
         break L181;
        }
       }
      } while(0);
      __THREW__ = 0;
      invoke_vi(637,($1|0));
      $284 = __THREW__; __THREW__ = 0;
      $285 = $284&1;
      if ($285) {
       $286 = ___cxa_find_matching_catch_3(0|0)|0;
       $287 = tempRet0;
       ___clang_call_terminate($286);
       // unreachable;
      } else {
       $$035$lpad$bodyZZ2D = 1;$eh$lpad$body79$index17Z2D = $$0$i83;$eh$lpad$body79$indexZ2D = $$03$i;
      }
     }
    } while(0);
    if ((label|0) == 118) {
     $291 = ___cxa_find_matching_catch_2()|0;
     $292 = tempRet0;
     $$035$lpad$bodyZZ2D = $$035;$eh$lpad$body79$index17Z2D = $292;$eh$lpad$body79$indexZ2D = $291;
    }
    __THREW__ = 0;
    invoke_vi(637,($13|0));
    $293 = __THREW__; __THREW__ = 0;
    $294 = $293&1;
    if ($294) {
     $512 = ___cxa_find_matching_catch_3(0|0)|0;
     $513 = tempRet0;
     ___clang_call_terminate($512);
     // unreachable;
    }
    if ($$035$lpad$bodyZZ2D) {
     $$130116 = $eh$lpad$body79$indexZ2D;$$140115 = $eh$lpad$body79$index17Z2D;
    } else {
     $$9 = $eh$lpad$body79$indexZ2D;$$948 = $eh$lpad$body79$index17Z2D;
     ___resumeException($$9|0);
     // unreachable;
    }
   }
   ___cxa_free_exception(($260|0));
   $$9 = $$130116;$$948 = $$140115;
   ___resumeException($$9|0);
   // unreachable;
  }
 }
 if ($25) {
  $319 = ((($0)) + 8|0);
  $320 = HEAP32[$319>>2]|0;
  $323 = $320;
 } else {
  $321 = $24&255;
  $323 = $321;
 }
 $322 = ($21>>>0)<($323>>>0);
 if ($322) {
  if ($25) {
   $324 = HEAP32[$22>>2]|0;
   $326 = $324;
  } else {
   $326 = $22;
  }
  $325 = (($326) + ($21)|0);
  $327 = HEAP8[$325>>0]|0;
  $328 = ($327<<24>>24)==(42);
  if ($328) {
   $329 = (($21) + 1)|0;
   HEAP32[$20>>2] = $329;
   $330 = HEAP32[9090]|0;
   $331 = ($330|0)==(0|0);
   if ($331) {
    ___assert_fail((27040|0),(27084|0),36,(27075|0));
    // unreachable;
   }
   $332 = ((($330)) + 131072|0);
   $333 = HEAP32[$332>>2]|0;
   $334 = (+($333|0));
   HEAPF64[$4>>3] = $334;
   $511 = +HEAPF64[$4>>3];
   STACKTOP = sp;return (+$511);
  }
 }
 if ($25) {
  $335 = ((($0)) + 8|0);
  $336 = HEAP32[$335>>2]|0;
  $339 = $336;
 } else {
  $337 = $24&255;
  $339 = $337;
 }
 $338 = ($21>>>0)<($339>>>0);
 if ($338) {
  if ($25) {
   $340 = HEAP32[$22>>2]|0;
   $342 = $340;
  } else {
   $342 = $22;
  }
  $341 = (($342) + ($21)|0);
  $343 = HEAP8[$341>>0]|0;
  $344 = ($343<<24>>24)==(39);
  if ($344) {
   if ($25) {
    $345 = ((($0)) + 8|0);
    $346 = HEAP32[$345>>2]|0;
    $349 = $346;
   } else {
    $347 = $24&255;
    $349 = $347;
   }
   $348 = (($349) - ($21))|0;
   $350 = ($348>>>0)<(3);
   if (!($350)) {
    $351 = (($21) + 2)|0;
    if ($25) {
     $352 = HEAP32[$22>>2]|0;
     $354 = $352;
    } else {
     $354 = $22;
    }
    $353 = (($354) + ($351)|0);
    $355 = HEAP8[$353>>0]|0;
    $356 = ($355<<24>>24)==(39);
    if ($356) {
     $370 = (($21) + 1)|0;
     if ($25) {
      $371 = HEAP32[$22>>2]|0;
      $373 = $371;
     } else {
      $373 = $22;
     }
     $372 = (($373) + ($370)|0);
     $374 = HEAP8[$372>>0]|0;
     $375 = (+($374<<24>>24));
     HEAPF64[$4>>3] = $375;
     $376 = (($21) + 3)|0;
     HEAP32[$20>>2] = $376;
     $511 = +HEAPF64[$4>>3];
     STACKTOP = sp;return (+$511);
    }
   }
   $357 = (___cxa_allocate_exception(36)|0);
   __THREW__ = 0;
   invoke_vii(635,($14|0),($22|0));
   $358 = __THREW__; __THREW__ = 0;
   $359 = $358&1;
   if ($359) {
    $364 = ___cxa_find_matching_catch_2()|0;
    $365 = tempRet0;
    $$231119 = $364;$$241118 = $365;
   } else {
    $360 = HEAP32[$20>>2]|0;
    __THREW__ = 0;
    invoke_viii(676,($357|0),($14|0),($360|0));
    $361 = __THREW__; __THREW__ = 0;
    $362 = $361&1;
    if ($362) {
     $$032 = 1;
    } else {
     __THREW__ = 0;
     invoke_viii(644,($357|0),(352|0),(7|0));
     $363 = __THREW__; __THREW__ = 0;
     $$032 = 0;
    }
    $366 = ___cxa_find_matching_catch_2()|0;
    $367 = tempRet0;
    __THREW__ = 0;
    invoke_vi(637,($14|0));
    $368 = __THREW__; __THREW__ = 0;
    $369 = $368&1;
    if ($369) {
     $512 = ___cxa_find_matching_catch_3(0|0)|0;
     $513 = tempRet0;
     ___clang_call_terminate($512);
     // unreachable;
    }
    if ($$032) {
     $$231119 = $366;$$241118 = $367;
    } else {
     $$9 = $366;$$948 = $367;
     ___resumeException($$9|0);
     // unreachable;
    }
   }
   ___cxa_free_exception(($357|0));
   $$9 = $$231119;$$948 = $$241118;
   ___resumeException($$9|0);
   // unreachable;
  }
 }
 if ($25) {
  $377 = ((($0)) + 8|0);
  $378 = HEAP32[$377>>2]|0;
  $381 = $378;
 } else {
  $379 = $24&255;
  $381 = $379;
 }
 $380 = ($21>>>0)<($381>>>0);
 do {
  if ($380) {
   if ($25) {
    $382 = HEAP32[$22>>2]|0;
    $384 = $382;
   } else {
    $384 = $22;
   }
   $383 = (($384) + ($21)|0);
   $385 = HEAP8[$383>>0]|0;
   $386 = $385 << 24 >> 24;
   $387 = (_isalpha($386)|0);
   $388 = ($387|0)==(0);
   if ($388) {
    if ($25) {
     $389 = HEAP32[$22>>2]|0;
     $391 = $389;
    } else {
     $391 = $22;
    }
    $390 = (($391) + ($21)|0);
    $392 = HEAP8[$390>>0]|0;
    $393 = ($392<<24>>24)==(95);
    if (!($393)) {
     break;
    }
   }
   __ZN10LineParser13GetSymbolNameEv($15,$0);
   $394 = HEAP32[$0>>2]|0;
   $395 = ((($394)) + 18440|0);
   $396 = HEAP32[$395>>2]|0;
   $397 = ($396|0)>(-1);
   do {
    if ($397) {
     $398 = ((($15)) + 11|0);
     $399 = ((($15)) + 4|0);
     $400 = ((($17)) + 11|0);
     $401 = ((($17)) + 4|0);
     $$026139 = $396;$$027$off0138 = 0;$403 = $394;
     while(1) {
      __THREW__ = 0;
      invoke_viii(677,($17|0),($403|0),($$026139|0));
      $404 = __THREW__; __THREW__ = 0;
      $405 = $404&1;
      if ($405) {
       label = 201;
       break;
      }
      ;HEAP32[$16>>2]=0|0;HEAP32[$16+4>>2]=0|0;HEAP32[$16+8>>2]=0|0;
      $406 = HEAP8[$398>>0]|0;
      $407 = ($406<<24>>24)<(0);
      $408 = HEAP32[$399>>2]|0;
      $409 = $406&255;
      $410 = $407 ? $408 : $409;
      $411 = HEAP8[$400>>0]|0;
      $412 = ($411<<24>>24)<(0);
      $413 = HEAP32[$401>>2]|0;
      $414 = $411&255;
      $415 = $412 ? $413 : $414;
      $416 = HEAP32[$15>>2]|0;
      $417 = $407 ? $416 : $15;
      $418 = (($415) + ($410))|0;
      __THREW__ = 0;
      invoke_viiii(678,($16|0),($417|0),($410|0),($418|0));
      $419 = __THREW__; __THREW__ = 0;
      $420 = $419&1;
      if ($420) {
       label = 190;
       break;
      }
      $421 = HEAP8[$400>>0]|0;
      $422 = ($421<<24>>24)<(0);
      $423 = HEAP32[$17>>2]|0;
      $424 = $422 ? $423 : $17;
      __THREW__ = 0;
      (invoke_iiii(679,($16|0),($424|0),($415|0))|0);
      $425 = __THREW__; __THREW__ = 0;
      $426 = $425&1;
      if ($426) {
       label = 190;
       break;
      }
      __THREW__ = 0;
      invoke_vi(637,($17|0));
      $433 = __THREW__; __THREW__ = 0;
      $434 = $433&1;
      if ($434) {
       label = 201;
       break;
      }
      $435 = HEAP32[9091]|0;
      $436 = ($435|0)==(0|0);
      if ($436) {
       label = 194;
       break;
      }
      __THREW__ = 0;
      $438 = (invoke_iii(681,($435|0),($16|0))|0);
      $439 = __THREW__; __THREW__ = 0;
      $440 = $439&1;
      if ($440) {
       label = 204;
       break;
      }
      if ($438) {
       $441 = HEAP32[9091]|0;
       $442 = ($441|0)==(0|0);
       if ($442) {
        label = 198;
        break;
       }
       __THREW__ = 0;
       $444 = (+invoke_dii(682,($441|0),($16|0)));
       $445 = __THREW__; __THREW__ = 0;
       $446 = $445&1;
       if ($446) {
        label = 204;
        break;
       }
       HEAPF64[$4>>3] = $444;
       $$025 = 4;$$128$off0 = 1;
      } else {
       $$025 = 0;$$128$off0 = $$027$off0138;
      }
      __THREW__ = 0;
      invoke_vi(637,($16|0));
      $457 = __THREW__; __THREW__ = 0;
      $458 = $457&1;
      if ($458) {
       label = 209;
       break;
      }
      $cond = ($$025|0)==(0);
      $459 = ($$026139|0)>(0);
      $or$cond = $cond & $459;
      if (!($or$cond)) {
       label = 211;
       break;
      }
      $402 = (($$026139) + -1)|0;
      $$pre = HEAP32[$0>>2]|0;
      $$026139 = $402;$$027$off0138 = $$128$off0;$403 = $$pre;
     }
     if ((label|0) == 190) {
      $427 = ___cxa_find_matching_catch_2()|0;
      $428 = tempRet0;
      __THREW__ = 0;
      invoke_vi(637,($16|0));
      $429 = __THREW__; __THREW__ = 0;
      $430 = $429&1;
      if ($430) {
       $431 = ___cxa_find_matching_catch_3(0|0)|0;
       $432 = tempRet0;
       ___clang_call_terminate($431);
       // unreachable;
      }
      __THREW__ = 0;
      invoke_vi(637,($17|0));
      $449 = __THREW__; __THREW__ = 0;
      $450 = $449&1;
      if ($450) {
       $512 = ___cxa_find_matching_catch_3(0|0)|0;
       $513 = tempRet0;
       ___clang_call_terminate($512);
       // unreachable;
      } else {
       $$3 = $427;$$342 = $428;
       label = 203;
      }
     }
     else if ((label|0) == 194) {
      __THREW__ = 0;
      invoke_viiii(680,(27040|0),(27806|0),38,(27075|0));
      $437 = __THREW__; __THREW__ = 0;
      label = 205;
     }
     else if ((label|0) == 198) {
      __THREW__ = 0;
      invoke_viiii(680,(27040|0),(27806|0),38,(27075|0));
      $443 = __THREW__; __THREW__ = 0;
      label = 205;
     }
     else if ((label|0) == 201) {
      $447 = ___cxa_find_matching_catch_2()|0;
      $448 = tempRet0;
      $$3 = $447;$$342 = $448;
      label = 203;
     }
     else if ((label|0) == 204) {
      $451 = ___cxa_find_matching_catch_2()|0;
      $452 = tempRet0;
      $lpad$phi$index = $451;$lpad$phi$index22 = $452;
      label = 206;
     }
     else if ((label|0) == 209) {
      $460 = ___cxa_find_matching_catch_2()|0;
      $461 = tempRet0;
      $$4 = $460;$$443 = $461;
     }
     else if ((label|0) == 211) {
      if (!($$128$off0)) {
       label = 212;
       break;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($15);
      $511 = +HEAPF64[$4>>3];
      STACKTOP = sp;return (+$511);
     }
     if ((label|0) == 203) {
      $$7 = $$3;$$746 = $$342;
      break;
     }
     else if ((label|0) == 205) {
      $453 = ___cxa_find_matching_catch_2()|0;
      $454 = tempRet0;
      $lpad$phi$index = $453;$lpad$phi$index22 = $454;
      label = 206;
     }
     if ((label|0) == 206) {
      __THREW__ = 0;
      invoke_vi(637,($16|0));
      $455 = __THREW__; __THREW__ = 0;
      $456 = $455&1;
      if ($456) {
       $512 = ___cxa_find_matching_catch_3(0|0)|0;
       $513 = tempRet0;
       ___clang_call_terminate($512);
       // unreachable;
      } else {
       $$4 = $lpad$phi$index;$$443 = $lpad$phi$index22;
      }
     }
     $$7 = $$4;$$746 = $$443;
    } else {
     label = 212;
    }
   } while(0);
   L315: do {
    if ((label|0) == 212) {
     $462 = (___cxa_allocate_exception(36)|0);
     __THREW__ = 0;
     invoke_vii(635,($18|0),($22|0));
     $463 = __THREW__; __THREW__ = 0;
     $464 = $463&1;
     do {
      if ($464) {
       $490 = ___cxa_find_matching_catch_2()|0;
       $491 = tempRet0;
       $$6122 = $490;$$645121 = $491;
      } else {
       __THREW__ = 0;
       invoke_vii(635,($3|0),($18|0));
       $465 = __THREW__; __THREW__ = 0;
       $466 = $465&1;
       L320: do {
        if ($466) {
         $$023 = 1;
         label = 224;
        } else {
         HEAP32[$462>>2] = (4652);
         $467 = ((($462)) + 4|0);
         __THREW__ = 0;
         invoke_vii(635,($467|0),($3|0));
         $468 = __THREW__; __THREW__ = 0;
         $469 = $468&1;
         do {
          if ($469) {
           $474 = ___cxa_find_matching_catch_2()|0;
           $475 = tempRet0;
           $$0$i108 = $475;$$03$i107 = $474;
          } else {
           $470 = ((($462)) + 16|0);
           HEAP32[$470>>2] = $21;
           $471 = ((($462)) + 20|0);
           ;HEAP32[$471>>2]=0|0;HEAP32[$471+4>>2]=0|0;HEAP32[$471+8>>2]=0|0;
           __THREW__ = 0;
           invoke_viii(646,($471|0),(44984|0),0);
           $472 = __THREW__; __THREW__ = 0;
           $473 = $472&1;
           if ($473) {
            $476 = ___cxa_find_matching_catch_2()|0;
            $477 = tempRet0;
            __THREW__ = 0;
            invoke_vi(637,($467|0));
            $478 = __THREW__; __THREW__ = 0;
            $479 = $478&1;
            if (!($479)) {
             $$0$i108 = $477;$$03$i107 = $476;
             break;
            }
            $480 = ___cxa_find_matching_catch_3(0|0)|0;
            $481 = tempRet0;
            ___clang_call_terminate($480);
            // unreachable;
           } else {
            $482 = ((($462)) + 32|0);
            HEAP32[$482>>2] = 0;
            __THREW__ = 0;
            invoke_vi(637,($3|0));
            $483 = __THREW__; __THREW__ = 0;
            $484 = $483&1;
            if ($484) {
             $$023 = 1;
             label = 224;
             break L320;
            }
            HEAP32[$462>>2] = (4508);
            __THREW__ = 0;
            invoke_viii(644,($462|0),(368|0),(7|0));
            $489 = __THREW__; __THREW__ = 0;
            $$023 = 0;
            label = 224;
            break L320;
           }
          }
         } while(0);
         __THREW__ = 0;
         invoke_vi(637,($3|0));
         $485 = __THREW__; __THREW__ = 0;
         $486 = $485&1;
         if (!($486)) {
          $$023$lpad$bodyZZ2D = 1;$eh$lpad$body$index27Z2D = $$0$i108;$eh$lpad$body$indexZ2D = $$03$i107;
          break;
         }
         $487 = ___cxa_find_matching_catch_3(0|0)|0;
         $488 = tempRet0;
         ___clang_call_terminate($487);
         // unreachable;
        }
       } while(0);
       if ((label|0) == 224) {
        $492 = ___cxa_find_matching_catch_2()|0;
        $493 = tempRet0;
        $$023$lpad$bodyZZ2D = $$023;$eh$lpad$body$index27Z2D = $493;$eh$lpad$body$indexZ2D = $492;
       }
       __THREW__ = 0;
       invoke_vi(637,($18|0));
       $494 = __THREW__; __THREW__ = 0;
       $495 = $494&1;
       if ($495) {
        $512 = ___cxa_find_matching_catch_3(0|0)|0;
        $513 = tempRet0;
        ___clang_call_terminate($512);
        // unreachable;
       } else {
        if ($$023$lpad$bodyZZ2D) {
         $$6122 = $eh$lpad$body$indexZ2D;$$645121 = $eh$lpad$body$index27Z2D;
         break;
        } else {
         $$7 = $eh$lpad$body$indexZ2D;$$746 = $eh$lpad$body$index27Z2D;
         break L315;
        }
       }
      }
     } while(0);
     ___cxa_free_exception(($462|0));
     $$7 = $$6122;$$746 = $$645121;
    }
   } while(0);
   __THREW__ = 0;
   invoke_vi(637,($15|0));
   $496 = __THREW__; __THREW__ = 0;
   $497 = $496&1;
   if ($497) {
    $512 = ___cxa_find_matching_catch_3(0|0)|0;
    $513 = tempRet0;
    ___clang_call_terminate($512);
    // unreachable;
   }
   $$9 = $$7;$$948 = $$746;
   ___resumeException($$9|0);
   // unreachable;
  }
 } while(0);
 $498 = (___cxa_allocate_exception(36)|0);
 __THREW__ = 0;
 invoke_vii(635,($19|0),($22|0));
 $499 = __THREW__; __THREW__ = 0;
 $500 = $499&1;
 if ($500) {
  $505 = ___cxa_find_matching_catch_2()|0;
  $506 = tempRet0;
  $$8125 = $505;$$847124 = $506;
 } else {
  $501 = HEAP32[$20>>2]|0;
  __THREW__ = 0;
  invoke_viii(676,($498|0),($19|0),($501|0));
  $502 = __THREW__; __THREW__ = 0;
  $503 = $502&1;
  if ($503) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($498|0),(352|0),(7|0));
   $504 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $507 = ___cxa_find_matching_catch_2()|0;
  $508 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($19|0));
  $509 = __THREW__; __THREW__ = 0;
  $510 = $509&1;
  if ($510) {
   $512 = ___cxa_find_matching_catch_3(0|0)|0;
   $513 = tempRet0;
   ___clang_call_terminate($512);
   // unreachable;
  }
  if ($$0) {
   $$8125 = $507;$$847124 = $508;
  } else {
   $$9 = $507;$$948 = $508;
   ___resumeException($$9|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($498|0));
 $$9 = $$8125;$$948 = $$847124;
 ___resumeException($$9|0);
 // unreachable;
 return +(0.0);
}
function __ZNSt3__219basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $eh$lpad$body$index7Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = ((4408));
 $1 = ((($0)) + 60|0);
 HEAP32[$1>>2] = ((4428));
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = (3276);
 $3 = ((($0)) + 40|0);
 __THREW__ = 0;
 invoke_vi(637,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 do {
  if ($5) {
   $8 = ___cxa_find_matching_catch_2()|0;
   $9 = tempRet0;
   __THREW__ = 0;
   invoke_vi(302,($2|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    $12 = ___cxa_find_matching_catch_3(0|0)|0;
    $13 = tempRet0;
    ___clang_call_terminate($12);
    // unreachable;
   } else {
    $eh$lpad$body$i$index2Z2D = $9;$eh$lpad$body$i$indexZ2D = $8;
    label = 7;
   }
  } else {
   __THREW__ = 0;
   invoke_vi(302,($2|0));
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if ($7) {
    $16 = ___cxa_find_matching_catch_2()|0;
    $17 = tempRet0;
    $eh$lpad$body$i$index2Z2D = $17;$eh$lpad$body$i$indexZ2D = $16;
    label = 7;
    break;
   }
   __THREW__ = 0;
   invoke_vii(671,($0|0),((4440)|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $22 = ___cxa_find_matching_catch_2()|0;
    $23 = tempRet0;
    $eh$lpad$body$index7Z2D = $23;$eh$lpad$body$indexZ2D = $22;
    break;
   } else {
    __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($1);
    return;
   }
  }
 } while(0);
 if ((label|0) == 7) {
  __THREW__ = 0;
  invoke_vii(671,($0|0),((4440)|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if ($19) {
   $20 = ___cxa_find_matching_catch_3(0|0)|0;
   $21 = tempRet0;
   ___clang_call_terminate($20);
   // unreachable;
  } else {
   $eh$lpad$body$index7Z2D = $eh$lpad$body$i$index2Z2D;$eh$lpad$body$indexZ2D = $eh$lpad$body$i$indexZ2D;
  }
 }
 __THREW__ = 0;
 invoke_vi(653,($1|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $26 = ___cxa_find_matching_catch_3(0|0)|0;
  $27 = tempRet0;
  ___clang_call_terminate($26);
  // unreachable;
 } else {
  ___resumeException($eh$lpad$body$indexZ2D|0);
  // unreachable;
 }
}
function __ZN41AsmException_SyntaxError_InvalidCharacterC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$03$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3,$1);
 HEAP32[$0>>2] = (4652);
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($4|0),($3|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $11 = ___cxa_find_matching_catch_2()|0;
  $12 = tempRet0;
  $$0$i = $12;$$03$i = $11;
 } else {
  $7 = ((($0)) + 16|0);
  HEAP32[$7>>2] = $2;
  $8 = ((($0)) + 20|0);
  ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
  __THREW__ = 0;
  invoke_viii(646,($8|0),(44984|0),0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   $19 = ((($0)) + 32|0);
   HEAP32[$19>>2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
   HEAP32[$0>>2] = (4532);
   STACKTOP = sp;return;
  }
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($4|0));
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if ($16) {
   $17 = ___cxa_find_matching_catch_3(0|0)|0;
   $18 = tempRet0;
   ___clang_call_terminate($17);
   // unreachable;
  } else {
   $$0$i = $14;$$03$i = $13;
  }
 }
 __THREW__ = 0;
 invoke_vi(637,($3|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch_3(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  ___resumeException($$03$i|0);
  // unreachable;
 }
}
function __ZN41AsmException_SyntaxError_SymbolNotDefinedD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK41AsmException_SyntaxError_SymbolNotDefined7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21375|0);
}
function __ZN41AsmException_SyntaxError_InvalidCharacterD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK41AsmException_SyntaxError_InvalidCharacter7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21439|0);
}
function __ZN31AsmException_SyntaxError_BadBinD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK31AsmException_SyntaxError_BadBin7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21489|0);
}
function __ZN31AsmException_SyntaxError_BadHexD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK31AsmException_SyntaxError_BadHex7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21546|0);
}
function __ZNSt3__219basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi(106,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  __ZdlPv($0);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZTv0_n12_NSt3__219basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__219basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
 return;
}
function __ZTv0_n12_NSt3__219basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __THREW__ = 0;
 invoke_vi(106,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  __ZdlPv($4);
  ___resumeException($7|0);
  // unreachable;
 } else {
  __ZdlPv($4);
  return;
 }
}
function __ZN10LineParser18EvaluateExpressionEb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$i = 0, $$0$lpad$bodyZZ2D = 0, $$0167 = 0, $$0169$be = 0, $$0169$ph350 = 0, $$0169345 = 0, $$0171$ph$be = 0, $$0171$ph349 = 0, $$0175 = 0, $$0180341 = 0, $$0184 = 0, $$0192330 = 0, $$0192330$us = 0, $$0193 = 0, $$0195316 = 0, $$0195316$us = 0, $$0197257 = 0, $$0202256 = 0, $$0214324 = 0;
 var $$0218 = 0, $$0220 = 0, $$03$i = 0, $$10212286 = 0, $$10287 = 0, $$11 = 0, $$11213 = 0, $$1170$ph = 0, $$1170258 = 0, $$2179$cmp = 0, $$2199261 = 0, $$2204260 = 0, $$2217$cmp = 0, $$4201267 = 0, $$4206266 = 0, $$5207270 = 0, $$5271 = 0, $$6208275 = 0, $$6276 = 0, $$9211283 = 0;
 var $$9284 = 0, $$elt = 0, $$elt222 = 0, $$elt231 = 0, $$elt233 = 0, $$elt235 = 0, $$elt237 = 0, $$elt243 = 0, $$elt245 = 0, $$pr = 0, $$pr$pre = 0, $$pre = 0, $$pre398 = 0, $$unpack = 0, $$unpack223 = 0, $$unpack232 = 0, $$unpack234 = 0, $$unpack236 = 0, $$unpack238 = 0, $$unpack244 = 0;
 var $$unpack246 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0.0, $353 = 0, $354 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $2 = sp + 84|0;
 $3 = sp + 72|0;
 $4 = sp + 60|0;
 $5 = sp + 48|0;
 $6 = sp + 36|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 $10 = ((($0)) + 1560|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($0)) + 1564|0);
 HEAP32[$11>>2] = 0;
 $12 = (__ZN10LineParser32AdvanceAndCheckEndOfSubStatementEv($0)|0);
 L1: do {
  if ($12) {
   $13 = ((($0)) + 4|0);
   $14 = ((($0)) + 16|0);
   $15 = ((($13)) + 11|0);
   $$0169$ph350 = 0;$$0171$ph349 = 0;
   L3: while(1) {
    $16 = ($$0171$ph349|0)==(0);
    $$0169345 = $$0169$ph350;
    L5: while(1) {
     L7: do {
      if ($16) {
       $$0180341 = 0;
       L8: while(1) {
        $17 = (3956 + ($$0180341<<4)|0);
        $18 = HEAP32[$17>>2]|0;
        $19 = (_strlen($18)|0);
        $20 = ($19|0)==(0);
        if ($20) {
         break;
        }
        $21 = HEAP32[$14>>2]|0;
        $22 = HEAP8[$15>>0]|0;
        $23 = ($22<<24>>24)<(0);
        L11: do {
         if ($23) {
          $$pre398 = HEAP32[$13>>2]|0;
          $$0192330$us = 0;
          while(1) {
           $24 = (($18) + ($$0192330$us)|0);
           $25 = HEAP8[$24>>0]|0;
           $26 = $25 << 24 >> 24;
           $27 = (($21) + ($$0192330$us))|0;
           $28 = (($$pre398) + ($27)|0);
           $29 = HEAP8[$28>>0]|0;
           $30 = $29 << 24 >> 24;
           $31 = (_toupper($30)|0);
           $32 = ($26|0)==($31|0);
           $33 = (($$0192330$us) + 1)|0;
           if (!($32)) {
            break L11;
           }
           $34 = ($33>>>0)<($19>>>0);
           if ($34) {
            $$0192330$us = $33;
           } else {
            label = 12;
            break L8;
           }
          }
         } else {
          $$0192330 = 0;
          while(1) {
           $37 = (($18) + ($$0192330)|0);
           $38 = HEAP8[$37>>0]|0;
           $39 = $38 << 24 >> 24;
           $40 = (($21) + ($$0192330))|0;
           $41 = (($13) + ($40)|0);
           $42 = HEAP8[$41>>0]|0;
           $43 = $42 << 24 >> 24;
           $44 = (_toupper($43)|0);
           $45 = ($39|0)==($44|0);
           $35 = (($$0192330) + 1)|0;
           if (!($45)) {
            break L11;
           }
           $36 = ($35>>>0)<($19>>>0);
           if ($36) {
            $$0192330 = $35;
           } else {
            label = 12;
            break L8;
           }
          }
         }
        } while(0);
        $60 = (($$0180341) + 1)|0;
        $61 = ($60>>>0)<(25);
        if ($61) {
         $$0180341 = $60;
        } else {
         label = 20;
         break L5;
        }
       }
       if ((label|0) == 12) {
        label = 0;
        $46 = (($21) + ($19))|0;
        HEAP32[$14>>2] = $46;
        $47 = ($19>>>0)>(1);
        if ($47) {
         $48 = (($19) + -1)|0;
         $49 = (($18) + ($48)|0);
         $50 = HEAP8[$49>>0]|0;
         $51 = ($50<<24>>24)==(40);
         if ($51) {
          $52 = (($46) + -1)|0;
          HEAP32[$14>>2] = $52;
          $53 = HEAP8[$15>>0]|0;
          $54 = ($53<<24>>24)<(0);
          if ($54) {
           $55 = HEAP32[$13>>2]|0;
           $57 = $55;
          } else {
           $57 = $13;
          }
          $56 = (($57) + ($52)|0);
          $58 = HEAP8[$56>>0]|0;
          $59 = ($58<<24>>24)==(40);
          if (!($59)) {
           label = 17;
           break L3;
          }
         }
        }
        $62 = ($$0180341|0)==(-1);
        if ($62) {
         label = 20;
         break L5;
        }
       }
       $101 = (3956 + ($$0180341<<4)|0);
       $$2179$cmp = ($$0180341>>>0)>(1);
       L30: do {
        if ($$2179$cmp) {
         $102 = HEAP32[$11>>2]|0;
         $103 = ($102|0)>(0);
         if ($103) {
          $104 = (((3956 + ($$0180341<<4)|0)) + 4|0);
          $105 = HEAP32[$104>>2]|0;
          $107 = $102;
          while(1) {
           $106 = (($107) + -1)|0;
           $108 = (((((($0)) + 1048|0) + ($106<<4)|0)) + 4|0);
           $109 = HEAP32[$108>>2]|0;
           $110 = ($105|0)<($109|0);
           if (!($110)) {
            $$1170$ph = $$0169345;$$pr = $107;
            label = 49;
            break L30;
           }
           HEAP32[$11>>2] = $106;
           $$elt243 = (((((($0)) + 1048|0) + ($106<<4)|0)) + 8|0);
           $$unpack244 = HEAP32[$$elt243>>2]|0;
           $$elt245 = (((((($0)) + 1048|0) + ($106<<4)|0)) + 12|0);
           $$unpack246 = HEAP32[$$elt245>>2]|0;
           $111 = ($$unpack244|0)!=(0);
           $112 = ($$unpack246|0)!=(0);
           $113 = $$unpack246 & 1;
           $114 = $113 | $$unpack244;
           $115 = ($114|0)!=(0);
           $116 = $112 & $115;
           $117 = $111 | $116;
           if (!($117)) {
            label = 43;
            break L3;
           }
           $118 = ($113|0)==(0);
           $119 = $$unpack246 >> 1;
           $120 = (($0) + ($119)|0);
           if ($118) {
            $124 = $$unpack244;
            $125 = $124;
           } else {
            $121 = HEAP32[$120>>2]|0;
            $122 = (($121) + ($$unpack244)|0);
            $123 = HEAP32[$122>>2]|0;
            $125 = $123;
           }
           FUNCTION_TABLE_vi[$125 & 1023]($120);
           $126 = HEAP32[$11>>2]|0;
           $127 = ($126|0)>(0);
           if ($127) {
            $107 = $126;
           } else {
            $$1170258 = $$0169345;$144 = $126;
            break;
           }
          }
         } else {
          $$1170258 = $$0169345;$144 = $102;
         }
        } else {
         $128 = (($$0169345) + 1)|0;
         $$pr$pre = HEAP32[$11>>2]|0;
         $$1170$ph = $128;$$pr = $$pr$pre;
         label = 49;
        }
       } while(0);
       if ((label|0) == 49) {
        label = 0;
        $129 = ($$pr|0)==(32);
        if ($129) {
         label = 50;
         break L3;
        } else {
         $$1170258 = $$1170$ph;$144 = $$pr;
        }
       }
       $143 = (($144) + 1)|0;
       HEAP32[$11>>2] = $143;
       $145 = (((($0)) + 1048|0) + ($144<<4)|0);
       ;HEAP32[$145>>2]=HEAP32[$101>>2]|0;HEAP32[$145+4>>2]=HEAP32[$101+4>>2]|0;HEAP32[$145+8>>2]=HEAP32[$101+8>>2]|0;HEAP32[$145+12>>2]=HEAP32[$101+12>>2]|0;
       $$0169$be = $$1170258;
      } else {
       $$0214324 = 0;
       L45: while(1) {
        $147 = (3492 + ($$0214324<<4)|0);
        $148 = HEAP32[$147>>2]|0;
        $149 = (_strlen($148)|0);
        $150 = ($149|0)==(0);
        if ($150) {
         break;
        }
        $151 = HEAP32[$14>>2]|0;
        $152 = HEAP8[$15>>0]|0;
        $153 = ($152<<24>>24)<(0);
        L48: do {
         if ($153) {
          $$pre = HEAP32[$13>>2]|0;
          $$0195316$us = 0;
          while(1) {
           $154 = (($148) + ($$0195316$us)|0);
           $155 = HEAP8[$154>>0]|0;
           $156 = $155 << 24 >> 24;
           $157 = (($151) + ($$0195316$us))|0;
           $158 = (($$pre) + ($157)|0);
           $159 = HEAP8[$158>>0]|0;
           $160 = $159 << 24 >> 24;
           $161 = (_toupper($160)|0);
           $162 = ($156|0)==($161|0);
           $163 = (($$0195316$us) + 1)|0;
           if (!($162)) {
            break L48;
           }
           $164 = ($163>>>0)<($149>>>0);
           if ($164) {
            $$0195316$us = $163;
           } else {
            label = 67;
            break L45;
           }
          }
         } else {
          $$0195316 = 0;
          while(1) {
           $167 = (($148) + ($$0195316)|0);
           $168 = HEAP8[$167>>0]|0;
           $169 = $168 << 24 >> 24;
           $170 = (($151) + ($$0195316))|0;
           $171 = (($13) + ($170)|0);
           $172 = HEAP8[$171>>0]|0;
           $173 = $172 << 24 >> 24;
           $174 = (_toupper($173)|0);
           $175 = ($169|0)==($174|0);
           $165 = (($$0195316) + 1)|0;
           if (!($175)) {
            break L48;
           }
           $166 = ($165>>>0)<($149>>>0);
           if ($166) {
            $$0195316 = $165;
           } else {
            label = 67;
            break L45;
           }
          }
         }
        } while(0);
        $176 = (($$0214324) + 1)|0;
        $177 = ($176>>>0)<(23);
        if ($177) {
         $$0214324 = $176;
        } else {
         label = 68;
         break L3;
        }
       }
       if ((label|0) == 67) {
        label = 0;
        $178 = (($151) + ($149))|0;
        HEAP32[$14>>2] = $178;
        $179 = ($$0214324|0)==(-1);
        if ($179) {
         label = 68;
         break L3;
        }
       }
       $$2217$cmp = ($$0214324>>>0)>(1);
       if ($$2217$cmp) {
        label = 76;
        break L5;
       }
       $237 = (($$0169345) + -1)|0;
       $238 = HEAP32[$11>>2]|0;
       $239 = ($238|0)>(0);
       if ($239) {
        $241 = $238;
       } else {
        label = 100;
        break L3;
       }
       while(1) {
        $240 = (($241) + -1)|0;
        HEAP32[$11>>2] = $240;
        $$elt231 = (((((($0)) + 1048|0) + ($240<<4)|0)) + 8|0);
        $$unpack232 = HEAP32[$$elt231>>2]|0;
        $$elt233 = (((((($0)) + 1048|0) + ($240<<4)|0)) + 12|0);
        $$unpack234 = HEAP32[$$elt233>>2]|0;
        $242 = ($$unpack232|0)!=(0);
        $243 = ($$unpack234|0)!=(0);
        $244 = $$unpack234 & 1;
        $245 = $244 | $$unpack232;
        $246 = ($245|0)!=(0);
        $247 = $243 & $246;
        $248 = $242 | $247;
        if (!($248)) {
         $$0169$be = $237;
         break L7;
        }
        $249 = ($244|0)==(0);
        $250 = $$unpack234 >> 1;
        $251 = (($0) + ($250)|0);
        if ($249) {
         $255 = $$unpack232;
         $256 = $255;
        } else {
         $252 = HEAP32[$251>>2]|0;
         $253 = (($252) + ($$unpack232)|0);
         $254 = HEAP32[$253>>2]|0;
         $256 = $254;
        }
        FUNCTION_TABLE_vi[$256 & 1023]($251);
        $257 = HEAP32[$11>>2]|0;
        $258 = ($257|0)>(0);
        if ($258) {
         $241 = $257;
        } else {
         label = 100;
         break L3;
        }
       }
      }
     } while(0);
     $146 = (__ZN10LineParser32AdvanceAndCheckEndOfSubStatementEv($0)|0);
     if ($146) {
      $$0169345 = $$0169$be;
     } else {
      break L1;
     }
    }
    if ((label|0) == 20) {
     label = 0;
     $63 = HEAP32[$10>>2]|0;
     $64 = ($63|0)==(128);
     if ($64) {
      label = 21;
      break;
     }
     __THREW__ = 0;
     $78 = (+invoke_di(684,($0|0)));
     $79 = __THREW__; __THREW__ = 0;
     $80 = $79&1;
     if ($80) {
      label = 31;
      break;
     }
     $81 = HEAP32[$10>>2]|0;
     $82 = (($81) + 1)|0;
     HEAP32[$10>>2] = $82;
     $83 = (((($0)) + 24|0) + ($81<<3)|0);
     HEAPF64[$83>>3] = $78;
     $$0171$ph$be = 1;
    }
    else if ((label|0) == 76) {
     label = 0;
     $193 = (3492 + ($$0214324<<4)|0);
     $194 = HEAP32[$11>>2]|0;
     $195 = ($194|0)>(0);
     L71: do {
      if ($195) {
       $196 = (((3492 + ($$0214324<<4)|0)) + 4|0);
       $197 = HEAP32[$196>>2]|0;
       $199 = $194;
       while(1) {
        $198 = (($199) + -1)|0;
        $200 = (((((($0)) + 1048|0) + ($198<<4)|0)) + 4|0);
        $201 = HEAP32[$200>>2]|0;
        $202 = ($197|0)>($201|0);
        if ($202) {
         break;
        }
        HEAP32[$11>>2] = $198;
        $$elt235 = (((((($0)) + 1048|0) + ($198<<4)|0)) + 8|0);
        $$unpack236 = HEAP32[$$elt235>>2]|0;
        $$elt237 = (((((($0)) + 1048|0) + ($198<<4)|0)) + 12|0);
        $$unpack238 = HEAP32[$$elt237>>2]|0;
        $203 = ($$unpack236|0)!=(0);
        $204 = ($$unpack238|0)!=(0);
        $205 = $$unpack238 & 1;
        $206 = $205 | $$unpack236;
        $207 = ($206|0)!=(0);
        $208 = $204 & $207;
        $209 = $203 | $208;
        if (!($209)) {
         label = 80;
         break L3;
        }
        $210 = ($205|0)==(0);
        $211 = $$unpack238 >> 1;
        $212 = (($0) + ($211)|0);
        if ($210) {
         $216 = $$unpack236;
         $217 = $216;
        } else {
         $213 = HEAP32[$212>>2]|0;
         $214 = (($213) + ($$unpack236)|0);
         $215 = HEAP32[$214>>2]|0;
         $217 = $215;
        }
        FUNCTION_TABLE_vi[$217 & 1023]($212);
        $218 = HEAP32[$11>>2]|0;
        $219 = ($218|0)>(0);
        if ($219) {
         $199 = $218;
        } else {
         $235 = $218;
         break L71;
        }
       }
       $220 = ($199|0)==(32);
       if ($220) {
        label = 86;
        break L3;
       } else {
        $235 = $199;
       }
      } else {
       $235 = $194;
      }
     } while(0);
     $234 = (($235) + 1)|0;
     HEAP32[$11>>2] = $234;
     $236 = (((($0)) + 1048|0) + ($235<<4)|0);
     ;HEAP32[$236>>2]=HEAP32[$193>>2]|0;HEAP32[$236+4>>2]=HEAP32[$193+4>>2]|0;HEAP32[$236+8>>2]=HEAP32[$193+8>>2]|0;HEAP32[$236+12>>2]=HEAP32[$193+12>>2]|0;
     $$0171$ph$be = 0;
    }
    $84 = (__ZN10LineParser32AdvanceAndCheckEndOfSubStatementEv($0)|0);
    if ($84) {
     $$0169$ph350 = $$0169345;$$0171$ph349 = $$0171$ph$be;
    } else {
     break L1;
    }
   }
   if ((label|0) == 17) {
    ___assert_fail((21625|0),(21651|0),302,(21666|0));
    // unreachable;
   }
   else if ((label|0) == 21) {
    $65 = (___cxa_allocate_exception(36)|0);
    __THREW__ = 0;
    invoke_vii(635,($3|0),($13|0));
    $66 = __THREW__; __THREW__ = 0;
    $67 = $66&1;
    if ($67) {
     $72 = ___cxa_find_matching_catch_2()|0;
     $73 = tempRet0;
     $$0197257 = $72;$$0202256 = $73;
    } else {
     $68 = HEAP32[$14>>2]|0;
     __THREW__ = 0;
     invoke_viii(683,($65|0),($3|0),($68|0));
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      $$0220 = 1;
     } else {
      __THREW__ = 0;
      invoke_viii(644,($65|0),(400|0),(7|0));
      $71 = __THREW__; __THREW__ = 0;
      $$0220 = 0;
     }
     $74 = ___cxa_find_matching_catch_2()|0;
     $75 = tempRet0;
     __THREW__ = 0;
     invoke_vi(637,($3|0));
     $76 = __THREW__; __THREW__ = 0;
     $77 = $76&1;
     if ($77) {
      $353 = ___cxa_find_matching_catch_3(0|0)|0;
      $354 = tempRet0;
      ___clang_call_terminate($353);
      // unreachable;
     }
     if ($$0220) {
      $$0197257 = $74;$$0202256 = $75;
     } else {
      $$11 = $74;$$11213 = $75;
      ___resumeException($$11|0);
      // unreachable;
     }
    }
    ___cxa_free_exception(($65|0));
    $$11 = $$0197257;$$11213 = $$0202256;
    ___resumeException($$11|0);
    // unreachable;
   }
   else if ((label|0) == 31) {
    $85 = ___cxa_find_matching_catch_3(368|0)|0;
    $86 = tempRet0;
    $87 = (_llvm_eh_typeid_for((368|0))|0);
    $88 = ($86|0)==($87|0);
    if (!($88)) {
     $$11 = $85;$$11213 = $86;
     ___resumeException($$11|0);
     // unreachable;
    }
    (___cxa_begin_catch(($85|0))|0);
    $89 = HEAP32[9088]|0;
    $90 = ($89|0)==(0|0);
    do {
     if ($90) {
      __THREW__ = 0;
      invoke_viiii(680,(27040|0),(27060|0),38,(27075|0));
      $91 = __THREW__; __THREW__ = 0;
     } else {
      $92 = HEAP32[$89>>2]|0;
      $93 = ($92|0)==(0);
      if ($93) {
       __THREW__ = 0;
       invoke_viii(685,($0|0),($$0169345|0),($1|0));
       $94 = __THREW__; __THREW__ = 0;
       $95 = $94&1;
       if ($95) {
        break;
       }
      }
      __THREW__ = 0;
      invoke_v(642);
      $100 = __THREW__; __THREW__ = 0;
     }
    } while(0);
    $96 = ___cxa_find_matching_catch_2()|0;
    $97 = tempRet0;
    __THREW__ = 0;
    invoke_v(643);
    $98 = __THREW__; __THREW__ = 0;
    $99 = $98&1;
    if ($99) {
     $353 = ___cxa_find_matching_catch_3(0|0)|0;
     $354 = tempRet0;
     ___clang_call_terminate($353);
     // unreachable;
    } else {
     $$11 = $96;$$11213 = $97;
     ___resumeException($$11|0);
     // unreachable;
    }
   }
   else if ((label|0) == 43) {
    ___assert_fail((21685|0),(21651|0),359,(21666|0));
    // unreachable;
   }
   else if ((label|0) == 50) {
    $130 = (___cxa_allocate_exception(36)|0);
    __THREW__ = 0;
    invoke_vii(635,($4|0),($13|0));
    $131 = __THREW__; __THREW__ = 0;
    $132 = $131&1;
    if ($132) {
     $137 = ___cxa_find_matching_catch_2()|0;
     $138 = tempRet0;
     $$2199261 = $137;$$2204260 = $138;
    } else {
     $133 = HEAP32[$14>>2]|0;
     __THREW__ = 0;
     invoke_viii(683,($130|0),($4|0),($133|0));
     $134 = __THREW__; __THREW__ = 0;
     $135 = $134&1;
     if ($135) {
      $$0218 = 1;
     } else {
      __THREW__ = 0;
      invoke_viii(644,($130|0),(400|0),(7|0));
      $136 = __THREW__; __THREW__ = 0;
      $$0218 = 0;
     }
     $139 = ___cxa_find_matching_catch_2()|0;
     $140 = tempRet0;
     __THREW__ = 0;
     invoke_vi(637,($4|0));
     $141 = __THREW__; __THREW__ = 0;
     $142 = $141&1;
     if ($142) {
      $353 = ___cxa_find_matching_catch_3(0|0)|0;
      $354 = tempRet0;
      ___clang_call_terminate($353);
      // unreachable;
     }
     if ($$0218) {
      $$2199261 = $139;$$2204260 = $140;
     } else {
      $$11 = $139;$$11213 = $140;
      ___resumeException($$11|0);
      // unreachable;
     }
    }
    ___cxa_free_exception(($130|0));
    $$11 = $$2199261;$$11213 = $$2204260;
    ___resumeException($$11|0);
    // unreachable;
   }
   else if ((label|0) == 68) {
    $180 = (___cxa_allocate_exception(36)|0);
    __THREW__ = 0;
    invoke_vii(635,($5|0),($13|0));
    $181 = __THREW__; __THREW__ = 0;
    $182 = $181&1;
    if ($182) {
     $187 = ___cxa_find_matching_catch_2()|0;
     $188 = tempRet0;
     $$4201267 = $187;$$4206266 = $188;
    } else {
     $183 = HEAP32[$14>>2]|0;
     __THREW__ = 0;
     invoke_viii(676,($180|0),($5|0),($183|0));
     $184 = __THREW__; __THREW__ = 0;
     $185 = $184&1;
     if ($185) {
      $$0193 = 1;
     } else {
      __THREW__ = 0;
      invoke_viii(644,($180|0),(352|0),(7|0));
      $186 = __THREW__; __THREW__ = 0;
      $$0193 = 0;
     }
     $189 = ___cxa_find_matching_catch_2()|0;
     $190 = tempRet0;
     __THREW__ = 0;
     invoke_vi(637,($5|0));
     $191 = __THREW__; __THREW__ = 0;
     $192 = $191&1;
     if ($192) {
      $353 = ___cxa_find_matching_catch_3(0|0)|0;
      $354 = tempRet0;
      ___clang_call_terminate($353);
      // unreachable;
     }
     if ($$0193) {
      $$4201267 = $189;$$4206266 = $190;
     } else {
      $$11 = $189;$$11213 = $190;
      ___resumeException($$11|0);
      // unreachable;
     }
    }
    ___cxa_free_exception(($180|0));
    $$11 = $$4201267;$$11213 = $$4206266;
    ___resumeException($$11|0);
    // unreachable;
   }
   else if ((label|0) == 80) {
    ___assert_fail((21685|0),(21651|0),429,(21666|0));
    // unreachable;
   }
   else if ((label|0) == 86) {
    $221 = (___cxa_allocate_exception(36)|0);
    __THREW__ = 0;
    invoke_vii(635,($6|0),($13|0));
    $222 = __THREW__; __THREW__ = 0;
    $223 = $222&1;
    if ($223) {
     $228 = ___cxa_find_matching_catch_2()|0;
     $229 = tempRet0;
     $$5207270 = $229;$$5271 = $228;
    } else {
     $224 = HEAP32[$14>>2]|0;
     __THREW__ = 0;
     invoke_viii(683,($221|0),($6|0),($224|0));
     $225 = __THREW__; __THREW__ = 0;
     $226 = $225&1;
     if ($226) {
      $$0184 = 1;
     } else {
      __THREW__ = 0;
      invoke_viii(644,($221|0),(400|0),(7|0));
      $227 = __THREW__; __THREW__ = 0;
      $$0184 = 0;
     }
     $230 = ___cxa_find_matching_catch_2()|0;
     $231 = tempRet0;
     __THREW__ = 0;
     invoke_vi(637,($6|0));
     $232 = __THREW__; __THREW__ = 0;
     $233 = $232&1;
     if ($233) {
      $353 = ___cxa_find_matching_catch_3(0|0)|0;
      $354 = tempRet0;
      ___clang_call_terminate($353);
      // unreachable;
     }
     if ($$0184) {
      $$5207270 = $231;$$5271 = $230;
     } else {
      $$11 = $230;$$11213 = $231;
      ___resumeException($$11|0);
      // unreachable;
     }
    }
    ___cxa_free_exception(($221|0));
    $$11 = $$5271;$$11213 = $$5207270;
    ___resumeException($$11|0);
    // unreachable;
   }
   else if ((label|0) == 100) {
    if ($1) {
     $273 = HEAP32[$14>>2]|0;
     $274 = (($273) + -1)|0;
     HEAP32[$14>>2] = $274;
     break;
    }
    $259 = (___cxa_allocate_exception(36)|0);
    __THREW__ = 0;
    invoke_vii(635,($7|0),($13|0));
    $260 = __THREW__; __THREW__ = 0;
    $261 = $260&1;
    if ($261) {
     $267 = ___cxa_find_matching_catch_2()|0;
     $268 = tempRet0;
     $$6208275 = $268;$$6276 = $267;
    } else {
     $262 = HEAP32[$14>>2]|0;
     $263 = (($262) + -1)|0;
     __THREW__ = 0;
     invoke_viii(686,($259|0),($7|0),($263|0));
     $264 = __THREW__; __THREW__ = 0;
     $265 = $264&1;
     if ($265) {
      $$0175 = 1;
     } else {
      __THREW__ = 0;
      invoke_viii(644,($259|0),(416|0),(7|0));
      $266 = __THREW__; __THREW__ = 0;
      $$0175 = 0;
     }
     $269 = ___cxa_find_matching_catch_2()|0;
     $270 = tempRet0;
     __THREW__ = 0;
     invoke_vi(637,($7|0));
     $271 = __THREW__; __THREW__ = 0;
     $272 = $271&1;
     if ($272) {
      $353 = ___cxa_find_matching_catch_3(0|0)|0;
      $354 = tempRet0;
      ___clang_call_terminate($353);
      // unreachable;
     }
     if ($$0175) {
      $$6208275 = $270;$$6276 = $269;
     } else {
      $$11 = $269;$$11213 = $270;
      ___resumeException($$11|0);
      // unreachable;
     }
    }
    ___cxa_free_exception(($259|0));
    $$11 = $$6276;$$11213 = $$6208275;
    ___resumeException($$11|0);
    // unreachable;
   }
  }
 } while(0);
 $275 = HEAP32[$11>>2]|0;
 $276 = ($275|0)>(0);
 L174: do {
  if ($276) {
   $278 = $275;
   while(1) {
    $277 = (($278) + -1)|0;
    HEAP32[$11>>2] = $277;
    $$elt = (((((($0)) + 1048|0) + ($277<<4)|0)) + 8|0);
    $$unpack = HEAP32[$$elt>>2]|0;
    $$elt222 = (((((($0)) + 1048|0) + ($277<<4)|0)) + 12|0);
    $$unpack223 = HEAP32[$$elt222>>2]|0;
    $279 = ($$unpack|0)==(0);
    $280 = ($$unpack223|0)==(0);
    $281 = $$unpack223 & 1;
    $282 = $281 | $$unpack;
    $283 = ($282|0)==(0);
    $284 = $280 | $283;
    $285 = $279 & $284;
    if ($285) {
     break;
    }
    $301 = $$unpack223 >> 1;
    $302 = (($0) + ($301)|0);
    $303 = ($281|0)==(0);
    if ($303) {
     $307 = $$unpack;
     $308 = $307;
    } else {
     $304 = HEAP32[$302>>2]|0;
     $305 = (($304) + ($$unpack)|0);
     $306 = HEAP32[$305>>2]|0;
     $308 = $306;
    }
    FUNCTION_TABLE_vi[$308 & 1023]($302);
    $309 = HEAP32[$11>>2]|0;
    $310 = ($309|0)>(0);
    if ($310) {
     $278 = $309;
    } else {
     break L174;
    }
   }
   $286 = (___cxa_allocate_exception(36)|0);
   $287 = ((($0)) + 4|0);
   __THREW__ = 0;
   invoke_vii(635,($8|0),($287|0));
   $288 = __THREW__; __THREW__ = 0;
   $289 = $288&1;
   if ($289) {
    $295 = ___cxa_find_matching_catch_2()|0;
    $296 = tempRet0;
    $$9211283 = $296;$$9284 = $295;
   } else {
    $290 = ((($0)) + 16|0);
    $291 = HEAP32[$290>>2]|0;
    __THREW__ = 0;
    invoke_viii(686,($286|0),($8|0),($291|0));
    $292 = __THREW__; __THREW__ = 0;
    $293 = $292&1;
    if ($293) {
     $$0167 = 1;
    } else {
     __THREW__ = 0;
     invoke_viii(644,($286|0),(416|0),(7|0));
     $294 = __THREW__; __THREW__ = 0;
     $$0167 = 0;
    }
    $297 = ___cxa_find_matching_catch_2()|0;
    $298 = tempRet0;
    __THREW__ = 0;
    invoke_vi(637,($8|0));
    $299 = __THREW__; __THREW__ = 0;
    $300 = $299&1;
    if ($300) {
     $353 = ___cxa_find_matching_catch_3(0|0)|0;
     $354 = tempRet0;
     ___clang_call_terminate($353);
     // unreachable;
    }
    if ($$0167) {
     $$9211283 = $298;$$9284 = $297;
    } else {
     $$11 = $297;$$11213 = $298;
     ___resumeException($$11|0);
     // unreachable;
    }
   }
   ___cxa_free_exception(($286|0));
   $$11 = $$9284;$$11213 = $$9211283;
   ___resumeException($$11|0);
   // unreachable;
  }
 } while(0);
 $311 = HEAP32[$10>>2]|0;
 $312 = ($311|0)<(2);
 if (!($312)) {
  ___assert_fail((21703|0),(21651|0),507,(21666|0));
  // unreachable;
 }
 $313 = ($311|0)==(0);
 if (!($313)) {
  $351 = ((($0)) + 24|0);
  $352 = +HEAPF64[$351>>3];
  STACKTOP = sp;return (+$352);
 }
 $314 = (___cxa_allocate_exception(36)|0);
 $315 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($9|0),($315|0));
 $316 = __THREW__; __THREW__ = 0;
 $317 = $316&1;
 if ($317) {
  $345 = ___cxa_find_matching_catch_2()|0;
  $346 = tempRet0;
  $$10212286 = $346;$$10287 = $345;
 } else {
  $318 = ((($0)) + 16|0);
  $319 = HEAP32[$318>>2]|0;
  __THREW__ = 0;
  invoke_vii(635,($2|0),($9|0));
  $320 = __THREW__; __THREW__ = 0;
  $321 = $320&1;
  L206: do {
   if ($321) {
    $$0 = 1;
    label = 138;
   } else {
    HEAP32[$314>>2] = (4652);
    $322 = ((($314)) + 4|0);
    __THREW__ = 0;
    invoke_vii(635,($322|0),($2|0));
    $323 = __THREW__; __THREW__ = 0;
    $324 = $323&1;
    do {
     if ($324) {
      $329 = ___cxa_find_matching_catch_2()|0;
      $330 = tempRet0;
      $$0$i = $330;$$03$i = $329;
     } else {
      $325 = ((($314)) + 16|0);
      HEAP32[$325>>2] = $319;
      $326 = ((($314)) + 20|0);
      ;HEAP32[$326>>2]=0|0;HEAP32[$326+4>>2]=0|0;HEAP32[$326+8>>2]=0|0;
      __THREW__ = 0;
      invoke_viii(646,($326|0),(44984|0),0);
      $327 = __THREW__; __THREW__ = 0;
      $328 = $327&1;
      if ($328) {
       $331 = ___cxa_find_matching_catch_2()|0;
       $332 = tempRet0;
       __THREW__ = 0;
       invoke_vi(637,($322|0));
       $333 = __THREW__; __THREW__ = 0;
       $334 = $333&1;
       if (!($334)) {
        $$0$i = $332;$$03$i = $331;
        break;
       }
       $335 = ___cxa_find_matching_catch_3(0|0)|0;
       $336 = tempRet0;
       ___clang_call_terminate($335);
       // unreachable;
      } else {
       $337 = ((($314)) + 32|0);
       HEAP32[$337>>2] = 0;
       __THREW__ = 0;
       invoke_vi(637,($2|0));
       $338 = __THREW__; __THREW__ = 0;
       $339 = $338&1;
       if ($339) {
        $$0 = 1;
        label = 138;
        break L206;
       }
       HEAP32[$314>>2] = (4556);
       __THREW__ = 0;
       invoke_viii(644,($314|0),(432|0),(7|0));
       $344 = __THREW__; __THREW__ = 0;
       $$0 = 0;
       label = 138;
       break L206;
      }
     }
    } while(0);
    __THREW__ = 0;
    invoke_vi(637,($2|0));
    $340 = __THREW__; __THREW__ = 0;
    $341 = $340&1;
    if ($341) {
     $342 = ___cxa_find_matching_catch_3(0|0)|0;
     $343 = tempRet0;
     ___clang_call_terminate($342);
     // unreachable;
    } else {
     $$0$lpad$bodyZZ2D = 1;$eh$lpad$body$index2Z2D = $$0$i;$eh$lpad$body$indexZ2D = $$03$i;
    }
   }
  } while(0);
  if ((label|0) == 138) {
   $347 = ___cxa_find_matching_catch_2()|0;
   $348 = tempRet0;
   $$0$lpad$bodyZZ2D = $$0;$eh$lpad$body$index2Z2D = $348;$eh$lpad$body$indexZ2D = $347;
  }
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $349 = __THREW__; __THREW__ = 0;
  $350 = $349&1;
  if ($350) {
   $353 = ___cxa_find_matching_catch_3(0|0)|0;
   $354 = tempRet0;
   ___clang_call_terminate($353);
   // unreachable;
  }
  if ($$0$lpad$bodyZZ2D) {
   $$10212286 = $eh$lpad$body$index2Z2D;$$10287 = $eh$lpad$body$indexZ2D;
  } else {
   $$11 = $eh$lpad$body$indexZ2D;$$11213 = $eh$lpad$body$index2Z2D;
   ___resumeException($$11|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($314|0));
 $$11 = $$10287;$$11213 = $$10212286;
 ___resumeException($$11|0);
 // unreachable;
 return +(0.0);
}
function __ZN45AsmException_SyntaxError_ExpressionTooComplexC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$03$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3,$1);
 HEAP32[$0>>2] = (4652);
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($4|0),($3|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $11 = ___cxa_find_matching_catch_2()|0;
  $12 = tempRet0;
  $$0$i = $12;$$03$i = $11;
 } else {
  $7 = ((($0)) + 16|0);
  HEAP32[$7>>2] = $2;
  $8 = ((($0)) + 20|0);
  ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
  __THREW__ = 0;
  invoke_viii(646,($8|0),(44984|0),0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   $19 = ((($0)) + 32|0);
   HEAP32[$19>>2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
   HEAP32[$0>>2] = (4604);
   STACKTOP = sp;return;
  }
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($4|0));
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if ($16) {
   $17 = ___cxa_find_matching_catch_3(0|0)|0;
   $18 = tempRet0;
   ___clang_call_terminate($17);
   // unreachable;
  } else {
   $$0$i = $14;$$03$i = $13;
  }
 }
 __THREW__ = 0;
 invoke_vi(637,($3|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch_3(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  ___resumeException($$03$i|0);
  // unreachable;
 }
}
function __ZN46AsmException_SyntaxError_MismatchedParenthesesC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$03$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3,$1);
 HEAP32[$0>>2] = (4652);
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($4|0),($3|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $11 = ___cxa_find_matching_catch_2()|0;
  $12 = tempRet0;
  $$0$i = $12;$$03$i = $11;
 } else {
  $7 = ((($0)) + 16|0);
  HEAP32[$7>>2] = $2;
  $8 = ((($0)) + 20|0);
  ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
  __THREW__ = 0;
  invoke_viii(646,($8|0),(44984|0),0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   $19 = ((($0)) + 32|0);
   HEAP32[$19>>2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
   HEAP32[$0>>2] = (4580);
   STACKTOP = sp;return;
  }
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($4|0));
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if ($16) {
   $17 = ___cxa_find_matching_catch_3(0|0)|0;
   $18 = tempRet0;
   ___clang_call_terminate($17);
   // unreachable;
  } else {
   $$0$i = $14;$$03$i = $13;
  }
 }
 __THREW__ = 0;
 invoke_vi(637,($3|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch_3(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  ___resumeException($$03$i|0);
  // unreachable;
 }
}
function __ZN40AsmException_SyntaxError_EmptyExpressionD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK40AsmException_SyntaxError_EmptyExpression7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21767|0);
}
function __ZN46AsmException_SyntaxError_MismatchedParenthesesD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK46AsmException_SyntaxError_MismatchedParentheses7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21838|0);
}
function __ZN45AsmException_SyntaxError_ExpressionTooComplexD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK45AsmException_SyntaxError_ExpressionTooComplex7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21910|0);
}
function __ZN10LineParser23EvaluateExpressionAsIntEb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+__ZN10LineParser18EvaluateExpressionEb($0,$1));
 $3 = (~~(($2)));
 return ($3|0);
}
function __ZN10LineParser31EvaluateExpressionAsUnsignedIntEb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+__ZN10LineParser18EvaluateExpressionEb($0,$1));
 $3 = (~~(($2))>>>0);
 return ($3|0);
}
function __ZN22AsmException_FileErrorD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4628);
 $1 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  __ZdlPv($0);
  ___resumeException($4|0);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZNK22AsmException_FileError5PrintEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(40008,21958,7)|0);
 $3 = ((($0)) + 4|0);
 $4 = ((($3)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 $7 = HEAP32[$3>>2]|0;
 $8 = $6 ? $7 : $3;
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5&255;
 $12 = $6 ? $10 : $11;
 $13 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($2,$8,$12)|0);
 $14 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($13,34923,2)|0);
 $15 = HEAP32[$0>>2]|0;
 $16 = ((($15)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (FUNCTION_TABLE_ii[$17 & 1023]($0)|0);
 $19 = (_strlen($18)|0);
 $20 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($14,$18,$19)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + -12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($20) + ($23)|0);
 $25 = (__ZNKSt3__28ios_base6getlocEv($24)|0);
 HEAP32[$1>>2] = $25;
 __THREW__ = 0;
 $26 = (invoke_iii(659,($1|0),(40712|0))|0);
 $27 = __THREW__; __THREW__ = 0;
 $28 = $27&1;
 if (!($28)) {
  $29 = HEAP32[$26>>2]|0;
  $30 = ((($29)) + 28|0);
  $31 = HEAP32[$30>>2]|0;
  __THREW__ = 0;
  $32 = (invoke_iii($31|0,($26|0),10)|0);
  $33 = __THREW__; __THREW__ = 0;
  $34 = $33&1;
  if (!($34)) {
   __ZNSt3__26localeD2Ev($1);
   (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($20,$32)|0);
   (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($20)|0);
   STACKTOP = sp;return;
  }
 }
 $35 = ___cxa_find_matching_catch_2()|0;
 $36 = tempRet0;
 __THREW__ = 0;
 invoke_vi(660,($1|0));
 $37 = __THREW__; __THREW__ = 0;
 $38 = $37&1;
 if ($38) {
  $39 = ___cxa_find_matching_catch_3(0|0)|0;
  $40 = tempRet0;
  ___clang_call_terminate($39);
  // unreachable;
 } else {
  ___resumeException($35|0);
  // unreachable;
 }
}
function __ZNK22AsmException_FileError7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21934|0);
}
function __ZN24AsmException_SyntaxErrorD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK24AsmException_SyntaxError5PrintEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = sp + 12|0;
 $5 = sp;
 $6 = ((($0)) + 20|0);
 $7 = ((($6)) + 11|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)<(0);
 $10 = ((($0)) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $8&255;
 $13 = $9 ? $11 : $12;
 $14 = ($13|0)==(0);
 if ($14) {
  __THREW__ = 0;
  $15 = (invoke_iiiiii(640,($6|0),0,-1,(44984|0),0)|0);
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if ($17) {
   $18 = ___cxa_find_matching_catch_2()|0;
   $19 = tempRet0;
   ___cxa_call_unexpected(($18|0));
   // unreachable;
  }
  $phitmp$i = ($15|0)==(0);
  if ($phitmp$i) {
   ___assert_fail((22032|0),(22049|0),58,(22066|0));
   // unreachable;
  }
 }
 $20 = ((($0)) + 32|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0);
 if ($22) {
  ___assert_fail((22072|0),(22049|0),59,(22066|0));
  // unreachable;
 }
 $23 = HEAP8[$7>>0]|0;
 $24 = ($23<<24>>24)<(0);
 $25 = HEAP32[$6>>2]|0;
 $26 = $24 ? $25 : $6;
 $27 = HEAP32[$10>>2]|0;
 $28 = $23&255;
 $29 = $24 ? $27 : $28;
 $30 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(40008,$26,$29)|0);
 $31 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($30,26906,1)|0);
 $32 = HEAP32[$20>>2]|0;
 $33 = (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi($31,$32)|0);
 (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($33,22090,9)|0);
 $34 = HEAP32[$0>>2]|0;
 $35 = ((($34)) + 12|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (FUNCTION_TABLE_ii[$36 & 1023]($0)|0);
 $38 = (_strlen($37)|0);
 $39 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(40008,$37,$38)|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ((($40)) + -12|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($39) + ($42)|0);
 $44 = (__ZNKSt3__28ios_base6getlocEv($43)|0);
 HEAP32[$4>>2] = $44;
 __THREW__ = 0;
 $45 = (invoke_iii(659,($4|0),(40712|0))|0);
 $46 = __THREW__; __THREW__ = 0;
 $47 = $46&1;
 if (!($47)) {
  $48 = HEAP32[$45>>2]|0;
  $49 = ((($48)) + 28|0);
  $50 = HEAP32[$49>>2]|0;
  __THREW__ = 0;
  $51 = (invoke_iii($50|0,($45|0),10)|0);
  $52 = __THREW__; __THREW__ = 0;
  $53 = $52&1;
  if (!($53)) {
   __ZNSt3__26localeD2Ev($4);
   (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($39,$51)|0);
   (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($39)|0);
   $60 = HEAP32[$39>>2]|0;
   $61 = ((($60)) + -12|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (($39) + ($62)|0);
   $64 = (__ZNKSt3__28ios_base6getlocEv($63)|0);
   HEAP32[$3>>2] = $64;
   __THREW__ = 0;
   $65 = (invoke_iii(659,($3|0),(40712|0))|0);
   $66 = __THREW__; __THREW__ = 0;
   $67 = $66&1;
   if (!($67)) {
    $68 = HEAP32[$65>>2]|0;
    $69 = ((($68)) + 28|0);
    $70 = HEAP32[$69>>2]|0;
    __THREW__ = 0;
    $71 = (invoke_iii($70|0,($65|0),10)|0);
    $72 = __THREW__; __THREW__ = 0;
    $73 = $72&1;
    if (!($73)) {
     __ZNSt3__26localeD2Ev($3);
     (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($39,$71)|0);
     (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($39)|0);
     $80 = ((($0)) + 4|0);
     $81 = ((($80)) + 11|0);
     $82 = HEAP8[$81>>0]|0;
     $83 = ($82<<24>>24)<(0);
     $84 = HEAP32[$80>>2]|0;
     $85 = $83 ? $84 : $80;
     $86 = ((($0)) + 8|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = $82&255;
     $89 = $83 ? $87 : $88;
     $90 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(40008,$85,$89)|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = ((($91)) + -12|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = (($90) + ($93)|0);
     $95 = (__ZNKSt3__28ios_base6getlocEv($94)|0);
     HEAP32[$2>>2] = $95;
     __THREW__ = 0;
     $96 = (invoke_iii(659,($2|0),(40712|0))|0);
     $97 = __THREW__; __THREW__ = 0;
     $98 = $97&1;
     if (!($98)) {
      $99 = HEAP32[$96>>2]|0;
      $100 = ((($99)) + 28|0);
      $101 = HEAP32[$100>>2]|0;
      __THREW__ = 0;
      $102 = (invoke_iii($101|0,($96|0),10)|0);
      $103 = __THREW__; __THREW__ = 0;
      $104 = $103&1;
      if (!($104)) {
       __ZNSt3__26localeD2Ev($2);
       (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($90,$102)|0);
       (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($90)|0);
       $111 = ((($0)) + 16|0);
       $112 = HEAP32[$111>>2]|0;
       ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($5,$112,32);
       $113 = ((($5)) + 11|0);
       $114 = HEAP8[$113>>0]|0;
       $115 = ($114<<24>>24)<(0);
       $116 = HEAP32[$5>>2]|0;
       $117 = $115 ? $116 : $5;
       $118 = ((($5)) + 4|0);
       $119 = HEAP32[$118>>2]|0;
       $120 = $114&255;
       $121 = $115 ? $119 : $120;
       __THREW__ = 0;
       $122 = (invoke_iiii(655,(40008|0),($117|0),($121|0))|0);
       $123 = __THREW__; __THREW__ = 0;
       $124 = $123&1;
       do {
        if ($124) {
         label = 35;
        } else {
         __THREW__ = 0;
         $125 = (invoke_iiii(655,($122|0),(22100|0),1)|0);
         $126 = __THREW__; __THREW__ = 0;
         $127 = $126&1;
         if ($127) {
          label = 35;
         } else {
          $128 = HEAP32[$125>>2]|0;
          $129 = ((($128)) + -12|0);
          $130 = HEAP32[$129>>2]|0;
          $131 = (($125) + ($130)|0);
          __THREW__ = 0;
          $132 = (invoke_ii(658,($131|0))|0);
          $133 = __THREW__; __THREW__ = 0;
          $134 = $133&1;
          if ($134) {
           label = 35;
          } else {
           HEAP32[$1>>2] = $132;
           __THREW__ = 0;
           $135 = (invoke_iii(659,($1|0),(40712|0))|0);
           $136 = __THREW__; __THREW__ = 0;
           $137 = $136&1;
           if (!($137)) {
            $138 = HEAP32[$135>>2]|0;
            $139 = ((($138)) + 28|0);
            $140 = HEAP32[$139>>2]|0;
            __THREW__ = 0;
            $141 = (invoke_iii($140|0,($135|0),10)|0);
            $142 = __THREW__; __THREW__ = 0;
            $143 = $142&1;
            if (!($143)) {
             __THREW__ = 0;
             invoke_vi(660,($1|0));
             $150 = __THREW__; __THREW__ = 0;
             $151 = $150&1;
             if ($151) {
              label = 35;
              break;
             }
             __THREW__ = 0;
             (invoke_iii(687,($125|0),($141|0))|0);
             $152 = __THREW__; __THREW__ = 0;
             $153 = $152&1;
             if ($153) {
              label = 35;
              break;
             }
             __THREW__ = 0;
             (invoke_ii(688,($125|0))|0);
             $154 = __THREW__; __THREW__ = 0;
             $155 = $154&1;
             if ($155) {
              label = 35;
              break;
             }
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
             STACKTOP = sp;return;
            }
           }
           $144 = ___cxa_find_matching_catch_2()|0;
           $145 = tempRet0;
           __THREW__ = 0;
           invoke_vi(660,($1|0));
           $146 = __THREW__; __THREW__ = 0;
           $147 = $146&1;
           if ($147) {
            $148 = ___cxa_find_matching_catch_3(0|0)|0;
            $149 = tempRet0;
            ___clang_call_terminate($148);
            // unreachable;
           } else {
            $eh$lpad$body$index2Z2D = $145;$eh$lpad$body$indexZ2D = $144;
            break;
           }
          }
         }
        }
       } while(0);
       if ((label|0) == 35) {
        $156 = ___cxa_find_matching_catch_2()|0;
        $157 = tempRet0;
        $eh$lpad$body$index2Z2D = $157;$eh$lpad$body$indexZ2D = $156;
       }
       __THREW__ = 0;
       invoke_vi(637,($5|0));
       $158 = __THREW__; __THREW__ = 0;
       $159 = $158&1;
       if ($159) {
        $160 = ___cxa_find_matching_catch_3(0|0)|0;
        $161 = tempRet0;
        ___clang_call_terminate($160);
        // unreachable;
       } else {
        ___resumeException($eh$lpad$body$indexZ2D|0);
        // unreachable;
       }
      }
     }
     $105 = ___cxa_find_matching_catch_2()|0;
     $106 = tempRet0;
     __THREW__ = 0;
     invoke_vi(660,($2|0));
     $107 = __THREW__; __THREW__ = 0;
     $108 = $107&1;
     if ($108) {
      $109 = ___cxa_find_matching_catch_3(0|0)|0;
      $110 = tempRet0;
      ___clang_call_terminate($109);
      // unreachable;
     } else {
      ___resumeException($105|0);
      // unreachable;
     }
    }
   }
   $74 = ___cxa_find_matching_catch_2()|0;
   $75 = tempRet0;
   __THREW__ = 0;
   invoke_vi(660,($3|0));
   $76 = __THREW__; __THREW__ = 0;
   $77 = $76&1;
   if ($77) {
    $78 = ___cxa_find_matching_catch_3(0|0)|0;
    $79 = tempRet0;
    ___clang_call_terminate($78);
    // unreachable;
   } else {
    ___resumeException($74|0);
    // unreachable;
   }
  }
 }
 $54 = ___cxa_find_matching_catch_2()|0;
 $55 = tempRet0;
 __THREW__ = 0;
 invoke_vi(660,($4|0));
 $56 = __THREW__; __THREW__ = 0;
 $57 = $56&1;
 if ($57) {
  $58 = ___cxa_find_matching_catch_3(0|0)|0;
  $59 = tempRet0;
  ___clang_call_terminate($58);
  // unreachable;
 } else {
  ___resumeException($54|0);
  // unreachable;
 }
}
function __ZNK24AsmException_SyntaxError7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22006|0);
}
function __ZN10LineParser30GetInstructionAndAdvanceColumnEv($0) {
 $0 = $0|0;
 var $$02942 = 0, $$038 = 0, $$038$us = 0, $$232 = 0, $$pre = 0, $$pre56 = 0, $$pre57 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[9090]|0;
 $2 = ($1|0)==(0|0);
 $3 = ((($0)) + 4|0);
 $4 = ((($0)) + 16|0);
 $5 = ((($3)) + 11|0);
 if ($2) {
  ___assert_fail((27040|0),(27084|0),36,(27075|0));
  // unreachable;
 }
 $6 = ((($1)) + 131076|0);
 $$pre = HEAP32[$6>>2]|0;
 $$02942 = 0;
 L4: while(1) {
  $7 = (((4668 + (($$02942*40)|0)|0)) + 32|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_strlen($8)|0);
  $10 = (((4668 + (($$02942*40)|0)|0)) + 36|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)>($$pre|0);
  L6: do {
   if (!($12)) {
    $13 = ($9|0)==(0);
    $$pre57 = HEAP32[$4>>2]|0;
    if ($13) {
     $39 = 0;
     break L4;
    }
    $14 = HEAP8[$5>>0]|0;
    $15 = ($14<<24>>24)<(0);
    if (!($15)) {
     $$038 = 0;
     while(1) {
      $29 = (($8) + ($$038)|0);
      $30 = HEAP8[$29>>0]|0;
      $31 = $30 << 24 >> 24;
      $32 = (($$pre57) + ($$038))|0;
      $33 = (($3) + ($32)|0);
      $34 = HEAP8[$33>>0]|0;
      $35 = $34 << 24 >> 24;
      $36 = (_toupper($35)|0);
      $37 = ($31|0)==($36|0);
      $27 = (($$038) + 1)|0;
      if (!($37)) {
       break L6;
      }
      $28 = ($27>>>0)<($9>>>0);
      if ($28) {
       $$038 = $27;
      } else {
       $39 = $9;
       break L4;
      }
     }
    }
    $$pre56 = HEAP32[$3>>2]|0;
    $$038$us = 0;
    while(1) {
     $16 = (($8) + ($$038$us)|0);
     $17 = HEAP8[$16>>0]|0;
     $18 = $17 << 24 >> 24;
     $19 = (($$pre57) + ($$038$us))|0;
     $20 = (($$pre56) + ($19)|0);
     $21 = HEAP8[$20>>0]|0;
     $22 = $21 << 24 >> 24;
     $23 = (_toupper($22)|0);
     $24 = ($18|0)==($23|0);
     $25 = (($$038$us) + 1)|0;
     if (!($24)) {
      break L6;
     }
     $26 = ($25>>>0)<($9>>>0);
     if ($26) {
      $$038$us = $25;
     } else {
      $39 = $9;
      break L4;
     }
    }
   }
  } while(0);
  $40 = (($$02942) + 1)|0;
  $41 = ($40|0)<(67);
  if ($41) {
   $$02942 = $40;
  } else {
   $$232 = -1;
   label = 14;
   break;
  }
 }
 if ((label|0) == 14) {
  return ($$232|0);
 }
 $38 = (($$pre57) + ($39))|0;
 HEAP32[$4>>2] = $38;
 $$232 = $$02942;
 return ($$232|0);
}
function __ZN10LineParser9Assemble1EiNS_15ADDRESSING_MODEE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$015 = 0, $$1 = 0, $$116 = 0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 12|0;
 $4 = sp;
 $5 = ((4668 + (($1*40)|0)|0) + ($2<<1)|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = ($6<<16>>16)==(-1);
 if ($7) {
  ___assert_fail((22402|0),(22389|0),205,(26259|0));
  // unreachable;
 }
 $8 = HEAP32[9090]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  ___assert_fail((27040|0),(27084|0),36,(27075|0));
  // unreachable;
 }
 $10 = $6&65535;
 $11 = $10 & 65280;
 $12 = ((($8)) + 131076|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 << 8;
 $15 = ($11|0)>($14|0);
 if ($15) {
  ___assert_fail((22402|0),(22389|0),205,(26259|0));
  // unreachable;
 }
 $16 = HEAP32[9088]|0;
 $17 = ($16|0)==(0|0);
 if ($17) {
  ___assert_fail((27040|0),(27060|0),38,(27075|0));
  // unreachable;
 }
 $18 = HEAP32[$16>>2]|0;
 $19 = ($18|0)==(1);
 do {
  if ($19) {
   $20 = ((($16)) + 8|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = ($21<<24>>24)==(0);
   if ($22) {
    $107 = $8;
    label = 21;
   } else {
    $23 = HEAP32[9960]|0;
    $24 = ((($23)) + -12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (39840 + ($25)|0);
    $27 = ((($26)) + 4|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = $28 | 16384;
    HEAP32[$27>>2] = $29;
    $30 = HEAP32[9960]|0;
    $31 = ((($30)) + -12|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (39840 + ($32)|0);
    $34 = ((($33)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $35 & -75;
    $37 = $36 | 8;
    HEAP32[$34>>2] = $37;
    $38 = HEAP32[9960]|0;
    $39 = ((($38)) + -12|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (39840 + ($40)|0);
    $42 = ((($41)) + 76|0);
    HEAP32[$42>>2] = 48;
    (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(39840,27661,5)|0);
    $43 = HEAP32[9960]|0;
    $44 = ((($43)) + -12|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (39840 + ($45)|0);
    $47 = ((($46)) + 12|0);
    HEAP32[$47>>2] = 4;
    $48 = HEAP32[9090]|0;
    $49 = ($48|0)==(0|0);
    if ($49) {
     ___assert_fail((27040|0),(27084|0),36,(27075|0));
     // unreachable;
    }
    $50 = ((($48)) + 131072|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi(39840,$51)|0);
    (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($52,28267,3)|0);
    $53 = HEAP32[9960]|0;
    $54 = ((($53)) + -12|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (39840 + ($55)|0);
    $57 = ((($56)) + 12|0);
    HEAP32[$57>>2] = 2;
    $58 = $10 & 255;
    $59 = (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEj(39840,$58)|0);
    (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($59,22446,9)|0);
    $60 = (((4668 + (($1*40)|0)|0)) + 32|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = (_strlen($61)|0);
    (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(39840,$61,$62)|0);
    $63 = ($2|0)==(1);
    if ($63) {
     (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(39840,22456,2)|0);
    }
    $64 = HEAP32[9960]|0;
    $65 = ((($64)) + -12|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = (39840 + ($66)|0);
    $68 = (__ZNKSt3__28ios_base6getlocEv($67)|0);
    HEAP32[$3>>2] = $68;
    __THREW__ = 0;
    $69 = (invoke_iii(659,($3|0),(40712|0))|0);
    $70 = __THREW__; __THREW__ = 0;
    $71 = $70&1;
    if (!($71)) {
     $72 = HEAP32[$69>>2]|0;
     $73 = ((($72)) + 28|0);
     $74 = HEAP32[$73>>2]|0;
     __THREW__ = 0;
     $75 = (invoke_iii($74|0,($69|0),10)|0);
     $76 = __THREW__; __THREW__ = 0;
     $77 = $76&1;
     if (!($77)) {
      __ZNSt3__26localeD2Ev($3);
      (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc(39840,$75)|0);
      (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv(39840)|0);
      $84 = HEAP32[9960]|0;
      $85 = ((($84)) + -12|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = (39840 + ($86)|0);
      $88 = ((($87)) + 4|0);
      $89 = HEAP32[$88>>2]|0;
      $90 = $89 & -16385;
      HEAP32[$88>>2] = $90;
      $91 = HEAP32[9960]|0;
      $92 = ((($91)) + -12|0);
      $93 = HEAP32[$92>>2]|0;
      $94 = (39840 + ($93)|0);
      $95 = ((($94)) + 4|0);
      $96 = HEAP32[$95>>2]|0;
      $97 = $96 & -75;
      $98 = $97 | 2;
      HEAP32[$95>>2] = $98;
      $99 = HEAP32[9960]|0;
      $100 = ((($99)) + -12|0);
      $101 = HEAP32[$100>>2]|0;
      $102 = (39840 + ($101)|0);
      $103 = ((($102)) + 76|0);
      HEAP32[$103>>2] = 32;
      $$pre = HEAP32[9090]|0;
      $104 = ($$pre|0)==(0|0);
      if (!($104)) {
       $107 = $$pre;
       label = 21;
       break;
      }
      __THREW__ = 0;
      invoke_viiii(680,(27040|0),(27084|0),36,(27075|0));
      $105 = __THREW__; __THREW__ = 0;
      break;
     }
    }
    $78 = ___cxa_find_matching_catch_2()|0;
    $79 = tempRet0;
    __THREW__ = 0;
    invoke_vi(660,($3|0));
    $80 = __THREW__; __THREW__ = 0;
    $81 = $80&1;
    if ($81) {
     $82 = ___cxa_find_matching_catch_3(0|0)|0;
     $83 = tempRet0;
     ___clang_call_terminate($82);
     // unreachable;
    } else {
     ___resumeException($78|0);
     // unreachable;
    }
   }
  } else {
   $107 = $8;
   label = 21;
  }
 } while(0);
 if ((label|0) == 21) {
  $106 = $10 & 255;
  __THREW__ = 0;
  invoke_vii(689,($107|0),($106|0));
  $108 = __THREW__; __THREW__ = 0;
  $109 = $108&1;
  if (!($109)) {
   STACKTOP = sp;return;
  }
 }
 $110 = ___cxa_find_matching_catch_3(488|0)|0;
 $111 = tempRet0;
 $112 = (_llvm_eh_typeid_for((488|0))|0);
 $113 = ($111|0)==($112|0);
 if (!($113)) {
  $$1 = $110;$$116 = $111;
  ___resumeException($$1|0);
  // unreachable;
 }
 $114 = (___cxa_begin_catch(($110|0))|0);
 $115 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($4|0),($115|0));
 $116 = __THREW__; __THREW__ = 0;
 $117 = $116&1;
 do {
  if ($117) {
   label = 27;
  } else {
   $118 = ((($114)) + 4|0);
   __THREW__ = 0;
   (invoke_iii(641,($118|0),($4|0))|0);
   $119 = __THREW__; __THREW__ = 0;
   $120 = $119&1;
   if ($120) {
    $129 = ___cxa_find_matching_catch_2()|0;
    $130 = tempRet0;
    __THREW__ = 0;
    invoke_vi(637,($4|0));
    $131 = __THREW__; __THREW__ = 0;
    $132 = $131&1;
    if (!($132)) {
     $$0 = $129;$$015 = $130;
     break;
    }
    $135 = ___cxa_find_matching_catch_3(0|0)|0;
    $136 = tempRet0;
    ___clang_call_terminate($135);
    // unreachable;
   } else {
    __THREW__ = 0;
    invoke_vi(637,($4|0));
    $121 = __THREW__; __THREW__ = 0;
    $122 = $121&1;
    if ($122) {
     label = 27;
     break;
    }
    $123 = ((($0)) + 16|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ((($114)) + 16|0);
    HEAP32[$125>>2] = $124;
    __THREW__ = 0;
    invoke_v(642);
    $126 = __THREW__; __THREW__ = 0;
    label = 27;
    break;
   }
  }
 } while(0);
 if ((label|0) == 27) {
  $127 = ___cxa_find_matching_catch_2()|0;
  $128 = tempRet0;
  $$0 = $127;$$015 = $128;
 }
 __THREW__ = 0;
 invoke_v(643);
 $133 = __THREW__; __THREW__ = 0;
 $134 = $133&1;
 if ($134) {
  $135 = ___cxa_find_matching_catch_3(0|0)|0;
  $136 = tempRet0;
  ___clang_call_terminate($135);
  // unreachable;
 } else {
  $$1 = $$0;$$116 = $$015;
  ___resumeException($$1|0);
  // unreachable;
 }
}
function __ZN10LineParser9Assemble2EiNS_15ADDRESSING_MODEEj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$032 = 0, $$1 = 0, $$133 = 0, $$off = 0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp + 12|0;
 $5 = sp;
 $6 = ($3>>>0)<(256);
 if (!($6)) {
  ___assert_fail((22488|0),(22389|0),243,(26436|0));
  // unreachable;
 }
 $7 = ((4668 + (($1*40)|0)|0) + ($2<<1)|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = ($8<<16>>16)==(-1);
 if ($9) {
  ___assert_fail((22402|0),(22389|0),244,(26436|0));
  // unreachable;
 }
 $10 = HEAP32[9090]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  ___assert_fail((27040|0),(27084|0),36,(27075|0));
  // unreachable;
 }
 $12 = $8&65535;
 $13 = $12 & 65280;
 $14 = ((($10)) + 131076|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 << 8;
 $17 = ($13|0)>($16|0);
 if ($17) {
  ___assert_fail((22402|0),(22389|0),244,(26436|0));
  // unreachable;
 }
 $18 = HEAP32[9088]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  ___assert_fail((27040|0),(27060|0),38,(27075|0));
  // unreachable;
 }
 $20 = HEAP32[$18>>2]|0;
 $21 = ($20|0)==(1);
 do {
  if ($21) {
   $22 = ((($18)) + 8|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = ($23<<24>>24)==(0);
   if ($24) {
    $131 = $10;
    label = 35;
   } else {
    $25 = HEAP32[9960]|0;
    $26 = ((($25)) + -12|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (39840 + ($27)|0);
    $29 = ((($28)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = $30 | 16384;
    HEAP32[$29>>2] = $31;
    $32 = HEAP32[9960]|0;
    $33 = ((($32)) + -12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (39840 + ($34)|0);
    $36 = ((($35)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $37 & -75;
    $39 = $38 | 8;
    HEAP32[$36>>2] = $39;
    $40 = HEAP32[9960]|0;
    $41 = ((($40)) + -12|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = (39840 + ($42)|0);
    $44 = ((($43)) + 76|0);
    HEAP32[$44>>2] = 48;
    (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(39840,27661,5)|0);
    $45 = HEAP32[9960]|0;
    $46 = ((($45)) + -12|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (39840 + ($47)|0);
    $49 = ((($48)) + 12|0);
    HEAP32[$49>>2] = 4;
    $50 = HEAP32[9090]|0;
    $51 = ($50|0)==(0|0);
    if ($51) {
     ___assert_fail((27040|0),(27084|0),36,(27075|0));
     // unreachable;
    }
    $52 = ((($50)) + 131072|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi(39840,$53)|0);
    (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($54,28267,3)|0);
    $55 = HEAP32[9960]|0;
    $56 = ((($55)) + -12|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = (39840 + ($57)|0);
    $59 = ((($58)) + 12|0);
    HEAP32[$59>>2] = 2;
    $60 = $12 & 255;
    $61 = (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEj(39840,$60)|0);
    (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($61,28271,1)|0);
    $62 = HEAP32[9960]|0;
    $63 = ((($62)) + -12|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = (39840 + ($64)|0);
    $66 = ((($65)) + 12|0);
    HEAP32[$66>>2] = 2;
    $67 = (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEj(39840,$3)|0);
    (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($67,22502,6)|0);
    $68 = (((4668 + (($1*40)|0)|0)) + 32|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = (_strlen($69)|0);
    $71 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(39840,$69,$70)|0);
    (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($71,28271,1)|0);
    $72 = ($2|0)==(2);
    if ($72) {
     (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(39840,22509,1)|0);
    } else {
     $$off = (($2) + -9)|0;
     $73 = ($$off>>>0)<(3);
     if ($73) {
      (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(39840,22511,1)|0);
     }
    }
    $74 = ($2|0)==(14);
    $75 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(39840,28399,1)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ((($76)) + -12|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (($75) + ($78)|0);
    $80 = ((($79)) + 12|0);
    L27: do {
     if ($74) {
      HEAP32[$80>>2] = 4;
      $81 = HEAP32[9090]|0;
      $82 = ($81|0)==(0|0);
      if ($82) {
       ___assert_fail((27040|0),(27084|0),36,(27075|0));
       // unreachable;
      } else {
       $83 = ((($81)) + 131072|0);
       $84 = HEAP32[$83>>2]|0;
       $sext = $3 << 24;
       $85 = $sext >> 24;
       $86 = (($85) + 2)|0;
       $87 = (($86) + ($84))|0;
       (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi($75,$87)|0);
       break;
      }
     } else {
      HEAP32[$80>>2] = 2;
      (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEj($75,$3)|0);
      switch ($2|0) {
      case 4:  {
       (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(39840,22513,2)|0);
       break L27;
       break;
      }
      case 5:  {
       (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(39840,22516,2)|0);
       break L27;
       break;
      }
      case 9:  {
       (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(39840,22519,1)|0);
       break L27;
       break;
      }
      case 10:  {
       (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(39840,22521,3)|0);
       break L27;
       break;
      }
      case 11:  {
       (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(39840,22525,3)|0);
       break L27;
       break;
      }
      default: {
       break L27;
      }
      }
     }
    } while(0);
    $88 = HEAP32[9960]|0;
    $89 = ((($88)) + -12|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = (39840 + ($90)|0);
    $92 = (__ZNKSt3__28ios_base6getlocEv($91)|0);
    HEAP32[$4>>2] = $92;
    __THREW__ = 0;
    $93 = (invoke_iii(659,($4|0),(40712|0))|0);
    $94 = __THREW__; __THREW__ = 0;
    $95 = $94&1;
    if (!($95)) {
     $96 = HEAP32[$93>>2]|0;
     $97 = ((($96)) + 28|0);
     $98 = HEAP32[$97>>2]|0;
     __THREW__ = 0;
     $99 = (invoke_iii($98|0,($93|0),10)|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if (!($101)) {
      __ZNSt3__26localeD2Ev($4);
      (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc(39840,$99)|0);
      (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv(39840)|0);
      $108 = HEAP32[9960]|0;
      $109 = ((($108)) + -12|0);
      $110 = HEAP32[$109>>2]|0;
      $111 = (39840 + ($110)|0);
      $112 = ((($111)) + 4|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = $113 & -16385;
      HEAP32[$112>>2] = $114;
      $115 = HEAP32[9960]|0;
      $116 = ((($115)) + -12|0);
      $117 = HEAP32[$116>>2]|0;
      $118 = (39840 + ($117)|0);
      $119 = ((($118)) + 4|0);
      $120 = HEAP32[$119>>2]|0;
      $121 = $120 & -75;
      $122 = $121 | 2;
      HEAP32[$119>>2] = $122;
      $123 = HEAP32[9960]|0;
      $124 = ((($123)) + -12|0);
      $125 = HEAP32[$124>>2]|0;
      $126 = (39840 + ($125)|0);
      $127 = ((($126)) + 76|0);
      HEAP32[$127>>2] = 32;
      $$pre = HEAP32[9090]|0;
      $128 = ($$pre|0)==(0|0);
      if (!($128)) {
       $131 = $$pre;
       label = 35;
       break;
      }
      __THREW__ = 0;
      invoke_viiii(680,(27040|0),(27084|0),36,(27075|0));
      $129 = __THREW__; __THREW__ = 0;
      break;
     }
    }
    $102 = ___cxa_find_matching_catch_2()|0;
    $103 = tempRet0;
    __THREW__ = 0;
    invoke_vi(660,($4|0));
    $104 = __THREW__; __THREW__ = 0;
    $105 = $104&1;
    if ($105) {
     $106 = ___cxa_find_matching_catch_3(0|0)|0;
     $107 = tempRet0;
     ___clang_call_terminate($106);
     // unreachable;
    } else {
     ___resumeException($102|0);
     // unreachable;
    }
   }
  } else {
   $131 = $10;
   label = 35;
  }
 } while(0);
 if ((label|0) == 35) {
  $130 = $12 & 255;
  __THREW__ = 0;
  invoke_viii(690,($131|0),($130|0),($3|0));
  $132 = __THREW__; __THREW__ = 0;
  $133 = $132&1;
  if (!($133)) {
   STACKTOP = sp;return;
  }
 }
 $134 = ___cxa_find_matching_catch_3(488|0)|0;
 $135 = tempRet0;
 $136 = (_llvm_eh_typeid_for((488|0))|0);
 $137 = ($135|0)==($136|0);
 if (!($137)) {
  $$1 = $134;$$133 = $135;
  ___resumeException($$1|0);
  // unreachable;
 }
 $138 = (___cxa_begin_catch(($134|0))|0);
 $139 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($5|0),($139|0));
 $140 = __THREW__; __THREW__ = 0;
 $141 = $140&1;
 do {
  if ($141) {
   label = 41;
  } else {
   $142 = ((($138)) + 4|0);
   __THREW__ = 0;
   (invoke_iii(641,($142|0),($5|0))|0);
   $143 = __THREW__; __THREW__ = 0;
   $144 = $143&1;
   if ($144) {
    $153 = ___cxa_find_matching_catch_2()|0;
    $154 = tempRet0;
    __THREW__ = 0;
    invoke_vi(637,($5|0));
    $155 = __THREW__; __THREW__ = 0;
    $156 = $155&1;
    if (!($156)) {
     $$0 = $153;$$032 = $154;
     break;
    }
    $159 = ___cxa_find_matching_catch_3(0|0)|0;
    $160 = tempRet0;
    ___clang_call_terminate($159);
    // unreachable;
   } else {
    __THREW__ = 0;
    invoke_vi(637,($5|0));
    $145 = __THREW__; __THREW__ = 0;
    $146 = $145&1;
    if ($146) {
     label = 41;
     break;
    }
    $147 = ((($0)) + 16|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = ((($138)) + 16|0);
    HEAP32[$149>>2] = $148;
    __THREW__ = 0;
    invoke_v(642);
    $150 = __THREW__; __THREW__ = 0;
    label = 41;
    break;
   }
  }
 } while(0);
 if ((label|0) == 41) {
  $151 = ___cxa_find_matching_catch_2()|0;
  $152 = tempRet0;
  $$0 = $151;$$032 = $152;
 }
 __THREW__ = 0;
 invoke_v(643);
 $157 = __THREW__; __THREW__ = 0;
 $158 = $157&1;
 if ($158) {
  $159 = ___cxa_find_matching_catch_3(0|0)|0;
  $160 = tempRet0;
  ___clang_call_terminate($159);
  // unreachable;
 } else {
  $$1 = $$0;$$133 = $$032;
  ___resumeException($$1|0);
  // unreachable;
 }
}
function __ZN10LineParser9Assemble3EiNS_15ADDRESSING_MODEEj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$026 = 0, $$1 = 0, $$127 = 0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp + 12|0;
 $5 = sp;
 $6 = ($3>>>0)<(65536);
 if (!($6)) {
  ___assert_fail((22529|0),(22389|0),317,(26458|0));
  // unreachable;
 }
 $7 = ((4668 + (($1*40)|0)|0) + ($2<<1)|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = ($8<<16>>16)==(-1);
 if ($9) {
  ___assert_fail((22402|0),(22389|0),318,(26458|0));
  // unreachable;
 }
 $10 = HEAP32[9090]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  ___assert_fail((27040|0),(27084|0),36,(27075|0));
  // unreachable;
 }
 $12 = $8&65535;
 $13 = $12 & 65280;
 $14 = ((($10)) + 131076|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 << 8;
 $17 = ($13|0)>($16|0);
 if ($17) {
  ___assert_fail((22402|0),(22389|0),318,(26458|0));
  // unreachable;
 }
 $18 = HEAP32[9088]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  ___assert_fail((27040|0),(27060|0),38,(27075|0));
  // unreachable;
 }
 $20 = HEAP32[$18>>2]|0;
 $21 = ($20|0)==(1);
 do {
  if ($21) {
   $22 = ((($18)) + 8|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = ($23<<24>>24)==(0);
   if ($24) {
    $132 = $10;
    label = 28;
   } else {
    $25 = HEAP32[9960]|0;
    $26 = ((($25)) + -12|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (39840 + ($27)|0);
    $29 = ((($28)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = $30 | 16384;
    HEAP32[$29>>2] = $31;
    $32 = HEAP32[9960]|0;
    $33 = ((($32)) + -12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (39840 + ($34)|0);
    $36 = ((($35)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $37 & -75;
    $39 = $38 | 8;
    HEAP32[$36>>2] = $39;
    $40 = HEAP32[9960]|0;
    $41 = ((($40)) + -12|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = (39840 + ($42)|0);
    $44 = ((($43)) + 76|0);
    HEAP32[$44>>2] = 48;
    (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(39840,27661,5)|0);
    $45 = HEAP32[9960]|0;
    $46 = ((($45)) + -12|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (39840 + ($47)|0);
    $49 = ((($48)) + 12|0);
    HEAP32[$49>>2] = 4;
    $50 = HEAP32[9090]|0;
    $51 = ($50|0)==(0|0);
    if ($51) {
     ___assert_fail((27040|0),(27084|0),36,(27075|0));
     // unreachable;
    }
    $52 = ((($50)) + 131072|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi(39840,$53)|0);
    (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($54,28267,3)|0);
    $55 = HEAP32[9960]|0;
    $56 = ((($55)) + -12|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = (39840 + ($57)|0);
    $59 = ((($58)) + 12|0);
    HEAP32[$59>>2] = 2;
    $60 = $12 & 255;
    $61 = (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEj(39840,$60)|0);
    (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($61,28271,1)|0);
    $62 = HEAP32[9960]|0;
    $63 = ((($62)) + -12|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = (39840 + ($64)|0);
    $66 = ((($65)) + 12|0);
    HEAP32[$66>>2] = 2;
    $67 = $3 & 255;
    $68 = (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEj(39840,$67)|0);
    (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($68,28271,1)|0);
    $69 = HEAP32[9960]|0;
    $70 = ((($69)) + -12|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = (39840 + ($71)|0);
    $73 = ((($72)) + 12|0);
    HEAP32[$73>>2] = 2;
    $74 = $3 >>> 8;
    $75 = $74 & 255;
    $76 = (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEj(39840,$75)|0);
    (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($76,28267,3)|0);
    $77 = (((4668 + (($1*40)|0)|0)) + 32|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (_strlen($78)|0);
    $80 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(39840,$78,$79)|0);
    (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($80,28271,1)|0);
    $81 = $2 | 1;
    $82 = ($81|0)==(13);
    if ($82) {
     (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(39840,22511,1)|0);
    }
    $83 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(39840,28399,1)|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ((($84)) + -12|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = (($83) + ($86)|0);
    $88 = ((($87)) + 12|0);
    HEAP32[$88>>2] = 4;
    (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEj($83,$3)|0);
    switch ($2|0) {
    case 7:  {
     (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(39840,22513,2)|0);
     break;
    }
    case 8:  {
     (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(39840,22516,2)|0);
     break;
    }
    case 12:  {
     (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(39840,22519,1)|0);
     break;
    }
    case 13:  {
     (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(39840,22521,3)|0);
     break;
    }
    default: {
    }
    }
    $89 = HEAP32[9960]|0;
    $90 = ((($89)) + -12|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = (39840 + ($91)|0);
    $93 = (__ZNKSt3__28ios_base6getlocEv($92)|0);
    HEAP32[$4>>2] = $93;
    __THREW__ = 0;
    $94 = (invoke_iii(659,($4|0),(40712|0))|0);
    $95 = __THREW__; __THREW__ = 0;
    $96 = $95&1;
    if (!($96)) {
     $97 = HEAP32[$94>>2]|0;
     $98 = ((($97)) + 28|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     $100 = (invoke_iii($99|0,($94|0),10)|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if (!($102)) {
      __ZNSt3__26localeD2Ev($4);
      (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc(39840,$100)|0);
      (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv(39840)|0);
      $109 = HEAP32[9960]|0;
      $110 = ((($109)) + -12|0);
      $111 = HEAP32[$110>>2]|0;
      $112 = (39840 + ($111)|0);
      $113 = ((($112)) + 4|0);
      $114 = HEAP32[$113>>2]|0;
      $115 = $114 & -16385;
      HEAP32[$113>>2] = $115;
      $116 = HEAP32[9960]|0;
      $117 = ((($116)) + -12|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = (39840 + ($118)|0);
      $120 = ((($119)) + 4|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = $121 & -75;
      $123 = $122 | 2;
      HEAP32[$120>>2] = $123;
      $124 = HEAP32[9960]|0;
      $125 = ((($124)) + -12|0);
      $126 = HEAP32[$125>>2]|0;
      $127 = (39840 + ($126)|0);
      $128 = ((($127)) + 76|0);
      HEAP32[$128>>2] = 32;
      $$pre = HEAP32[9090]|0;
      $129 = ($$pre|0)==(0|0);
      if (!($129)) {
       $132 = $$pre;
       label = 28;
       break;
      }
      __THREW__ = 0;
      invoke_viiii(680,(27040|0),(27084|0),36,(27075|0));
      $130 = __THREW__; __THREW__ = 0;
      break;
     }
    }
    $103 = ___cxa_find_matching_catch_2()|0;
    $104 = tempRet0;
    __THREW__ = 0;
    invoke_vi(660,($4|0));
    $105 = __THREW__; __THREW__ = 0;
    $106 = $105&1;
    if ($106) {
     $107 = ___cxa_find_matching_catch_3(0|0)|0;
     $108 = tempRet0;
     ___clang_call_terminate($107);
     // unreachable;
    } else {
     ___resumeException($103|0);
     // unreachable;
    }
   }
  } else {
   $132 = $10;
   label = 28;
  }
 } while(0);
 if ((label|0) == 28) {
  $131 = $12 & 255;
  __THREW__ = 0;
  invoke_viii(691,($132|0),($131|0),($3|0));
  $133 = __THREW__; __THREW__ = 0;
  $134 = $133&1;
  if (!($134)) {
   STACKTOP = sp;return;
  }
 }
 $135 = ___cxa_find_matching_catch_3(488|0)|0;
 $136 = tempRet0;
 $137 = (_llvm_eh_typeid_for((488|0))|0);
 $138 = ($136|0)==($137|0);
 if (!($138)) {
  $$1 = $135;$$127 = $136;
  ___resumeException($$1|0);
  // unreachable;
 }
 $139 = (___cxa_begin_catch(($135|0))|0);
 $140 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($5|0),($140|0));
 $141 = __THREW__; __THREW__ = 0;
 $142 = $141&1;
 do {
  if ($142) {
   label = 34;
  } else {
   $143 = ((($139)) + 4|0);
   __THREW__ = 0;
   (invoke_iii(641,($143|0),($5|0))|0);
   $144 = __THREW__; __THREW__ = 0;
   $145 = $144&1;
   if ($145) {
    $154 = ___cxa_find_matching_catch_2()|0;
    $155 = tempRet0;
    __THREW__ = 0;
    invoke_vi(637,($5|0));
    $156 = __THREW__; __THREW__ = 0;
    $157 = $156&1;
    if (!($157)) {
     $$0 = $154;$$026 = $155;
     break;
    }
    $160 = ___cxa_find_matching_catch_3(0|0)|0;
    $161 = tempRet0;
    ___clang_call_terminate($160);
    // unreachable;
   } else {
    __THREW__ = 0;
    invoke_vi(637,($5|0));
    $146 = __THREW__; __THREW__ = 0;
    $147 = $146&1;
    if ($147) {
     label = 34;
     break;
    }
    $148 = ((($0)) + 16|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ((($139)) + 16|0);
    HEAP32[$150>>2] = $149;
    __THREW__ = 0;
    invoke_v(642);
    $151 = __THREW__; __THREW__ = 0;
    label = 34;
    break;
   }
  }
 } while(0);
 if ((label|0) == 34) {
  $152 = ___cxa_find_matching_catch_2()|0;
  $153 = tempRet0;
  $$0 = $152;$$026 = $153;
 }
 __THREW__ = 0;
 invoke_v(643);
 $158 = __THREW__; __THREW__ = 0;
 $159 = $158&1;
 if ($159) {
  $160 = ___cxa_find_matching_catch_3(0|0)|0;
  $161 = tempRet0;
  ___clang_call_terminate($160);
  // unreachable;
 } else {
  $$1 = $$0;$$127 = $$026;
  ___resumeException($$1|0);
  // unreachable;
 }
}
function __ZN10LineParser15HandleAssemblerEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$i = 0, $$0$i332 = 0, $$0$i349 = 0, $$0$i373 = 0, $$0$i397 = 0, $$0$i402 = 0, $$0$i407 = 0, $$0$i412 = 0, $$0$i417 = 0, $$0$i422 = 0, $$0166 = 0, $$0166$lpad$bodyZZ2D = 0, $$0168 = 0, $$0170 = 0, $$0172 = 0, $$0172$lpad$bodyZZ2D = 0, $$0174 = 0, $$0176 = 0, $$0178 = 0;
 var $$0180 = 0, $$0182 = 0, $$0182$lpad$bodyZZ2D = 0, $$0184 = 0, $$0186 = 0, $$0186$lpad$bodyZZ2D = 0, $$0190 = 0, $$0191 = 0, $$0193 = 0, $$0195 = 0, $$0197 = 0, $$0199 = 0, $$0201 = 0, $$0203 = 0, $$0205 = 0, $$0207 = 0, $$0209 = 0, $$0211 = 0, $$0213 = 0, $$0215 = 0;
 var $$0217 = 0, $$0219 = 0, $$0221 = 0, $$0223 = 0, $$0225 = 0, $$0227 = 0, $$0229 = 0, $$0229$lpad$bodyZZ2D = 0, $$0231427 = 0, $$0233 = 0, $$0234426 = 0, $$0275 = 0, $$0275$lpad$bodyZZ2D = 0, $$0277 = 0, $$0277$lpad$bodyZZ2D = 0, $$0279 = 0, $$0279$lpad$bodyZZ2D = 0, $$0281 = 0, $$0281$lpad$bodyZZ2D = 0, $$0283432437 = 0;
 var $$0284 = 0, $$0284$lpad$bodyZZ2D = 0, $$03$i = 0, $$03$i331 = 0, $$03$i348 = 0, $$03$i372 = 0, $$03$i396 = 0, $$03$i401 = 0, $$03$i406 = 0, $$03$i411 = 0, $$03$i416 = 0, $$03$i421 = 0, $$10244457 = 0, $$10458 = 0, $$11245460 = 0, $$11461 = 0, $$12246463 = 0, $$1232430 = 0, $$1235429 = 0, $$12464 = 0;
 var $$13247466 = 0, $$13467 = 0, $$14248469 = 0, $$14470 = 0, $$15249472 = 0, $$15473 = 0, $$16250475 = 0, $$16476 = 0, $$17251478 = 0, $$17479 = 0, $$18252481 = 0, $$18482 = 0, $$19253484 = 0, $$19485 = 0, $$20254487 = 0, $$20488 = 0, $$21255490 = 0, $$21491 = 0, $$22256493 = 0, $$2236434 = 0;
 var $$22494 = 0, $$23257496 = 0, $$23497 = 0, $$24258499 = 0, $$2435 = 0, $$24500 = 0, $$25259502 = 0, $$25503 = 0, $$27261505 = 0, $$27506 = 0, $$28262508 = 0, $$28509 = 0, $$29263511 = 0, $$29512 = 0, $$30264514 = 0, $$30515 = 0, $$31265517 = 0, $$31518 = 0, $$32266520 = 0, $$3237439 = 0;
 var $$32521 = 0, $$33267523 = 0, $$33524 = 0, $$34268526 = 0, $$3440 = 0, $$34527 = 0, $$35269529 = 0, $$35530 = 0, $$36270532 = 0, $$36533 = 0, $$37271535 = 0, $$37536 = 0, $$38272538 = 0, $$38539 = 0, $$40 = 0, $$40274 = 0, $$4238442 = 0, $$4443 = 0, $$6240445 = 0, $$6446 = 0;
 var $$7241448 = 0, $$7449 = 0, $$8242451 = 0, $$8452 = 0, $$9243454 = 0, $$9455 = 0, $$neg540 = 0, $$off = 0, $$pre = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0;
 var $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0;
 var $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0;
 var $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0;
 var $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0;
 var $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0;
 var $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0;
 var $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0;
 var $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0;
 var $1153 = 0, $1154 = 0, $1155 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
 var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
 var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
 var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0;
 var $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0;
 var $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0;
 var $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0;
 var $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0;
 var $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0;
 var $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0;
 var $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0;
 var $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0;
 var $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0;
 var $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0;
 var $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0;
 var $997 = 0, $998 = 0, $999 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $eh$lpad$body292$index7Z2D = 0, $eh$lpad$body292$indexZ2D = 0, $eh$lpad$body297$index12Z2D = 0, $eh$lpad$body297$indexZ2D = 0, $eh$lpad$body301$index17Z2D = 0, $eh$lpad$body301$indexZ2D = 0, $eh$lpad$body307$index22Z2D = 0, $eh$lpad$body307$indexZ2D = 0, $eh$lpad$body325$index27Z2D = 0, $eh$lpad$body325$indexZ2D = 0, $eh$lpad$body360$index32Z2D = 0, $eh$lpad$body360$indexZ2D = 0, $eh$lpad$body368$index37Z2D = 0, $eh$lpad$body368$indexZ2D = 0, $eh$lpad$body385$index42Z2D = 0;
 var $eh$lpad$body385$indexZ2D = 0, $eh$lpad$body395$index47Z2D = 0, $eh$lpad$body395$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(576|0);
 $2 = sp + 552|0;
 $3 = sp + 540|0;
 $4 = sp + 528|0;
 $5 = sp + 516|0;
 $6 = sp + 504|0;
 $7 = sp + 492|0;
 $8 = sp + 480|0;
 $9 = sp + 468|0;
 $10 = sp + 456|0;
 $11 = sp + 444|0;
 $12 = sp + 432|0;
 $13 = sp + 420|0;
 $14 = sp + 408|0;
 $15 = sp + 396|0;
 $16 = sp + 384|0;
 $17 = sp + 372|0;
 $18 = sp + 360|0;
 $19 = sp + 348|0;
 $20 = sp + 336|0;
 $21 = sp + 324|0;
 $22 = sp + 312|0;
 $23 = sp + 300|0;
 $24 = sp + 288|0;
 $25 = sp + 276|0;
 $26 = sp + 264|0;
 $27 = sp + 252|0;
 $28 = sp + 240|0;
 $29 = sp + 228|0;
 $30 = sp + 216|0;
 $31 = sp + 204|0;
 $32 = sp + 192|0;
 $33 = sp + 180|0;
 $34 = sp + 168|0;
 $35 = sp + 156|0;
 $36 = sp + 144|0;
 $37 = sp + 132|0;
 $38 = sp + 120|0;
 $39 = sp + 108|0;
 $40 = sp + 96|0;
 $41 = sp + 84|0;
 $42 = sp + 72|0;
 $43 = sp + 60|0;
 $44 = sp + 48|0;
 $45 = sp + 36|0;
 $46 = sp + 24|0;
 $47 = sp + 12|0;
 $48 = sp;
 $49 = ((($0)) + 16|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (__ZN10LineParser29AdvanceAndCheckEndOfStatementEv($0)|0);
 if (!($51)) {
  $52 = (4668 + (($1*40)|0)|0);
  $53 = HEAP16[$52>>1]|0;
  $54 = ($53<<16>>16)==(-1);
  if (!($54)) {
   $55 = HEAP32[9090]|0;
   $56 = ($55|0)==(0|0);
   if ($56) {
    ___assert_fail((27040|0),(27084|0),36,(27075|0));
    // unreachable;
   }
   $57 = $53&65535;
   $58 = $57 & 65280;
   $59 = ((($55)) + 131076|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $60 << 8;
   $62 = ($58|0)>($61|0);
   if (!($62)) {
    __ZN10LineParser9Assemble1EiNS_15ADDRESSING_MODEE($0,$1,0);
    STACKTOP = sp;return;
   }
  }
  $63 = (___cxa_allocate_exception(36)|0);
  $64 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vii(635,($12|0),($64|0));
  $65 = __THREW__; __THREW__ = 0;
  $66 = $65&1;
  if ($66) {
   $92 = ___cxa_find_matching_catch_2()|0;
   $93 = tempRet0;
   $$0231427 = $92;$$0234426 = $93;
  } else {
   __THREW__ = 0;
   invoke_vii(635,($11|0),($12|0));
   $67 = __THREW__; __THREW__ = 0;
   $68 = $67&1;
   L14: do {
    if ($68) {
     $$0281 = 1;
     label = 19;
    } else {
     HEAP32[$63>>2] = (4652);
     $69 = ((($63)) + 4|0);
     __THREW__ = 0;
     invoke_vii(635,($69|0),($11|0));
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     do {
      if ($71) {
       $76 = ___cxa_find_matching_catch_2()|0;
       $77 = tempRet0;
       $$0$i397 = $77;$$03$i396 = $76;
      } else {
       $72 = ((($63)) + 16|0);
       HEAP32[$72>>2] = $50;
       $73 = ((($63)) + 20|0);
       ;HEAP32[$73>>2]=0|0;HEAP32[$73+4>>2]=0|0;HEAP32[$73+8>>2]=0|0;
       __THREW__ = 0;
       invoke_viii(646,($73|0),(44984|0),0);
       $74 = __THREW__; __THREW__ = 0;
       $75 = $74&1;
       if ($75) {
        $78 = ___cxa_find_matching_catch_2()|0;
        $79 = tempRet0;
        __THREW__ = 0;
        invoke_vi(637,($69|0));
        $80 = __THREW__; __THREW__ = 0;
        $81 = $80&1;
        if (!($81)) {
         $$0$i397 = $79;$$03$i396 = $78;
         break;
        }
        $82 = ___cxa_find_matching_catch_3(0|0)|0;
        $83 = tempRet0;
        ___clang_call_terminate($82);
        // unreachable;
       } else {
        $84 = ((($63)) + 32|0);
        HEAP32[$84>>2] = 0;
        __THREW__ = 0;
        invoke_vi(637,($11|0));
        $85 = __THREW__; __THREW__ = 0;
        $86 = $85&1;
        if ($86) {
         $$0281 = 1;
         label = 19;
         break L14;
        }
        HEAP32[$63>>2] = (7356);
        __THREW__ = 0;
        invoke_viii(644,($63|0),(504|0),(7|0));
        $91 = __THREW__; __THREW__ = 0;
        $$0281 = 0;
        label = 19;
        break L14;
       }
      }
     } while(0);
     __THREW__ = 0;
     invoke_vi(637,($11|0));
     $87 = __THREW__; __THREW__ = 0;
     $88 = $87&1;
     if ($88) {
      $89 = ___cxa_find_matching_catch_3(0|0)|0;
      $90 = tempRet0;
      ___clang_call_terminate($89);
      // unreachable;
     } else {
      $$0281$lpad$bodyZZ2D = 1;$eh$lpad$body$index2Z2D = $$0$i397;$eh$lpad$body$indexZ2D = $$03$i396;
     }
    }
   } while(0);
   if ((label|0) == 19) {
    $94 = ___cxa_find_matching_catch_2()|0;
    $95 = tempRet0;
    $$0281$lpad$bodyZZ2D = $$0281;$eh$lpad$body$index2Z2D = $95;$eh$lpad$body$indexZ2D = $94;
   }
   __THREW__ = 0;
   invoke_vi(637,($12|0));
   $96 = __THREW__; __THREW__ = 0;
   $97 = $96&1;
   if ($97) {
    $1154 = ___cxa_find_matching_catch_3(0|0)|0;
    $1155 = tempRet0;
    ___clang_call_terminate($1154);
    // unreachable;
   }
   if ($$0281$lpad$bodyZZ2D) {
    $$0231427 = $eh$lpad$body$indexZ2D;$$0234426 = $eh$lpad$body$index2Z2D;
   } else {
    $$40 = $eh$lpad$body$indexZ2D;$$40274 = $eh$lpad$body$index2Z2D;
    ___resumeException($$40|0);
    // unreachable;
   }
  }
  ___cxa_free_exception(($63|0));
  $$40 = $$0231427;$$40274 = $$0234426;
  ___resumeException($$40|0);
  // unreachable;
 }
 $98 = HEAP32[$49>>2]|0;
 $99 = ((($0)) + 4|0);
 $100 = ((($99)) + 11|0);
 $101 = HEAP8[$100>>0]|0;
 $102 = ($101<<24>>24)<(0);
 if ($102) {
  $103 = ((($0)) + 8|0);
  $104 = HEAP32[$103>>2]|0;
  $107 = $104;
 } else {
  $105 = $101&255;
  $107 = $105;
 }
 $106 = ($98>>>0)<($107>>>0);
 if ($106) {
  if ($102) {
   $108 = HEAP32[$99>>2]|0;
   $110 = $108;
  } else {
   $110 = $99;
  }
  $109 = (($110) + ($98)|0);
  $111 = HEAP8[$109>>0]|0;
  $112 = ($111<<24>>24)==(35);
  if ($112) {
   $113 = (((4668 + (($1*40)|0)|0)) + 4|0);
   $114 = HEAP16[$113>>1]|0;
   $115 = ($114<<16>>16)==(-1);
   if (!($115)) {
    $116 = HEAP32[9090]|0;
    $117 = ($116|0)==(0|0);
    if ($117) {
     ___assert_fail((27040|0),(27084|0),36,(27075|0));
     // unreachable;
    }
    $118 = $114&65535;
    $119 = $118 & 65280;
    $120 = ((($116)) + 131076|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = $121 << 8;
    $123 = ($119|0)>($122|0);
    if (!($123)) {
     $159 = (($98) + 1)|0;
     HEAP32[$49>>2] = $159;
     __THREW__ = 0;
     $160 = (invoke_iii(692,($0|0),0)|0);
     $161 = __THREW__; __THREW__ = 0;
     $162 = $161&1;
     L53: do {
      if ($162) {
       $163 = ___cxa_find_matching_catch_3(368|0)|0;
       $164 = tempRet0;
       $165 = (_llvm_eh_typeid_for((368|0))|0);
       $166 = ($164|0)==($165|0);
       if (!($166)) {
        $$40 = $163;$$40274 = $164;
        ___resumeException($$40|0);
        // unreachable;
       }
       (___cxa_begin_catch(($163|0))|0);
       $167 = HEAP32[9088]|0;
       $168 = ($167|0)==(0|0);
       do {
        if ($168) {
         __THREW__ = 0;
         invoke_viiii(680,(27040|0),(27060|0),38,(27075|0));
         $169 = __THREW__; __THREW__ = 0;
        } else {
         $170 = HEAP32[$167>>2]|0;
         $171 = ($170|0)==(0);
         if ($171) {
          ___cxa_end_catch();
          $$0283432437 = 0;
          break L53;
         } else {
          __THREW__ = 0;
          invoke_v(642);
          $176 = __THREW__; __THREW__ = 0;
          break;
         }
        }
       } while(0);
       $172 = ___cxa_find_matching_catch_2()|0;
       $173 = tempRet0;
       __THREW__ = 0;
       invoke_v(643);
       $174 = __THREW__; __THREW__ = 0;
       $175 = $174&1;
       if ($175) {
        $1154 = ___cxa_find_matching_catch_3(0|0)|0;
        $1155 = tempRet0;
        ___clang_call_terminate($1154);
        // unreachable;
       } else {
        $$40 = $172;$$40274 = $173;
        ___resumeException($$40|0);
        // unreachable;
       }
      } else {
       $177 = ($160|0)>(255);
       if ($177) {
        $178 = (___cxa_allocate_exception(36)|0);
        __THREW__ = 0;
        invoke_vii(635,($14|0),($99|0));
        $179 = __THREW__; __THREW__ = 0;
        $180 = $179&1;
        if ($180) {
         $206 = ___cxa_find_matching_catch_2()|0;
         $207 = tempRet0;
         $$2236434 = $207;$$2435 = $206;
        } else {
         __THREW__ = 0;
         invoke_vii(635,($9|0),($14|0));
         $181 = __THREW__; __THREW__ = 0;
         $182 = $181&1;
         L74: do {
          if ($182) {
           $$0279 = 1;
           label = 72;
          } else {
           HEAP32[$178>>2] = (4652);
           $183 = ((($178)) + 4|0);
           __THREW__ = 0;
           invoke_vii(635,($183|0),($9|0));
           $184 = __THREW__; __THREW__ = 0;
           $185 = $184&1;
           do {
            if ($185) {
             $190 = ___cxa_find_matching_catch_2()|0;
             $191 = tempRet0;
             $$0$i407 = $191;$$03$i406 = $190;
            } else {
             $186 = ((($178)) + 16|0);
             HEAP32[$186>>2] = $159;
             $187 = ((($178)) + 20|0);
             ;HEAP32[$187>>2]=0|0;HEAP32[$187+4>>2]=0|0;HEAP32[$187+8>>2]=0|0;
             __THREW__ = 0;
             invoke_viii(646,($187|0),(44984|0),0);
             $188 = __THREW__; __THREW__ = 0;
             $189 = $188&1;
             if ($189) {
              $192 = ___cxa_find_matching_catch_2()|0;
              $193 = tempRet0;
              __THREW__ = 0;
              invoke_vi(637,($183|0));
              $194 = __THREW__; __THREW__ = 0;
              $195 = $194&1;
              if (!($195)) {
               $$0$i407 = $193;$$03$i406 = $192;
               break;
              }
              $196 = ___cxa_find_matching_catch_3(0|0)|0;
              $197 = tempRet0;
              ___clang_call_terminate($196);
              // unreachable;
             } else {
              $198 = ((($178)) + 32|0);
              HEAP32[$198>>2] = 0;
              __THREW__ = 0;
              invoke_vi(637,($9|0));
              $199 = __THREW__; __THREW__ = 0;
              $200 = $199&1;
              if ($200) {
               $$0279 = 1;
               label = 72;
               break L74;
              }
              HEAP32[$178>>2] = (7404);
              __THREW__ = 0;
              invoke_viii(644,($178|0),(536|0),(7|0));
              $205 = __THREW__; __THREW__ = 0;
              $$0279 = 0;
              label = 72;
              break L74;
             }
            }
           } while(0);
           __THREW__ = 0;
           invoke_vi(637,($9|0));
           $201 = __THREW__; __THREW__ = 0;
           $202 = $201&1;
           if ($202) {
            $203 = ___cxa_find_matching_catch_3(0|0)|0;
            $204 = tempRet0;
            ___clang_call_terminate($203);
            // unreachable;
           } else {
            $$0279$lpad$bodyZZ2D = 1;$eh$lpad$body297$index12Z2D = $$0$i407;$eh$lpad$body297$indexZ2D = $$03$i406;
           }
          }
         } while(0);
         if ((label|0) == 72) {
          $208 = ___cxa_find_matching_catch_2()|0;
          $209 = tempRet0;
          $$0279$lpad$bodyZZ2D = $$0279;$eh$lpad$body297$index12Z2D = $209;$eh$lpad$body297$indexZ2D = $208;
         }
         __THREW__ = 0;
         invoke_vi(637,($14|0));
         $210 = __THREW__; __THREW__ = 0;
         $211 = $210&1;
         if ($211) {
          $1154 = ___cxa_find_matching_catch_3(0|0)|0;
          $1155 = tempRet0;
          ___clang_call_terminate($1154);
          // unreachable;
         }
         if ($$0279$lpad$bodyZZ2D) {
          $$2236434 = $eh$lpad$body297$index12Z2D;$$2435 = $eh$lpad$body297$indexZ2D;
         } else {
          $$40 = $eh$lpad$body297$indexZ2D;$$40274 = $eh$lpad$body297$index12Z2D;
          ___resumeException($$40|0);
          // unreachable;
         }
        }
        ___cxa_free_exception(($178|0));
        $$40 = $$2435;$$40274 = $$2236434;
        ___resumeException($$40|0);
        // unreachable;
       }
       $212 = ($160|0)<(0);
       if ($212) {
        $213 = (___cxa_allocate_exception(36)|0);
        __THREW__ = 0;
        invoke_vii(635,($15|0),($99|0));
        $214 = __THREW__; __THREW__ = 0;
        $215 = $214&1;
        if ($215) {
         $241 = ___cxa_find_matching_catch_2()|0;
         $242 = tempRet0;
         $$3237439 = $242;$$3440 = $241;
        } else {
         __THREW__ = 0;
         invoke_vii(635,($8|0),($15|0));
         $216 = __THREW__; __THREW__ = 0;
         $217 = $216&1;
         L100: do {
          if ($217) {
           $$0277 = 1;
           label = 89;
          } else {
           HEAP32[$213>>2] = (4652);
           $218 = ((($213)) + 4|0);
           __THREW__ = 0;
           invoke_vii(635,($218|0),($8|0));
           $219 = __THREW__; __THREW__ = 0;
           $220 = $219&1;
           do {
            if ($220) {
             $225 = ___cxa_find_matching_catch_2()|0;
             $226 = tempRet0;
             $$0$i349 = $226;$$03$i348 = $225;
            } else {
             $221 = ((($213)) + 16|0);
             HEAP32[$221>>2] = $159;
             $222 = ((($213)) + 20|0);
             ;HEAP32[$222>>2]=0|0;HEAP32[$222+4>>2]=0|0;HEAP32[$222+8>>2]=0|0;
             __THREW__ = 0;
             invoke_viii(646,($222|0),(44984|0),0);
             $223 = __THREW__; __THREW__ = 0;
             $224 = $223&1;
             if ($224) {
              $227 = ___cxa_find_matching_catch_2()|0;
              $228 = tempRet0;
              __THREW__ = 0;
              invoke_vi(637,($218|0));
              $229 = __THREW__; __THREW__ = 0;
              $230 = $229&1;
              if (!($230)) {
               $$0$i349 = $228;$$03$i348 = $227;
               break;
              }
              $231 = ___cxa_find_matching_catch_3(0|0)|0;
              $232 = tempRet0;
              ___clang_call_terminate($231);
              // unreachable;
             } else {
              $233 = ((($213)) + 32|0);
              HEAP32[$233>>2] = 0;
              __THREW__ = 0;
              invoke_vi(637,($8|0));
              $234 = __THREW__; __THREW__ = 0;
              $235 = $234&1;
              if ($235) {
               $$0277 = 1;
               label = 89;
               break L100;
              }
              HEAP32[$213>>2] = (7428);
              __THREW__ = 0;
              invoke_viii(644,($213|0),(552|0),(7|0));
              $240 = __THREW__; __THREW__ = 0;
              $$0277 = 0;
              label = 89;
              break L100;
             }
            }
           } while(0);
           __THREW__ = 0;
           invoke_vi(637,($8|0));
           $236 = __THREW__; __THREW__ = 0;
           $237 = $236&1;
           if ($237) {
            $238 = ___cxa_find_matching_catch_3(0|0)|0;
            $239 = tempRet0;
            ___clang_call_terminate($238);
            // unreachable;
           } else {
            $$0277$lpad$bodyZZ2D = 1;$eh$lpad$body301$index17Z2D = $$0$i349;$eh$lpad$body301$indexZ2D = $$03$i348;
           }
          }
         } while(0);
         if ((label|0) == 89) {
          $243 = ___cxa_find_matching_catch_2()|0;
          $244 = tempRet0;
          $$0277$lpad$bodyZZ2D = $$0277;$eh$lpad$body301$index17Z2D = $244;$eh$lpad$body301$indexZ2D = $243;
         }
         __THREW__ = 0;
         invoke_vi(637,($15|0));
         $245 = __THREW__; __THREW__ = 0;
         $246 = $245&1;
         if ($246) {
          $1154 = ___cxa_find_matching_catch_3(0|0)|0;
          $1155 = tempRet0;
          ___clang_call_terminate($1154);
          // unreachable;
         }
         if ($$0277$lpad$bodyZZ2D) {
          $$3237439 = $eh$lpad$body301$index17Z2D;$$3440 = $eh$lpad$body301$indexZ2D;
         } else {
          $$40 = $eh$lpad$body301$indexZ2D;$$40274 = $eh$lpad$body301$index17Z2D;
          ___resumeException($$40|0);
          // unreachable;
         }
        }
        ___cxa_free_exception(($213|0));
        $$40 = $$3440;$$40274 = $$3237439;
        ___resumeException($$40|0);
        // unreachable;
       } else {
        $$0283432437 = $160;
       }
      }
     } while(0);
     $247 = HEAP32[$49>>2]|0;
     $248 = HEAP8[$100>>0]|0;
     $249 = ($248<<24>>24)<(0);
     if ($249) {
      $250 = ((($0)) + 8|0);
      $251 = HEAP32[$250>>2]|0;
      $254 = $251;
     } else {
      $252 = $248&255;
      $254 = $252;
     }
     $253 = ($247>>>0)<($254>>>0);
     if ($253) {
      if ($249) {
       $255 = HEAP32[$99>>2]|0;
       $257 = $255;
      } else {
       $257 = $99;
      }
      $256 = (($257) + ($247)|0);
      $258 = HEAP8[$256>>0]|0;
      $259 = ($258<<24>>24)==(44);
      if ($259) {
       $260 = (___cxa_allocate_exception(36)|0);
       __THREW__ = 0;
       invoke_vii(635,($16|0),($99|0));
       $261 = __THREW__; __THREW__ = 0;
       $262 = $261&1;
       do {
        if ($262) {
         $289 = ___cxa_find_matching_catch_2()|0;
         $290 = tempRet0;
         $$4238442 = $290;$$4443 = $289;
        } else {
         $263 = HEAP32[$49>>2]|0;
         __THREW__ = 0;
         invoke_vii(635,($7|0),($16|0));
         $264 = __THREW__; __THREW__ = 0;
         $265 = $264&1;
         L136: do {
          if ($265) {
           $$0275 = 1;
           label = 113;
          } else {
           HEAP32[$260>>2] = (4652);
           $266 = ((($260)) + 4|0);
           __THREW__ = 0;
           invoke_vii(635,($266|0),($7|0));
           $267 = __THREW__; __THREW__ = 0;
           $268 = $267&1;
           do {
            if ($268) {
             $273 = ___cxa_find_matching_catch_2()|0;
             $274 = tempRet0;
             $$0$i = $274;$$03$i = $273;
            } else {
             $269 = ((($260)) + 16|0);
             HEAP32[$269>>2] = $263;
             $270 = ((($260)) + 20|0);
             ;HEAP32[$270>>2]=0|0;HEAP32[$270+4>>2]=0|0;HEAP32[$270+8>>2]=0|0;
             __THREW__ = 0;
             invoke_viii(646,($270|0),(44984|0),0);
             $271 = __THREW__; __THREW__ = 0;
             $272 = $271&1;
             if ($272) {
              $275 = ___cxa_find_matching_catch_2()|0;
              $276 = tempRet0;
              __THREW__ = 0;
              invoke_vi(637,($266|0));
              $277 = __THREW__; __THREW__ = 0;
              $278 = $277&1;
              if (!($278)) {
               $$0$i = $276;$$03$i = $275;
               break;
              }
              $279 = ___cxa_find_matching_catch_3(0|0)|0;
              $280 = tempRet0;
              ___clang_call_terminate($279);
              // unreachable;
             } else {
              $281 = ((($260)) + 32|0);
              HEAP32[$281>>2] = 0;
              __THREW__ = 0;
              invoke_vi(637,($7|0));
              $282 = __THREW__; __THREW__ = 0;
              $283 = $282&1;
              if ($283) {
               $$0275 = 1;
               label = 113;
               break L136;
              }
              HEAP32[$260>>2] = (7452);
              __THREW__ = 0;
              invoke_viii(644,($260|0),(568|0),(7|0));
              $288 = __THREW__; __THREW__ = 0;
              $$0275 = 0;
              label = 113;
              break L136;
             }
            }
           } while(0);
           __THREW__ = 0;
           invoke_vi(637,($7|0));
           $284 = __THREW__; __THREW__ = 0;
           $285 = $284&1;
           if (!($285)) {
            $$0275$lpad$bodyZZ2D = 1;$eh$lpad$body307$index22Z2D = $$0$i;$eh$lpad$body307$indexZ2D = $$03$i;
            break;
           }
           $286 = ___cxa_find_matching_catch_3(0|0)|0;
           $287 = tempRet0;
           ___clang_call_terminate($286);
           // unreachable;
          }
         } while(0);
         if ((label|0) == 113) {
          $291 = ___cxa_find_matching_catch_2()|0;
          $292 = tempRet0;
          $$0275$lpad$bodyZZ2D = $$0275;$eh$lpad$body307$index22Z2D = $292;$eh$lpad$body307$indexZ2D = $291;
         }
         __THREW__ = 0;
         invoke_vi(637,($16|0));
         $293 = __THREW__; __THREW__ = 0;
         $294 = $293&1;
         if ($294) {
          $1154 = ___cxa_find_matching_catch_3(0|0)|0;
          $1155 = tempRet0;
          ___clang_call_terminate($1154);
          // unreachable;
         }
         if ($$0275$lpad$bodyZZ2D) {
          $$4238442 = $eh$lpad$body307$index22Z2D;$$4443 = $eh$lpad$body307$indexZ2D;
          break;
         } else {
          $$40 = $eh$lpad$body307$indexZ2D;$$40274 = $eh$lpad$body307$index22Z2D;
         }
         ___resumeException($$40|0);
         // unreachable;
        }
       } while(0);
       ___cxa_free_exception(($260|0));
       $$40 = $$4443;$$40274 = $$4238442;
       ___resumeException($$40|0);
       // unreachable;
      }
     }
     __ZN10LineParser9Assemble2EiNS_15ADDRESSING_MODEEj($0,$1,2,$$0283432437);
     STACKTOP = sp;return;
    }
   }
   $124 = (___cxa_allocate_exception(36)|0);
   __THREW__ = 0;
   invoke_vii(635,($13|0),($99|0));
   $125 = __THREW__; __THREW__ = 0;
   $126 = $125&1;
   if ($126) {
    $153 = ___cxa_find_matching_catch_2()|0;
    $154 = tempRet0;
    $$1232430 = $153;$$1235429 = $154;
   } else {
    $127 = HEAP32[$49>>2]|0;
    __THREW__ = 0;
    invoke_vii(635,($10|0),($13|0));
    $128 = __THREW__; __THREW__ = 0;
    $129 = $128&1;
    L163: do {
     if ($129) {
      $$0284 = 1;
      label = 47;
     } else {
      HEAP32[$124>>2] = (4652);
      $130 = ((($124)) + 4|0);
      __THREW__ = 0;
      invoke_vii(635,($130|0),($10|0));
      $131 = __THREW__; __THREW__ = 0;
      $132 = $131&1;
      do {
       if ($132) {
        $137 = ___cxa_find_matching_catch_2()|0;
        $138 = tempRet0;
        $$0$i402 = $138;$$03$i401 = $137;
       } else {
        $133 = ((($124)) + 16|0);
        HEAP32[$133>>2] = $127;
        $134 = ((($124)) + 20|0);
        ;HEAP32[$134>>2]=0|0;HEAP32[$134+4>>2]=0|0;HEAP32[$134+8>>2]=0|0;
        __THREW__ = 0;
        invoke_viii(646,($134|0),(44984|0),0);
        $135 = __THREW__; __THREW__ = 0;
        $136 = $135&1;
        if ($136) {
         $139 = ___cxa_find_matching_catch_2()|0;
         $140 = tempRet0;
         __THREW__ = 0;
         invoke_vi(637,($130|0));
         $141 = __THREW__; __THREW__ = 0;
         $142 = $141&1;
         if (!($142)) {
          $$0$i402 = $140;$$03$i401 = $139;
          break;
         }
         $143 = ___cxa_find_matching_catch_3(0|0)|0;
         $144 = tempRet0;
         ___clang_call_terminate($143);
         // unreachable;
        } else {
         $145 = ((($124)) + 32|0);
         HEAP32[$145>>2] = 0;
         __THREW__ = 0;
         invoke_vi(637,($10|0));
         $146 = __THREW__; __THREW__ = 0;
         $147 = $146&1;
         if ($147) {
          $$0284 = 1;
          label = 47;
          break L163;
         }
         HEAP32[$124>>2] = (7380);
         __THREW__ = 0;
         invoke_viii(644,($124|0),(520|0),(7|0));
         $152 = __THREW__; __THREW__ = 0;
         $$0284 = 0;
         label = 47;
         break L163;
        }
       }
      } while(0);
      __THREW__ = 0;
      invoke_vi(637,($10|0));
      $148 = __THREW__; __THREW__ = 0;
      $149 = $148&1;
      if ($149) {
       $150 = ___cxa_find_matching_catch_3(0|0)|0;
       $151 = tempRet0;
       ___clang_call_terminate($150);
       // unreachable;
      } else {
       $$0284$lpad$bodyZZ2D = 1;$eh$lpad$body292$index7Z2D = $$0$i402;$eh$lpad$body292$indexZ2D = $$03$i401;
      }
     }
    } while(0);
    if ((label|0) == 47) {
     $155 = ___cxa_find_matching_catch_2()|0;
     $156 = tempRet0;
     $$0284$lpad$bodyZZ2D = $$0284;$eh$lpad$body292$index7Z2D = $156;$eh$lpad$body292$indexZ2D = $155;
    }
    __THREW__ = 0;
    invoke_vi(637,($13|0));
    $157 = __THREW__; __THREW__ = 0;
    $158 = $157&1;
    if ($158) {
     $1154 = ___cxa_find_matching_catch_3(0|0)|0;
     $1155 = tempRet0;
     ___clang_call_terminate($1154);
     // unreachable;
    }
    if ($$0284$lpad$bodyZZ2D) {
     $$1232430 = $eh$lpad$body292$indexZ2D;$$1235429 = $eh$lpad$body292$index7Z2D;
    } else {
     $$40 = $eh$lpad$body292$indexZ2D;$$40274 = $eh$lpad$body292$index7Z2D;
     ___resumeException($$40|0);
     // unreachable;
    }
   }
   ___cxa_free_exception(($124|0));
   $$40 = $$1232430;$$40274 = $$1235429;
   ___resumeException($$40|0);
   // unreachable;
  }
 }
 if ($102) {
  $295 = ((($0)) + 8|0);
  $296 = HEAP32[$295>>2]|0;
  $299 = $296;
 } else {
  $297 = $101&255;
  $299 = $297;
 }
 $298 = ($98>>>0)<($299>>>0);
 do {
  if ($298) {
   if ($102) {
    $300 = HEAP32[$99>>2]|0;
    $302 = $300;
   } else {
    $302 = $99;
   }
   $301 = (($302) + ($98)|0);
   $303 = HEAP8[$301>>0]|0;
   $304 = $303 << 24 >> 24;
   $305 = (_toupper($304)|0);
   $306 = ($305|0)==(65);
   if ($306) {
    $307 = (((4668 + (($1*40)|0)|0)) + 2|0);
    $308 = HEAP16[$307>>1]|0;
    $309 = ($308<<16>>16)==(-1);
    if ($309) {
     $320 = $101;
    } else {
     $310 = HEAP32[9090]|0;
     $311 = ($310|0)==(0|0);
     if ($311) {
      ___assert_fail((27040|0),(27084|0),36,(27075|0));
      // unreachable;
     }
     $312 = $308&65535;
     $313 = $312 & 65280;
     $314 = ((($310)) + 131076|0);
     $315 = HEAP32[$314>>2]|0;
     $316 = $315 << 8;
     $317 = ($313|0)>($316|0);
     if ($317) {
      $320 = $101;
     } else {
      $318 = (($98) + 1)|0;
      HEAP32[$49>>2] = $318;
      $319 = (__ZN10LineParser29AdvanceAndCheckEndOfStatementEv($0)|0);
      if ($319) {
       HEAP32[$49>>2] = $98;
       $$pre = HEAP8[$100>>0]|0;
       $320 = $$pre;
       break;
      }
      __ZN10LineParser9Assemble1EiNS_15ADDRESSING_MODEE($0,$1,1);
      STACKTOP = sp;return;
     }
    }
   } else {
    $320 = $101;
   }
  } else {
   $320 = $101;
  }
 } while(0);
 $321 = ($320<<24>>24)<(0);
 if ($321) {
  $322 = ((($0)) + 8|0);
  $323 = HEAP32[$322>>2]|0;
  $326 = $323;
 } else {
  $324 = $320&255;
  $326 = $324;
 }
 $325 = ($98>>>0)<($326>>>0);
 if ($325) {
  if ($321) {
   $327 = HEAP32[$99>>2]|0;
   $329 = $327;
  } else {
   $329 = $99;
  }
  $328 = (($329) + ($98)|0);
  $330 = HEAP8[$328>>0]|0;
  $331 = ($330<<24>>24)==(40);
  if ($331) {
   $332 = (($98) + 1)|0;
   HEAP32[$49>>2] = $332;
   __THREW__ = 0;
   $333 = (invoke_iii(692,($0|0),1)|0);
   $334 = __THREW__; __THREW__ = 0;
   $335 = $334&1;
   L217: do {
    if ($335) {
     $336 = ___cxa_find_matching_catch_3(368|0)|0;
     $337 = tempRet0;
     $338 = (_llvm_eh_typeid_for((368|0))|0);
     $339 = ($337|0)==($338|0);
     if (!($339)) {
      $$40 = $336;$$40274 = $337;
      ___resumeException($$40|0);
      // unreachable;
     }
     (___cxa_begin_catch(($336|0))|0);
     $340 = HEAP32[9088]|0;
     $341 = ($340|0)==(0|0);
     do {
      if ($341) {
       __THREW__ = 0;
       invoke_viiii(680,(27040|0),(27060|0),38,(27075|0));
       $342 = __THREW__; __THREW__ = 0;
      } else {
       $343 = HEAP32[$340>>2]|0;
       $344 = ($343|0)==(0);
       if ($344) {
        ___cxa_end_catch();
        $$0233 = 0;
        break L217;
       } else {
        __THREW__ = 0;
        invoke_v(642);
        $349 = __THREW__; __THREW__ = 0;
        break;
       }
      }
     } while(0);
     $345 = ___cxa_find_matching_catch_2()|0;
     $346 = tempRet0;
     __THREW__ = 0;
     invoke_v(643);
     $347 = __THREW__; __THREW__ = 0;
     $348 = $347&1;
     if ($348) {
      $1154 = ___cxa_find_matching_catch_3(0|0)|0;
      $1155 = tempRet0;
      ___clang_call_terminate($1154);
      // unreachable;
     } else {
      $$40 = $345;$$40274 = $346;
      ___resumeException($$40|0);
      // unreachable;
     }
    } else {
     $$0233 = $333;
    }
   } while(0);
   $350 = HEAP32[$49>>2]|0;
   $351 = HEAP8[$100>>0]|0;
   $352 = ($351<<24>>24)<(0);
   if ($352) {
    $353 = ((($0)) + 8|0);
    $354 = HEAP32[$353>>2]|0;
    $357 = $354;
   } else {
    $355 = $351&255;
    $357 = $355;
   }
   $356 = ($350>>>0)<($357>>>0);
   if ($356) {
    if ($352) {
     $358 = HEAP32[$99>>2]|0;
     $360 = $358;
    } else {
     $360 = $99;
    }
    $359 = (($360) + ($350)|0);
    $361 = HEAP8[$359>>0]|0;
    $362 = ($361<<24>>24)==(41);
    if ($362) {
     $363 = (($350) + 1)|0;
     HEAP32[$49>>2] = $363;
     $364 = (__ZN10LineParser29AdvanceAndCheckEndOfStatementEv($0)|0);
     if (!($364)) {
      $365 = (((4668 + (($1*40)|0)|0)) + 24|0);
      $366 = HEAP16[$365>>1]|0;
      $367 = ($1|0)==(31);
      do {
       if ($367) {
        $368 = HEAP32[9090]|0;
        $369 = ($368|0)==(0|0);
        if ($369) {
         ___assert_fail((27040|0),(27084|0),36,(27075|0));
         // unreachable;
        }
        $370 = $366&65535;
        $371 = $370 & 65280;
        $372 = ((($368)) + 131076|0);
        $373 = HEAP32[$372>>2]|0;
        $374 = $373 << 8;
        $375 = ($371|0)>($374|0);
        if ($375) {
         break;
        }
        $376 = $$0233 & 255;
        $377 = ($376|0)==(255);
        if (!($377)) {
         __ZN10LineParser9Assemble3EiNS_15ADDRESSING_MODEEj($0,31,12,$$0233);
         STACKTOP = sp;return;
        }
        $378 = (___cxa_allocate_exception(36)|0);
        __THREW__ = 0;
        invoke_vii(635,($17|0),($99|0));
        $379 = __THREW__; __THREW__ = 0;
        $380 = $379&1;
        do {
         if ($380) {
          $406 = ___cxa_find_matching_catch_2()|0;
          $407 = tempRet0;
          $$6240445 = $407;$$6446 = $406;
         } else {
          __THREW__ = 0;
          invoke_vii(635,($6|0),($17|0));
          $381 = __THREW__; __THREW__ = 0;
          $382 = $381&1;
          L259: do {
           if ($382) {
            $$0229 = 1;
            label = 175;
           } else {
            HEAP32[$378>>2] = (4652);
            $383 = ((($378)) + 4|0);
            __THREW__ = 0;
            invoke_vii(635,($383|0),($6|0));
            $384 = __THREW__; __THREW__ = 0;
            $385 = $384&1;
            do {
             if ($385) {
              $390 = ___cxa_find_matching_catch_2()|0;
              $391 = tempRet0;
              $$0$i332 = $391;$$03$i331 = $390;
             } else {
              $386 = ((($378)) + 16|0);
              HEAP32[$386>>2] = $332;
              $387 = ((($378)) + 20|0);
              ;HEAP32[$387>>2]=0|0;HEAP32[$387+4>>2]=0|0;HEAP32[$387+8>>2]=0|0;
              __THREW__ = 0;
              invoke_viii(646,($387|0),(44984|0),0);
              $388 = __THREW__; __THREW__ = 0;
              $389 = $388&1;
              if ($389) {
               $392 = ___cxa_find_matching_catch_2()|0;
               $393 = tempRet0;
               __THREW__ = 0;
               invoke_vi(637,($383|0));
               $394 = __THREW__; __THREW__ = 0;
               $395 = $394&1;
               if (!($395)) {
                $$0$i332 = $393;$$03$i331 = $392;
                break;
               }
               $396 = ___cxa_find_matching_catch_3(0|0)|0;
               $397 = tempRet0;
               ___clang_call_terminate($396);
               // unreachable;
              } else {
               $398 = ((($378)) + 32|0);
               HEAP32[$398>>2] = 0;
               __THREW__ = 0;
               invoke_vi(637,($6|0));
               $399 = __THREW__; __THREW__ = 0;
               $400 = $399&1;
               if ($400) {
                $$0229 = 1;
                label = 175;
                break L259;
               }
               HEAP32[$378>>2] = (7476);
               __THREW__ = 0;
               invoke_viii(644,($378|0),(584|0),(7|0));
               $405 = __THREW__; __THREW__ = 0;
               $$0229 = 0;
               label = 175;
               break L259;
              }
             }
            } while(0);
            __THREW__ = 0;
            invoke_vi(637,($6|0));
            $401 = __THREW__; __THREW__ = 0;
            $402 = $401&1;
            if (!($402)) {
             $$0229$lpad$bodyZZ2D = 1;$eh$lpad$body325$index27Z2D = $$0$i332;$eh$lpad$body325$indexZ2D = $$03$i331;
             break;
            }
            $403 = ___cxa_find_matching_catch_3(0|0)|0;
            $404 = tempRet0;
            ___clang_call_terminate($403);
            // unreachable;
           }
          } while(0);
          if ((label|0) == 175) {
           $408 = ___cxa_find_matching_catch_2()|0;
           $409 = tempRet0;
           $$0229$lpad$bodyZZ2D = $$0229;$eh$lpad$body325$index27Z2D = $409;$eh$lpad$body325$indexZ2D = $408;
          }
          __THREW__ = 0;
          invoke_vi(637,($17|0));
          $410 = __THREW__; __THREW__ = 0;
          $411 = $410&1;
          if ($411) {
           $1154 = ___cxa_find_matching_catch_3(0|0)|0;
           $1155 = tempRet0;
           ___clang_call_terminate($1154);
           // unreachable;
          }
          if ($$0229$lpad$bodyZZ2D) {
           $$6240445 = $eh$lpad$body325$index27Z2D;$$6446 = $eh$lpad$body325$indexZ2D;
           break;
          } else {
           $$40 = $eh$lpad$body325$indexZ2D;$$40274 = $eh$lpad$body325$index27Z2D;
          }
          ___resumeException($$40|0);
          // unreachable;
         }
        } while(0);
        ___cxa_free_exception(($378|0));
        $$40 = $$6446;$$40274 = $$6240445;
        ___resumeException($$40|0);
        // unreachable;
       }
      } while(0);
      $412 = (((4668 + (($1*40)|0)|0)) + 18|0);
      $413 = HEAP16[$412>>1]|0;
      $414 = ($413<<16>>16)==(-1);
      do {
       if (!($414)) {
        $415 = HEAP32[9090]|0;
        $416 = ($415|0)==(0|0);
        if ($416) {
         ___assert_fail((27040|0),(27084|0),36,(27075|0));
         // unreachable;
        }
        $417 = $413&65535;
        $418 = $417 & 65280;
        $419 = ((($415)) + 131076|0);
        $420 = HEAP32[$419>>2]|0;
        $421 = $420 << 8;
        $422 = ($418|0)>($421|0);
        if ($422) {
         break;
        }
        $435 = ($$0233|0)>(255);
        if ($435) {
         $436 = (___cxa_allocate_exception(36)|0);
         __THREW__ = 0;
         invoke_vii(635,($19|0),($99|0));
         $437 = __THREW__; __THREW__ = 0;
         $438 = $437&1;
         do {
          if ($438) {
           $442 = ___cxa_find_matching_catch_2()|0;
           $443 = tempRet0;
           $$8242451 = $443;$$8452 = $442;
          } else {
           __THREW__ = 0;
           invoke_viii(694,($436|0),($19|0),($332|0));
           $439 = __THREW__; __THREW__ = 0;
           $440 = $439&1;
           if ($440) {
            $$0225 = 1;
           } else {
            __THREW__ = 0;
            invoke_viii(644,($436|0),(616|0),(7|0));
            $441 = __THREW__; __THREW__ = 0;
            $$0225 = 0;
           }
           $444 = ___cxa_find_matching_catch_2()|0;
           $445 = tempRet0;
           __THREW__ = 0;
           invoke_vi(637,($19|0));
           $446 = __THREW__; __THREW__ = 0;
           $447 = $446&1;
           if ($447) {
            $1154 = ___cxa_find_matching_catch_3(0|0)|0;
            $1155 = tempRet0;
            ___clang_call_terminate($1154);
            // unreachable;
           }
           if ($$0225) {
            $$8242451 = $445;$$8452 = $444;
            break;
           } else {
            $$40 = $444;$$40274 = $445;
           }
           ___resumeException($$40|0);
           // unreachable;
          }
         } while(0);
         ___cxa_free_exception(($436|0));
         $$40 = $$8452;$$40274 = $$8242451;
         ___resumeException($$40|0);
         // unreachable;
        }
        $448 = ($$0233|0)<(0);
        if (!($448)) {
         __ZN10LineParser9Assemble2EiNS_15ADDRESSING_MODEEj($0,$1,9,$$0233);
         STACKTOP = sp;return;
        }
        $449 = (___cxa_allocate_exception(36)|0);
        __THREW__ = 0;
        invoke_vii(635,($20|0),($99|0));
        $450 = __THREW__; __THREW__ = 0;
        $451 = $450&1;
        do {
         if ($451) {
          $455 = ___cxa_find_matching_catch_2()|0;
          $456 = tempRet0;
          $$9243454 = $456;$$9455 = $455;
         } else {
          __THREW__ = 0;
          invoke_viii(695,($449|0),($20|0),($332|0));
          $452 = __THREW__; __THREW__ = 0;
          $453 = $452&1;
          if ($453) {
           $$0223 = 1;
          } else {
           __THREW__ = 0;
           invoke_viii(644,($449|0),(632|0),(7|0));
           $454 = __THREW__; __THREW__ = 0;
           $$0223 = 0;
          }
          $457 = ___cxa_find_matching_catch_2()|0;
          $458 = tempRet0;
          __THREW__ = 0;
          invoke_vi(637,($20|0));
          $459 = __THREW__; __THREW__ = 0;
          $460 = $459&1;
          if ($460) {
           $1154 = ___cxa_find_matching_catch_3(0|0)|0;
           $1155 = tempRet0;
           ___clang_call_terminate($1154);
           // unreachable;
          }
          if ($$0223) {
           $$9243454 = $458;$$9455 = $457;
           break;
          } else {
           $$40 = $457;$$40274 = $458;
          }
          ___resumeException($$40|0);
          // unreachable;
         }
        } while(0);
        ___cxa_free_exception(($449|0));
        $$40 = $$9455;$$40274 = $$9243454;
        ___resumeException($$40|0);
        // unreachable;
       }
      } while(0);
      $423 = (___cxa_allocate_exception(36)|0);
      __THREW__ = 0;
      invoke_vii(635,($18|0),($99|0));
      $424 = __THREW__; __THREW__ = 0;
      $425 = $424&1;
      do {
       if ($425) {
        $429 = ___cxa_find_matching_catch_2()|0;
        $430 = tempRet0;
        $$7241448 = $430;$$7449 = $429;
       } else {
        __THREW__ = 0;
        invoke_viii(693,($423|0),($18|0),($98|0));
        $426 = __THREW__; __THREW__ = 0;
        $427 = $426&1;
        if ($427) {
         $$0227 = 1;
        } else {
         __THREW__ = 0;
         invoke_viii(644,($423|0),(600|0),(7|0));
         $428 = __THREW__; __THREW__ = 0;
         $$0227 = 0;
        }
        $431 = ___cxa_find_matching_catch_2()|0;
        $432 = tempRet0;
        __THREW__ = 0;
        invoke_vi(637,($18|0));
        $433 = __THREW__; __THREW__ = 0;
        $434 = $433&1;
        if ($434) {
         $1154 = ___cxa_find_matching_catch_3(0|0)|0;
         $1155 = tempRet0;
         ___clang_call_terminate($1154);
         // unreachable;
        }
        if ($$0227) {
         $$7241448 = $432;$$7449 = $431;
         break;
        } else {
         $$40 = $431;$$40274 = $432;
        }
        ___resumeException($$40|0);
        // unreachable;
       }
      } while(0);
      ___cxa_free_exception(($423|0));
      $$40 = $$7449;$$40274 = $$7241448;
      ___resumeException($$40|0);
      // unreachable;
     }
     $461 = HEAP32[$49>>2]|0;
     $462 = HEAP8[$100>>0]|0;
     $463 = ($462<<24>>24)<(0);
     if ($463) {
      $464 = ((($0)) + 8|0);
      $465 = HEAP32[$464>>2]|0;
      $468 = $465;
     } else {
      $466 = $462&255;
      $468 = $466;
     }
     $467 = ($461>>>0)<($468>>>0);
     do {
      if ($467) {
       if ($463) {
        $469 = HEAP32[$99>>2]|0;
        $471 = $469;
       } else {
        $471 = $99;
       }
       $470 = (($471) + ($461)|0);
       $472 = HEAP8[$470>>0]|0;
       $473 = ($472<<24>>24)==(44);
       if (!($473)) {
        break;
       }
       $474 = (($461) + 1)|0;
       HEAP32[$49>>2] = $474;
       $475 = (__ZN10LineParser29AdvanceAndCheckEndOfStatementEv($0)|0);
       if (!($475)) {
        $476 = (___cxa_allocate_exception(36)|0);
        __THREW__ = 0;
        invoke_vii(635,($21|0),($99|0));
        $477 = __THREW__; __THREW__ = 0;
        $478 = $477&1;
        do {
         if ($478) {
          $483 = ___cxa_find_matching_catch_2()|0;
          $484 = tempRet0;
          $$10244457 = $484;$$10458 = $483;
         } else {
          $479 = HEAP32[$49>>2]|0;
          __THREW__ = 0;
          invoke_viii(696,($476|0),($21|0),($479|0));
          $480 = __THREW__; __THREW__ = 0;
          $481 = $480&1;
          if ($481) {
           $$0221 = 1;
          } else {
           __THREW__ = 0;
           invoke_viii(644,($476|0),(648|0),(7|0));
           $482 = __THREW__; __THREW__ = 0;
           $$0221 = 0;
          }
          $485 = ___cxa_find_matching_catch_2()|0;
          $486 = tempRet0;
          __THREW__ = 0;
          invoke_vi(637,($21|0));
          $487 = __THREW__; __THREW__ = 0;
          $488 = $487&1;
          if ($488) {
           $1154 = ___cxa_find_matching_catch_3(0|0)|0;
           $1155 = tempRet0;
           ___clang_call_terminate($1154);
           // unreachable;
          }
          if ($$0221) {
           $$10244457 = $486;$$10458 = $485;
           break;
          } else {
           $$40 = $485;$$40274 = $486;
          }
          ___resumeException($$40|0);
          // unreachable;
         }
        } while(0);
        ___cxa_free_exception(($476|0));
        $$40 = $$10458;$$40274 = $$10244457;
        ___resumeException($$40|0);
        // unreachable;
       }
       $489 = HEAP32[$49>>2]|0;
       $490 = HEAP8[$100>>0]|0;
       $491 = ($490<<24>>24)<(0);
       if ($491) {
        $492 = HEAP32[$99>>2]|0;
        $494 = $492;
       } else {
        $494 = $99;
       }
       $493 = (($494) + ($489)|0);
       $495 = HEAP8[$493>>0]|0;
       $496 = $495 << 24 >> 24;
       $497 = (_toupper($496)|0);
       $498 = ($497|0)==(89);
       if (!($498)) {
        $499 = (___cxa_allocate_exception(36)|0);
        __THREW__ = 0;
        invoke_vii(635,($22|0),($99|0));
        $500 = __THREW__; __THREW__ = 0;
        $501 = $500&1;
        do {
         if ($501) {
          $506 = ___cxa_find_matching_catch_2()|0;
          $507 = tempRet0;
          $$11245460 = $507;$$11461 = $506;
         } else {
          $502 = HEAP32[$49>>2]|0;
          __THREW__ = 0;
          invoke_viii(696,($499|0),($22|0),($502|0));
          $503 = __THREW__; __THREW__ = 0;
          $504 = $503&1;
          if ($504) {
           $$0219 = 1;
          } else {
           __THREW__ = 0;
           invoke_viii(644,($499|0),(648|0),(7|0));
           $505 = __THREW__; __THREW__ = 0;
           $$0219 = 0;
          }
          $508 = ___cxa_find_matching_catch_2()|0;
          $509 = tempRet0;
          __THREW__ = 0;
          invoke_vi(637,($22|0));
          $510 = __THREW__; __THREW__ = 0;
          $511 = $510&1;
          if ($511) {
           $1154 = ___cxa_find_matching_catch_3(0|0)|0;
           $1155 = tempRet0;
           ___clang_call_terminate($1154);
           // unreachable;
          }
          if ($$0219) {
           $$11245460 = $509;$$11461 = $508;
           break;
          } else {
           $$40 = $508;$$40274 = $509;
          }
          ___resumeException($$40|0);
          // unreachable;
         }
        } while(0);
        ___cxa_free_exception(($499|0));
        $$40 = $$11461;$$40274 = $$11245460;
        ___resumeException($$40|0);
        // unreachable;
       }
       $512 = (($489) + 1)|0;
       HEAP32[$49>>2] = $512;
       $513 = (__ZN10LineParser29AdvanceAndCheckEndOfStatementEv($0)|0);
       if ($513) {
        $514 = (___cxa_allocate_exception(36)|0);
        __THREW__ = 0;
        invoke_vii(635,($23|0),($99|0));
        $515 = __THREW__; __THREW__ = 0;
        $516 = $515&1;
        do {
         if ($516) {
          $521 = ___cxa_find_matching_catch_2()|0;
          $522 = tempRet0;
          $$12246463 = $522;$$12464 = $521;
         } else {
          $517 = HEAP32[$49>>2]|0;
          __THREW__ = 0;
          invoke_viii(696,($514|0),($23|0),($517|0));
          $518 = __THREW__; __THREW__ = 0;
          $519 = $518&1;
          if ($519) {
           $$0217 = 1;
          } else {
           __THREW__ = 0;
           invoke_viii(644,($514|0),(648|0),(7|0));
           $520 = __THREW__; __THREW__ = 0;
           $$0217 = 0;
          }
          $523 = ___cxa_find_matching_catch_2()|0;
          $524 = tempRet0;
          __THREW__ = 0;
          invoke_vi(637,($23|0));
          $525 = __THREW__; __THREW__ = 0;
          $526 = $525&1;
          if ($526) {
           $1154 = ___cxa_find_matching_catch_3(0|0)|0;
           $1155 = tempRet0;
           ___clang_call_terminate($1154);
           // unreachable;
          }
          if ($$0217) {
           $$12246463 = $524;$$12464 = $523;
           break;
          } else {
           $$40 = $523;$$40274 = $524;
          }
          ___resumeException($$40|0);
          // unreachable;
         }
        } while(0);
        ___cxa_free_exception(($514|0));
        $$40 = $$12464;$$40274 = $$12246463;
        ___resumeException($$40|0);
        // unreachable;
       }
       $527 = (((4668 + (($1*40)|0)|0)) + 22|0);
       $528 = HEAP16[$527>>1]|0;
       $529 = ($528<<16>>16)==(-1);
       do {
        if (!($529)) {
         $530 = HEAP32[9090]|0;
         $531 = ($530|0)==(0|0);
         if ($531) {
          ___assert_fail((27040|0),(27084|0),36,(27075|0));
          // unreachable;
         }
         $532 = $528&65535;
         $533 = $532 & 65280;
         $534 = ((($530)) + 131076|0);
         $535 = HEAP32[$534>>2]|0;
         $536 = $535 << 8;
         $537 = ($533|0)>($536|0);
         if ($537) {
          break;
         }
         $550 = ($$0233|0)>(255);
         if ($550) {
          $551 = (___cxa_allocate_exception(36)|0);
          __THREW__ = 0;
          invoke_vii(635,($25|0),($99|0));
          $552 = __THREW__; __THREW__ = 0;
          $553 = $552&1;
          do {
           if ($553) {
            $557 = ___cxa_find_matching_catch_2()|0;
            $558 = tempRet0;
            $$14248469 = $558;$$14470 = $557;
           } else {
            __THREW__ = 0;
            invoke_viii(694,($551|0),($25|0),($332|0));
            $554 = __THREW__; __THREW__ = 0;
            $555 = $554&1;
            if ($555) {
             $$0213 = 1;
            } else {
             __THREW__ = 0;
             invoke_viii(644,($551|0),(616|0),(7|0));
             $556 = __THREW__; __THREW__ = 0;
             $$0213 = 0;
            }
            $559 = ___cxa_find_matching_catch_2()|0;
            $560 = tempRet0;
            __THREW__ = 0;
            invoke_vi(637,($25|0));
            $561 = __THREW__; __THREW__ = 0;
            $562 = $561&1;
            if ($562) {
             $1154 = ___cxa_find_matching_catch_3(0|0)|0;
             $1155 = tempRet0;
             ___clang_call_terminate($1154);
             // unreachable;
            }
            if ($$0213) {
             $$14248469 = $560;$$14470 = $559;
             break;
            } else {
             $$40 = $559;$$40274 = $560;
            }
            ___resumeException($$40|0);
            // unreachable;
           }
          } while(0);
          ___cxa_free_exception(($551|0));
          $$40 = $$14470;$$40274 = $$14248469;
          ___resumeException($$40|0);
          // unreachable;
         }
         $563 = ($$0233|0)<(0);
         if (!($563)) {
          __ZN10LineParser9Assemble2EiNS_15ADDRESSING_MODEEj($0,$1,11,$$0233);
          STACKTOP = sp;return;
         }
         $564 = (___cxa_allocate_exception(36)|0);
         __THREW__ = 0;
         invoke_vii(635,($26|0),($99|0));
         $565 = __THREW__; __THREW__ = 0;
         $566 = $565&1;
         do {
          if ($566) {
           $570 = ___cxa_find_matching_catch_2()|0;
           $571 = tempRet0;
           $$15249472 = $571;$$15473 = $570;
          } else {
           __THREW__ = 0;
           invoke_viii(695,($564|0),($26|0),($332|0));
           $567 = __THREW__; __THREW__ = 0;
           $568 = $567&1;
           if ($568) {
            $$0211 = 1;
           } else {
            __THREW__ = 0;
            invoke_viii(644,($564|0),(632|0),(7|0));
            $569 = __THREW__; __THREW__ = 0;
            $$0211 = 0;
           }
           $572 = ___cxa_find_matching_catch_2()|0;
           $573 = tempRet0;
           __THREW__ = 0;
           invoke_vi(637,($26|0));
           $574 = __THREW__; __THREW__ = 0;
           $575 = $574&1;
           if ($575) {
            $1154 = ___cxa_find_matching_catch_3(0|0)|0;
            $1155 = tempRet0;
            ___clang_call_terminate($1154);
            // unreachable;
           }
           if ($$0211) {
            $$15249472 = $573;$$15473 = $572;
            break;
           } else {
            $$40 = $572;$$40274 = $573;
           }
           ___resumeException($$40|0);
           // unreachable;
          }
         } while(0);
         ___cxa_free_exception(($564|0));
         $$40 = $$15473;$$40274 = $$15249472;
         ___resumeException($$40|0);
         // unreachable;
        }
       } while(0);
       $538 = (___cxa_allocate_exception(36)|0);
       __THREW__ = 0;
       invoke_vii(635,($24|0),($99|0));
       $539 = __THREW__; __THREW__ = 0;
       $540 = $539&1;
       do {
        if ($540) {
         $544 = ___cxa_find_matching_catch_2()|0;
         $545 = tempRet0;
         $$13247466 = $545;$$13467 = $544;
        } else {
         __THREW__ = 0;
         invoke_viii(693,($538|0),($24|0),($98|0));
         $541 = __THREW__; __THREW__ = 0;
         $542 = $541&1;
         if ($542) {
          $$0215 = 1;
         } else {
          __THREW__ = 0;
          invoke_viii(644,($538|0),(600|0),(7|0));
          $543 = __THREW__; __THREW__ = 0;
          $$0215 = 0;
         }
         $546 = ___cxa_find_matching_catch_2()|0;
         $547 = tempRet0;
         __THREW__ = 0;
         invoke_vi(637,($24|0));
         $548 = __THREW__; __THREW__ = 0;
         $549 = $548&1;
         if ($549) {
          $1154 = ___cxa_find_matching_catch_3(0|0)|0;
          $1155 = tempRet0;
          ___clang_call_terminate($1154);
          // unreachable;
         }
         if ($$0215) {
          $$13247466 = $547;$$13467 = $546;
          break;
         } else {
          $$40 = $546;$$40274 = $547;
         }
         ___resumeException($$40|0);
         // unreachable;
        }
       } while(0);
       ___cxa_free_exception(($538|0));
       $$40 = $$13467;$$40274 = $$13247466;
       ___resumeException($$40|0);
       // unreachable;
      }
     } while(0);
     $576 = (___cxa_allocate_exception(36)|0);
     __THREW__ = 0;
     invoke_vii(635,($27|0),($99|0));
     $577 = __THREW__; __THREW__ = 0;
     $578 = $577&1;
     do {
      if ($578) {
       $583 = ___cxa_find_matching_catch_2()|0;
       $584 = tempRet0;
       $$16250475 = $584;$$16476 = $583;
      } else {
       $579 = HEAP32[$49>>2]|0;
       __THREW__ = 0;
       invoke_viii(696,($576|0),($27|0),($579|0));
       $580 = __THREW__; __THREW__ = 0;
       $581 = $580&1;
       if ($581) {
        $$0209 = 1;
       } else {
        __THREW__ = 0;
        invoke_viii(644,($576|0),(648|0),(7|0));
        $582 = __THREW__; __THREW__ = 0;
        $$0209 = 0;
       }
       $585 = ___cxa_find_matching_catch_2()|0;
       $586 = tempRet0;
       __THREW__ = 0;
       invoke_vi(637,($27|0));
       $587 = __THREW__; __THREW__ = 0;
       $588 = $587&1;
       if ($588) {
        $1154 = ___cxa_find_matching_catch_3(0|0)|0;
        $1155 = tempRet0;
        ___clang_call_terminate($1154);
        // unreachable;
       }
       if ($$0209) {
        $$16250475 = $586;$$16476 = $585;
        break;
       } else {
        $$40 = $585;$$40274 = $586;
       }
       ___resumeException($$40|0);
       // unreachable;
      }
     } while(0);
     ___cxa_free_exception(($576|0));
     $$40 = $$16476;$$40274 = $$16250475;
     ___resumeException($$40|0);
     // unreachable;
    }
   }
   if ($352) {
    $589 = ((($0)) + 8|0);
    $590 = HEAP32[$589>>2]|0;
    $593 = $590;
   } else {
    $591 = $351&255;
    $593 = $591;
   }
   $592 = ($350>>>0)<($593>>>0);
   if ($592) {
    if ($352) {
     $594 = HEAP32[$99>>2]|0;
     $596 = $594;
    } else {
     $596 = $99;
    }
    $595 = (($596) + ($350)|0);
    $597 = HEAP8[$595>>0]|0;
    $598 = ($597<<24>>24)==(44);
    if ($598) {
     $599 = (($350) + 1)|0;
     HEAP32[$49>>2] = $599;
     $600 = (__ZN10LineParser29AdvanceAndCheckEndOfStatementEv($0)|0);
     if (!($600)) {
      $601 = (___cxa_allocate_exception(36)|0);
      __THREW__ = 0;
      invoke_vii(635,($28|0),($99|0));
      $602 = __THREW__; __THREW__ = 0;
      $603 = $602&1;
      do {
       if ($603) {
        $608 = ___cxa_find_matching_catch_2()|0;
        $609 = tempRet0;
        $$17251478 = $609;$$17479 = $608;
       } else {
        $604 = HEAP32[$49>>2]|0;
        __THREW__ = 0;
        invoke_viii(696,($601|0),($28|0),($604|0));
        $605 = __THREW__; __THREW__ = 0;
        $606 = $605&1;
        if ($606) {
         $$0207 = 1;
        } else {
         __THREW__ = 0;
         invoke_viii(644,($601|0),(648|0),(7|0));
         $607 = __THREW__; __THREW__ = 0;
         $$0207 = 0;
        }
        $610 = ___cxa_find_matching_catch_2()|0;
        $611 = tempRet0;
        __THREW__ = 0;
        invoke_vi(637,($28|0));
        $612 = __THREW__; __THREW__ = 0;
        $613 = $612&1;
        if ($613) {
         $1154 = ___cxa_find_matching_catch_3(0|0)|0;
         $1155 = tempRet0;
         ___clang_call_terminate($1154);
         // unreachable;
        }
        if ($$0207) {
         $$17251478 = $611;$$17479 = $610;
         break;
        } else {
         $$40 = $610;$$40274 = $611;
        }
        ___resumeException($$40|0);
        // unreachable;
       }
      } while(0);
      ___cxa_free_exception(($601|0));
      $$40 = $$17479;$$40274 = $$17251478;
      ___resumeException($$40|0);
      // unreachable;
     }
     $614 = HEAP32[$49>>2]|0;
     $615 = HEAP8[$100>>0]|0;
     $616 = ($615<<24>>24)<(0);
     if ($616) {
      $617 = HEAP32[$99>>2]|0;
      $619 = $617;
     } else {
      $619 = $99;
     }
     $618 = (($619) + ($614)|0);
     $620 = HEAP8[$618>>0]|0;
     $621 = $620 << 24 >> 24;
     $622 = (_toupper($621)|0);
     $623 = ($622|0)==(88);
     if (!($623)) {
      $624 = (___cxa_allocate_exception(36)|0);
      __THREW__ = 0;
      invoke_vii(635,($29|0),($99|0));
      $625 = __THREW__; __THREW__ = 0;
      $626 = $625&1;
      do {
       if ($626) {
        $631 = ___cxa_find_matching_catch_2()|0;
        $632 = tempRet0;
        $$18252481 = $632;$$18482 = $631;
       } else {
        $627 = HEAP32[$49>>2]|0;
        __THREW__ = 0;
        invoke_viii(696,($624|0),($29|0),($627|0));
        $628 = __THREW__; __THREW__ = 0;
        $629 = $628&1;
        if ($629) {
         $$0205 = 1;
        } else {
         __THREW__ = 0;
         invoke_viii(644,($624|0),(648|0),(7|0));
         $630 = __THREW__; __THREW__ = 0;
         $$0205 = 0;
        }
        $633 = ___cxa_find_matching_catch_2()|0;
        $634 = tempRet0;
        __THREW__ = 0;
        invoke_vi(637,($29|0));
        $635 = __THREW__; __THREW__ = 0;
        $636 = $635&1;
        if ($636) {
         $1154 = ___cxa_find_matching_catch_3(0|0)|0;
         $1155 = tempRet0;
         ___clang_call_terminate($1154);
         // unreachable;
        }
        if ($$0205) {
         $$18252481 = $634;$$18482 = $633;
         break;
        } else {
         $$40 = $633;$$40274 = $634;
        }
        ___resumeException($$40|0);
        // unreachable;
       }
      } while(0);
      ___cxa_free_exception(($624|0));
      $$40 = $$18482;$$40274 = $$18252481;
      ___resumeException($$40|0);
      // unreachable;
     }
     $637 = (($614) + 1)|0;
     HEAP32[$49>>2] = $637;
     $638 = (__ZN10LineParser29AdvanceAndCheckEndOfStatementEv($0)|0);
     if (!($638)) {
      $639 = (___cxa_allocate_exception(36)|0);
      __THREW__ = 0;
      invoke_vii(635,($30|0),($99|0));
      $640 = __THREW__; __THREW__ = 0;
      $641 = $640&1;
      do {
       if ($641) {
        $646 = ___cxa_find_matching_catch_2()|0;
        $647 = tempRet0;
        $$19253484 = $647;$$19485 = $646;
       } else {
        $642 = HEAP32[$49>>2]|0;
        __THREW__ = 0;
        invoke_viii(686,($639|0),($30|0),($642|0));
        $643 = __THREW__; __THREW__ = 0;
        $644 = $643&1;
        if ($644) {
         $$0203 = 1;
        } else {
         __THREW__ = 0;
         invoke_viii(644,($639|0),(416|0),(7|0));
         $645 = __THREW__; __THREW__ = 0;
         $$0203 = 0;
        }
        $648 = ___cxa_find_matching_catch_2()|0;
        $649 = tempRet0;
        __THREW__ = 0;
        invoke_vi(637,($30|0));
        $650 = __THREW__; __THREW__ = 0;
        $651 = $650&1;
        if ($651) {
         $1154 = ___cxa_find_matching_catch_3(0|0)|0;
         $1155 = tempRet0;
         ___clang_call_terminate($1154);
         // unreachable;
        }
        if ($$0203) {
         $$19253484 = $649;$$19485 = $648;
         break;
        } else {
         $$40 = $648;$$40274 = $649;
        }
        ___resumeException($$40|0);
        // unreachable;
       }
      } while(0);
      ___cxa_free_exception(($639|0));
      $$40 = $$19485;$$40274 = $$19253484;
      ___resumeException($$40|0);
      // unreachable;
     }
     $652 = HEAP32[$49>>2]|0;
     $653 = HEAP8[$100>>0]|0;
     $654 = ($653<<24>>24)<(0);
     if ($654) {
      $655 = HEAP32[$99>>2]|0;
      $657 = $655;
     } else {
      $657 = $99;
     }
     $656 = (($657) + ($652)|0);
     $658 = HEAP8[$656>>0]|0;
     $659 = ($658<<24>>24)==(41);
     if (!($659)) {
      $660 = (___cxa_allocate_exception(36)|0);
      __THREW__ = 0;
      invoke_vii(635,($31|0),($99|0));
      $661 = __THREW__; __THREW__ = 0;
      $662 = $661&1;
      do {
       if ($662) {
        $667 = ___cxa_find_matching_catch_2()|0;
        $668 = tempRet0;
        $$20254487 = $668;$$20488 = $667;
       } else {
        $663 = HEAP32[$49>>2]|0;
        __THREW__ = 0;
        invoke_viii(686,($660|0),($31|0),($663|0));
        $664 = __THREW__; __THREW__ = 0;
        $665 = $664&1;
        if ($665) {
         $$0201 = 1;
        } else {
         __THREW__ = 0;
         invoke_viii(644,($660|0),(416|0),(7|0));
         $666 = __THREW__; __THREW__ = 0;
         $$0201 = 0;
        }
        $669 = ___cxa_find_matching_catch_2()|0;
        $670 = tempRet0;
        __THREW__ = 0;
        invoke_vi(637,($31|0));
        $671 = __THREW__; __THREW__ = 0;
        $672 = $671&1;
        if ($672) {
         $1154 = ___cxa_find_matching_catch_3(0|0)|0;
         $1155 = tempRet0;
         ___clang_call_terminate($1154);
         // unreachable;
        }
        if ($$0201) {
         $$20254487 = $670;$$20488 = $669;
         break;
        } else {
         $$40 = $669;$$40274 = $670;
        }
        ___resumeException($$40|0);
        // unreachable;
       }
      } while(0);
      ___cxa_free_exception(($660|0));
      $$40 = $$20488;$$40274 = $$20254487;
      ___resumeException($$40|0);
      // unreachable;
     }
     $673 = (($652) + 1)|0;
     HEAP32[$49>>2] = $673;
     $674 = (__ZN10LineParser29AdvanceAndCheckEndOfStatementEv($0)|0);
     if ($674) {
      $675 = (___cxa_allocate_exception(36)|0);
      __THREW__ = 0;
      invoke_vii(635,($32|0),($99|0));
      $676 = __THREW__; __THREW__ = 0;
      $677 = $676&1;
      do {
       if ($677) {
        $682 = ___cxa_find_matching_catch_2()|0;
        $683 = tempRet0;
        $$21255490 = $683;$$21491 = $682;
       } else {
        $678 = HEAP32[$49>>2]|0;
        __THREW__ = 0;
        invoke_viii(696,($675|0),($32|0),($678|0));
        $679 = __THREW__; __THREW__ = 0;
        $680 = $679&1;
        if ($680) {
         $$0199 = 1;
        } else {
         __THREW__ = 0;
         invoke_viii(644,($675|0),(648|0),(7|0));
         $681 = __THREW__; __THREW__ = 0;
         $$0199 = 0;
        }
        $684 = ___cxa_find_matching_catch_2()|0;
        $685 = tempRet0;
        __THREW__ = 0;
        invoke_vi(637,($32|0));
        $686 = __THREW__; __THREW__ = 0;
        $687 = $686&1;
        if ($687) {
         $1154 = ___cxa_find_matching_catch_3(0|0)|0;
         $1155 = tempRet0;
         ___clang_call_terminate($1154);
         // unreachable;
        }
        if ($$0199) {
         $$21255490 = $685;$$21491 = $684;
         break;
        } else {
         $$40 = $684;$$40274 = $685;
        }
        ___resumeException($$40|0);
        // unreachable;
       }
      } while(0);
      ___cxa_free_exception(($675|0));
      $$40 = $$21491;$$40274 = $$21255490;
      ___resumeException($$40|0);
      // unreachable;
     }
     $688 = (((4668 + (($1*40)|0)|0)) + 26|0);
     $689 = HEAP16[$688>>1]|0;
     $690 = ($1|0)==(31);
     do {
      if ($690) {
       $691 = HEAP32[9090]|0;
       $692 = ($691|0)==(0|0);
       if ($692) {
        ___assert_fail((27040|0),(27084|0),36,(27075|0));
        // unreachable;
       }
       $693 = $689&65535;
       $694 = $693 & 65280;
       $695 = ((($691)) + 131076|0);
       $696 = HEAP32[$695>>2]|0;
       $697 = $696 << 8;
       $698 = ($694|0)>($697|0);
       if ($698) {
        break;
       }
       __ZN10LineParser9Assemble3EiNS_15ADDRESSING_MODEEj($0,31,13,$$0233);
       STACKTOP = sp;return;
      }
     } while(0);
     $699 = (((4668 + (($1*40)|0)|0)) + 20|0);
     $700 = HEAP16[$699>>1]|0;
     $701 = ($700<<16>>16)==(-1);
     do {
      if (!($701)) {
       $702 = HEAP32[9090]|0;
       $703 = ($702|0)==(0|0);
       if ($703) {
        ___assert_fail((27040|0),(27084|0),36,(27075|0));
        // unreachable;
       }
       $704 = $700&65535;
       $705 = $704 & 65280;
       $706 = ((($702)) + 131076|0);
       $707 = HEAP32[$706>>2]|0;
       $708 = $707 << 8;
       $709 = ($705|0)>($708|0);
       if ($709) {
        break;
       }
       $722 = ($$0233|0)>(255);
       if ($722) {
        $723 = (___cxa_allocate_exception(36)|0);
        __THREW__ = 0;
        invoke_vii(635,($34|0),($99|0));
        $724 = __THREW__; __THREW__ = 0;
        $725 = $724&1;
        do {
         if ($725) {
          $729 = ___cxa_find_matching_catch_2()|0;
          $730 = tempRet0;
          $$23257496 = $730;$$23497 = $729;
         } else {
          __THREW__ = 0;
          invoke_viii(694,($723|0),($34|0),($332|0));
          $726 = __THREW__; __THREW__ = 0;
          $727 = $726&1;
          if ($727) {
           $$0195 = 1;
          } else {
           __THREW__ = 0;
           invoke_viii(644,($723|0),(616|0),(7|0));
           $728 = __THREW__; __THREW__ = 0;
           $$0195 = 0;
          }
          $731 = ___cxa_find_matching_catch_2()|0;
          $732 = tempRet0;
          __THREW__ = 0;
          invoke_vi(637,($34|0));
          $733 = __THREW__; __THREW__ = 0;
          $734 = $733&1;
          if ($734) {
           $1154 = ___cxa_find_matching_catch_3(0|0)|0;
           $1155 = tempRet0;
           ___clang_call_terminate($1154);
           // unreachable;
          }
          if ($$0195) {
           $$23257496 = $732;$$23497 = $731;
           break;
          } else {
           $$40 = $731;$$40274 = $732;
          }
          ___resumeException($$40|0);
          // unreachable;
         }
        } while(0);
        ___cxa_free_exception(($723|0));
        $$40 = $$23497;$$40274 = $$23257496;
        ___resumeException($$40|0);
        // unreachable;
       }
       $735 = ($$0233|0)<(0);
       if (!($735)) {
        __ZN10LineParser9Assemble2EiNS_15ADDRESSING_MODEEj($0,$1,10,$$0233);
        STACKTOP = sp;return;
       }
       $736 = (___cxa_allocate_exception(36)|0);
       __THREW__ = 0;
       invoke_vii(635,($35|0),($99|0));
       $737 = __THREW__; __THREW__ = 0;
       $738 = $737&1;
       do {
        if ($738) {
         $742 = ___cxa_find_matching_catch_2()|0;
         $743 = tempRet0;
         $$24258499 = $743;$$24500 = $742;
        } else {
         __THREW__ = 0;
         invoke_viii(695,($736|0),($35|0),($332|0));
         $739 = __THREW__; __THREW__ = 0;
         $740 = $739&1;
         if ($740) {
          $$0193 = 1;
         } else {
          __THREW__ = 0;
          invoke_viii(644,($736|0),(632|0),(7|0));
          $741 = __THREW__; __THREW__ = 0;
          $$0193 = 0;
         }
         $744 = ___cxa_find_matching_catch_2()|0;
         $745 = tempRet0;
         __THREW__ = 0;
         invoke_vi(637,($35|0));
         $746 = __THREW__; __THREW__ = 0;
         $747 = $746&1;
         if ($747) {
          $1154 = ___cxa_find_matching_catch_3(0|0)|0;
          $1155 = tempRet0;
          ___clang_call_terminate($1154);
          // unreachable;
         }
         if ($$0193) {
          $$24258499 = $745;$$24500 = $744;
          break;
         } else {
          $$40 = $744;$$40274 = $745;
         }
         ___resumeException($$40|0);
         // unreachable;
        }
       } while(0);
       ___cxa_free_exception(($736|0));
       $$40 = $$24500;$$40274 = $$24258499;
       ___resumeException($$40|0);
       // unreachable;
      }
     } while(0);
     $710 = (___cxa_allocate_exception(36)|0);
     __THREW__ = 0;
     invoke_vii(635,($33|0),($99|0));
     $711 = __THREW__; __THREW__ = 0;
     $712 = $711&1;
     do {
      if ($712) {
       $716 = ___cxa_find_matching_catch_2()|0;
       $717 = tempRet0;
       $$22256493 = $717;$$22494 = $716;
      } else {
       __THREW__ = 0;
       invoke_viii(693,($710|0),($33|0),($98|0));
       $713 = __THREW__; __THREW__ = 0;
       $714 = $713&1;
       if ($714) {
        $$0197 = 1;
       } else {
        __THREW__ = 0;
        invoke_viii(644,($710|0),(600|0),(7|0));
        $715 = __THREW__; __THREW__ = 0;
        $$0197 = 0;
       }
       $718 = ___cxa_find_matching_catch_2()|0;
       $719 = tempRet0;
       __THREW__ = 0;
       invoke_vi(637,($33|0));
       $720 = __THREW__; __THREW__ = 0;
       $721 = $720&1;
       if ($721) {
        $1154 = ___cxa_find_matching_catch_3(0|0)|0;
        $1155 = tempRet0;
        ___clang_call_terminate($1154);
        // unreachable;
       }
       if ($$0197) {
        $$22256493 = $719;$$22494 = $718;
        break;
       } else {
        $$40 = $718;$$40274 = $719;
       }
       ___resumeException($$40|0);
       // unreachable;
      }
     } while(0);
     ___cxa_free_exception(($710|0));
     $$40 = $$22494;$$40274 = $$22256493;
     ___resumeException($$40|0);
     // unreachable;
    }
   }
   $748 = (___cxa_allocate_exception(36)|0);
   __THREW__ = 0;
   invoke_vii(635,($36|0),($99|0));
   $749 = __THREW__; __THREW__ = 0;
   $750 = $749&1;
   if ($750) {
    $755 = ___cxa_find_matching_catch_2()|0;
    $756 = tempRet0;
    $$25259502 = $756;$$25503 = $755;
   } else {
    $751 = HEAP32[$49>>2]|0;
    __THREW__ = 0;
    invoke_viii(696,($748|0),($36|0),($751|0));
    $752 = __THREW__; __THREW__ = 0;
    $753 = $752&1;
    if ($753) {
     $$0191 = 1;
    } else {
     __THREW__ = 0;
     invoke_viii(644,($748|0),(648|0),(7|0));
     $754 = __THREW__; __THREW__ = 0;
     $$0191 = 0;
    }
    $757 = ___cxa_find_matching_catch_2()|0;
    $758 = tempRet0;
    __THREW__ = 0;
    invoke_vi(637,($36|0));
    $759 = __THREW__; __THREW__ = 0;
    $760 = $759&1;
    if ($760) {
     $1154 = ___cxa_find_matching_catch_3(0|0)|0;
     $1155 = tempRet0;
     ___clang_call_terminate($1154);
     // unreachable;
    }
    if ($$0191) {
     $$25259502 = $758;$$25503 = $757;
    } else {
     $$40 = $757;$$40274 = $758;
     ___resumeException($$40|0);
     // unreachable;
    }
   }
   ___cxa_free_exception(($748|0));
   $$40 = $$25503;$$40274 = $$25259502;
   ___resumeException($$40|0);
   // unreachable;
  }
 }
 __THREW__ = 0;
 $761 = (invoke_iii(692,($0|0),0)|0);
 $762 = __THREW__; __THREW__ = 0;
 $763 = $762&1;
 L622: do {
  if ($763) {
   $764 = ___cxa_find_matching_catch_3(368|0)|0;
   $765 = tempRet0;
   $766 = (_llvm_eh_typeid_for((368|0))|0);
   $767 = ($765|0)==($766|0);
   if (!($767)) {
    $$40 = $764;$$40274 = $765;
    ___resumeException($$40|0);
    // unreachable;
   }
   (___cxa_begin_catch(($764|0))|0);
   $768 = HEAP32[9088]|0;
   $769 = ($768|0)==(0|0);
   do {
    if ($769) {
     __THREW__ = 0;
     invoke_viiii(680,(27040|0),(27060|0),38,(27075|0));
     $770 = __THREW__; __THREW__ = 0;
    } else {
     $771 = HEAP32[$768>>2]|0;
     $772 = ($771|0)==(0);
     if (!($772)) {
      __THREW__ = 0;
      invoke_v(642);
      $782 = __THREW__; __THREW__ = 0;
      break;
     }
     $773 = HEAP32[9090]|0;
     $774 = ($773|0)==(0|0);
     if ($774) {
      __THREW__ = 0;
      invoke_viiii(680,(27040|0),(27084|0),36,(27075|0));
      $775 = __THREW__; __THREW__ = 0;
      break;
     } else {
      $776 = ((($773)) + 131072|0);
      $777 = HEAP32[$776>>2]|0;
      ___cxa_end_catch();
      $$0190 = $777;
      break L622;
     }
    }
   } while(0);
   $778 = ___cxa_find_matching_catch_2()|0;
   $779 = tempRet0;
   __THREW__ = 0;
   invoke_v(643);
   $780 = __THREW__; __THREW__ = 0;
   $781 = $780&1;
   if ($781) {
    $1154 = ___cxa_find_matching_catch_3(0|0)|0;
    $1155 = tempRet0;
    ___clang_call_terminate($1154);
    // unreachable;
   } else {
    $$40 = $778;$$40274 = $779;
    ___resumeException($$40|0);
    // unreachable;
   }
  } else {
   $$0190 = $761;
  }
 } while(0);
 $783 = (__ZN10LineParser29AdvanceAndCheckEndOfStatementEv($0)|0);
 if (!($783)) {
  $784 = (((4668 + (($1*40)|0)|0)) + 28|0);
  $785 = HEAP16[$784>>1]|0;
  $786 = ($785<<16>>16)==(-1);
  if (!($786)) {
   $787 = HEAP32[9090]|0;
   $788 = ($787|0)==(0|0);
   if ($788) {
    ___assert_fail((27040|0),(27084|0),36,(27075|0));
    // unreachable;
   }
   $789 = $785&65535;
   $790 = $789 & 65280;
   $791 = ((($787)) + 131076|0);
   $792 = HEAP32[$791>>2]|0;
   $793 = $792 << 8;
   $794 = ($790|0)>($793|0);
   if (!($794)) {
    $795 = ((($787)) + 131072|0);
    $796 = HEAP32[$795>>2]|0;
    $$neg540 = (($$0190) + -2)|0;
    $797 = (($$neg540) - ($796))|0;
    $$off = (($797) + 128)|0;
    $798 = ($$off>>>0)<(256);
    if ($798) {
     $799 = $797 & 255;
     __ZN10LineParser9Assemble2EiNS_15ADDRESSING_MODEEj($0,$1,14,$799);
     STACKTOP = sp;return;
    }
    $800 = (___cxa_allocate_exception(36)|0);
    __THREW__ = 0;
    invoke_vii(635,($37|0),($99|0));
    $801 = __THREW__; __THREW__ = 0;
    $802 = $801&1;
    if ($802) {
     $828 = ___cxa_find_matching_catch_2()|0;
     $829 = tempRet0;
     $$27261505 = $829;$$27506 = $828;
    } else {
     __THREW__ = 0;
     invoke_vii(635,($5|0),($37|0));
     $803 = __THREW__; __THREW__ = 0;
     $804 = $803&1;
     L656: do {
      if ($804) {
       $$0186 = 1;
       label = 401;
      } else {
       HEAP32[$800>>2] = (4652);
       $805 = ((($800)) + 4|0);
       __THREW__ = 0;
       invoke_vii(635,($805|0),($5|0));
       $806 = __THREW__; __THREW__ = 0;
       $807 = $806&1;
       do {
        if ($807) {
         $812 = ___cxa_find_matching_catch_2()|0;
         $813 = tempRet0;
         $$0$i412 = $813;$$03$i411 = $812;
        } else {
         $808 = ((($800)) + 16|0);
         HEAP32[$808>>2] = $98;
         $809 = ((($800)) + 20|0);
         ;HEAP32[$809>>2]=0|0;HEAP32[$809+4>>2]=0|0;HEAP32[$809+8>>2]=0|0;
         __THREW__ = 0;
         invoke_viii(646,($809|0),(44984|0),0);
         $810 = __THREW__; __THREW__ = 0;
         $811 = $810&1;
         if ($811) {
          $814 = ___cxa_find_matching_catch_2()|0;
          $815 = tempRet0;
          __THREW__ = 0;
          invoke_vi(637,($805|0));
          $816 = __THREW__; __THREW__ = 0;
          $817 = $816&1;
          if (!($817)) {
           $$0$i412 = $815;$$03$i411 = $814;
           break;
          }
          $818 = ___cxa_find_matching_catch_3(0|0)|0;
          $819 = tempRet0;
          ___clang_call_terminate($818);
          // unreachable;
         } else {
          $820 = ((($800)) + 32|0);
          HEAP32[$820>>2] = 0;
          __THREW__ = 0;
          invoke_vi(637,($5|0));
          $821 = __THREW__; __THREW__ = 0;
          $822 = $821&1;
          if ($822) {
           $$0186 = 1;
           label = 401;
           break L656;
          }
          HEAP32[$800>>2] = (7500);
          __THREW__ = 0;
          invoke_viii(644,($800|0),(664|0),(7|0));
          $827 = __THREW__; __THREW__ = 0;
          $$0186 = 0;
          label = 401;
          break L656;
         }
        }
       } while(0);
       __THREW__ = 0;
       invoke_vi(637,($5|0));
       $823 = __THREW__; __THREW__ = 0;
       $824 = $823&1;
       if (!($824)) {
        $$0186$lpad$bodyZZ2D = 1;$eh$lpad$body360$index32Z2D = $$0$i412;$eh$lpad$body360$indexZ2D = $$03$i411;
        break;
       }
       $825 = ___cxa_find_matching_catch_3(0|0)|0;
       $826 = tempRet0;
       ___clang_call_terminate($825);
       // unreachable;
      }
     } while(0);
     if ((label|0) == 401) {
      $830 = ___cxa_find_matching_catch_2()|0;
      $831 = tempRet0;
      $$0186$lpad$bodyZZ2D = $$0186;$eh$lpad$body360$index32Z2D = $831;$eh$lpad$body360$indexZ2D = $830;
     }
     __THREW__ = 0;
     invoke_vi(637,($37|0));
     $832 = __THREW__; __THREW__ = 0;
     $833 = $832&1;
     if ($833) {
      $1154 = ___cxa_find_matching_catch_3(0|0)|0;
      $1155 = tempRet0;
      ___clang_call_terminate($1154);
      // unreachable;
     }
     if ($$0186$lpad$bodyZZ2D) {
      $$27261505 = $eh$lpad$body360$index32Z2D;$$27506 = $eh$lpad$body360$indexZ2D;
     } else {
      $$40 = $eh$lpad$body360$indexZ2D;$$40274 = $eh$lpad$body360$index32Z2D;
      ___resumeException($$40|0);
      // unreachable;
     }
    }
    ___cxa_free_exception(($800|0));
    $$40 = $$27506;$$40274 = $$27261505;
    ___resumeException($$40|0);
    // unreachable;
   }
  }
  $834 = ($$0190>>>0)>(65535);
  if ($834) {
   $835 = (___cxa_allocate_exception(36)|0);
   __THREW__ = 0;
   invoke_vii(635,($38|0),($99|0));
   $836 = __THREW__; __THREW__ = 0;
   $837 = $836&1;
   if ($837) {
    $841 = ___cxa_find_matching_catch_2()|0;
    $842 = tempRet0;
    $$28262508 = $842;$$28509 = $841;
   } else {
    __THREW__ = 0;
    invoke_viii(695,($835|0),($38|0),($98|0));
    $838 = __THREW__; __THREW__ = 0;
    $839 = $838&1;
    if ($839) {
     $$0184 = 1;
    } else {
     __THREW__ = 0;
     invoke_viii(644,($835|0),(632|0),(7|0));
     $840 = __THREW__; __THREW__ = 0;
     $$0184 = 0;
    }
    $843 = ___cxa_find_matching_catch_2()|0;
    $844 = tempRet0;
    __THREW__ = 0;
    invoke_vi(637,($38|0));
    $845 = __THREW__; __THREW__ = 0;
    $846 = $845&1;
    if ($846) {
     $1154 = ___cxa_find_matching_catch_3(0|0)|0;
     $1155 = tempRet0;
     ___clang_call_terminate($1154);
     // unreachable;
    }
    if ($$0184) {
     $$28262508 = $844;$$28509 = $843;
    } else {
     $$40 = $843;$$40274 = $844;
     ___resumeException($$40|0);
     // unreachable;
    }
   }
   ___cxa_free_exception(($835|0));
   $$40 = $$28509;$$40274 = $$28262508;
   ___resumeException($$40|0);
   // unreachable;
  }
  $847 = ($$0190|0)<(256);
  if ($847) {
   $848 = (((4668 + (($1*40)|0)|0)) + 6|0);
   $849 = HEAP16[$848>>1]|0;
   $850 = ($849<<16>>16)==(-1);
   if (!($850)) {
    $851 = HEAP32[9090]|0;
    $852 = ($851|0)==(0|0);
    if ($852) {
     ___assert_fail((27040|0),(27084|0),36,(27075|0));
     // unreachable;
    }
    $853 = $849&65535;
    $854 = $853 & 65280;
    $855 = ((($851)) + 131076|0);
    $856 = HEAP32[$855>>2]|0;
    $857 = $856 << 8;
    $858 = ($854|0)>($857|0);
    if (!($858)) {
     __ZN10LineParser9Assemble2EiNS_15ADDRESSING_MODEEj($0,$1,3,$$0190);
     STACKTOP = sp;return;
    }
   }
  }
  $859 = (((4668 + (($1*40)|0)|0)) + 12|0);
  $860 = HEAP16[$859>>1]|0;
  $861 = ($860<<16>>16)==(-1);
  if (!($861)) {
   $862 = HEAP32[9090]|0;
   $863 = ($862|0)==(0|0);
   if ($863) {
    ___assert_fail((27040|0),(27084|0),36,(27075|0));
    // unreachable;
   }
   $864 = $860&65535;
   $865 = $864 & 65280;
   $866 = ((($862)) + 131076|0);
   $867 = HEAP32[$866>>2]|0;
   $868 = $867 << 8;
   $869 = ($865|0)>($868|0);
   if (!($869)) {
    __ZN10LineParser9Assemble3EiNS_15ADDRESSING_MODEEj($0,$1,6,$$0190);
    STACKTOP = sp;return;
   }
  }
  $870 = (___cxa_allocate_exception(36)|0);
  __THREW__ = 0;
  invoke_vii(635,($39|0),($99|0));
  $871 = __THREW__; __THREW__ = 0;
  $872 = $871&1;
  if ($872) {
   $898 = ___cxa_find_matching_catch_2()|0;
   $899 = tempRet0;
   $$29263511 = $899;$$29512 = $898;
  } else {
   __THREW__ = 0;
   invoke_vii(635,($4|0),($39|0));
   $873 = __THREW__; __THREW__ = 0;
   $874 = $873&1;
   L713: do {
    if ($874) {
     $$0182 = 1;
     label = 436;
    } else {
     HEAP32[$870>>2] = (4652);
     $875 = ((($870)) + 4|0);
     __THREW__ = 0;
     invoke_vii(635,($875|0),($4|0));
     $876 = __THREW__; __THREW__ = 0;
     $877 = $876&1;
     do {
      if ($877) {
       $882 = ___cxa_find_matching_catch_2()|0;
       $883 = tempRet0;
       $$0$i373 = $883;$$03$i372 = $882;
      } else {
       $878 = ((($870)) + 16|0);
       HEAP32[$878>>2] = $98;
       $879 = ((($870)) + 20|0);
       ;HEAP32[$879>>2]=0|0;HEAP32[$879+4>>2]=0|0;HEAP32[$879+8>>2]=0|0;
       __THREW__ = 0;
       invoke_viii(646,($879|0),(44984|0),0);
       $880 = __THREW__; __THREW__ = 0;
       $881 = $880&1;
       if ($881) {
        $884 = ___cxa_find_matching_catch_2()|0;
        $885 = tempRet0;
        __THREW__ = 0;
        invoke_vi(637,($875|0));
        $886 = __THREW__; __THREW__ = 0;
        $887 = $886&1;
        if (!($887)) {
         $$0$i373 = $885;$$03$i372 = $884;
         break;
        }
        $888 = ___cxa_find_matching_catch_3(0|0)|0;
        $889 = tempRet0;
        ___clang_call_terminate($888);
        // unreachable;
       } else {
        $890 = ((($870)) + 32|0);
        HEAP32[$890>>2] = 0;
        __THREW__ = 0;
        invoke_vi(637,($4|0));
        $891 = __THREW__; __THREW__ = 0;
        $892 = $891&1;
        if ($892) {
         $$0182 = 1;
         label = 436;
         break L713;
        }
        HEAP32[$870>>2] = (7524);
        __THREW__ = 0;
        invoke_viii(644,($870|0),(680|0),(7|0));
        $897 = __THREW__; __THREW__ = 0;
        $$0182 = 0;
        label = 436;
        break L713;
       }
      }
     } while(0);
     __THREW__ = 0;
     invoke_vi(637,($4|0));
     $893 = __THREW__; __THREW__ = 0;
     $894 = $893&1;
     if ($894) {
      $895 = ___cxa_find_matching_catch_3(0|0)|0;
      $896 = tempRet0;
      ___clang_call_terminate($895);
      // unreachable;
     } else {
      $$0182$lpad$bodyZZ2D = 1;$eh$lpad$body368$index37Z2D = $$0$i373;$eh$lpad$body368$indexZ2D = $$03$i372;
     }
    }
   } while(0);
   if ((label|0) == 436) {
    $900 = ___cxa_find_matching_catch_2()|0;
    $901 = tempRet0;
    $$0182$lpad$bodyZZ2D = $$0182;$eh$lpad$body368$index37Z2D = $901;$eh$lpad$body368$indexZ2D = $900;
   }
   __THREW__ = 0;
   invoke_vi(637,($39|0));
   $902 = __THREW__; __THREW__ = 0;
   $903 = $902&1;
   if ($903) {
    $1154 = ___cxa_find_matching_catch_3(0|0)|0;
    $1155 = tempRet0;
    ___clang_call_terminate($1154);
    // unreachable;
   }
   if ($$0182$lpad$bodyZZ2D) {
    $$29263511 = $eh$lpad$body368$index37Z2D;$$29512 = $eh$lpad$body368$indexZ2D;
   } else {
    $$40 = $eh$lpad$body368$indexZ2D;$$40274 = $eh$lpad$body368$index37Z2D;
    ___resumeException($$40|0);
    // unreachable;
   }
  }
  ___cxa_free_exception(($870|0));
  $$40 = $$29512;$$40274 = $$29263511;
  ___resumeException($$40|0);
  // unreachable;
 }
 $904 = HEAP32[$49>>2]|0;
 $905 = HEAP8[$100>>0]|0;
 $906 = ($905<<24>>24)<(0);
 if ($906) {
  $907 = ((($0)) + 8|0);
  $908 = HEAP32[$907>>2]|0;
  $911 = $908;
 } else {
  $909 = $905&255;
  $911 = $909;
 }
 $910 = ($904>>>0)<($911>>>0);
 if ($910) {
  if ($906) {
   $912 = HEAP32[$99>>2]|0;
   $914 = $912;
  } else {
   $914 = $99;
  }
  $913 = (($914) + ($904)|0);
  $915 = HEAP8[$913>>0]|0;
  $916 = ($915<<24>>24)==(44);
  if ($916) {
   $930 = (($904) + 1)|0;
   HEAP32[$49>>2] = $930;
   $931 = (__ZN10LineParser29AdvanceAndCheckEndOfStatementEv($0)|0);
   if (!($931)) {
    $932 = (___cxa_allocate_exception(36)|0);
    __THREW__ = 0;
    invoke_vii(635,($41|0),($99|0));
    $933 = __THREW__; __THREW__ = 0;
    $934 = $933&1;
    do {
     if ($934) {
      $939 = ___cxa_find_matching_catch_2()|0;
      $940 = tempRet0;
      $$31265517 = $940;$$31518 = $939;
     } else {
      $935 = HEAP32[$49>>2]|0;
      __THREW__ = 0;
      invoke_viii(697,($932|0),($41|0),($935|0));
      $936 = __THREW__; __THREW__ = 0;
      $937 = $936&1;
      if ($937) {
       $$0178 = 1;
      } else {
       __THREW__ = 0;
       invoke_viii(644,($932|0),(696|0),(7|0));
       $938 = __THREW__; __THREW__ = 0;
       $$0178 = 0;
      }
      $941 = ___cxa_find_matching_catch_2()|0;
      $942 = tempRet0;
      __THREW__ = 0;
      invoke_vi(637,($41|0));
      $943 = __THREW__; __THREW__ = 0;
      $944 = $943&1;
      if ($944) {
       $1154 = ___cxa_find_matching_catch_3(0|0)|0;
       $1155 = tempRet0;
       ___clang_call_terminate($1154);
       // unreachable;
      }
      if ($$0178) {
       $$31265517 = $942;$$31518 = $941;
       break;
      } else {
       $$40 = $941;$$40274 = $942;
      }
      ___resumeException($$40|0);
      // unreachable;
     }
    } while(0);
    ___cxa_free_exception(($932|0));
    $$40 = $$31518;$$40274 = $$31265517;
    ___resumeException($$40|0);
    // unreachable;
   }
   $945 = HEAP32[$49>>2]|0;
   $946 = HEAP8[$100>>0]|0;
   $947 = ($946<<24>>24)<(0);
   if ($947) {
    $948 = ((($0)) + 8|0);
    $949 = HEAP32[$948>>2]|0;
    $952 = $949;
   } else {
    $950 = $946&255;
    $952 = $950;
   }
   $951 = ($945>>>0)<($952>>>0);
   if ($951) {
    if ($947) {
     $953 = HEAP32[$99>>2]|0;
     $955 = $953;
    } else {
     $955 = $99;
    }
    $954 = (($955) + ($945)|0);
    $956 = HEAP8[$954>>0]|0;
    $957 = $956 << 24 >> 24;
    $958 = (_toupper($957)|0);
    $959 = ($958|0)==(88);
    if ($959) {
     $960 = (($945) + 1)|0;
     HEAP32[$49>>2] = $960;
     $961 = (__ZN10LineParser29AdvanceAndCheckEndOfStatementEv($0)|0);
     if ($961) {
      $962 = (___cxa_allocate_exception(36)|0);
      __THREW__ = 0;
      invoke_vii(635,($42|0),($99|0));
      $963 = __THREW__; __THREW__ = 0;
      $964 = $963&1;
      do {
       if ($964) {
        $969 = ___cxa_find_matching_catch_2()|0;
        $970 = tempRet0;
        $$32266520 = $970;$$32521 = $969;
       } else {
        $965 = HEAP32[$49>>2]|0;
        __THREW__ = 0;
        invoke_viii(698,($962|0),($42|0),($965|0));
        $966 = __THREW__; __THREW__ = 0;
        $967 = $966&1;
        if ($967) {
         $$0176 = 1;
        } else {
         __THREW__ = 0;
         invoke_viii(644,($962|0),(712|0),(7|0));
         $968 = __THREW__; __THREW__ = 0;
         $$0176 = 0;
        }
        $971 = ___cxa_find_matching_catch_2()|0;
        $972 = tempRet0;
        __THREW__ = 0;
        invoke_vi(637,($42|0));
        $973 = __THREW__; __THREW__ = 0;
        $974 = $973&1;
        if ($974) {
         $1154 = ___cxa_find_matching_catch_3(0|0)|0;
         $1155 = tempRet0;
         ___clang_call_terminate($1154);
         // unreachable;
        }
        if ($$0176) {
         $$32266520 = $972;$$32521 = $971;
         break;
        } else {
         $$40 = $971;$$40274 = $972;
        }
        ___resumeException($$40|0);
        // unreachable;
       }
      } while(0);
      ___cxa_free_exception(($962|0));
      $$40 = $$32521;$$40274 = $$32266520;
      ___resumeException($$40|0);
      // unreachable;
     }
     $975 = ($$0190>>>0)>(65535);
     if ($975) {
      $976 = (___cxa_allocate_exception(36)|0);
      __THREW__ = 0;
      invoke_vii(635,($43|0),($99|0));
      $977 = __THREW__; __THREW__ = 0;
      $978 = $977&1;
      do {
       if ($978) {
        $982 = ___cxa_find_matching_catch_2()|0;
        $983 = tempRet0;
        $$33267523 = $983;$$33524 = $982;
       } else {
        __THREW__ = 0;
        invoke_viii(695,($976|0),($43|0),($98|0));
        $979 = __THREW__; __THREW__ = 0;
        $980 = $979&1;
        if ($980) {
         $$0174 = 1;
        } else {
         __THREW__ = 0;
         invoke_viii(644,($976|0),(632|0),(7|0));
         $981 = __THREW__; __THREW__ = 0;
         $$0174 = 0;
        }
        $984 = ___cxa_find_matching_catch_2()|0;
        $985 = tempRet0;
        __THREW__ = 0;
        invoke_vi(637,($43|0));
        $986 = __THREW__; __THREW__ = 0;
        $987 = $986&1;
        if ($987) {
         $1154 = ___cxa_find_matching_catch_3(0|0)|0;
         $1155 = tempRet0;
         ___clang_call_terminate($1154);
         // unreachable;
        }
        if ($$0174) {
         $$33267523 = $985;$$33524 = $984;
         break;
        } else {
         $$40 = $984;$$40274 = $985;
        }
        ___resumeException($$40|0);
        // unreachable;
       }
      } while(0);
      ___cxa_free_exception(($976|0));
      $$40 = $$33524;$$40274 = $$33267523;
      ___resumeException($$40|0);
      // unreachable;
     }
     $988 = ($$0190|0)<(256);
     do {
      if ($988) {
       $989 = (((4668 + (($1*40)|0)|0)) + 8|0);
       $990 = HEAP16[$989>>1]|0;
       $991 = ($990<<16>>16)==(-1);
       if ($991) {
        break;
       }
       $992 = HEAP32[9090]|0;
       $993 = ($992|0)==(0|0);
       if ($993) {
        ___assert_fail((27040|0),(27084|0),36,(27075|0));
        // unreachable;
       }
       $994 = $990&65535;
       $995 = $994 & 65280;
       $996 = ((($992)) + 131076|0);
       $997 = HEAP32[$996>>2]|0;
       $998 = $997 << 8;
       $999 = ($995|0)>($998|0);
       if ($999) {
        break;
       }
       __ZN10LineParser9Assemble2EiNS_15ADDRESSING_MODEEj($0,$1,4,$$0190);
       STACKTOP = sp;return;
      }
     } while(0);
     $1000 = (((4668 + (($1*40)|0)|0)) + 14|0);
     $1001 = HEAP16[$1000>>1]|0;
     $1002 = ($1001<<16>>16)==(-1);
     do {
      if (!($1002)) {
       $1003 = HEAP32[9090]|0;
       $1004 = ($1003|0)==(0|0);
       if ($1004) {
        ___assert_fail((27040|0),(27084|0),36,(27075|0));
        // unreachable;
       }
       $1005 = $1001&65535;
       $1006 = $1005 & 65280;
       $1007 = ((($1003)) + 131076|0);
       $1008 = HEAP32[$1007>>2]|0;
       $1009 = $1008 << 8;
       $1010 = ($1006|0)>($1009|0);
       if ($1010) {
        break;
       }
       __ZN10LineParser9Assemble3EiNS_15ADDRESSING_MODEEj($0,$1,7,$$0190);
       STACKTOP = sp;return;
      }
     } while(0);
     $1011 = (___cxa_allocate_exception(36)|0);
     __THREW__ = 0;
     invoke_vii(635,($44|0),($99|0));
     $1012 = __THREW__; __THREW__ = 0;
     $1013 = $1012&1;
     do {
      if ($1013) {
       $1039 = ___cxa_find_matching_catch_2()|0;
       $1040 = tempRet0;
       $$34268526 = $1040;$$34527 = $1039;
      } else {
       __THREW__ = 0;
       invoke_vii(635,($3|0),($44|0));
       $1014 = __THREW__; __THREW__ = 0;
       $1015 = $1014&1;
       L822: do {
        if ($1015) {
         $$0172 = 1;
         label = 510;
        } else {
         HEAP32[$1011>>2] = (4652);
         $1016 = ((($1011)) + 4|0);
         __THREW__ = 0;
         invoke_vii(635,($1016|0),($3|0));
         $1017 = __THREW__; __THREW__ = 0;
         $1018 = $1017&1;
         do {
          if ($1018) {
           $1023 = ___cxa_find_matching_catch_2()|0;
           $1024 = tempRet0;
           $$0$i417 = $1024;$$03$i416 = $1023;
          } else {
           $1019 = ((($1011)) + 16|0);
           HEAP32[$1019>>2] = $98;
           $1020 = ((($1011)) + 20|0);
           ;HEAP32[$1020>>2]=0|0;HEAP32[$1020+4>>2]=0|0;HEAP32[$1020+8>>2]=0|0;
           __THREW__ = 0;
           invoke_viii(646,($1020|0),(44984|0),0);
           $1021 = __THREW__; __THREW__ = 0;
           $1022 = $1021&1;
           if ($1022) {
            $1025 = ___cxa_find_matching_catch_2()|0;
            $1026 = tempRet0;
            __THREW__ = 0;
            invoke_vi(637,($1016|0));
            $1027 = __THREW__; __THREW__ = 0;
            $1028 = $1027&1;
            if (!($1028)) {
             $$0$i417 = $1026;$$03$i416 = $1025;
             break;
            }
            $1029 = ___cxa_find_matching_catch_3(0|0)|0;
            $1030 = tempRet0;
            ___clang_call_terminate($1029);
            // unreachable;
           } else {
            $1031 = ((($1011)) + 32|0);
            HEAP32[$1031>>2] = 0;
            __THREW__ = 0;
            invoke_vi(637,($3|0));
            $1032 = __THREW__; __THREW__ = 0;
            $1033 = $1032&1;
            if ($1033) {
             $$0172 = 1;
             label = 510;
             break L822;
            }
            HEAP32[$1011>>2] = (7548);
            __THREW__ = 0;
            invoke_viii(644,($1011|0),(728|0),(7|0));
            $1038 = __THREW__; __THREW__ = 0;
            $$0172 = 0;
            label = 510;
            break L822;
           }
          }
         } while(0);
         __THREW__ = 0;
         invoke_vi(637,($3|0));
         $1034 = __THREW__; __THREW__ = 0;
         $1035 = $1034&1;
         if (!($1035)) {
          $$0172$lpad$bodyZZ2D = 1;$eh$lpad$body385$index42Z2D = $$0$i417;$eh$lpad$body385$indexZ2D = $$03$i416;
          break;
         }
         $1036 = ___cxa_find_matching_catch_3(0|0)|0;
         $1037 = tempRet0;
         ___clang_call_terminate($1036);
         // unreachable;
        }
       } while(0);
       if ((label|0) == 510) {
        $1041 = ___cxa_find_matching_catch_2()|0;
        $1042 = tempRet0;
        $$0172$lpad$bodyZZ2D = $$0172;$eh$lpad$body385$index42Z2D = $1042;$eh$lpad$body385$indexZ2D = $1041;
       }
       __THREW__ = 0;
       invoke_vi(637,($44|0));
       $1043 = __THREW__; __THREW__ = 0;
       $1044 = $1043&1;
       if ($1044) {
        $1154 = ___cxa_find_matching_catch_3(0|0)|0;
        $1155 = tempRet0;
        ___clang_call_terminate($1154);
        // unreachable;
       }
       if ($$0172$lpad$bodyZZ2D) {
        $$34268526 = $eh$lpad$body385$index42Z2D;$$34527 = $eh$lpad$body385$indexZ2D;
        break;
       } else {
        $$40 = $eh$lpad$body385$indexZ2D;$$40274 = $eh$lpad$body385$index42Z2D;
       }
       ___resumeException($$40|0);
       // unreachable;
      }
     } while(0);
     ___cxa_free_exception(($1011|0));
     $$40 = $$34527;$$40274 = $$34268526;
     ___resumeException($$40|0);
     // unreachable;
    }
   }
   if ($947) {
    $1045 = ((($0)) + 8|0);
    $1046 = HEAP32[$1045>>2]|0;
    $1049 = $1046;
   } else {
    $1047 = $946&255;
    $1049 = $1047;
   }
   $1048 = ($945>>>0)<($1049>>>0);
   do {
    if ($1048) {
     if ($947) {
      $1050 = HEAP32[$99>>2]|0;
      $1052 = $1050;
     } else {
      $1052 = $99;
     }
     $1051 = (($1052) + ($945)|0);
     $1053 = HEAP8[$1051>>0]|0;
     $1054 = $1053 << 24 >> 24;
     $1055 = (_toupper($1054)|0);
     $1056 = ($1055|0)==(89);
     if (!($1056)) {
      break;
     }
     $1057 = (($945) + 1)|0;
     HEAP32[$49>>2] = $1057;
     $1058 = (__ZN10LineParser29AdvanceAndCheckEndOfStatementEv($0)|0);
     if ($1058) {
      $1059 = (___cxa_allocate_exception(36)|0);
      __THREW__ = 0;
      invoke_vii(635,($45|0),($99|0));
      $1060 = __THREW__; __THREW__ = 0;
      $1061 = $1060&1;
      do {
       if ($1061) {
        $1066 = ___cxa_find_matching_catch_2()|0;
        $1067 = tempRet0;
        $$35269529 = $1067;$$35530 = $1066;
       } else {
        $1062 = HEAP32[$49>>2]|0;
        __THREW__ = 0;
        invoke_viii(698,($1059|0),($45|0),($1062|0));
        $1063 = __THREW__; __THREW__ = 0;
        $1064 = $1063&1;
        if ($1064) {
         $$0170 = 1;
        } else {
         __THREW__ = 0;
         invoke_viii(644,($1059|0),(712|0),(7|0));
         $1065 = __THREW__; __THREW__ = 0;
         $$0170 = 0;
        }
        $1068 = ___cxa_find_matching_catch_2()|0;
        $1069 = tempRet0;
        __THREW__ = 0;
        invoke_vi(637,($45|0));
        $1070 = __THREW__; __THREW__ = 0;
        $1071 = $1070&1;
        if ($1071) {
         $1154 = ___cxa_find_matching_catch_3(0|0)|0;
         $1155 = tempRet0;
         ___clang_call_terminate($1154);
         // unreachable;
        }
        if ($$0170) {
         $$35269529 = $1069;$$35530 = $1068;
         break;
        } else {
         $$40 = $1068;$$40274 = $1069;
        }
        ___resumeException($$40|0);
        // unreachable;
       }
      } while(0);
      ___cxa_free_exception(($1059|0));
      $$40 = $$35530;$$40274 = $$35269529;
      ___resumeException($$40|0);
      // unreachable;
     }
     $1072 = ($$0190>>>0)>(65535);
     if ($1072) {
      $1073 = (___cxa_allocate_exception(36)|0);
      __THREW__ = 0;
      invoke_vii(635,($46|0),($99|0));
      $1074 = __THREW__; __THREW__ = 0;
      $1075 = $1074&1;
      do {
       if ($1075) {
        $1079 = ___cxa_find_matching_catch_2()|0;
        $1080 = tempRet0;
        $$36270532 = $1080;$$36533 = $1079;
       } else {
        __THREW__ = 0;
        invoke_viii(695,($1073|0),($46|0),($98|0));
        $1076 = __THREW__; __THREW__ = 0;
        $1077 = $1076&1;
        if ($1077) {
         $$0168 = 1;
        } else {
         __THREW__ = 0;
         invoke_viii(644,($1073|0),(632|0),(7|0));
         $1078 = __THREW__; __THREW__ = 0;
         $$0168 = 0;
        }
        $1081 = ___cxa_find_matching_catch_2()|0;
        $1082 = tempRet0;
        __THREW__ = 0;
        invoke_vi(637,($46|0));
        $1083 = __THREW__; __THREW__ = 0;
        $1084 = $1083&1;
        if ($1084) {
         $1154 = ___cxa_find_matching_catch_3(0|0)|0;
         $1155 = tempRet0;
         ___clang_call_terminate($1154);
         // unreachable;
        }
        if ($$0168) {
         $$36270532 = $1082;$$36533 = $1081;
         break;
        } else {
         $$40 = $1081;$$40274 = $1082;
        }
        ___resumeException($$40|0);
        // unreachable;
       }
      } while(0);
      ___cxa_free_exception(($1073|0));
      $$40 = $$36533;$$40274 = $$36270532;
      ___resumeException($$40|0);
      // unreachable;
     }
     $1085 = ($$0190|0)<(256);
     L885: do {
      if ($1085) {
       $1086 = (((4668 + (($1*40)|0)|0)) + 10|0);
       $1087 = HEAP16[$1086>>1]|0;
       switch ($1|0) {
       case 34: case 56:  {
        break;
       }
       default: {
        break L885;
       }
       }
       $1088 = HEAP32[9090]|0;
       $1089 = ($1088|0)==(0|0);
       if ($1089) {
        ___assert_fail((27040|0),(27084|0),36,(27075|0));
        // unreachable;
       }
       $1090 = $1087&65535;
       $1091 = $1090 & 65280;
       $1092 = ((($1088)) + 131076|0);
       $1093 = HEAP32[$1092>>2]|0;
       $1094 = $1093 << 8;
       $1095 = ($1091|0)>($1094|0);
       if ($1095) {
        break;
       }
       __ZN10LineParser9Assemble2EiNS_15ADDRESSING_MODEEj($0,$1,5,$$0190);
       STACKTOP = sp;return;
      }
     } while(0);
     $1096 = (((4668 + (($1*40)|0)|0)) + 16|0);
     $1097 = HEAP16[$1096>>1]|0;
     $1098 = ($1097<<16>>16)==(-1);
     do {
      if (!($1098)) {
       $1099 = HEAP32[9090]|0;
       $1100 = ($1099|0)==(0|0);
       if ($1100) {
        ___assert_fail((27040|0),(27084|0),36,(27075|0));
        // unreachable;
       }
       $1101 = $1097&65535;
       $1102 = $1101 & 65280;
       $1103 = ((($1099)) + 131076|0);
       $1104 = HEAP32[$1103>>2]|0;
       $1105 = $1104 << 8;
       $1106 = ($1102|0)>($1105|0);
       if ($1106) {
        break;
       }
       __ZN10LineParser9Assemble3EiNS_15ADDRESSING_MODEEj($0,$1,8,$$0190);
       STACKTOP = sp;return;
      }
     } while(0);
     $1107 = (___cxa_allocate_exception(36)|0);
     __THREW__ = 0;
     invoke_vii(635,($47|0),($99|0));
     $1108 = __THREW__; __THREW__ = 0;
     $1109 = $1108&1;
     do {
      if ($1109) {
       $1135 = ___cxa_find_matching_catch_2()|0;
       $1136 = tempRet0;
       $$37271535 = $1136;$$37536 = $1135;
      } else {
       __THREW__ = 0;
       invoke_vii(635,($2|0),($47|0));
       $1110 = __THREW__; __THREW__ = 0;
       $1111 = $1110&1;
       L905: do {
        if ($1111) {
         $$0166 = 1;
         label = 561;
        } else {
         HEAP32[$1107>>2] = (4652);
         $1112 = ((($1107)) + 4|0);
         __THREW__ = 0;
         invoke_vii(635,($1112|0),($2|0));
         $1113 = __THREW__; __THREW__ = 0;
         $1114 = $1113&1;
         do {
          if ($1114) {
           $1119 = ___cxa_find_matching_catch_2()|0;
           $1120 = tempRet0;
           $$0$i422 = $1120;$$03$i421 = $1119;
          } else {
           $1115 = ((($1107)) + 16|0);
           HEAP32[$1115>>2] = $98;
           $1116 = ((($1107)) + 20|0);
           ;HEAP32[$1116>>2]=0|0;HEAP32[$1116+4>>2]=0|0;HEAP32[$1116+8>>2]=0|0;
           __THREW__ = 0;
           invoke_viii(646,($1116|0),(44984|0),0);
           $1117 = __THREW__; __THREW__ = 0;
           $1118 = $1117&1;
           if ($1118) {
            $1121 = ___cxa_find_matching_catch_2()|0;
            $1122 = tempRet0;
            __THREW__ = 0;
            invoke_vi(637,($1112|0));
            $1123 = __THREW__; __THREW__ = 0;
            $1124 = $1123&1;
            if (!($1124)) {
             $$0$i422 = $1122;$$03$i421 = $1121;
             break;
            }
            $1125 = ___cxa_find_matching_catch_3(0|0)|0;
            $1126 = tempRet0;
            ___clang_call_terminate($1125);
            // unreachable;
           } else {
            $1127 = ((($1107)) + 32|0);
            HEAP32[$1127>>2] = 0;
            __THREW__ = 0;
            invoke_vi(637,($2|0));
            $1128 = __THREW__; __THREW__ = 0;
            $1129 = $1128&1;
            if ($1129) {
             $$0166 = 1;
             label = 561;
             break L905;
            }
            HEAP32[$1107>>2] = (7572);
            __THREW__ = 0;
            invoke_viii(644,($1107|0),(744|0),(7|0));
            $1134 = __THREW__; __THREW__ = 0;
            $$0166 = 0;
            label = 561;
            break L905;
           }
          }
         } while(0);
         __THREW__ = 0;
         invoke_vi(637,($2|0));
         $1130 = __THREW__; __THREW__ = 0;
         $1131 = $1130&1;
         if (!($1131)) {
          $$0166$lpad$bodyZZ2D = 1;$eh$lpad$body395$index47Z2D = $$0$i422;$eh$lpad$body395$indexZ2D = $$03$i421;
          break;
         }
         $1132 = ___cxa_find_matching_catch_3(0|0)|0;
         $1133 = tempRet0;
         ___clang_call_terminate($1132);
         // unreachable;
        }
       } while(0);
       if ((label|0) == 561) {
        $1137 = ___cxa_find_matching_catch_2()|0;
        $1138 = tempRet0;
        $$0166$lpad$bodyZZ2D = $$0166;$eh$lpad$body395$index47Z2D = $1138;$eh$lpad$body395$indexZ2D = $1137;
       }
       __THREW__ = 0;
       invoke_vi(637,($47|0));
       $1139 = __THREW__; __THREW__ = 0;
       $1140 = $1139&1;
       if ($1140) {
        $1154 = ___cxa_find_matching_catch_3(0|0)|0;
        $1155 = tempRet0;
        ___clang_call_terminate($1154);
        // unreachable;
       }
       if ($$0166$lpad$bodyZZ2D) {
        $$37271535 = $eh$lpad$body395$index47Z2D;$$37536 = $eh$lpad$body395$indexZ2D;
        break;
       } else {
        $$40 = $eh$lpad$body395$indexZ2D;$$40274 = $eh$lpad$body395$index47Z2D;
       }
       ___resumeException($$40|0);
       // unreachable;
      }
     } while(0);
     ___cxa_free_exception(($1107|0));
     $$40 = $$37536;$$40274 = $$37271535;
     ___resumeException($$40|0);
     // unreachable;
    }
   } while(0);
   $1141 = (___cxa_allocate_exception(36)|0);
   __THREW__ = 0;
   invoke_vii(635,($48|0),($99|0));
   $1142 = __THREW__; __THREW__ = 0;
   $1143 = $1142&1;
   do {
    if ($1143) {
     $1148 = ___cxa_find_matching_catch_2()|0;
     $1149 = tempRet0;
     $$38272538 = $1149;$$38539 = $1148;
    } else {
     $1144 = HEAP32[$49>>2]|0;
     __THREW__ = 0;
     invoke_viii(698,($1141|0),($48|0),($1144|0));
     $1145 = __THREW__; __THREW__ = 0;
     $1146 = $1145&1;
     if ($1146) {
      $$0 = 1;
     } else {
      __THREW__ = 0;
      invoke_viii(644,($1141|0),(712|0),(7|0));
      $1147 = __THREW__; __THREW__ = 0;
      $$0 = 0;
     }
     $1150 = ___cxa_find_matching_catch_2()|0;
     $1151 = tempRet0;
     __THREW__ = 0;
     invoke_vi(637,($48|0));
     $1152 = __THREW__; __THREW__ = 0;
     $1153 = $1152&1;
     if ($1153) {
      $1154 = ___cxa_find_matching_catch_3(0|0)|0;
      $1155 = tempRet0;
      ___clang_call_terminate($1154);
      // unreachable;
     }
     if ($$0) {
      $$38272538 = $1151;$$38539 = $1150;
      break;
     } else {
      $$40 = $1150;$$40274 = $1151;
     }
     ___resumeException($$40|0);
     // unreachable;
    }
   } while(0);
   ___cxa_free_exception(($1141|0));
   $$40 = $$38539;$$40274 = $$38272538;
   ___resumeException($$40|0);
   // unreachable;
  }
 }
 $917 = (___cxa_allocate_exception(36)|0);
 __THREW__ = 0;
 invoke_vii(635,($40|0),($99|0));
 $918 = __THREW__; __THREW__ = 0;
 $919 = $918&1;
 if ($919) {
  $924 = ___cxa_find_matching_catch_2()|0;
  $925 = tempRet0;
  $$30264514 = $925;$$30515 = $924;
 } else {
  $920 = HEAP32[$49>>2]|0;
  __THREW__ = 0;
  invoke_viii(697,($917|0),($40|0),($920|0));
  $921 = __THREW__; __THREW__ = 0;
  $922 = $921&1;
  if ($922) {
   $$0180 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($917|0),(696|0),(7|0));
   $923 = __THREW__; __THREW__ = 0;
   $$0180 = 0;
  }
  $926 = ___cxa_find_matching_catch_2()|0;
  $927 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($40|0));
  $928 = __THREW__; __THREW__ = 0;
  $929 = $928&1;
  if ($929) {
   $1154 = ___cxa_find_matching_catch_3(0|0)|0;
   $1155 = tempRet0;
   ___clang_call_terminate($1154);
   // unreachable;
  }
  if ($$0180) {
   $$30264514 = $927;$$30515 = $926;
  } else {
   $$40 = $926;$$40274 = $927;
   ___resumeException($$40|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($917|0));
 $$40 = $$30515;$$40274 = $$30264514;
 ___resumeException($$40|0);
 // unreachable;
}
function __ZN35AsmException_SyntaxError_NoIndirectC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$03$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3,$1);
 HEAP32[$0>>2] = (4652);
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($4|0),($3|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $11 = ___cxa_find_matching_catch_2()|0;
  $12 = tempRet0;
  $$0$i = $12;$$03$i = $11;
 } else {
  $7 = ((($0)) + 16|0);
  HEAP32[$7>>2] = $2;
  $8 = ((($0)) + 20|0);
  ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
  __THREW__ = 0;
  invoke_viii(646,($8|0),(44984|0),0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   $19 = ((($0)) + 32|0);
   HEAP32[$19>>2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
   HEAP32[$0>>2] = (7716);
   STACKTOP = sp;return;
  }
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($4|0));
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if ($16) {
   $17 = ___cxa_find_matching_catch_3(0|0)|0;
   $18 = tempRet0;
   ___clang_call_terminate($17);
   // unreachable;
  } else {
   $$0$i = $14;$$03$i = $13;
  }
 }
 __THREW__ = 0;
 invoke_vi(637,($3|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch_3(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  ___resumeException($$03$i|0);
  // unreachable;
 }
}
function __ZN36AsmException_SyntaxError_NotZeroPageC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$03$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3,$1);
 HEAP32[$0>>2] = (4652);
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($4|0),($3|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $11 = ___cxa_find_matching_catch_2()|0;
  $12 = tempRet0;
  $$0$i = $12;$$03$i = $11;
 } else {
  $7 = ((($0)) + 16|0);
  HEAP32[$7>>2] = $2;
  $8 = ((($0)) + 20|0);
  ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
  __THREW__ = 0;
  invoke_viii(646,($8|0),(44984|0),0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   $19 = ((($0)) + 32|0);
   HEAP32[$19>>2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
   HEAP32[$0>>2] = (7692);
   STACKTOP = sp;return;
  }
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($4|0));
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if ($16) {
   $17 = ___cxa_find_matching_catch_3(0|0)|0;
   $18 = tempRet0;
   ___clang_call_terminate($17);
   // unreachable;
  } else {
   $$0$i = $14;$$03$i = $13;
  }
 }
 __THREW__ = 0;
 invoke_vi(637,($3|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch_3(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  ___resumeException($$03$i|0);
  // unreachable;
 }
}
function __ZN35AsmException_SyntaxError_BadAddressC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$03$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3,$1);
 HEAP32[$0>>2] = (4652);
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($4|0),($3|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $11 = ___cxa_find_matching_catch_2()|0;
  $12 = tempRet0;
  $$0$i = $12;$$03$i = $11;
 } else {
  $7 = ((($0)) + 16|0);
  HEAP32[$7>>2] = $2;
  $8 = ((($0)) + 20|0);
  ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
  __THREW__ = 0;
  invoke_viii(646,($8|0),(44984|0),0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   $19 = ((($0)) + 32|0);
   HEAP32[$19>>2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
   HEAP32[$0>>2] = (7668);
   STACKTOP = sp;return;
  }
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($4|0));
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if ($16) {
   $17 = ___cxa_find_matching_catch_3(0|0)|0;
   $18 = tempRet0;
   ___clang_call_terminate($17);
   // unreachable;
  } else {
   $$0$i = $14;$$03$i = $13;
  }
 }
 __THREW__ = 0;
 invoke_vi(637,($3|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch_3(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  ___resumeException($$03$i|0);
  // unreachable;
 }
}
function __ZN36AsmException_SyntaxError_BadIndirectC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$03$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3,$1);
 HEAP32[$0>>2] = (4652);
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($4|0),($3|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $11 = ___cxa_find_matching_catch_2()|0;
  $12 = tempRet0;
  $$0$i = $12;$$03$i = $11;
 } else {
  $7 = ((($0)) + 16|0);
  HEAP32[$7>>2] = $2;
  $8 = ((($0)) + 20|0);
  ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
  __THREW__ = 0;
  invoke_viii(646,($8|0),(44984|0),0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   $19 = ((($0)) + 32|0);
   HEAP32[$19>>2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
   HEAP32[$0>>2] = (7644);
   STACKTOP = sp;return;
  }
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($4|0));
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if ($16) {
   $17 = ___cxa_find_matching_catch_3(0|0)|0;
   $18 = tempRet0;
   ___clang_call_terminate($17);
   // unreachable;
  } else {
   $$0$i = $14;$$03$i = $13;
  }
 }
 __THREW__ = 0;
 invoke_vi(637,($3|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch_3(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  ___resumeException($$03$i|0);
  // unreachable;
 }
}
function __ZN36AsmException_SyntaxError_BadAbsoluteC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$03$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3,$1);
 HEAP32[$0>>2] = (4652);
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($4|0),($3|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $11 = ___cxa_find_matching_catch_2()|0;
  $12 = tempRet0;
  $$0$i = $12;$$03$i = $11;
 } else {
  $7 = ((($0)) + 16|0);
  HEAP32[$7>>2] = $2;
  $8 = ((($0)) + 20|0);
  ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
  __THREW__ = 0;
  invoke_viii(646,($8|0),(44984|0),0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   $19 = ((($0)) + 32|0);
   HEAP32[$19>>2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
   HEAP32[$0>>2] = (7620);
   STACKTOP = sp;return;
  }
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($4|0));
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if ($16) {
   $17 = ___cxa_find_matching_catch_3(0|0)|0;
   $18 = tempRet0;
   ___clang_call_terminate($17);
   // unreachable;
  } else {
   $$0$i = $14;$$03$i = $13;
  }
 }
 __THREW__ = 0;
 invoke_vi(637,($3|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch_3(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  ___resumeException($$03$i|0);
  // unreachable;
 }
}
function __ZN35AsmException_SyntaxError_BadIndexedC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$03$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3,$1);
 HEAP32[$0>>2] = (4652);
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($4|0),($3|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $11 = ___cxa_find_matching_catch_2()|0;
  $12 = tempRet0;
  $$0$i = $12;$$03$i = $11;
 } else {
  $7 = ((($0)) + 16|0);
  HEAP32[$7>>2] = $2;
  $8 = ((($0)) + 20|0);
  ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
  __THREW__ = 0;
  invoke_viii(646,($8|0),(44984|0),0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   $19 = ((($0)) + 32|0);
   HEAP32[$19>>2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
   HEAP32[$0>>2] = (7596);
   STACKTOP = sp;return;
  }
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($4|0));
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if ($16) {
   $17 = ___cxa_find_matching_catch_3(0|0)|0;
   $18 = tempRet0;
   ___clang_call_terminate($17);
   // unreachable;
  } else {
   $$0$i = $14;$$03$i = $13;
  }
 }
 __THREW__ = 0;
 invoke_vi(637,($3|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch_3(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  ___resumeException($$03$i|0);
  // unreachable;
 }
}
function __ZN35AsmException_SyntaxError_NoIndexedYD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK35AsmException_SyntaxError_NoIndexedY7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22583|0);
}
function __ZN35AsmException_SyntaxError_NoIndexedXD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK35AsmException_SyntaxError_NoIndexedX7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22673|0);
}
function __ZN35AsmException_SyntaxError_BadIndexedD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK35AsmException_SyntaxError_BadIndexed7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22763|0);
}
function __ZN36AsmException_SyntaxError_BadAbsoluteD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK36AsmException_SyntaxError_BadAbsolute7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22839|0);
}
function __ZN35AsmException_SyntaxError_NoAbsoluteD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK35AsmException_SyntaxError_NoAbsolute7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22915|0);
}
function __ZN41AsmException_SyntaxError_BranchOutOfRangeD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK41AsmException_SyntaxError_BranchOutOfRange7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (23018|0);
}
function __ZN36AsmException_SyntaxError_BadIndirectD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK36AsmException_SyntaxError_BadIndirect7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (23078|0);
}
function __ZN35AsmException_SyntaxError_BadAddressD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK35AsmException_SyntaxError_BadAddress7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (23157|0);
}
function __ZN36AsmException_SyntaxError_NotZeroPageD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK36AsmException_SyntaxError_NotZeroPage7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (23218|0);
}
function __ZN35AsmException_SyntaxError_NoIndirectD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK35AsmException_SyntaxError_NoIndirect7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (23285|0);
}
function __ZN32AsmException_SyntaxError_6502BugD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK32AsmException_SyntaxError_6502Bug7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (23368|0);
}
function __ZN40AsmException_SyntaxError_UnexpectedCommaD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK40AsmException_SyntaxError_UnexpectedComma7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (23487|0);
}
function __ZN36AsmException_SyntaxError_ImmNegativeD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK36AsmException_SyntaxError_ImmNegative7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (23555|0);
}
function __ZN36AsmException_SyntaxError_ImmTooLargeD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK36AsmException_SyntaxError_ImmTooLarge7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (23623|0);
}
function __ZN36AsmException_SyntaxError_NoImmediateD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK36AsmException_SyntaxError_NoImmediate7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (23710|0);
}
function __ZN34AsmException_SyntaxError_NoImpliedD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK34AsmException_SyntaxError_NoImplied7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (23796|0);
}
function __ZN9DiscImageC2EPKcS1_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$i = 0, $$0$i62 = 0, $$02$i = 0, $$02$i61 = 0, $$036 = 0, $$038 = 0, $$040117 = 0, $$041101 = 0, $$043100 = 0, $$054 = 0, $$056 = 0, $$057 = 0, $$059 = 0, $$10 = 0, $$1053 = 0, $$142104 = 0, $$144103 = 0, $$2107 = 0, $$245106 = 0;
 var $$3110 = 0, $$346109 = 0, $$4113 = 0, $$447112 = 0, $$5 = 0, $$548 = 0, $$8116 = 0, $$851115 = 0, $$9 = 0, $$952 = 0, $$pre$phi118Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $eh$lpad$body$i$indexZ2D = 0, $eh$lpad$body$i95$indexZ2D = 0, $eh$lpad$body94$indexZ2D = 0, $endptr = 0, $strlen = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(416|0);
 $3 = sp + 76|0;
 $4 = sp + 64|0;
 $5 = sp + 52|0;
 $6 = sp;
 $7 = sp + 152|0;
 $8 = sp + 40|0;
 $9 = sp + 28|0;
 $10 = sp + 16|0;
 $11 = sp + 88|0;
 $12 = ((($0)) + 104|0);
 $13 = ((($0)) + 4|0);
 HEAP32[$0>>2] = ((7744));
 HEAP32[$12>>2] = ((7764));
 $14 = ((($0)) + 104|0);
 __THREW__ = 0;
 invoke_vii(649,($14|0),($13|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 do {
  if ($16) {
   $21 = ___cxa_find_matching_catch_2()|0;
   $22 = tempRet0;
   $$0$i = $22;$$02$i = $21;
  } else {
   $17 = ((($0)) + 176|0);
   HEAP32[$17>>2] = 0;
   $18 = ((($0)) + 180|0);
   HEAP32[$18>>2] = -1;
   HEAP32[$0>>2] = (7784);
   HEAP32[$12>>2] = (7804);
   __THREW__ = 0;
   invoke_vi(699,($13|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    $23 = ___cxa_find_matching_catch_2()|0;
    $24 = tempRet0;
    __THREW__ = 0;
    invoke_vii(652,($0|0),((7816)|0));
    $25 = __THREW__; __THREW__ = 0;
    $26 = $25&1;
    if (!($26)) {
     $$0$i = $24;$$02$i = $23;
     break;
    }
    $29 = ___cxa_find_matching_catch_3(0|0)|0;
    $30 = tempRet0;
    ___clang_call_terminate($29);
    // unreachable;
   }
   $31 = ((($0)) + 184|0);
   $32 = ((($0)) + 292|0);
   $33 = ((($0)) + 192|0);
   HEAP32[$31>>2] = ((7840));
   HEAP32[$32>>2] = ((7860));
   $34 = ((($0)) + 188|0);
   HEAP32[$34>>2] = 0;
   $35 = ((($0)) + 292|0);
   __THREW__ = 0;
   invoke_vii(649,($35|0),($33|0));
   $36 = __THREW__; __THREW__ = 0;
   $37 = $36&1;
   L8: do {
    if ($37) {
     $42 = ___cxa_find_matching_catch_2()|0;
     $43 = tempRet0;
     $$0$i62 = $43;$$02$i61 = $42;
     label = 12;
    } else {
     $38 = ((($0)) + 364|0);
     HEAP32[$38>>2] = 0;
     $39 = ((($0)) + 368|0);
     HEAP32[$39>>2] = -1;
     HEAP32[$31>>2] = (7880);
     HEAP32[$32>>2] = (7900);
     __THREW__ = 0;
     invoke_vi(699,($33|0));
     $40 = __THREW__; __THREW__ = 0;
     $41 = $40&1;
     if ($41) {
      $44 = ___cxa_find_matching_catch_2()|0;
      $45 = tempRet0;
      __THREW__ = 0;
      invoke_vii(671,($31|0),((7912)|0));
      $46 = __THREW__; __THREW__ = 0;
      $47 = $46&1;
      if (!($47)) {
       $$0$i62 = $45;$$02$i61 = $44;
       label = 12;
       break;
      }
      $50 = ___cxa_find_matching_catch_3(0|0)|0;
      $51 = tempRet0;
      ___clang_call_terminate($50);
      // unreachable;
     }
     $52 = ((($0)) + 372|0);
     HEAP32[$52>>2] = $1;
     $53 = ((($0)) + 68|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (_fopen($1,27900)|0);
      HEAP32[$53>>2] = $56;
      $57 = ($56|0)==(0|0);
      if ($57) {
       label = 17;
      } else {
       $58 = ((($0)) + 92|0);
       HEAP32[$58>>2] = 52;
       $59 = HEAP32[$0>>2]|0;
       $60 = ((($59)) + -12|0);
       $61 = HEAP32[$60>>2]|0;
       $62 = (($0) + ($61)|0);
       __THREW__ = 0;
       invoke_vii(662,($62|0),0);
       $63 = __THREW__; __THREW__ = 0;
       $64 = $63&1;
       if ($64) {
        label = 22;
       } else {
        $$pre$phi118Z2D = $0;$$pre$phiZ2D = $0;
        label = 18;
       }
      }
     } else {
      label = 17;
     }
     if ((label|0) == 17) {
      $65 = HEAP32[$0>>2]|0;
      $66 = ((($65)) + -12|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = (($0) + ($67)|0);
      $69 = ((($68)) + 16|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = $70 | 4;
      __THREW__ = 0;
      invoke_vii(662,($68|0),($71|0));
      $72 = __THREW__; __THREW__ = 0;
      $73 = $72&1;
      if ($73) {
       label = 22;
      } else {
       $$pre$phi118Z2D = $0;$$pre$phiZ2D = $0;
       label = 18;
      }
     }
     L20: do {
      if ((label|0) == 18) {
       $74 = HEAP32[$$pre$phiZ2D>>2]|0;
       $75 = ((($74)) + -12|0);
       $76 = HEAP32[$75>>2]|0;
       $77 = (($$pre$phi118Z2D) + ($76)|0);
       $78 = ((($77)) + 16|0);
       $79 = HEAP32[$78>>2]|0;
       $80 = $79 & 5;
       $81 = ($80|0)==(0);
       if (!($81)) {
        $82 = (___cxa_allocate_exception(16)|0);
        ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
        $83 = (_strlen($1)|0);
        __THREW__ = 0;
        invoke_viii(646,($3|0),($1|0),($83|0));
        $84 = __THREW__; __THREW__ = 0;
        $85 = $84&1;
        if ($85) {
         $92 = ___cxa_find_matching_catch_2()|0;
         $93 = tempRet0;
         $$041101 = $92;$$043100 = $93;
        } else {
         HEAP32[$82>>2] = (4628);
         $86 = ((($82)) + 4|0);
         __THREW__ = 0;
         invoke_vii(635,($86|0),($3|0));
         $87 = __THREW__; __THREW__ = 0;
         $88 = $87&1;
         if ($88) {
          $$054 = 1;
         } else {
          HEAP32[$82>>2] = (7932);
          __THREW__ = 0;
          invoke_viii(644,($82|0),(760|0),(3|0));
          $89 = __THREW__; __THREW__ = 0;
          $$054 = 0;
         }
         $94 = ___cxa_find_matching_catch_2()|0;
         $95 = tempRet0;
         __THREW__ = 0;
         invoke_vi(637,($3|0));
         $96 = __THREW__; __THREW__ = 0;
         $97 = $96&1;
         if ($97) {
          break L8;
         }
         if ($$054) {
          $$041101 = $94;$$043100 = $95;
         } else {
          $$9 = $94;$$952 = $95;
          break;
         }
        }
        ___cxa_free_exception(($82|0));
        $$9 = $$041101;$$952 = $$043100;
        break;
       }
       $98 = ($2|0)==(0|0);
       if ($98) {
        $271 = ((($0)) + 376|0);
        _memset(($271|0),0,512)|0;
        $272 = HEAP32[9088]|0;
        $273 = ($272|0)==(0|0);
        if ($273) {
         __THREW__ = 0;
         invoke_viiii(680,(27040|0),(27060|0),38,(27075|0));
         $274 = __THREW__; __THREW__ = 0;
         label = 22;
         break;
        }
        $275 = ((($272)) + 32|0);
        $276 = HEAP32[$275>>2]|0;
        $277 = $276 << 4;
        $278 = $277 & 48;
        $279 = $278 | 3;
        $280 = $279&255;
        $281 = ((($0)) + 638|0);
        HEAP8[$281>>0] = $280;
        $282 = ((($0)) + 639|0);
        HEAP8[$282>>0] = 32;
        __THREW__ = 0;
        $283 = (invoke_iiii(702,($0|0),($271|0),512)|0);
        $284 = __THREW__; __THREW__ = 0;
        $285 = $284&1;
        if ($285) {
         label = 22;
         break;
        }
        $286 = HEAP32[$283>>2]|0;
        $287 = ((($286)) + -12|0);
        $288 = HEAP32[$287>>2]|0;
        $289 = (($283) + ($288)|0);
        $290 = ((($289)) + 16|0);
        $291 = HEAP32[$290>>2]|0;
        $292 = $291 & 5;
        $293 = ($292|0)==(0);
        if (!($293)) {
         $294 = (___cxa_allocate_exception(16)|0);
         $295 = HEAP32[$52>>2]|0;
         ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
         $296 = (_strlen($295)|0);
         __THREW__ = 0;
         invoke_viii(646,($10|0),($295|0),($296|0));
         $297 = __THREW__; __THREW__ = 0;
         $298 = $297&1;
         if ($298) {
          $303 = ___cxa_find_matching_catch_2()|0;
          $304 = tempRet0;
          $$8116 = $303;$$851115 = $304;
         } else {
          HEAP32[$294>>2] = (4628);
          $299 = ((($294)) + 4|0);
          __THREW__ = 0;
          invoke_vii(635,($299|0),($10|0));
          $300 = __THREW__; __THREW__ = 0;
          $301 = $300&1;
          if ($301) {
           $$0 = 1;
          } else {
           HEAP32[$294>>2] = (8004);
           __THREW__ = 0;
           invoke_viii(644,($294|0),(808|0),(3|0));
           $302 = __THREW__; __THREW__ = 0;
           $$0 = 0;
          }
          $305 = ___cxa_find_matching_catch_2()|0;
          $306 = tempRet0;
          __THREW__ = 0;
          invoke_vi(637,($10|0));
          $307 = __THREW__; __THREW__ = 0;
          $308 = $307&1;
          if ($308) {
           break L8;
          }
          if ($$0) {
           $$8116 = $305;$$851115 = $306;
          } else {
           $$9 = $305;$$952 = $306;
           break;
          }
         }
         ___cxa_free_exception(($294|0));
         $$9 = $$8116;$$952 = $$851115;
         break;
        }
        $309 = HEAP32[9088]|0;
        $310 = ($309|0)==(0|0);
        if ($310) {
         __THREW__ = 0;
         invoke_viiii(680,(27040|0),(27060|0),38,(27075|0));
         $311 = __THREW__; __THREW__ = 0;
         label = 22;
         break;
        }
        $312 = ((($309)) + 4|0);
        $313 = HEAP32[$312>>2]|0;
        $314 = ($313|0)==(0|0);
        if ($314) {
         STACKTOP = sp;return;
        }
        dest=$11; src=23899; stop=dest+13|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
        $315 = HEAP32[$312>>2]|0;
        (_strcat($11,$315)|0);
        $strlen = (_strlen($11)|0);
        $endptr = (($11) + ($strlen)|0);
        HEAP8[$endptr>>0]=13&255;HEAP8[$endptr+1>>0]=13>>8;
        $316 = (_strlen($11)|0);
        __THREW__ = 0;
        invoke_viiiiii(703,($0|0),(23912|0),($11|0),0,16777215,($316|0));
        $317 = __THREW__; __THREW__ = 0;
        $318 = $317&1;
        if ($318) {
         $319 = ___cxa_find_matching_catch_2()|0;
         $320 = tempRet0;
         $$9 = $319;$$952 = $320;
         break;
        }
        HEAP8[$281>>0] = 51;
        STACKTOP = sp;return;
       }
       $99 = ((($0)) + 256|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = ($100|0)==(0|0);
       if ($101) {
        $102 = (_fopen($2,27658)|0);
        HEAP32[$99>>2] = $102;
        $103 = ($102|0)==(0|0);
        if ($103) {
         label = 31;
        } else {
         $104 = ((($0)) + 280|0);
         HEAP32[$104>>2] = 12;
         $105 = HEAP32[$31>>2]|0;
         $106 = ((($105)) + -12|0);
         $107 = HEAP32[$106>>2]|0;
         $108 = (($31) + ($107)|0);
         __THREW__ = 0;
         invoke_vii(662,($108|0),0);
         $109 = __THREW__; __THREW__ = 0;
         $110 = $109&1;
         if ($110) {
          label = 22;
          break;
         } else {
          $121 = $31;$125 = $31;
         }
        }
       } else {
        label = 31;
       }
       if ((label|0) == 31) {
        $111 = HEAP32[$31>>2]|0;
        $112 = ((($111)) + -12|0);
        $113 = HEAP32[$112>>2]|0;
        $114 = (($31) + ($113)|0);
        $115 = ((($114)) + 16|0);
        $116 = HEAP32[$115>>2]|0;
        $117 = $116 | 4;
        __THREW__ = 0;
        invoke_vii(662,($114|0),($117|0));
        $118 = __THREW__; __THREW__ = 0;
        $119 = $118&1;
        if ($119) {
         label = 22;
         break;
        } else {
         $121 = $31;$125 = $31;
        }
       }
       $120 = HEAP32[$121>>2]|0;
       $122 = ((($120)) + -12|0);
       $123 = HEAP32[$122>>2]|0;
       $124 = (($125) + ($123)|0);
       $126 = ((($124)) + 16|0);
       $127 = HEAP32[$126>>2]|0;
       $128 = $127 & 5;
       $129 = ($128|0)==(0);
       if (!($129)) {
        $130 = (___cxa_allocate_exception(16)|0);
        ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
        $131 = (_strlen($2)|0);
        __THREW__ = 0;
        invoke_viii(646,($4|0),($2|0),($131|0));
        $132 = __THREW__; __THREW__ = 0;
        $133 = $132&1;
        if ($133) {
         $138 = ___cxa_find_matching_catch_2()|0;
         $139 = tempRet0;
         $$142104 = $138;$$144103 = $139;
        } else {
         HEAP32[$130>>2] = (4628);
         $134 = ((($130)) + 4|0);
         __THREW__ = 0;
         invoke_vii(635,($134|0),($4|0));
         $135 = __THREW__; __THREW__ = 0;
         $136 = $135&1;
         if ($136) {
          $$059 = 1;
         } else {
          HEAP32[$130>>2] = (7956);
          __THREW__ = 0;
          invoke_viii(644,($130|0),(776|0),(3|0));
          $137 = __THREW__; __THREW__ = 0;
          $$059 = 0;
         }
         $140 = ___cxa_find_matching_catch_2()|0;
         $141 = tempRet0;
         __THREW__ = 0;
         invoke_vi(637,($4|0));
         $142 = __THREW__; __THREW__ = 0;
         $143 = $142&1;
         if ($143) {
          break L8;
         }
         if ($$059) {
          $$142104 = $140;$$144103 = $141;
         } else {
          $$9 = $140;$$952 = $141;
          break;
         }
        }
        ___cxa_free_exception(($130|0));
        $$9 = $$142104;$$952 = $$144103;
        break;
       }
       $144 = ((($0)) + 376|0);
       __THREW__ = 0;
       $145 = (invoke_iiii(700,($31|0),($144|0),512)|0);
       $146 = __THREW__; __THREW__ = 0;
       $147 = $146&1;
       if ($147) {
        label = 22;
       } else {
        $148 = HEAP32[$145>>2]|0;
        $149 = ((($148)) + -12|0);
        $150 = HEAP32[$149>>2]|0;
        $151 = (($145) + ($150)|0);
        $152 = ((($151)) + 16|0);
        $153 = HEAP32[$152>>2]|0;
        $154 = $153 & 5;
        $155 = ($154|0)==(0);
        if (!($155)) {
         $156 = (___cxa_allocate_exception(16)|0);
         ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
         $157 = (_strlen($2)|0);
         __THREW__ = 0;
         invoke_viii(646,($5|0),($2|0),($157|0));
         $158 = __THREW__; __THREW__ = 0;
         $159 = $158&1;
         if ($159) {
          $164 = ___cxa_find_matching_catch_2()|0;
          $165 = tempRet0;
          $$2107 = $164;$$245106 = $165;
         } else {
          HEAP32[$156>>2] = (4628);
          $160 = ((($156)) + 4|0);
          __THREW__ = 0;
          invoke_vii(635,($160|0),($5|0));
          $161 = __THREW__; __THREW__ = 0;
          $162 = $161&1;
          if ($162) {
           $$057 = 1;
          } else {
           HEAP32[$156>>2] = (7980);
           __THREW__ = 0;
           invoke_viii(644,($156|0),(792|0),(3|0));
           $163 = __THREW__; __THREW__ = 0;
           $$057 = 0;
          }
          $166 = ___cxa_find_matching_catch_2()|0;
          $167 = tempRet0;
          __THREW__ = 0;
          invoke_vi(637,($5|0));
          $168 = __THREW__; __THREW__ = 0;
          $169 = $168&1;
          if ($169) {
           break L8;
          }
          if ($$057) {
           $$2107 = $166;$$245106 = $167;
          } else {
           $$9 = $166;$$952 = $167;
           break;
          }
         }
         ___cxa_free_exception(($156|0));
         $$9 = $$2107;$$952 = $$245106;
         break;
        }
        $170 = ((($0)) + 637|0);
        $171 = HEAP8[$170>>0]|0;
        $172 = ($171<<24>>24)==(0);
        if ($172) {
         $$056 = 2;
        } else {
         $173 = ((($0)) + 647|0);
         $174 = HEAP8[$173>>0]|0;
         $175 = $174&255;
         $176 = ((($0)) + 646|0);
         $177 = HEAP8[$176>>0]|0;
         $178 = $177&255;
         $179 = $178 << 8;
         $180 = $179 & 768;
         $181 = $180 | $175;
         $182 = ((($0)) + 644|0);
         $183 = HEAP16[$182>>1]|0;
         $184 = $183&65535;
         $185 = $184 & 255;
         $186 = ($183&65535) >>> 8;
         $187 = $186&65535;
         $188 = $187 << 8;
         $189 = $178 << 12;
         $190 = $189 & 196608;
         $191 = $190 | $185;
         $192 = $191 | $188;
         $193 = (($192) + 255)|0;
         $194 = $193 >>> 8;
         $195 = (($194) + ($181))|0;
         $$056 = $195;
        }
        __THREW__ = 0;
        (invoke_iiiii(701,($31|0),0,0,2)|0);
        $196 = __THREW__; __THREW__ = 0;
        $197 = $196&1;
        if (!($197)) {
         __THREW__ = 0;
         invoke_vii(674,($6|0),($31|0));
         $198 = __THREW__; __THREW__ = 0;
         $199 = $198&1;
         if (!($199)) {
          $200 = ((($6)) + 8|0);
          $201 = $200;
          $202 = $201;
          $203 = HEAP32[$202>>2]|0;
          $204 = (($201) + 4)|0;
          $205 = $204;
          $206 = HEAP32[$205>>2]|0;
          __THREW__ = 0;
          (invoke_iiiii(701,($31|0),0,0,0)|0);
          $207 = __THREW__; __THREW__ = 0;
          $208 = $207&1;
          do {
           if (!($208)) {
            $209 = $$056 << 8;
            $210 = ($203|0)<($209|0);
            if ($210) {
             __THREW__ = 0;
             invoke_viiii(680,(23843|0),(23875|0),91,(23889|0));
             $211 = __THREW__; __THREW__ = 0;
             break;
            }
            $216 = ($$056|0)>(0);
            L101: do {
             if ($216) {
              $$040117 = 0;
              while(1) {
               __THREW__ = 0;
               $219 = (invoke_iiii(700,($31|0),($7|0),256)|0);
               $220 = __THREW__; __THREW__ = 0;
               $221 = $220&1;
               if ($221) {
                label = 66;
                break;
               }
               $222 = HEAP32[$219>>2]|0;
               $223 = ((($222)) + -12|0);
               $224 = HEAP32[$223>>2]|0;
               $225 = (($219) + ($224)|0);
               $226 = ((($225)) + 16|0);
               $227 = HEAP32[$226>>2]|0;
               $228 = $227 & 5;
               $229 = ($228|0)==(0);
               if (!($229)) {
                label = 63;
                break;
               }
               __THREW__ = 0;
               $246 = (invoke_iiii(702,($0|0),($7|0),256)|0);
               $247 = __THREW__; __THREW__ = 0;
               $248 = $247&1;
               if ($248) {
                label = 66;
                break;
               }
               $249 = HEAP32[$246>>2]|0;
               $250 = ((($249)) + -12|0);
               $251 = HEAP32[$250>>2]|0;
               $252 = (($246) + ($251)|0);
               $253 = ((($252)) + 16|0);
               $254 = HEAP32[$253>>2]|0;
               $255 = $254 & 5;
               $256 = ($255|0)==(0);
               $217 = (($$040117) + 1)|0;
               if (!($256)) {
                label = 73;
                break;
               }
               $218 = ($217|0)<($$056|0);
               if ($218) {
                $$040117 = $217;
               } else {
                break L101;
               }
              }
              do {
               if ((label|0) == 63) {
                $230 = (___cxa_allocate_exception(16)|0);
                ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
                $231 = (_strlen($2)|0);
                __THREW__ = 0;
                invoke_viii(646,($8|0),($2|0),($231|0));
                $232 = __THREW__; __THREW__ = 0;
                $233 = $232&1;
                if ($233) {
                 $240 = ___cxa_find_matching_catch_2()|0;
                 $241 = tempRet0;
                 $$3110 = $240;$$346109 = $241;
                } else {
                 HEAP32[$230>>2] = (4628);
                 $234 = ((($230)) + 4|0);
                 __THREW__ = 0;
                 invoke_vii(635,($234|0),($8|0));
                 $235 = __THREW__; __THREW__ = 0;
                 $236 = $235&1;
                 if ($236) {
                  $$038 = 1;
                 } else {
                  HEAP32[$230>>2] = (7980);
                  __THREW__ = 0;
                  invoke_viii(644,($230|0),(792|0),(3|0));
                  $237 = __THREW__; __THREW__ = 0;
                  $$038 = 0;
                 }
                 $242 = ___cxa_find_matching_catch_2()|0;
                 $243 = tempRet0;
                 __THREW__ = 0;
                 invoke_vi(637,($8|0));
                 $244 = __THREW__; __THREW__ = 0;
                 $245 = $244&1;
                 if ($245) {
                  break L8;
                 }
                 if ($$038) {
                  $$3110 = $242;$$346109 = $243;
                 } else {
                  $$5 = $242;$$548 = $243;
                  break;
                 }
                }
                ___cxa_free_exception(($230|0));
                $$5 = $$3110;$$548 = $$346109;
               }
               else if ((label|0) == 66) {
                $238 = ___cxa_find_matching_catch_2()|0;
                $239 = tempRet0;
                $$5 = $238;$$548 = $239;
               }
               else if ((label|0) == 73) {
                $257 = (___cxa_allocate_exception(16)|0);
                ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
                $258 = (_strlen($1)|0);
                __THREW__ = 0;
                invoke_viii(646,($9|0),($1|0),($258|0));
                $259 = __THREW__; __THREW__ = 0;
                $260 = $259&1;
                if ($260) {
                 $265 = ___cxa_find_matching_catch_2()|0;
                 $266 = tempRet0;
                 $$4113 = $265;$$447112 = $266;
                } else {
                 HEAP32[$257>>2] = (4628);
                 $261 = ((($257)) + 4|0);
                 __THREW__ = 0;
                 invoke_vii(635,($261|0),($9|0));
                 $262 = __THREW__; __THREW__ = 0;
                 $263 = $262&1;
                 if ($263) {
                  $$036 = 1;
                 } else {
                  HEAP32[$257>>2] = (8004);
                  __THREW__ = 0;
                  invoke_viii(644,($257|0),(808|0),(3|0));
                  $264 = __THREW__; __THREW__ = 0;
                  $$036 = 0;
                 }
                 $267 = ___cxa_find_matching_catch_2()|0;
                 $268 = tempRet0;
                 __THREW__ = 0;
                 invoke_vi(637,($9|0));
                 $269 = __THREW__; __THREW__ = 0;
                 $270 = $269&1;
                 if ($270) {
                  break L8;
                 }
                 if ($$036) {
                  $$4113 = $267;$$447112 = $268;
                 } else {
                  $$5 = $267;$$548 = $268;
                  break;
                 }
                }
                ___cxa_free_exception(($257|0));
                $$5 = $$4113;$$548 = $$447112;
               }
              } while(0);
              $$9 = $$5;$$952 = $$548;
              break L20;
             }
            } while(0);
            STACKTOP = sp;return;
           }
          } while(0);
          $214 = ___cxa_find_matching_catch_2()|0;
          $215 = tempRet0;
          $$9 = $214;$$952 = $215;
          break;
         }
        }
        $212 = ___cxa_find_matching_catch_2()|0;
        $213 = tempRet0;
        $$9 = $212;$$952 = $213;
       }
      }
     } while(0);
     if ((label|0) == 22) {
      $90 = ___cxa_find_matching_catch_2()|0;
      $91 = tempRet0;
      $$9 = $90;$$952 = $91;
     }
     HEAP32[$31>>2] = ((7880));
     HEAP32[$32>>2] = ((7900));
     __THREW__ = 0;
     invoke_vi(176,($33|0));
     $321 = __THREW__; __THREW__ = 0;
     $322 = $321&1;
     do {
      if ($322) {
       $325 = ___cxa_find_matching_catch_3(0|0)|0;
       $326 = tempRet0;
       __THREW__ = 0;
       invoke_vii(671,($31|0),((7912)|0));
       $327 = __THREW__; __THREW__ = 0;
       $328 = $327&1;
       if ($328) {
        $329 = ___cxa_find_matching_catch_3(0|0)|0;
        $330 = tempRet0;
        ___clang_call_terminate($329);
        // unreachable;
       } else {
        $eh$lpad$body$i$indexZ2D = $325;
       }
      } else {
       __THREW__ = 0;
       invoke_vii(671,($31|0),((7912)|0));
       $323 = __THREW__; __THREW__ = 0;
       $324 = $323&1;
       if ($324) {
        $333 = ___cxa_find_matching_catch_3(0|0)|0;
        $334 = tempRet0;
        $eh$lpad$body$i$indexZ2D = $333;
        break;
       } else {
        __THREW__ = 0;
        invoke_vi(653,($32|0));
        $331 = __THREW__; __THREW__ = 0;
        $332 = $331&1;
        if ($332) {
         break L8;
        } else {
         $$10 = $$9;$$1053 = $$952;
         label = 107;
         break L8;
        }
       }
      }
     } while(0);
     __THREW__ = 0;
     invoke_vi(653,($32|0));
     $335 = __THREW__; __THREW__ = 0;
     $336 = $335&1;
     if ($336) {
      $337 = ___cxa_find_matching_catch_3(0|0)|0;
      $338 = tempRet0;
      ___clang_call_terminate($337);
      // unreachable;
     } else {
      $eh$lpad$body94$indexZ2D = $eh$lpad$body$i$indexZ2D;
      ___clang_call_terminate($eh$lpad$body94$indexZ2D);
      // unreachable;
     }
    }
   } while(0);
   if ((label|0) == 12) {
    __THREW__ = 0;
    invoke_vi(653,($32|0));
    $48 = __THREW__; __THREW__ = 0;
    $49 = $48&1;
    if ($49) {
     $50 = ___cxa_find_matching_catch_3(0|0)|0;
     $51 = tempRet0;
     ___clang_call_terminate($50);
     // unreachable;
    } else {
     $$10 = $$02$i61;$$1053 = $$0$i62;
     label = 107;
    }
   }
   L150: do {
    if ((label|0) == 107) {
     HEAP32[$0>>2] = ((7784));
     HEAP32[$12>>2] = ((7804));
     __THREW__ = 0;
     invoke_vi(176,($13|0));
     $339 = __THREW__; __THREW__ = 0;
     $340 = $339&1;
     do {
      if ($340) {
       $343 = ___cxa_find_matching_catch_3(0|0)|0;
       $344 = tempRet0;
       __THREW__ = 0;
       invoke_vii(652,($0|0),((7816)|0));
       $345 = __THREW__; __THREW__ = 0;
       $346 = $345&1;
       if ($346) {
        $347 = ___cxa_find_matching_catch_3(0|0)|0;
        $348 = tempRet0;
        ___clang_call_terminate($347);
        // unreachable;
       } else {
        $eh$lpad$body$i95$indexZ2D = $343;
       }
      } else {
       __THREW__ = 0;
       invoke_vii(652,($0|0),((7816)|0));
       $341 = __THREW__; __THREW__ = 0;
       $342 = $341&1;
       if ($342) {
        $351 = ___cxa_find_matching_catch_3(0|0)|0;
        $352 = tempRet0;
        $eh$lpad$body$i95$indexZ2D = $351;
        break;
       }
       __THREW__ = 0;
       invoke_vi(653,($12|0));
       $349 = __THREW__; __THREW__ = 0;
       $350 = $349&1;
       if ($350) {
        break L150;
       }
       ___resumeException($$10|0);
       // unreachable;
      }
     } while(0);
     __THREW__ = 0;
     invoke_vi(653,($12|0));
     $353 = __THREW__; __THREW__ = 0;
     $354 = $353&1;
     if ($354) {
      $355 = ___cxa_find_matching_catch_3(0|0)|0;
      $356 = tempRet0;
      ___clang_call_terminate($355);
      // unreachable;
     } else {
      $eh$lpad$body94$indexZ2D = $eh$lpad$body$i95$indexZ2D;
      ___clang_call_terminate($eh$lpad$body94$indexZ2D);
      // unreachable;
     }
    }
   } while(0);
   $357 = ___cxa_find_matching_catch_3(0|0)|0;
   $358 = tempRet0;
   $eh$lpad$body94$indexZ2D = $357;
   ___clang_call_terminate($eh$lpad$body94$indexZ2D);
   // unreachable;
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(653,($12|0));
 $27 = __THREW__; __THREW__ = 0;
 $28 = $27&1;
 if ($28) {
  $29 = ___cxa_find_matching_catch_3(0|0)|0;
  $30 = tempRet0;
  ___clang_call_terminate($29);
  // unreachable;
 } else {
  ___resumeException($$02$i|0);
  // unreachable;
 }
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEEC2Ev($0) {
 $0 = $0|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$13 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($0);
 HEAP32[$0>>2] = (8028);
 $5 = ((($0)) + 32|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 36|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 40|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 52|0);
 $9 = ((($0)) + 68|0);
 $10 = ((($0)) + 98|0);
 dest=$8; stop=dest+44|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$8+44>>1]=0|0;HEAP8[$8+46>>0]=0|0;
 $11 = ((($0)) + 4|0);
 __ZNSt3__26localeC2ERKS0_($2,$11);
 $12 = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $12;
 __THREW__ = 0;
 $13 = (invoke_iii(704,($3|0),(42504|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  ___cxa_call_unexpected(($16|0));
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(660,($3|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 L4: do {
  if ($19) {
   $34 = ___cxa_find_matching_catch_2()|0;
   $35 = tempRet0;
   $$1 = $35;$$13 = $34;
  } else {
   L7: do {
    if ($13) {
     __ZNSt3__26localeC2ERKS0_($1,$11);
     $20 = HEAP32[$1>>2]|0;
     HEAP32[$4>>2] = $20;
     __THREW__ = 0;
     $21 = (invoke_iii(659,($4|0),(42504|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     do {
      if ($23) {
       $38 = ___cxa_find_matching_catch_2()|0;
       $39 = tempRet0;
       __THREW__ = 0;
       invoke_vi(660,($4|0));
       $40 = __THREW__; __THREW__ = 0;
       $41 = $40&1;
       if ($41) {
        $49 = ___cxa_find_matching_catch_3(0|0)|0;
        $50 = tempRet0;
        ___clang_call_terminate($49);
        // unreachable;
       } else {
        $$0 = $39;$$02 = $38;
       }
      } else {
       HEAP32[$9>>2] = $21;
       __THREW__ = 0;
       invoke_vi(660,($4|0));
       $24 = __THREW__; __THREW__ = 0;
       $25 = $24&1;
       if ($25) {
        $36 = ___cxa_find_matching_catch_2()|0;
        $37 = tempRet0;
        $$0 = $37;$$02 = $36;
        break;
       } else {
        $26 = HEAP32[$9>>2]|0;
        $27 = HEAP32[$26>>2]|0;
        $28 = ((($27)) + 28|0);
        $29 = HEAP32[$28>>2]|0;
        $30 = (FUNCTION_TABLE_ii[$29 & 1023]($26)|0);
        $31 = $30&1;
        HEAP8[$10>>0] = $31;
        break L7;
       }
      }
     } while(0);
     $$1 = $$0;$$13 = $$02;
     break L4;
    }
   } while(0);
   $42 = HEAP32[$0>>2]|0;
   $43 = ((($42)) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   __THREW__ = 0;
   (invoke_iiii($44|0,($0|0),(0|0),4096)|0);
   $45 = __THREW__; __THREW__ = 0;
   $46 = $45&1;
   if ($46) {
    $32 = ___cxa_find_matching_catch_2()|0;
    $33 = tempRet0;
    $$1 = $33;$$13 = $32;
    break;
   } else {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(302,($0|0));
 $47 = __THREW__; __THREW__ = 0;
 $48 = $47&1;
 if ($48) {
  $49 = ___cxa_find_matching_catch_3(0|0)|0;
  $50 = tempRet0;
  ___clang_call_terminate($49);
  // unreachable;
 } else {
  ___resumeException($$13|0);
  // unreachable;
 }
}
function __ZN9DiscImage7AddFileEPKcPKhiii($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0100 = 0, $$0102 = 0, $$0104119 = 0, $$083 = 0, $$087140 = 0, $$088 = 0, $$090 = 0, $$091 = 0, $$092120 = 0, $$094 = 0, $$095 = 0, $$097141$us = 0, $$099142 = 0, $$099142$us = 0, $$1105122 = 0, $$193123 = 0, $$2106125 = 0, $$2126 = 0, $$3107128 = 0;
 var $$3129 = 0, $$4108131 = 0, $$4132 = 0, $$5109134 = 0, $$5135 = 0, $$7 = 0, $$7111 = 0, $$phi$trans$insert = 0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
 var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $indvar = 0, $indvar$next = 0, $strlenfirst = 0, $strlenfirst150 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $6 = sp + 92|0;
 $7 = sp + 80|0;
 $8 = sp + 68|0;
 $9 = sp + 56|0;
 $10 = sp + 16|0;
 $11 = sp + 44|0;
 $12 = sp;
 $13 = sp + 32|0;
 $14 = (_strlen($1)|0);
 $15 = ($14>>>0)>(2);
 if ($15) {
  $16 = ((($1)) + 1|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = ($17<<24>>24)==(46);
  if ($18) {
   $19 = HEAP8[$1>>0]|0;
   $20 = ((($1)) + 2|0);
   $$090 = $20;$$091 = $19;
  } else {
   $$090 = $1;$$091 = 36;
  }
 } else {
  $$090 = $1;$$091 = 36;
 }
 $21 = (_strlen($$090)|0);
 $22 = ($21>>>0)>(7);
 if ($22) {
  $23 = (___cxa_allocate_exception(16)|0);
  $24 = ((($0)) + 372|0);
  $25 = HEAP32[$24>>2]|0;
  ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
  $26 = (_strlen($25)|0);
  __THREW__ = 0;
  invoke_viii(646,($6|0),($25|0),($26|0));
  $27 = __THREW__; __THREW__ = 0;
  $28 = $27&1;
  if ($28) {
   $33 = ___cxa_find_matching_catch_2()|0;
   $34 = tempRet0;
   $$0104119 = $34;$$092120 = $33;
  } else {
   HEAP32[$23>>2] = (4628);
   $29 = ((($23)) + 4|0);
   __THREW__ = 0;
   invoke_vii(635,($29|0),($6|0));
   $30 = __THREW__; __THREW__ = 0;
   $31 = $30&1;
   if ($31) {
    $$0102 = 1;
   } else {
    HEAP32[$23>>2] = (8092);
    __THREW__ = 0;
    invoke_viii(644,($23|0),(840|0),(3|0));
    $32 = __THREW__; __THREW__ = 0;
    $$0102 = 0;
   }
   $35 = ___cxa_find_matching_catch_2()|0;
   $36 = tempRet0;
   __THREW__ = 0;
   invoke_vi(637,($6|0));
   $37 = __THREW__; __THREW__ = 0;
   $38 = $37&1;
   if ($38) {
    $348 = ___cxa_find_matching_catch_3(0|0)|0;
    $349 = tempRet0;
    ___clang_call_terminate($348);
    // unreachable;
   }
   if ($$0102) {
    $$0104119 = $36;$$092120 = $35;
   } else {
    $$7 = $35;$$7111 = $36;
    ___resumeException($$7|0);
    // unreachable;
   }
  }
  ___cxa_free_exception(($23|0));
  $$7 = $$092120;$$7111 = $$0104119;
  ___resumeException($$7|0);
  // unreachable;
 }
 $39 = ((($0)) + 637|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = ($40<<24>>24)==(-8);
 if ($41) {
  $42 = (___cxa_allocate_exception(16)|0);
  $43 = ((($0)) + 372|0);
  $44 = HEAP32[$43>>2]|0;
  ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
  $45 = (_strlen($44)|0);
  __THREW__ = 0;
  invoke_viii(646,($7|0),($44|0),($45|0));
  $46 = __THREW__; __THREW__ = 0;
  $47 = $46&1;
  if ($47) {
   $52 = ___cxa_find_matching_catch_2()|0;
   $53 = tempRet0;
   $$1105122 = $53;$$193123 = $52;
  } else {
   HEAP32[$42>>2] = (4628);
   $48 = ((($42)) + 4|0);
   __THREW__ = 0;
   invoke_vii(635,($48|0),($7|0));
   $49 = __THREW__; __THREW__ = 0;
   $50 = $49&1;
   if ($50) {
    $$0100 = 1;
   } else {
    HEAP32[$42>>2] = (8116);
    __THREW__ = 0;
    invoke_viii(644,($42|0),(856|0),(3|0));
    $51 = __THREW__; __THREW__ = 0;
    $$0100 = 0;
   }
   $54 = ___cxa_find_matching_catch_2()|0;
   $55 = tempRet0;
   __THREW__ = 0;
   invoke_vi(637,($7|0));
   $56 = __THREW__; __THREW__ = 0;
   $57 = $56&1;
   if ($57) {
    $348 = ___cxa_find_matching_catch_3(0|0)|0;
    $349 = tempRet0;
    ___clang_call_terminate($348);
    // unreachable;
   }
   if ($$0100) {
    $$1105122 = $55;$$193123 = $54;
   } else {
    $$7 = $54;$$7111 = $55;
    ___resumeException($$7|0);
    // unreachable;
   }
  }
  ___cxa_free_exception(($42|0));
  $$7 = $$193123;$$7111 = $$1105122;
  ___resumeException($$7|0);
  // unreachable;
 }
 $58 = $40&255;
 $59 = ($40<<24>>24)==(0);
 do {
  if ($59) {
   $$094 = 2;
  } else {
   $strlenfirst = HEAP8[$$090>>0]|0;
   $60 = ($strlenfirst<<24>>24)==(0);
   L37: do {
    if ($60) {
     $$099142 = $58;
     while(1) {
      $81 = (($$099142) + 7)|0;
      $82 = (((($0)) + 376|0) + ($81)|0);
      $83 = HEAP8[$82>>0]|0;
      $84 = $83 & 127;
      $85 = ($84<<24>>24)==(36);
      if ($85) {
       break L37;
      }
      $102 = (($$099142) + -8)|0;
      $103 = ($$099142|0)>(8);
      if ($103) {
       $$099142 = $102;
      } else {
       label = 28;
       break;
      }
     }
    } else {
     $$099142$us = $58;
     while(1) {
      $$097141$us = 0;
      while(1) {
       $64 = (($$090) + ($$097141$us)|0);
       $65 = HEAP8[$64>>0]|0;
       $66 = $65 << 24 >> 24;
       $67 = (_toupper($66)|0);
       $68 = (($$097141$us) + ($$099142$us))|0;
       $69 = (((($0)) + 376|0) + ($68)|0);
       $70 = HEAP8[$69>>0]|0;
       $71 = $70&255;
       $72 = (_toupper($71)|0);
       $73 = ($67|0)==($72|0);
       $62 = (($$097141$us) + 1)|0;
       if (!($73)) {
        break;
       }
       $61 = (_strlen($$090)|0);
       $63 = ($62>>>0)<($61>>>0);
       if ($63) {
        $$097141$us = $62;
       } else {
        label = 26;
        break;
       }
      }
      if ((label|0) == 26) {
       label = 0;
       $76 = (($$099142$us) + 7)|0;
       $77 = (((($0)) + 376|0) + ($76)|0);
       $78 = HEAP8[$77>>0]|0;
       $79 = $78 & 127;
       $80 = ($79<<24>>24)==(36);
       if ($80) {
        break L37;
       }
      }
      $74 = (($$099142$us) + -8)|0;
      $75 = ($$099142$us|0)>(8);
      if ($75) {
       $$099142$us = $74;
      } else {
       label = 28;
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 28) {
    if ($59) {
     $$094 = 2;
     break;
    }
    $104 = ((($0)) + 647|0);
    $105 = HEAP8[$104>>0]|0;
    $106 = $105&255;
    $107 = ((($0)) + 646|0);
    $108 = HEAP8[$107>>0]|0;
    $109 = $108&255;
    $110 = $109 << 8;
    $111 = $110 & 768;
    $112 = $111 | $106;
    $113 = ((($0)) + 644|0);
    $114 = HEAP16[$113>>1]|0;
    $115 = $114&65535;
    $116 = $115 & 255;
    $117 = ($114&65535) >>> 8;
    $118 = $117&65535;
    $119 = $118 << 8;
    $120 = $109 << 12;
    $121 = $120 & 196608;
    $122 = $121 | $116;
    $123 = $122 | $119;
    $124 = (($123) + 255)|0;
    $125 = $124 >>> 8;
    $126 = (($125) + ($112))|0;
    $$094 = $126;
    break;
   }
   $86 = (___cxa_allocate_exception(16)|0);
   $87 = ((($0)) + 372|0);
   $88 = HEAP32[$87>>2]|0;
   ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
   $89 = (_strlen($88)|0);
   __THREW__ = 0;
   invoke_viii(646,($8|0),($88|0),($89|0));
   $90 = __THREW__; __THREW__ = 0;
   $91 = $90&1;
   if ($91) {
    $96 = ___cxa_find_matching_catch_2()|0;
    $97 = tempRet0;
    $$2106125 = $97;$$2126 = $96;
   } else {
    HEAP32[$86>>2] = (4628);
    $92 = ((($86)) + 4|0);
    __THREW__ = 0;
    invoke_vii(635,($92|0),($8|0));
    $93 = __THREW__; __THREW__ = 0;
    $94 = $93&1;
    if ($94) {
     $$095 = 1;
    } else {
     HEAP32[$86>>2] = (8140);
     __THREW__ = 0;
     invoke_viii(644,($86|0),(872|0),(3|0));
     $95 = __THREW__; __THREW__ = 0;
     $$095 = 0;
    }
    $98 = ___cxa_find_matching_catch_2()|0;
    $99 = tempRet0;
    __THREW__ = 0;
    invoke_vi(637,($8|0));
    $100 = __THREW__; __THREW__ = 0;
    $101 = $100&1;
    if ($101) {
     $348 = ___cxa_find_matching_catch_3(0|0)|0;
     $349 = tempRet0;
     ___clang_call_terminate($348);
     // unreachable;
    }
    if ($$095) {
     $$2106125 = $99;$$2126 = $98;
    } else {
     $$7 = $98;$$7111 = $99;
     ___resumeException($$7|0);
     // unreachable;
    }
   }
   ___cxa_free_exception(($86|0));
   $$7 = $$2126;$$7111 = $$2106125;
   ___resumeException($$7|0);
   // unreachable;
  }
 } while(0);
 $127 = (($5) + 255)|0;
 $128 = $127 >> 8;
 $129 = (($$094) + ($128))|0;
 $130 = ($129|0)>(800);
 if ($130) {
  $131 = (___cxa_allocate_exception(16)|0);
  $132 = ((($0)) + 372|0);
  $133 = HEAP32[$132>>2]|0;
  ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
  $134 = (_strlen($133)|0);
  __THREW__ = 0;
  invoke_viii(646,($9|0),($133|0),($134|0));
  $135 = __THREW__; __THREW__ = 0;
  $136 = $135&1;
  if ($136) {
   $141 = ___cxa_find_matching_catch_2()|0;
   $142 = tempRet0;
   $$3107128 = $142;$$3129 = $141;
  } else {
   HEAP32[$131>>2] = (4628);
   $137 = ((($131)) + 4|0);
   __THREW__ = 0;
   invoke_vii(635,($137|0),($9|0));
   $138 = __THREW__; __THREW__ = 0;
   $139 = $138&1;
   if ($139) {
    $$088 = 1;
   } else {
    HEAP32[$131>>2] = (8164);
    __THREW__ = 0;
    invoke_viii(644,($131|0),(888|0),(3|0));
    $140 = __THREW__; __THREW__ = 0;
    $$088 = 0;
   }
   $143 = ___cxa_find_matching_catch_2()|0;
   $144 = tempRet0;
   __THREW__ = 0;
   invoke_vi(637,($9|0));
   $145 = __THREW__; __THREW__ = 0;
   $146 = $145&1;
   if ($146) {
    $348 = ___cxa_find_matching_catch_3(0|0)|0;
    $349 = tempRet0;
    ___clang_call_terminate($348);
    // unreachable;
   }
   if ($$088) {
    $$3107128 = $144;$$3129 = $143;
   } else {
    $$7 = $143;$$7111 = $144;
    ___resumeException($$7|0);
    // unreachable;
   }
  }
  ___cxa_free_exception(($131|0));
  $$7 = $$3129;$$7111 = $$3107128;
  ___resumeException($$7|0);
  // unreachable;
 }
 if ($59) {
  $234 = 0;
 } else {
  $147 = ($58>>>0)<(8);
  $148 = $147 ? $58 : 8;
  $149 = $148 ^ -1;
  $150 = (($58) + ($149))|0;
  $151 = (($150) + 8)|0;
  $152 = $151 >>> 3;
  $$087140 = $58;$indvar = 0;
  while(1) {
   $153 = (((($0)) + 376|0) + ($$087140)|0);
   $154 = HEAP8[$153>>0]|0;
   $155 = (($$087140) + 8)|0;
   $156 = (((($0)) + 376|0) + ($155)|0);
   HEAP8[$156>>0] = $154;
   $157 = (($$087140) + 256)|0;
   $158 = (((($0)) + 376|0) + ($157)|0);
   $159 = HEAP8[$158>>0]|0;
   $160 = (($$087140) + 264)|0;
   $161 = (((($0)) + 376|0) + ($160)|0);
   HEAP8[$161>>0] = $159;
   $162 = (($$087140) + 1)|0;
   $163 = (((($0)) + 376|0) + ($162)|0);
   $164 = HEAP8[$163>>0]|0;
   $165 = (($$087140) + 9)|0;
   $166 = (((($0)) + 376|0) + ($165)|0);
   HEAP8[$166>>0] = $164;
   $167 = (($$087140) + 257)|0;
   $168 = (((($0)) + 376|0) + ($167)|0);
   $169 = HEAP8[$168>>0]|0;
   $170 = (($$087140) + 265)|0;
   $171 = (((($0)) + 376|0) + ($170)|0);
   HEAP8[$171>>0] = $169;
   $172 = (($$087140) + 2)|0;
   $173 = (((($0)) + 376|0) + ($172)|0);
   $174 = HEAP8[$173>>0]|0;
   $175 = (($$087140) + 10)|0;
   $176 = (((($0)) + 376|0) + ($175)|0);
   HEAP8[$176>>0] = $174;
   $177 = (($$087140) + 258)|0;
   $178 = (((($0)) + 376|0) + ($177)|0);
   $179 = HEAP8[$178>>0]|0;
   $180 = (($$087140) + 266)|0;
   $181 = (((($0)) + 376|0) + ($180)|0);
   HEAP8[$181>>0] = $179;
   $182 = (($$087140) + 3)|0;
   $183 = (((($0)) + 376|0) + ($182)|0);
   $184 = HEAP8[$183>>0]|0;
   $185 = (($$087140) + 11)|0;
   $186 = (((($0)) + 376|0) + ($185)|0);
   HEAP8[$186>>0] = $184;
   $187 = (($$087140) + 259)|0;
   $188 = (((($0)) + 376|0) + ($187)|0);
   $189 = HEAP8[$188>>0]|0;
   $190 = (($$087140) + 267)|0;
   $191 = (((($0)) + 376|0) + ($190)|0);
   HEAP8[$191>>0] = $189;
   $192 = (($$087140) + 4)|0;
   $193 = (((($0)) + 376|0) + ($192)|0);
   $194 = HEAP8[$193>>0]|0;
   $195 = (($$087140) + 12)|0;
   $196 = (((($0)) + 376|0) + ($195)|0);
   HEAP8[$196>>0] = $194;
   $197 = (($$087140) + 260)|0;
   $198 = (((($0)) + 376|0) + ($197)|0);
   $199 = HEAP8[$198>>0]|0;
   $200 = (($$087140) + 268)|0;
   $201 = (((($0)) + 376|0) + ($200)|0);
   HEAP8[$201>>0] = $199;
   $202 = (($$087140) + 5)|0;
   $203 = (((($0)) + 376|0) + ($202)|0);
   $204 = HEAP8[$203>>0]|0;
   $205 = (($$087140) + 13)|0;
   $206 = (((($0)) + 376|0) + ($205)|0);
   HEAP8[$206>>0] = $204;
   $207 = (($$087140) + 261)|0;
   $208 = (((($0)) + 376|0) + ($207)|0);
   $209 = HEAP8[$208>>0]|0;
   $210 = (($$087140) + 269)|0;
   $211 = (((($0)) + 376|0) + ($210)|0);
   HEAP8[$211>>0] = $209;
   $212 = (($$087140) + 6)|0;
   $213 = (((($0)) + 376|0) + ($212)|0);
   $214 = HEAP8[$213>>0]|0;
   $215 = (($$087140) + 14)|0;
   $216 = (((($0)) + 376|0) + ($215)|0);
   HEAP8[$216>>0] = $214;
   $217 = (($$087140) + 262)|0;
   $218 = (((($0)) + 376|0) + ($217)|0);
   $219 = HEAP8[$218>>0]|0;
   $220 = (($$087140) + 270)|0;
   $221 = (((($0)) + 376|0) + ($220)|0);
   HEAP8[$221>>0] = $219;
   $222 = (($$087140) + 7)|0;
   $223 = (((($0)) + 376|0) + ($222)|0);
   $224 = HEAP8[$223>>0]|0;
   $225 = (($$087140) + 15)|0;
   $226 = (((($0)) + 376|0) + ($225)|0);
   HEAP8[$226>>0] = $224;
   $227 = (($$087140) + 263)|0;
   $228 = (((($0)) + 376|0) + ($227)|0);
   $229 = HEAP8[$228>>0]|0;
   $230 = (($$087140) + 271)|0;
   $231 = (((($0)) + 376|0) + ($230)|0);
   HEAP8[$231>>0] = $229;
   $232 = (($$087140) + -8)|0;
   $indvar$next = (($indvar) + 1)|0;
   $exitcond = ($indvar|0)==($152|0);
   if ($exitcond) {
    break;
   } else {
    $$087140 = $232;$indvar = $indvar$next;
   }
  }
  $$pre = HEAP8[$39>>0]|0;
  $234 = $$pre;
 }
 $233 = $234&255;
 $235 = (($233) + 8)|0;
 $236 = $235&255;
 HEAP8[$39>>0] = $236;
 $strlenfirst150 = HEAP8[$$090>>0]|0;
 $237 = ($strlenfirst150<<24>>24)==(0);
 if ($237) {
  $263 = 32;
 } else {
  $261 = HEAP8[$$090>>0]|0;
  $263 = $261;
 }
 $262 = ((($0)) + 384|0);
 HEAP8[$262>>0] = $263;
 $264 = (_strlen($$090)|0);
 $265 = ($264>>>0)>(1);
 if ($265) {
  $350 = ((($$090)) + 1|0);
  $351 = HEAP8[$350>>0]|0;
  $353 = $351;
 } else {
  $353 = 32;
 }
 $352 = ((($0)) + 385|0);
 HEAP8[$352>>0] = $353;
 $354 = (_strlen($$090)|0);
 $355 = ($354>>>0)>(2);
 if ($355) {
  $356 = ((($$090)) + 2|0);
  $357 = HEAP8[$356>>0]|0;
  $359 = $357;
 } else {
  $359 = 32;
 }
 $358 = ((($0)) + 386|0);
 HEAP8[$358>>0] = $359;
 $360 = (_strlen($$090)|0);
 $361 = ($360>>>0)>(3);
 if ($361) {
  $362 = ((($$090)) + 3|0);
  $363 = HEAP8[$362>>0]|0;
  $365 = $363;
 } else {
  $365 = 32;
 }
 $364 = ((($0)) + 387|0);
 HEAP8[$364>>0] = $365;
 $366 = (_strlen($$090)|0);
 $367 = ($366>>>0)>(4);
 if ($367) {
  $368 = ((($$090)) + 4|0);
  $369 = HEAP8[$368>>0]|0;
  $371 = $369;
 } else {
  $371 = 32;
 }
 $370 = ((($0)) + 388|0);
 HEAP8[$370>>0] = $371;
 $372 = (_strlen($$090)|0);
 $373 = ($372>>>0)>(5);
 if ($373) {
  $374 = ((($$090)) + 5|0);
  $375 = HEAP8[$374>>0]|0;
  $377 = $375;
 } else {
  $377 = 32;
 }
 $376 = ((($0)) + 389|0);
 HEAP8[$376>>0] = $377;
 $378 = (_strlen($$090)|0);
 $379 = ($378>>>0)>(6);
 if ($379) {
  $380 = ((($$090)) + 6|0);
  $381 = HEAP8[$380>>0]|0;
  $383 = $381;
 } else {
  $383 = 32;
 }
 $382 = ((($0)) + 390|0);
 HEAP8[$382>>0] = $383;
 $384 = ((($0)) + 391|0);
 HEAP8[$384>>0] = $$091;
 $385 = $3&255;
 $386 = ((($0)) + 640|0);
 HEAP8[$386>>0] = $385;
 $387 = $3 >>> 8;
 $388 = $387&255;
 $389 = ((($0)) + 641|0);
 HEAP8[$389>>0] = $388;
 $390 = $4&255;
 $391 = ((($0)) + 642|0);
 HEAP8[$391>>0] = $390;
 $392 = $4 >>> 8;
 $393 = $392&255;
 $394 = ((($0)) + 643|0);
 HEAP8[$394>>0] = $393;
 $395 = $5&255;
 $396 = ((($0)) + 644|0);
 HEAP8[$396>>0] = $395;
 $397 = $5 >>> 8;
 $398 = $397&255;
 $399 = ((($0)) + 645|0);
 HEAP8[$399>>0] = $398;
 $400 = $$094&255;
 $401 = ((($0)) + 647|0);
 HEAP8[$401>>0] = $400;
 $402 = $3 >>> 14;
 $403 = $402 & 12;
 $404 = $4 >>> 10;
 $405 = $404 & 192;
 $406 = $405 | $403;
 $407 = $5 >>> 12;
 $408 = $407 & 48;
 $409 = $406 | $408;
 $410 = $$094 >>> 8;
 $411 = $410 & 3;
 $412 = $409 | $411;
 $413 = $412&255;
 $414 = ((($0)) + 646|0);
 HEAP8[$414>>0] = $413;
 $415 = HEAP32[$0>>2]|0;
 $416 = ((($415)) + -12|0);
 $417 = HEAP32[$416>>2]|0;
 $248 = (($0) + ($417)|0);
 $418 = ((($248)) + 16|0);
 $419 = HEAP32[$418>>2]|0;
 $420 = $419 & 5;
 $421 = ($420|0)==(0);
 if (!($421)) {
  $238 = $10;
  $239 = $238;
  HEAP32[$239>>2] = 0;
  $240 = (($238) + 4)|0;
  $241 = $240;
  HEAP32[$241>>2] = 0;
  $242 = ((($10)) + 8|0);
  $243 = $242;
  $244 = $243;
  HEAP32[$244>>2] = -1;
  $245 = (($243) + 4)|0;
  $246 = $245;
  HEAP32[$246>>2] = -1;
  ___assert_fail((23965|0),(23875|0),296,(24040|0));
  // unreachable;
 }
 $247 = ((($248)) + 24|0);
 $249 = HEAP32[$247>>2]|0;
 $250 = HEAP32[$249>>2]|0;
 $251 = ((($250)) + 16|0);
 $252 = HEAP32[$251>>2]|0;
 FUNCTION_TABLE_viiiiii[$252 & 1023]($10,$249,0,0,1,16);
 $$phi$trans$insert = ((($10)) + 8|0);
 $253 = $$phi$trans$insert;
 $254 = $253;
 $255 = HEAP32[$254>>2]|0;
 $256 = (($253) + 4)|0;
 $257 = $256;
 $258 = HEAP32[$257>>2]|0;
 $259 = $$094 << 8;
 $260 = ($255|0)==($259|0);
 if (!($260)) {
  ___assert_fail((23965|0),(23875|0),296,(24040|0));
  // unreachable;
 }
 $266 = (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5writeEPKci($0,$2,$5)|0);
 $267 = HEAP32[$266>>2]|0;
 $268 = ((($267)) + -12|0);
 $269 = HEAP32[$268>>2]|0;
 $270 = (($266) + ($269)|0);
 $271 = ((($270)) + 16|0);
 $272 = HEAP32[$271>>2]|0;
 $273 = $272 & 5;
 $274 = ($273|0)==(0);
 if (!($274)) {
  $276 = (___cxa_allocate_exception(16)|0);
  $277 = ((($0)) + 372|0);
  $278 = HEAP32[$277>>2]|0;
  ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
  $279 = (_strlen($278)|0);
  __THREW__ = 0;
  invoke_viii(646,($11|0),($278|0),($279|0));
  $280 = __THREW__; __THREW__ = 0;
  $281 = $280&1;
  do {
   if ($281) {
    $286 = ___cxa_find_matching_catch_2()|0;
    $287 = tempRet0;
    $$4108131 = $287;$$4132 = $286;
   } else {
    HEAP32[$276>>2] = (4628);
    $282 = ((($276)) + 4|0);
    __THREW__ = 0;
    invoke_vii(635,($282|0),($11|0));
    $283 = __THREW__; __THREW__ = 0;
    $284 = $283&1;
    if ($284) {
     $$083 = 1;
    } else {
     HEAP32[$276>>2] = (8004);
     __THREW__ = 0;
     invoke_viii(644,($276|0),(808|0),(3|0));
     $285 = __THREW__; __THREW__ = 0;
     $$083 = 0;
    }
    $288 = ___cxa_find_matching_catch_2()|0;
    $289 = tempRet0;
    __THREW__ = 0;
    invoke_vi(637,($11|0));
    $290 = __THREW__; __THREW__ = 0;
    $291 = $290&1;
    if ($291) {
     $348 = ___cxa_find_matching_catch_3(0|0)|0;
     $349 = tempRet0;
     ___clang_call_terminate($348);
     // unreachable;
    }
    if ($$083) {
     $$4108131 = $289;$$4132 = $288;
     break;
    } else {
     $$7 = $288;$$7111 = $289;
    }
    ___resumeException($$7|0);
    // unreachable;
   }
  } while(0);
  ___cxa_free_exception(($276|0));
  $$7 = $$4132;$$7111 = $$4108131;
  ___resumeException($$7|0);
  // unreachable;
 }
 $275 = ((($12)) + 8|0);
 while(1) {
  $292 = HEAP32[$0>>2]|0;
  $293 = ((($292)) + -12|0);
  $294 = HEAP32[$293>>2]|0;
  $295 = (($0) + ($294)|0);
  $296 = ((($295)) + 16|0);
  $297 = HEAP32[$296>>2]|0;
  $298 = $297 & 5;
  $299 = ($298|0)==(0);
  if ($299) {
   $308 = ((($295)) + 24|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[$309>>2]|0;
   $311 = ((($310)) + 16|0);
   $312 = HEAP32[$311>>2]|0;
   FUNCTION_TABLE_viiiiii[$312 & 1023]($12,$309,0,0,1,16);
   $313 = $275;
   $314 = $313;
   $315 = HEAP32[$314>>2]|0;
   $316 = (($313) + 4)|0;
   $317 = $316;
   $318 = HEAP32[$317>>2]|0;
   $319 = $315 & 255;
   $320 = ($319|0)==(0);
   $321 = (0)==(0);
   $322 = $320 & $321;
   if ($322) {
    label = 76;
    break;
   }
  } else {
   $300 = $12;
   $301 = $300;
   HEAP32[$301>>2] = 0;
   $302 = (($300) + 4)|0;
   $303 = $302;
   HEAP32[$303>>2] = 0;
   $304 = $275;
   $305 = $304;
   HEAP32[$305>>2] = -1;
   $306 = (($304) + 4)|0;
   $307 = $306;
   HEAP32[$307>>2] = -1;
  }
  $323 = (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($0,0)|0);
  $324 = HEAP32[$323>>2]|0;
  $325 = ((($324)) + -12|0);
  $326 = HEAP32[$325>>2]|0;
  $327 = (($323) + ($326)|0);
  $328 = ((($327)) + 16|0);
  $329 = HEAP32[$328>>2]|0;
  $330 = $329 & 5;
  $331 = ($330|0)==(0);
  if (!($331)) {
   break;
  }
 }
 if ((label|0) == 76) {
  STACKTOP = sp;return;
 }
 $332 = (___cxa_allocate_exception(16)|0);
 $333 = ((($0)) + 372|0);
 $334 = HEAP32[$333>>2]|0;
 ;HEAP32[$13>>2]=0|0;HEAP32[$13+4>>2]=0|0;HEAP32[$13+8>>2]=0|0;
 $335 = (_strlen($334)|0);
 __THREW__ = 0;
 invoke_viii(646,($13|0),($334|0),($335|0));
 $336 = __THREW__; __THREW__ = 0;
 $337 = $336&1;
 do {
  if ($337) {
   $342 = ___cxa_find_matching_catch_2()|0;
   $343 = tempRet0;
   $$5109134 = $343;$$5135 = $342;
  } else {
   HEAP32[$332>>2] = (4628);
   $338 = ((($332)) + 4|0);
   __THREW__ = 0;
   invoke_vii(635,($338|0),($13|0));
   $339 = __THREW__; __THREW__ = 0;
   $340 = $339&1;
   if ($340) {
    $$0 = 1;
   } else {
    HEAP32[$332>>2] = (8004);
    __THREW__ = 0;
    invoke_viii(644,($332|0),(808|0),(3|0));
    $341 = __THREW__; __THREW__ = 0;
    $$0 = 0;
   }
   $344 = ___cxa_find_matching_catch_2()|0;
   $345 = tempRet0;
   __THREW__ = 0;
   invoke_vi(637,($13|0));
   $346 = __THREW__; __THREW__ = 0;
   $347 = $346&1;
   if ($347) {
    $348 = ___cxa_find_matching_catch_3(0|0)|0;
    $349 = tempRet0;
    ___clang_call_terminate($348);
    // unreachable;
   }
   if ($$0) {
    $$5109134 = $345;$$5135 = $344;
    break;
   } else {
    $$7 = $344;$$7111 = $345;
   }
   ___resumeException($$7|0);
   // unreachable;
  }
 } while(0);
 ___cxa_free_exception(($332|0));
 $$7 = $$5135;$$7111 = $$5109134;
 ___resumeException($$7|0);
 // unreachable;
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev($0) {
 $0 = $0|0;
 var $$phi$trans$insert = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (8028);
 $1 = ((($0)) + 64|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 do {
  if (!($3)) {
   __THREW__ = 0;
   (invoke_ii(182,($0|0))|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if (!($5)) {
    $6 = (_fclose($2)|0);
    $7 = ($6|0)==(0);
    if (!($7)) {
     break;
    }
    HEAP32[$1>>2] = 0;
    break;
   }
   $8 = ___cxa_find_matching_catch_3(0|0)|0;
   $9 = tempRet0;
   (_fclose($2)|0);
   (___cxa_begin_catch(($8|0))|0);
   __THREW__ = 0;
   invoke_v(643);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    $21 = ___cxa_find_matching_catch_2()|0;
    $22 = tempRet0;
    __THREW__ = 0;
    invoke_vi(302,($0|0));
    $23 = __THREW__; __THREW__ = 0;
    $24 = $23&1;
    if ($24) {
     $30 = ___cxa_find_matching_catch_3(0|0)|0;
     $31 = tempRet0;
     ___clang_call_terminate($30);
     // unreachable;
    } else {
     ___resumeException($21|0);
     // unreachable;
    }
   }
  }
 } while(0);
 $12 = ((($0)) + 96|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13&255;
 $15 = ($14<<24>>24)==(0);
 $16 = ($13&65535) >>> 8;
 $17 = $16&255;
 if ($15) {
  $25 = $17;
 } else {
  $18 = ((($0)) + 32|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==(0|0);
  if ($20) {
   $25 = $17;
  } else {
   __ZdaPv($19);
   $$phi$trans$insert = ((($0)) + 97|0);
   $$pre = HEAP8[$$phi$trans$insert>>0]|0;
   $25 = $$pre;
  }
 }
 $26 = ($25<<24>>24)==(0);
 if ($26) {
  __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0);
  return;
 }
 $27 = ((($0)) + 56|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0|0);
 if ($29) {
  __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0);
  return;
 }
 __ZdaPv($28);
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0);
 return;
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4syncEv($0) {
 $0 = $0|0;
 var $$129$off0 = 0, $$131 = 0, $$4 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = sp;
 $3 = ((($0)) + 64|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $6 = ((($0)) + 68|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($9);
  ___cxa_throw(($9|0),(2928|0),(627|0));
  // unreachable;
 }
 $10 = ((($0)) + 92|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 16;
 $13 = ($12|0)==(0);
 do {
  if ($13) {
   $45 = $11 & 8;
   $46 = ($45|0)==(0);
   if (!($46)) {
    $47 = ((($0)) + 80|0);
    $48 = $47;
    $49 = $48;
    $50 = HEAP32[$49>>2]|0;
    $51 = (($48) + 4)|0;
    $52 = $51;
    $53 = HEAP32[$52>>2]|0;
    $54 = $2;
    $55 = $54;
    HEAP32[$55>>2] = $50;
    $56 = (($54) + 4)|0;
    $57 = $56;
    HEAP32[$57>>2] = $53;
    $58 = ((($0)) + 98|0);
    $59 = HEAP8[$58>>0]|0;
    $60 = ($59<<24>>24)==(0);
    do {
     if ($60) {
      $66 = HEAP32[$7>>2]|0;
      $67 = ((($66)) + 24|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = (FUNCTION_TABLE_ii[$68 & 1023]($7)|0);
      $70 = ((($0)) + 40|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = ((($0)) + 36|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = (($71) - ($73))|0;
      $75 = ($69|0)>(0);
      $76 = $73;
      if ($75) {
       $77 = ((($0)) + 16|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ((($0)) + 12|0);
       $80 = HEAP32[$79>>2]|0;
       $81 = (($78) - ($80))|0;
       $82 = Math_imul($81, $69)|0;
       $83 = (($82) + ($74))|0;
       $$129$off0 = 0;$$131 = $83;
       break;
      }
      $84 = ((($0)) + 12|0);
      $85 = HEAP32[$84>>2]|0;
      $86 = ((($0)) + 16|0);
      $87 = HEAP32[$86>>2]|0;
      $88 = ($85|0)==($87|0);
      if ($88) {
       $$129$off0 = 0;$$131 = $74;
      } else {
       $89 = HEAP32[$6>>2]|0;
       $90 = ((($0)) + 32|0);
       $91 = HEAP32[$90>>2]|0;
       $92 = ((($0)) + 8|0);
       $93 = HEAP32[$92>>2]|0;
       $94 = $85;
       $95 = (($94) - ($93))|0;
       $96 = HEAP32[$89>>2]|0;
       $97 = ((($96)) + 32|0);
       $98 = HEAP32[$97>>2]|0;
       $99 = (FUNCTION_TABLE_iiiiii[$98 & 1023]($89,$2,$91,$76,$95)|0);
       $100 = HEAP32[$72>>2]|0;
       $101 = HEAP32[$90>>2]|0;
       $102 = (($74) - ($99))|0;
       $103 = (($102) + ($100))|0;
       $104 = (($103) - ($101))|0;
       $$129$off0 = 1;$$131 = $104;
      }
     } else {
      $61 = ((($0)) + 16|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = ((($0)) + 12|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = (($62) - ($64))|0;
      $$129$off0 = 0;$$131 = $65;
     }
    } while(0);
    $105 = HEAP32[$3>>2]|0;
    $106 = (0 - ($$131))|0;
    $107 = (___fseeko($105,$106,1)|0);
    $108 = ($107|0)==(0);
    if (!($108)) {
     $$4 = -1;
     STACKTOP = sp;return ($$4|0);
    }
    if ($$129$off0) {
     $109 = ((($0)) + 72|0);
     $110 = $2;
     $111 = $110;
     $112 = HEAP32[$111>>2]|0;
     $113 = (($110) + 4)|0;
     $114 = $113;
     $115 = HEAP32[$114>>2]|0;
     $116 = $109;
     $117 = $116;
     HEAP32[$117>>2] = $112;
     $118 = (($116) + 4)|0;
     $119 = $118;
     HEAP32[$119>>2] = $115;
    }
    $120 = ((($0)) + 32|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = ((($0)) + 40|0);
    HEAP32[$122>>2] = $121;
    $123 = ((($0)) + 36|0);
    HEAP32[$123>>2] = $121;
    $124 = ((($0)) + 8|0);
    HEAP32[$124>>2] = 0;
    $125 = ((($0)) + 12|0);
    HEAP32[$125>>2] = 0;
    $126 = ((($0)) + 16|0);
    HEAP32[$126>>2] = 0;
    HEAP32[$10>>2] = 0;
   }
  } else {
   $14 = ((($0)) + 24|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($0)) + 20|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($15|0)==($17|0);
   if (!($18)) {
    $19 = HEAP32[$0>>2]|0;
    $20 = ((($19)) + 52|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = (FUNCTION_TABLE_iii[$21 & 1023]($0,-1)|0);
    $23 = ($22|0)==(-1);
    if ($23) {
     $$4 = -1;
     STACKTOP = sp;return ($$4|0);
    }
   }
   $24 = ((($0)) + 72|0);
   $25 = ((($0)) + 32|0);
   $26 = ((($0)) + 52|0);
   L30: while(1) {
    $27 = HEAP32[$6>>2]|0;
    $28 = HEAP32[$25>>2]|0;
    $29 = HEAP32[$26>>2]|0;
    $30 = (($28) + ($29)|0);
    $31 = HEAP32[$27>>2]|0;
    $32 = ((($31)) + 20|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (FUNCTION_TABLE_iiiiii[$33 & 1023]($27,$24,$28,$30,$1)|0);
    $35 = HEAP32[$1>>2]|0;
    $36 = HEAP32[$25>>2]|0;
    $37 = $36;
    $38 = (($35) - ($37))|0;
    $39 = HEAP32[$3>>2]|0;
    $40 = (_fwrite($36,1,$38,$39)|0);
    $41 = ($40|0)==($38|0);
    if (!($41)) {
     $$4 = -1;
     label = 24;
     break;
    }
    switch ($34|0) {
    case 1:  {
     break;
    }
    case 2:  {
     $$4 = -1;
     label = 24;
     break L30;
     break;
    }
    default: {
     label = 10;
     break L30;
    }
    }
   }
   if ((label|0) == 10) {
    $42 = HEAP32[$3>>2]|0;
    $43 = (_fflush($42)|0);
    $44 = ($43|0)==(0);
    if ($44) {
     break;
    } else {
     $$4 = -1;
    }
    STACKTOP = sp;return ($$4|0);
   }
   else if ((label|0) == 24) {
    STACKTOP = sp;return ($$4|0);
   }
  }
 } while(0);
 $$4 = 0;
 STACKTOP = sp;return ($$4|0);
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi(176,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  __ZdlPv($0);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$phi$trans$insert = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 (FUNCTION_TABLE_ii[$4 & 1023]($0)|0);
 $5 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,42504)|0);
 $6 = ((($0)) + 68|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($0)) + 98|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = HEAP32[$5>>2]|0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_ii[$11 & 1023]($5)|0);
 $13 = $12&1;
 HEAP8[$7>>0] = $13;
 $14 = $8&255;
 $15 = $12&1;
 $16 = ($14|0)==($15|0);
 if ($16) {
  return;
 }
 $17 = ((($0)) + 8|0);
 $18 = ((($0)) + 96|0);
 ;HEAP32[$17>>2]=0|0;HEAP32[$17+4>>2]=0|0;HEAP32[$17+8>>2]=0|0;HEAP32[$17+12>>2]=0|0;HEAP32[$17+16>>2]=0|0;HEAP32[$17+20>>2]=0|0;
 $19 = HEAP16[$18>>1]|0;
 $20 = $19&255;
 $21 = ($20<<24>>24)!=(0);
 $22 = ($19&65535) >>> 8;
 $23 = $22&255;
 if ($12) {
  $24 = ((($0)) + 32|0);
  if ($21) {
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0|0);
   if ($26) {
    $28 = $23;
   } else {
    __ZdaPv($25);
    $$phi$trans$insert = ((($0)) + 97|0);
    $$pre = HEAP8[$$phi$trans$insert>>0]|0;
    $28 = $$pre;
   }
  } else {
   $28 = $23;
  }
  $27 = ((($0)) + 97|0);
  HEAP8[$18>>0] = $28;
  $29 = ((($0)) + 60|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($0)) + 52|0);
  HEAP32[$31>>2] = $30;
  $32 = ((($0)) + 56|0);
  $33 = HEAP32[$32>>2]|0;
  HEAP32[$24>>2] = $33;
  HEAP32[$29>>2] = 0;
  HEAP32[$32>>2] = 0;
  HEAP8[$27>>0] = 0;
  return;
 }
 if (!($21)) {
  $34 = ((($0)) + 32|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ((($0)) + 44|0);
  $37 = ($35|0)==($36|0);
  if (!($37)) {
   $38 = $35;
   $39 = ((($0)) + 52|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ((($0)) + 60|0);
   HEAP32[$41>>2] = $40;
   $42 = ((($0)) + 56|0);
   HEAP32[$42>>2] = $38;
   $43 = ((($0)) + 97|0);
   HEAP8[$43>>0] = 0;
   $44 = (__Znaj($40)|0);
   HEAP32[$34>>2] = $44;
   HEAP8[$18>>0] = 1;
   return;
  }
 }
 $45 = ((($0)) + 52|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ((($0)) + 60|0);
 HEAP32[$47>>2] = $46;
 $48 = (__Znaj($46)|0);
 $49 = ((($0)) + 56|0);
 HEAP32[$49>>2] = $48;
 $50 = ((($0)) + 97|0);
 HEAP8[$50>>0] = 1;
 return;
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE6setbufEPci($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$phi$trans$insert = 0, $$phi$trans$insert14 = 0, $$pre = 0, $$pre15 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 8|0);
 $4 = ((($0)) + 96|0);
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;HEAP32[$3+16>>2]=0|0;HEAP32[$3+20>>2]=0|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = $5&65535;
 $7 = $5&255;
 $8 = ($7<<24>>24)==(0);
 $9 = ($6&65535) >>> 8;
 $10 = $9&255;
 if ($8) {
  $15 = $10;
 } else {
  $11 = ((($0)) + 32|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0|0);
  if ($13) {
   $15 = $10;
  } else {
   __ZdaPv($12);
   $$phi$trans$insert = ((($0)) + 97|0);
   $$pre = HEAP8[$$phi$trans$insert>>0]|0;
   $15 = $$pre;
  }
 }
 $14 = ((($0)) + 97|0);
 $16 = ($15<<24>>24)==(0);
 if (!($16)) {
  $17 = ((($0)) + 56|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(0|0);
  if (!($19)) {
   __ZdaPv($18);
  }
 }
 $20 = ((($0)) + 52|0);
 HEAP32[$20>>2] = $2;
 $21 = ($2>>>0)>(8);
 do {
  if ($21) {
   $22 = ((($0)) + 98|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = ($23<<24>>24)!=(0);
   $25 = ($1|0)!=(0|0);
   $or$cond = $25 & $24;
   if ($or$cond) {
    $26 = ((($0)) + 32|0);
    HEAP32[$26>>2] = $1;
    HEAP8[$4>>0] = 0;
    $31 = $23;
    break;
   } else {
    $27 = (__Znaj($2)|0);
    $28 = ((($0)) + 32|0);
    HEAP32[$28>>2] = $27;
    HEAP8[$4>>0] = 1;
    $31 = $23;
    break;
   }
  } else {
   $29 = ((($0)) + 44|0);
   $30 = ((($0)) + 32|0);
   HEAP32[$30>>2] = $29;
   HEAP32[$20>>2] = 8;
   HEAP8[$4>>0] = 0;
   $$phi$trans$insert14 = ((($0)) + 98|0);
   $$pre15 = HEAP8[$$phi$trans$insert14>>0]|0;
   $31 = $$pre15;
  }
 } while(0);
 $32 = ($31<<24>>24)==(0);
 if (!($32)) {
  $40 = ((($0)) + 60|0);
  HEAP32[$40>>2] = 0;
  $41 = ((($0)) + 56|0);
  HEAP32[$41>>2] = 0;
  HEAP8[$14>>0] = 0;
  return ($0|0);
 }
 $33 = ($2|0)<(8);
 $$sroa$speculated = $33 ? 8 : $2;
 $34 = ((($0)) + 60|0);
 HEAP32[$34>>2] = $$sroa$speculated;
 $35 = ($1|0)!=(0|0);
 $36 = ($$sroa$speculated>>>0)>(7);
 $or$cond13 = $35 & $36;
 if ($or$cond13) {
  $37 = ((($0)) + 56|0);
  HEAP32[$37>>2] = $1;
  HEAP8[$14>>0] = 0;
  return ($0|0);
 } else {
  $38 = (__Znaj($$sroa$speculated)|0);
  $39 = ((($0)) + 56|0);
  HEAP32[$39>>2] = $38;
  HEAP8[$14>>0] = 1;
  return ($0|0);
 }
 return (0)|0;
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$off0 = 0, $$sroa$5$0$$sroa_idx13 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, $or$cond = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 68|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($9);
  ___cxa_throw(($9|0),(2928|0),(627|0));
  // unreachable;
 }
 $10 = HEAP32[$7>>2]|0;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_ii[$12 & 1023]($7)|0);
 $14 = ((($1)) + 64|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if (!($16)) {
  $17 = ($13|0)<(1);
  $18 = ($2|0)!=(0);
  $19 = ($3|0)!=(0);
  $20 = $18 | $19;
  $or$cond = $20 & $17;
  if (!($or$cond)) {
   $21 = HEAP32[$1>>2]|0;
   $22 = ((($21)) + 24|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (FUNCTION_TABLE_ii[$23 & 1023]($1)|0);
   $25 = ($24|0)==(0);
   if ($25) {
    $switch = ($4>>>0)<(3);
    if (!($switch)) {
     $35 = $0;
     $36 = $35;
     HEAP32[$36>>2] = 0;
     $37 = (($35) + 4)|0;
     $38 = $37;
     HEAP32[$38>>2] = 0;
     $39 = ((($0)) + 8|0);
     $40 = $39;
     $41 = $40;
     HEAP32[$41>>2] = -1;
     $42 = (($40) + 4)|0;
     $43 = $42;
     HEAP32[$43>>2] = -1;
     return;
    }
    $44 = HEAP32[$14>>2]|0;
    $45 = ($13|0)>(0);
    $46 = ($13|0)<(0);
    $47 = $46 << 31 >> 31;
    $48 = (___muldi3(($13|0),($47|0),($2|0),($3|0))|0);
    $49 = tempRet0;
    $$off0 = $45 ? $48 : 0;
    $50 = (___fseeko($44,$$off0,$4)|0);
    $51 = ($50|0)==(0);
    if ($51) {
     $61 = HEAP32[$14>>2]|0;
     $62 = (___ftello($61)|0);
     $63 = ($62|0)<(0);
     $64 = $63 << 31 >> 31;
     $65 = ((($1)) + 72|0);
     $66 = $65;
     $67 = $66;
     $68 = HEAP32[$67>>2]|0;
     $69 = (($66) + 4)|0;
     $70 = $69;
     $71 = HEAP32[$70>>2]|0;
     $72 = $0;
     $73 = $72;
     HEAP32[$73>>2] = $68;
     $74 = (($72) + 4)|0;
     $75 = $74;
     HEAP32[$75>>2] = $71;
     $$sroa$5$0$$sroa_idx13 = ((($0)) + 8|0);
     $76 = $$sroa$5$0$$sroa_idx13;
     $77 = $76;
     HEAP32[$77>>2] = $62;
     $78 = (($76) + 4)|0;
     $79 = $78;
     HEAP32[$79>>2] = $64;
     return;
    } else {
     $52 = $0;
     $53 = $52;
     HEAP32[$53>>2] = 0;
     $54 = (($52) + 4)|0;
     $55 = $54;
     HEAP32[$55>>2] = 0;
     $56 = ((($0)) + 8|0);
     $57 = $56;
     $58 = $57;
     HEAP32[$58>>2] = -1;
     $59 = (($57) + 4)|0;
     $60 = $59;
     HEAP32[$60>>2] = -1;
     return;
    }
   }
  }
 }
 $26 = $0;
 $27 = $26;
 HEAP32[$27>>2] = 0;
 $28 = (($26) + 4)|0;
 $29 = $28;
 HEAP32[$29>>2] = 0;
 $30 = ((($0)) + 8|0);
 $31 = $30;
 $32 = $31;
 HEAP32[$32>>2] = -1;
 $33 = (($31) + 4)|0;
 $34 = $33;
 HEAP32[$34>>2] = -1;
 return;
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = HEAP32[$1>>2]|0;
  $8 = ((($7)) + 24|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_ii[$9 & 1023]($1)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   $21 = HEAP32[$4>>2]|0;
   $22 = ((($2)) + 8|0);
   $23 = $22;
   $24 = $23;
   $25 = HEAP32[$24>>2]|0;
   $26 = (($23) + 4)|0;
   $27 = $26;
   $28 = HEAP32[$27>>2]|0;
   $29 = (___fseeko($21,$25,0)|0);
   $30 = ($29|0)==(0);
   if ($30) {
    $40 = ((($1)) + 72|0);
    $41 = $2;
    $42 = $41;
    $43 = HEAP32[$42>>2]|0;
    $44 = (($41) + 4)|0;
    $45 = $44;
    $46 = HEAP32[$45>>2]|0;
    $47 = $40;
    $48 = $47;
    HEAP32[$48>>2] = $43;
    $49 = (($47) + 4)|0;
    $50 = $49;
    HEAP32[$50>>2] = $46;
    ;HEAP32[$0>>2]=HEAP32[$2>>2]|0;HEAP32[$0+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$2+12>>2]|0;
    return;
   } else {
    $31 = $0;
    $32 = $31;
    HEAP32[$32>>2] = 0;
    $33 = (($31) + 4)|0;
    $34 = $33;
    HEAP32[$34>>2] = 0;
    $35 = ((($0)) + 8|0);
    $36 = $35;
    $37 = $36;
    HEAP32[$37>>2] = -1;
    $38 = (($36) + 4)|0;
    $39 = $38;
    HEAP32[$39>>2] = -1;
    return;
   }
  }
 }
 $12 = $0;
 $13 = $12;
 HEAP32[$13>>2] = 0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 $16 = ((($0)) + 8|0);
 $17 = $16;
 $18 = $17;
 HEAP32[$18>>2] = -1;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = -1;
 return;
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9underflowEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i = 0, $$1 = 0, $$3 = 0, $$cast = 0, $$cast54 = 0, $$phi$trans$insert = 0, $$phi$trans$insert55 = 0, $$pre = 0, $$pre$phi59Z2D = 0, $$pre$phiZ2D = 0, $$pre56 = 0, $$pre58 = 0, $$sink2$i = 0, $$sink3$i = 0, $$sroa$speculated = 0, $$sroa$speculated45 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 $3 = ((($0)) + 64|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = ((($0)) + 92|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = ((($0)) + 24|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($0)) + 20|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 28|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 98|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = ($14<<24>>24)==(0);
  if ($15) {
   $21 = ((($0)) + 56|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($0)) + 60|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($22) + ($24)|0);
   $$sink2$i = $25;$$sink3$i = $22;
  } else {
   $16 = ((($0)) + 32|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($0)) + 52|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($17) + ($19)|0);
   $$sink2$i = $20;$$sink3$i = $17;
  }
  $26 = ((($0)) + 8|0);
  HEAP32[$26>>2] = $$sink3$i;
  $27 = ((($0)) + 12|0);
  HEAP32[$27>>2] = $$sink2$i;
  $28 = ((($0)) + 16|0);
  HEAP32[$28>>2] = $$sink2$i;
  HEAP32[$6>>2] = 8;
  $$0$i = 1;$$pre$phiZ2D = $27;$29 = $$sink2$i;
 } else {
  $$phi$trans$insert = ((($0)) + 12|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $$0$i = 0;$$pre$phiZ2D = $$phi$trans$insert;$29 = $$pre;
 }
 $30 = ($29|0)==(0|0);
 if ($30) {
  $31 = ((($1)) + 1|0);
  $32 = ((($0)) + 8|0);
  HEAP32[$32>>2] = $1;
  HEAP32[$$pre$phiZ2D>>2] = $31;
  $33 = ((($0)) + 16|0);
  HEAP32[$33>>2] = $31;
  $41 = $31;
 } else {
  $41 = $29;
 }
 $$phi$trans$insert55 = ((($0)) + 16|0);
 if ($$0$i) {
  $$pre56 = HEAP32[$$phi$trans$insert55>>2]|0;
  $43 = $$pre56;$45 = 0;
 } else {
  $34 = HEAP32[$$phi$trans$insert55>>2]|0;
  $35 = ((($0)) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($34) - ($36))|0;
  $38 = (($37|0) / 2)&-1;
  $39 = ($38>>>0)>(4);
  $$sroa$speculated45 = $39 ? 4 : $38;
  $40 = $34;
  $43 = $40;$45 = $$sroa$speculated45;
 }
 $42 = ($41|0)==($43|0);
 do {
  if ($42) {
   $44 = (0 - ($45))|0;
   $46 = ((($0)) + 8|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($41) + ($44)|0);
   _memmove(($47|0),($48|0),($45|0))|0;
   $49 = ((($0)) + 98|0);
   $50 = HEAP8[$49>>0]|0;
   $51 = ($50<<24>>24)==(0);
   if (!($51)) {
    $52 = HEAP32[$$phi$trans$insert55>>2]|0;
    $53 = HEAP32[$46>>2]|0;
    $54 = $53;
    $55 = (($52) - ($45))|0;
    $56 = (($55) - ($54))|0;
    $57 = (($53) + ($45)|0);
    $58 = HEAP32[$3>>2]|0;
    $59 = (_fread($57,1,$56,$58)|0);
    $60 = ($59|0)==(0);
    if ($60) {
     $$3 = -1;$$pre$phi59Z2D = $46;
     break;
    }
    $61 = HEAP32[$46>>2]|0;
    $62 = (($61) + ($45)|0);
    $63 = (($62) + ($59)|0);
    HEAP32[$$pre$phiZ2D>>2] = $62;
    HEAP32[$$phi$trans$insert55>>2] = $63;
    $64 = HEAP8[$62>>0]|0;
    $65 = $64&255;
    $$3 = $65;$$pre$phi59Z2D = $46;
    break;
   }
   $66 = ((($0)) + 32|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ((($0)) + 36|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = ((($0)) + 40|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $69;
   $73 = (($71) - ($72))|0;
   _memmove(($67|0),($69|0),($73|0))|0;
   $74 = HEAP32[$66>>2]|0;
   $75 = HEAP32[$70>>2]|0;
   $76 = HEAP32[$68>>2]|0;
   $77 = (($75) - ($76))|0;
   $78 = (($74) + ($77)|0);
   HEAP32[$68>>2] = $78;
   $79 = ((($0)) + 44|0);
   $80 = ($74|0)==($79|0);
   $81 = $78;
   if ($80) {
    $85 = 8;
   } else {
    $82 = ((($0)) + 52|0);
    $83 = HEAP32[$82>>2]|0;
    $85 = $83;
   }
   $84 = (($74) + ($85)|0);
   HEAP32[$70>>2] = $84;
   $86 = ((($0)) + 60|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = (($87) - ($45))|0;
   $$cast = $84;
   $89 = (($$cast) - ($81))|0;
   $90 = ($89>>>0)<($88>>>0);
   $$sroa$speculated = $90 ? $89 : $88;
   $91 = ((($0)) + 80|0);
   $92 = ((($0)) + 72|0);
   $93 = $92;
   $94 = $93;
   $95 = HEAP32[$94>>2]|0;
   $96 = (($93) + 4)|0;
   $97 = $96;
   $98 = HEAP32[$97>>2]|0;
   $99 = $91;
   $100 = $99;
   HEAP32[$100>>2] = $95;
   $101 = (($99) + 4)|0;
   $102 = $101;
   HEAP32[$102>>2] = $98;
   $103 = HEAP32[$3>>2]|0;
   $104 = (_fread($78,1,$$sroa$speculated,$103)|0);
   $105 = ($104|0)==(0);
   if ($105) {
    $$3 = -1;$$pre$phi59Z2D = $46;
   } else {
    $106 = ((($0)) + 68|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = ($107|0)==(0|0);
    if ($108) {
     $109 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($109);
     ___cxa_throw(($109|0),(2928|0),(627|0));
     // unreachable;
    }
    $110 = HEAP32[$68>>2]|0;
    $111 = (($110) + ($104)|0);
    HEAP32[$70>>2] = $111;
    $112 = HEAP32[$66>>2]|0;
    $113 = HEAP32[$46>>2]|0;
    $114 = (($113) + ($45)|0);
    $115 = HEAP32[$86>>2]|0;
    $116 = (($113) + ($115)|0);
    $117 = HEAP32[$107>>2]|0;
    $118 = ((($117)) + 16|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = (FUNCTION_TABLE_iiiiiiiii[$119 & 1023]($107,$92,$112,$111,$68,$114,$116,$2)|0);
    $121 = ($120|0)==(3);
    if ($121) {
     $122 = HEAP32[$66>>2]|0;
     $123 = HEAP32[$70>>2]|0;
     HEAP32[$46>>2] = $122;
     HEAP32[$$pre$phiZ2D>>2] = $122;
     HEAP32[$$phi$trans$insert55>>2] = $123;
     $$cast54 = $122;
     $124 = HEAP8[$$cast54>>0]|0;
     $125 = $124&255;
     $$1 = $125;
    } else {
     $126 = HEAP32[$2>>2]|0;
     $127 = HEAP32[$46>>2]|0;
     $128 = (($127) + ($45)|0);
     $129 = ($126|0)==($128|0);
     if ($129) {
      $$1 = -1;
     } else {
      HEAP32[$$pre$phiZ2D>>2] = $128;
      HEAP32[$$phi$trans$insert55>>2] = $126;
      $130 = HEAP8[$128>>0]|0;
      $131 = $130&255;
      $$1 = $131;
     }
    }
    $$3 = $$1;$$pre$phi59Z2D = $46;
   }
  } else {
   $132 = HEAP8[$41>>0]|0;
   $133 = $132&255;
   $$pre58 = ((($0)) + 8|0);
   $$3 = $133;$$pre$phi59Z2D = $$pre58;
  }
 } while(0);
 $134 = HEAP32[$$pre$phi59Z2D>>2]|0;
 $135 = ($134|0)==($1|0);
 if ($135) {
  HEAP32[$$pre$phi59Z2D>>2] = 0;
  HEAP32[$$pre$phiZ2D>>2] = 0;
  HEAP32[$$phi$trans$insert55>>2] = 0;
 }
 $$0 = $$3;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $$pre$phi7Z2D = 0, $$pre$phiZ2D = 0, $$pre6 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 64|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = -1;
  return ($$0|0);
 }
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)<($8>>>0);
 if (!($9)) {
  $$0 = -1;
  return ($$0|0);
 }
 $10 = ($1|0)==(-1);
 if ($10) {
  $11 = ((($8)) + -1|0);
  HEAP32[$7>>2] = $11;
  $$0 = 0;
  return ($$0|0);
 }
 $12 = ((($0)) + 88|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 & 16;
 $15 = ($14|0)==(0);
 if ($15) {
  $16 = $1&255;
  $17 = ((($8)) + -1|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = ($16<<24>>24)==($18<<24>>24);
  if ($19) {
   $$pre$phi7Z2D = $16;$$pre$phiZ2D = $17;
  } else {
   $$0 = -1;
   return ($$0|0);
  }
 } else {
  $$pre = ((($8)) + -1|0);
  $$pre6 = $1&255;
  $$pre$phi7Z2D = $$pre6;$$pre$phiZ2D = $$pre;
 }
 HEAP32[$7>>2] = $$pre$phiZ2D;
 HEAP8[$$pre$phiZ2D>>0] = $$pre$phi7Z2D;
 $$0 = $1;
 return ($$0|0);
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE8overflowEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i = 0, $$6 = 0, $$7 = 0, $$cast = 0, $$phi$trans$insert = 0, $$phi$trans$insert64 = 0, $$phi$trans$insert67 = 0, $$pre = 0, $$pre$phi73Z2D = 0, $$pre$phi75Z2D = 0, $$pre$phi77Z2D = 0, $$pre$phi80Z2D = 0, $$pre$phiZ2D = 0, $$pre66 = 0, $$pre68 = 0, $$pre69 = 0, $$pre70 = 0, $$pre71$pre$phiZZ2D = 0, $$pre74$pre$phiZZ2D = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = ((($0)) + 64|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$7 = -1;
  STACKTOP = sp;return ($$7|0);
 }
 $8 = ((($0)) + 92|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 16;
 $11 = ($10|0)==(0);
 if ($11) {
  $13 = ((($0)) + 8|0);
  HEAP32[$13>>2] = 0;
  $14 = ((($0)) + 12|0);
  HEAP32[$14>>2] = 0;
  $15 = ((($0)) + 16|0);
  HEAP32[$15>>2] = 0;
  $16 = ((($0)) + 52|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17>>>0)>(8);
  do {
   if ($18) {
    $19 = ((($0)) + 98|0);
    $20 = HEAP8[$19>>0]|0;
    $21 = ($20<<24>>24)==(0);
    if ($21) {
     $31 = ((($0)) + 56|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ((($0)) + 60|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = (($34) + -1)|0;
     $36 = (($32) + ($35)|0);
     $37 = ((($0)) + 24|0);
     HEAP32[$37>>2] = $32;
     $38 = ((($0)) + 20|0);
     HEAP32[$38>>2] = $32;
     $39 = ((($0)) + 28|0);
     HEAP32[$39>>2] = $36;
     $40 = $32;
     $41 = $36;
     $$pre71$pre$phiZZ2D = $38;$$pre74$pre$phiZZ2D = $39;$120 = $32;$121 = $41;$122 = $40;
     break;
    } else {
     $22 = ((($0)) + 32|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = (($17) + -1)|0;
     $25 = (($23) + ($24)|0);
     $26 = ((($0)) + 24|0);
     HEAP32[$26>>2] = $23;
     $27 = ((($0)) + 20|0);
     HEAP32[$27>>2] = $23;
     $28 = ((($0)) + 28|0);
     HEAP32[$28>>2] = $25;
     $29 = $23;
     $30 = $25;
     $$pre71$pre$phiZZ2D = $27;$$pre74$pre$phiZZ2D = $28;$120 = $23;$121 = $30;$122 = $29;
     break;
    }
   } else {
    $42 = ((($0)) + 24|0);
    HEAP32[$42>>2] = 0;
    $43 = ((($0)) + 20|0);
    HEAP32[$43>>2] = 0;
    $44 = ((($0)) + 28|0);
    HEAP32[$44>>2] = 0;
    $$pre71$pre$phiZZ2D = $43;$$pre74$pre$phiZZ2D = $44;$120 = 0;$121 = 0;$122 = 0;
   }
  } while(0);
  HEAP32[$8>>2] = 16;
  $$pre$phi73Z2D = $$pre71$pre$phiZZ2D;$$pre$phi75Z2D = $$pre74$pre$phiZZ2D;$$pre$phi77Z2D = $$pre74$pre$phiZZ2D;$$pre$phiZ2D = $$pre71$pre$phiZZ2D;$117 = $122;$118 = $121;$119 = $120;
 } else {
  $$phi$trans$insert = ((($0)) + 20|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $$phi$trans$insert64 = ((($0)) + 28|0);
  $$pre66 = HEAP32[$$phi$trans$insert64>>2]|0;
  $12 = $$pre;
  $$pre$phi73Z2D = $$phi$trans$insert;$$pre$phi75Z2D = $$phi$trans$insert64;$$pre$phi77Z2D = $$phi$trans$insert64;$$pre$phiZ2D = $$phi$trans$insert;$117 = $$pre;$118 = $$pre66;$119 = $12;
 }
 $45 = ($1|0)==(-1);
 $$phi$trans$insert67 = ((($0)) + 24|0);
 $$pre68 = HEAP32[$$phi$trans$insert67>>2]|0;
 if ($45) {
  $52 = $$pre68;$54 = $119;
 } else {
  $46 = ($$pre68|0)==(0|0);
  if ($46) {
   $47 = ((($2)) + 1|0);
   HEAP32[$$phi$trans$insert67>>2] = $2;
   HEAP32[$$pre$phiZ2D>>2] = $2;
   HEAP32[$$pre$phi75Z2D>>2] = $47;
   $49 = $2;
  } else {
   $49 = $$pre68;
  }
  $48 = $1&255;
  HEAP8[$49>>0] = $48;
  $50 = HEAP32[$$phi$trans$insert67>>2]|0;
  $51 = ((($50)) + 1|0);
  HEAP32[$$phi$trans$insert67>>2] = $51;
  $$pre69 = HEAP32[$$pre$phiZ2D>>2]|0;
  $52 = $51;$54 = $$pre69;
 }
 $53 = ($52|0)==($54|0);
 L21: do {
  if ($53) {
   label = 33;
  } else {
   $55 = ((($0)) + 98|0);
   $56 = HEAP8[$55>>0]|0;
   $57 = ($56<<24>>24)==(0);
   L23: do {
    if ($57) {
     $64 = ((($0)) + 32|0);
     $65 = HEAP32[$64>>2]|0;
     HEAP32[$3>>2] = $65;
     $66 = ((($0)) + 68|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ($67|0)==(0|0);
     if ($68) {
      $81 = (___cxa_allocate_exception(4)|0);
      __ZNSt8bad_castC2Ev($81);
      ___cxa_throw(($81|0),(2928|0),(627|0));
      // unreachable;
     }
     $69 = $65;
     $70 = ((($0)) + 72|0);
     $71 = ((($0)) + 52|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = (($69) + ($72)|0);
     $74 = HEAP32[$67>>2]|0;
     $75 = ((($74)) + 12|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = (FUNCTION_TABLE_iiiiiiiii[$76 & 1023]($67,$70,$54,$52,$4,$69,$73,$3)|0);
     $78 = HEAP32[$4>>2]|0;
     $79 = HEAP32[$$pre$phiZ2D>>2]|0;
     $80 = ($78|0)==($79|0);
     L28: do {
      if (!($80)) {
       $82 = $77;$85 = $79;
       while(1) {
        $83 = ($82|0)==(3);
        if ($83) {
         label = 22;
         break;
        }
        $91 = ($82|0)==(1);
        $92 = $82 | 1;
        $93 = ($92|0)==(1);
        if (!($93)) {
         break L28;
        }
        $94 = HEAP32[$3>>2]|0;
        $95 = HEAP32[$64>>2]|0;
        $96 = $95;
        $97 = (($94) - ($96))|0;
        $98 = HEAP32[$5>>2]|0;
        $99 = (_fwrite($95,1,$97,$98)|0);
        $100 = ($99|0)==($97|0);
        if (!($100)) {
         break L28;
        }
        if (!($91)) {
         label = 29;
         break;
        }
        $101 = HEAP32[$4>>2]|0;
        $102 = HEAP32[$$phi$trans$insert67>>2]|0;
        HEAP32[$$pre$phi73Z2D>>2] = $101;
        HEAP32[$$pre$phi75Z2D>>2] = $102;
        $103 = $102;
        $104 = (($103) - ($101))|0;
        $$cast = $101;
        $105 = (($$cast) + ($104)|0);
        HEAP32[$$phi$trans$insert67>>2] = $105;
        $106 = HEAP32[$66>>2]|0;
        $107 = ($106|0)==(0|0);
        if ($107) {
         label = 20;
         break;
        }
        $$pre70 = HEAP32[$64>>2]|0;
        $108 = HEAP32[$71>>2]|0;
        $109 = (($$pre70) + ($108)|0);
        $110 = HEAP32[$106>>2]|0;
        $111 = ((($110)) + 12|0);
        $112 = HEAP32[$111>>2]|0;
        $113 = (FUNCTION_TABLE_iiiiiiiii[$112 & 1023]($106,$70,$$cast,$105,$4,$$pre70,$109,$3)|0);
        $114 = HEAP32[$4>>2]|0;
        $115 = HEAP32[$$pre$phiZ2D>>2]|0;
        $116 = ($114|0)==($115|0);
        if ($116) {
         break L28;
        } else {
         $82 = $113;$85 = $115;
        }
       }
       if ((label|0) == 20) {
        $81 = (___cxa_allocate_exception(4)|0);
        __ZNSt8bad_castC2Ev($81);
        ___cxa_throw(($81|0),(2928|0),(627|0));
        // unreachable;
       }
       else if ((label|0) == 22) {
        $84 = HEAP32[$$phi$trans$insert67>>2]|0;
        $86 = $85;
        $87 = (($84) - ($86))|0;
        $88 = HEAP32[$5>>2]|0;
        $89 = (_fwrite($85,1,$87,$88)|0);
        $90 = ($89|0)==($87|0);
        if (!($90)) {
         break;
        }
       }
       else if ((label|0) == 29) {
       }
       $$pre$phi80Z2D = $$phi$trans$insert67;
       break L23;
      }
     } while(0);
     $$6 = -1;
     break L21;
    } else {
     $58 = $52;
     $59 = $54;
     $60 = (($58) - ($59))|0;
     $61 = HEAP32[$5>>2]|0;
     $62 = (_fwrite($54,1,$60,$61)|0);
     $63 = ($62|0)==($60|0);
     if (!($63)) {
      $$6 = -1;
      break L21;
     }
     $$pre$phi80Z2D = $$phi$trans$insert67;
    }
   } while(0);
   HEAP32[$$pre$phi80Z2D>>2] = $117;
   HEAP32[$$pre$phi73Z2D>>2] = $117;
   HEAP32[$$pre$phi77Z2D>>2] = $118;
   label = 33;
  }
 } while(0);
 if ((label|0) == 33) {
  $$$i = $45 ? 0 : $1;
  $$6 = $$$i;
 }
 $$7 = $$6;
 STACKTOP = sp;return ($$7|0);
}
function __ZN31AsmException_FileError_DiscFullD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4628);
 $1 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  __ZdlPv($0);
  ___resumeException($4|0);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZNK31AsmException_FileError_DiscFull7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (24082|0);
}
function __ZN33AsmException_FileError_FileExistsD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4628);
 $1 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  __ZdlPv($0);
  ___resumeException($4|0);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZNK33AsmException_FileError_FileExists7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (24150|0);
}
function __ZN35AsmException_FileError_TooManyFilesD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4628);
 $1 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  __ZdlPv($0);
  ___resumeException($4|0);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZNK35AsmException_FileError_TooManyFiles7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (24227|0);
}
function __ZN30AsmException_FileError_BadNameD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4628);
 $1 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  __ZdlPv($0);
  ___resumeException($4|0);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZNK30AsmException_FileError_BadName7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (24303|0);
}
function __ZN36AsmException_FileError_WriteDiscDestD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4628);
 $1 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  __ZdlPv($0);
  ___resumeException($4|0);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZNK36AsmException_FileError_WriteDiscDest7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (24360|0);
}
function __ZN37AsmException_FileError_ReadDiscSourceD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4628);
 $1 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  __ZdlPv($0);
  ___resumeException($4|0);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZNK37AsmException_FileError_ReadDiscSource7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (24431|0);
}
function __ZN37AsmException_FileError_OpenDiscSourceD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4628);
 $1 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  __ZdlPv($0);
  ___resumeException($4|0);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZNK37AsmException_FileError_OpenDiscSource7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (24504|0);
}
function __ZN35AsmException_FileError_OpenDiscDestD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4628);
 $1 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  __ZdlPv($0);
  ___resumeException($4|0);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZNK35AsmException_FileError_OpenDiscDest7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (24581|0);
}
function __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = ((7880));
 $1 = ((($0)) + 108|0);
 HEAP32[$1>>2] = ((7900));
 $2 = ((($0)) + 8|0);
 __THREW__ = 0;
 invoke_vi(176,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   $7 = ___cxa_find_matching_catch_2()|0;
   $8 = tempRet0;
   __THREW__ = 0;
   invoke_vii(671,($0|0),((7912)|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $11 = ___cxa_find_matching_catch_3(0|0)|0;
    $12 = tempRet0;
    ___clang_call_terminate($11);
    // unreachable;
   } else {
    $eh$lpad$body$index2Z2D = $8;$eh$lpad$body$indexZ2D = $7;
   }
  } else {
   __THREW__ = 0;
   invoke_vii(671,($0|0),((7912)|0));
   $5 = __THREW__; __THREW__ = 0;
   $6 = $5&1;
   if ($6) {
    $13 = ___cxa_find_matching_catch_2()|0;
    $14 = tempRet0;
    $eh$lpad$body$index2Z2D = $14;$eh$lpad$body$indexZ2D = $13;
    break;
   } else {
    __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($1);
    return;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(653,($1|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if ($16) {
  $17 = ___cxa_find_matching_catch_3(0|0)|0;
  $18 = tempRet0;
  ___clang_call_terminate($17);
  // unreachable;
 } else {
  ___resumeException($eh$lpad$body$indexZ2D|0);
  // unreachable;
 }
}
function __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi(164,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  __ZdlPv($0);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZTv0_n12_NSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 HEAP32[$4>>2] = ((7880));
 $5 = ((($4)) + 108|0);
 HEAP32[$5>>2] = ((7900));
 $6 = ((($4)) + 8|0);
 __THREW__ = 0;
 invoke_vi(176,($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 do {
  if ($8) {
   $11 = ___cxa_find_matching_catch_2()|0;
   $12 = tempRet0;
   __THREW__ = 0;
   invoke_vii(671,($4|0),((7912)|0));
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    $15 = ___cxa_find_matching_catch_3(0|0)|0;
    $16 = tempRet0;
    ___clang_call_terminate($15);
    // unreachable;
   } else {
    $eh$lpad$body$i$index2Z2D = $12;$eh$lpad$body$i$indexZ2D = $11;
   }
  } else {
   __THREW__ = 0;
   invoke_vii(671,($4|0),((7912)|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $17 = ___cxa_find_matching_catch_2()|0;
    $18 = tempRet0;
    $eh$lpad$body$i$index2Z2D = $18;$eh$lpad$body$i$indexZ2D = $17;
    break;
   } else {
    __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($5);
    return;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(653,($5|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $21 = ___cxa_find_matching_catch_3(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 } else {
  ___resumeException($eh$lpad$body$i$indexZ2D|0);
  // unreachable;
 }
}
function __ZTv0_n12_NSt3__214basic_ifstreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $eh$lpad$body$index7Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 HEAP32[$4>>2] = ((7880));
 $5 = ((($4)) + 108|0);
 HEAP32[$5>>2] = ((7900));
 $6 = ((($4)) + 8|0);
 __THREW__ = 0;
 invoke_vi(176,($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 do {
  if ($8) {
   $11 = ___cxa_find_matching_catch_2()|0;
   $12 = tempRet0;
   __THREW__ = 0;
   invoke_vii(671,($4|0),((7912)|0));
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    $15 = ___cxa_find_matching_catch_3(0|0)|0;
    $16 = tempRet0;
    ___clang_call_terminate($15);
    // unreachable;
   } else {
    $eh$lpad$body$i$index2Z2D = $12;$eh$lpad$body$i$indexZ2D = $11;
   }
  } else {
   __THREW__ = 0;
   invoke_vii(671,($4|0),((7912)|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $19 = ___cxa_find_matching_catch_2()|0;
    $20 = tempRet0;
    $eh$lpad$body$i$index2Z2D = $20;$eh$lpad$body$i$indexZ2D = $19;
    break;
   }
   __THREW__ = 0;
   invoke_vi(653,($5|0));
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if (!($18)) {
    __ZdlPv($4);
    return;
   }
   $25 = ___cxa_find_matching_catch_2()|0;
   $26 = tempRet0;
   $eh$lpad$body$index7Z2D = $26;$eh$lpad$body$indexZ2D = $25;
   __ZdlPv($4);
   ___resumeException($eh$lpad$body$indexZ2D|0);
   // unreachable;
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(653,($5|0));
 $21 = __THREW__; __THREW__ = 0;
 $22 = $21&1;
 if ($22) {
  $23 = ___cxa_find_matching_catch_3(0|0)|0;
  $24 = tempRet0;
  ___clang_call_terminate($23);
  // unreachable;
 } else {
  $eh$lpad$body$index7Z2D = $eh$lpad$body$i$index2Z2D;$eh$lpad$body$indexZ2D = $eh$lpad$body$i$indexZ2D;
  __ZdlPv($4);
  ___resumeException($eh$lpad$body$indexZ2D|0);
  // unreachable;
 }
}
function __ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = ((7784));
 $1 = ((($0)) + 104|0);
 HEAP32[$1>>2] = ((7804));
 $2 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(176,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   $7 = ___cxa_find_matching_catch_2()|0;
   $8 = tempRet0;
   __THREW__ = 0;
   invoke_vii(652,($0|0),((7816)|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $11 = ___cxa_find_matching_catch_3(0|0)|0;
    $12 = tempRet0;
    ___clang_call_terminate($11);
    // unreachable;
   } else {
    $eh$lpad$body$index2Z2D = $8;$eh$lpad$body$indexZ2D = $7;
   }
  } else {
   __THREW__ = 0;
   invoke_vii(652,($0|0),((7816)|0));
   $5 = __THREW__; __THREW__ = 0;
   $6 = $5&1;
   if ($6) {
    $13 = ___cxa_find_matching_catch_2()|0;
    $14 = tempRet0;
    $eh$lpad$body$index2Z2D = $14;$eh$lpad$body$indexZ2D = $13;
    break;
   } else {
    __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($1);
    return;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(653,($1|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if ($16) {
  $17 = ___cxa_find_matching_catch_3(0|0)|0;
  $18 = tempRet0;
  ___clang_call_terminate($17);
  // unreachable;
 } else {
  ___resumeException($eh$lpad$body$indexZ2D|0);
  // unreachable;
 }
}
function __ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi(160,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  __ZdlPv($0);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZTv0_n12_NSt3__214basic_ofstreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 HEAP32[$4>>2] = ((7784));
 $5 = ((($4)) + 104|0);
 HEAP32[$5>>2] = ((7804));
 $6 = ((($4)) + 4|0);
 __THREW__ = 0;
 invoke_vi(176,($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 do {
  if ($8) {
   $11 = ___cxa_find_matching_catch_2()|0;
   $12 = tempRet0;
   __THREW__ = 0;
   invoke_vii(652,($4|0),((7816)|0));
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    $15 = ___cxa_find_matching_catch_3(0|0)|0;
    $16 = tempRet0;
    ___clang_call_terminate($15);
    // unreachable;
   } else {
    $eh$lpad$body$i$index2Z2D = $12;$eh$lpad$body$i$indexZ2D = $11;
   }
  } else {
   __THREW__ = 0;
   invoke_vii(652,($4|0),((7816)|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $17 = ___cxa_find_matching_catch_2()|0;
    $18 = tempRet0;
    $eh$lpad$body$i$index2Z2D = $18;$eh$lpad$body$i$indexZ2D = $17;
    break;
   } else {
    __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($5);
    return;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(653,($5|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $21 = ___cxa_find_matching_catch_3(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 } else {
  ___resumeException($eh$lpad$body$i$indexZ2D|0);
  // unreachable;
 }
}
function __ZTv0_n12_NSt3__214basic_ofstreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $eh$lpad$body$index7Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 HEAP32[$4>>2] = ((7784));
 $5 = ((($4)) + 104|0);
 HEAP32[$5>>2] = ((7804));
 $6 = ((($4)) + 4|0);
 __THREW__ = 0;
 invoke_vi(176,($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 do {
  if ($8) {
   $11 = ___cxa_find_matching_catch_2()|0;
   $12 = tempRet0;
   __THREW__ = 0;
   invoke_vii(652,($4|0),((7816)|0));
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    $15 = ___cxa_find_matching_catch_3(0|0)|0;
    $16 = tempRet0;
    ___clang_call_terminate($15);
    // unreachable;
   } else {
    $eh$lpad$body$i$index2Z2D = $12;$eh$lpad$body$i$indexZ2D = $11;
   }
  } else {
   __THREW__ = 0;
   invoke_vii(652,($4|0),((7816)|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $19 = ___cxa_find_matching_catch_2()|0;
    $20 = tempRet0;
    $eh$lpad$body$i$index2Z2D = $20;$eh$lpad$body$i$indexZ2D = $19;
    break;
   }
   __THREW__ = 0;
   invoke_vi(653,($5|0));
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if (!($18)) {
    __ZdlPv($4);
    return;
   }
   $25 = ___cxa_find_matching_catch_2()|0;
   $26 = tempRet0;
   $eh$lpad$body$index7Z2D = $26;$eh$lpad$body$indexZ2D = $25;
   __ZdlPv($4);
   ___resumeException($eh$lpad$body$indexZ2D|0);
   // unreachable;
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(653,($5|0));
 $21 = __THREW__; __THREW__ = 0;
 $22 = $21&1;
 if ($22) {
  $23 = ___cxa_find_matching_catch_3(0|0)|0;
  $24 = tempRet0;
  ___clang_call_terminate($23);
  // unreachable;
 } else {
  $eh$lpad$body$index7Z2D = $eh$lpad$body$i$index2Z2D;$eh$lpad$body$indexZ2D = $eh$lpad$body$i$indexZ2D;
  __ZdlPv($4);
  ___resumeException($eh$lpad$body$indexZ2D|0);
  // unreachable;
 }
}
function __ZN9DiscImageD2Ev($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i = 0, $$02 = 0, $$04$i = 0, $$pre = 0, $$pre$phiZ2D = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $eh$lpad$body$i$indexZ2D = 0, $eh$lpad$body$i15$index16Z2D = 0, $eh$lpad$body$i15$indexZ2D = 0, $eh$lpad$body$i21$index21Z2D = 0, $eh$lpad$body$i21$indexZ2D = 0, $eh$lpad$body$i23$indexZ2D = 0, $eh$lpad$body$index4Z2D = 0, $eh$lpad$body$indexZ2D = 0, $eh$lpad$body19$index26Z2D = 0, $eh$lpad$body19$indexZ2D = 0, $eh$lpad$body9$indexZ2D = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 16|0;
 $2 = sp;
 __THREW__ = 0;
 invoke_vii(657,($1|0),($0|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L1: do {
  if ($4) {
   label = 19;
  } else {
   $5 = HEAP32[$0>>2]|0;
   $6 = ((($5)) + -12|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (($0) + ($7)|0);
   $9 = ((($8)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $10 & 5;
   $12 = ($11|0)==(0);
   do {
    if ($12) {
     $13 = ((($8)) + 24|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = HEAP32[$14>>2]|0;
     $16 = ((($15)) + 16|0);
     $17 = HEAP32[$16>>2]|0;
     __THREW__ = 0;
     invoke_viiiiii($17|0,($2|0),($14|0),0,0,0,16);
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if ($19) {
      $41 = ___cxa_find_matching_catch_2()|0;
      $42 = tempRet0;
      $$0$i = $42;$$04$i = $41;
     } else {
      $20 = ((($2)) + 8|0);
      $21 = $20;
      $22 = $21;
      $23 = HEAP32[$22>>2]|0;
      $24 = (($21) + 4)|0;
      $25 = $24;
      $26 = HEAP32[$25>>2]|0;
      $27 = ($23|0)==(-1);
      $28 = ($26|0)==(-1);
      $29 = $27 & $28;
      if (!($29)) {
       break;
      }
      $30 = HEAP32[$0>>2]|0;
      $31 = ((($30)) + -12|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($0) + ($32)|0);
      $34 = ((($33)) + 16|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = $35 | 4;
      __THREW__ = 0;
      invoke_vii(662,($33|0),($36|0));
      $37 = __THREW__; __THREW__ = 0;
      $38 = $37&1;
      if (!($38)) {
       break;
      }
      $39 = ___cxa_find_matching_catch_2()|0;
      $40 = tempRet0;
      $$0$i = $40;$$04$i = $39;
     }
     __THREW__ = 0;
     invoke_vi(663,($1|0));
     $45 = __THREW__; __THREW__ = 0;
     $46 = $45&1;
     if ($46) {
      $47 = ___cxa_find_matching_catch_3(0|0)|0;
      $48 = tempRet0;
      ___clang_call_terminate($47);
      // unreachable;
     } else {
      $eh$lpad$body$index4Z2D = $$0$i;$eh$lpad$body$indexZ2D = $$04$i;
      label = 20;
      break L1;
     }
    }
   } while(0);
   __THREW__ = 0;
   invoke_vi(663,($1|0));
   $43 = __THREW__; __THREW__ = 0;
   $44 = $43&1;
   if ($44) {
    label = 19;
   } else {
    $49 = ((($0)) + 376|0);
    __THREW__ = 0;
    (invoke_iiii(702,($0|0),($49|0),512)|0);
    $50 = __THREW__; __THREW__ = 0;
    $51 = $50&1;
    if ($51) {
     label = 19;
    } else {
     $52 = ((($0)) + 4|0);
     $53 = ((($0)) + 68|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      label = 18;
     } else {
      $56 = HEAP32[$52>>2]|0;
      $57 = ((($56)) + 24|0);
      $58 = HEAP32[$57>>2]|0;
      __THREW__ = 0;
      $59 = (invoke_ii($58|0,($52|0))|0);
      $60 = __THREW__; __THREW__ = 0;
      $61 = $60&1;
      if ($61) {
       $64 = ___cxa_find_matching_catch_2()|0;
       $65 = tempRet0;
       (_fclose($54)|0);
       $eh$lpad$body$index4Z2D = $65;$eh$lpad$body$indexZ2D = $64;
       label = 20;
       break;
      }
      $62 = (_fclose($54)|0);
      $63 = ($62|0)==(0);
      if ($63) {
       $66 = ($59|0)==(0);
       HEAP32[$53>>2] = 0;
       if (!($66)) {
        label = 18;
       }
      } else {
       label = 18;
      }
     }
     if ((label|0) == 18) {
      $67 = HEAP32[$0>>2]|0;
      $68 = ((($67)) + -12|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = (($0) + ($69)|0);
      $71 = ((($70)) + 16|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = $72 | 4;
      __THREW__ = 0;
      invoke_vii(662,($70|0),($73|0));
      $74 = __THREW__; __THREW__ = 0;
      $75 = $74&1;
      if ($75) {
       label = 19;
       break;
      }
     }
     $99 = ((($0)) + 184|0);
     $100 = ((($0)) + 192|0);
     $101 = ((($0)) + 256|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = ($102|0)==(0|0);
     if ($103) {
      label = 34;
     } else {
      $104 = HEAP32[$100>>2]|0;
      $105 = ((($104)) + 24|0);
      $106 = HEAP32[$105>>2]|0;
      __THREW__ = 0;
      $107 = (invoke_ii($106|0,($100|0))|0);
      $108 = __THREW__; __THREW__ = 0;
      $109 = $108&1;
      if ($109) {
       $112 = ___cxa_find_matching_catch_2()|0;
       $113 = tempRet0;
       (_fclose($102)|0);
       $eh$lpad$body$index4Z2D = $113;$eh$lpad$body$indexZ2D = $112;
       label = 20;
       break;
      }
      $110 = (_fclose($102)|0);
      $111 = ($110|0)==(0);
      if ($111) {
       $114 = ($107|0)==(0);
       HEAP32[$101>>2] = 0;
       if (!($114)) {
        label = 34;
       }
      } else {
       label = 34;
      }
     }
     if ((label|0) == 34) {
      $115 = HEAP32[$99>>2]|0;
      $116 = ((($115)) + -12|0);
      $117 = HEAP32[$116>>2]|0;
      $118 = (($99) + ($117)|0);
      $119 = ((($118)) + 16|0);
      $120 = HEAP32[$119>>2]|0;
      $121 = $120 | 4;
      __THREW__ = 0;
      invoke_vii(662,($118|0),($121|0));
      $122 = __THREW__; __THREW__ = 0;
      $123 = $122&1;
      if ($123) {
       label = 19;
       break;
      }
     }
     HEAP32[$99>>2] = ((7880));
     $124 = ((($0)) + 292|0);
     HEAP32[$124>>2] = ((7900));
     __THREW__ = 0;
     invoke_vi(176,($100|0));
     $125 = __THREW__; __THREW__ = 0;
     $126 = $125&1;
     do {
      if ($126) {
       $129 = ___cxa_find_matching_catch_2()|0;
       $130 = tempRet0;
       __THREW__ = 0;
       invoke_vii(671,($99|0),((7912)|0));
       $131 = __THREW__; __THREW__ = 0;
       $132 = $131&1;
       if ($132) {
        $133 = ___cxa_find_matching_catch_3(0|0)|0;
        $134 = tempRet0;
        ___clang_call_terminate($133);
        // unreachable;
       } else {
        $eh$lpad$body$i15$index16Z2D = $130;$eh$lpad$body$i15$indexZ2D = $129;
        label = 41;
       }
      } else {
       __THREW__ = 0;
       invoke_vii(671,($99|0),((7912)|0));
       $127 = __THREW__; __THREW__ = 0;
       $128 = $127&1;
       if ($128) {
        $137 = ___cxa_find_matching_catch_2()|0;
        $138 = tempRet0;
        $eh$lpad$body$i15$index16Z2D = $138;$eh$lpad$body$i15$indexZ2D = $137;
        label = 41;
        break;
       }
       __THREW__ = 0;
       invoke_vi(653,($124|0));
       $135 = __THREW__; __THREW__ = 0;
       $136 = $135&1;
       if ($136) {
        $160 = ___cxa_find_matching_catch_2()|0;
        $161 = tempRet0;
        $eh$lpad$body19$index26Z2D = $161;$eh$lpad$body19$indexZ2D = $160;
        break;
       }
       HEAP32[$0>>2] = ((7784));
       $143 = ((($0)) + 104|0);
       HEAP32[$143>>2] = ((7804));
       __THREW__ = 0;
       invoke_vi(176,($52|0));
       $144 = __THREW__; __THREW__ = 0;
       $145 = $144&1;
       do {
        if ($145) {
         $148 = ___cxa_find_matching_catch_2()|0;
         $149 = tempRet0;
         __THREW__ = 0;
         invoke_vii(652,($0|0),((7816)|0));
         $150 = __THREW__; __THREW__ = 0;
         $151 = $150&1;
         if ($151) {
          $152 = ___cxa_find_matching_catch_3(0|0)|0;
          $153 = tempRet0;
          ___clang_call_terminate($152);
          // unreachable;
         } else {
          $eh$lpad$body$i21$index21Z2D = $149;$eh$lpad$body$i21$indexZ2D = $148;
         }
        } else {
         __THREW__ = 0;
         invoke_vii(652,($0|0),((7816)|0));
         $146 = __THREW__; __THREW__ = 0;
         $147 = $146&1;
         if ($147) {
          $154 = ___cxa_find_matching_catch_2()|0;
          $155 = tempRet0;
          $eh$lpad$body$i21$index21Z2D = $155;$eh$lpad$body$i21$indexZ2D = $154;
          break;
         } else {
          __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($143);
          STACKTOP = sp;return;
         }
        }
       } while(0);
       __THREW__ = 0;
       invoke_vi(653,($143|0));
       $156 = __THREW__; __THREW__ = 0;
       $157 = $156&1;
       if ($157) {
        $158 = ___cxa_find_matching_catch_3(0|0)|0;
        $159 = tempRet0;
        ___clang_call_terminate($158);
        // unreachable;
       } else {
        ___resumeException($eh$lpad$body$i21$indexZ2D|0);
        // unreachable;
       }
      }
     } while(0);
     if ((label|0) == 41) {
      __THREW__ = 0;
      invoke_vi(653,($124|0));
      $139 = __THREW__; __THREW__ = 0;
      $140 = $139&1;
      if ($140) {
       $141 = ___cxa_find_matching_catch_3(0|0)|0;
       $142 = tempRet0;
       ___clang_call_terminate($141);
       // unreachable;
      } else {
       $eh$lpad$body19$index26Z2D = $eh$lpad$body$i15$index16Z2D;$eh$lpad$body19$indexZ2D = $eh$lpad$body$i15$indexZ2D;
      }
     }
     $$0 = $eh$lpad$body19$index26Z2D;$$02 = $eh$lpad$body19$indexZ2D;$$pre$phiZ2D = $52;
     label = 54;
    }
   }
  }
 } while(0);
 if ((label|0) == 19) {
  $76 = ___cxa_find_matching_catch_2()|0;
  $77 = tempRet0;
  $eh$lpad$body$index4Z2D = $77;$eh$lpad$body$indexZ2D = $76;
  label = 20;
 }
 L62: do {
  if ((label|0) == 20) {
   $78 = ((($0)) + 184|0);
   HEAP32[$78>>2] = ((7880));
   $79 = ((($0)) + 292|0);
   HEAP32[$79>>2] = ((7900));
   $80 = ((($0)) + 192|0);
   __THREW__ = 0;
   invoke_vi(176,($80|0));
   $81 = __THREW__; __THREW__ = 0;
   $82 = $81&1;
   do {
    if ($82) {
     $85 = ___cxa_find_matching_catch_3(0|0)|0;
     $86 = tempRet0;
     __THREW__ = 0;
     invoke_vii(671,($78|0),((7912)|0));
     $87 = __THREW__; __THREW__ = 0;
     $88 = $87&1;
     if ($88) {
      $89 = ___cxa_find_matching_catch_3(0|0)|0;
      $90 = tempRet0;
      ___clang_call_terminate($89);
      // unreachable;
     } else {
      $eh$lpad$body$i$indexZ2D = $85;
     }
    } else {
     __THREW__ = 0;
     invoke_vii(671,($78|0),((7912)|0));
     $83 = __THREW__; __THREW__ = 0;
     $84 = $83&1;
     if ($84) {
      $93 = ___cxa_find_matching_catch_3(0|0)|0;
      $94 = tempRet0;
      $eh$lpad$body$i$indexZ2D = $93;
      break;
     }
     __THREW__ = 0;
     invoke_vi(653,($79|0));
     $91 = __THREW__; __THREW__ = 0;
     $92 = $91&1;
     if ($92) {
      break L62;
     }
     $$pre = ((($0)) + 4|0);
     $$0 = $eh$lpad$body$index4Z2D;$$02 = $eh$lpad$body$indexZ2D;$$pre$phiZ2D = $$pre;
     label = 54;
     break L62;
    }
   } while(0);
   __THREW__ = 0;
   invoke_vi(653,($79|0));
   $95 = __THREW__; __THREW__ = 0;
   $96 = $95&1;
   if ($96) {
    $97 = ___cxa_find_matching_catch_3(0|0)|0;
    $98 = tempRet0;
    ___clang_call_terminate($97);
    // unreachable;
   } else {
    $eh$lpad$body9$indexZ2D = $eh$lpad$body$i$indexZ2D;
    ___clang_call_terminate($eh$lpad$body9$indexZ2D);
    // unreachable;
   }
  }
 } while(0);
 L76: do {
  if ((label|0) == 54) {
   HEAP32[$0>>2] = ((7784));
   $162 = ((($0)) + 104|0);
   HEAP32[$162>>2] = ((7804));
   __THREW__ = 0;
   invoke_vi(176,($$pre$phiZ2D|0));
   $163 = __THREW__; __THREW__ = 0;
   $164 = $163&1;
   do {
    if ($164) {
     $167 = ___cxa_find_matching_catch_3(0|0)|0;
     $168 = tempRet0;
     __THREW__ = 0;
     invoke_vii(652,($0|0),((7816)|0));
     $169 = __THREW__; __THREW__ = 0;
     $170 = $169&1;
     if ($170) {
      $171 = ___cxa_find_matching_catch_3(0|0)|0;
      $172 = tempRet0;
      ___clang_call_terminate($171);
      // unreachable;
     } else {
      $eh$lpad$body$i23$indexZ2D = $167;
     }
    } else {
     __THREW__ = 0;
     invoke_vii(652,($0|0),((7816)|0));
     $165 = __THREW__; __THREW__ = 0;
     $166 = $165&1;
     if ($166) {
      $175 = ___cxa_find_matching_catch_3(0|0)|0;
      $176 = tempRet0;
      $eh$lpad$body$i23$indexZ2D = $175;
      break;
     }
     __THREW__ = 0;
     invoke_vi(653,($162|0));
     $173 = __THREW__; __THREW__ = 0;
     $174 = $173&1;
     if ($174) {
      break L76;
     }
     ___resumeException($$02|0);
     // unreachable;
    }
   } while(0);
   __THREW__ = 0;
   invoke_vi(653,($162|0));
   $177 = __THREW__; __THREW__ = 0;
   $178 = $177&1;
   if ($178) {
    $179 = ___cxa_find_matching_catch_3(0|0)|0;
    $180 = tempRet0;
    ___clang_call_terminate($179);
    // unreachable;
   } else {
    $eh$lpad$body9$indexZ2D = $eh$lpad$body$i23$indexZ2D;
    ___clang_call_terminate($eh$lpad$body9$indexZ2D);
    // unreachable;
   }
  }
 } while(0);
 $181 = ___cxa_find_matching_catch_3(0|0)|0;
 $182 = tempRet0;
 $eh$lpad$body9$indexZ2D = $181;
 ___clang_call_terminate($eh$lpad$body9$indexZ2D);
 // unreachable;
}
function __ZN10SourceFile7ProcessEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 __ZN10SourceCode7ProcessEv($0);
 $2 = HEAP32[9088]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  ___assert_fail((27040|0),(27060|0),38,(27075|0));
  // unreachable;
 }
 $4 = HEAP32[$2>>2]|0;
 $5 = ($4|0)==(1);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = ((($2)) + 8|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(40008,24710,16)|0);
 $10 = ((($0)) + 24604|0);
 $11 = ((($10)) + 11|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)<(0);
 $14 = HEAP32[$10>>2]|0;
 $15 = $13 ? $14 : $10;
 $16 = ((($0)) + 24608|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $12&255;
 $19 = $13 ? $17 : $18;
 $20 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($9,$15,$19)|0);
 $21 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($20,24727,4)|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + -12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($21) + ($24)|0);
 $26 = (__ZNKSt3__28ios_base6getlocEv($25)|0);
 HEAP32[$1>>2] = $26;
 __THREW__ = 0;
 $27 = (invoke_iii(659,($1|0),(40712|0))|0);
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if (!($29)) {
  $30 = HEAP32[$27>>2]|0;
  $31 = ((($30)) + 28|0);
  $32 = HEAP32[$31>>2]|0;
  __THREW__ = 0;
  $33 = (invoke_iii($32|0,($27|0),10)|0);
  $34 = __THREW__; __THREW__ = 0;
  $35 = $34&1;
  if (!($35)) {
   __ZNSt3__26localeD2Ev($1);
   (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($21,$33)|0);
   (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($21)|0);
   STACKTOP = sp;return;
  }
 }
 $36 = ___cxa_find_matching_catch_2()|0;
 $37 = tempRet0;
 __THREW__ = 0;
 invoke_vi(660,($1|0));
 $38 = __THREW__; __THREW__ = 0;
 $39 = $38&1;
 if ($39) {
  $40 = ___cxa_find_matching_catch_3(0|0)|0;
  $41 = tempRet0;
  ___clang_call_terminate($40);
  // unreachable;
 } else {
  ___resumeException($36|0);
  // unreachable;
 }
}
function __ZN10SourceFile7GetLineERNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ((($0)) + 24624|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + -12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($3) + ($6)|0);
 $8 = (__ZNKSt3__28ios_base6getlocEv($7)|0);
 HEAP32[$2>>2] = $8;
 __THREW__ = 0;
 $9 = (invoke_iii(659,($2|0),(40712|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if (!($11)) {
  $12 = HEAP32[$9>>2]|0;
  $13 = ((($12)) + 28|0);
  $14 = HEAP32[$13>>2]|0;
  __THREW__ = 0;
  $15 = (invoke_iii($14|0,($9|0),10)|0);
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if (!($17)) {
   __ZNSt3__26localeD2Ev($2);
   $24 = (__ZNSt3__27getlineIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EES6_($3,$1,$15)|0);
   STACKTOP = sp;return ($24|0);
  }
 }
 $18 = ___cxa_find_matching_catch_2()|0;
 $19 = tempRet0;
 __THREW__ = 0;
 invoke_vi(660,($2|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch_3(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  ___resumeException($18|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN10SourceFile14GetFilePointerEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 24624|0);
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE5tellgEv($1,$2);
 $3 = ((($1)) + 8|0);
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZN10SourceFile14SetFilePointerEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 16|0;
 $2 = sp;
 $3 = ((($0)) + 24620|0);
 HEAP32[$3>>2] = $1;
 $4 = ((($0)) + 24624|0);
 $5 = ($1|0)<(0);
 $6 = $5 << 31 >> 31;
 $7 = $2;
 $8 = $7;
 HEAP32[$8>>2] = 0;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = ((($2)) + 8|0);
 $12 = $11;
 $13 = $12;
 HEAP32[$13>>2] = $1;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $6;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$2+12>>2]|0;
 (__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE5seekgENS_4fposI11__mbstate_tEE($4,$$byval_copy)|0);
 STACKTOP = sp;return;
}
function __ZN10SourceFile7IsAtEndEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 24624|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 2;
 $9 = ($8|0)!=(0);
 return ($9|0);
}
function __ZN10SourceFileD2Ev($0) {
 $0 = $0|0;
 var $$0 = 0, $$02 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $eh$lpad$body$i7$indexZ2D = 0, $eh$lpad$body$index7Z2D = 0, $eh$lpad$body$indexZ2D = 0, $eh$lpad$body11$indexZ2D = 0, $eh$lpad$body5$index17Z2D = 0;
 var $eh$lpad$body5$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (8188);
 $1 = ((($0)) + 24624|0);
 $2 = ((($0)) + 24632|0);
 $3 = ((($0)) + 24696|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 do {
  if ($5) {
   label = 6;
  } else {
   $6 = HEAP32[$2>>2]|0;
   $7 = ((($6)) + 24|0);
   $8 = HEAP32[$7>>2]|0;
   __THREW__ = 0;
   $9 = (invoke_ii($8|0,($2|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    $14 = ___cxa_find_matching_catch_2()|0;
    $15 = tempRet0;
    (_fclose($4)|0);
    $eh$lpad$body$index7Z2D = $15;$eh$lpad$body$indexZ2D = $14;
    label = 17;
    break;
   }
   $12 = (_fclose($4)|0);
   $13 = ($12|0)==(0);
   if ($13) {
    $16 = ($9|0)==(0);
    HEAP32[$3>>2] = 0;
    if ($16) {
     label = 7;
    } else {
     label = 6;
    }
   } else {
    label = 6;
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $17 = HEAP32[$1>>2]|0;
  $18 = ((($17)) + -12|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($1) + ($19)|0);
  $21 = ((($20)) + 16|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 | 4;
  __THREW__ = 0;
  invoke_vii(662,($20|0),($23|0));
  $24 = __THREW__; __THREW__ = 0;
  $25 = $24&1;
  if ($25) {
   $45 = ___cxa_find_matching_catch_2()|0;
   $46 = tempRet0;
   $eh$lpad$body$index7Z2D = $46;$eh$lpad$body$indexZ2D = $45;
   label = 17;
  } else {
   label = 7;
  }
 }
 L10: do {
  if ((label|0) == 7) {
   HEAP32[$1>>2] = ((7880));
   $26 = ((($0)) + 24732|0);
   HEAP32[$26>>2] = ((7900));
   __THREW__ = 0;
   invoke_vi(176,($2|0));
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   do {
    if ($28) {
     $31 = ___cxa_find_matching_catch_2()|0;
     $32 = tempRet0;
     __THREW__ = 0;
     invoke_vii(671,($1|0),((7912)|0));
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if ($34) {
      $35 = ___cxa_find_matching_catch_3(0|0)|0;
      $36 = tempRet0;
      ___clang_call_terminate($35);
      // unreachable;
     } else {
      $eh$lpad$body$i$index2Z2D = $32;$eh$lpad$body$i$indexZ2D = $31;
      label = 13;
     }
    } else {
     __THREW__ = 0;
     invoke_vii(671,($1|0),((7912)|0));
     $29 = __THREW__; __THREW__ = 0;
     $30 = $29&1;
     if ($30) {
      $39 = ___cxa_find_matching_catch_2()|0;
      $40 = tempRet0;
      $eh$lpad$body$i$index2Z2D = $40;$eh$lpad$body$i$indexZ2D = $39;
      label = 13;
      break;
     }
     __THREW__ = 0;
     invoke_vi(653,($26|0));
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     if ($38) {
      $66 = ___cxa_find_matching_catch_2()|0;
      $67 = tempRet0;
      $eh$lpad$body5$index17Z2D = $67;$eh$lpad$body5$indexZ2D = $66;
      break;
     } else {
      __ZN10SourceCodeD2Ev($0);
      return;
     }
    }
   } while(0);
   if ((label|0) == 13) {
    __THREW__ = 0;
    invoke_vi(653,($26|0));
    $41 = __THREW__; __THREW__ = 0;
    $42 = $41&1;
    if ($42) {
     $43 = ___cxa_find_matching_catch_3(0|0)|0;
     $44 = tempRet0;
     ___clang_call_terminate($43);
     // unreachable;
    } else {
     $eh$lpad$body5$index17Z2D = $eh$lpad$body$i$index2Z2D;$eh$lpad$body5$indexZ2D = $eh$lpad$body$i$indexZ2D;
    }
   }
   $$0 = $eh$lpad$body5$index17Z2D;$$02 = $eh$lpad$body5$indexZ2D;
   label = 27;
  }
  else if ((label|0) == 17) {
   HEAP32[$1>>2] = ((7880));
   $47 = ((($0)) + 24732|0);
   HEAP32[$47>>2] = ((7900));
   __THREW__ = 0;
   invoke_vi(176,($2|0));
   $48 = __THREW__; __THREW__ = 0;
   $49 = $48&1;
   do {
    if ($49) {
     $52 = ___cxa_find_matching_catch_3(0|0)|0;
     $53 = tempRet0;
     __THREW__ = 0;
     invoke_vii(671,($1|0),((7912)|0));
     $54 = __THREW__; __THREW__ = 0;
     $55 = $54&1;
     if ($55) {
      $56 = ___cxa_find_matching_catch_3(0|0)|0;
      $57 = tempRet0;
      ___clang_call_terminate($56);
      // unreachable;
     } else {
      $eh$lpad$body$i7$indexZ2D = $52;
     }
    } else {
     __THREW__ = 0;
     invoke_vii(671,($1|0),((7912)|0));
     $50 = __THREW__; __THREW__ = 0;
     $51 = $50&1;
     if ($51) {
      $60 = ___cxa_find_matching_catch_3(0|0)|0;
      $61 = tempRet0;
      $eh$lpad$body$i7$indexZ2D = $60;
      break;
     } else {
      __THREW__ = 0;
      invoke_vi(653,($47|0));
      $58 = __THREW__; __THREW__ = 0;
      $59 = $58&1;
      if ($59) {
       break L10;
      } else {
       $$0 = $eh$lpad$body$index7Z2D;$$02 = $eh$lpad$body$indexZ2D;
       label = 27;
       break L10;
      }
     }
    }
   } while(0);
   __THREW__ = 0;
   invoke_vi(653,($47|0));
   $62 = __THREW__; __THREW__ = 0;
   $63 = $62&1;
   if ($63) {
    $64 = ___cxa_find_matching_catch_3(0|0)|0;
    $65 = tempRet0;
    ___clang_call_terminate($64);
    // unreachable;
   } else {
    $eh$lpad$body11$indexZ2D = $eh$lpad$body$i7$indexZ2D;
    ___clang_call_terminate($eh$lpad$body11$indexZ2D);
    // unreachable;
   }
  }
 } while(0);
 if ((label|0) == 27) {
  __THREW__ = 0;
  invoke_vi(705,($0|0));
  $68 = __THREW__; __THREW__ = 0;
  $69 = $68&1;
  if (!($69)) {
   ___resumeException($$02|0);
   // unreachable;
  }
 }
 $70 = ___cxa_find_matching_catch_3(0|0)|0;
 $71 = tempRet0;
 $eh$lpad$body11$indexZ2D = $70;
 ___clang_call_terminate($eh$lpad$body11$indexZ2D);
 // unreachable;
}
function __ZN10SourceFileD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi(199,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  __ZdlPv($0);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZNSt3__27getlineIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EES6_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$2 = 0, $$0$i37 = 0, $$033 = 0, $$1 = 0, $$134$ph = 0, $$2$ph = 0, $$pre = 0, $$pre$phi49Z2D = 0, $$pre$phi51Z2D = 0, $$pre$phiZ2D = 0, $$sink$index = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 __THREW__ = 0;
 invoke_viii(706,($3|0),($0|0),1);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 L1: do {
  if ($5) {
   $34 = ___cxa_find_matching_catch_3(0|0)|0;
   $35 = tempRet0;
   $$1 = $34;$$pre$phi49Z2D = $0;$$pre$phi51Z2D = $0;
  } else {
   $6 = HEAP8[$3>>0]|0;
   $7 = ($6<<24>>24)==(0);
   do {
    if (!($7)) {
     $8 = ((($1)) + 11|0);
     $9 = HEAP8[$8>>0]|0;
     $10 = ($9<<24>>24)<(0);
     if ($10) {
      $11 = HEAP32[$1>>2]|0;
      HEAP8[$11>>0] = 0;
      $12 = ((($1)) + 4|0);
      HEAP32[$12>>2] = 0;
      $$pre$phiZ2D = $12;
     } else {
      HEAP8[$1>>0] = 0;
      HEAP8[$8>>0] = 0;
      $$pre = ((($1)) + 4|0);
      $$pre$phiZ2D = $$pre;
     }
     $$033 = 0;
     while(1) {
      $13 = HEAP32[$0>>2]|0;
      $14 = ((($13)) + -12|0);
      $15 = HEAP32[$14>>2]|0;
      $16 = (($0) + ($15)|0);
      $17 = ((($16)) + 24|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = ((($18)) + 12|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = ((($18)) + 16|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = ($20|0)==($22|0);
      if ($23) {
       $24 = HEAP32[$18>>2]|0;
       $25 = ((($24)) + 40|0);
       $26 = HEAP32[$25>>2]|0;
       __THREW__ = 0;
       $27 = (invoke_ii($26|0,($18|0))|0);
       $28 = __THREW__; __THREW__ = 0;
       $29 = $28&1;
       if ($29) {
        label = 12;
        break;
       }
       $33 = ($27|0)==(-1);
       if ($33) {
        $$134$ph = $$033;$$2$ph = 2;
        label = 18;
        break;
       } else {
        $$0$i37 = $27;
       }
      } else {
       $30 = ((($20)) + 1|0);
       HEAP32[$19>>2] = $30;
       $31 = HEAP8[$20>>0]|0;
       $32 = $31&255;
       $$0$i37 = $32;
      }
      $40 = (($$033) + 1)|0;
      $41 = $$0$i37&255;
      $42 = ($41<<24>>24)==($2<<24>>24);
      if ($42) {
       $$134$ph = $40;$$2$ph = 0;
       label = 18;
       break;
      }
      __THREW__ = 0;
      invoke_vii(665,($1|0),($41|0));
      $43 = __THREW__; __THREW__ = 0;
      $44 = $43&1;
      if ($44) {
       label = 17;
       break;
      }
      $45 = HEAP8[$8>>0]|0;
      $46 = ($45<<24>>24)<(0);
      $47 = HEAP32[$$pre$phiZ2D>>2]|0;
      $48 = ($47|0)==(-17);
      $or$cond = $46 & $48;
      if ($or$cond) {
       $$134$ph = $40;$$2$ph = 4;
       label = 18;
       break;
      } else {
       $$033 = $40;
      }
     }
     if ((label|0) == 12) {
      $36 = ___cxa_find_matching_catch_3(0|0)|0;
      $37 = tempRet0;
      $$sink$index = $36;
     }
     else if ((label|0) == 17) {
      $49 = ___cxa_find_matching_catch_3(0|0)|0;
      $50 = tempRet0;
      $$sink$index = $49;
     }
     else if ((label|0) == 18) {
      $51 = ($$134$ph|0)==(0);
      $52 = $$2$ph | 4;
      $$$2 = $51 ? $52 : $$2$ph;
      $53 = HEAP32[$0>>2]|0;
      $54 = ((($53)) + -12|0);
      $55 = HEAP32[$54>>2]|0;
      $56 = (($0) + ($55)|0);
      $57 = ((($56)) + 16|0);
      $58 = HEAP32[$57>>2]|0;
      $59 = $58 | $$$2;
      __THREW__ = 0;
      invoke_vii(662,($56|0),($59|0));
      $60 = __THREW__; __THREW__ = 0;
      $61 = $60&1;
      if (!($61)) {
       break;
      }
      $38 = ___cxa_find_matching_catch_3(0|0)|0;
      $39 = tempRet0;
      $$sink$index = $38;
     }
     $$1 = $$sink$index;$$pre$phi49Z2D = $0;$$pre$phi51Z2D = $0;
     break L1;
    }
   } while(0);
   STACKTOP = sp;return ($0|0);
  }
 } while(0);
 (___cxa_begin_catch(($$1|0))|0);
 $62 = HEAP32[$$pre$phi49Z2D>>2]|0;
 $63 = ((($62)) + -12|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (($$pre$phi51Z2D) + ($64)|0);
 __THREW__ = 0;
 invoke_vi(664,($65|0));
 $66 = __THREW__; __THREW__ = 0;
 $67 = $66&1;
 if (!($67)) {
  ___cxa_end_catch();
  STACKTOP = sp;return ($0|0);
 }
 $68 = ___cxa_find_matching_catch_2()|0;
 $69 = tempRet0;
 __THREW__ = 0;
 invoke_v(643);
 $70 = __THREW__; __THREW__ = 0;
 $71 = $70&1;
 if ($71) {
  $72 = ___cxa_find_matching_catch_3(0|0)|0;
  $73 = tempRet0;
  ___clang_call_terminate($72);
  // unreachable;
 } else {
  ___resumeException($68|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN10SourceFileC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$i = 0, $$02$i = 0, $$0617 = 0, $$0816 = 0, $$17 = 0, $$19 = 0, $$2 = 0, $$210 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $eh$lpad$body$i$indexZ2D = 0, $eh$lpad$body15$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 __ZN10SourceCodeC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($0,$1,1);
 HEAP32[$0>>2] = (8188);
 $3 = ((($0)) + 24624|0);
 $4 = ((($0)) + 24732|0);
 $5 = ((($0)) + 24632|0);
 HEAP32[$3>>2] = ((7840));
 HEAP32[$4>>2] = ((7860));
 $6 = ((($0)) + 24628|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 24732|0);
 __THREW__ = 0;
 invoke_vii(649,($7|0),($5|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 L1: do {
  if ($9) {
   $14 = ___cxa_find_matching_catch_2()|0;
   $15 = tempRet0;
   $$0$i = $15;$$02$i = $14;
   label = 5;
  } else {
   $10 = ((($0)) + 24804|0);
   HEAP32[$10>>2] = 0;
   $11 = ((($0)) + 24808|0);
   HEAP32[$11>>2] = -1;
   HEAP32[$3>>2] = (7880);
   HEAP32[$4>>2] = (7900);
   __THREW__ = 0;
   invoke_vi(699,($5|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    $16 = ___cxa_find_matching_catch_2()|0;
    $17 = tempRet0;
    __THREW__ = 0;
    invoke_vii(671,($3|0),((7912)|0));
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if (!($19)) {
     $$0$i = $17;$$02$i = $16;
     label = 5;
     break;
    }
    $22 = ___cxa_find_matching_catch_3(0|0)|0;
    $23 = tempRet0;
    ___clang_call_terminate($22);
    // unreachable;
   }
   $24 = ((($0)) + 24696|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0|0);
   if ($26) {
    $27 = ((($1)) + 11|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = ($28<<24>>24)<(0);
    $30 = HEAP32[$1>>2]|0;
    $31 = $29 ? $30 : $1;
    $32 = (_fopen($31,27658)|0);
    HEAP32[$24>>2] = $32;
    $33 = ($32|0)==(0|0);
    if ($33) {
     label = 10;
    } else {
     $34 = ((($0)) + 24720|0);
     HEAP32[$34>>2] = 12;
     $35 = HEAP32[$3>>2]|0;
     $36 = ((($35)) + -12|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = (($3) + ($37)|0);
     __THREW__ = 0;
     invoke_vii(662,($38|0),0);
     $39 = __THREW__; __THREW__ = 0;
     $40 = $39&1;
     if ($40) {
      label = 15;
     } else {
      $51 = $3;$55 = $3;
      label = 11;
     }
    }
   } else {
    label = 10;
   }
   if ((label|0) == 10) {
    $41 = HEAP32[$3>>2]|0;
    $42 = ((($41)) + -12|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (($3) + ($43)|0);
    $45 = ((($44)) + 16|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = $46 | 4;
    __THREW__ = 0;
    invoke_vii(662,($44|0),($47|0));
    $48 = __THREW__; __THREW__ = 0;
    $49 = $48&1;
    if ($49) {
     label = 15;
    } else {
     $51 = $3;$55 = $3;
     label = 11;
    }
   }
   do {
    if ((label|0) == 11) {
     $50 = HEAP32[$51>>2]|0;
     $52 = ((($50)) + -12|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = (($55) + ($53)|0);
     $56 = ((($54)) + 16|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = $57 & 5;
     $59 = ($58|0)==(0);
     if ($59) {
      STACKTOP = sp;return;
     }
     $60 = (___cxa_allocate_exception(16)|0);
     __THREW__ = 0;
     invoke_vii(635,($2|0),($1|0));
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      $69 = ___cxa_find_matching_catch_2()|0;
      $70 = tempRet0;
      $$0617 = $70;$$0816 = $69;
     } else {
      HEAP32[$60>>2] = (4628);
      $63 = ((($60)) + 4|0);
      __THREW__ = 0;
      invoke_vii(635,($63|0),($2|0));
      $64 = __THREW__; __THREW__ = 0;
      $65 = $64&1;
      if ($65) {
       $$0 = 1;
      } else {
       HEAP32[$60>>2] = (8224);
       __THREW__ = 0;
       invoke_viii(644,($60|0),(952|0),(3|0));
       $66 = __THREW__; __THREW__ = 0;
       $$0 = 0;
      }
      $71 = ___cxa_find_matching_catch_2()|0;
      $72 = tempRet0;
      __THREW__ = 0;
      invoke_vi(637,($2|0));
      $73 = __THREW__; __THREW__ = 0;
      $74 = $73&1;
      if ($74) {
       break L1;
      }
      if ($$0) {
       $$0617 = $72;$$0816 = $71;
      } else {
       $$17 = $72;$$19 = $71;
       break;
      }
     }
     ___cxa_free_exception(($60|0));
     $$17 = $$0617;$$19 = $$0816;
    }
    else if ((label|0) == 15) {
     $67 = ___cxa_find_matching_catch_2()|0;
     $68 = tempRet0;
     $$17 = $68;$$19 = $67;
    }
   } while(0);
   HEAP32[$3>>2] = ((7880));
   HEAP32[$4>>2] = ((7900));
   __THREW__ = 0;
   invoke_vi(176,($5|0));
   $75 = __THREW__; __THREW__ = 0;
   $76 = $75&1;
   do {
    if ($76) {
     $79 = ___cxa_find_matching_catch_3(0|0)|0;
     $80 = tempRet0;
     __THREW__ = 0;
     invoke_vii(671,($3|0),((7912)|0));
     $81 = __THREW__; __THREW__ = 0;
     $82 = $81&1;
     if ($82) {
      $83 = ___cxa_find_matching_catch_3(0|0)|0;
      $84 = tempRet0;
      ___clang_call_terminate($83);
      // unreachable;
     } else {
      $eh$lpad$body$i$indexZ2D = $79;
     }
    } else {
     __THREW__ = 0;
     invoke_vii(671,($3|0),((7912)|0));
     $77 = __THREW__; __THREW__ = 0;
     $78 = $77&1;
     if ($78) {
      $87 = ___cxa_find_matching_catch_3(0|0)|0;
      $88 = tempRet0;
      $eh$lpad$body$i$indexZ2D = $87;
      break;
     } else {
      __THREW__ = 0;
      invoke_vi(653,($4|0));
      $85 = __THREW__; __THREW__ = 0;
      $86 = $85&1;
      if ($86) {
       break L1;
      } else {
       $$2 = $$17;$$210 = $$19;
       label = 29;
       break L1;
      }
     }
    }
   } while(0);
   __THREW__ = 0;
   invoke_vi(653,($4|0));
   $89 = __THREW__; __THREW__ = 0;
   $90 = $89&1;
   if ($90) {
    $91 = ___cxa_find_matching_catch_3(0|0)|0;
    $92 = tempRet0;
    ___clang_call_terminate($91);
    // unreachable;
   } else {
    $eh$lpad$body15$indexZ2D = $eh$lpad$body$i$indexZ2D;
    ___clang_call_terminate($eh$lpad$body15$indexZ2D);
    // unreachable;
   }
  }
 } while(0);
 if ((label|0) == 5) {
  __THREW__ = 0;
  invoke_vi(653,($4|0));
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if ($21) {
   $22 = ___cxa_find_matching_catch_3(0|0)|0;
   $23 = tempRet0;
   ___clang_call_terminate($22);
   // unreachable;
  } else {
   $$2 = $$0$i;$$210 = $$02$i;
   label = 29;
  }
 }
 if ((label|0) == 29) {
  __THREW__ = 0;
  invoke_vi(705,($0|0));
  $93 = __THREW__; __THREW__ = 0;
  $94 = $93&1;
  if (!($94)) {
   ___resumeException($$210|0);
   // unreachable;
  }
 }
 $95 = ___cxa_find_matching_catch_3(0|0)|0;
 $96 = tempRet0;
 $eh$lpad$body15$indexZ2D = $95;
 ___clang_call_terminate($eh$lpad$body15$indexZ2D);
 // unreachable;
}
function __ZN37AsmException_FileError_OpenSourceFileD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4628);
 $1 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  __ZdlPv($0);
  ___resumeException($4|0);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZNK37AsmException_FileError_OpenSourceFile7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (24785|0);
}
function __ZN11StringUtils18ExpandTabsToSpacesERNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcj($0,9,0)|0);
 $3 = ($2|0)==(-1);
 if (!($3)) {
  $6 = $2;
  while(1) {
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEjjPKc($0,$6,1,28271)|0);
   $7 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcj($0,9,0)|0);
   $8 = ($7|0)==(-1);
   if ($8) {
    break;
   } else {
    $6 = $7;
   }
  }
 }
 $4 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcj($0,13,0)|0);
 $5 = ($4|0)==(-1);
 if ($5) {
  return;
 } else {
  $9 = $4;
 }
 while(1) {
  (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEjjPKc($0,$9,1,44984)|0);
  $10 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcj($0,13,0)|0);
  $11 = ($10|0)==(-1);
  if ($11) {
   break;
  } else {
   $9 = $10;
  }
 }
 return;
}
function __ZN11StringUtils13EatWhitespaceERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $$02127$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 $6 = HEAP32[$0>>2]|0;
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $4&255;
 $10 = $5 ? $6 : $0;
 $11 = $5 ? $8 : $9;
 $12 = ($11>>>0)>($2>>>0);
 L1: do {
  if ($12) {
   $13 = (($10) + ($11)|0);
   $14 = (($10) + ($2)|0);
   $$02127$i$i = $14;
   while(1) {
    $15 = HEAP8[$$02127$i$i>>0]|0;
    $16 = $15&255;
    $17 = (_memchr(24825,$16,4)|0);
    $18 = ($17|0)==(0|0);
    if ($18) {
     break;
    }
    $19 = ((($$02127$i$i)) + 1|0);
    $20 = ($19|0)==($13|0);
    if ($20) {
     break L1;
    } else {
     $$02127$i$i = $19;
    }
   }
   $21 = $$02127$i$i;
   $22 = $10;
   $23 = (($21) - ($22))|0;
   $24 = ($23|0)==(-1);
   if (!($24)) {
    $$0 = 1;$storemerge = $23;
    HEAP32[$1>>2] = $storemerge;
    return ($$0|0);
   }
  }
 } while(0);
 $$ = $5 ? $8 : $9;
 $$0 = 0;$storemerge = $$;
 HEAP32[$1>>2] = $storemerge;
 return ($$0|0);
}
function __ZN10LineParserC2EP10SourceCodeNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 $3 = ((($0)) + 4|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3,$2);
 $4 = ((($0)) + 16|0);
 HEAP32[$4>>2] = 0;
 return;
}
function __ZN10LineParserD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
 return;
}
function __ZN10LineParser7ProcessEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i = 0, $$0$i198 = 0, $$03$i = 0, $$03$i197 = 0, $$063 = 0, $$065 = 0, $$067$off0209 = 0, $$070448 = 0, $$071 = 0, $$074 = 0, $$074$lpad$bodyZZ2D = 0, $$076 = 0, $$076$lpad$bodyZZ2D = 0, $$078 = 0, $$097 = 0, $$099 = 0, $$10 = 0, $$1088 = 0, $$11 = 0;
 var $$1189 = 0, $$13228 = 0, $$1391227 = 0, $$14 = 0, $$1492 = 0, $$16 = 0, $$1694 = 0, $$172213 = 0, $$17231 = 0, $$179212 = 0, $$1795230 = 0, $$18 = 0, $$1896 = 0, $$273216 = 0, $$280215 = 0, $$3219 = 0, $$381218 = 0, $$4222 = 0, $$482221 = 0, $$6 = 0;
 var $$684 = 0, $$7 = 0, $$785 = 0, $$9225 = 0, $$987224 = 0, $$in = 0, $$phi$trans$insert$i$i = 0, $$phi$trans$insert$i$i117 = 0, $$phi$trans$insert$i$i157 = 0, $$phi$trans$insert16$i$i = 0, $$phi$trans$insert16$i$i121 = 0, $$phi$trans$insert16$i$i161 = 0, $$pre$i$i = 0, $$pre$i$i118 = 0, $$pre$i$i158 = 0, $$pre15$i$i = 0, $$pre15$i$i120 = 0, $$pre15$i$i160 = 0, $$pre17$i$i = 0, $$pre17$i$i122 = 0;
 var $$pre17$i$i162 = 0, $$sink$index = 0, $$sink$index29 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0.0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $eh$lpad$body$index41Z2D = 0, $eh$lpad$body$indexZ2D = 0, $eh$lpad$body111$indexZ2D = 0, $eh$lpad$body132$index7Z2D = 0, $eh$lpad$body132$indexZ2D = 0, $eh$lpad$body140$index12Z2D = 0, $eh$lpad$body140$indexZ2D = 0, $eh$lpad$body170$index23Z2D = 0, $eh$lpad$body170$indexZ2D = 0, $eh$lpad$body206$index35Z2D = 0, $eh$lpad$body206$indexZ2D = 0, $isdigit = 0;
 var $isdigittmp = 0, $lpad$phi$index = 0, $lpad$phi$index17 = 0, $lpad$phi249$index = 0, $lpad$phi249$index2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24960|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(24960|0);
 $1 = sp + 24952|0;
 $2 = sp + 24948|0;
 $3 = sp + 24936|0;
 $4 = sp + 24924|0;
 $5 = sp + 24912|0;
 $6 = sp + 24900|0;
 $7 = sp + 24888|0;
 $8 = sp + 24876|0;
 $9 = sp + 24864|0;
 $10 = sp + 24852|0;
 $11 = sp + 24840|0;
 $12 = sp + 24828|0;
 $13 = sp + 24816|0;
 $14 = sp + 24804|0;
 $15 = sp + 24792|0;
 $16 = sp + 24780|0;
 $17 = sp;
 $18 = sp + 24768|0;
 $19 = ((($0)) + 4|0);
 $20 = ((($0)) + 16|0);
 $21 = (__ZN11StringUtils13EatWhitespaceERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERj($19,$20)|0);
 if (!($21)) {
  STACKTOP = sp;return;
 }
 $22 = ((($19)) + 11|0);
 $23 = ((($6)) + 11|0);
 $24 = ((($6)) + 4|0);
 $25 = ((($7)) + 11|0);
 $26 = ((($7)) + 4|0);
 $27 = ((($0)) + 8|0);
 $28 = ((($12)) + 11|0);
 $29 = ((($12)) + 4|0);
 $30 = ((($17)) + 24624|0);
 $31 = ((($14)) + 11|0);
 $32 = ((($14)) + 4|0);
 L4: while(1) {
  $33 = HEAP32[$20>>2]|0;
  $34 = HEAP8[$22>>0]|0;
  $35 = ($34<<24>>24)<(0);
  if ($35) {
   $36 = HEAP32[$19>>2]|0;
   $38 = $36;
  } else {
   $38 = $19;
  }
  $37 = (($38) + ($33)|0);
  $39 = HEAP8[$37>>0]|0;
  $40 = $39 << 24 >> 24;
  $41 = (_isalpha($40)|0);
  $42 = ($41|0)==(0);
  if ($42) {
   if ($35) {
    $43 = HEAP32[$19>>2]|0;
    $45 = $43;
   } else {
    $45 = $19;
   }
   $44 = (($45) + ($33)|0);
   $46 = HEAP8[$44>>0]|0;
   $47 = ($46<<24>>24)==(95);
   if ($47) {
    label = 9;
   } else {
    label = 33;
   }
  } else {
   label = 9;
  }
  L14: do {
   if ((label|0) == 9) {
    label = 0;
    $48 = $34&255;
    $50 = $33;
    while(1) {
     $49 = (($50) + 1)|0;
     HEAP32[$20>>2] = $49;
     if ($35) {
      $51 = HEAP32[$27>>2]|0;
      $53 = $51;
     } else {
      $53 = $48;
     }
     $52 = ($49>>>0)<($53>>>0);
     if (!($52)) {
      break;
     }
     if ($35) {
      $54 = HEAP32[$19>>2]|0;
      $56 = $54;
     } else {
      $56 = $19;
     }
     $55 = (($56) + ($49)|0);
     $57 = HEAP8[$55>>0]|0;
     $58 = $57 << 24 >> 24;
     $59 = (_isalpha($58)|0);
     $60 = ($59|0)==(0);
     if ($60) {
      if ($35) {
       $61 = HEAP32[$19>>2]|0;
       $63 = $61;
      } else {
       $63 = $19;
      }
      $62 = (($63) + ($49)|0);
      $64 = HEAP8[$62>>0]|0;
      $65 = $64 << 24 >> 24;
      $isdigittmp = (($65) + -48)|0;
      $isdigit = ($isdigittmp>>>0)<(10);
      if (!($isdigit)) {
       if ($35) {
        $66 = HEAP32[$19>>2]|0;
        $68 = $66;
       } else {
        $68 = $19;
       }
       $67 = (($68) + ($49)|0);
       $69 = HEAP8[$67>>0]|0;
       $70 = ($69<<24>>24)==(95);
       if (!($70)) {
        if ($35) {
         $71 = HEAP32[$19>>2]|0;
         $73 = $71;
        } else {
         $73 = $19;
        }
        $72 = (($73) + ($49)|0);
        $74 = HEAP8[$72>>0]|0;
        $75 = ($74<<24>>24)==(37);
        if (!($75)) {
         break;
        }
       }
      }
     }
     if ($35) {
      $76 = HEAP32[$19>>2]|0;
      $78 = $76;
     } else {
      $78 = $19;
     }
     $77 = (($78) + ($50)|0);
     $79 = HEAP8[$77>>0]|0;
     $80 = ($79<<24>>24)==(37);
     if ($80) {
      break;
     } else {
      $50 = $49;
     }
    }
    $81 = (__ZN11StringUtils13EatWhitespaceERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERj($19,$20)|0);
    if ($81) {
     $82 = HEAP32[$20>>2]|0;
     $83 = HEAP8[$22>>0]|0;
     $84 = ($83<<24>>24)<(0);
     if ($84) {
      $$pre15$i$i = HEAP32[$19>>2]|0;
      $$phi$trans$insert16$i$i = (($$pre15$i$i) + ($82)|0);
      $$pre17$i$i = HEAP8[$$phi$trans$insert16$i$i>>0]|0;
      switch ($$pre17$i$i<<24>>24) {
      case 125: case 123: case 92: case 58: case 59:  {
       label = 33;
       break L14;
       break;
      }
      default: {
      }
      }
      $85 = HEAP32[$19>>2]|0;
      $87 = $85;
     } else {
      $$phi$trans$insert$i$i = (($19) + ($82)|0);
      $$pre$i$i = HEAP8[$$phi$trans$insert$i$i>>0]|0;
      switch ($$pre$i$i<<24>>24) {
      case 125: case 123: case 92: case 58: case 59:  {
       label = 33;
       break L14;
       break;
      }
      default: {
       $87 = $19;
      }
      }
     }
     $86 = (($87) + ($82)|0);
     $88 = HEAP8[$86>>0]|0;
     $89 = ($88<<24>>24)==(61);
     HEAP32[$20>>2] = $33;
     if ($89) {
      $$067$off0209 = 1;
      label = 37;
     } else {
      label = 35;
     }
    } else {
     label = 33;
    }
   }
  } while(0);
  if ((label|0) == 33) {
   label = 0;
   HEAP32[$20>>2] = $33;
   label = 35;
  }
  if ((label|0) == 35) {
   label = 0;
   $90 = (__ZN10LineParser24GetTokenAndAdvanceColumnEv($0)|0);
   $91 = ($90|0)==(-1);
   if ($91) {
    $$067$off0209 = 0;
    label = 37;
   } else {
    __ZN10LineParser11HandleTokenEii($0,$90,$33);
   }
  }
  do {
   if ((label|0) == 37) {
    label = 0;
    $92 = HEAP32[$0>>2]|0;
    $93 = (__ZNK10SourceCode17IsIfConditionTrueEv($92)|0);
    if (!($93)) {
     HEAP32[$20>>2] = $33;
     __ZN10LineParser13SkipStatementEv($0);
     break;
    }
    if ($$067$off0209) {
     __ZN10LineParser13GetSymbolNameEv($6,$0);
     $96 = HEAP32[$0>>2]|0;
     __THREW__ = 0;
     invoke_viii(677,($7|0),($96|0),-1);
     $97 = __THREW__; __THREW__ = 0;
     $98 = $97&1;
     if ($98) {
      label = 56;
      break L4;
     }
     ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
     $99 = HEAP8[$23>>0]|0;
     $100 = ($99<<24>>24)<(0);
     $101 = HEAP32[$24>>2]|0;
     $102 = $99&255;
     $103 = $100 ? $101 : $102;
     $104 = HEAP8[$25>>0]|0;
     $105 = ($104<<24>>24)<(0);
     $106 = HEAP32[$26>>2]|0;
     $107 = $104&255;
     $108 = $105 ? $106 : $107;
     $109 = HEAP32[$6>>2]|0;
     $110 = $100 ? $109 : $6;
     $111 = (($108) + ($103))|0;
     __THREW__ = 0;
     invoke_viiii(678,($5|0),($110|0),($103|0),($111|0));
     $112 = __THREW__; __THREW__ = 0;
     $113 = $112&1;
     if ($113) {
      label = 45;
      break L4;
     }
     $114 = HEAP8[$25>>0]|0;
     $115 = ($114<<24>>24)<(0);
     $116 = HEAP32[$7>>2]|0;
     $117 = $115 ? $116 : $7;
     __THREW__ = 0;
     (invoke_iiii(679,($5|0),($117|0),($108|0))|0);
     $118 = __THREW__; __THREW__ = 0;
     $119 = $118&1;
     if ($119) {
      label = 45;
      break L4;
     }
     __THREW__ = 0;
     invoke_vi(637,($7|0));
     $126 = __THREW__; __THREW__ = 0;
     $127 = $126&1;
     if ($127) {
      label = 56;
      break L4;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
     __THREW__ = 0;
     $128 = (invoke_iii(707,($19|0),($20|0))|0);
     $129 = __THREW__; __THREW__ = 0;
     $130 = $129&1;
     if ($130) {
      label = 60;
      break L4;
     }
     if (!($128)) {
      label = 53;
      break L4;
     }
     $131 = HEAP32[$20>>2]|0;
     $132 = HEAP8[$22>>0]|0;
     $133 = ($132<<24>>24)<(0);
     if ($133) {
      $$pre15$i$i120 = HEAP32[$19>>2]|0;
      $$phi$trans$insert16$i$i121 = (($$pre15$i$i120) + ($131)|0);
      $$pre17$i$i122 = HEAP8[$$phi$trans$insert16$i$i121>>0]|0;
      switch ($$pre17$i$i122<<24>>24) {
      case 125: case 123: case 92: case 58: case 59:  {
       label = 53;
       break L4;
       break;
      }
      default: {
      }
      }
      $154 = HEAP32[$19>>2]|0;
      $156 = $154;
     } else {
      $$phi$trans$insert$i$i117 = (($19) + ($131)|0);
      $$pre$i$i118 = HEAP8[$$phi$trans$insert$i$i117>>0]|0;
      switch ($$pre$i$i118<<24>>24) {
      case 125: case 123: case 92: case 58: case 59:  {
       label = 53;
       break L4;
       break;
      }
      default: {
       $156 = $19;
      }
      }
     }
     $155 = (($156) + ($131)|0);
     $157 = HEAP8[$155>>0]|0;
     $158 = ($157<<24>>24)==(61);
     if (!($158)) {
      label = 67;
      break L4;
     }
     $171 = (($131) + 1)|0;
     HEAP32[$20>>2] = $171;
     __THREW__ = 0;
     $172 = (+invoke_dii(709,($0|0),0));
     $173 = __THREW__; __THREW__ = 0;
     $174 = $173&1;
     if ($174) {
      label = 60;
      break L4;
     }
     $175 = HEAP32[9088]|0;
     $176 = ($175|0)==(0|0);
     if ($176) {
      label = 76;
      break L4;
     }
     $178 = HEAP32[$175>>2]|0;
     $179 = ($178|0)==(0);
     if ($179) {
      $180 = HEAP32[9091]|0;
      $181 = ($180|0)==(0|0);
      if ($181) {
       label = 79;
       break L4;
      }
      __THREW__ = 0;
      $183 = (invoke_iii(681,($180|0),($5|0))|0);
      $184 = __THREW__; __THREW__ = 0;
      $185 = $184&1;
      if ($185) {
       label = 93;
       break L4;
      }
      if ($183) {
       label = 82;
       break L4;
      }
      $224 = HEAP32[9091]|0;
      $225 = ($224|0)==(0|0);
      if ($225) {
       label = 102;
       break L4;
      }
      __THREW__ = 0;
      invoke_viidi(710,($224|0),($5|0),(+$172),0);
      $227 = __THREW__; __THREW__ = 0;
      $228 = $227&1;
      if ($228) {
       label = 93;
       break L4;
      }
     }
     $229 = HEAP32[$20>>2]|0;
     $230 = HEAP8[$22>>0]|0;
     $231 = ($230<<24>>24)<(0);
     if ($231) {
      $232 = HEAP32[$27>>2]|0;
      $235 = $232;
     } else {
      $233 = $230&255;
      $235 = $233;
     }
     $234 = ($229>>>0)<($235>>>0);
     if ($234) {
      if ($231) {
       $236 = HEAP32[$19>>2]|0;
       $238 = $236;
      } else {
       $238 = $19;
      }
      $237 = (($238) + ($229)|0);
      $239 = HEAP8[$237>>0]|0;
      $240 = ($239<<24>>24)==(44);
      if ($240) {
       label = 111;
       break L4;
      }
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
     break;
    }
    $94 = (__ZN10LineParser30GetInstructionAndAdvanceColumnEv($0)|0);
    $95 = ($94|0)==(-1);
    if (!($95)) {
     __ZN10LineParser15HandleAssemblerEi($0,$94);
     break;
    }
    $278 = HEAP32[$20>>2]|0;
    $279 = HEAP8[$22>>0]|0;
    $280 = ($279<<24>>24)<(0);
    if ($280) {
     $281 = HEAP32[$19>>2]|0;
     $283 = $281;
    } else {
     $283 = $19;
    }
    $282 = (($283) + ($278)|0);
    $284 = HEAP8[$282>>0]|0;
    $285 = $284 << 24 >> 24;
    $286 = (_isalpha($285)|0);
    $287 = ($286|0)==(0);
    if ($287) {
     if ($280) {
      $288 = HEAP32[$19>>2]|0;
      $290 = $288;
     } else {
      $290 = $19;
     }
     $289 = (($290) + ($278)|0);
     $291 = HEAP8[$289>>0]|0;
     $292 = ($291<<24>>24)==(95);
     if (!($292)) {
      label = 257;
      break L4;
     }
    }
    __ZN10LineParser13GetSymbolNameEv($12,$0);
    $293 = HEAP32[9089]|0;
    $294 = ($293|0)==(0|0);
    if ($294) {
     label = 137;
     break L4;
    }
    __THREW__ = 0;
    $298 = (invoke_iii(711,($293|0),($12|0))|0);
    $299 = __THREW__; __THREW__ = 0;
    $300 = $299&1;
    if ($300) {
     label = 156;
     break L4;
    }
    $301 = ($298|0)==(0|0);
    if ($301) {
     label = 254;
     break L4;
    }
    $302 = HEAP32[9088]|0;
    $303 = ($302|0)==(0|0);
    if ($303) {
     label = 141;
     break L4;
    }
    $307 = HEAP32[$302>>2]|0;
    $308 = ($307|0)==(1);
    if ($308) {
     $309 = ((($302)) + 8|0);
     $310 = HEAP8[$309>>0]|0;
     $311 = ($310<<24>>24)==(0);
     if (!($311)) {
      __THREW__ = 0;
      $312 = (invoke_iiii(655,(39840|0),(24830|0),6)|0);
      $313 = __THREW__; __THREW__ = 0;
      $314 = $313&1;
      if ($314) {
       label = 158;
       break L4;
      }
      $315 = HEAP8[$28>>0]|0;
      $316 = ($315<<24>>24)<(0);
      $317 = HEAP32[$12>>2]|0;
      $318 = $316 ? $317 : $12;
      $319 = HEAP32[$29>>2]|0;
      $320 = $315&255;
      $321 = $316 ? $319 : $320;
      __THREW__ = 0;
      $322 = (invoke_iiii(655,($312|0),($318|0),($321|0))|0);
      $323 = __THREW__; __THREW__ = 0;
      $324 = $323&1;
      if ($324) {
       label = 158;
       break L4;
      }
      __THREW__ = 0;
      $325 = (invoke_iiii(655,($322|0),(26906|0),1)|0);
      $326 = __THREW__; __THREW__ = 0;
      $327 = $326&1;
      if ($327) {
       label = 158;
       break L4;
      }
      $328 = HEAP32[$325>>2]|0;
      $329 = ((($328)) + -12|0);
      $330 = HEAP32[$329>>2]|0;
      $331 = (($325) + ($330)|0);
      __THREW__ = 0;
      $332 = (invoke_ii(658,($331|0))|0);
      $333 = __THREW__; __THREW__ = 0;
      $334 = $333&1;
      if ($334) {
       label = 158;
       break L4;
      }
      HEAP32[$2>>2] = $332;
      __THREW__ = 0;
      $335 = (invoke_iii(659,($2|0),(40712|0))|0);
      $336 = __THREW__; __THREW__ = 0;
      $337 = $336&1;
      if ($337) {
       label = 151;
       break L4;
      }
      $338 = HEAP32[$335>>2]|0;
      $339 = ((($338)) + 28|0);
      $340 = HEAP32[$339>>2]|0;
      __THREW__ = 0;
      $341 = (invoke_iii($340|0,($335|0),10)|0);
      $342 = __THREW__; __THREW__ = 0;
      $343 = $342&1;
      if ($343) {
       label = 151;
       break L4;
      }
      __THREW__ = 0;
      invoke_vi(660,($2|0));
      $344 = __THREW__; __THREW__ = 0;
      $345 = $344&1;
      if ($345) {
       label = 158;
       break L4;
      }
      __THREW__ = 0;
      (invoke_iii(687,($325|0),($341|0))|0);
      $352 = __THREW__; __THREW__ = 0;
      $353 = $352&1;
      if ($353) {
       label = 158;
       break L4;
      }
      __THREW__ = 0;
      (invoke_ii(688,($325|0))|0);
      $354 = __THREW__; __THREW__ = 0;
      $355 = $354&1;
      if ($355) {
       label = 158;
       break L4;
      }
     }
    }
    __THREW__ = 0;
    invoke_vi(250,($0|0));
    $360 = __THREW__; __THREW__ = 0;
    $361 = $360&1;
    if ($361) {
     label = 158;
     break L4;
    }
    $362 = ((($298)) + 28|0);
    $363 = ((($298)) + 32|0);
    $364 = HEAP32[$363>>2]|0;
    $365 = HEAP32[$362>>2]|0;
    $366 = (($364) - ($365))|0;
    $367 = ($366|0)>(0);
    if ($367) {
     $$070448 = 0;$$in = $365;
     while(1) {
      $374 = $$in;
      $375 = (($374) + (($$070448*12)|0)|0);
      $376 = HEAP32[$0>>2]|0;
      __THREW__ = 0;
      invoke_viii(677,($14|0),($376|0),-1);
      $377 = __THREW__; __THREW__ = 0;
      $378 = $377&1;
      if ($378) {
       label = 181;
       break L4;
      }
      ;HEAP32[$13>>2]=0|0;HEAP32[$13+4>>2]=0|0;HEAP32[$13+8>>2]=0|0;
      $379 = ((($375)) + 11|0);
      $380 = HEAP8[$379>>0]|0;
      $381 = ($380<<24>>24)<(0);
      $382 = (((($374) + (($$070448*12)|0)|0)) + 4|0);
      $383 = HEAP32[$382>>2]|0;
      $384 = $380&255;
      $385 = $381 ? $383 : $384;
      $386 = HEAP8[$31>>0]|0;
      $387 = ($386<<24>>24)<(0);
      $388 = HEAP32[$32>>2]|0;
      $389 = $386&255;
      $390 = $387 ? $388 : $389;
      $391 = HEAP32[$375>>2]|0;
      $392 = $381 ? $391 : $375;
      $393 = (($390) + ($385))|0;
      __THREW__ = 0;
      invoke_viiii(678,($13|0),($392|0),($385|0),($393|0));
      $394 = __THREW__; __THREW__ = 0;
      $395 = $394&1;
      if ($395) {
       label = 170;
       break L4;
      }
      $396 = HEAP8[$31>>0]|0;
      $397 = ($396<<24>>24)<(0);
      $398 = HEAP32[$14>>2]|0;
      $399 = $397 ? $398 : $14;
      __THREW__ = 0;
      (invoke_iiii(679,($13|0),($399|0),($390|0))|0);
      $400 = __THREW__; __THREW__ = 0;
      $401 = $400&1;
      if ($401) {
       label = 170;
       break L4;
      }
      __THREW__ = 0;
      invoke_vi(637,($14|0));
      $408 = __THREW__; __THREW__ = 0;
      $409 = $408&1;
      if ($409) {
       label = 181;
       break L4;
      }
      __THREW__ = 0;
      $410 = (+invoke_dii(709,($0|0),0));
      $411 = __THREW__; __THREW__ = 0;
      $412 = $411&1;
      L129: do {
       if ($412) {
        $428 = ___cxa_find_matching_catch_3(368|0)|0;
        $429 = tempRet0;
        $$sink$index = $428;$$sink$index29 = $429;
        label = 186;
       } else {
        $413 = HEAP32[9091]|0;
        $414 = ($413|0)==(0|0);
        do {
         if ($414) {
          __THREW__ = 0;
          invoke_viiii(680,(27040|0),(27806|0),38,(27075|0));
          $415 = __THREW__; __THREW__ = 0;
         } else {
          __THREW__ = 0;
          $416 = (invoke_iii(681,($413|0),($13|0))|0);
          $417 = __THREW__; __THREW__ = 0;
          $418 = $417&1;
          if ($418) {
           break;
          }
          if ($416) {
           break L129;
          }
          $419 = HEAP32[9091]|0;
          $420 = ($419|0)==(0|0);
          if ($420) {
           __THREW__ = 0;
           invoke_viiii(680,(27040|0),(27806|0),38,(27075|0));
           $421 = __THREW__; __THREW__ = 0;
           break;
          } else {
           __THREW__ = 0;
           invoke_viidi(710,($419|0),($13|0),(+$410),0);
           $422 = __THREW__; __THREW__ = 0;
           $423 = $422&1;
           if ($423) {
            break;
           } else {
            break L129;
           }
          }
         }
        } while(0);
        $430 = ___cxa_find_matching_catch_3(368|0)|0;
        $431 = tempRet0;
        $$sink$index = $430;$$sink$index29 = $431;
        label = 186;
       }
      } while(0);
      if ((label|0) == 186) {
       label = 0;
       $432 = (_llvm_eh_typeid_for((368|0))|0);
       $433 = ($$sink$index29|0)==($432|0);
       if (!($433)) {
        $$10 = $$sink$index;$$1088 = $$sink$index29;
        label = 213;
        break L4;
       }
       (___cxa_begin_catch(($$sink$index|0))|0);
       $434 = HEAP32[9088]|0;
       $435 = ($434|0)==(0|0);
       if ($435) {
        label = 188;
        break L4;
       }
       $437 = HEAP32[$434>>2]|0;
       $438 = ($437|0)==(1);
       if ($438) {
        label = 190;
        break L4;
       }
       __THREW__ = 0;
       invoke_v(643);
       $444 = __THREW__; __THREW__ = 0;
       $445 = $444&1;
       if ($445) {
        label = 204;
        break L4;
       }
      }
      $446 = HEAP32[$363>>2]|0;
      $447 = HEAP32[$362>>2]|0;
      $448 = (($446) - ($447))|0;
      $449 = (($448|0) / 12)&-1;
      $450 = (($449) + -1)|0;
      $451 = ($$070448|0)==($450|0);
      if (!($451)) {
       $452 = HEAP32[$20>>2]|0;
       $453 = HEAP8[$22>>0]|0;
       $454 = ($453<<24>>24)<(0);
       if ($454) {
        $455 = HEAP32[$27>>2]|0;
        $458 = $455;
       } else {
        $456 = $453&255;
        $458 = $456;
       }
       $457 = ($452>>>0)<($458>>>0);
       if (!($457)) {
        label = 201;
        break L4;
       }
       if ($454) {
        $459 = HEAP32[$19>>2]|0;
        $461 = $459;
       } else {
        $461 = $19;
       }
       $460 = (($461) + ($452)|0);
       $462 = HEAP8[$460>>0]|0;
       $463 = ($462<<24>>24)==(44);
       if (!($463)) {
        label = 201;
        break L4;
       }
       $479 = (($452) + 1)|0;
       HEAP32[$20>>2] = $479;
      }
      __THREW__ = 0;
      invoke_vi(637,($13|0));
      $480 = __THREW__; __THREW__ = 0;
      $481 = $480&1;
      if ($481) {
       label = 212;
       break L4;
      }
      $482 = (($$070448) + 1)|0;
      $483 = HEAP32[$363>>2]|0;
      $484 = HEAP32[$362>>2]|0;
      $485 = (($483) - ($484))|0;
      $486 = (($485|0) / 12)&-1;
      $487 = ($482|0)<($486|0);
      if ($487) {
       $$070448 = $482;$$in = $484;
      } else {
       break;
      }
     }
    }
    __THREW__ = 0;
    $368 = (invoke_iii(707,($19|0),($20|0))|0);
    $369 = __THREW__; __THREW__ = 0;
    $370 = $369&1;
    if ($370) {
     label = 158;
     break L4;
    }
    L162: do {
     if ($368) {
      $371 = HEAP32[$20>>2]|0;
      $372 = HEAP8[$22>>0]|0;
      $373 = ($372<<24>>24)<(0);
      if ($373) {
       $$pre15$i$i160 = HEAP32[$19>>2]|0;
       $$phi$trans$insert16$i$i161 = (($$pre15$i$i160) + ($371)|0);
       $$pre17$i$i162 = HEAP8[$$phi$trans$insert16$i$i161>>0]|0;
       switch ($$pre17$i$i162<<24>>24) {
       case 125: case 123: case 92: case 58: case 59:  {
        break L162;
        break;
       }
       default: {
        label = 215;
        break L4;
       }
       }
      } else {
       $$phi$trans$insert$i$i157 = (($19) + ($371)|0);
       $$pre$i$i158 = HEAP8[$$phi$trans$insert$i$i157>>0]|0;
       switch ($$pre$i$i158<<24>>24) {
       case 125: case 123: case 92: case 58: case 59:  {
        break L162;
        break;
       }
       default: {
        label = 215;
        break L4;
       }
       }
      }
     }
    } while(0);
    $505 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_viii(712,($17|0),($298|0),($505|0));
    $506 = __THREW__; __THREW__ = 0;
    $507 = $506&1;
    if ($507) {
     label = 158;
     break L4;
    }
    $508 = HEAP32[$17>>2]|0;
    $509 = HEAP32[$508>>2]|0;
    __THREW__ = 0;
    invoke_vi($509|0,($17|0));
    $510 = __THREW__; __THREW__ = 0;
    $511 = $510&1;
    if ($511) {
     label = 240;
     break L4;
    }
    __THREW__ = 0;
    invoke_vi(251,($0|0));
    $512 = __THREW__; __THREW__ = 0;
    $513 = $512&1;
    if ($513) {
     label = 240;
     break L4;
    }
    $514 = HEAP32[9088]|0;
    $515 = ($514|0)==(0|0);
    if ($515) {
     label = 226;
     break L4;
    }
    $519 = HEAP32[$514>>2]|0;
    $520 = ($519|0)==(1);
    do {
     if ($520) {
      $521 = ((($514)) + 8|0);
      $522 = HEAP8[$521>>0]|0;
      $523 = ($522<<24>>24)==(0);
      if ($523) {
       break;
      }
      __THREW__ = 0;
      $524 = (invoke_iiii(655,(39840|0),(24837|0),10)|0);
      $525 = __THREW__; __THREW__ = 0;
      $526 = $525&1;
      if ($526) {
       label = 240;
       break L4;
      }
      $527 = HEAP8[$28>>0]|0;
      $528 = ($527<<24>>24)<(0);
      $529 = HEAP32[$12>>2]|0;
      $530 = $528 ? $529 : $12;
      $531 = HEAP32[$29>>2]|0;
      $532 = $527&255;
      $533 = $528 ? $531 : $532;
      __THREW__ = 0;
      $534 = (invoke_iiii(655,($524|0),($530|0),($533|0))|0);
      $535 = __THREW__; __THREW__ = 0;
      $536 = $535&1;
      if ($536) {
       label = 240;
       break L4;
      }
      $537 = HEAP32[$534>>2]|0;
      $538 = ((($537)) + -12|0);
      $539 = HEAP32[$538>>2]|0;
      $540 = (($534) + ($539)|0);
      __THREW__ = 0;
      $541 = (invoke_ii(658,($540|0))|0);
      $542 = __THREW__; __THREW__ = 0;
      $543 = $542&1;
      if ($543) {
       label = 240;
       break L4;
      }
      HEAP32[$1>>2] = $541;
      __THREW__ = 0;
      $544 = (invoke_iii(659,($1|0),(40712|0))|0);
      $545 = __THREW__; __THREW__ = 0;
      $546 = $545&1;
      if ($546) {
       label = 235;
       break L4;
      }
      $547 = HEAP32[$544>>2]|0;
      $548 = ((($547)) + 28|0);
      $549 = HEAP32[$548>>2]|0;
      __THREW__ = 0;
      $550 = (invoke_iii($549|0,($544|0),10)|0);
      $551 = __THREW__; __THREW__ = 0;
      $552 = $551&1;
      if ($552) {
       label = 235;
       break L4;
      }
      __THREW__ = 0;
      invoke_vi(660,($1|0));
      $553 = __THREW__; __THREW__ = 0;
      $554 = $553&1;
      if ($554) {
       label = 240;
       break L4;
      }
      __THREW__ = 0;
      (invoke_iii(687,($534|0),($550|0))|0);
      $561 = __THREW__; __THREW__ = 0;
      $562 = $561&1;
      if ($562) {
       label = 240;
       break L4;
      }
      __THREW__ = 0;
      (invoke_ii(688,($534|0))|0);
      $563 = __THREW__; __THREW__ = 0;
      $564 = $563&1;
      if ($564) {
       label = 240;
       break L4;
      }
     }
    } while(0);
    HEAP32[$17>>2] = (8296);
    __THREW__ = 0;
    invoke_vi(106,($30|0));
    $577 = __THREW__; __THREW__ = 0;
    $578 = $577&1;
    if ($578) {
     label = 247;
     break L4;
    }
    __THREW__ = 0;
    invoke_vi(705,($17|0));
    $579 = __THREW__; __THREW__ = 0;
    $580 = $579&1;
    if ($580) {
     label = 251;
     break L4;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($12);
   }
  } while(0);
  $587 = (__ZN11StringUtils13EatWhitespaceERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERj($19,$20)|0);
  if (!($587)) {
   label = 265;
   break;
  }
 }
 switch (label|0) {
  case 45: {
   $120 = ___cxa_find_matching_catch_2()|0;
   $121 = tempRet0;
   __THREW__ = 0;
   invoke_vi(637,($5|0));
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if ($123) {
    $124 = ___cxa_find_matching_catch_3(0|0)|0;
    $125 = tempRet0;
    ___clang_call_terminate($124);
    // unreachable;
   } else {
    __THREW__ = 0;
    invoke_vi(637,($7|0));
    $142 = __THREW__; __THREW__ = 0;
    $143 = $142&1;
    if ($143) {
     break;
    } else {
     $$071 = $120;$$078 = $121;
     label = 58;
     break;
    }
   }
   break;
  }
  case 53: {
   $134 = (___cxa_allocate_exception(36)|0);
   __THREW__ = 0;
   invoke_vii(635,($8|0),($19|0));
   $135 = __THREW__; __THREW__ = 0;
   $136 = $135&1;
   if ($136) {
    $148 = ___cxa_find_matching_catch_2()|0;
    $149 = tempRet0;
    $$172213 = $148;$$179212 = $149;
   } else {
    __THREW__ = 0;
    invoke_viii(708,($134|0),($8|0),($33|0));
    $137 = __THREW__; __THREW__ = 0;
    $138 = $137&1;
    if ($138) {
     $$099 = 1;
    } else {
     __THREW__ = 0;
     invoke_viii(644,($134|0),(968|0),(7|0));
     $139 = __THREW__; __THREW__ = 0;
     $$099 = 0;
    }
    $150 = ___cxa_find_matching_catch_2()|0;
    $151 = tempRet0;
    __THREW__ = 0;
    invoke_vi(637,($8|0));
    $152 = __THREW__; __THREW__ = 0;
    $153 = $152&1;
    if ($153) {
     break;
    }
    if ($$099) {
     $$172213 = $150;$$179212 = $151;
    } else {
     $$6 = $150;$$684 = $151;
     label = 128;
     break;
    }
   }
   ___cxa_free_exception(($134|0));
   $$6 = $$172213;$$684 = $$179212;
   label = 128;
   break;
  }
  case 56: {
   $140 = ___cxa_find_matching_catch_2()|0;
   $141 = tempRet0;
   $$071 = $140;$$078 = $141;
   label = 58;
   break;
  }
  case 60: {
   $146 = ___cxa_find_matching_catch_2()|0;
   $147 = tempRet0;
   $$6 = $146;$$684 = $147;
   label = 128;
   break;
  }
  case 67: {
   $159 = (___cxa_allocate_exception(36)|0);
   __THREW__ = 0;
   invoke_vii(635,($9|0),($19|0));
   $160 = __THREW__; __THREW__ = 0;
   $161 = $160&1;
   if ($161) {
    $165 = ___cxa_find_matching_catch_2()|0;
    $166 = tempRet0;
    $$273216 = $165;$$280215 = $166;
   } else {
    __THREW__ = 0;
    invoke_viii(708,($159|0),($9|0),($33|0));
    $162 = __THREW__; __THREW__ = 0;
    $163 = $162&1;
    if ($163) {
     $$097 = 1;
    } else {
     __THREW__ = 0;
     invoke_viii(644,($159|0),(968|0),(7|0));
     $164 = __THREW__; __THREW__ = 0;
     $$097 = 0;
    }
    $167 = ___cxa_find_matching_catch_2()|0;
    $168 = tempRet0;
    __THREW__ = 0;
    invoke_vi(637,($9|0));
    $169 = __THREW__; __THREW__ = 0;
    $170 = $169&1;
    if ($170) {
     break;
    }
    if ($$097) {
     $$273216 = $167;$$280215 = $168;
    } else {
     $$6 = $167;$$684 = $168;
     label = 128;
     break;
    }
   }
   ___cxa_free_exception(($159|0));
   $$6 = $$273216;$$684 = $$280215;
   label = 128;
   break;
  }
  case 76: {
   __THREW__ = 0;
   invoke_viiii(680,(27040|0),(27060|0),38,(27075|0));
   $177 = __THREW__; __THREW__ = 0;
   label = 94;
   break;
  }
  case 79: {
   __THREW__ = 0;
   invoke_viiii(680,(27040|0),(27806|0),38,(27075|0));
   $182 = __THREW__; __THREW__ = 0;
   label = 94;
   break;
  }
  case 82: {
   $186 = (___cxa_allocate_exception(36)|0);
   __THREW__ = 0;
   invoke_vii(635,($10|0),($19|0));
   $187 = __THREW__; __THREW__ = 0;
   $188 = $187&1;
   if ($188) {
    $218 = ___cxa_find_matching_catch_2()|0;
    $219 = tempRet0;
    $$3219 = $218;$$381218 = $219;
   } else {
    __THREW__ = 0;
    invoke_vii(635,($4|0),($10|0));
    $189 = __THREW__; __THREW__ = 0;
    $190 = $189&1;
    L222: do {
     if ($190) {
      $$076 = 1;
      label = 97;
     } else {
      HEAP32[$186>>2] = (4652);
      $191 = ((($186)) + 4|0);
      __THREW__ = 0;
      invoke_vii(635,($191|0),($4|0));
      $192 = __THREW__; __THREW__ = 0;
      $193 = $192&1;
      do {
       if ($193) {
        $198 = ___cxa_find_matching_catch_2()|0;
        $199 = tempRet0;
        $$0$i198 = $199;$$03$i197 = $198;
       } else {
        $194 = ((($186)) + 16|0);
        HEAP32[$194>>2] = $33;
        $195 = ((($186)) + 20|0);
        ;HEAP32[$195>>2]=0|0;HEAP32[$195+4>>2]=0|0;HEAP32[$195+8>>2]=0|0;
        __THREW__ = 0;
        invoke_viii(646,($195|0),(44984|0),0);
        $196 = __THREW__; __THREW__ = 0;
        $197 = $196&1;
        if ($197) {
         $200 = ___cxa_find_matching_catch_2()|0;
         $201 = tempRet0;
         __THREW__ = 0;
         invoke_vi(637,($191|0));
         $202 = __THREW__; __THREW__ = 0;
         $203 = $202&1;
         if (!($203)) {
          $$0$i198 = $201;$$03$i197 = $200;
          break;
         }
         $204 = ___cxa_find_matching_catch_3(0|0)|0;
         $205 = tempRet0;
         ___clang_call_terminate($204);
         // unreachable;
        } else {
         $206 = ((($186)) + 32|0);
         HEAP32[$206>>2] = 0;
         __THREW__ = 0;
         invoke_vi(637,($4|0));
         $207 = __THREW__; __THREW__ = 0;
         $208 = $207&1;
         if ($208) {
          $$076 = 1;
          label = 97;
          break L222;
         }
         HEAP32[$186>>2] = (8248);
         __THREW__ = 0;
         invoke_viii(644,($186|0),(984|0),(7|0));
         $213 = __THREW__; __THREW__ = 0;
         $$076 = 0;
         label = 97;
         break L222;
        }
       }
      } while(0);
      __THREW__ = 0;
      invoke_vi(637,($4|0));
      $209 = __THREW__; __THREW__ = 0;
      $210 = $209&1;
      if ($210) {
       $211 = ___cxa_find_matching_catch_3(0|0)|0;
       $212 = tempRet0;
       ___clang_call_terminate($211);
       // unreachable;
      } else {
       $$076$lpad$bodyZZ2D = 1;$eh$lpad$body132$index7Z2D = $$0$i198;$eh$lpad$body132$indexZ2D = $$03$i197;
      }
     }
    } while(0);
    if ((label|0) == 97) {
     $220 = ___cxa_find_matching_catch_2()|0;
     $221 = tempRet0;
     $$076$lpad$bodyZZ2D = $$076;$eh$lpad$body132$index7Z2D = $221;$eh$lpad$body132$indexZ2D = $220;
    }
    __THREW__ = 0;
    invoke_vi(637,($10|0));
    $222 = __THREW__; __THREW__ = 0;
    $223 = $222&1;
    if ($223) {
     break;
    }
    if ($$076$lpad$bodyZZ2D) {
     $$3219 = $eh$lpad$body132$indexZ2D;$$381218 = $eh$lpad$body132$index7Z2D;
    } else {
     $$6 = $eh$lpad$body132$indexZ2D;$$684 = $eh$lpad$body132$index7Z2D;
     label = 128;
     break;
    }
   }
   ___cxa_free_exception(($186|0));
   $$6 = $$3219;$$684 = $$381218;
   label = 128;
   break;
  }
  case 93: {
   $214 = ___cxa_find_matching_catch_2()|0;
   $215 = tempRet0;
   $lpad$phi249$index = $214;$lpad$phi249$index2 = $215;
   label = 95;
   break;
  }
  case 102: {
   __THREW__ = 0;
   invoke_viiii(680,(27040|0),(27806|0),38,(27075|0));
   $226 = __THREW__; __THREW__ = 0;
   label = 94;
   break;
  }
  case 111: {
   $241 = (___cxa_allocate_exception(36)|0);
   __THREW__ = 0;
   invoke_vii(635,($11|0),($19|0));
   $242 = __THREW__; __THREW__ = 0;
   $243 = $242&1;
   if ($243) {
    $270 = ___cxa_find_matching_catch_2()|0;
    $271 = tempRet0;
    $$4222 = $270;$$482221 = $271;
   } else {
    $244 = HEAP32[$20>>2]|0;
    __THREW__ = 0;
    invoke_vii(635,($3|0),($11|0));
    $245 = __THREW__; __THREW__ = 0;
    $246 = $245&1;
    L192: do {
     if ($246) {
      $$074 = 1;
      label = 123;
     } else {
      HEAP32[$241>>2] = (4652);
      $247 = ((($241)) + 4|0);
      __THREW__ = 0;
      invoke_vii(635,($247|0),($3|0));
      $248 = __THREW__; __THREW__ = 0;
      $249 = $248&1;
      do {
       if ($249) {
        $254 = ___cxa_find_matching_catch_2()|0;
        $255 = tempRet0;
        $$0$i = $255;$$03$i = $254;
       } else {
        $250 = ((($241)) + 16|0);
        HEAP32[$250>>2] = $244;
        $251 = ((($241)) + 20|0);
        ;HEAP32[$251>>2]=0|0;HEAP32[$251+4>>2]=0|0;HEAP32[$251+8>>2]=0|0;
        __THREW__ = 0;
        invoke_viii(646,($251|0),(44984|0),0);
        $252 = __THREW__; __THREW__ = 0;
        $253 = $252&1;
        if ($253) {
         $256 = ___cxa_find_matching_catch_2()|0;
         $257 = tempRet0;
         __THREW__ = 0;
         invoke_vi(637,($247|0));
         $258 = __THREW__; __THREW__ = 0;
         $259 = $258&1;
         if (!($259)) {
          $$0$i = $257;$$03$i = $256;
          break;
         }
         $260 = ___cxa_find_matching_catch_3(0|0)|0;
         $261 = tempRet0;
         ___clang_call_terminate($260);
         // unreachable;
        } else {
         $262 = ((($241)) + 32|0);
         HEAP32[$262>>2] = 0;
         __THREW__ = 0;
         invoke_vi(637,($3|0));
         $263 = __THREW__; __THREW__ = 0;
         $264 = $263&1;
         if ($264) {
          $$074 = 1;
          label = 123;
          break L192;
         }
         HEAP32[$241>>2] = (7452);
         __THREW__ = 0;
         invoke_viii(644,($241|0),(568|0),(7|0));
         $269 = __THREW__; __THREW__ = 0;
         $$074 = 0;
         label = 123;
         break L192;
        }
       }
      } while(0);
      __THREW__ = 0;
      invoke_vi(637,($3|0));
      $265 = __THREW__; __THREW__ = 0;
      $266 = $265&1;
      if ($266) {
       $267 = ___cxa_find_matching_catch_3(0|0)|0;
       $268 = tempRet0;
       ___clang_call_terminate($267);
       // unreachable;
      } else {
       $$074$lpad$bodyZZ2D = 1;$eh$lpad$body140$index12Z2D = $$0$i;$eh$lpad$body140$indexZ2D = $$03$i;
      }
     }
    } while(0);
    if ((label|0) == 123) {
     $272 = ___cxa_find_matching_catch_2()|0;
     $273 = tempRet0;
     $$074$lpad$bodyZZ2D = $$074;$eh$lpad$body140$index12Z2D = $273;$eh$lpad$body140$indexZ2D = $272;
    }
    __THREW__ = 0;
    invoke_vi(637,($11|0));
    $274 = __THREW__; __THREW__ = 0;
    $275 = $274&1;
    if ($275) {
     break;
    }
    if ($$074$lpad$bodyZZ2D) {
     $$4222 = $eh$lpad$body140$indexZ2D;$$482221 = $eh$lpad$body140$index12Z2D;
    } else {
     $$6 = $eh$lpad$body140$indexZ2D;$$684 = $eh$lpad$body140$index12Z2D;
     label = 128;
     break;
    }
   }
   ___cxa_free_exception(($241|0));
   $$6 = $$4222;$$684 = $$482221;
   label = 128;
   break;
  }
  case 137: {
   __THREW__ = 0;
   invoke_viiii(680,(27040|0),(27237|0),128,(27075|0));
   $295 = __THREW__; __THREW__ = 0;
   $296 = ___cxa_find_matching_catch_2()|0;
   $297 = tempRet0;
   $lpad$phi$index = $296;$lpad$phi$index17 = $297;
   label = 157;
   break;
  }
  case 141: {
   __THREW__ = 0;
   invoke_viiii(680,(27040|0),(27060|0),38,(27075|0));
   $304 = __THREW__; __THREW__ = 0;
   $305 = ___cxa_find_matching_catch_2()|0;
   $306 = tempRet0;
   $eh$lpad$body170$index23Z2D = $306;$eh$lpad$body170$indexZ2D = $305;
   label = 159;
   break;
  }
  case 151: {
   $346 = ___cxa_find_matching_catch_2()|0;
   $347 = tempRet0;
   __THREW__ = 0;
   invoke_vi(660,($2|0));
   $348 = __THREW__; __THREW__ = 0;
   $349 = $348&1;
   if ($349) {
    $350 = ___cxa_find_matching_catch_3(0|0)|0;
    $351 = tempRet0;
    ___clang_call_terminate($350);
    // unreachable;
   } else {
    $eh$lpad$body170$index23Z2D = $347;$eh$lpad$body170$indexZ2D = $346;
    label = 159;
    break;
   }
   break;
  }
  case 156: {
   $356 = ___cxa_find_matching_catch_2()|0;
   $357 = tempRet0;
   $lpad$phi$index = $356;$lpad$phi$index17 = $357;
   label = 157;
   break;
  }
  case 158: {
   $358 = ___cxa_find_matching_catch_2()|0;
   $359 = tempRet0;
   $eh$lpad$body170$index23Z2D = $359;$eh$lpad$body170$indexZ2D = $358;
   label = 159;
   break;
  }
  case 170: {
   $402 = ___cxa_find_matching_catch_2()|0;
   $403 = tempRet0;
   __THREW__ = 0;
   invoke_vi(637,($13|0));
   $404 = __THREW__; __THREW__ = 0;
   $405 = $404&1;
   if ($405) {
    $406 = ___cxa_find_matching_catch_3(0|0)|0;
    $407 = tempRet0;
    ___clang_call_terminate($406);
    // unreachable;
   } else {
    __THREW__ = 0;
    invoke_vi(637,($14|0));
    $426 = __THREW__; __THREW__ = 0;
    $427 = $426&1;
    if ($427) {
     break;
    } else {
     $$7 = $402;$$785 = $403;
     label = 183;
     break;
    }
   }
   break;
  }
  case 181: {
   $424 = ___cxa_find_matching_catch_2()|0;
   $425 = tempRet0;
   $$7 = $424;$$785 = $425;
   label = 183;
   break;
  }
  case 188: {
   __THREW__ = 0;
   invoke_viiii(680,(27040|0),(27060|0),38,(27075|0));
   $436 = __THREW__; __THREW__ = 0;
   label = 191;
   break;
  }
  case 190: {
   __THREW__ = 0;
   invoke_v(642);
   $439 = __THREW__; __THREW__ = 0;
   label = 191;
   break;
  }
  case 201: {
   $464 = (___cxa_allocate_exception(36)|0);
   __THREW__ = 0;
   invoke_vii(635,($15|0),($19|0));
   $465 = __THREW__; __THREW__ = 0;
   $466 = $465&1;
   if ($466) {
    $473 = ___cxa_find_matching_catch_2()|0;
    $474 = tempRet0;
    $$9225 = $473;$$987224 = $474;
   } else {
    $467 = HEAP32[$20>>2]|0;
    __THREW__ = 0;
    invoke_viii(676,($464|0),($15|0),($467|0));
    $468 = __THREW__; __THREW__ = 0;
    $469 = $468&1;
    if ($469) {
     $$065 = 1;
    } else {
     __THREW__ = 0;
     invoke_viii(644,($464|0),(352|0),(7|0));
     $470 = __THREW__; __THREW__ = 0;
     $$065 = 0;
    }
    $475 = ___cxa_find_matching_catch_2()|0;
    $476 = tempRet0;
    __THREW__ = 0;
    invoke_vi(637,($15|0));
    $477 = __THREW__; __THREW__ = 0;
    $478 = $477&1;
    if ($478) {
     break;
    }
    if ($$065) {
     $$9225 = $475;$$987224 = $476;
    } else {
     $$10 = $475;$$1088 = $476;
     label = 213;
     break;
    }
   }
   ___cxa_free_exception(($464|0));
   $$10 = $$9225;$$1088 = $$987224;
   label = 213;
   break;
  }
  case 204: {
   $471 = ___cxa_find_matching_catch_2()|0;
   $472 = tempRet0;
   $$10 = $471;$$1088 = $472;
   label = 213;
   break;
  }
  case 212: {
   $488 = ___cxa_find_matching_catch_2()|0;
   $489 = tempRet0;
   $$11 = $488;$$1189 = $489;
   label = 214;
   break;
  }
  case 215: {
   $492 = (___cxa_allocate_exception(36)|0);
   __THREW__ = 0;
   invoke_vii(635,($16|0),($19|0));
   $493 = __THREW__; __THREW__ = 0;
   $494 = $493&1;
   if ($494) {
    $499 = ___cxa_find_matching_catch_2()|0;
    $500 = tempRet0;
    $$13228 = $499;$$1391227 = $500;
   } else {
    $495 = HEAP32[$20>>2]|0;
    __THREW__ = 0;
    invoke_viii(676,($492|0),($16|0),($495|0));
    $496 = __THREW__; __THREW__ = 0;
    $497 = $496&1;
    if ($497) {
     $$063 = 1;
    } else {
     __THREW__ = 0;
     invoke_viii(644,($492|0),(352|0),(7|0));
     $498 = __THREW__; __THREW__ = 0;
     $$063 = 0;
    }
    $501 = ___cxa_find_matching_catch_2()|0;
    $502 = tempRet0;
    __THREW__ = 0;
    invoke_vi(637,($16|0));
    $503 = __THREW__; __THREW__ = 0;
    $504 = $503&1;
    if ($504) {
     break;
    }
    if ($$063) {
     $$13228 = $501;$$1391227 = $502;
    } else {
     $$16 = $501;$$1694 = $502;
     label = 255;
     break;
    }
   }
   ___cxa_free_exception(($492|0));
   $$16 = $$13228;$$1694 = $$1391227;
   label = 255;
   break;
  }
  case 226: {
   __THREW__ = 0;
   invoke_viiii(680,(27040|0),(27060|0),38,(27075|0));
   $516 = __THREW__; __THREW__ = 0;
   $517 = ___cxa_find_matching_catch_2()|0;
   $518 = tempRet0;
   $eh$lpad$body206$index35Z2D = $518;$eh$lpad$body206$indexZ2D = $517;
   label = 241;
   break;
  }
  case 235: {
   $555 = ___cxa_find_matching_catch_2()|0;
   $556 = tempRet0;
   __THREW__ = 0;
   invoke_vi(660,($1|0));
   $557 = __THREW__; __THREW__ = 0;
   $558 = $557&1;
   if ($558) {
    $559 = ___cxa_find_matching_catch_3(0|0)|0;
    $560 = tempRet0;
    ___clang_call_terminate($559);
    // unreachable;
   } else {
    $eh$lpad$body206$index35Z2D = $556;$eh$lpad$body206$indexZ2D = $555;
    label = 241;
    break;
   }
   break;
  }
  case 240: {
   $565 = ___cxa_find_matching_catch_2()|0;
   $566 = tempRet0;
   $eh$lpad$body206$index35Z2D = $566;$eh$lpad$body206$indexZ2D = $565;
   label = 241;
   break;
  }
  case 247: {
   $581 = ___cxa_find_matching_catch_2()|0;
   $582 = tempRet0;
   __THREW__ = 0;
   invoke_vi(705,($17|0));
   $583 = __THREW__; __THREW__ = 0;
   $584 = $583&1;
   if ($584) {
    $585 = ___cxa_find_matching_catch_3(0|0)|0;
    $586 = tempRet0;
    ___clang_call_terminate($585);
    // unreachable;
   } else {
    $eh$lpad$body$index41Z2D = $582;$eh$lpad$body$indexZ2D = $581;
    label = 252;
   }
   break;
  }
  case 251: {
   $588 = ___cxa_find_matching_catch_2()|0;
   $589 = tempRet0;
   $eh$lpad$body$index41Z2D = $589;$eh$lpad$body$indexZ2D = $588;
   label = 252;
   break;
  }
  case 254: {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($12);
   label = 257;
   break;
  }
  case 265: {
   STACKTOP = sp;return;
   break;
  }
 }
 do {
  if ((label|0) == 58) {
   __THREW__ = 0;
   invoke_vi(637,($6|0));
   $144 = __THREW__; __THREW__ = 0;
   $145 = $144&1;
   if (!($145)) {
    $$18 = $$071;$$1896 = $$078;
    ___resumeException($$18|0);
    // unreachable;
   }
  }
  else if ((label|0) == 94) {
   $216 = ___cxa_find_matching_catch_2()|0;
   $217 = tempRet0;
   $lpad$phi249$index = $216;$lpad$phi249$index2 = $217;
   label = 95;
  }
  else if ((label|0) == 157) {
   $$16 = $lpad$phi$index;$$1694 = $lpad$phi$index17;
   label = 255;
  }
  else if ((label|0) == 159) {
   $$16 = $eh$lpad$body170$indexZ2D;$$1694 = $eh$lpad$body170$index23Z2D;
   label = 255;
  }
  else if ((label|0) == 183) {
   $$16 = $$7;$$1694 = $$785;
   label = 255;
  }
  else if ((label|0) == 191) {
   $440 = ___cxa_find_matching_catch_2()|0;
   $441 = tempRet0;
   __THREW__ = 0;
   invoke_v(643);
   $442 = __THREW__; __THREW__ = 0;
   $443 = $442&1;
   if (!($443)) {
    $$10 = $440;$$1088 = $441;
    label = 213;
   }
  }
  else if ((label|0) == 241) {
   HEAP32[$17>>2] = (8296);
   __THREW__ = 0;
   invoke_vi(106,($30|0));
   $567 = __THREW__; __THREW__ = 0;
   $568 = $567&1;
   if (!($568)) {
    __THREW__ = 0;
    invoke_vi(705,($17|0));
    $569 = __THREW__; __THREW__ = 0;
    $570 = $569&1;
    if ($570) {
     break;
    } else {
     $$14 = $eh$lpad$body206$indexZ2D;$$1492 = $eh$lpad$body206$index35Z2D;
     label = 253;
     break;
    }
   }
   $571 = ___cxa_find_matching_catch_3(0|0)|0;
   $572 = tempRet0;
   __THREW__ = 0;
   invoke_vi(705,($17|0));
   $573 = __THREW__; __THREW__ = 0;
   $574 = $573&1;
   if ($574) {
    $575 = ___cxa_find_matching_catch_3(0|0)|0;
    $576 = tempRet0;
    ___clang_call_terminate($575);
    // unreachable;
   } else {
    $eh$lpad$body111$indexZ2D = $571;
    ___clang_call_terminate($eh$lpad$body111$indexZ2D);
    // unreachable;
   }
  }
  else if ((label|0) == 252) {
   $$14 = $eh$lpad$body$indexZ2D;$$1492 = $eh$lpad$body$index41Z2D;
   label = 253;
  }
  else if ((label|0) == 257) {
   $592 = (___cxa_allocate_exception(36)|0);
   __THREW__ = 0;
   invoke_vii(635,($18|0),($19|0));
   $593 = __THREW__; __THREW__ = 0;
   $594 = $593&1;
   if ($594) {
    $598 = ___cxa_find_matching_catch_2()|0;
    $599 = tempRet0;
    $$17231 = $598;$$1795230 = $599;
   } else {
    __THREW__ = 0;
    invoke_viii(708,($592|0),($18|0),($33|0));
    $595 = __THREW__; __THREW__ = 0;
    $596 = $595&1;
    if ($596) {
     $$0 = 1;
    } else {
     __THREW__ = 0;
     invoke_viii(644,($592|0),(968|0),(7|0));
     $597 = __THREW__; __THREW__ = 0;
     $$0 = 0;
    }
    $600 = ___cxa_find_matching_catch_2()|0;
    $601 = tempRet0;
    __THREW__ = 0;
    invoke_vi(637,($18|0));
    $602 = __THREW__; __THREW__ = 0;
    $603 = $602&1;
    if ($603) {
     break;
    }
    if ($$0) {
     $$17231 = $600;$$1795230 = $601;
    } else {
     $$18 = $600;$$1896 = $601;
     ___resumeException($$18|0);
     // unreachable;
    }
   }
   ___cxa_free_exception(($592|0));
   $$18 = $$17231;$$1896 = $$1795230;
   ___resumeException($$18|0);
   // unreachable;
  }
 } while(0);
 if ((label|0) == 95) {
  $$6 = $lpad$phi249$index;$$684 = $lpad$phi249$index2;
  label = 128;
 }
 else if ((label|0) == 213) {
  __THREW__ = 0;
  invoke_vi(637,($13|0));
  $490 = __THREW__; __THREW__ = 0;
  $491 = $490&1;
  if (!($491)) {
   $$11 = $$10;$$1189 = $$1088;
   label = 214;
  }
 }
 else if ((label|0) == 253) {
  $$16 = $$14;$$1694 = $$1492;
  label = 255;
 }
 if ((label|0) == 128) {
  __THREW__ = 0;
  invoke_vi(637,($5|0));
  $276 = __THREW__; __THREW__ = 0;
  $277 = $276&1;
  if (!($277)) {
   $$18 = $$6;$$1896 = $$684;
   ___resumeException($$18|0);
   // unreachable;
  }
 }
 else if ((label|0) == 214) {
  $$16 = $$11;$$1694 = $$1189;
  label = 255;
 }
 if ((label|0) == 255) {
  __THREW__ = 0;
  invoke_vi(637,($12|0));
  $590 = __THREW__; __THREW__ = 0;
  $591 = $590&1;
  if (!($591)) {
   $$18 = $$16;$$1896 = $$1694;
   ___resumeException($$18|0);
   // unreachable;
  }
 }
 $604 = ___cxa_find_matching_catch_3(0|0)|0;
 $605 = tempRet0;
 $eh$lpad$body111$indexZ2D = $604;
 ___clang_call_terminate($eh$lpad$body111$indexZ2D);
 // unreachable;
}
function __ZN10LineParser11HandleTokenEii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$elt = 0, $$elt5 = 0, $$elt7 = 0, $$elt9 = 0, $$unpack = 0, $$unpack10 = 0, $$unpack6 = 0, $$unpack8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)>(-1);
 if (!($3)) {
  ___assert_fail((25072|0),(25043|0),377,(25079|0));
  // unreachable;
 }
 $$elt = (((8468 + (($1*20)|0)|0)) + 12|0);
 $$unpack = HEAP32[$$elt>>2]|0;
 $$elt5 = (((8468 + (($1*20)|0)|0)) + 16|0);
 $$unpack6 = HEAP32[$$elt5>>2]|0;
 $4 = $$unpack6 & 1;
 $5 = $4 | $$unpack;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $7 = ($4|0)==(0);
  $8 = HEAP32[$0>>2]|0;
  $9 = $$unpack6 >> 1;
  $10 = (($8) + ($9)|0);
  if ($7) {
   $14 = $$unpack;
   $18 = $14;
  } else {
   $11 = HEAP32[$10>>2]|0;
   $12 = (($11) + ($$unpack)|0);
   $13 = HEAP32[$12>>2]|0;
   $18 = $13;
  }
  $15 = ((($0)) + 4|0);
  $16 = ((($0)) + 16|0);
  $17 = HEAP32[$16>>2]|0;
  FUNCTION_TABLE_viii[$18 & 1023]($10,$15,$17);
 }
 $19 = HEAP32[$0>>2]|0;
 $20 = (__ZNK10SourceCode17IsIfConditionTrueEv($19)|0);
 if (!($20)) {
  $30 = ((($0)) + 16|0);
  HEAP32[$30>>2] = $2;
  __ZN10LineParser13SkipStatementEv($0);
  return;
 }
 $$elt7 = (((8468 + (($1*20)|0)|0)) + 4|0);
 $$unpack8 = HEAP32[$$elt7>>2]|0;
 $$elt9 = (((8468 + (($1*20)|0)|0)) + 8|0);
 $$unpack10 = HEAP32[$$elt9>>2]|0;
 $21 = $$unpack10 >> 1;
 $22 = (($0) + ($21)|0);
 $23 = $$unpack10 & 1;
 $24 = ($23|0)==(0);
 if ($24) {
  $28 = $$unpack8;
  $29 = $28;
 } else {
  $25 = HEAP32[$22>>2]|0;
  $26 = (($25) + ($$unpack8)|0);
  $27 = HEAP32[$26>>2]|0;
  $29 = $27;
 }
 FUNCTION_TABLE_vi[$29 & 1023]($22);
 return;
}
function __ZN10LineParser13SkipStatementEv($0) {
 $0 = $0|0;
 var $$0$off0 = 0, $$014$off0 = 0, $$014$off0$mux = 0, $$1$off0 = 0, $$115$off0 = 0, $$not = 0, $$not31 = 0, $$not33 = 0, $$phi$trans$insert$i = 0, $$phi$trans$insert16$i = 0, $$pre$i = 0, $$pre15$i = 0, $$pre17$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $brmerge30 = 0, $brmerge32 = 0, $brmerge34 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 4|0);
 $5 = ((($4)) + 11|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $8 = ((($0)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $12 = $9;
 } else {
  $10 = $6&255;
  $12 = $10;
 }
 $11 = ($3>>>0)<($12>>>0);
 do {
  if ($11) {
   if ($7) {
    $13 = HEAP32[$4>>2]|0;
    $15 = $13;
   } else {
    $15 = $4;
   }
   $14 = (($15) + ($3)|0);
   $16 = HEAP8[$14>>0]|0;
   $17 = ($16<<24>>24)==(123);
   if (!($17)) {
    if ($7) {
     $18 = HEAP32[$4>>2]|0;
     $20 = $18;
    } else {
     $20 = $4;
    }
    $19 = (($20) + ($3)|0);
    $21 = HEAP8[$19>>0]|0;
    $22 = ($21<<24>>24)==(125);
    if (!($22)) {
     if ($7) {
      $23 = HEAP32[$4>>2]|0;
      $25 = $23;
     } else {
      $25 = $4;
     }
     $24 = (($25) + ($3)|0);
     $26 = HEAP8[$24>>0]|0;
     $27 = ($26<<24>>24)==(58);
     if (!($27)) {
      label = 18;
      break;
     }
    }
   }
   $28 = (($3) + 1)|0;
   HEAP32[$2>>2] = $28;
  } else {
   label = 18;
  }
 } while(0);
 L23: do {
  if ((label|0) == 18) {
   if ($7) {
    $29 = ((($0)) + 8|0);
    $30 = HEAP32[$29>>2]|0;
    $33 = $30;
   } else {
    $31 = $6&255;
    $33 = $31;
   }
   $32 = ($3>>>0)<($33>>>0);
   do {
    if ($32) {
     if ($7) {
      $35 = HEAP32[$4>>2]|0;
      $37 = $35;
     } else {
      $37 = $4;
     }
     $36 = (($37) + ($3)|0);
     $38 = HEAP8[$36>>0]|0;
     $39 = ($38<<24>>24)==(92);
     if (!($39)) {
      if ($7) {
       $40 = HEAP32[$4>>2]|0;
       $42 = $40;
      } else {
       $42 = $4;
      }
      $41 = (($42) + ($3)|0);
      $43 = HEAP8[$41>>0]|0;
      $44 = ($43<<24>>24)==(59);
      if (!($44)) {
       break;
      }
     }
     if ($7) {
      $45 = ((($0)) + 8|0);
      $46 = HEAP32[$45>>2]|0;
      $48 = $46;
     } else {
      $47 = $6&255;
      $48 = $47;
     }
     HEAP32[$2>>2] = $48;
     break L23;
    }
   } while(0);
   $34 = ((($0)) + 8|0);
   $$0$off0 = 0;$$014$off0 = 0;$49 = $6;$53 = $3;
   while(1) {
    $50 = ($49<<24>>24)<(0);
    if ($50) {
     $51 = HEAP32[$34>>2]|0;
     $55 = $51;
    } else {
     $52 = $49&255;
     $55 = $52;
    }
    $54 = ($53>>>0)<($55>>>0);
    if (!($54)) {
     break L23;
    }
    $brmerge = $$014$off0 | $$0$off0;
    L54: do {
     if ($brmerge) {
      $60 = ($49<<24>>24)<(0);
      if ($60) {
       $131 = $53;$132 = $49;
       label = 45;
      } else {
       $130 = $53;$63 = $49;
       label = 46;
      }
     } else {
      $56 = (__ZN11StringUtils13EatWhitespaceERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERj($4,$2)|0);
      if (!($56)) {
       break L23;
      }
      $57 = HEAP32[$2>>2]|0;
      $58 = HEAP8[$5>>0]|0;
      $59 = ($58<<24>>24)<(0);
      if ($59) {
       $$pre15$i = HEAP32[$4>>2]|0;
       $$phi$trans$insert16$i = (($$pre15$i) + ($57)|0);
       $$pre17$i = HEAP8[$$phi$trans$insert16$i>>0]|0;
       switch ($$pre17$i<<24>>24) {
       case 58: case 59: case 92: case 123: case 125:  {
        break L23;
        break;
       }
       default: {
        $131 = $57;$132 = $58;
        label = 45;
        break L54;
       }
       }
      } else {
       $$phi$trans$insert$i = (($4) + ($57)|0);
       $$pre$i = HEAP8[$$phi$trans$insert$i>>0]|0;
       switch ($$pre$i<<24>>24) {
       case 58: case 59: case 92: case 123: case 125:  {
        break L23;
        break;
       }
       default: {
        $130 = $57;$63 = $58;
        label = 46;
        break L54;
       }
       }
      }
     }
    } while(0);
    if ((label|0) == 45) {
     label = 0;
     $61 = HEAP32[$34>>2]|0;
     $133 = 1;$64 = $131;$66 = $61;$74 = $132;
    }
    else if ((label|0) == 46) {
     label = 0;
     $62 = $63&255;
     $133 = 0;$64 = $130;$66 = $62;$74 = $63;
    }
    $65 = ($64>>>0)<($66>>>0);
    if ($65) {
     if ($133) {
      $67 = HEAP32[$4>>2]|0;
      $69 = $67;
     } else {
      $69 = $4;
     }
     $68 = (($69) + ($64)|0);
     $70 = HEAP8[$68>>0]|0;
     $$not = ($70<<24>>24)!=(34);
     $brmerge30 = $$014$off0 | $$not;
     if ($brmerge30) {
      label = 52;
     } else {
      $71 = $$0$off0 ^ 1;
      $$1$off0 = $71;$$115$off0 = 0;$92 = $64;
     }
    } else {
     label = 52;
    }
    if ((label|0) == 52) {
     label = 0;
     if ($133) {
      $72 = HEAP32[$34>>2]|0;
      $76 = $72;
     } else {
      $73 = $74&255;
      $76 = $73;
     }
     $75 = ($64>>>0)<($76>>>0);
     if ($75) {
      if ($133) {
       $77 = HEAP32[$4>>2]|0;
       $79 = $77;
      } else {
       $79 = $4;
      }
      $78 = (($79) + ($64)|0);
      $80 = HEAP8[$78>>0]|0;
      $$not33 = ($80<<24>>24)!=(39);
      $brmerge34 = $$014$off0 | $$not33;
      $$014$off0$mux = $$014$off0 & $$not33;
      if ($brmerge34) {
       $$1$off0 = $$0$off0;$$115$off0 = $$014$off0$mux;$92 = $64;
      } else {
       $81 = (($64) + 2)|0;
       if ($133) {
        $82 = HEAP32[$34>>2]|0;
        $85 = $82;
       } else {
        $83 = $74&255;
        $85 = $83;
       }
       $84 = ($81>>>0)<($85>>>0);
       if ($84) {
        if ($133) {
         $86 = HEAP32[$4>>2]|0;
         $88 = $86;
        } else {
         $88 = $4;
        }
        $87 = (($88) + ($81)|0);
        $89 = HEAP8[$87>>0]|0;
        $$not31 = ($89<<24>>24)!=(39);
        $brmerge32 = $$0$off0 | $$not31;
        if ($brmerge32) {
         $$1$off0 = $$0$off0;$$115$off0 = 0;$92 = $64;
        } else {
         $90 = (($64) + 1)|0;
         HEAP32[$2>>2] = $90;
         $$1$off0 = 0;$$115$off0 = 1;$92 = $90;
        }
       } else {
        $$1$off0 = $$0$off0;$$115$off0 = 0;$92 = $64;
       }
      }
     } else {
      $$1$off0 = $$0$off0;$$115$off0 = $$014$off0;$92 = $64;
     }
    }
    $91 = (($92) + 1)|0;
    HEAP32[$2>>2] = $91;
    $$0$off0 = $$1$off0;$$014$off0 = $$115$off0;$49 = $74;$53 = $91;
   }
  }
 } while(0);
 $93 = HEAP32[$0>>2]|0;
 $94 = ((($93)) + 24600|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = ($95|0)==(0|0);
 if ($96) {
  STACKTOP = sp;return;
 }
 $97 = HEAP32[$2>>2]|0;
 $98 = (($97) - ($3))|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($1,$4,$3,$98,$4);
 $99 = HEAP32[$2>>2]|0;
 $100 = HEAP8[$5>>0]|0;
 $101 = ($100<<24>>24)<(0);
 if ($101) {
  $102 = ((($0)) + 8|0);
  $103 = HEAP32[$102>>2]|0;
  $106 = $103;
 } else {
  $104 = $100&255;
  $106 = $104;
 }
 $105 = ($99|0)==($106|0);
 if ($105) {
  __THREW__ = 0;
  invoke_vii(665,($1|0),10);
  $107 = __THREW__; __THREW__ = 0;
  $108 = $107&1;
  if (!($108)) {
   label = 75;
  }
 } else {
  label = 75;
 }
 if ((label|0) == 75) {
  $113 = HEAP32[$0>>2]|0;
  $114 = ((($113)) + 24600|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ((($115)) + 40|0);
  $117 = ((($1)) + 11|0);
  $118 = HEAP8[$117>>0]|0;
  $119 = ($118<<24>>24)<(0);
  $120 = HEAP32[$1>>2]|0;
  $121 = $119 ? $120 : $1;
  $122 = ((($1)) + 4|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = $118&255;
  $125 = $119 ? $123 : $124;
  __THREW__ = 0;
  (invoke_iiii(679,($116|0),($121|0),($125|0))|0);
  $126 = __THREW__; __THREW__ = 0;
  $127 = $126&1;
  if (!($127)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
   STACKTOP = sp;return;
  }
 }
 $109 = ___cxa_find_matching_catch_2()|0;
 $110 = tempRet0;
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $111 = __THREW__; __THREW__ = 0;
 $112 = $111&1;
 if ($112) {
  $128 = ___cxa_find_matching_catch_3(0|0)|0;
  $129 = tempRet0;
  ___clang_call_terminate($128);
  // unreachable;
 } else {
  ___resumeException($109|0);
  // unreachable;
 }
}
function __ZN10LineParser13GetSymbolNameEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = ((($1)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($2)) + 11|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $8 = HEAP32[$2>>2]|0;
  $10 = $8;
 } else {
  $10 = $2;
 }
 $9 = (($10) + ($4)|0);
 $11 = HEAP8[$9>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = (_isalpha($12)|0);
 $14 = ($13|0)==(0);
 if ($14) {
  if ($7) {
   $15 = HEAP32[$2>>2]|0;
   $17 = $15;
  } else {
   $17 = $2;
  }
  $16 = (($17) + ($4)|0);
  $18 = HEAP8[$16>>0]|0;
  $19 = ($18<<24>>24)==(95);
  if (!($19)) {
   ___assert_fail((24984|0),(25043|0),501,(25058|0));
   // unreachable;
  }
 }
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $20 = ((($1)) + 8|0);
 $22 = $4;$23 = $6;
 while(1) {
  $21 = (($22) + 1)|0;
  HEAP32[$3>>2] = $21;
  $24 = ($23<<24>>24)<(0);
  if ($24) {
   $25 = HEAP32[$2>>2]|0;
   $27 = $25;
  } else {
   $27 = $2;
  }
  $26 = (($27) + ($22)|0);
  $28 = HEAP8[$26>>0]|0;
  __THREW__ = 0;
  invoke_vii(665,($0|0),($28|0));
  $29 = __THREW__; __THREW__ = 0;
  $30 = $29&1;
  if ($30) {
   label = 33;
   break;
  }
  $31 = HEAP32[$3>>2]|0;
  $32 = HEAP8[$5>>0]|0;
  $33 = ($32<<24>>24)<(0);
  if ($33) {
   $34 = HEAP32[$20>>2]|0;
   $37 = $34;
  } else {
   $35 = $32&255;
   $37 = $35;
  }
  $36 = ($31>>>0)<($37>>>0);
  if (!($36)) {
   label = 34;
   break;
  }
  if ($33) {
   $38 = HEAP32[$2>>2]|0;
   $40 = $38;
  } else {
   $40 = $2;
  }
  $39 = (($40) + ($31)|0);
  $41 = HEAP8[$39>>0]|0;
  $42 = $41 << 24 >> 24;
  $43 = (_isalpha($42)|0);
  $44 = ($43|0)==(0);
  if ($44) {
   if ($33) {
    $45 = HEAP32[$2>>2]|0;
    $47 = $45;
   } else {
    $47 = $2;
   }
   $46 = (($47) + ($31)|0);
   $48 = HEAP8[$46>>0]|0;
   $49 = $48 << 24 >> 24;
   $isdigittmp = (($49) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if (!($isdigit)) {
    if ($33) {
     $50 = HEAP32[$2>>2]|0;
     $52 = $50;
    } else {
     $52 = $2;
    }
    $51 = (($52) + ($31)|0);
    $53 = HEAP8[$51>>0]|0;
    $54 = ($53<<24>>24)==(95);
    if (!($54)) {
     if ($33) {
      $55 = HEAP32[$2>>2]|0;
      $57 = $55;
     } else {
      $57 = $2;
     }
     $56 = (($57) + ($31)|0);
     $58 = HEAP8[$56>>0]|0;
     $59 = ($58<<24>>24)==(37);
     if (!($59)) {
      label = 34;
      break;
     }
    }
   }
  }
  $60 = (($31) + -1)|0;
  if ($33) {
   $61 = HEAP32[$2>>2]|0;
   $63 = $61;
  } else {
   $63 = $2;
  }
  $62 = (($63) + ($60)|0);
  $64 = HEAP8[$62>>0]|0;
  $65 = ($64<<24>>24)==(37);
  if ($65) {
   label = 34;
   break;
  } else {
   $22 = $31;$23 = $32;
  }
 }
 if ((label|0) == 33) {
  $66 = ___cxa_find_matching_catch_2()|0;
  $67 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($0|0));
  $68 = __THREW__; __THREW__ = 0;
  $69 = $68&1;
  if ($69) {
   $70 = ___cxa_find_matching_catch_3(0|0)|0;
   $71 = tempRet0;
   ___clang_call_terminate($70);
   // unreachable;
  } else {
   ___resumeException($66|0);
   // unreachable;
  }
 }
 else if ((label|0) == 34) {
  return;
 }
}
function __ZN42AsmException_SyntaxError_UnrecognisedTokenC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$03$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3,$1);
 HEAP32[$0>>2] = (4652);
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($4|0),($3|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $11 = ___cxa_find_matching_catch_2()|0;
  $12 = tempRet0;
  $$0$i = $12;$$03$i = $11;
 } else {
  $7 = ((($0)) + 16|0);
  HEAP32[$7>>2] = $2;
  $8 = ((($0)) + 20|0);
  ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
  __THREW__ = 0;
  invoke_viii(646,($8|0),(44984|0),0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   $19 = ((($0)) + 32|0);
   HEAP32[$19>>2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
   HEAP32[$0>>2] = (8272);
   STACKTOP = sp;return;
  }
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($4|0));
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if ($16) {
   $17 = ___cxa_find_matching_catch_3(0|0)|0;
   $18 = tempRet0;
   ___clang_call_terminate($17);
   // unreachable;
  } else {
   $$0$i = $14;$$03$i = $13;
  }
 }
 __THREW__ = 0;
 invoke_vi(637,($3|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch_3(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  ___resumeException($$03$i|0);
  // unreachable;
 }
}
function __ZN44AsmException_SyntaxError_LabelAlreadyDefinedD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK44AsmException_SyntaxError_LabelAlreadyDefined7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (24895|0);
}
function __ZN42AsmException_SyntaxError_UnrecognisedTokenD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK42AsmException_SyntaxError_UnrecognisedToken7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (24964|0);
}
function __ZN10LineParser29AdvanceAndCheckEndOfStatementEv($0) {
 $0 = $0|0;
 var $$1$i = 0, $$phi$trans$insert$i = 0, $$phi$trans$insert16$i = 0, $$pre$i = 0, $$pre15$i = 0, $$pre17$i = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = ((($0)) + 16|0);
 $3 = (__ZN11StringUtils13EatWhitespaceERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERj($1,$2)|0);
 if (!($3)) {
  $$1$i = 0;
  return ($$1$i|0);
 }
 $4 = HEAP32[$2>>2]|0;
 $5 = ((($1)) + 11|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $$pre15$i = HEAP32[$1>>2]|0;
  $$phi$trans$insert16$i = (($$pre15$i) + ($4)|0);
  $$pre17$i = HEAP8[$$phi$trans$insert16$i>>0]|0;
  switch ($$pre17$i<<24>>24) {
  case 125: case 123: case 92: case 58: case 59:  {
   $$1$i = 0;
   return ($$1$i|0);
   break;
  }
  default: {
  }
  }
  $$1$i = 1;
  return ($$1$i|0);
 } else {
  $$phi$trans$insert$i = (($1) + ($4)|0);
  $$pre$i = HEAP8[$$phi$trans$insert$i>>0]|0;
  switch ($$pre$i<<24>>24) {
  case 125: case 123: case 92: case 58: case 59:  {
   $$1$i = 0;
   return ($$1$i|0);
   break;
  }
  default: {
  }
  }
  $$1$i = 1;
  return ($$1$i|0);
 }
 return (0)|0;
}
function __ZN10LineParser14SkipExpressionEib($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$05$us = 0, $$1$us = 0, $$phi$trans$insert$i$i = 0, $$phi$trans$insert$i$i$us = 0, $$phi$trans$insert16$i$i = 0, $$phi$trans$insert16$i$i$us = 0, $$pre$i$i = 0, $$pre$i$i$us = 0, $$pre15$i$i = 0, $$pre15$i$i$us = 0, $$pre17$i$i = 0, $$pre17$i$i$us = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = ((($0)) + 16|0);
 $5 = (__ZN11StringUtils13EatWhitespaceERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERj($3,$4)|0);
 if (!($5)) {
  return;
 }
 $6 = ((($3)) + 11|0);
 if ($2) {
  $$05$us = $1;
 } else {
  L5: while(1) {
   $25 = HEAP32[$4>>2]|0;
   $26 = HEAP8[$6>>0]|0;
   $27 = ($26<<24>>24)<(0);
   if ($27) {
    $$pre15$i$i = HEAP32[$3>>2]|0;
    $$phi$trans$insert16$i$i = (($$pre15$i$i) + ($25)|0);
    $$pre17$i$i = HEAP8[$$phi$trans$insert16$i$i>>0]|0;
    switch ($$pre17$i$i<<24>>24) {
    case 125: case 123: case 44: case 92: case 58: case 59:  {
     label = 18;
     break L5;
     break;
    }
    default: {
    }
    }
   } else {
    $$phi$trans$insert$i$i = (($3) + ($25)|0);
    $$pre$i$i = HEAP8[$$phi$trans$insert$i$i>>0]|0;
    switch ($$pre$i$i<<24>>24) {
    case 125: case 123: case 44: case 92: case 58: case 59:  {
     label = 18;
     break L5;
     break;
    }
    default: {
    }
    }
   }
   $28 = (($25) + 1)|0;
   HEAP32[$4>>2] = $28;
   $29 = (__ZN11StringUtils13EatWhitespaceERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERj($3,$4)|0);
   if (!($29)) {
    label = 18;
    break;
   }
  }
  if ((label|0) == 18) {
   return;
  }
 }
 L15: while(1) {
  $7 = HEAP32[$4>>2]|0;
  $8 = HEAP8[$6>>0]|0;
  $9 = ($8<<24>>24)<(0);
  if ($9) {
   $$pre15$i$i$us = HEAP32[$3>>2]|0;
   $$phi$trans$insert16$i$i$us = (($$pre15$i$i$us) + ($7)|0);
   $$pre17$i$i$us = HEAP8[$$phi$trans$insert16$i$i$us>>0]|0;
   switch ($$pre17$i$i$us<<24>>24) {
   case 125: case 123: case 44: case 92: case 58: case 59:  {
    label = 18;
    break L15;
    break;
   }
   default: {
   }
   }
   $10 = HEAP32[$3>>2]|0;
   $12 = $10;
  } else {
   $$phi$trans$insert$i$i$us = (($3) + ($7)|0);
   $$pre$i$i$us = HEAP8[$$phi$trans$insert$i$i$us>>0]|0;
   switch ($$pre$i$i$us<<24>>24) {
   case 125: case 123: case 44: case 92: case 58: case 59:  {
    label = 18;
    break L15;
    break;
   }
   default: {
    $12 = $3;
   }
   }
  }
  $11 = (($12) + ($7)|0);
  $13 = HEAP8[$11>>0]|0;
  $14 = ($13<<24>>24)==(40);
  if ($14) {
   $22 = (($$05$us) + 1)|0;
   $$1$us = $22;
  } else {
   if ($9) {
    $15 = HEAP32[$3>>2]|0;
    $17 = $15;
   } else {
    $17 = $3;
   }
   $16 = (($17) + ($7)|0);
   $18 = HEAP8[$16>>0]|0;
   $19 = ($18<<24>>24)==(41);
   if ($19) {
    $20 = (($$05$us) + -1)|0;
    $21 = ($$05$us|0)<(1);
    if ($21) {
     label = 18;
     break;
    } else {
     $$1$us = $20;
    }
   } else {
    $$1$us = $$05$us;
   }
  }
  $23 = (($7) + 1)|0;
  HEAP32[$4>>2] = $23;
  $24 = (__ZN11StringUtils13EatWhitespaceERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERj($3,$4)|0);
  if ($24) {
   $$05$us = $$1$us;
  } else {
   label = 18;
   break;
  }
 }
 if ((label|0) == 18) {
  return;
 }
}
function __ZN10LineParser32AdvanceAndCheckEndOfSubStatementEv($0) {
 $0 = $0|0;
 var $$1$i = 0, $$phi$trans$insert$i = 0, $$phi$trans$insert16$i = 0, $$pre$i = 0, $$pre15$i = 0, $$pre17$i = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = ((($0)) + 16|0);
 $3 = (__ZN11StringUtils13EatWhitespaceERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERj($1,$2)|0);
 if (!($3)) {
  $$1$i = 0;
  return ($$1$i|0);
 }
 $4 = HEAP32[$2>>2]|0;
 $5 = ((($1)) + 11|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $$pre15$i = HEAP32[$1>>2]|0;
  $$phi$trans$insert16$i = (($$pre15$i) + ($4)|0);
  $$pre17$i = HEAP8[$$phi$trans$insert16$i>>0]|0;
  switch ($$pre17$i<<24>>24) {
  case 125: case 123: case 44: case 92: case 58: case 59:  {
   $$1$i = 0;
   return ($$1$i|0);
   break;
  }
  default: {
  }
  }
  $$1$i = 1;
  return ($$1$i|0);
 } else {
  $$phi$trans$insert$i = (($1) + ($4)|0);
  $$pre$i = HEAP8[$$phi$trans$insert$i>>0]|0;
  switch ($$pre$i<<24>>24) {
  case 125: case 123: case 44: case 92: case 58: case 59:  {
   $$1$i = 0;
   return ($$1$i|0);
   break;
  }
  default: {
  }
  }
  $$1$i = 1;
  return ($$1$i|0);
 }
 return (0)|0;
}
function __ZN10GlobalData6CreateEv() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[9088]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = (__Znwj(36)|0);
  $3 = ((($2)) + 4|0);
  HEAP32[$3>>2] = 0;
  $4 = ((($2)) + 8|0);
  HEAP8[$4>>0] = 0;
  $5 = ((($2)) + 9|0);
  HEAP8[$5>>0] = 0;
  $6 = ((($2)) + 12|0);
  HEAP32[$6>>2] = 0;
  $7 = ((($2)) + 20|0);
  HEAP8[$7>>0] = 0;
  $8 = ((($2)) + 24|0);
  HEAP32[$8>>2] = 0;
  $9 = ((($2)) + 28|0);
  HEAP32[$9>>2] = 0;
  $10 = ((($2)) + 32|0);
  HEAP32[$10>>2] = 0;
  HEAP32[9088] = $2;
  return;
 } else {
  ___assert_fail((26741|0),(25091|0),38,(26777|0));
  // unreachable;
 }
}
function __ZN10GlobalData7DestroyEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[9088]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  ___assert_fail((27040|0),(25091|0),54,(26821|0));
  // unreachable;
 } else {
  __ZdlPv($0);
  HEAP32[9088] = 0;
  return;
 }
}
function __ZN13MacroInstance7GetLineERNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ((($0)) + 24624|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + -12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($3) + ($6)|0);
 $8 = (__ZNKSt3__28ios_base6getlocEv($7)|0);
 HEAP32[$2>>2] = $8;
 __THREW__ = 0;
 $9 = (invoke_iii(659,($2|0),(40712|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if (!($11)) {
  $12 = HEAP32[$9>>2]|0;
  $13 = ((($12)) + 28|0);
  $14 = HEAP32[$13>>2]|0;
  __THREW__ = 0;
  $15 = (invoke_iii($14|0,($9|0),10)|0);
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if (!($17)) {
   __ZNSt3__26localeD2Ev($2);
   $24 = (__ZNSt3__27getlineIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EES6_($3,$1,$15)|0);
   STACKTOP = sp;return ($24|0);
  }
 }
 $18 = ___cxa_find_matching_catch_2()|0;
 $19 = tempRet0;
 __THREW__ = 0;
 invoke_vi(660,($2|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch_3(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  ___resumeException($18|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN13MacroInstance14GetFilePointerEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 24624|0);
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE5tellgEv($1,$2);
 $3 = ((($1)) + 8|0);
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZN13MacroInstance14SetFilePointerEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 16|0;
 $2 = sp;
 $3 = ((($0)) + 24620|0);
 HEAP32[$3>>2] = $1;
 $4 = ((($0)) + 24624|0);
 $5 = ($1|0)<(0);
 $6 = $5 << 31 >> 31;
 $7 = $2;
 $8 = $7;
 HEAP32[$8>>2] = 0;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = ((($2)) + 8|0);
 $12 = $11;
 $13 = $12;
 HEAP32[$13>>2] = $1;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $6;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$2+12>>2]|0;
 (__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE5seekgENS_4fposI11__mbstate_tEE($4,$$byval_copy)|0);
 STACKTOP = sp;return;
}
function __ZN13MacroInstance7IsAtEndEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 24624|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 2;
 $9 = ($8|0)!=(0);
 return ($9|0);
}
function __ZN13MacroInstanceD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (8296);
 $1 = ((($0)) + 24624|0);
 __THREW__ = 0;
 invoke_vi(106,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  __ZN10SourceCodeD2Ev($0);
  return;
 }
 $4 = ___cxa_find_matching_catch_2()|0;
 $5 = tempRet0;
 __THREW__ = 0;
 invoke_vi(705,($0|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch_3(0|0)|0;
  $9 = tempRet0;
  ___clang_call_terminate($8);
  // unreachable;
 } else {
  ___resumeException($4|0);
  // unreachable;
 }
}
function __ZN13MacroInstanceD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (8296);
 $1 = ((($0)) + 24624|0);
 __THREW__ = 0;
 invoke_vi(106,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = tempRet0;
  __THREW__ = 0;
  invoke_vi(705,($0|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if ($9) {
   $10 = ___cxa_find_matching_catch_3(0|0)|0;
   $11 = tempRet0;
   ___clang_call_terminate($10);
   // unreachable;
  } else {
   $eh$lpad$body$index2Z2D = $7;$eh$lpad$body$indexZ2D = $6;
   __ZdlPv($0);
   ___resumeException($eh$lpad$body$indexZ2D|0);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(705,($0|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $eh$lpad$body$index2Z2D = $13;$eh$lpad$body$indexZ2D = $12;
 __ZdlPv($0);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZN5MacroC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0,$1);
 $3 = ((($0)) + 12|0);
 HEAP32[$3>>2] = $2;
 $4 = ((($0)) + 16|0);
 dest=$4; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 return;
}
function __ZN13MacroInstanceC2EPK5MacroPK10SourceCode($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$i = 0, $$04$i = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 __ZN10SourceCodeC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($0,$1,$4);
 HEAP32[$0>>2] = (8296);
 $5 = ((($0)) + 24624|0);
 $6 = ((($1)) + 40|0);
 $7 = ((($0)) + 24684|0);
 $8 = ((($0)) + 24632|0);
 HEAP32[$5>>2] = ((4368));
 HEAP32[$7>>2] = ((4388));
 $9 = ((($0)) + 24628|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 24684|0);
 __THREW__ = 0;
 invoke_vii(649,($10|0),($8|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 L1: do {
  if ($12) {
   $29 = ___cxa_find_matching_catch_2()|0;
   $30 = tempRet0;
   $$0$i = $30;$$04$i = $29;
   label = 10;
  } else {
   $13 = ((($0)) + 24756|0);
   HEAP32[$13>>2] = 0;
   $14 = ((($0)) + 24760|0);
   HEAP32[$14>>2] = -1;
   HEAP32[$5>>2] = (4408);
   HEAP32[$7>>2] = (4428);
   __THREW__ = 0;
   invoke_vi(650,($8|0));
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   do {
    if ($16) {
     $31 = ___cxa_find_matching_catch_2()|0;
     $32 = tempRet0;
     $eh$lpad$body$i$index2Z2D = $32;$eh$lpad$body$i$indexZ2D = $31;
    } else {
     HEAP32[$8>>2] = (3276);
     $17 = ((($0)) + 24664|0);
     $18 = ((($0)) + 24680|0);
     ;HEAP32[$17>>2]=0|0;HEAP32[$17+4>>2]=0|0;HEAP32[$17+8>>2]=0|0;HEAP32[$17+12>>2]=0|0;
     HEAP32[$18>>2] = 8;
     __THREW__ = 0;
     invoke_vii(651,($8|0),($6|0));
     $19 = __THREW__; __THREW__ = 0;
     $20 = $19&1;
     if ($20) {
      $21 = ___cxa_find_matching_catch_2()|0;
      $22 = tempRet0;
      __THREW__ = 0;
      invoke_vi(637,($17|0));
      $23 = __THREW__; __THREW__ = 0;
      $24 = $23&1;
      if ($24) {
       $27 = ___cxa_find_matching_catch_3(0|0)|0;
       $28 = tempRet0;
       ___clang_call_terminate($27);
       // unreachable;
      }
      __THREW__ = 0;
      invoke_vi(302,($8|0));
      $25 = __THREW__; __THREW__ = 0;
      $26 = $25&1;
      if (!($26)) {
       $eh$lpad$body$i$index2Z2D = $22;$eh$lpad$body$i$indexZ2D = $21;
       break;
      }
      $27 = ___cxa_find_matching_catch_3(0|0)|0;
      $28 = tempRet0;
      ___clang_call_terminate($27);
      // unreachable;
     } else {
      __THREW__ = 0;
      invoke_vii(713,($0|0),($2|0));
      $39 = __THREW__; __THREW__ = 0;
      $40 = $39&1;
      if (!($40)) {
       return;
      }
      $41 = ___cxa_find_matching_catch_2()|0;
      $42 = tempRet0;
      __THREW__ = 0;
      invoke_vi(106,($5|0));
      $43 = __THREW__; __THREW__ = 0;
      $44 = $43&1;
      if (!($44)) {
       $$0 = $42;$$06 = $41;
       break L1;
      }
      $47 = ___cxa_find_matching_catch_3(0|0)|0;
      $48 = tempRet0;
      ___clang_call_terminate($47);
      // unreachable;
     }
    }
   } while(0);
   __THREW__ = 0;
   invoke_vii(671,($5|0),((4440)|0));
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   if ($34) {
    $37 = ___cxa_find_matching_catch_3(0|0)|0;
    $38 = tempRet0;
    ___clang_call_terminate($37);
    // unreachable;
   } else {
    $$0$i = $eh$lpad$body$i$index2Z2D;$$04$i = $eh$lpad$body$i$indexZ2D;
    label = 10;
   }
  }
 } while(0);
 if ((label|0) == 10) {
  __THREW__ = 0;
  invoke_vi(653,($7|0));
  $35 = __THREW__; __THREW__ = 0;
  $36 = $35&1;
  if ($36) {
   $37 = ___cxa_find_matching_catch_3(0|0)|0;
   $38 = tempRet0;
   ___clang_call_terminate($37);
   // unreachable;
  } else {
   $$0 = $$0$i;$$06 = $$04$i;
  }
 }
 __THREW__ = 0;
 invoke_vi(705,($0|0));
 $45 = __THREW__; __THREW__ = 0;
 $46 = $45&1;
 if ($46) {
  $47 = ___cxa_find_matching_catch_3(0|0)|0;
  $48 = tempRet0;
  ___clang_call_terminate($47);
  // unreachable;
 } else {
  ___resumeException($$06|0);
  // unreachable;
 }
}
function __ZN10MacroTable6CreateEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[9089]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = (__Znwj(12)|0);
  $3 = ((($2)) + 4|0);
  HEAP32[$3>>2] = 0;
  $4 = ((($2)) + 8|0);
  HEAP32[$4>>2] = 0;
  HEAP32[$2>>2] = $3;
  HEAP32[9089] = $2;
  return;
 } else {
  ___assert_fail((26741|0),(25122|0),141,(26777|0));
  // unreachable;
 }
}
function __ZN10MacroTable7DestroyEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[9089]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  ___assert_fail((27040|0),(25122|0),157,(26821|0));
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(714,($0|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  __ZdlPv($0);
  ___resumeException($4|0);
  // unreachable;
 } else {
  __ZdlPv($0);
  HEAP32[9089] = 0;
  return;
 }
}
function __ZN10MacroTableD2Ev($0) {
 $0 = $0|0;
 var $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$06$i$i$i = 0, $$sroa$04$012 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 4|0);
 $3 = ($1|0)==($2|0);
 L1: do {
  if (!($3)) {
   $$sroa$04$012 = $1;
   while(1) {
    $5 = ((($$sroa$04$012)) + 28|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==(0|0);
    if (!($7)) {
     __THREW__ = 0;
     invoke_vi(715,($6|0));
     $8 = __THREW__; __THREW__ = 0;
     $9 = $8&1;
     if ($9) {
      break;
     }
     __ZdlPv($6);
    }
    $10 = ((($$sroa$04$012)) + 4|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(0|0);
    if ($12) {
     $$06$i$i$i = $$sroa$04$012;
     while(1) {
      $15 = ((($$06$i$i$i)) + 8|0);
      $16 = HEAP32[$15>>2]|0;
      $17 = HEAP32[$16>>2]|0;
      $18 = ($17|0)==($$06$i$i$i|0);
      if ($18) {
       $$0$i$i$i = $16;
       break;
      } else {
       $$06$i$i$i = $16;
      }
     }
    } else {
     $$0$i$i$i$i = $11;
     while(1) {
      $13 = HEAP32[$$0$i$i$i$i>>2]|0;
      $14 = ($13|0)==(0|0);
      if ($14) {
       $$0$i$i$i = $$0$i$i$i$i;
       break;
      } else {
       $$0$i$i$i$i = $13;
      }
     }
    }
    $19 = ($$0$i$i$i|0)==($2|0);
    if ($19) {
     break L1;
    } else {
     $$sroa$04$012 = $$0$i$i$i;
    }
   }
   $20 = ___cxa_find_matching_catch_2()|0;
   $21 = tempRet0;
   __ZdlPv($6);
   $22 = HEAP32[$2>>2]|0;
   __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP5MacroEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($0,$22);
   ___resumeException($20|0);
   // unreachable;
  }
 } while(0);
 $4 = HEAP32[$2>>2]|0;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP5MacroEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($0,$4);
 return;
}
function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP5MacroEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = HEAP32[$1>>2]|0;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP5MacroEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($0,$3);
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP5MacroEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($0,$5);
 $6 = ((($1)) + 16|0);
 __THREW__ = 0;
 invoke_vi(637,($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch_2()|0;
  $10 = tempRet0;
  ___cxa_call_unexpected(($9|0));
  // unreachable;
 }
 __ZdlPv($1);
 return;
}
function __ZN5MacroD2Ev($0) {
 $0 = $0|0;
 var $$1 = 0, $$13 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 40|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 do {
  if ($3) {
   $19 = ___cxa_find_matching_catch_2()|0;
   $20 = tempRet0;
   $21 = ((($0)) + 28|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(0|0);
   do {
    if (!($23)) {
     $24 = ((($0)) + 32|0);
     while(1) {
      $25 = HEAP32[$24>>2]|0;
      $26 = ($25|0)==($22|0);
      if ($26) {
       label = 15;
       break;
      }
      $27 = ((($25)) + -12|0);
      HEAP32[$24>>2] = $27;
      __THREW__ = 0;
      invoke_vi(637,($27|0));
      $28 = __THREW__; __THREW__ = 0;
      $29 = $28&1;
      if ($29) {
       label = 14;
       break;
      }
     }
     if ((label|0) == 14) {
      $30 = ___cxa_find_matching_catch_2()|0;
      $31 = tempRet0;
      ___cxa_call_unexpected(($30|0));
      // unreachable;
     }
     else if ((label|0) == 15) {
      $32 = HEAP32[$21>>2]|0;
      __ZdlPv($32);
      break;
     }
    }
   } while(0);
   $35 = ((($0)) + 16|0);
   __THREW__ = 0;
   invoke_vi(637,($35|0));
   $36 = __THREW__; __THREW__ = 0;
   $37 = $36&1;
   if ($37) {
    $40 = ___cxa_find_matching_catch_3(0|0)|0;
    $41 = tempRet0;
    ___clang_call_terminate($40);
    // unreachable;
   } else {
    $$1 = $20;$$13 = $19;
   }
  } else {
   $4 = ((($0)) + 28|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($5|0)==(0|0);
   do {
    if (!($6)) {
     $7 = ((($0)) + 32|0);
     while(1) {
      $8 = HEAP32[$7>>2]|0;
      $9 = ($8|0)==($5|0);
      if ($9) {
       label = 7;
       break;
      }
      $10 = ((($8)) + -12|0);
      HEAP32[$7>>2] = $10;
      __THREW__ = 0;
      invoke_vi(637,($10|0));
      $11 = __THREW__; __THREW__ = 0;
      $12 = $11&1;
      if ($12) {
       label = 6;
       break;
      }
     }
     if ((label|0) == 6) {
      $13 = ___cxa_find_matching_catch_2()|0;
      $14 = tempRet0;
      ___cxa_call_unexpected(($13|0));
      // unreachable;
     }
     else if ((label|0) == 7) {
      $15 = HEAP32[$4>>2]|0;
      __ZdlPv($15);
      break;
     }
    }
   } while(0);
   $16 = ((($0)) + 16|0);
   __THREW__ = 0;
   invoke_vi(637,($16|0));
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    $33 = ___cxa_find_matching_catch_2()|0;
    $34 = tempRet0;
    $$1 = $34;$$13 = $33;
    break;
   } else {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
    return;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(637,($0|0));
 $38 = __THREW__; __THREW__ = 0;
 $39 = $38&1;
 if ($39) {
  $40 = ___cxa_find_matching_catch_3(0|0)|0;
  $41 = tempRet0;
  ___clang_call_terminate($40);
  // unreachable;
 } else {
  ___resumeException($$13|0);
  // unreachable;
 }
}
function __ZN10MacroTable3AddEP5Macro($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$05 = 0, $$1 = 0, $$16 = 0, $$pre$i$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $2 = sp + 48|0;
 $3 = sp + 32|0;
 $4 = sp + 16|0;
 $5 = sp;
 $6 = ($1|0)==(0|0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = ((($1)) + 16|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($5,$7);
 __THREW__ = 0;
 invoke_vii(635,($4|0),($5|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 L4: do {
  if ($9) {
   label = 14;
  } else {
   $10 = $1;
   $11 = ((($4)) + 12|0);
   HEAP32[$11>>2] = $10;
   __THREW__ = 0;
   invoke_vii(635,($3|0),($4|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   L6: do {
    if ($13) {
     label = 15;
    } else {
     $14 = ((($3)) + 12|0);
     $15 = HEAP32[$11>>2]|0;
     HEAP32[$14>>2] = $15;
     $16 = (__ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP5MacroEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE12__find_equalIS7_EERPNS_16__tree_node_baseIPvEESM_RKT_($0,$2,$3)|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ($17|0)==(0|0);
     L8: do {
      if ($18) {
       __THREW__ = 0;
       $19 = (invoke_ii(716,32)|0);
       $20 = __THREW__; __THREW__ = 0;
       $21 = $20&1;
       do {
        if ($21) {
         $50 = ___cxa_find_matching_catch_2()|0;
         $51 = tempRet0;
         $eh$lpad$body$index2Z2D = $51;$eh$lpad$body$indexZ2D = $50;
        } else {
         $22 = ((($19)) + 16|0);
         __THREW__ = 0;
         invoke_vii(635,($22|0),($3|0));
         $23 = __THREW__; __THREW__ = 0;
         $24 = $23&1;
         if ($24) {
          $25 = ___cxa_find_matching_catch_2()|0;
          $26 = tempRet0;
          __ZdlPv($19);
          $eh$lpad$body$index2Z2D = $26;$eh$lpad$body$indexZ2D = $25;
          break;
         }
         $27 = ((($19)) + 28|0);
         $28 = HEAP32[$14>>2]|0;
         HEAP32[$27>>2] = $28;
         $29 = HEAP32[$2>>2]|0;
         HEAP32[$19>>2] = 0;
         $30 = ((($19)) + 4|0);
         HEAP32[$30>>2] = 0;
         $31 = ((($19)) + 8|0);
         HEAP32[$31>>2] = $29;
         HEAP32[$16>>2] = $19;
         $32 = HEAP32[$0>>2]|0;
         $33 = HEAP32[$32>>2]|0;
         $34 = ($33|0)==(0|0);
         if ($34) {
          $38 = $19;
         } else {
          $35 = $33;
          HEAP32[$0>>2] = $35;
          $$pre$i$i$i$i = HEAP32[$16>>2]|0;
          $38 = $$pre$i$i$i$i;
         }
         $36 = ((($0)) + 4|0);
         $37 = HEAP32[$36>>2]|0;
         __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($37,$38);
         $39 = ((($0)) + 8|0);
         $40 = HEAP32[$39>>2]|0;
         $41 = (($40) + 1)|0;
         HEAP32[$39>>2] = $41;
         break L8;
        }
       } while(0);
       __THREW__ = 0;
       invoke_vi(637,($3|0));
       $52 = __THREW__; __THREW__ = 0;
       $53 = $52&1;
       if (!($53)) {
        $$0 = $eh$lpad$body$index2Z2D;$$05 = $eh$lpad$body$indexZ2D;
        break L6;
       }
       $58 = ___cxa_find_matching_catch_3(0|0)|0;
       $59 = tempRet0;
       ___clang_call_terminate($58);
       // unreachable;
      }
     } while(0);
     __THREW__ = 0;
     invoke_vi(637,($3|0));
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      label = 15;
     } else {
      __THREW__ = 0;
      invoke_vi(637,($4|0));
      $44 = __THREW__; __THREW__ = 0;
      $45 = $44&1;
      if ($45) {
       label = 14;
       break L4;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
      STACKTOP = sp;return;
     }
    }
   } while(0);
   if ((label|0) == 15) {
    $48 = ___cxa_find_matching_catch_2()|0;
    $49 = tempRet0;
    $$0 = $49;$$05 = $48;
   }
   __THREW__ = 0;
   invoke_vi(637,($4|0));
   $54 = __THREW__; __THREW__ = 0;
   $55 = $54&1;
   if ($55) {
    $58 = ___cxa_find_matching_catch_3(0|0)|0;
    $59 = tempRet0;
    ___clang_call_terminate($58);
    // unreachable;
   } else {
    $$1 = $$0;$$16 = $$05;
   }
  }
 } while(0);
 if ((label|0) == 14) {
  $46 = ___cxa_find_matching_catch_2()|0;
  $47 = tempRet0;
  $$1 = $47;$$16 = $46;
 }
 __THREW__ = 0;
 invoke_vi(637,($5|0));
 $56 = __THREW__; __THREW__ = 0;
 $57 = $56&1;
 if ($57) {
  $58 = ___cxa_find_matching_catch_3(0|0)|0;
  $59 = tempRet0;
  ___clang_call_terminate($58);
  // unreachable;
 } else {
  ___resumeException($$16|0);
  // unreachable;
 }
}
function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP5MacroEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE12__find_equalIS7_EERPNS_16__tree_node_baseIPvEESM_RKT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$be$in = 0, $$020 = 0, $$sroa$speculated$i$i$i$i = 0, $$sroa$speculated$i$i$i$i21 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  HEAP32[$1>>2] = $3;
  $$020 = $3;
  return ($$020|0);
 }
 $6 = ((($2)) + 11|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)<(0);
 $9 = ((($2)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $7&255;
 $12 = $8 ? $10 : $11;
 $13 = HEAP32[$2>>2]|0;
 $14 = $8 ? $13 : $2;
 $$0 = $4;
 while(1) {
  $15 = ((($$0)) + 16|0);
  $16 = ((($15)) + 11|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = ($17<<24>>24)<(0);
  $19 = ((($$0)) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $17&255;
  $22 = $18 ? $20 : $21;
  $23 = ($22>>>0)<($12>>>0);
  $$sroa$speculated$i$i$i$i21 = $23 ? $22 : $12;
  $24 = ($$sroa$speculated$i$i$i$i21|0)==(0);
  if ($24) {
   label = 5;
  } else {
   $25 = HEAP32[$15>>2]|0;
   $26 = $18 ? $25 : $15;
   $27 = (_memcmp($14,$26,$$sroa$speculated$i$i$i$i21)|0);
   $28 = ($27|0)==(0);
   if ($28) {
    label = 5;
   } else {
    $30 = ($27|0)<(0);
    if ($30) {
     label = 7;
    } else {
     label = 9;
    }
   }
  }
  if ((label|0) == 5) {
   label = 0;
   $29 = ($12>>>0)<($22>>>0);
   if ($29) {
    label = 7;
   } else {
    label = 9;
   }
  }
  if ((label|0) == 7) {
   label = 0;
   $31 = HEAP32[$$0>>2]|0;
   $32 = ($31|0)==(0|0);
   if ($32) {
    label = 8;
    break;
   } else {
    $$0$be$in = $31;
   }
  }
  else if ((label|0) == 9) {
   label = 0;
   $33 = ($12>>>0)<($22>>>0);
   $$sroa$speculated$i$i$i$i = $33 ? $12 : $22;
   $34 = ($$sroa$speculated$i$i$i$i|0)==(0);
   if ($34) {
    label = 11;
   } else {
    $35 = HEAP32[$15>>2]|0;
    $36 = $18 ? $35 : $15;
    $37 = (_memcmp($36,$14,$$sroa$speculated$i$i$i$i)|0);
    $38 = ($37|0)==(0);
    if ($38) {
     label = 11;
    } else {
     $39 = ($37|0)<(0);
     if (!($39)) {
      label = 16;
      break;
     }
    }
   }
   if ((label|0) == 11) {
    label = 0;
    if (!($23)) {
     label = 16;
     break;
    }
   }
   $40 = ((($$0)) + 4|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($41|0)==(0|0);
   if ($42) {
    label = 15;
    break;
   } else {
    $$0$be$in = $41;
   }
  }
  $$0 = $$0$be$in;
 }
 if ((label|0) == 8) {
  HEAP32[$1>>2] = $$0;
  $$020 = $$0;
  return ($$020|0);
 }
 else if ((label|0) == 15) {
  HEAP32[$1>>2] = $$0;
  $$020 = $40;
  return ($$020|0);
 }
 else if ((label|0) == 16) {
  HEAP32[$1>>2] = $$0;
  $$020 = $1;
  return ($$020|0);
 }
 return (0)|0;
}
function __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$061 = 0, $$pre = 0, $$pre67 = 0, $$pre69 = 0, $$pre70 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==($0|0);
 $3 = ((($1)) + 12|0);
 $4 = $2&1;
 HEAP8[$3>>0] = $4;
 if ($2) {
  return;
 } else {
  $$061 = $1;
 }
 while(1) {
  $5 = ((($$061)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($6)) + 12|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = ($8<<24>>24)==(0);
  if (!($9)) {
   label = 37;
   break;
  }
  $10 = ((($6)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==($6|0);
  if ($13) {
   $14 = ((($11)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0|0);
   if ($16) {
    label = 8;
    break;
   }
   $17 = ((($15)) + 12|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = ($18<<24>>24)==(0);
   if (!($19)) {
    label = 8;
    break;
   }
   HEAP8[$7>>0] = 1;
   $20 = ($11|0)==($0|0);
   $21 = ((($11)) + 12|0);
   $22 = $20&1;
   HEAP8[$21>>0] = $22;
   HEAP8[$17>>0] = 1;
  } else {
   $54 = ($12|0)==(0|0);
   if ($54) {
    label = 24;
    break;
   }
   $55 = ((($12)) + 12|0);
   $56 = HEAP8[$55>>0]|0;
   $57 = ($56<<24>>24)==(0);
   if (!($57)) {
    label = 24;
    break;
   }
   HEAP8[$7>>0] = 1;
   $58 = ($11|0)==($0|0);
   $59 = ((($11)) + 12|0);
   $60 = $58&1;
   HEAP8[$59>>0] = $60;
   HEAP8[$55>>0] = 1;
  }
  $23 = ($11|0)==($0|0);
  if ($23) {
   label = 37;
   break;
  } else {
   $$061 = $11;
  }
 }
 if ((label|0) == 8) {
  $24 = HEAP32[$6>>2]|0;
  $25 = ($24|0)==($$061|0);
  if ($25) {
   $39 = $6;$41 = $11;
  } else {
   $26 = $11;
   $27 = ((($6)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = HEAP32[$28>>2]|0;
   HEAP32[$27>>2] = $29;
   $30 = ($29|0)==(0|0);
   if ($30) {
    $33 = $26;
   } else {
    $31 = ((($29)) + 8|0);
    HEAP32[$31>>2] = $6;
    $$pre69 = HEAP32[$10>>2]|0;
    $33 = $$pre69;
   }
   $32 = ((($28)) + 8|0);
   HEAP32[$32>>2] = $33;
   $34 = HEAP32[$10>>2]|0;
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==($6|0);
   if ($36) {
    HEAP32[$34>>2] = $28;
   } else {
    $37 = ((($34)) + 4|0);
    HEAP32[$37>>2] = $28;
   }
   HEAP32[$28>>2] = $6;
   HEAP32[$10>>2] = $28;
   $$pre70 = HEAP32[$32>>2]|0;
   $39 = $28;$41 = $$pre70;
  }
  $38 = ((($39)) + 12|0);
  HEAP8[$38>>0] = 1;
  $40 = ((($41)) + 12|0);
  HEAP8[$40>>0] = 0;
  $42 = HEAP32[$41>>2]|0;
  $43 = ((($42)) + 4|0);
  $44 = HEAP32[$43>>2]|0;
  HEAP32[$41>>2] = $44;
  $45 = ($44|0)==(0|0);
  if (!($45)) {
   $46 = ((($44)) + 8|0);
   HEAP32[$46>>2] = $41;
  }
  $47 = ((($41)) + 8|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ((($42)) + 8|0);
  HEAP32[$49>>2] = $48;
  $50 = HEAP32[$47>>2]|0;
  $51 = HEAP32[$50>>2]|0;
  $52 = ($51|0)==($41|0);
  if ($52) {
   HEAP32[$50>>2] = $42;
  } else {
   $53 = ((($50)) + 4|0);
   HEAP32[$53>>2] = $42;
  }
  HEAP32[$43>>2] = $41;
  HEAP32[$47>>2] = $42;
  return;
 }
 else if ((label|0) == 24) {
  $61 = HEAP32[$6>>2]|0;
  $62 = ($61|0)==($$061|0);
  if ($62) {
   $63 = $11;
   $64 = HEAP32[$6>>2]|0;
   $65 = ((($64)) + 4|0);
   $66 = HEAP32[$65>>2]|0;
   HEAP32[$6>>2] = $66;
   $67 = ($66|0)==(0|0);
   if ($67) {
    $70 = $63;
   } else {
    $68 = ((($66)) + 8|0);
    HEAP32[$68>>2] = $6;
    $$pre = HEAP32[$10>>2]|0;
    $70 = $$pre;
   }
   $69 = ((($64)) + 8|0);
   HEAP32[$69>>2] = $70;
   $71 = HEAP32[$10>>2]|0;
   $72 = HEAP32[$71>>2]|0;
   $73 = ($72|0)==($6|0);
   if ($73) {
    HEAP32[$71>>2] = $64;
   } else {
    $74 = ((($71)) + 4|0);
    HEAP32[$74>>2] = $64;
   }
   HEAP32[$65>>2] = $6;
   HEAP32[$10>>2] = $64;
   $$pre67 = HEAP32[$69>>2]|0;
   $76 = $64;$78 = $$pre67;
  } else {
   $76 = $6;$78 = $11;
  }
  $75 = ((($76)) + 12|0);
  HEAP8[$75>>0] = 1;
  $77 = ((($78)) + 12|0);
  HEAP8[$77>>0] = 0;
  $79 = ((($78)) + 4|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = HEAP32[$80>>2]|0;
  HEAP32[$79>>2] = $81;
  $82 = ($81|0)==(0|0);
  if (!($82)) {
   $83 = ((($81)) + 8|0);
   HEAP32[$83>>2] = $78;
  }
  $84 = ((($78)) + 8|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = ((($80)) + 8|0);
  HEAP32[$86>>2] = $85;
  $87 = HEAP32[$84>>2]|0;
  $88 = HEAP32[$87>>2]|0;
  $89 = ($88|0)==($78|0);
  if ($89) {
   HEAP32[$87>>2] = $80;
  } else {
   $90 = ((($87)) + 4|0);
   HEAP32[$90>>2] = $80;
  }
  HEAP32[$80>>2] = $78;
  HEAP32[$84>>2] = $80;
  return;
 }
 else if ((label|0) == 37) {
  return;
 }
}
function __ZNK10MacroTable6ExistsERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP5MacroEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE14__count_uniqueIS7_EEjRKT_($0,$1)|0);
 $3 = ($2|0)!=(0);
 return ($3|0);
}
function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP5MacroEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE14__count_uniqueIS7_EEjRKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$in$be = 0, $$012 = 0, $$021 = 0, $$022 = 0, $$sroa$speculated$i$i$i$i = 0, $$sroa$speculated$i$i$i$i13 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $$021 = HEAP32[$2>>2]|0;
 $3 = ($$021|0)==(0|0);
 if ($3) {
  $$012 = 0;
  return ($$012|0);
 }
 $4 = ((($1)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 $7 = ((($1)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $5&255;
 $10 = $6 ? $8 : $9;
 $11 = HEAP32[$1>>2]|0;
 $12 = $6 ? $11 : $1;
 $$022 = $$021;
 while(1) {
  $13 = ((($$022)) + 16|0);
  $14 = ((($13)) + 11|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = ($15<<24>>24)<(0);
  $17 = ((($$022)) + 20|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $15&255;
  $20 = $16 ? $18 : $19;
  $21 = ($20>>>0)<($10>>>0);
  $$sroa$speculated$i$i$i$i13 = $21 ? $20 : $10;
  $22 = ($$sroa$speculated$i$i$i$i13|0)==(0);
  if ($22) {
   label = 5;
  } else {
   $23 = HEAP32[$13>>2]|0;
   $24 = $16 ? $23 : $13;
   $25 = (_memcmp($12,$24,$$sroa$speculated$i$i$i$i13)|0);
   $26 = ($25|0)==(0);
   if ($26) {
    label = 5;
   } else {
    $28 = ($25|0)<(0);
    if ($28) {
     label = 7;
    } else {
     label = 8;
    }
   }
  }
  if ((label|0) == 5) {
   label = 0;
   $27 = ($10>>>0)<($20>>>0);
   if ($27) {
    label = 7;
   } else {
    label = 8;
   }
  }
  if ((label|0) == 7) {
   label = 0;
   $$0$in$be = $$022;
  }
  else if ((label|0) == 8) {
   label = 0;
   $29 = ($10>>>0)<($20>>>0);
   $$sroa$speculated$i$i$i$i = $29 ? $10 : $20;
   $30 = ($$sroa$speculated$i$i$i$i|0)==(0);
   if ($30) {
    label = 10;
   } else {
    $31 = HEAP32[$13>>2]|0;
    $32 = $16 ? $31 : $13;
    $33 = (_memcmp($32,$12,$$sroa$speculated$i$i$i$i)|0);
    $34 = ($33|0)==(0);
    if ($34) {
     label = 10;
    } else {
     $35 = ($33|0)<(0);
     if (!($35)) {
      $$012 = 1;
      label = 14;
      break;
     }
    }
   }
   if ((label|0) == 10) {
    label = 0;
    if (!($21)) {
     $$012 = 1;
     label = 14;
     break;
    }
   }
   $36 = ((($$022)) + 4|0);
   $$0$in$be = $36;
  }
  $$0 = HEAP32[$$0$in$be>>2]|0;
  $37 = ($$0|0)==(0|0);
  if ($37) {
   $$012 = 0;
   label = 14;
   break;
  } else {
   $$022 = $$0;
  }
 }
 if ((label|0) == 14) {
  return ($$012|0);
 }
 return (0)|0;
}
function __ZNK10MacroTable3GetERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP5MacroEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE14__count_uniqueIS7_EEjRKT_($0,$1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = (__ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP5MacroEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE4findIS7_EENS_21__tree_const_iteratorISA_PNS_11__tree_nodeISA_PvEEiEERKT_($0,$1)|0);
 $5 = ((($4)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $$0 = $6;
 return ($$0|0);
}
function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP5MacroEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE4findIS7_EENS_21__tree_const_iteratorISA_PNS_11__tree_nodeISA_PvEEiEERKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$ph$lcssa$i = 0, $$0$ph15$i = 0, $$07$ph14$i = 0, $$0711$i = 0, $$sroa$0$0 = 0, $$sroa$speculated$i$i$i$i = 0, $$sroa$speculated$i$i$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 do {
  if (!($4)) {
   $5 = ((($1)) + 11|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)<(0);
   $8 = ((($1)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $6&255;
   $11 = $7 ? $9 : $10;
   $12 = HEAP32[$1>>2]|0;
   $13 = $7 ? $12 : $1;
   $$0$ph15$i = $2;$$07$ph14$i = $3;
   L3: while(1) {
    $$0711$i = $$07$ph14$i;
    while(1) {
     $14 = ((($$0711$i)) + 16|0);
     $15 = ((($14)) + 11|0);
     $16 = HEAP8[$15>>0]|0;
     $17 = ($16<<24>>24)<(0);
     $18 = ((($$0711$i)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = $16&255;
     $21 = $17 ? $19 : $20;
     $22 = ($11>>>0)<($21>>>0);
     $$sroa$speculated$i$i$i$i$i = $22 ? $11 : $21;
     $23 = ($$sroa$speculated$i$i$i$i$i|0)==(0);
     if ($23) {
      label = 6;
     } else {
      $24 = HEAP32[$14>>2]|0;
      $25 = $17 ? $24 : $14;
      $26 = (_memcmp($25,$13,$$sroa$speculated$i$i$i$i$i)|0);
      $27 = ($26|0)==(0);
      if ($27) {
       label = 6;
      } else {
       $29 = ($26|0)<(0);
       if (!($29)) {
        break;
       }
      }
     }
     if ((label|0) == 6) {
      label = 0;
      $28 = ($21>>>0)<($11>>>0);
      if (!($28)) {
       break;
      }
     }
     $32 = ((($$0711$i)) + 4|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = ($33|0)==(0|0);
     if ($34) {
      $$0$ph$lcssa$i = $$0$ph15$i;
      break L3;
     } else {
      $$0711$i = $33;
     }
    }
    $30 = HEAP32[$$0711$i>>2]|0;
    $31 = ($30|0)==(0|0);
    if ($31) {
     $$0$ph$lcssa$i = $$0711$i;
     break;
    } else {
     $$0$ph15$i = $$0711$i;$$07$ph14$i = $30;
    }
   }
   $35 = ($$0$ph$lcssa$i|0)==($2|0);
   if (!($35)) {
    $36 = ((($$0$ph$lcssa$i)) + 16|0);
    $37 = ((($36)) + 11|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = ($38<<24>>24)<(0);
    $40 = ((($$0$ph$lcssa$i)) + 20|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = $38&255;
    $43 = $39 ? $41 : $42;
    $44 = ($43>>>0)<($11>>>0);
    $$sroa$speculated$i$i$i$i = $44 ? $43 : $11;
    $45 = ($$sroa$speculated$i$i$i$i|0)==(0);
    if (!($45)) {
     $46 = HEAP32[$36>>2]|0;
     $47 = $39 ? $46 : $36;
     $48 = (_memcmp($13,$47,$$sroa$speculated$i$i$i$i)|0);
     $49 = ($48|0)==(0);
     if (!($49)) {
      $51 = ($48|0)<(0);
      if ($51) {
       break;
      } else {
       $$sroa$0$0 = $$0$ph$lcssa$i;
      }
      return ($$sroa$0$0|0);
     }
    }
    $50 = ($11>>>0)<($43>>>0);
    if (!($50)) {
     $$sroa$0$0 = $$0$ph$lcssa$i;
     return ($$sroa$0$0|0);
    }
   }
  }
 } while(0);
 $$sroa$0$0 = $2;
 return ($$sroa$0$0|0);
}
function _main($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0103 = 0, $$0105 = 0, $$0110 = 0, $$0114221 = 0, $$0116 = 0, $$0118220 = 0, $$0119$off0219 = 0, $$0121218 = 0, $$0123217 = 0, $$0125216 = 0, $$1 = 0, $$1104 = 0, $$1106 = 0, $$1111 = 0, $$1115 = 0, $$1120$off0 = 0, $$1122 = 0, $$1124 = 0, $$1126 = 0, $$2112 = 0;
 var $$3 = 0, $$3108 = 0, $$3113 = 0, $$4 = 0, $$4109 = 0, $$not = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24912|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(24912|0);
 $2 = sp + 24900|0;
 $3 = sp + 24896|0;
 $4 = sp + 24892|0;
 $5 = sp + 24888|0;
 $6 = sp + 24884|0;
 $7 = sp + 24880|0;
 $8 = sp + 24876|0;
 $9 = sp + 24872|0;
 $10 = sp + 24868|0;
 $11 = sp + 24864|0;
 $12 = sp + 24860|0;
 $13 = sp + 24856|0;
 $14 = sp + 24852|0;
 $15 = sp + 24848|0;
 $16 = sp + 24844|0;
 $17 = sp + 24840|0;
 $18 = sp + 24836|0;
 $19 = sp + 24832|0;
 $20 = sp + 24828|0;
 $21 = sp;
 $22 = sp + 24816|0;
 __ZN10GlobalData6CreateEv();
 $23 = ($0|0)>(1);
 do {
  if ($23) {
   $$0114221 = 0;$$0118220 = 1;$$0119$off0219 = 0;$$0121218 = 0;$$0123217 = 0;$$0125216 = 0;
   L2: while(1) {
    L4: do {
     switch ($$0121218|0) {
     case 0:  {
      $24 = (($1) + ($$0118220<<2)|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = (_strcmp($25,25132)|0);
      $27 = ($26|0)==(0);
      if ($27) {
       $$1115 = $$0114221;$$1120$off0 = $$0119$off0219;$$1122 = 1;$$1124 = $$0123217;$$1126 = $$0125216;
      } else {
       $28 = (_strcmp($25,25135)|0);
       $29 = ($28|0)==(0);
       if ($29) {
        $$1115 = $$0114221;$$1120$off0 = $$0119$off0219;$$1122 = 2;$$1124 = $$0123217;$$1126 = $$0125216;
       } else {
        $30 = (_strcmp($25,25138)|0);
        $31 = ($30|0)==(0);
        if ($31) {
         $$1115 = $$0114221;$$1120$off0 = $$0119$off0219;$$1122 = 4;$$1124 = $$0123217;$$1126 = $$0125216;
        } else {
         $32 = (_strcmp($25,25142)|0);
         $33 = ($32|0)==(0);
         if ($33) {
          $$1115 = $$0114221;$$1120$off0 = $$0119$off0219;$$1122 = 3;$$1124 = $$0123217;$$1126 = $$0125216;
         } else {
          $34 = (_strcmp($25,25146)|0);
          $35 = ($34|0)==(0);
          if ($35) {
           $$1115 = $$0114221;$$1120$off0 = $$0119$off0219;$$1122 = 5;$$1124 = $$0123217;$$1126 = $$0125216;
          } else {
           $36 = (_strcmp($25,25152)|0);
           $37 = ($36|0)==(0);
           if ($37) {
            $$1115 = $$0114221;$$1120$off0 = $$0119$off0219;$$1122 = 6;$$1124 = $$0123217;$$1126 = $$0125216;
           } else {
            $38 = (_strcmp($25,25157)|0);
            $39 = ($38|0)==(0);
            if (!($39)) {
             $43 = (_strcmp($25,25160)|0);
             $44 = ($43|0)==(0);
             if ($44) {
              $$1115 = $$0114221;$$1120$off0 = 1;$$1122 = 0;$$1124 = $$0123217;$$1126 = $$0125216;
              break L4;
             } else {
              label = 14;
              break L2;
             }
            }
            $40 = HEAP32[9088]|0;
            $41 = ($40|0)==(0|0);
            if ($41) {
             label = 11;
             break L2;
            }
            $42 = ((($40)) + 8|0);
            HEAP8[$42>>0] = 1;
            $$1115 = $$0114221;$$1120$off0 = $$0119$off0219;$$1122 = 0;$$1124 = $$0123217;$$1126 = $$0125216;
           }
          }
         }
        }
       }
      }
      break;
     }
     case 1:  {
      $343 = (($1) + ($$0118220<<2)|0);
      $344 = HEAP32[$343>>2]|0;
      $$1115 = $344;$$1120$off0 = $$0119$off0219;$$1122 = 0;$$1124 = $$0123217;$$1126 = $$0125216;
      break;
     }
     case 2:  {
      $345 = HEAP32[9088]|0;
      $346 = ($345|0)==(0|0);
      if ($346) {
       label = 89;
       break L2;
      }
      $347 = (($1) + ($$0118220<<2)|0);
      $348 = HEAP32[$347>>2]|0;
      $349 = ((($345)) + 24|0);
      HEAP32[$349>>2] = $348;
      $$1115 = $$0114221;$$1120$off0 = $$0119$off0219;$$1122 = 0;$$1124 = $$0123217;$$1126 = $$0125216;
      break;
     }
     case 4:  {
      $350 = HEAP32[9088]|0;
      $351 = ($350|0)==(0|0);
      if ($351) {
       label = 92;
       break L2;
      }
      $352 = (($1) + ($$0118220<<2)|0);
      $353 = HEAP32[$352>>2]|0;
      $354 = ((($350)) + 9|0);
      HEAP8[$354>>0] = 1;
      $$1115 = $$0114221;$$1120$off0 = $$0119$off0219;$$1122 = 0;$$1124 = $353;$$1126 = $$0125216;
      break;
     }
     case 3:  {
      $355 = (($1) + ($$0118220<<2)|0);
      $356 = HEAP32[$355>>2]|0;
      $$1115 = $$0114221;$$1120$off0 = $$0119$off0219;$$1122 = 0;$$1124 = $$0123217;$$1126 = $356;
      break;
     }
     case 5:  {
      $357 = HEAP32[9088]|0;
      $358 = ($357|0)==(0|0);
      if ($358) {
       label = 96;
       break L2;
      }
      $359 = (($1) + ($$0118220<<2)|0);
      $360 = HEAP32[$359>>2]|0;
      $361 = ((($357)) + 4|0);
      HEAP32[$361>>2] = $360;
      $$1115 = $$0114221;$$1120$off0 = $$0119$off0219;$$1122 = 0;$$1124 = $$0123217;$$1126 = $$0125216;
      break;
     }
     case 6:  {
      $362 = HEAP32[9088]|0;
      $363 = ($362|0)==(0|0);
      if ($363) {
       label = 99;
       break L2;
      }
      $364 = (($1) + ($$0118220<<2)|0);
      $365 = HEAP32[$364>>2]|0;
      $366 = (_strtol($365,0,10)|0);
      $367 = ((($362)) + 32|0);
      HEAP32[$367>>2] = $366;
      $$1115 = $$0114221;$$1120$off0 = $$0119$off0219;$$1122 = 0;$$1124 = $$0123217;$$1126 = $$0125216;
      break;
     }
     default: {
      $$1115 = $$0114221;$$1120$off0 = $$0119$off0219;$$1122 = $$0121218;$$1124 = $$0123217;$$1126 = $$0125216;
     }
     }
    } while(0);
    $368 = (($$0118220) + 1)|0;
    $369 = ($368|0)<($0|0);
    if ($369) {
     $$0114221 = $$1115;$$0118220 = $368;$$0119$off0219 = $$1120$off0;$$0121218 = $$1122;$$0123217 = $$1124;$$0125216 = $$1126;
    } else {
     label = 102;
     break;
    }
   }
   if ((label|0) == 11) {
    ___assert_fail((27040|0),(27060|0),38,(27075|0));
    // unreachable;
   }
   else if ((label|0) == 14) {
    $45 = (_strcmp($25,25163)|0);
    $46 = ($45|0)==(0);
    if (!($46)) {
     $298 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(40008,25689,15)|0);
     $299 = HEAP32[$24>>2]|0;
     $300 = (_strlen($299)|0);
     $301 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($298,$299,$300)|0);
     $302 = HEAP32[$301>>2]|0;
     $303 = ((($302)) + -12|0);
     $304 = HEAP32[$303>>2]|0;
     $305 = (($301) + ($304)|0);
     $306 = (__ZNKSt3__28ios_base6getlocEv($305)|0);
     HEAP32[$6>>2] = $306;
     __THREW__ = 0;
     $307 = (invoke_iii(659,($6|0),(40712|0))|0);
     $308 = __THREW__; __THREW__ = 0;
     $309 = $308&1;
     if (!($309)) {
      $310 = HEAP32[$307>>2]|0;
      $311 = ((($310)) + 28|0);
      $312 = HEAP32[$311>>2]|0;
      __THREW__ = 0;
      $313 = (invoke_iii($312|0,($307|0),10)|0);
      $314 = __THREW__; __THREW__ = 0;
      $315 = $314&1;
      if (!($315)) {
       __ZNSt3__26localeD2Ev($6);
       (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($301,$313)|0);
       (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($301)|0);
       $322 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(40008,25705,31)|0);
       $323 = HEAP32[$322>>2]|0;
       $324 = ((($323)) + -12|0);
       $325 = HEAP32[$324>>2]|0;
       $326 = (($322) + ($325)|0);
       $327 = (__ZNKSt3__28ios_base6getlocEv($326)|0);
       HEAP32[$20>>2] = $327;
       __THREW__ = 0;
       $328 = (invoke_iii(659,($20|0),(40712|0))|0);
       $329 = __THREW__; __THREW__ = 0;
       $330 = $329&1;
       if (!($330)) {
        $331 = HEAP32[$328>>2]|0;
        $332 = ((($331)) + 28|0);
        $333 = HEAP32[$332>>2]|0;
        __THREW__ = 0;
        $334 = (invoke_iii($333|0,($328|0),10)|0);
        $335 = __THREW__; __THREW__ = 0;
        $336 = $335&1;
        if (!($336)) {
         __ZNSt3__26localeD2Ev($20);
         (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($322,$334)|0);
         (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($322)|0);
         $$1 = 1;
         STACKTOP = sp;return ($$1|0);
        }
       }
       $337 = ___cxa_find_matching_catch_2()|0;
       $338 = tempRet0;
       __THREW__ = 0;
       invoke_vi(660,($20|0));
       $339 = __THREW__; __THREW__ = 0;
       $340 = $339&1;
       if ($340) {
        $341 = ___cxa_find_matching_catch_3(0|0)|0;
        $342 = tempRet0;
        ___clang_call_terminate($341);
        // unreachable;
       } else {
        ___resumeException($337|0);
        // unreachable;
       }
      }
     }
     $316 = ___cxa_find_matching_catch_2()|0;
     $317 = tempRet0;
     __THREW__ = 0;
     invoke_vi(660,($6|0));
     $318 = __THREW__; __THREW__ = 0;
     $319 = $318&1;
     if ($319) {
      $320 = ___cxa_find_matching_catch_3(0|0)|0;
      $321 = tempRet0;
      ___clang_call_terminate($320);
      // unreachable;
     } else {
      ___resumeException($316|0);
      // unreachable;
     }
    }
    $47 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(39840,25170,12)|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ((($48)) + -12|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (($47) + ($50)|0);
    $52 = (__ZNKSt3__28ios_base6getlocEv($51)|0);
    HEAP32[$18>>2] = $52;
    __THREW__ = 0;
    $53 = (invoke_iii(659,($18|0),(40712|0))|0);
    $54 = __THREW__; __THREW__ = 0;
    $55 = $54&1;
    if (!($55)) {
     $56 = HEAP32[$53>>2]|0;
     $57 = ((($56)) + 28|0);
     $58 = HEAP32[$57>>2]|0;
     __THREW__ = 0;
     $59 = (invoke_iii($58|0,($53|0),10)|0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if (!($61)) {
      __ZNSt3__26localeD2Ev($18);
      (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($47,$59)|0);
      (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($47)|0);
      $68 = HEAP32[$47>>2]|0;
      $69 = ((($68)) + -12|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = (($47) + ($70)|0);
      $72 = (__ZNKSt3__28ios_base6getlocEv($71)|0);
      HEAP32[$17>>2] = $72;
      __THREW__ = 0;
      $73 = (invoke_iii(659,($17|0),(40712|0))|0);
      $74 = __THREW__; __THREW__ = 0;
      $75 = $74&1;
      if (!($75)) {
       $76 = HEAP32[$73>>2]|0;
       $77 = ((($76)) + 28|0);
       $78 = HEAP32[$77>>2]|0;
       __THREW__ = 0;
       $79 = (invoke_iii($78|0,($73|0),10)|0);
       $80 = __THREW__; __THREW__ = 0;
       $81 = $80&1;
       if (!($81)) {
        __ZNSt3__26localeD2Ev($17);
        (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($47,$79)|0);
        (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($47)|0);
        $88 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(39840,25183,17)|0);
        $89 = HEAP32[$88>>2]|0;
        $90 = ((($89)) + -12|0);
        $91 = HEAP32[$90>>2]|0;
        $92 = (($88) + ($91)|0);
        $93 = (__ZNKSt3__28ios_base6getlocEv($92)|0);
        HEAP32[$16>>2] = $93;
        __THREW__ = 0;
        $94 = (invoke_iii(659,($16|0),(40712|0))|0);
        $95 = __THREW__; __THREW__ = 0;
        $96 = $95&1;
        if (!($96)) {
         $97 = HEAP32[$94>>2]|0;
         $98 = ((($97)) + 28|0);
         $99 = HEAP32[$98>>2]|0;
         __THREW__ = 0;
         $100 = (invoke_iii($99|0,($94|0),10)|0);
         $101 = __THREW__; __THREW__ = 0;
         $102 = $101&1;
         if (!($102)) {
          __ZNSt3__26localeD2Ev($16);
          (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($88,$100)|0);
          (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($88)|0);
          $109 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(39840,25201,39)|0);
          $110 = HEAP32[$109>>2]|0;
          $111 = ((($110)) + -12|0);
          $112 = HEAP32[$111>>2]|0;
          $113 = (($109) + ($112)|0);
          $114 = (__ZNKSt3__28ios_base6getlocEv($113)|0);
          HEAP32[$15>>2] = $114;
          __THREW__ = 0;
          $115 = (invoke_iii(659,($15|0),(40712|0))|0);
          $116 = __THREW__; __THREW__ = 0;
          $117 = $116&1;
          if (!($117)) {
           $118 = HEAP32[$115>>2]|0;
           $119 = ((($118)) + 28|0);
           $120 = HEAP32[$119>>2]|0;
           __THREW__ = 0;
           $121 = (invoke_iii($120|0,($115|0),10)|0);
           $122 = __THREW__; __THREW__ = 0;
           $123 = $122&1;
           if (!($123)) {
            __ZNSt3__26localeD2Ev($15);
            (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($109,$121)|0);
            (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($109)|0);
            $130 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(39840,25241,76)|0);
            $131 = HEAP32[$130>>2]|0;
            $132 = ((($131)) + -12|0);
            $133 = HEAP32[$132>>2]|0;
            $134 = (($130) + ($133)|0);
            $135 = (__ZNKSt3__28ios_base6getlocEv($134)|0);
            HEAP32[$14>>2] = $135;
            __THREW__ = 0;
            $136 = (invoke_iii(659,($14|0),(40712|0))|0);
            $137 = __THREW__; __THREW__ = 0;
            $138 = $137&1;
            if (!($138)) {
             $139 = HEAP32[$136>>2]|0;
             $140 = ((($139)) + 28|0);
             $141 = HEAP32[$140>>2]|0;
             __THREW__ = 0;
             $142 = (invoke_iii($141|0,($136|0),10)|0);
             $143 = __THREW__; __THREW__ = 0;
             $144 = $143&1;
             if (!($144)) {
              __ZNSt3__26localeD2Ev($14);
              (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($130,$142)|0);
              (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($130)|0);
              $151 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(39840,25318,56)|0);
              $152 = HEAP32[$151>>2]|0;
              $153 = ((($152)) + -12|0);
              $154 = HEAP32[$153>>2]|0;
              $155 = (($151) + ($154)|0);
              $156 = (__ZNKSt3__28ios_base6getlocEv($155)|0);
              HEAP32[$13>>2] = $156;
              __THREW__ = 0;
              $157 = (invoke_iii(659,($13|0),(40712|0))|0);
              $158 = __THREW__; __THREW__ = 0;
              $159 = $158&1;
              do {
               if (!($159)) {
                $160 = HEAP32[$157>>2]|0;
                $161 = ((($160)) + 28|0);
                $162 = HEAP32[$161>>2]|0;
                __THREW__ = 0;
                $163 = (invoke_iii($162|0,($157|0),10)|0);
                $164 = __THREW__; __THREW__ = 0;
                $165 = $164&1;
                if ($165) {
                 break;
                }
                __ZNSt3__26localeD2Ev($13);
                (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($151,$163)|0);
                (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($151)|0);
                $172 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(39840,25375,51)|0);
                $173 = HEAP32[$172>>2]|0;
                $174 = ((($173)) + -12|0);
                $175 = HEAP32[$174>>2]|0;
                $176 = (($172) + ($175)|0);
                $177 = (__ZNKSt3__28ios_base6getlocEv($176)|0);
                HEAP32[$12>>2] = $177;
                __THREW__ = 0;
                $178 = (invoke_iii(659,($12|0),(40712|0))|0);
                $179 = __THREW__; __THREW__ = 0;
                $180 = $179&1;
                do {
                 if (!($180)) {
                  $181 = HEAP32[$178>>2]|0;
                  $182 = ((($181)) + 28|0);
                  $183 = HEAP32[$182>>2]|0;
                  __THREW__ = 0;
                  $184 = (invoke_iii($183|0,($178|0),10)|0);
                  $185 = __THREW__; __THREW__ = 0;
                  $186 = $185&1;
                  if ($186) {
                   break;
                  }
                  __ZNSt3__26localeD2Ev($12);
                  (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($172,$184)|0);
                  (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($172)|0);
                  $193 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(39840,25427,73)|0);
                  $194 = HEAP32[$193>>2]|0;
                  $195 = ((($194)) + -12|0);
                  $196 = HEAP32[$195>>2]|0;
                  $197 = (($193) + ($196)|0);
                  $198 = (__ZNKSt3__28ios_base6getlocEv($197)|0);
                  HEAP32[$11>>2] = $198;
                  __THREW__ = 0;
                  $199 = (invoke_iii(659,($11|0),(40712|0))|0);
                  $200 = __THREW__; __THREW__ = 0;
                  $201 = $200&1;
                  do {
                   if (!($201)) {
                    $202 = HEAP32[$199>>2]|0;
                    $203 = ((($202)) + 28|0);
                    $204 = HEAP32[$203>>2]|0;
                    __THREW__ = 0;
                    $205 = (invoke_iii($204|0,($199|0),10)|0);
                    $206 = __THREW__; __THREW__ = 0;
                    $207 = $206&1;
                    if ($207) {
                     break;
                    }
                    __ZNSt3__26localeD2Ev($11);
                    (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($193,$205)|0);
                    (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($193)|0);
                    $214 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(39840,25501,65)|0);
                    $215 = HEAP32[$214>>2]|0;
                    $216 = ((($215)) + -12|0);
                    $217 = HEAP32[$216>>2]|0;
                    $218 = (($214) + ($217)|0);
                    $219 = (__ZNKSt3__28ios_base6getlocEv($218)|0);
                    HEAP32[$10>>2] = $219;
                    __THREW__ = 0;
                    $220 = (invoke_iii(659,($10|0),(40712|0))|0);
                    $221 = __THREW__; __THREW__ = 0;
                    $222 = $221&1;
                    do {
                     if (!($222)) {
                      $223 = HEAP32[$220>>2]|0;
                      $224 = ((($223)) + 28|0);
                      $225 = HEAP32[$224>>2]|0;
                      __THREW__ = 0;
                      $226 = (invoke_iii($225|0,($220|0),10)|0);
                      $227 = __THREW__; __THREW__ = 0;
                      $228 = $227&1;
                      if ($228) {
                       break;
                      }
                      __ZNSt3__26localeD2Ev($10);
                      (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($214,$226)|0);
                      (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($214)|0);
                      $235 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(39840,25567,30)|0);
                      $236 = HEAP32[$235>>2]|0;
                      $237 = ((($236)) + -12|0);
                      $238 = HEAP32[$237>>2]|0;
                      $239 = (($235) + ($238)|0);
                      $240 = (__ZNKSt3__28ios_base6getlocEv($239)|0);
                      HEAP32[$9>>2] = $240;
                      __THREW__ = 0;
                      $241 = (invoke_iii(659,($9|0),(40712|0))|0);
                      $242 = __THREW__; __THREW__ = 0;
                      $243 = $242&1;
                      do {
                       if (!($243)) {
                        $244 = HEAP32[$241>>2]|0;
                        $245 = ((($244)) + 28|0);
                        $246 = HEAP32[$245>>2]|0;
                        __THREW__ = 0;
                        $247 = (invoke_iii($246|0,($241|0),10)|0);
                        $248 = __THREW__; __THREW__ = 0;
                        $249 = $248&1;
                        if ($249) {
                         break;
                        }
                        __ZNSt3__26localeD2Ev($9);
                        (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($235,$247)|0);
                        (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($235)|0);
                        $256 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(39840,25598,54)|0);
                        $257 = HEAP32[$256>>2]|0;
                        $258 = ((($257)) + -12|0);
                        $259 = HEAP32[$258>>2]|0;
                        $260 = (($256) + ($259)|0);
                        $261 = (__ZNKSt3__28ios_base6getlocEv($260)|0);
                        HEAP32[$8>>2] = $261;
                        __THREW__ = 0;
                        $262 = (invoke_iii(659,($8|0),(40712|0))|0);
                        $263 = __THREW__; __THREW__ = 0;
                        $264 = $263&1;
                        do {
                         if (!($264)) {
                          $265 = HEAP32[$262>>2]|0;
                          $266 = ((($265)) + 28|0);
                          $267 = HEAP32[$266>>2]|0;
                          __THREW__ = 0;
                          $268 = (invoke_iii($267|0,($262|0),10)|0);
                          $269 = __THREW__; __THREW__ = 0;
                          $270 = $269&1;
                          if ($270) {
                           break;
                          }
                          __ZNSt3__26localeD2Ev($8);
                          (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($256,$268)|0);
                          (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($256)|0);
                          $277 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(39840,25653,35)|0);
                          $278 = HEAP32[$277>>2]|0;
                          $279 = ((($278)) + -12|0);
                          $280 = HEAP32[$279>>2]|0;
                          $281 = (($277) + ($280)|0);
                          $282 = (__ZNKSt3__28ios_base6getlocEv($281)|0);
                          HEAP32[$7>>2] = $282;
                          __THREW__ = 0;
                          $283 = (invoke_iii(659,($7|0),(40712|0))|0);
                          $284 = __THREW__; __THREW__ = 0;
                          $285 = $284&1;
                          do {
                           if (!($285)) {
                            $286 = HEAP32[$283>>2]|0;
                            $287 = ((($286)) + 28|0);
                            $288 = HEAP32[$287>>2]|0;
                            __THREW__ = 0;
                            $289 = (invoke_iii($288|0,($283|0),10)|0);
                            $290 = __THREW__; __THREW__ = 0;
                            $291 = $290&1;
                            if ($291) {
                             break;
                            }
                            __ZNSt3__26localeD2Ev($7);
                            (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($277,$289)|0);
                            (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($277)|0);
                            $$1 = 0;
                            STACKTOP = sp;return ($$1|0);
                           }
                          } while(0);
                          $292 = ___cxa_find_matching_catch_2()|0;
                          $293 = tempRet0;
                          __THREW__ = 0;
                          invoke_vi(660,($7|0));
                          $294 = __THREW__; __THREW__ = 0;
                          $295 = $294&1;
                          if ($295) {
                           $296 = ___cxa_find_matching_catch_3(0|0)|0;
                           $297 = tempRet0;
                           ___clang_call_terminate($296);
                           // unreachable;
                          } else {
                           ___resumeException($292|0);
                           // unreachable;
                          }
                         }
                        } while(0);
                        $271 = ___cxa_find_matching_catch_2()|0;
                        $272 = tempRet0;
                        __THREW__ = 0;
                        invoke_vi(660,($8|0));
                        $273 = __THREW__; __THREW__ = 0;
                        $274 = $273&1;
                        if ($274) {
                         $275 = ___cxa_find_matching_catch_3(0|0)|0;
                         $276 = tempRet0;
                         ___clang_call_terminate($275);
                         // unreachable;
                        } else {
                         ___resumeException($271|0);
                         // unreachable;
                        }
                       }
                      } while(0);
                      $250 = ___cxa_find_matching_catch_2()|0;
                      $251 = tempRet0;
                      __THREW__ = 0;
                      invoke_vi(660,($9|0));
                      $252 = __THREW__; __THREW__ = 0;
                      $253 = $252&1;
                      if ($253) {
                       $254 = ___cxa_find_matching_catch_3(0|0)|0;
                       $255 = tempRet0;
                       ___clang_call_terminate($254);
                       // unreachable;
                      } else {
                       ___resumeException($250|0);
                       // unreachable;
                      }
                     }
                    } while(0);
                    $229 = ___cxa_find_matching_catch_2()|0;
                    $230 = tempRet0;
                    __THREW__ = 0;
                    invoke_vi(660,($10|0));
                    $231 = __THREW__; __THREW__ = 0;
                    $232 = $231&1;
                    if ($232) {
                     $233 = ___cxa_find_matching_catch_3(0|0)|0;
                     $234 = tempRet0;
                     ___clang_call_terminate($233);
                     // unreachable;
                    } else {
                     ___resumeException($229|0);
                     // unreachable;
                    }
                   }
                  } while(0);
                  $208 = ___cxa_find_matching_catch_2()|0;
                  $209 = tempRet0;
                  __THREW__ = 0;
                  invoke_vi(660,($11|0));
                  $210 = __THREW__; __THREW__ = 0;
                  $211 = $210&1;
                  if ($211) {
                   $212 = ___cxa_find_matching_catch_3(0|0)|0;
                   $213 = tempRet0;
                   ___clang_call_terminate($212);
                   // unreachable;
                  } else {
                   ___resumeException($208|0);
                   // unreachable;
                  }
                 }
                } while(0);
                $187 = ___cxa_find_matching_catch_2()|0;
                $188 = tempRet0;
                __THREW__ = 0;
                invoke_vi(660,($12|0));
                $189 = __THREW__; __THREW__ = 0;
                $190 = $189&1;
                if ($190) {
                 $191 = ___cxa_find_matching_catch_3(0|0)|0;
                 $192 = tempRet0;
                 ___clang_call_terminate($191);
                 // unreachable;
                } else {
                 ___resumeException($187|0);
                 // unreachable;
                }
               }
              } while(0);
              $166 = ___cxa_find_matching_catch_2()|0;
              $167 = tempRet0;
              __THREW__ = 0;
              invoke_vi(660,($13|0));
              $168 = __THREW__; __THREW__ = 0;
              $169 = $168&1;
              if ($169) {
               $170 = ___cxa_find_matching_catch_3(0|0)|0;
               $171 = tempRet0;
               ___clang_call_terminate($170);
               // unreachable;
              } else {
               ___resumeException($166|0);
               // unreachable;
              }
             }
            }
            $145 = ___cxa_find_matching_catch_2()|0;
            $146 = tempRet0;
            __THREW__ = 0;
            invoke_vi(660,($14|0));
            $147 = __THREW__; __THREW__ = 0;
            $148 = $147&1;
            if ($148) {
             $149 = ___cxa_find_matching_catch_3(0|0)|0;
             $150 = tempRet0;
             ___clang_call_terminate($149);
             // unreachable;
            } else {
             ___resumeException($145|0);
             // unreachable;
            }
           }
          }
          $124 = ___cxa_find_matching_catch_2()|0;
          $125 = tempRet0;
          __THREW__ = 0;
          invoke_vi(660,($15|0));
          $126 = __THREW__; __THREW__ = 0;
          $127 = $126&1;
          if ($127) {
           $128 = ___cxa_find_matching_catch_3(0|0)|0;
           $129 = tempRet0;
           ___clang_call_terminate($128);
           // unreachable;
          } else {
           ___resumeException($124|0);
           // unreachable;
          }
         }
        }
        $103 = ___cxa_find_matching_catch_2()|0;
        $104 = tempRet0;
        __THREW__ = 0;
        invoke_vi(660,($16|0));
        $105 = __THREW__; __THREW__ = 0;
        $106 = $105&1;
        if ($106) {
         $107 = ___cxa_find_matching_catch_3(0|0)|0;
         $108 = tempRet0;
         ___clang_call_terminate($107);
         // unreachable;
        } else {
         ___resumeException($103|0);
         // unreachable;
        }
       }
      }
      $82 = ___cxa_find_matching_catch_2()|0;
      $83 = tempRet0;
      __THREW__ = 0;
      invoke_vi(660,($17|0));
      $84 = __THREW__; __THREW__ = 0;
      $85 = $84&1;
      if ($85) {
       $86 = ___cxa_find_matching_catch_3(0|0)|0;
       $87 = tempRet0;
       ___clang_call_terminate($86);
       // unreachable;
      } else {
       ___resumeException($82|0);
       // unreachable;
      }
     }
    }
    $62 = ___cxa_find_matching_catch_2()|0;
    $63 = tempRet0;
    __THREW__ = 0;
    invoke_vi(660,($18|0));
    $64 = __THREW__; __THREW__ = 0;
    $65 = $64&1;
    if ($65) {
     $66 = ___cxa_find_matching_catch_3(0|0)|0;
     $67 = tempRet0;
     ___clang_call_terminate($66);
     // unreachable;
    } else {
     ___resumeException($62|0);
     // unreachable;
    }
   }
   else if ((label|0) == 89) {
    ___assert_fail((27040|0),(27060|0),38,(27075|0));
    // unreachable;
   }
   else if ((label|0) == 92) {
    ___assert_fail((27040|0),(27060|0),38,(27075|0));
    // unreachable;
   }
   else if ((label|0) == 96) {
    ___assert_fail((27040|0),(27060|0),38,(27075|0));
    // unreachable;
   }
   else if ((label|0) == 99) {
    ___assert_fail((27040|0),(27060|0),38,(27075|0));
    // unreachable;
   }
   else if ((label|0) == 102) {
    $370 = ($$1122|0)==(0);
    if (!($370)) {
     $371 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(40008,25737,17)|0);
     $372 = HEAP32[$371>>2]|0;
     $373 = ((($372)) + -12|0);
     $374 = HEAP32[$373>>2]|0;
     $375 = (($371) + ($374)|0);
     $376 = (__ZNKSt3__28ios_base6getlocEv($375)|0);
     HEAP32[$5>>2] = $376;
     __THREW__ = 0;
     $377 = (invoke_iii(659,($5|0),(40712|0))|0);
     $378 = __THREW__; __THREW__ = 0;
     $379 = $378&1;
     if (!($379)) {
      $380 = HEAP32[$377>>2]|0;
      $381 = ((($380)) + 28|0);
      $382 = HEAP32[$381>>2]|0;
      __THREW__ = 0;
      $383 = (invoke_iii($382|0,($377|0),10)|0);
      $384 = __THREW__; __THREW__ = 0;
      $385 = $384&1;
      if (!($385)) {
       __ZNSt3__26localeD2Ev($5);
       (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($371,$383)|0);
       (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($371)|0);
       $392 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(40008,25755,30)|0);
       $393 = HEAP32[$392>>2]|0;
       $394 = ((($393)) + -12|0);
       $395 = HEAP32[$394>>2]|0;
       $396 = (($392) + ($395)|0);
       $397 = (__ZNKSt3__28ios_base6getlocEv($396)|0);
       HEAP32[$4>>2] = $397;
       __THREW__ = 0;
       $398 = (invoke_iii(659,($4|0),(40712|0))|0);
       $399 = __THREW__; __THREW__ = 0;
       $400 = $399&1;
       if (!($400)) {
        $401 = HEAP32[$398>>2]|0;
        $402 = ((($401)) + 28|0);
        $403 = HEAP32[$402>>2]|0;
        __THREW__ = 0;
        $404 = (invoke_iii($403|0,($398|0),10)|0);
        $405 = __THREW__; __THREW__ = 0;
        $406 = $405&1;
        if (!($406)) {
         __ZNSt3__26localeD2Ev($4);
         (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($392,$404)|0);
         (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($392)|0);
         $$1 = 1;
         STACKTOP = sp;return ($$1|0);
        }
       }
       $407 = ___cxa_find_matching_catch_2()|0;
       $408 = tempRet0;
       __THREW__ = 0;
       invoke_vi(660,($4|0));
       $409 = __THREW__; __THREW__ = 0;
       $410 = $409&1;
       if ($410) {
        $411 = ___cxa_find_matching_catch_3(0|0)|0;
        $412 = tempRet0;
        ___clang_call_terminate($411);
        // unreachable;
       } else {
        ___resumeException($407|0);
        // unreachable;
       }
      }
     }
     $386 = ___cxa_find_matching_catch_2()|0;
     $387 = tempRet0;
     __THREW__ = 0;
     invoke_vi(660,($5|0));
     $388 = __THREW__; __THREW__ = 0;
     $389 = $388&1;
     if ($389) {
      $390 = ___cxa_find_matching_catch_3(0|0)|0;
      $391 = tempRet0;
      ___clang_call_terminate($390);
      // unreachable;
     } else {
      ___resumeException($386|0);
      // unreachable;
     }
    }
    $413 = ($$1115|0)==(0|0);
    if ($413) {
     break;
    }
    $435 = ($$1126|0)!=(0|0);
    $436 = ($$1124|0)==(0|0);
    $or$cond = $435 & $436;
    do {
     if (!($or$cond)) {
      $437 = ($$1124|0)!=(0|0);
      $or$cond3 = $435 & $437;
      if ($or$cond3) {
       $438 = (_strcmp($$1126,$$1124)|0);
       $439 = ($438|0)==(0);
       if ($439) {
        break;
       }
      }
      __ZN11SymbolTable6CreateEv();
      __ZN10ObjectCode6CreateEv();
      __ZN10MacroTable6CreateEv();
      __Z16SetupBASICTablesv();
      $461 = (_time((0|0))|0);
      $462 = HEAP32[9088]|0;
      $463 = ($462|0)==(0|0);
      L53: do {
       if ($463) {
        __THREW__ = 0;
        invoke_viiii(680,(27040|0),(27060|0),38,(27075|0));
        $464 = __THREW__; __THREW__ = 0;
        $$0110 = 0;
        label = 138;
       } else {
        $465 = ((($462)) + 9|0);
        $466 = HEAP8[$465>>0]|0;
        $467 = ($466<<24>>24)==(0);
        do {
         if ($467) {
          $$1111 = 0;$482 = $462;
         } else {
          __THREW__ = 0;
          $468 = (invoke_ii(716,888)|0);
          $469 = __THREW__; __THREW__ = 0;
          $470 = $469&1;
          if ($470) {
           $$0110 = 0;
           label = 138;
           break L53;
          }
          __THREW__ = 0;
          invoke_viii(717,($468|0),($$1124|0),($$1126|0));
          $471 = __THREW__; __THREW__ = 0;
          $472 = $471&1;
          if ($472) {
           $479 = ___cxa_find_matching_catch_3(464|0)|0;
           $480 = tempRet0;
           __ZdlPv($468);
           $$2112 = 0;$$3 = $480;$$3108 = $479;
           label = 162;
           break L53;
          }
          $473 = HEAP32[9088]|0;
          $474 = ($473|0)==(0|0);
          if ($474) {
           __THREW__ = 0;
           invoke_viiii(680,(27040|0),(27060|0),38,(27075|0));
           $475 = __THREW__; __THREW__ = 0;
           $$0110 = $468;
           label = 138;
           break L53;
          } else {
           $476 = ((($473)) + 12|0);
           HEAP32[$476>>2] = $468;
           $$1111 = $468;$482 = $473;
           break;
          }
         }
        } while(0);
        HEAP32[$482>>2] = 0;
        $483 = HEAP32[9090]|0;
        $484 = ($483|0)==(0|0);
        L66: do {
         if ($484) {
          label = 142;
         } else {
          __THREW__ = 0;
          invoke_vi(718,($483|0));
          $486 = __THREW__; __THREW__ = 0;
          $487 = $486&1;
          L68: do {
           if (!($487)) {
            $488 = HEAP32[9088]|0;
            $489 = ($488|0)==(0|0);
            L70: do {
             if (!($489)) {
              $491 = ((($488)) + 16|0);
              HEAP32[$491>>2] = 0;
              __THREW__ = 0;
              invoke_vi(719,($461|0));
              $492 = __THREW__; __THREW__ = 0;
              $493 = $492&1;
              if ($493) {
               break L68;
              }
              ;HEAP32[$22>>2]=0|0;HEAP32[$22+4>>2]=0|0;HEAP32[$22+8>>2]=0|0;
              $494 = (_strlen($$1115)|0);
              __THREW__ = 0;
              invoke_viii(646,($22|0),($$1115|0),($494|0));
              $495 = __THREW__; __THREW__ = 0;
              $496 = $495&1;
              L73: do {
               if ($496) {
                label = 156;
               } else {
                __THREW__ = 0;
                invoke_vii(720,($21|0),($22|0));
                $497 = __THREW__; __THREW__ = 0;
                $498 = $497&1;
                L75: do {
                 if (!($498)) {
                  __THREW__ = 0;
                  invoke_vi(637,($22|0));
                  $499 = __THREW__; __THREW__ = 0;
                  $500 = $499&1;
                  if ($500) {
                   label = 156;
                   break L73;
                  }
                  __THREW__ = 0;
                  invoke_vi(194,($21|0));
                  $501 = __THREW__; __THREW__ = 0;
                  $502 = $501&1;
                  L78: do {
                   if ($502) {
                    label = 159;
                   } else {
                    __THREW__ = 0;
                    invoke_vi(199,($21|0));
                    $503 = __THREW__; __THREW__ = 0;
                    $504 = $503&1;
                    do {
                     if (!($504)) {
                      $505 = HEAP32[9088]|0;
                      $506 = ($505|0)==(0|0);
                      if ($506) {
                       __THREW__ = 0;
                       invoke_viiii(680,(27040|0),(27060|0),38,(27075|0));
                       $481 = __THREW__; __THREW__ = 0;
                       label = 154;
                       break L66;
                      }
                      HEAP32[$505>>2] = 1;
                      $570 = HEAP32[9090]|0;
                      $571 = ($570|0)==(0|0);
                      if ($571) {
                       label = 142;
                       break L66;
                      }
                      __THREW__ = 0;
                      invoke_vi(718,($570|0));
                      $572 = __THREW__; __THREW__ = 0;
                      $573 = $572&1;
                      if ($573) {
                       break L68;
                      }
                      $574 = HEAP32[9088]|0;
                      $575 = ($574|0)==(0|0);
                      if ($575) {
                       break L70;
                      }
                      $576 = ((($574)) + 16|0);
                      HEAP32[$576>>2] = 0;
                      __THREW__ = 0;
                      invoke_vi(719,($461|0));
                      $577 = __THREW__; __THREW__ = 0;
                      $578 = $577&1;
                      if ($578) {
                       break L68;
                      }
                      ;HEAP32[$22>>2]=0|0;HEAP32[$22+4>>2]=0|0;HEAP32[$22+8>>2]=0|0;
                      $579 = (_strlen($$1115)|0);
                      __THREW__ = 0;
                      invoke_viii(646,($22|0),($$1115|0),($579|0));
                      $580 = __THREW__; __THREW__ = 0;
                      $581 = $580&1;
                      if ($581) {
                       label = 156;
                       break L73;
                      }
                      __THREW__ = 0;
                      invoke_vii(720,($21|0),($22|0));
                      $582 = __THREW__; __THREW__ = 0;
                      $583 = $582&1;
                      if ($583) {
                       break L75;
                      }
                      __THREW__ = 0;
                      invoke_vi(637,($22|0));
                      $584 = __THREW__; __THREW__ = 0;
                      $585 = $584&1;
                      if ($585) {
                       label = 156;
                       break L73;
                      }
                      __THREW__ = 0;
                      invoke_vi(194,($21|0));
                      $586 = __THREW__; __THREW__ = 0;
                      $587 = $586&1;
                      if ($587) {
                       label = 159;
                       break L78;
                      }
                      __THREW__ = 0;
                      invoke_vi(199,($21|0));
                      $588 = __THREW__; __THREW__ = 0;
                      $589 = $588&1;
                      if ($589) {
                       break;
                      }
                      $$0116 = 0;$$3113 = $$1111;
                      break L53;
                     }
                    } while(0);
                    $521 = ___cxa_find_matching_catch_3(464|0)|0;
                    $522 = tempRet0;
                    $$1104 = $522;$$1106 = $521;
                   }
                  } while(0);
                  do {
                   if ((label|0) == 159) {
                    $517 = ___cxa_find_matching_catch_3(464|0)|0;
                    $518 = tempRet0;
                    __THREW__ = 0;
                    invoke_vi(199,($21|0));
                    $519 = __THREW__; __THREW__ = 0;
                    $520 = $519&1;
                    if (!($520)) {
                     $$1104 = $518;$$1106 = $517;
                     break;
                    }
                    $568 = ___cxa_find_matching_catch_3(0|0)|0;
                    $569 = tempRet0;
                    ___clang_call_terminate($568);
                    // unreachable;
                   }
                  } while(0);
                  $$2112 = $$1111;$$3 = $$1104;$$3108 = $$1106;
                  label = 162;
                  break L53;
                 }
                } while(0);
                $513 = ___cxa_find_matching_catch_3(464|0)|0;
                $514 = tempRet0;
                __THREW__ = 0;
                invoke_vi(637,($22|0));
                $515 = __THREW__; __THREW__ = 0;
                $516 = $515&1;
                if (!($516)) {
                 $$0103 = $514;$$0105 = $513;
                 break;
                }
                $568 = ___cxa_find_matching_catch_3(0|0)|0;
                $569 = tempRet0;
                ___clang_call_terminate($568);
                // unreachable;
               }
              } while(0);
              if ((label|0) == 156) {
               $511 = ___cxa_find_matching_catch_3(464|0)|0;
               $512 = tempRet0;
               $$0103 = $512;$$0105 = $511;
              }
              $$2112 = $$1111;$$3 = $$0103;$$3108 = $$0105;
              label = 162;
              break L53;
             }
            } while(0);
            __THREW__ = 0;
            invoke_viiii(680,(27040|0),(27060|0),38,(27075|0));
            $490 = __THREW__; __THREW__ = 0;
            label = 154;
            break L66;
           }
          } while(0);
          $507 = ___cxa_find_matching_catch_3(464|0)|0;
          $508 = tempRet0;
          $lpad$phi$index = $507;$lpad$phi$index2 = $508;
         }
        } while(0);
        if ((label|0) == 142) {
         __THREW__ = 0;
         invoke_viiii(680,(27040|0),(27084|0),36,(27075|0));
         $485 = __THREW__; __THREW__ = 0;
         label = 154;
        }
        if ((label|0) == 154) {
         $509 = ___cxa_find_matching_catch_3(464|0)|0;
         $510 = tempRet0;
         $lpad$phi$index = $509;$lpad$phi$index2 = $510;
        }
        $$2112 = $$1111;$$3 = $lpad$phi$index2;$$3108 = $lpad$phi$index;
        label = 162;
       }
      } while(0);
      if ((label|0) == 138) {
       $477 = ___cxa_find_matching_catch_3(464|0)|0;
       $478 = tempRet0;
       $$2112 = $$0110;$$3 = $478;$$3108 = $477;
       label = 162;
      }
      do {
       if ((label|0) == 162) {
        $523 = (_llvm_eh_typeid_for((464|0))|0);
        $524 = ($$3|0)==($523|0);
        if (!($524)) {
         $$4 = $$3;$$4109 = $$3108;
         ___resumeException($$4109|0);
         // unreachable;
        }
        $525 = (___cxa_begin_catch(($$3108|0))|0);
        $526 = HEAP32[$525>>2]|0;
        $527 = ((($526)) + 8|0);
        $528 = HEAP32[$527>>2]|0;
        __THREW__ = 0;
        invoke_vi($528|0,($525|0));
        $529 = __THREW__; __THREW__ = 0;
        $530 = $529&1;
        if (!($530)) {
         ___cxa_end_catch();
         $$0116 = 1;$$3113 = $$2112;
         break;
        }
        $537 = ___cxa_find_matching_catch_2()|0;
        $538 = tempRet0;
        __THREW__ = 0;
        invoke_v(643);
        $539 = __THREW__; __THREW__ = 0;
        $540 = $539&1;
        if ($540) {
         $568 = ___cxa_find_matching_catch_3(0|0)|0;
         $569 = tempRet0;
         ___clang_call_terminate($568);
         // unreachable;
        } else {
         $$4 = $538;$$4109 = $537;
         ___resumeException($$4109|0);
         // unreachable;
        }
       }
      } while(0);
      $531 = ($$3113|0)==(0|0);
      do {
       if (!($531)) {
        __THREW__ = 0;
        invoke_vi(721,($$3113|0));
        $532 = __THREW__; __THREW__ = 0;
        $533 = $532&1;
        if (!($533)) {
         __ZdlPv($$3113);
         break;
        }
        $541 = ___cxa_find_matching_catch_2()|0;
        $542 = tempRet0;
        __ZdlPv($$3113);
        $$4 = $542;$$4109 = $541;
        ___resumeException($$4109|0);
        // unreachable;
       }
      } while(0);
      $534 = ($$0116|0)==(0);
      $or$cond5 = $$1120$off0 & $534;
      do {
       if ($or$cond5) {
        $535 = HEAP32[9091]|0;
        $536 = ($535|0)==(0|0);
        if ($536) {
         ___assert_fail((27040|0),(27806|0),38,(27075|0));
         // unreachable;
        } else {
         __ZNK11SymbolTable4DumpEv($535);
         break;
        }
       }
      } while(0);
      $543 = HEAP32[9088]|0;
      $544 = ($543|0)==(0|0);
      if ($544) {
       ___assert_fail((27040|0),(27060|0),38,(27075|0));
       // unreachable;
      }
      $545 = ((($543)) + 20|0);
      $546 = HEAP8[$545>>0]|0;
      $$not = ($546<<24>>24)==(0);
      $or$cond7 = $534 & $$not;
      do {
       if ($or$cond7) {
        $547 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(40008,25892,40)|0);
        $548 = HEAP32[$547>>2]|0;
        $549 = ((($548)) + -12|0);
        $550 = HEAP32[$549>>2]|0;
        $551 = (($547) + ($550)|0);
        $552 = (__ZNKSt3__28ios_base6getlocEv($551)|0);
        HEAP32[$2>>2] = $552;
        __THREW__ = 0;
        $553 = (invoke_iii(659,($2|0),(40712|0))|0);
        $554 = __THREW__; __THREW__ = 0;
        $555 = $554&1;
        if (!($555)) {
         $556 = HEAP32[$553>>2]|0;
         $557 = ((($556)) + 28|0);
         $558 = HEAP32[$557>>2]|0;
         __THREW__ = 0;
         $559 = (invoke_iii($558|0,($553|0),10)|0);
         $560 = __THREW__; __THREW__ = 0;
         $561 = $560&1;
         if (!($561)) {
          __ZNSt3__26localeD2Ev($2);
          (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($547,$559)|0);
          (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($547)|0);
          break;
         }
        }
        $562 = ___cxa_find_matching_catch_2()|0;
        $563 = tempRet0;
        __THREW__ = 0;
        invoke_vi(660,($2|0));
        $564 = __THREW__; __THREW__ = 0;
        $565 = $564&1;
        if ($565) {
         $566 = ___cxa_find_matching_catch_3(0|0)|0;
         $567 = tempRet0;
         ___clang_call_terminate($566);
         // unreachable;
        } else {
         ___resumeException($562|0);
         // unreachable;
        }
       }
      } while(0);
      __ZN10MacroTable7DestroyEv();
      __ZN10ObjectCode7DestroyEv();
      __ZN11SymbolTable7DestroyEv();
      __ZN10GlobalData7DestroyEv();
      $$1 = $$0116;
      STACKTOP = sp;return ($$1|0);
     }
    } while(0);
    $440 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(40008,25801,90)|0);
    $441 = HEAP32[$440>>2]|0;
    $442 = ((($441)) + -12|0);
    $443 = HEAP32[$442>>2]|0;
    $444 = (($440) + ($443)|0);
    $445 = (__ZNKSt3__28ios_base6getlocEv($444)|0);
    HEAP32[$19>>2] = $445;
    __THREW__ = 0;
    $446 = (invoke_iii(659,($19|0),(40712|0))|0);
    $447 = __THREW__; __THREW__ = 0;
    $448 = $447&1;
    if (!($448)) {
     $449 = HEAP32[$446>>2]|0;
     $450 = ((($449)) + 28|0);
     $451 = HEAP32[$450>>2]|0;
     __THREW__ = 0;
     $452 = (invoke_iii($451|0,($446|0),10)|0);
     $453 = __THREW__; __THREW__ = 0;
     $454 = $453&1;
     if (!($454)) {
      __ZNSt3__26localeD2Ev($19);
      (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($440,$452)|0);
      (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($440)|0);
      $$1 = 1;
      STACKTOP = sp;return ($$1|0);
     }
    }
    $455 = ___cxa_find_matching_catch_2()|0;
    $456 = tempRet0;
    __THREW__ = 0;
    invoke_vi(660,($19|0));
    $457 = __THREW__; __THREW__ = 0;
    $458 = $457&1;
    if ($458) {
     $459 = ___cxa_find_matching_catch_3(0|0)|0;
     $460 = tempRet0;
     ___clang_call_terminate($459);
     // unreachable;
    } else {
     ___resumeException($455|0);
     // unreachable;
    }
   }
  }
 } while(0);
 $414 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(40008,25786,14)|0);
 $415 = HEAP32[$414>>2]|0;
 $416 = ((($415)) + -12|0);
 $417 = HEAP32[$416>>2]|0;
 $418 = (($414) + ($417)|0);
 $419 = (__ZNKSt3__28ios_base6getlocEv($418)|0);
 HEAP32[$3>>2] = $419;
 __THREW__ = 0;
 $420 = (invoke_iii(659,($3|0),(40712|0))|0);
 $421 = __THREW__; __THREW__ = 0;
 $422 = $421&1;
 if (!($422)) {
  $423 = HEAP32[$420>>2]|0;
  $424 = ((($423)) + 28|0);
  $425 = HEAP32[$424>>2]|0;
  __THREW__ = 0;
  $426 = (invoke_iii($425|0,($420|0),10)|0);
  $427 = __THREW__; __THREW__ = 0;
  $428 = $427&1;
  if (!($428)) {
   __ZNSt3__26localeD2Ev($3);
   (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($414,$426)|0);
   (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($414)|0);
   $$1 = 1;
   STACKTOP = sp;return ($$1|0);
  }
 }
 $429 = ___cxa_find_matching_catch_2()|0;
 $430 = tempRet0;
 __THREW__ = 0;
 invoke_vi(660,($3|0));
 $431 = __THREW__; __THREW__ = 0;
 $432 = $431&1;
 if ($432) {
  $433 = ___cxa_find_matching_catch_3(0|0)|0;
  $434 = tempRet0;
  ___clang_call_terminate($433);
  // unreachable;
 } else {
  ___resumeException($429|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN10ObjectCode6CreateEv() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[9090]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = (__Znwj(131176)|0);
  _memset(($2|0),0,131080)|0;
  HEAP32[9090] = $2;
  return;
 } else {
  ___assert_fail((26741|0),(25933|0),48,(26777|0));
  // unreachable;
 }
}
function __ZN10ObjectCode7DestroyEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[9090]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  ___assert_fail((27040|0),(25933|0),64,(26821|0));
  // unreachable;
 } else {
  __ZdlPv($0);
  HEAP32[9090] = 0;
  return;
 }
}
function __ZN10ObjectCode14InitialisePassEv($0) {
 $0 = $0|0;
 var $$024$i = 0, $$07 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 131076|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 131072|0);
 HEAP32[$3>>2] = 0;
 $4 = HEAP32[9091]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  ___assert_fail((27040|0),(27806|0),38,(27075|0));
  // unreachable;
 }
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($1,28396,2);
 $6 = HEAP32[$3>>2]|0;
 $7 = (+($6|0));
 __THREW__ = 0;
 invoke_viid(722,($4|0),($1|0),(+$7));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $18 = ___cxa_find_matching_catch_2()|0;
  $19 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($1|0));
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if ($21) {
   $26 = ___cxa_find_matching_catch_3(0|0)|0;
   $27 = tempRet0;
   ___clang_call_terminate($26);
   // unreachable;
  } else {
   ___resumeException($18|0);
   // unreachable;
  }
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
 $10 = ((($0)) + 131072|0);
 $11 = ((($0)) + 65536|0);
 $$024$i = $11;
 while(1) {
  $12 = HEAP8[$$024$i>>0]|0;
  $13 = $12&255;
  $14 = $13 & 12;
  $15 = $14&255;
  HEAP8[$$024$i>>0] = $15;
  $16 = ((($$024$i)) + 1|0);
  $17 = ($16>>>0)<($10>>>0);
  if ($17) {
   $$024$i = $16;
  } else {
   $$07 = 0;
   break;
  }
 }
 while(1) {
  $22 = (($$07) + 32)|0;
  $23 = $22&255;
  $24 = (((($0)) + 131080|0) + ($$07)|0);
  HEAP8[$24>>0] = $23;
  $25 = (($$07) + 1)|0;
  $exitcond = ($25|0)==(96);
  if ($exitcond) {
   break;
  } else {
   $$07 = $25;
  }
 }
 STACKTOP = sp;return;
}
function __ZN10ObjectCode5ClearEiib($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$024 = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($2|0)<($1|0);
 if ($4) {
  ___assert_fail((25948|0),(25933|0),327,(25961|0));
  // unreachable;
 }
 $5 = ($1>>>0)<(65536);
 if (!($5)) {
  ___assert_fail((25967|0),(25933|0),328,(25961|0));
  // unreachable;
 }
 $$off = (($2) + -1)|0;
 $6 = ($$off>>>0)<(65536);
 if (!($6)) {
  ___assert_fail((25997|0),(25933|0),329,(25961|0));
  // unreachable;
 }
 $7 = ($2|0)==($1|0);
 if ($7) {
  return;
 }
 if ($3) {
  $8 = (($0) + ($1)|0);
  $9 = (($2) - ($1))|0;
  _memset(($8|0),0,($9|0))|0;
  $10 = (((($0)) + 65536|0) + ($1)|0);
  _memset(($10|0),8,($9|0))|0;
  return;
 }
 $11 = (((($0)) + 65536|0) + ($2)|0);
 $12 = ($2|0)>($1|0);
 if (!($12)) {
  return;
 }
 $13 = (((($0)) + 65536|0) + ($1)|0);
 $$024 = $13;
 while(1) {
  $14 = HEAP8[$$024>>0]|0;
  $15 = $14&255;
  $16 = $15 & 12;
  $17 = $16&255;
  HEAP8[$$024>>0] = $17;
  $18 = ((($$024)) + 1|0);
  $19 = ($18>>>0)<($11>>>0);
  if ($19) {
   $$024 = $18;
  } else {
   break;
  }
 }
 return;
}
function __ZN10ObjectCode7PutByteEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ((($0)) + 131072|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(65535);
 if ($5) {
  $6 = (___cxa_allocate_exception(36)|0);
  __THREW__ = 0;
  invoke_vi(723,($6|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   ___cxa_throw(($6|0),(1016|0),(7|0));
   // unreachable;
  }
  $9 = ___cxa_find_matching_catch_2()|0;
  $10 = tempRet0;
  ___cxa_free_exception(($6|0));
  $$0 = $10;$$04 = $9;
  ___resumeException($$04|0);
  // unreachable;
 }
 $11 = ($4|0)>(-1);
 if (!($11)) {
  ___assert_fail((26023|0),(25933|0),143,(26051|0));
  // unreachable;
 }
 $12 = ($1>>>0)<(256);
 if (!($12)) {
  ___assert_fail((26059|0),(25933|0),144,(26051|0));
  // unreachable;
 }
 $13 = (((($0)) + 65536|0) + ($4)|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $15 & 2;
 $17 = ($16|0)==(0);
 if (!($17)) {
  $18 = (___cxa_allocate_exception(36)|0);
  __THREW__ = 0;
  invoke_vi(724,($18|0));
  $19 = __THREW__; __THREW__ = 0;
  $20 = $19&1;
  if (!($20)) {
   ___cxa_throw(($18|0),(1032|0),(7|0));
   // unreachable;
  }
  $21 = ___cxa_find_matching_catch_2()|0;
  $22 = tempRet0;
  ___cxa_free_exception(($18|0));
  $$0 = $22;$$04 = $21;
  ___resumeException($$04|0);
  // unreachable;
 }
 $23 = $15 & 1;
 $24 = ($23|0)==(0);
 if (!($24)) {
  $25 = (___cxa_allocate_exception(36)|0);
  __THREW__ = 0;
  invoke_vi(725,($25|0));
  $26 = __THREW__; __THREW__ = 0;
  $27 = $26&1;
  if (!($27)) {
   ___cxa_throw(($25|0),(1048|0),(7|0));
   // unreachable;
  }
  $28 = ___cxa_find_matching_catch_2()|0;
  $29 = tempRet0;
  ___cxa_free_exception(($25|0));
  $$0 = $29;$$04 = $28;
  ___resumeException($$04|0);
  // unreachable;
 }
 $30 = $15 | 1;
 $31 = $30&255;
 HEAP8[$13>>0] = $31;
 $32 = $1&255;
 $33 = HEAP32[$3>>2]|0;
 $34 = (($33) + 1)|0;
 HEAP32[$3>>2] = $34;
 $35 = (($0) + ($33)|0);
 HEAP8[$35>>0] = $32;
 $36 = HEAP32[9091]|0;
 $37 = ($36|0)==(0|0);
 if ($37) {
  ___assert_fail((27040|0),(27806|0),38,(27075|0));
  // unreachable;
 }
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($2,28396,2);
 $38 = HEAP32[$3>>2]|0;
 $39 = (+($38|0));
 __THREW__ = 0;
 invoke_viid(722,($36|0),($2|0),(+$39));
 $40 = __THREW__; __THREW__ = 0;
 $41 = $40&1;
 if (!($41)) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
  STACKTOP = sp;return;
 }
 $42 = ___cxa_find_matching_catch_2()|0;
 $43 = tempRet0;
 __THREW__ = 0;
 invoke_vi(637,($2|0));
 $44 = __THREW__; __THREW__ = 0;
 $45 = $44&1;
 if ($45) {
  $46 = ___cxa_find_matching_catch_3(0|0)|0;
  $47 = tempRet0;
  ___clang_call_terminate($46);
  // unreachable;
 }
 $$0 = $43;$$04 = $42;
 ___resumeException($$04|0);
 // unreachable;
}
function __ZN38AsmException_AssembleError_OutOfMemoryC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 4|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
 $2 = ((($0)) + 20|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(646,($2|0),(44984|0),0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if (!($4)) {
  $11 = ((($0)) + 32|0);
  HEAP32[$11>>2] = 0;
  HEAP32[$0>>2] = (8380);
  return;
 }
 $5 = ___cxa_find_matching_catch_2()|0;
 $6 = tempRet0;
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch_3(0|0)|0;
  $10 = tempRet0;
  ___clang_call_terminate($9);
  // unreachable;
 } else {
  ___resumeException($5|0);
  // unreachable;
 }
}
function __ZN35AsmException_AssembleError_GuardHitC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 4|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
 $2 = ((($0)) + 20|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(646,($2|0),(44984|0),0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if (!($4)) {
  $11 = ((($0)) + 32|0);
  HEAP32[$11>>2] = 0;
  HEAP32[$0>>2] = (8356);
  return;
 }
 $5 = ___cxa_find_matching_catch_2()|0;
 $6 = tempRet0;
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch_3(0|0)|0;
  $10 = tempRet0;
  ___clang_call_terminate($9);
  // unreachable;
 } else {
  ___resumeException($5|0);
  // unreachable;
 }
}
function __ZN34AsmException_AssembleError_OverlapC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 4|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
 $2 = ((($0)) + 20|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(646,($2|0),(44984|0),0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if (!($4)) {
  $11 = ((($0)) + 32|0);
  HEAP32[$11>>2] = 0;
  HEAP32[$0>>2] = (8332);
  return;
 }
 $5 = ___cxa_find_matching_catch_2()|0;
 $6 = tempRet0;
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch_3(0|0)|0;
  $10 = tempRet0;
  ___clang_call_terminate($9);
  // unreachable;
 } else {
  ___resumeException($5|0);
  // unreachable;
 }
}
function __ZN34AsmException_AssembleError_OverlapD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK34AsmException_AssembleError_Overlap7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (26109|0);
}
function __ZN35AsmException_AssembleError_GuardHitD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK35AsmException_AssembleError_GuardHit7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (26186|0);
}
function __ZN38AsmException_AssembleError_OutOfMemoryD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK38AsmException_AssembleError_OutOfMemory7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (26244|0);
}
function __ZN10ObjectCode9Assemble1Ej($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$05 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ((($0)) + 131072|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(65535);
 if ($5) {
  $6 = (___cxa_allocate_exception(36)|0);
  __THREW__ = 0;
  invoke_vi(723,($6|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   ___cxa_throw(($6|0),(1016|0),(7|0));
   // unreachable;
  }
  $9 = ___cxa_find_matching_catch_2()|0;
  $10 = tempRet0;
  ___cxa_free_exception(($6|0));
  $$0 = $10;$$05 = $9;
  ___resumeException($$05|0);
  // unreachable;
 }
 $11 = ($4|0)>(-1);
 if (!($11)) {
  ___assert_fail((26023|0),(25933|0),178,(26259|0));
  // unreachable;
 }
 $12 = ($1>>>0)<(256);
 if (!($12)) {
  ___assert_fail((26269|0),(25933|0),179,(26259|0));
  // unreachable;
 }
 $13 = HEAP32[9088]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  ___assert_fail((27040|0),(27060|0),38,(27075|0));
  // unreachable;
 }
 $15 = HEAP32[$13>>2]|0;
 $16 = ($15|0)==(1);
 $17 = (((($0)) + 65536|0) + ($4)|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18 & 12;
 $20 = ($19<<24>>24)==(4);
 $or$cond = $16 & $20;
 if ($or$cond) {
  $21 = (($0) + ($4)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = ($23|0)==($1|0);
  if (!($24)) {
   $25 = (___cxa_allocate_exception(36)|0);
   __THREW__ = 0;
   invoke_vi(726,($25|0));
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if (!($27)) {
    ___cxa_throw(($25|0),(1064|0),(7|0));
    // unreachable;
   }
   $28 = ___cxa_find_matching_catch_2()|0;
   $29 = tempRet0;
   ___cxa_free_exception(($25|0));
   $$0 = $29;$$05 = $28;
   ___resumeException($$05|0);
   // unreachable;
  }
 }
 $30 = $18&255;
 $31 = $30 & 2;
 $32 = ($31|0)==(0);
 if (!($32)) {
  $33 = (___cxa_allocate_exception(36)|0);
  __THREW__ = 0;
  invoke_vi(724,($33|0));
  $34 = __THREW__; __THREW__ = 0;
  $35 = $34&1;
  if (!($35)) {
   ___cxa_throw(($33|0),(1032|0),(7|0));
   // unreachable;
  }
  $36 = ___cxa_find_matching_catch_2()|0;
  $37 = tempRet0;
  ___cxa_free_exception(($33|0));
  $$0 = $37;$$05 = $36;
  ___resumeException($$05|0);
  // unreachable;
 }
 $38 = $30 & 1;
 $39 = ($38|0)==(0);
 if (!($39)) {
  $40 = (___cxa_allocate_exception(36)|0);
  __THREW__ = 0;
  invoke_vi(725,($40|0));
  $41 = __THREW__; __THREW__ = 0;
  $42 = $41&1;
  if (!($42)) {
   ___cxa_throw(($40|0),(1048|0),(7|0));
   // unreachable;
  }
  $43 = ___cxa_find_matching_catch_2()|0;
  $44 = tempRet0;
  ___cxa_free_exception(($40|0));
  $$0 = $44;$$05 = $43;
  ___resumeException($$05|0);
  // unreachable;
 }
 $45 = $30 | 5;
 $46 = $45&255;
 HEAP8[$17>>0] = $46;
 $47 = $1&255;
 $48 = HEAP32[$3>>2]|0;
 $49 = (($48) + 1)|0;
 HEAP32[$3>>2] = $49;
 $50 = (($0) + ($48)|0);
 HEAP8[$50>>0] = $47;
 $51 = HEAP32[9091]|0;
 $52 = ($51|0)==(0|0);
 if ($52) {
  ___assert_fail((27040|0),(27806|0),38,(27075|0));
  // unreachable;
 }
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($2,28396,2);
 $53 = HEAP32[$3>>2]|0;
 $54 = (+($53|0));
 __THREW__ = 0;
 invoke_viid(722,($51|0),($2|0),(+$54));
 $55 = __THREW__; __THREW__ = 0;
 $56 = $55&1;
 if (!($56)) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
  STACKTOP = sp;return;
 }
 $57 = ___cxa_find_matching_catch_2()|0;
 $58 = tempRet0;
 __THREW__ = 0;
 invoke_vi(637,($2|0));
 $59 = __THREW__; __THREW__ = 0;
 $60 = $59&1;
 if ($60) {
  $61 = ___cxa_find_matching_catch_3(0|0)|0;
  $62 = tempRet0;
  ___clang_call_terminate($61);
  // unreachable;
 }
 $$0 = $58;$$05 = $57;
 ___resumeException($$05|0);
 // unreachable;
}
function __ZN43AsmException_AssembleError_InconsistentCodeC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 4|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
 $2 = ((($0)) + 20|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(646,($2|0),(44984|0),0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if (!($4)) {
  $11 = ((($0)) + 32|0);
  HEAP32[$11>>2] = 0;
  HEAP32[$0>>2] = (8404);
  return;
 }
 $5 = ___cxa_find_matching_catch_2()|0;
 $6 = tempRet0;
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch_3(0|0)|0;
  $10 = tempRet0;
  ___clang_call_terminate($9);
  // unreachable;
 } else {
  ___resumeException($5|0);
  // unreachable;
 }
}
function __ZN43AsmException_AssembleError_InconsistentCodeD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK43AsmException_AssembleError_InconsistentCode7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (26330|0);
}
function __ZN10ObjectCode9Assemble2Ejj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$07 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 131072|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(65534);
 if ($6) {
  $7 = (___cxa_allocate_exception(36)|0);
  __THREW__ = 0;
  invoke_vi(723,($7|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   ___cxa_throw(($7|0),(1016|0),(7|0));
   // unreachable;
  }
  $10 = ___cxa_find_matching_catch_2()|0;
  $11 = tempRet0;
  ___cxa_free_exception(($7|0));
  $$0 = $11;$$07 = $10;
  ___resumeException($$07|0);
  // unreachable;
 }
 $12 = ($5|0)>(-1);
 if (!($12)) {
  ___assert_fail((26023|0),(25933|0),221,(26436|0));
  // unreachable;
 }
 $13 = ($1>>>0)<(256);
 if (!($13)) {
  ___assert_fail((26269|0),(25933|0),222,(26436|0));
  // unreachable;
 }
 $14 = ($2>>>0)<(256);
 if (!($14)) {
  ___assert_fail((26446|0),(25933|0),223,(26436|0));
  // unreachable;
 }
 $15 = HEAP32[9088]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  ___assert_fail((27040|0),(27060|0),38,(27075|0));
  // unreachable;
 }
 $17 = HEAP32[$15>>2]|0;
 $18 = ($17|0)==(1);
 $19 = (((($0)) + 65536|0) + ($5)|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20 & 12;
 $22 = ($21<<24>>24)==(4);
 $or$cond = $18 & $22;
 if ($or$cond) {
  $23 = (($0) + ($5)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = ($25|0)==($1|0);
  if (!($26)) {
   $27 = (___cxa_allocate_exception(36)|0);
   __THREW__ = 0;
   invoke_vi(726,($27|0));
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if (!($29)) {
    ___cxa_throw(($27|0),(1064|0),(7|0));
    // unreachable;
   }
   $30 = ___cxa_find_matching_catch_2()|0;
   $31 = tempRet0;
   ___cxa_free_exception(($27|0));
   $$0 = $31;$$07 = $30;
   ___resumeException($$07|0);
   // unreachable;
  }
 }
 $32 = $20&255;
 $33 = $32 & 2;
 $34 = ($33|0)==(0);
 if ($34) {
  $35 = (($5) + 1)|0;
  $36 = (((($0)) + 65536|0) + ($35)|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37 & 2;
  $39 = ($38<<24>>24)==(0);
  if ($39) {
   $45 = $37 | $20;
   $46 = $45 & 1;
   $47 = ($46<<24>>24)==(0);
   if (!($47)) {
    $48 = (___cxa_allocate_exception(36)|0);
    __THREW__ = 0;
    invoke_vi(725,($48|0));
    $49 = __THREW__; __THREW__ = 0;
    $50 = $49&1;
    if (!($50)) {
     ___cxa_throw(($48|0),(1048|0),(7|0));
     // unreachable;
    }
    $51 = ___cxa_find_matching_catch_2()|0;
    $52 = tempRet0;
    ___cxa_free_exception(($48|0));
    $$0 = $52;$$07 = $51;
    ___resumeException($$07|0);
    // unreachable;
   }
   $53 = $32 | 5;
   $54 = $53&255;
   HEAP8[$19>>0] = $54;
   $55 = $1&255;
   $56 = HEAP32[$4>>2]|0;
   $57 = (($56) + 1)|0;
   HEAP32[$4>>2] = $57;
   $58 = (($0) + ($56)|0);
   HEAP8[$58>>0] = $55;
   $59 = HEAP32[$4>>2]|0;
   $60 = (((($0)) + 65536|0) + ($59)|0);
   $61 = HEAP8[$60>>0]|0;
   $62 = $61&255;
   $63 = $62 | 1;
   $64 = $63&255;
   HEAP8[$60>>0] = $64;
   $65 = $2&255;
   $66 = HEAP32[$4>>2]|0;
   $67 = (($66) + 1)|0;
   HEAP32[$4>>2] = $67;
   $68 = (($0) + ($66)|0);
   HEAP8[$68>>0] = $65;
   $69 = HEAP32[9091]|0;
   $70 = ($69|0)==(0|0);
   if ($70) {
    ___assert_fail((27040|0),(27806|0),38,(27075|0));
    // unreachable;
   }
   ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($3,28396,2);
   $71 = HEAP32[$4>>2]|0;
   $72 = (+($71|0));
   __THREW__ = 0;
   invoke_viid(722,($69|0),($3|0),(+$72));
   $73 = __THREW__; __THREW__ = 0;
   $74 = $73&1;
   if (!($74)) {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
    STACKTOP = sp;return;
   }
   $75 = ___cxa_find_matching_catch_2()|0;
   $76 = tempRet0;
   __THREW__ = 0;
   invoke_vi(637,($3|0));
   $77 = __THREW__; __THREW__ = 0;
   $78 = $77&1;
   if ($78) {
    $79 = ___cxa_find_matching_catch_3(0|0)|0;
    $80 = tempRet0;
    ___clang_call_terminate($79);
    // unreachable;
   }
   $$0 = $76;$$07 = $75;
   ___resumeException($$07|0);
   // unreachable;
  }
 }
 $40 = (___cxa_allocate_exception(36)|0);
 __THREW__ = 0;
 invoke_vi(724,($40|0));
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if (!($42)) {
  ___cxa_throw(($40|0),(1032|0),(7|0));
  // unreachable;
 }
 $43 = ___cxa_find_matching_catch_2()|0;
 $44 = tempRet0;
 ___cxa_free_exception(($40|0));
 $$0 = $44;$$07 = $43;
 ___resumeException($$07|0);
 // unreachable;
}
function __ZN10ObjectCode9Assemble3Ejj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$08 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 131072|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(65533);
 if ($6) {
  $7 = (___cxa_allocate_exception(36)|0);
  __THREW__ = 0;
  invoke_vi(723,($7|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   ___cxa_throw(($7|0),(1016|0),(7|0));
   // unreachable;
  }
  $10 = ___cxa_find_matching_catch_2()|0;
  $11 = tempRet0;
  ___cxa_free_exception(($7|0));
  $$0 = $11;$$08 = $10;
  ___resumeException($$08|0);
  // unreachable;
 }
 $12 = ($5|0)>(-1);
 if (!($12)) {
  ___assert_fail((26023|0),(25933|0),269,(26458|0));
  // unreachable;
 }
 $13 = ($1>>>0)<(256);
 if (!($13)) {
  ___assert_fail((26269|0),(25933|0),270,(26458|0));
  // unreachable;
 }
 $14 = ($2>>>0)<(65536);
 if (!($14)) {
  ___assert_fail((26468|0),(25933|0),271,(26458|0));
  // unreachable;
 }
 $15 = HEAP32[9088]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  ___assert_fail((27040|0),(27060|0),38,(27075|0));
  // unreachable;
 }
 $17 = HEAP32[$15>>2]|0;
 $18 = ($17|0)==(1);
 $19 = (((($0)) + 65536|0) + ($5)|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20 & 12;
 $22 = ($21<<24>>24)==(4);
 $or$cond = $18 & $22;
 if ($or$cond) {
  $23 = (($0) + ($5)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = ($25|0)==($1|0);
  if (!($26)) {
   $27 = (___cxa_allocate_exception(36)|0);
   __THREW__ = 0;
   invoke_vi(726,($27|0));
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if (!($29)) {
    ___cxa_throw(($27|0),(1064|0),(7|0));
    // unreachable;
   }
   $30 = ___cxa_find_matching_catch_2()|0;
   $31 = tempRet0;
   ___cxa_free_exception(($27|0));
   $$0 = $31;$$08 = $30;
   ___resumeException($$08|0);
   // unreachable;
  }
 }
 $32 = $20&255;
 $33 = $32 & 2;
 $34 = ($33|0)==(0);
 if ($34) {
  $35 = (($5) + 1)|0;
  $36 = (((($0)) + 65536|0) + ($35)|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37 & 2;
  $39 = ($38<<24>>24)==(0);
  if ($39) {
   $40 = (($5) + 2)|0;
   $41 = (((($0)) + 65536|0) + ($40)|0);
   $42 = HEAP8[$41>>0]|0;
   $43 = $42 & 2;
   $44 = ($43<<24>>24)==(0);
   if ($44) {
    $50 = $37 | $20;
    $51 = $50 | $42;
    $52 = $51 & 1;
    $53 = ($52<<24>>24)==(0);
    if (!($53)) {
     $54 = (___cxa_allocate_exception(36)|0);
     __THREW__ = 0;
     invoke_vi(725,($54|0));
     $55 = __THREW__; __THREW__ = 0;
     $56 = $55&1;
     if (!($56)) {
      ___cxa_throw(($54|0),(1048|0),(7|0));
      // unreachable;
     }
     $57 = ___cxa_find_matching_catch_2()|0;
     $58 = tempRet0;
     ___cxa_free_exception(($54|0));
     $$0 = $58;$$08 = $57;
     ___resumeException($$08|0);
     // unreachable;
    }
    $59 = $32 | 5;
    $60 = $59&255;
    HEAP8[$19>>0] = $60;
    $61 = $1&255;
    $62 = HEAP32[$4>>2]|0;
    $63 = (($62) + 1)|0;
    HEAP32[$4>>2] = $63;
    $64 = (($0) + ($62)|0);
    HEAP8[$64>>0] = $61;
    $65 = HEAP32[$4>>2]|0;
    $66 = (((($0)) + 65536|0) + ($65)|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = $67&255;
    $69 = $68 | 1;
    $70 = $69&255;
    HEAP8[$66>>0] = $70;
    $71 = $2&255;
    $72 = HEAP32[$4>>2]|0;
    $73 = (($72) + 1)|0;
    HEAP32[$4>>2] = $73;
    $74 = (($0) + ($72)|0);
    HEAP8[$74>>0] = $71;
    $75 = HEAP32[$4>>2]|0;
    $76 = (((($0)) + 65536|0) + ($75)|0);
    $77 = HEAP8[$76>>0]|0;
    $78 = $77&255;
    $79 = $78 | 1;
    $80 = $79&255;
    HEAP8[$76>>0] = $80;
    $81 = $2 >>> 8;
    $82 = $81&255;
    $83 = HEAP32[$4>>2]|0;
    $84 = (($83) + 1)|0;
    HEAP32[$4>>2] = $84;
    $85 = (($0) + ($83)|0);
    HEAP8[$85>>0] = $82;
    $86 = HEAP32[9091]|0;
    $87 = ($86|0)==(0|0);
    if ($87) {
     ___assert_fail((27040|0),(27806|0),38,(27075|0));
     // unreachable;
    }
    ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($3,28396,2);
    $88 = HEAP32[$4>>2]|0;
    $89 = (+($88|0));
    __THREW__ = 0;
    invoke_viid(722,($86|0),($3|0),(+$89));
    $90 = __THREW__; __THREW__ = 0;
    $91 = $90&1;
    if (!($91)) {
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
     STACKTOP = sp;return;
    }
    $92 = ___cxa_find_matching_catch_2()|0;
    $93 = tempRet0;
    __THREW__ = 0;
    invoke_vi(637,($3|0));
    $94 = __THREW__; __THREW__ = 0;
    $95 = $94&1;
    if ($95) {
     $96 = ___cxa_find_matching_catch_3(0|0)|0;
     $97 = tempRet0;
     ___clang_call_terminate($96);
     // unreachable;
    }
    $$0 = $93;$$08 = $92;
    ___resumeException($$08|0);
    // unreachable;
   }
  }
 }
 $45 = (___cxa_allocate_exception(36)|0);
 __THREW__ = 0;
 invoke_vi(724,($45|0));
 $46 = __THREW__; __THREW__ = 0;
 $47 = $46&1;
 if (!($47)) {
  ___cxa_throw(($45|0),(1032|0),(7|0));
  // unreachable;
 }
 $48 = ___cxa_find_matching_catch_2()|0;
 $49 = tempRet0;
 ___cxa_free_exception(($45|0));
 $$0 = $49;$$08 = $48;
 ___resumeException($$08|0);
 // unreachable;
}
function __ZN10ObjectCode8SetGuardEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)<(65536);
 if ($2) {
  $3 = (((($0)) + 65536|0) + ($1)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = $5 | 2;
  $7 = $6&255;
  HEAP8[$3>>0] = $7;
  return;
 } else {
  ___assert_fail((26483|0),(25933|0),314,(26511|0));
  // unreachable;
 }
}
function __ZN10ObjectCode6IncBinEPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$018 = 0, $$018$ = 0, $$02$i = 0, $$1 = 0, $$14 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $eh$lpad$body$i$index9Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $eh$lpad$body$i12$indexZ2D = 0, $eh$lpad$body10$index3Z2D = 0, $eh$lpad$body10$indexZ2D = 0, $eh$lpad$body16$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $2 = sp;
 $3 = ((($2)) + 108|0);
 $4 = ((($2)) + 8|0);
 HEAP32[$2>>2] = ((7840));
 HEAP32[$3>>2] = ((7860));
 $5 = ((($2)) + 4|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($2)) + 108|0);
 __THREW__ = 0;
 invoke_vii(649,($6|0),($4|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 do {
  if ($8) {
   $13 = ___cxa_find_matching_catch_2()|0;
   $14 = tempRet0;
   $$0$i = $14;$$02$i = $13;
  } else {
   $9 = ((($2)) + 180|0);
   HEAP32[$9>>2] = 0;
   $10 = ((($2)) + 184|0);
   HEAP32[$10>>2] = -1;
   HEAP32[$2>>2] = (7880);
   HEAP32[$3>>2] = (7900);
   __THREW__ = 0;
   invoke_vi(699,($4|0));
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if ($12) {
    $15 = ___cxa_find_matching_catch_2()|0;
    $16 = tempRet0;
    __THREW__ = 0;
    invoke_vii(671,($2|0),((7912)|0));
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if (!($18)) {
     $$0$i = $16;$$02$i = $15;
     break;
    }
    $21 = ___cxa_find_matching_catch_3(0|0)|0;
    $22 = tempRet0;
    ___clang_call_terminate($21);
    // unreachable;
   }
   $23 = ((($2)) + 72|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(0|0);
   if ($25) {
    $26 = (_fopen($1,27658)|0);
    HEAP32[$23>>2] = $26;
    $27 = ($26|0)==(0|0);
    if ($27) {
     label = 11;
    } else {
     $28 = ((($2)) + 96|0);
     HEAP32[$28>>2] = 12;
     $29 = HEAP32[$2>>2]|0;
     $30 = ((($29)) + -12|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = (($2) + ($31)|0);
     __THREW__ = 0;
     invoke_vii(662,($32|0),0);
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if ($34) {
      label = 18;
     } else {
      $45 = $2;
      label = 12;
     }
    }
   } else {
    label = 11;
   }
   if ((label|0) == 11) {
    $35 = HEAP32[$2>>2]|0;
    $36 = ((($35)) + -12|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (($2) + ($37)|0);
    $39 = ((($38)) + 16|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = $40 | 4;
    __THREW__ = 0;
    invoke_vii(662,($38|0),($41|0));
    $42 = __THREW__; __THREW__ = 0;
    $43 = $42&1;
    if ($43) {
     label = 18;
    } else {
     $45 = $2;
     label = 12;
    }
   }
   L13: do {
    if ((label|0) == 12) {
     $44 = HEAP32[$45>>2]|0;
     $46 = ((($44)) + -12|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = (($2) + ($47)|0);
     $49 = ((($48)) + 16|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = $50 & 5;
     $52 = ($51|0)==(0);
     if (!($52)) {
      $53 = (___cxa_allocate_exception(36)|0);
      HEAP32[$53>>2] = (4652);
      $54 = ((($53)) + 4|0);
      ;HEAP32[$54>>2]=0|0;HEAP32[$54+4>>2]=0|0;HEAP32[$54+8>>2]=0|0;
      $55 = ((($53)) + 20|0);
      ;HEAP32[$55>>2]=0|0;HEAP32[$55+4>>2]=0|0;HEAP32[$55+8>>2]=0|0;
      __THREW__ = 0;
      invoke_viii(646,($55|0),(44984|0),0);
      $56 = __THREW__; __THREW__ = 0;
      $57 = $56&1;
      if (!($57)) {
       $64 = ((($53)) + 32|0);
       HEAP32[$64>>2] = 0;
       HEAP32[$53>>2] = (8428);
       __THREW__ = 0;
       invoke_viii(644,($53|0),(1080|0),(7|0));
       $65 = __THREW__; __THREW__ = 0;
       label = 18;
       break;
      }
      $58 = ___cxa_find_matching_catch_2()|0;
      $59 = tempRet0;
      __THREW__ = 0;
      invoke_vi(637,($54|0));
      $60 = __THREW__; __THREW__ = 0;
      $61 = $60&1;
      if ($61) {
       $62 = ___cxa_find_matching_catch_3(0|0)|0;
       $63 = tempRet0;
       ___clang_call_terminate($62);
       // unreachable;
      } else {
       ___cxa_free_exception(($53|0));
       $$1 = $59;$$14 = $58;
       break;
      }
     }
     $$018 = 0;
     while(1) {
      __THREW__ = 0;
      $68 = (invoke_ii(727,($2|0))|0);
      $69 = __THREW__; __THREW__ = 0;
      $70 = $69&1;
      if ($70) {
       label = 24;
       break;
      }
      $71 = ($68|0)==(-1);
      $72 = $68&255;
      $$018$ = $71 ? $$018 : $72;
      $73 = HEAP32[$2>>2]|0;
      $74 = ((($73)) + -12|0);
      $75 = HEAP32[$74>>2]|0;
      $76 = (($2) + ($75)|0);
      $77 = ((($76)) + 16|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = $78 & 5;
      $80 = ($79|0)==(0);
      if (!($80)) {
       label = 28;
       break;
      }
      $81 = HEAP32[$5>>2]|0;
      $82 = ($81|0)==(1);
      if (!($82)) {
       label = 23;
       break;
      }
      $88 = $$018$&255;
      __THREW__ = 0;
      invoke_vii(689,($0|0),($88|0));
      $89 = __THREW__; __THREW__ = 0;
      $90 = $89&1;
      if ($90) {
       label = 24;
       break;
      } else {
       $$018 = $$018$;
      }
     }
     do {
      if ((label|0) == 23) {
       __THREW__ = 0;
       invoke_viiii(680,(26520|0),(25933|0),379,(26542|0));
       $83 = __THREW__; __THREW__ = 0;
       label = 25;
      }
      else if ((label|0) == 24) {
       $84 = ___cxa_find_matching_catch_2()|0;
       $85 = tempRet0;
       $eh$lpad$body10$index3Z2D = $85;$eh$lpad$body10$indexZ2D = $84;
      }
      else if ((label|0) == 28) {
       $91 = $78 & 2;
       $92 = ($91|0)==(0);
       if ($92) {
        $93 = (___cxa_allocate_exception(36)|0);
        HEAP32[$93>>2] = (4652);
        $94 = ((($93)) + 4|0);
        ;HEAP32[$94>>2]=0|0;HEAP32[$94+4>>2]=0|0;HEAP32[$94+8>>2]=0|0;
        $95 = ((($93)) + 20|0);
        ;HEAP32[$95>>2]=0|0;HEAP32[$95+4>>2]=0|0;HEAP32[$95+8>>2]=0|0;
        __THREW__ = 0;
        invoke_viii(646,($95|0),(44984|0),0);
        $96 = __THREW__; __THREW__ = 0;
        $97 = $96&1;
        if (!($97)) {
         $104 = ((($93)) + 32|0);
         HEAP32[$104>>2] = 0;
         HEAP32[$93>>2] = (8452);
         __THREW__ = 0;
         invoke_viii(644,($93|0),(1096|0),(7|0));
         $105 = __THREW__; __THREW__ = 0;
         label = 25;
         break;
        }
        $98 = ___cxa_find_matching_catch_2()|0;
        $99 = tempRet0;
        __THREW__ = 0;
        invoke_vi(637,($94|0));
        $100 = __THREW__; __THREW__ = 0;
        $101 = $100&1;
        if ($101) {
         $102 = ___cxa_find_matching_catch_3(0|0)|0;
         $103 = tempRet0;
         ___clang_call_terminate($102);
         // unreachable;
        } else {
         ___cxa_free_exception(($93|0));
         $$1 = $99;$$14 = $98;
         break L13;
        }
       }
       $106 = HEAP32[$23>>2]|0;
       $107 = ($106|0)==(0|0);
       if ($107) {
        label = 39;
       } else {
        $108 = HEAP32[$4>>2]|0;
        $109 = ((($108)) + 24|0);
        $110 = HEAP32[$109>>2]|0;
        __THREW__ = 0;
        $111 = (invoke_ii($110|0,($4|0))|0);
        $112 = __THREW__; __THREW__ = 0;
        $113 = $112&1;
        if ($113) {
         $116 = ___cxa_find_matching_catch_2()|0;
         $117 = tempRet0;
         (_fclose($106)|0);
         $eh$lpad$body10$index3Z2D = $117;$eh$lpad$body10$indexZ2D = $116;
         break;
        }
        $114 = (_fclose($106)|0);
        $115 = ($114|0)==(0);
        if ($115) {
         $118 = ($111|0)==(0);
         HEAP32[$23>>2] = 0;
         if (!($118)) {
          label = 39;
         }
        } else {
         label = 39;
        }
       }
       if ((label|0) == 39) {
        $119 = HEAP32[$45>>2]|0;
        $120 = ((($119)) + -12|0);
        $121 = HEAP32[$120>>2]|0;
        $122 = (($2) + ($121)|0);
        $123 = ((($122)) + 16|0);
        $124 = HEAP32[$123>>2]|0;
        $125 = $124 | 4;
        __THREW__ = 0;
        invoke_vii(662,($122|0),($125|0));
        $126 = __THREW__; __THREW__ = 0;
        $127 = $126&1;
        if ($127) {
         label = 25;
         break;
        }
       }
       HEAP32[$2>>2] = ((7880));
       HEAP32[$3>>2] = ((7900));
       __THREW__ = 0;
       invoke_vi(176,($4|0));
       $128 = __THREW__; __THREW__ = 0;
       $129 = $128&1;
       do {
        if ($129) {
         $132 = ___cxa_find_matching_catch_2()|0;
         $133 = tempRet0;
         __THREW__ = 0;
         invoke_vii(671,($2|0),((7912)|0));
         $134 = __THREW__; __THREW__ = 0;
         $135 = $134&1;
         if ($135) {
          $136 = ___cxa_find_matching_catch_3(0|0)|0;
          $137 = tempRet0;
          ___clang_call_terminate($136);
          // unreachable;
         } else {
          $eh$lpad$body$i$index9Z2D = $133;$eh$lpad$body$i$indexZ2D = $132;
         }
        } else {
         __THREW__ = 0;
         invoke_vii(671,($2|0),((7912)|0));
         $130 = __THREW__; __THREW__ = 0;
         $131 = $130&1;
         if ($131) {
          $138 = ___cxa_find_matching_catch_2()|0;
          $139 = tempRet0;
          $eh$lpad$body$i$index9Z2D = $139;$eh$lpad$body$i$indexZ2D = $138;
          break;
         } else {
          __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($3);
          STACKTOP = sp;return;
         }
        }
       } while(0);
       __THREW__ = 0;
       invoke_vi(653,($3|0));
       $140 = __THREW__; __THREW__ = 0;
       $141 = $140&1;
       if ($141) {
        $142 = ___cxa_find_matching_catch_3(0|0)|0;
        $143 = tempRet0;
        ___clang_call_terminate($142);
        // unreachable;
       } else {
        ___resumeException($eh$lpad$body$i$indexZ2D|0);
        // unreachable;
       }
      }
     } while(0);
     if ((label|0) == 25) {
      $86 = ___cxa_find_matching_catch_2()|0;
      $87 = tempRet0;
      $eh$lpad$body10$index3Z2D = $87;$eh$lpad$body10$indexZ2D = $86;
     }
     $$1 = $eh$lpad$body10$index3Z2D;$$14 = $eh$lpad$body10$indexZ2D;
    }
   } while(0);
   if ((label|0) == 18) {
    $66 = ___cxa_find_matching_catch_2()|0;
    $67 = tempRet0;
    $$1 = $67;$$14 = $66;
   }
   HEAP32[$2>>2] = ((7880));
   HEAP32[$3>>2] = ((7900));
   __THREW__ = 0;
   invoke_vi(176,($4|0));
   $144 = __THREW__; __THREW__ = 0;
   $145 = $144&1;
   do {
    if ($145) {
     $148 = ___cxa_find_matching_catch_3(0|0)|0;
     $149 = tempRet0;
     __THREW__ = 0;
     invoke_vii(671,($2|0),((7912)|0));
     $150 = __THREW__; __THREW__ = 0;
     $151 = $150&1;
     if ($151) {
      $152 = ___cxa_find_matching_catch_3(0|0)|0;
      $153 = tempRet0;
      ___clang_call_terminate($152);
      // unreachable;
     } else {
      $eh$lpad$body$i12$indexZ2D = $148;
     }
    } else {
     __THREW__ = 0;
     invoke_vii(671,($2|0),((7912)|0));
     $146 = __THREW__; __THREW__ = 0;
     $147 = $146&1;
     if ($147) {
      $156 = ___cxa_find_matching_catch_3(0|0)|0;
      $157 = tempRet0;
      $eh$lpad$body$i12$indexZ2D = $156;
      break;
     }
     __THREW__ = 0;
     invoke_vi(653,($3|0));
     $154 = __THREW__; __THREW__ = 0;
     $155 = $154&1;
     if (!($155)) {
      ___resumeException($$14|0);
      // unreachable;
     }
     $162 = ___cxa_find_matching_catch_3(0|0)|0;
     $163 = tempRet0;
     $eh$lpad$body16$indexZ2D = $162;
     ___clang_call_terminate($eh$lpad$body16$indexZ2D);
     // unreachable;
    }
   } while(0);
   __THREW__ = 0;
   invoke_vi(653,($3|0));
   $158 = __THREW__; __THREW__ = 0;
   $159 = $158&1;
   if ($159) {
    $160 = ___cxa_find_matching_catch_3(0|0)|0;
    $161 = tempRet0;
    ___clang_call_terminate($160);
    // unreachable;
   } else {
    $eh$lpad$body16$indexZ2D = $eh$lpad$body$i12$indexZ2D;
    ___clang_call_terminate($eh$lpad$body16$indexZ2D);
    // unreachable;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(653,($3|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $21 = ___cxa_find_matching_catch_3(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 } else {
  ___resumeException($$02$i|0);
  // unreachable;
 }
}
function __ZN35AsmException_AssembleError_FileReadD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK35AsmException_AssembleError_FileRead7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (26587|0);
}
function __ZN35AsmException_AssembleError_FileOpenD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK35AsmException_AssembleError_FileOpen7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (26645|0);
}
function __ZN10ObjectCode10SetMappingEii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$off = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$off = (($1) + -32)|0;
 $3 = ($$off>>>0)<(95);
 if (!($3)) {
  ___assert_fail((26665|0),(25933|0),400,(26691|0));
  // unreachable;
 }
 $4 = ($2>>>0)<(256);
 if ($4) {
  $5 = $2&255;
  $6 = (((($0)) + 131080|0) + ($$off)|0);
  HEAP8[$6>>0] = $5;
  return;
 } else {
  ___assert_fail((26702|0),(25933|0),401,(26691|0));
  // unreachable;
 }
}
function __ZNK10ObjectCode10GetMappingEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$off = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$off = (($1) + -32)|0;
 $2 = ($$off>>>0)<(95);
 if ($2) {
  $3 = (((($0)) + 131080|0) + ($$off)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  return ($5|0);
 } else {
  ___assert_fail((26665|0),(25933|0),415,(26730|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZN10ObjectCode9CopyBlockEiii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05057 = 0, $$05057$in = 0, $$051 = 0, $$052 = 0, $$058 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $or$cond60 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (($2) - ($1))|0;
 $5 = ($2|0)>(65536);
 $6 = (($4) + ($3))|0;
 $7 = ($6|0)>(65536);
 $or$cond = $5 | $7;
 if ($or$cond) {
  $8 = (___cxa_allocate_exception(36)|0);
  __THREW__ = 0;
  invoke_vi(723,($8|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   ___cxa_throw(($8|0),(1016|0),(7|0));
   // unreachable;
  }
  $11 = ___cxa_find_matching_catch_2()|0;
  $12 = tempRet0;
  ___cxa_free_exception(($8|0));
  $$051 = $12;$$052 = $11;
  ___resumeException($$052|0);
  // unreachable;
 }
 $13 = ($1|0)<($3|0);
 if ($13) {
  $14 = ($4|0)>(0);
  if ($14) {
   $$05057$in = $4;
  } else {
   return;
  }
  while(1) {
   $$05057 = (($$05057$in) + -1)|0;
   $15 = (($$05057) + ($3))|0;
   $16 = (((($0)) + 65536|0) + ($15)|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = $17 & 2;
   $19 = ($18<<24>>24)==(0);
   if (!($19)) {
    break;
   }
   $25 = (($$05057) + ($1))|0;
   $26 = (($0) + ($25)|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = (($0) + ($15)|0);
   HEAP8[$28>>0] = $27;
   $29 = (((($0)) + 65536|0) + ($25)|0);
   $30 = HEAP8[$29>>0]|0;
   HEAP8[$16>>0] = $30;
   $31 = HEAP8[$29>>0]|0;
   $32 = $31&255;
   $33 = $32 & 12;
   $34 = $33&255;
   HEAP8[$29>>0] = $34;
   $35 = ($$05057$in|0)>(1);
   if ($35) {
    $$05057$in = $$05057;
   } else {
    label = 18;
    break;
   }
  }
  if ((label|0) == 18) {
   return;
  }
  $20 = (___cxa_allocate_exception(36)|0);
  __THREW__ = 0;
  invoke_vi(724,($20|0));
  $21 = __THREW__; __THREW__ = 0;
  $22 = $21&1;
  if (!($22)) {
   ___cxa_throw(($20|0),(1032|0),(7|0));
   // unreachable;
  }
  $23 = ___cxa_find_matching_catch_2()|0;
  $24 = tempRet0;
  ___cxa_free_exception(($20|0));
  $$051 = $24;$$052 = $23;
  ___resumeException($$052|0);
  // unreachable;
 } else {
  $36 = ($1|0)>($3|0);
  $37 = ($4|0)>(0);
  $or$cond60 = $36 & $37;
  if ($or$cond60) {
   $$058 = 0;
  } else {
   return;
  }
  while(1) {
   $38 = (($$058) + ($3))|0;
   $39 = (((($0)) + 65536|0) + ($38)|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = $40 & 2;
   $42 = ($41<<24>>24)==(0);
   if (!($42)) {
    break;
   }
   $48 = (($$058) + ($1))|0;
   $49 = (($0) + ($48)|0);
   $50 = HEAP8[$49>>0]|0;
   $51 = (($0) + ($38)|0);
   HEAP8[$51>>0] = $50;
   $52 = (((($0)) + 65536|0) + ($48)|0);
   $53 = HEAP8[$52>>0]|0;
   HEAP8[$39>>0] = $53;
   $54 = HEAP8[$52>>0]|0;
   $55 = $54&255;
   $56 = $55 & 12;
   $57 = $56&255;
   HEAP8[$52>>0] = $57;
   $58 = (($$058) + 1)|0;
   $59 = ($58|0)<($4|0);
   if ($59) {
    $$058 = $58;
   } else {
    label = 18;
    break;
   }
  }
  if ((label|0) == 18) {
   return;
  }
  $43 = (___cxa_allocate_exception(36)|0);
  __THREW__ = 0;
  invoke_vi(724,($43|0));
  $44 = __THREW__; __THREW__ = 0;
  $45 = $44&1;
  if (!($45)) {
   ___cxa_throw(($43|0),(1032|0),(7|0));
   // unreachable;
  }
  $46 = ___cxa_find_matching_catch_2()|0;
  $47 = tempRet0;
  ___cxa_free_exception(($43|0));
  $$051 = $47;$$052 = $46;
  ___resumeException($$052|0);
  // unreachable;
 }
}
function __ZN11SymbolTable6CreateEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[9091]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  ___assert_fail((26741|0),(26761|0),44,(26777|0));
  // unreachable;
 }
 $2 = (__Znwj(12)|0);
 __THREW__ = 0;
 invoke_vi(728,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_2()|0;
  $6 = tempRet0;
  __ZdlPv($2);
  ___resumeException($5|0);
  // unreachable;
 } else {
  HEAP32[9091] = $2;
  return;
 }
}
function __ZN11SymbolTableC2Ev($0) {
 $0 = $0|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$13 = 0, $$2 = 0, $$24 = 0, $$3 = 0, $$35 = 0, $$4 = 0, $$46 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $1 = sp + 36|0;
 $2 = sp + 24|0;
 $3 = sp + 12|0;
 $4 = sp;
 $5 = ((($0)) + 4|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 4|0);
 HEAP32[$0>>2] = $7;
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(646,($1|0),(28745|0),2);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 L1: do {
  if ($9) {
   label = 14;
  } else {
   __THREW__ = 0;
   invoke_viidi(710,($0|0),($1|0),3.1415926535897931,0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    $34 = ___cxa_find_matching_catch_2()|0;
    $35 = tempRet0;
    __THREW__ = 0;
    invoke_vi(637,($1|0));
    $36 = __THREW__; __THREW__ = 0;
    $37 = $36&1;
    if (!($37)) {
     $$0 = $35;$$02 = $34;
     label = 16;
     break;
    }
    $57 = ___cxa_find_matching_catch_3(0|0)|0;
    $58 = tempRet0;
    ___clang_call_terminate($57);
    // unreachable;
   }
   __THREW__ = 0;
   invoke_vi(637,($1|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    label = 14;
   } else {
    ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
    __THREW__ = 0;
    invoke_viii(646,($2|0),(28396|0),2);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    do {
     if ($15) {
      label = 17;
     } else {
      __THREW__ = 0;
      invoke_viidi(710,($0|0),($2|0),0.0,0);
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if ($17) {
       $40 = ___cxa_find_matching_catch_2()|0;
       $41 = tempRet0;
       __THREW__ = 0;
       invoke_vi(637,($2|0));
       $42 = __THREW__; __THREW__ = 0;
       $43 = $42&1;
       if (!($43)) {
        $$1 = $41;$$13 = $40;
        break;
       }
       $57 = ___cxa_find_matching_catch_3(0|0)|0;
       $58 = tempRet0;
       ___clang_call_terminate($57);
       // unreachable;
      }
      __THREW__ = 0;
      invoke_vi(637,($2|0));
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if ($19) {
       label = 17;
      } else {
       ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
       __THREW__ = 0;
       invoke_viii(646,($3|0),(28786|0),4);
       $20 = __THREW__; __THREW__ = 0;
       $21 = $20&1;
       do {
        if ($21) {
         label = 20;
        } else {
         __THREW__ = 0;
         invoke_viidi(710,($0|0),($3|0),-1.0,0);
         $22 = __THREW__; __THREW__ = 0;
         $23 = $22&1;
         if ($23) {
          $46 = ___cxa_find_matching_catch_2()|0;
          $47 = tempRet0;
          __THREW__ = 0;
          invoke_vi(637,($3|0));
          $48 = __THREW__; __THREW__ = 0;
          $49 = $48&1;
          if (!($49)) {
           $$2 = $47;$$24 = $46;
           break;
          }
          $57 = ___cxa_find_matching_catch_3(0|0)|0;
          $58 = tempRet0;
          ___clang_call_terminate($57);
          // unreachable;
         }
         __THREW__ = 0;
         invoke_vi(637,($3|0));
         $24 = __THREW__; __THREW__ = 0;
         $25 = $24&1;
         if ($25) {
          label = 20;
         } else {
          ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
          __THREW__ = 0;
          invoke_viii(646,($4|0),(28685|0),5);
          $26 = __THREW__; __THREW__ = 0;
          $27 = $26&1;
          do {
           if ($27) {
            label = 23;
           } else {
            __THREW__ = 0;
            invoke_viidi(710,($0|0),($4|0),0.0,0);
            $28 = __THREW__; __THREW__ = 0;
            $29 = $28&1;
            if ($29) {
             $52 = ___cxa_find_matching_catch_2()|0;
             $53 = tempRet0;
             __THREW__ = 0;
             invoke_vi(637,($4|0));
             $54 = __THREW__; __THREW__ = 0;
             $55 = $54&1;
             if (!($55)) {
              $$3 = $53;$$35 = $52;
              break;
             }
             $57 = ___cxa_find_matching_catch_3(0|0)|0;
             $58 = tempRet0;
             ___clang_call_terminate($57);
             // unreachable;
            } else {
             __THREW__ = 0;
             invoke_vi(637,($4|0));
             $30 = __THREW__; __THREW__ = 0;
             $31 = $30&1;
             if ($31) {
              label = 23;
              break;
             }
             STACKTOP = sp;return;
            }
           }
          } while(0);
          if ((label|0) == 23) {
           $50 = ___cxa_find_matching_catch_2()|0;
           $51 = tempRet0;
           $$3 = $51;$$35 = $50;
          }
          $$4 = $$3;$$46 = $$35;
          break L1;
         }
        }
       } while(0);
       if ((label|0) == 20) {
        $44 = ___cxa_find_matching_catch_2()|0;
        $45 = tempRet0;
        $$2 = $45;$$24 = $44;
       }
       $$4 = $$2;$$46 = $$24;
       break L1;
      }
     }
    } while(0);
    if ((label|0) == 17) {
     $38 = ___cxa_find_matching_catch_2()|0;
     $39 = tempRet0;
     $$1 = $39;$$13 = $38;
    }
    $$4 = $$1;$$46 = $$13;
   }
  }
 } while(0);
 if ((label|0) == 14) {
  $32 = ___cxa_find_matching_catch_2()|0;
  $33 = tempRet0;
  $$0 = $33;$$02 = $32;
  label = 16;
 }
 if ((label|0) == 16) {
  $$4 = $$0;$$46 = $$02;
 }
 $56 = HEAP32[$7>>2]|0;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN11SymbolTable6SymbolEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($0,$56);
 ___resumeException($$46|0);
 // unreachable;
}
function __ZN11SymbolTable9AddSymbolERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEdb($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 var $$0 = 0, $$06 = 0, $$1 = 0, $$17 = 0, $$pre$i$i$i$i = 0, $$sroa$018$0$$sroa_idx = 0, $$sroa$317 = 0, $$sroa$420$0$$sroa_idx = 0, $$sroa$5 = 0, $$sroa$5$0$$sroa_idx = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $4 = sp + 76|0;
 $$sroa$5 = sp + 87|0;
 $5 = sp + 32|0;
 $6 = sp;
 $7 = sp + 64|0;
 $$sroa$317 = sp + 80|0;
 $8 = (__ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN11SymbolTable6SymbolEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE14__count_uniqueIS7_EEjRKT_($0,$1)|0);
 $9 = ($8|0)==(1);
 if ($9) {
  ___assert_fail((26784|0),(26761|0),129,(26811|0));
  // unreachable;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($7,$1);
 ;HEAP8[$$sroa$5>>0]=HEAP8[$$sroa$317>>0]|0;HEAP8[$$sroa$5+1>>0]=HEAP8[$$sroa$317+1>>0]|0;HEAP8[$$sroa$5+2>>0]=HEAP8[$$sroa$317+2>>0]|0;HEAP8[$$sroa$5+3>>0]=HEAP8[$$sroa$317+3>>0]|0;HEAP8[$$sroa$5+4>>0]=HEAP8[$$sroa$317+4>>0]|0;HEAP8[$$sroa$5+5>>0]=HEAP8[$$sroa$317+5>>0]|0;HEAP8[$$sroa$5+6>>0]=HEAP8[$$sroa$317+6>>0]|0;
 __THREW__ = 0;
 invoke_vii(635,($6|0),($7|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 L4: do {
  if ($11) {
   label = 15;
  } else {
   $12 = $3&1;
   $$sroa$018$0$$sroa_idx = ((($6)) + 16|0);
   HEAPF64[$$sroa$018$0$$sroa_idx>>3] = $2;
   $$sroa$420$0$$sroa_idx = ((($6)) + 24|0);
   HEAP8[$$sroa$420$0$$sroa_idx>>0] = $12;
   $$sroa$5$0$$sroa_idx = ((($6)) + 25|0);
   ;HEAP8[$$sroa$5$0$$sroa_idx>>0]=HEAP8[$$sroa$5>>0]|0;HEAP8[$$sroa$5$0$$sroa_idx+1>>0]=HEAP8[$$sroa$5+1>>0]|0;HEAP8[$$sroa$5$0$$sroa_idx+2>>0]=HEAP8[$$sroa$5+2>>0]|0;HEAP8[$$sroa$5$0$$sroa_idx+3>>0]=HEAP8[$$sroa$5+3>>0]|0;HEAP8[$$sroa$5$0$$sroa_idx+4>>0]=HEAP8[$$sroa$5+4>>0]|0;HEAP8[$$sroa$5$0$$sroa_idx+5>>0]=HEAP8[$$sroa$5+5>>0]|0;HEAP8[$$sroa$5$0$$sroa_idx+6>>0]=HEAP8[$$sroa$5+6>>0]|0;
   __THREW__ = 0;
   invoke_vii(635,($5|0),($6|0));
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   L6: do {
    if ($14) {
     label = 16;
    } else {
     $15 = ((($5)) + 16|0);
     $16 = ((($6)) + 16|0);
     ;HEAP32[$15>>2]=HEAP32[$16>>2]|0;HEAP32[$15+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$15+8>>2]=HEAP32[$16+8>>2]|0;HEAP32[$15+12>>2]=HEAP32[$16+12>>2]|0;
     $17 = (__ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN11SymbolTable6SymbolEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE12__find_equalIS7_EERPNS_16__tree_node_baseIPvEESM_RKT_($0,$4,$5)|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($18|0)==(0|0);
     L8: do {
      if ($19) {
       __THREW__ = 0;
       $20 = (invoke_ii(716,48)|0);
       $21 = __THREW__; __THREW__ = 0;
       $22 = $21&1;
       do {
        if ($22) {
         $50 = ___cxa_find_matching_catch_2()|0;
         $51 = tempRet0;
         $eh$lpad$body$index2Z2D = $51;$eh$lpad$body$indexZ2D = $50;
        } else {
         $23 = ((($20)) + 16|0);
         __THREW__ = 0;
         invoke_vii(635,($23|0),($5|0));
         $24 = __THREW__; __THREW__ = 0;
         $25 = $24&1;
         if ($25) {
          $26 = ___cxa_find_matching_catch_2()|0;
          $27 = tempRet0;
          __ZdlPv($20);
          $eh$lpad$body$index2Z2D = $27;$eh$lpad$body$indexZ2D = $26;
          break;
         }
         $28 = ((($20)) + 32|0);
         ;HEAP32[$28>>2]=HEAP32[$15>>2]|0;HEAP32[$28+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[$28+8>>2]=HEAP32[$15+8>>2]|0;HEAP32[$28+12>>2]=HEAP32[$15+12>>2]|0;
         $29 = HEAP32[$4>>2]|0;
         HEAP32[$20>>2] = 0;
         $30 = ((($20)) + 4|0);
         HEAP32[$30>>2] = 0;
         $31 = ((($20)) + 8|0);
         HEAP32[$31>>2] = $29;
         HEAP32[$17>>2] = $20;
         $32 = HEAP32[$0>>2]|0;
         $33 = HEAP32[$32>>2]|0;
         $34 = ($33|0)==(0|0);
         if ($34) {
          $38 = $20;
         } else {
          $35 = $33;
          HEAP32[$0>>2] = $35;
          $$pre$i$i$i$i = HEAP32[$17>>2]|0;
          $38 = $$pre$i$i$i$i;
         }
         $36 = ((($0)) + 4|0);
         $37 = HEAP32[$36>>2]|0;
         __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($37,$38);
         $39 = ((($0)) + 8|0);
         $40 = HEAP32[$39>>2]|0;
         $41 = (($40) + 1)|0;
         HEAP32[$39>>2] = $41;
         break L8;
        }
       } while(0);
       __THREW__ = 0;
       invoke_vi(637,($5|0));
       $52 = __THREW__; __THREW__ = 0;
       $53 = $52&1;
       if (!($53)) {
        $$0 = $eh$lpad$body$index2Z2D;$$06 = $eh$lpad$body$indexZ2D;
        break L6;
       }
       $58 = ___cxa_find_matching_catch_3(0|0)|0;
       $59 = tempRet0;
       ___clang_call_terminate($58);
       // unreachable;
      }
     } while(0);
     __THREW__ = 0;
     invoke_vi(637,($5|0));
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      label = 16;
     } else {
      __THREW__ = 0;
      invoke_vi(637,($6|0));
      $44 = __THREW__; __THREW__ = 0;
      $45 = $44&1;
      if ($45) {
       label = 15;
       break L4;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
      STACKTOP = sp;return;
     }
    }
   } while(0);
   if ((label|0) == 16) {
    $48 = ___cxa_find_matching_catch_2()|0;
    $49 = tempRet0;
    $$0 = $49;$$06 = $48;
   }
   __THREW__ = 0;
   invoke_vi(637,($6|0));
   $54 = __THREW__; __THREW__ = 0;
   $55 = $54&1;
   if ($55) {
    $58 = ___cxa_find_matching_catch_3(0|0)|0;
    $59 = tempRet0;
    ___clang_call_terminate($58);
    // unreachable;
   } else {
    $$1 = $$0;$$17 = $$06;
   }
  }
 } while(0);
 if ((label|0) == 15) {
  $46 = ___cxa_find_matching_catch_2()|0;
  $47 = tempRet0;
  $$1 = $47;$$17 = $46;
 }
 __THREW__ = 0;
 invoke_vi(637,($7|0));
 $56 = __THREW__; __THREW__ = 0;
 $57 = $56&1;
 if ($57) {
  $58 = ___cxa_find_matching_catch_3(0|0)|0;
  $59 = tempRet0;
  ___clang_call_terminate($58);
  // unreachable;
 } else {
  ___resumeException($$17|0);
  // unreachable;
 }
}
function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN11SymbolTable6SymbolEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = HEAP32[$1>>2]|0;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN11SymbolTable6SymbolEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($0,$3);
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN11SymbolTable6SymbolEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($0,$5);
 $6 = ((($1)) + 16|0);
 __THREW__ = 0;
 invoke_vi(637,($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch_2()|0;
  $10 = tempRet0;
  ___cxa_call_unexpected(($9|0));
  // unreachable;
 }
 __ZdlPv($1);
 return;
}
function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN11SymbolTable6SymbolEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE14__count_uniqueIS7_EEjRKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$in$be = 0, $$012 = 0, $$021 = 0, $$022 = 0, $$sroa$speculated$i$i$i$i = 0, $$sroa$speculated$i$i$i$i13 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $$021 = HEAP32[$2>>2]|0;
 $3 = ($$021|0)==(0|0);
 if ($3) {
  $$012 = 0;
  return ($$012|0);
 }
 $4 = ((($1)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 $7 = ((($1)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $5&255;
 $10 = $6 ? $8 : $9;
 $11 = HEAP32[$1>>2]|0;
 $12 = $6 ? $11 : $1;
 $$022 = $$021;
 while(1) {
  $13 = ((($$022)) + 16|0);
  $14 = ((($13)) + 11|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = ($15<<24>>24)<(0);
  $17 = ((($$022)) + 20|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $15&255;
  $20 = $16 ? $18 : $19;
  $21 = ($20>>>0)<($10>>>0);
  $$sroa$speculated$i$i$i$i13 = $21 ? $20 : $10;
  $22 = ($$sroa$speculated$i$i$i$i13|0)==(0);
  if ($22) {
   label = 5;
  } else {
   $23 = HEAP32[$13>>2]|0;
   $24 = $16 ? $23 : $13;
   $25 = (_memcmp($12,$24,$$sroa$speculated$i$i$i$i13)|0);
   $26 = ($25|0)==(0);
   if ($26) {
    label = 5;
   } else {
    $28 = ($25|0)<(0);
    if ($28) {
     label = 7;
    } else {
     label = 8;
    }
   }
  }
  if ((label|0) == 5) {
   label = 0;
   $27 = ($10>>>0)<($20>>>0);
   if ($27) {
    label = 7;
   } else {
    label = 8;
   }
  }
  if ((label|0) == 7) {
   label = 0;
   $$0$in$be = $$022;
  }
  else if ((label|0) == 8) {
   label = 0;
   $29 = ($10>>>0)<($20>>>0);
   $$sroa$speculated$i$i$i$i = $29 ? $10 : $20;
   $30 = ($$sroa$speculated$i$i$i$i|0)==(0);
   if ($30) {
    label = 10;
   } else {
    $31 = HEAP32[$13>>2]|0;
    $32 = $16 ? $31 : $13;
    $33 = (_memcmp($32,$12,$$sroa$speculated$i$i$i$i)|0);
    $34 = ($33|0)==(0);
    if ($34) {
     label = 10;
    } else {
     $35 = ($33|0)<(0);
     if (!($35)) {
      $$012 = 1;
      label = 14;
      break;
     }
    }
   }
   if ((label|0) == 10) {
    label = 0;
    if (!($21)) {
     $$012 = 1;
     label = 14;
     break;
    }
   }
   $36 = ((($$022)) + 4|0);
   $$0$in$be = $36;
  }
  $$0 = HEAP32[$$0$in$be>>2]|0;
  $37 = ($$0|0)==(0|0);
  if ($37) {
   $$012 = 0;
   label = 14;
   break;
  } else {
   $$022 = $$0;
  }
 }
 if ((label|0) == 14) {
  return ($$012|0);
 }
 return (0)|0;
}
function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN11SymbolTable6SymbolEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE12__find_equalIS7_EERPNS_16__tree_node_baseIPvEESM_RKT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$be$in = 0, $$020 = 0, $$sroa$speculated$i$i$i$i = 0, $$sroa$speculated$i$i$i$i21 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  HEAP32[$1>>2] = $3;
  $$020 = $3;
  return ($$020|0);
 }
 $6 = ((($2)) + 11|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)<(0);
 $9 = ((($2)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $7&255;
 $12 = $8 ? $10 : $11;
 $13 = HEAP32[$2>>2]|0;
 $14 = $8 ? $13 : $2;
 $$0 = $4;
 while(1) {
  $15 = ((($$0)) + 16|0);
  $16 = ((($15)) + 11|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = ($17<<24>>24)<(0);
  $19 = ((($$0)) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $17&255;
  $22 = $18 ? $20 : $21;
  $23 = ($22>>>0)<($12>>>0);
  $$sroa$speculated$i$i$i$i21 = $23 ? $22 : $12;
  $24 = ($$sroa$speculated$i$i$i$i21|0)==(0);
  if ($24) {
   label = 5;
  } else {
   $25 = HEAP32[$15>>2]|0;
   $26 = $18 ? $25 : $15;
   $27 = (_memcmp($14,$26,$$sroa$speculated$i$i$i$i21)|0);
   $28 = ($27|0)==(0);
   if ($28) {
    label = 5;
   } else {
    $30 = ($27|0)<(0);
    if ($30) {
     label = 7;
    } else {
     label = 9;
    }
   }
  }
  if ((label|0) == 5) {
   label = 0;
   $29 = ($12>>>0)<($22>>>0);
   if ($29) {
    label = 7;
   } else {
    label = 9;
   }
  }
  if ((label|0) == 7) {
   label = 0;
   $31 = HEAP32[$$0>>2]|0;
   $32 = ($31|0)==(0|0);
   if ($32) {
    label = 8;
    break;
   } else {
    $$0$be$in = $31;
   }
  }
  else if ((label|0) == 9) {
   label = 0;
   $33 = ($12>>>0)<($22>>>0);
   $$sroa$speculated$i$i$i$i = $33 ? $12 : $22;
   $34 = ($$sroa$speculated$i$i$i$i|0)==(0);
   if ($34) {
    label = 11;
   } else {
    $35 = HEAP32[$15>>2]|0;
    $36 = $18 ? $35 : $15;
    $37 = (_memcmp($36,$14,$$sroa$speculated$i$i$i$i)|0);
    $38 = ($37|0)==(0);
    if ($38) {
     label = 11;
    } else {
     $39 = ($37|0)<(0);
     if (!($39)) {
      label = 16;
      break;
     }
    }
   }
   if ((label|0) == 11) {
    label = 0;
    if (!($23)) {
     label = 16;
     break;
    }
   }
   $40 = ((($$0)) + 4|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($41|0)==(0|0);
   if ($42) {
    label = 15;
    break;
   } else {
    $$0$be$in = $41;
   }
  }
  $$0 = $$0$be$in;
 }
 if ((label|0) == 8) {
  HEAP32[$1>>2] = $$0;
  $$020 = $$0;
  return ($$020|0);
 }
 else if ((label|0) == 15) {
  HEAP32[$1>>2] = $$0;
  $$020 = $40;
  return ($$020|0);
 }
 else if ((label|0) == 16) {
  HEAP32[$1>>2] = $$0;
  $$020 = $1;
  return ($$020|0);
 }
 return (0)|0;
}
function __ZN11SymbolTable7DestroyEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[9091]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  ___assert_fail((27040|0),(26761|0),60,(26821|0));
  // unreachable;
 } else {
  $2 = ((($0)) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN11SymbolTable6SymbolEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($0,$3);
  __ZdlPv($0);
  HEAP32[9091] = 0;
  return;
 }
}
function __ZNK11SymbolTable15IsSymbolDefinedERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN11SymbolTable6SymbolEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE14__count_uniqueIS7_EEjRKT_($0,$1)|0);
 $3 = ($2|0)==(1);
 return ($3|0);
}
function __ZNK11SymbolTable9GetSymbolERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN11SymbolTable6SymbolEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE14__count_uniqueIS7_EEjRKT_($0,$1)|0);
 $3 = ($2|0)==(1);
 if ($3) {
  $4 = (__ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN11SymbolTable6SymbolEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE4findIS7_EENS_21__tree_const_iteratorISA_PNS_11__tree_nodeISA_PvEEiEERKT_($0,$1)|0);
  $5 = ((($4)) + 32|0);
  $6 = +HEAPF64[$5>>3];
  return (+$6);
 } else {
  ___assert_fail((26829|0),(26761|0),146,(26855|0));
  // unreachable;
 }
 return +(0.0);
}
function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN11SymbolTable6SymbolEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE4findIS7_EENS_21__tree_const_iteratorISA_PNS_11__tree_nodeISA_PvEEiEERKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$ph$lcssa$i = 0, $$0$ph15$i = 0, $$07$ph14$i = 0, $$0711$i = 0, $$sroa$0$0 = 0, $$sroa$speculated$i$i$i$i = 0, $$sroa$speculated$i$i$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 do {
  if (!($4)) {
   $5 = ((($1)) + 11|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)<(0);
   $8 = ((($1)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $6&255;
   $11 = $7 ? $9 : $10;
   $12 = HEAP32[$1>>2]|0;
   $13 = $7 ? $12 : $1;
   $$0$ph15$i = $2;$$07$ph14$i = $3;
   L3: while(1) {
    $$0711$i = $$07$ph14$i;
    while(1) {
     $14 = ((($$0711$i)) + 16|0);
     $15 = ((($14)) + 11|0);
     $16 = HEAP8[$15>>0]|0;
     $17 = ($16<<24>>24)<(0);
     $18 = ((($$0711$i)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = $16&255;
     $21 = $17 ? $19 : $20;
     $22 = ($11>>>0)<($21>>>0);
     $$sroa$speculated$i$i$i$i$i = $22 ? $11 : $21;
     $23 = ($$sroa$speculated$i$i$i$i$i|0)==(0);
     if ($23) {
      label = 6;
     } else {
      $24 = HEAP32[$14>>2]|0;
      $25 = $17 ? $24 : $14;
      $26 = (_memcmp($25,$13,$$sroa$speculated$i$i$i$i$i)|0);
      $27 = ($26|0)==(0);
      if ($27) {
       label = 6;
      } else {
       $29 = ($26|0)<(0);
       if (!($29)) {
        break;
       }
      }
     }
     if ((label|0) == 6) {
      label = 0;
      $28 = ($21>>>0)<($11>>>0);
      if (!($28)) {
       break;
      }
     }
     $32 = ((($$0711$i)) + 4|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = ($33|0)==(0|0);
     if ($34) {
      $$0$ph$lcssa$i = $$0$ph15$i;
      break L3;
     } else {
      $$0711$i = $33;
     }
    }
    $30 = HEAP32[$$0711$i>>2]|0;
    $31 = ($30|0)==(0|0);
    if ($31) {
     $$0$ph$lcssa$i = $$0711$i;
     break;
    } else {
     $$0$ph15$i = $$0711$i;$$07$ph14$i = $30;
    }
   }
   $35 = ($$0$ph$lcssa$i|0)==($2|0);
   if (!($35)) {
    $36 = ((($$0$ph$lcssa$i)) + 16|0);
    $37 = ((($36)) + 11|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = ($38<<24>>24)<(0);
    $40 = ((($$0$ph$lcssa$i)) + 20|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = $38&255;
    $43 = $39 ? $41 : $42;
    $44 = ($43>>>0)<($11>>>0);
    $$sroa$speculated$i$i$i$i = $44 ? $43 : $11;
    $45 = ($$sroa$speculated$i$i$i$i|0)==(0);
    if (!($45)) {
     $46 = HEAP32[$36>>2]|0;
     $47 = $39 ? $46 : $36;
     $48 = (_memcmp($13,$47,$$sroa$speculated$i$i$i$i)|0);
     $49 = ($48|0)==(0);
     if (!($49)) {
      $51 = ($48|0)<(0);
      if ($51) {
       break;
      } else {
       $$sroa$0$0 = $$0$ph$lcssa$i;
      }
      return ($$sroa$0$0|0);
     }
    }
    $50 = ($11>>>0)<($43>>>0);
    if (!($50)) {
     $$sroa$0$0 = $$0$ph$lcssa$i;
     return ($$sroa$0$0|0);
    }
   }
  }
 } while(0);
 $$sroa$0$0 = $2;
 return ($$sroa$0$0|0);
}
function __ZN11SymbolTable12ChangeSymbolERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEd($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN11SymbolTable6SymbolEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE14__count_uniqueIS7_EEjRKT_($0,$1)|0);
 $4 = ($3|0)==(1);
 if ($4) {
  $5 = (__ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN11SymbolTable6SymbolEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE4findIS7_EENS_15__tree_iteratorISA_PNS_11__tree_nodeISA_PvEEiEERKT_($0,$1)|0);
  $6 = ((($5)) + 32|0);
  HEAPF64[$6>>3] = $2;
  return;
 } else {
  ___assert_fail((26829|0),(26761|0),164,(26865|0));
  // unreachable;
 }
}
function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN11SymbolTable6SymbolEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE4findIS7_EENS_15__tree_iteratorISA_PNS_11__tree_nodeISA_PvEEiEERKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$ph$lcssa$i = 0, $$0$ph15$i = 0, $$07$ph14$i = 0, $$0711$i = 0, $$sroa$0$0 = 0, $$sroa$speculated$i$i$i$i = 0, $$sroa$speculated$i$i$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 do {
  if (!($4)) {
   $5 = ((($1)) + 11|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)<(0);
   $8 = ((($1)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $6&255;
   $11 = $7 ? $9 : $10;
   $12 = HEAP32[$1>>2]|0;
   $13 = $7 ? $12 : $1;
   $$0$ph15$i = $2;$$07$ph14$i = $3;
   L3: while(1) {
    $$0711$i = $$07$ph14$i;
    while(1) {
     $14 = ((($$0711$i)) + 16|0);
     $15 = ((($14)) + 11|0);
     $16 = HEAP8[$15>>0]|0;
     $17 = ($16<<24>>24)<(0);
     $18 = ((($$0711$i)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = $16&255;
     $21 = $17 ? $19 : $20;
     $22 = ($11>>>0)<($21>>>0);
     $$sroa$speculated$i$i$i$i$i = $22 ? $11 : $21;
     $23 = ($$sroa$speculated$i$i$i$i$i|0)==(0);
     if ($23) {
      label = 6;
     } else {
      $24 = HEAP32[$14>>2]|0;
      $25 = $17 ? $24 : $14;
      $26 = (_memcmp($25,$13,$$sroa$speculated$i$i$i$i$i)|0);
      $27 = ($26|0)==(0);
      if ($27) {
       label = 6;
      } else {
       $29 = ($26|0)<(0);
       if (!($29)) {
        break;
       }
      }
     }
     if ((label|0) == 6) {
      label = 0;
      $28 = ($21>>>0)<($11>>>0);
      if (!($28)) {
       break;
      }
     }
     $32 = ((($$0711$i)) + 4|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = ($33|0)==(0|0);
     if ($34) {
      $$0$ph$lcssa$i = $$0$ph15$i;
      break L3;
     } else {
      $$0711$i = $33;
     }
    }
    $30 = HEAP32[$$0711$i>>2]|0;
    $31 = ($30|0)==(0|0);
    if ($31) {
     $$0$ph$lcssa$i = $$0711$i;
     break;
    } else {
     $$0$ph15$i = $$0711$i;$$07$ph14$i = $30;
    }
   }
   $35 = ($$0$ph$lcssa$i|0)==($2|0);
   if (!($35)) {
    $36 = ((($$0$ph$lcssa$i)) + 16|0);
    $37 = ((($36)) + 11|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = ($38<<24>>24)<(0);
    $40 = ((($$0$ph$lcssa$i)) + 20|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = $38&255;
    $43 = $39 ? $41 : $42;
    $44 = ($43>>>0)<($11>>>0);
    $$sroa$speculated$i$i$i$i = $44 ? $43 : $11;
    $45 = ($$sroa$speculated$i$i$i$i|0)==(0);
    if (!($45)) {
     $46 = HEAP32[$36>>2]|0;
     $47 = $39 ? $46 : $36;
     $48 = (_memcmp($13,$47,$$sroa$speculated$i$i$i$i)|0);
     $49 = ($48|0)==(0);
     if (!($49)) {
      $51 = ($48|0)<(0);
      if ($51) {
       break;
      } else {
       $$sroa$0$0 = $$0$ph$lcssa$i;
      }
      return ($$sroa$0$0|0);
     }
    }
    $50 = ($11>>>0)<($43>>>0);
    if (!($50)) {
     $$sroa$0$0 = $$0$ph$lcssa$i;
     return ($$sroa$0$0|0);
    }
   }
  }
 } while(0);
 $$sroa$0$0 = $2;
 return ($$sroa$0$0|0);
}
function __ZN11SymbolTable12RemoveSymbolERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i$i$i$i = 0, $$0$i$i$i$i$i$i = 0, $$06$i$i$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN11SymbolTable6SymbolEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE14__count_uniqueIS7_EEjRKT_($0,$1)|0);
 $3 = ($2|0)==(1);
 if (!($3)) {
  ___assert_fail((26829|0),(26761|0),181,(26878|0));
  // unreachable;
 }
 $4 = (__ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN11SymbolTable6SymbolEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE4findIS7_EENS_15__tree_iteratorISA_PNS_11__tree_nodeISA_PvEEiEERKT_($0,$1)|0);
 $5 = ((($0)) + 4|0);
 $6 = ($4|0)==($5|0);
 if ($6) {
  return;
 }
 $7 = ((($4)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$06$i$i$i$i$i = $4;
  while(1) {
   $12 = ((($$06$i$i$i$i$i)) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==($$06$i$i$i$i$i|0);
   if ($15) {
    $$0$i$i$i$i$i = $13;
    break;
   } else {
    $$06$i$i$i$i$i = $13;
   }
  }
 } else {
  $$0$i$i$i$i$i$i = $8;
  while(1) {
   $10 = HEAP32[$$0$i$i$i$i$i$i>>2]|0;
   $11 = ($10|0)==(0|0);
   if ($11) {
    $$0$i$i$i$i$i = $$0$i$i$i$i$i$i;
    break;
   } else {
    $$0$i$i$i$i$i$i = $10;
   }
  }
 }
 $16 = HEAP32[$0>>2]|0;
 $17 = ($16|0)==($4|0);
 if ($17) {
  $18 = $$0$i$i$i$i$i;
  HEAP32[$0>>2] = $18;
 }
 $19 = ((($0)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + -1)|0;
 HEAP32[$19>>2] = $21;
 $22 = ((($0)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 __ZNSt3__213__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_($23,$4);
 $24 = ((($4)) + 16|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($24);
 __ZdlPv($4);
 return;
}
function __ZNSt3__213__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$0 = 0, $$0 = 0, $$0$i$i = 0, $$0113 = 0, $$1 = 0, $$1114 = 0, $$1114$$2 = 0, $$1114$$2125 = 0, $$1114$be = 0, $$1114$be$in = 0, $$2 = 0, $$2$be = 0, $$2115 = 0, $$3116 = 0, $$4 = 0, $$4117 = 0, $$5118 = 0, $$6 = 0, $$cast144 = 0, $$in = 0;
 var $$in123 = 0, $$in124 = 0, $$lcssa158 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre162 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond143 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $12 = $1;$9 = 0;
 } else {
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if ($6) {
   $12 = $1;$9 = $2;
  } else {
   $$0$i$i = $5;
   while(1) {
    $7 = HEAP32[$$0$i$i>>2]|0;
    $8 = ($7|0)==(0|0);
    if ($8) {
     $12 = $$0$i$i;$9 = 0;
     break;
    } else {
     $$0$i$i = $7;
    }
   }
  }
 }
 $10 = ($9|0)==(0|0);
 $11 = ((($12)) + 4|0);
 $$in = $10 ? $11 : $12;
 $13 = HEAP32[$$in>>2]|0;
 $14 = ($13|0)==(0|0);
 $$pre162 = ((($12)) + 8|0);
 if (!($14)) {
  $15 = HEAP32[$$pre162>>2]|0;
  $16 = ((($13)) + 8|0);
  HEAP32[$16>>2] = $15;
 }
 $17 = HEAP32[$$pre162>>2]|0;
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==($12|0);
 if ($19) {
  HEAP32[$17>>2] = $13;
  $20 = ($12|0)==($0|0);
  if ($20) {
   $$0 = $13;$$0113 = 0;
  } else {
   $21 = ((($17)) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   $$0 = $0;$$0113 = $22;
  }
 } else {
  $23 = ((($17)) + 4|0);
  HEAP32[$23>>2] = $13;
  $$0 = $0;$$0113 = $18;
 }
 $24 = ((($12)) + 12|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = ($25<<24>>24)==(0);
 $27 = ($12|0)==($1|0);
 if ($27) {
  $$1 = $$0;
 } else {
  $28 = ((($1)) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  HEAP32[$$pre162>>2] = $29;
  $30 = HEAP32[$28>>2]|0;
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)==($1|0);
  $$cast144 = $29;
  if ($32) {
   HEAP32[$$cast144>>2] = $12;
  } else {
   $33 = ((($$cast144)) + 4|0);
   HEAP32[$33>>2] = $12;
  }
  $34 = HEAP32[$1>>2]|0;
  HEAP32[$12>>2] = $34;
  $35 = ((($34)) + 8|0);
  HEAP32[$35>>2] = $12;
  $36 = ((($1)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  HEAP32[$11>>2] = $37;
  $38 = ($37|0)==(0|0);
  if (!($38)) {
   $39 = ((($37)) + 8|0);
   HEAP32[$39>>2] = $12;
  }
  $40 = ((($1)) + 12|0);
  $41 = HEAP8[$40>>0]|0;
  HEAP8[$24>>0] = $41;
  $42 = ($$0|0)==($1|0);
  $$$0 = $42 ? $12 : $$0;
  $$1 = $$$0;
 }
 $43 = ($$1|0)==(0|0);
 $or$cond143 = $26 | $43;
 if ($or$cond143) {
  return;
 }
 if ($14) {
  $$1114 = $$0113;$$2 = $$1;
 } else {
  $44 = ((($13)) + 12|0);
  HEAP8[$44>>0] = 1;
  return;
 }
 while(1) {
  $45 = ((($$1114)) + 8|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = HEAP32[$46>>2]|0;
  $48 = ($47|0)==($$1114|0);
  $49 = ((($$1114)) + 12|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = ($50<<24>>24)!=(0);
  if ($48) {
   if ($51) {
    $$4117 = $$1114;$$6 = $$2;
   } else {
    HEAP8[$49>>0] = 1;
    $130 = ((($46)) + 12|0);
    HEAP8[$130>>0] = 0;
    $131 = HEAP32[$46>>2]|0;
    $132 = ((($131)) + 4|0);
    $133 = HEAP32[$132>>2]|0;
    HEAP32[$46>>2] = $133;
    $134 = ($133|0)==(0|0);
    if (!($134)) {
     $135 = ((($133)) + 8|0);
     HEAP32[$135>>2] = $46;
    }
    $136 = ((($46)) + 8|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = ((($131)) + 8|0);
    HEAP32[$138>>2] = $137;
    $139 = HEAP32[$136>>2]|0;
    $140 = HEAP32[$139>>2]|0;
    $141 = ($140|0)==($46|0);
    if ($141) {
     HEAP32[$139>>2] = $131;
    } else {
     $142 = ((($139)) + 4|0);
     HEAP32[$142>>2] = $131;
    }
    HEAP32[$132>>2] = $46;
    HEAP32[$136>>2] = $131;
    $143 = ((($$1114)) + 4|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = ($$2|0)==($144|0);
    $$1114$$2125 = $145 ? $$1114 : $$2;
    $146 = HEAP32[$144>>2]|0;
    $$4117 = $146;$$6 = $$1114$$2125;
   }
   $147 = HEAP32[$$4117>>2]|0;
   $148 = ($147|0)==(0|0);
   if (!($148)) {
    $149 = ((($147)) + 12|0);
    $150 = HEAP8[$149>>0]|0;
    $151 = ($150<<24>>24)==(0);
    if ($151) {
     label = 66;
     break;
    }
   }
   $152 = ((($$4117)) + 4|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = ($153|0)==(0|0);
   if (!($154)) {
    $155 = ((($153)) + 12|0);
    $156 = HEAP8[$155>>0]|0;
    $157 = ($156<<24>>24)==(0);
    if ($157) {
     label = 65;
     break;
    }
   }
   $158 = ((($$4117)) + 12|0);
   HEAP8[$158>>0] = 0;
   $159 = ((($$4117)) + 8|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = ((($160)) + 12|0);
   $162 = HEAP8[$161>>0]|0;
   $163 = ($162<<24>>24)==(0);
   $164 = ($160|0)==($$6|0);
   $or$cond = $164 | $163;
   if ($or$cond) {
    label = 62;
    break;
   }
   $165 = ((($160)) + 8|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = HEAP32[$166>>2]|0;
   $168 = ($167|0)==($160|0);
   $169 = ((($166)) + 4|0);
   $$in124 = $168 ? $169 : $166;
   $$1114$be$in = $$in124;$$2$be = $$6;
  } else {
   if ($51) {
    $$2115 = $$1114;$$4 = $$2;
   } else {
    HEAP8[$49>>0] = 1;
    $52 = ((($46)) + 12|0);
    HEAP8[$52>>0] = 0;
    $53 = ((($46)) + 4|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = HEAP32[$54>>2]|0;
    HEAP32[$53>>2] = $55;
    $56 = ($55|0)==(0|0);
    if (!($56)) {
     $57 = ((($55)) + 8|0);
     HEAP32[$57>>2] = $46;
    }
    $58 = ((($46)) + 8|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = ((($54)) + 8|0);
    HEAP32[$60>>2] = $59;
    $61 = HEAP32[$58>>2]|0;
    $62 = HEAP32[$61>>2]|0;
    $63 = ($62|0)==($46|0);
    if ($63) {
     HEAP32[$61>>2] = $54;
    } else {
     $64 = ((($61)) + 4|0);
     HEAP32[$64>>2] = $54;
    }
    HEAP32[$54>>2] = $46;
    HEAP32[$58>>2] = $54;
    $65 = HEAP32[$$1114>>2]|0;
    $66 = ($$2|0)==($65|0);
    $$1114$$2 = $66 ? $$1114 : $$2;
    $67 = ((($65)) + 4|0);
    $68 = HEAP32[$67>>2]|0;
    $$2115 = $68;$$4 = $$1114$$2;
   }
   $69 = HEAP32[$$2115>>2]|0;
   $70 = ($69|0)==(0|0);
   if (!($70)) {
    $71 = ((($69)) + 12|0);
    $72 = HEAP8[$71>>0]|0;
    $73 = ($72<<24>>24)==(0);
    if ($73) {
     label = 36;
     break;
    }
   }
   $74 = ((($$2115)) + 4|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = ($75|0)==(0|0);
   if (!($76)) {
    $77 = ((($75)) + 12|0);
    $78 = HEAP8[$77>>0]|0;
    $79 = ($78<<24>>24)==(0);
    if ($79) {
     $95 = $75;
     label = 37;
     break;
    }
   }
   $80 = ((($$2115)) + 12|0);
   HEAP8[$80>>0] = 0;
   $81 = ((($$2115)) + 8|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = ($82|0)==($$4|0);
   if ($83) {
    $$lcssa158 = $$4;
    label = 34;
    break;
   }
   $84 = ((($82)) + 12|0);
   $85 = HEAP8[$84>>0]|0;
   $86 = ($85<<24>>24)==(0);
   if ($86) {
    $$lcssa158 = $82;
    label = 34;
    break;
   }
   $88 = ((($82)) + 8|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = HEAP32[$89>>2]|0;
   $91 = ($90|0)==($82|0);
   $92 = ((($89)) + 4|0);
   $$in123 = $91 ? $92 : $89;
   $$1114$be$in = $$in123;$$2$be = $$4;
  }
  $$1114$be = HEAP32[$$1114$be$in>>2]|0;
  $$1114 = $$1114$be;$$2 = $$2$be;
 }
 if ((label|0) == 34) {
  $87 = ((($$lcssa158)) + 12|0);
  HEAP8[$87>>0] = 1;
  return;
 }
 else if ((label|0) == 36) {
  $$phi$trans$insert = ((($$2115)) + 4|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $93 = ($$pre|0)==(0|0);
  if ($93) {
   label = 38;
  } else {
   $95 = $$pre;
   label = 37;
  }
 }
 else if ((label|0) == 62) {
  HEAP8[$161>>0] = 1;
  return;
 }
 else if ((label|0) == 65) {
  if ($148) {
   label = 67;
  } else {
   label = 66;
  }
 }
 if ((label|0) == 37) {
  $94 = ((($95)) + 12|0);
  $96 = HEAP8[$94>>0]|0;
  $97 = ($96<<24>>24)==(0);
  if ($97) {
   $$3116 = $$2115;$117 = $95;
   label = 44;
  } else {
   label = 38;
  }
 }
 else if ((label|0) == 66) {
  $170 = ((($147)) + 12|0);
  $171 = HEAP8[$170>>0]|0;
  $172 = ($171<<24>>24)==(0);
  if ($172) {
   $$5118 = $$4117;$193 = $147;
   label = 73;
  } else {
   label = 67;
  }
 }
 if ((label|0) == 38) {
  $98 = ((($69)) + 12|0);
  HEAP8[$98>>0] = 1;
  $99 = ((($$2115)) + 12|0);
  HEAP8[$99>>0] = 0;
  $100 = ((($69)) + 4|0);
  $101 = HEAP32[$100>>2]|0;
  HEAP32[$$2115>>2] = $101;
  $102 = ($101|0)==(0|0);
  if (!($102)) {
   $103 = ((($101)) + 8|0);
   HEAP32[$103>>2] = $$2115;
  }
  $104 = ((($$2115)) + 8|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = ((($69)) + 8|0);
  HEAP32[$106>>2] = $105;
  $107 = HEAP32[$104>>2]|0;
  $108 = HEAP32[$107>>2]|0;
  $109 = ($108|0)==($$2115|0);
  if ($109) {
   HEAP32[$107>>2] = $69;
  } else {
   $110 = ((($107)) + 4|0);
   HEAP32[$110>>2] = $69;
  }
  HEAP32[$100>>2] = $$2115;
  HEAP32[$104>>2] = $69;
  $$3116 = $69;$117 = $$2115;
  label = 44;
 }
 else if ((label|0) == 67) {
  $173 = ((($$4117)) + 4|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = ((($174)) + 12|0);
  HEAP8[$175>>0] = 1;
  $176 = ((($$4117)) + 12|0);
  HEAP8[$176>>0] = 0;
  $177 = HEAP32[$174>>2]|0;
  HEAP32[$173>>2] = $177;
  $178 = ($177|0)==(0|0);
  if (!($178)) {
   $179 = ((($177)) + 8|0);
   HEAP32[$179>>2] = $$4117;
  }
  $180 = ((($$4117)) + 8|0);
  $181 = HEAP32[$180>>2]|0;
  $182 = ((($174)) + 8|0);
  HEAP32[$182>>2] = $181;
  $183 = HEAP32[$180>>2]|0;
  $184 = HEAP32[$183>>2]|0;
  $185 = ($184|0)==($$4117|0);
  if ($185) {
   HEAP32[$183>>2] = $174;
  } else {
   $186 = ((($183)) + 4|0);
   HEAP32[$186>>2] = $174;
  }
  HEAP32[$174>>2] = $$4117;
  HEAP32[$180>>2] = $174;
  $$5118 = $174;$193 = $$4117;
  label = 73;
 }
 if ((label|0) == 44) {
  $111 = ((($$3116)) + 8|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = ((($112)) + 12|0);
  $114 = HEAP8[$113>>0]|0;
  $115 = ((($$3116)) + 12|0);
  HEAP8[$115>>0] = $114;
  HEAP8[$113>>0] = 1;
  $116 = ((($117)) + 12|0);
  HEAP8[$116>>0] = 1;
  $118 = ((($112)) + 4|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = HEAP32[$119>>2]|0;
  HEAP32[$118>>2] = $120;
  $121 = ($120|0)==(0|0);
  if (!($121)) {
   $122 = ((($120)) + 8|0);
   HEAP32[$122>>2] = $112;
  }
  $123 = ((($112)) + 8|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = ((($119)) + 8|0);
  HEAP32[$125>>2] = $124;
  $126 = HEAP32[$123>>2]|0;
  $127 = HEAP32[$126>>2]|0;
  $128 = ($127|0)==($112|0);
  if ($128) {
   HEAP32[$126>>2] = $119;
  } else {
   $129 = ((($126)) + 4|0);
   HEAP32[$129>>2] = $119;
  }
  HEAP32[$119>>2] = $112;
  HEAP32[$123>>2] = $119;
  return;
 }
 else if ((label|0) == 73) {
  $187 = ((($$5118)) + 8|0);
  $188 = HEAP32[$187>>2]|0;
  $189 = ((($188)) + 12|0);
  $190 = HEAP8[$189>>0]|0;
  $191 = ((($$5118)) + 12|0);
  HEAP8[$191>>0] = $190;
  HEAP8[$189>>0] = 1;
  $192 = ((($193)) + 12|0);
  HEAP8[$192>>0] = 1;
  $194 = HEAP32[$188>>2]|0;
  $195 = ((($194)) + 4|0);
  $196 = HEAP32[$195>>2]|0;
  HEAP32[$188>>2] = $196;
  $197 = ($196|0)==(0|0);
  if (!($197)) {
   $198 = ((($196)) + 8|0);
   HEAP32[$198>>2] = $188;
  }
  $199 = ((($188)) + 8|0);
  $200 = HEAP32[$199>>2]|0;
  $201 = ((($194)) + 8|0);
  HEAP32[$201>>2] = $200;
  $202 = HEAP32[$199>>2]|0;
  $203 = HEAP32[$202>>2]|0;
  $204 = ($203|0)==($188|0);
  if ($204) {
   HEAP32[$202>>2] = $194;
  } else {
   $205 = ((($202)) + 4|0);
   HEAP32[$205>>2] = $194;
  }
  HEAP32[$195>>2] = $188;
  HEAP32[$199>>2] = $194;
  return;
 }
}
function __ZNK11SymbolTable4DumpEv($0) {
 $0 = $0|0;
 var $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$off019 = 0, $$06$i$i$i = 0, $$1$off0 = 0, $$sroa$011$017 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(39840,26891,2)|0);
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = ($2|0)==($3|0);
 if (!($4)) {
  $$0$off019 = 1;$$sroa$011$017 = $2;
  while(1) {
   $26 = ((($$sroa$011$017)) + 16|0);
   $27 = ((($$sroa$011$017)) + 40|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = ($28<<24>>24)==(0);
   if ($29) {
    $$1$off0 = $$0$off019;
   } else {
    $30 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcj($26,64,0)|0);
    $31 = ($30|0)==(-1);
    if ($31) {
     if (!($$0$off019)) {
      (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(39840,26897,1)|0);
     }
     $32 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(39840,27898,1)|0);
     $33 = ((($26)) + 11|0);
     $34 = HEAP8[$33>>0]|0;
     $35 = ($34<<24>>24)<(0);
     $36 = HEAP32[$26>>2]|0;
     $37 = $35 ? $36 : $26;
     $38 = ((($$sroa$011$017)) + 20|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = $34&255;
     $41 = $35 ? $39 : $40;
     $42 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($32,$37,$41)|0);
     $43 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($42,26899,2)|0);
     $44 = ((($$sroa$011$017)) + 32|0);
     $45 = +HEAPF64[$44>>3];
     $46 = (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEd($43,$45)|0);
     (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($46,32875,1)|0);
     $$1$off0 = 0;
    } else {
     $$1$off0 = $$0$off019;
    }
   }
   $47 = ((($$sroa$011$017)) + 4|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==(0|0);
   if ($49) {
    $$06$i$i$i = $$sroa$011$017;
    while(1) {
     $52 = ((($$06$i$i$i)) + 8|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==($$06$i$i$i|0);
     if ($55) {
      $$0$i$i$i = $53;
      break;
     } else {
      $$06$i$i$i = $53;
     }
    }
   } else {
    $$0$i$i$i$i = $48;
    while(1) {
     $50 = HEAP32[$$0$i$i$i$i>>2]|0;
     $51 = ($50|0)==(0|0);
     if ($51) {
      $$0$i$i$i = $$0$i$i$i$i;
      break;
     } else {
      $$0$i$i$i$i = $50;
     }
    }
   }
   $56 = ($$0$i$i$i|0)==($3|0);
   if ($56) {
    break;
   } else {
    $$0$off019 = $$1$off0;$$sroa$011$017 = $$0$i$i$i;
   }
  }
 }
 $5 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(39840,26894,2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + -12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($5) + ($8)|0);
 $10 = (__ZNKSt3__28ios_base6getlocEv($9)|0);
 HEAP32[$1>>2] = $10;
 __THREW__ = 0;
 $11 = (invoke_iii(659,($1|0),(40712|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if (!($13)) {
  $14 = HEAP32[$11>>2]|0;
  $15 = ((($14)) + 28|0);
  $16 = HEAP32[$15>>2]|0;
  __THREW__ = 0;
  $17 = (invoke_iii($16|0,($11|0),10)|0);
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if (!($19)) {
   __ZNSt3__26localeD2Ev($1);
   (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($5,$17)|0);
   (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($5)|0);
   STACKTOP = sp;return;
  }
 }
 $20 = ___cxa_find_matching_catch_2()|0;
 $21 = tempRet0;
 __THREW__ = 0;
 invoke_vi(660,($1|0));
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if ($23) {
  $24 = ___cxa_find_matching_catch_3(0|0)|0;
  $25 = tempRet0;
  ___clang_call_terminate($24);
  // unreachable;
 } else {
  ___resumeException($20|0);
  // unreachable;
 }
}
function __ZN10LineParser17HandleDefineLabelEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i = 0, $$011 = 0, $$013 = 0, $$015 = 0, $$03$i = 0, $$09 = 0, $$09$lpad$bodyZZ2D = 0, $$11451 = 0, $$11650 = 0, $$21753 = 0, $$254 = 0, $$3 = 0, $$318 = 0, $$4 = 0, $$419 = 0, $$5 = 0, $$520 = 0, $$62156 = 0, $$657 = 0;
 var $$7 = 0, $$722 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $eh$lpad$body38$index7Z2D = 0, $eh$lpad$body38$indexZ2D = 0, $eh$lpad$body47$index2Z2D = 0, $eh$lpad$body47$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $1 = sp + 84|0;
 $2 = sp + 72|0;
 $3 = sp + 60|0;
 $4 = sp + 48|0;
 $5 = sp + 36|0;
 $6 = sp + 24|0;
 $7 = sp + 12|0;
 $8 = sp;
 $9 = ((($0)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 4|0);
 $12 = ((($11)) + 11|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = ($13<<24>>24)<(0);
 if ($14) {
  $15 = ((($0)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $19 = $16;
 } else {
  $17 = $13&255;
  $19 = $17;
 }
 $18 = ($10>>>0)<($19>>>0);
 do {
  if ($18) {
   if ($14) {
    $20 = HEAP32[$11>>2]|0;
    $22 = $20;
   } else {
    $22 = $11;
   }
   $21 = (($22) + ($10)|0);
   $23 = HEAP8[$21>>0]|0;
   $24 = $23 << 24 >> 24;
   $25 = (_isalpha($24)|0);
   $26 = ($25|0)==(0);
   if ($26) {
    if ($14) {
     $27 = HEAP32[$11>>2]|0;
     $29 = $27;
    } else {
     $29 = $11;
    }
    $28 = (($29) + ($10)|0);
    $30 = HEAP8[$28>>0]|0;
    $31 = ($30<<24>>24)==(95);
    if (!($31)) {
     break;
    }
   }
   __ZN10LineParser13GetSymbolNameEv($3,$0);
   $32 = HEAP32[$0>>2]|0;
   __THREW__ = 0;
   invoke_viii(677,($5|0),($32|0),-1);
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   do {
    if ($34) {
     label = 29;
    } else {
     ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
     $35 = ((($3)) + 11|0);
     $36 = HEAP8[$35>>0]|0;
     $37 = ($36<<24>>24)<(0);
     $38 = ((($3)) + 4|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = $36&255;
     $41 = $37 ? $39 : $40;
     $42 = ((($5)) + 11|0);
     $43 = HEAP8[$42>>0]|0;
     $44 = ($43<<24>>24)<(0);
     $45 = ((($5)) + 4|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = $43&255;
     $48 = $44 ? $46 : $47;
     $49 = HEAP32[$3>>2]|0;
     $50 = $37 ? $49 : $3;
     $51 = (($48) + ($41))|0;
     __THREW__ = 0;
     invoke_viiii(678,($4|0),($50|0),($41|0),($51|0));
     $52 = __THREW__; __THREW__ = 0;
     $53 = $52&1;
     if (!($53)) {
      $54 = HEAP8[$42>>0]|0;
      $55 = ($54<<24>>24)<(0);
      $56 = HEAP32[$5>>2]|0;
      $57 = $55 ? $56 : $5;
      __THREW__ = 0;
      (invoke_iiii(679,($4|0),($57|0),($48|0))|0);
      $58 = __THREW__; __THREW__ = 0;
      $59 = $58&1;
      if (!($59)) {
       __THREW__ = 0;
       invoke_vi(637,($5|0));
       $66 = __THREW__; __THREW__ = 0;
       $67 = $66&1;
       if ($67) {
        label = 29;
        break;
       }
       $68 = HEAP32[9088]|0;
       $69 = ($68|0)==(0|0);
       L24: do {
        if ($69) {
         __THREW__ = 0;
         invoke_viiii(680,(27040|0),(27060|0),38,(27075|0));
         $70 = __THREW__; __THREW__ = 0;
         label = 32;
        } else {
         $71 = HEAP32[$68>>2]|0;
         $72 = ($71|0)==(0);
         $73 = HEAP32[9091]|0;
         $74 = ($73|0)==(0|0);
         do {
          if ($72) {
           if ($74) {
            __THREW__ = 0;
            invoke_viiii(680,(27040|0),(27806|0),38,(27075|0));
            $75 = __THREW__; __THREW__ = 0;
            label = 32;
            break L24;
           }
           __THREW__ = 0;
           $76 = (invoke_iii(681,($73|0),($4|0))|0);
           $77 = __THREW__; __THREW__ = 0;
           $78 = $77&1;
           if ($78) {
            label = 32;
            break L24;
           }
           if (!($76)) {
            $97 = HEAP32[9091]|0;
            $98 = ($97|0)==(0|0);
            if ($98) {
             __THREW__ = 0;
             invoke_viiii(680,(27040|0),(27806|0),38,(27075|0));
             $99 = __THREW__; __THREW__ = 0;
             label = 32;
             break L24;
            }
            $100 = HEAP32[9090]|0;
            $101 = ($100|0)==(0|0);
            if ($101) {
             __THREW__ = 0;
             invoke_viiii(680,(27040|0),(27084|0),36,(27075|0));
             $102 = __THREW__; __THREW__ = 0;
             label = 32;
             break L24;
            } else {
             $103 = ((($100)) + 131072|0);
             $104 = HEAP32[$103>>2]|0;
             $105 = (+($104|0));
             __THREW__ = 0;
             invoke_viidi(710,($97|0),($4|0),(+$105),1);
             $106 = __THREW__; __THREW__ = 0;
             $107 = $106&1;
             if ($107) {
              label = 32;
              break L24;
             } else {
              break;
             }
            }
           }
           $79 = (___cxa_allocate_exception(36)|0);
           __THREW__ = 0;
           invoke_vii(635,($6|0),($11|0));
           $80 = __THREW__; __THREW__ = 0;
           $81 = $80&1;
           do {
            if ($81) {
             $91 = ___cxa_find_matching_catch_2()|0;
             $92 = tempRet0;
             $$11451 = $92;$$11650 = $91;
            } else {
             __THREW__ = 0;
             invoke_viii(729,($79|0),($6|0),($10|0));
             $82 = __THREW__; __THREW__ = 0;
             $83 = $82&1;
             if ($83) {
              $$011 = 1;
             } else {
              __THREW__ = 0;
              invoke_viii(644,($79|0),(984|0),(7|0));
              $84 = __THREW__; __THREW__ = 0;
              $$011 = 0;
             }
             $93 = ___cxa_find_matching_catch_2()|0;
             $94 = tempRet0;
             __THREW__ = 0;
             invoke_vi(637,($6|0));
             $95 = __THREW__; __THREW__ = 0;
             $96 = $95&1;
             if ($96) {
              $223 = ___cxa_find_matching_catch_3(0|0)|0;
              $224 = tempRet0;
              ___clang_call_terminate($223);
              // unreachable;
             } else {
              if ($$011) {
               $$11451 = $94;$$11650 = $93;
               break;
              } else {
               $$3 = $94;$$318 = $93;
               label = 83;
               break L24;
              }
             }
            }
           } while(0);
           ___cxa_free_exception(($79|0));
           $$3 = $$11451;$$318 = $$11650;
           label = 83;
           break L24;
          } else {
           if ($74) {
            __THREW__ = 0;
            invoke_viiii(680,(27040|0),(27806|0),38,(27075|0));
            $108 = __THREW__; __THREW__ = 0;
            label = 32;
            break L24;
           }
           __THREW__ = 0;
           $109 = (+invoke_dii(682,($73|0),($4|0)));
           $110 = __THREW__; __THREW__ = 0;
           $111 = $110&1;
           if ($111) {
            label = 32;
            break L24;
           }
           $112 = HEAP32[9090]|0;
           $113 = ($112|0)==(0|0);
           if ($113) {
            __THREW__ = 0;
            invoke_viiii(680,(27040|0),(27084|0),36,(27075|0));
            $114 = __THREW__; __THREW__ = 0;
            label = 32;
            break L24;
           }
           $115 = ((($112)) + 131072|0);
           $116 = HEAP32[$115>>2]|0;
           $117 = (+($116|0));
           $118 = $109 != $117;
           if ($118) {
            $119 = (___cxa_allocate_exception(36)|0);
            __THREW__ = 0;
            invoke_vii(635,($7|0),($11|0));
            $120 = __THREW__; __THREW__ = 0;
            $121 = $120&1;
            do {
             if ($121) {
              $147 = ___cxa_find_matching_catch_2()|0;
              $148 = tempRet0;
              $$21753 = $147;$$254 = $148;
             } else {
              __THREW__ = 0;
              invoke_vii(635,($2|0),($7|0));
              $122 = __THREW__; __THREW__ = 0;
              $123 = $122&1;
              L64: do {
               if ($123) {
                $$09 = 1;
                label = 61;
               } else {
                HEAP32[$119>>2] = (4652);
                $124 = ((($119)) + 4|0);
                __THREW__ = 0;
                invoke_vii(635,($124|0),($2|0));
                $125 = __THREW__; __THREW__ = 0;
                $126 = $125&1;
                do {
                 if ($126) {
                  $131 = ___cxa_find_matching_catch_2()|0;
                  $132 = tempRet0;
                  $$0$i = $132;$$03$i = $131;
                 } else {
                  $127 = ((($119)) + 16|0);
                  HEAP32[$127>>2] = $10;
                  $128 = ((($119)) + 20|0);
                  ;HEAP32[$128>>2]=0|0;HEAP32[$128+4>>2]=0|0;HEAP32[$128+8>>2]=0|0;
                  __THREW__ = 0;
                  invoke_viii(646,($128|0),(44984|0),0);
                  $129 = __THREW__; __THREW__ = 0;
                  $130 = $129&1;
                  if ($130) {
                   $133 = ___cxa_find_matching_catch_2()|0;
                   $134 = tempRet0;
                   __THREW__ = 0;
                   invoke_vi(637,($124|0));
                   $135 = __THREW__; __THREW__ = 0;
                   $136 = $135&1;
                   if (!($136)) {
                    $$0$i = $134;$$03$i = $133;
                    break;
                   }
                   $137 = ___cxa_find_matching_catch_3(0|0)|0;
                   $138 = tempRet0;
                   ___clang_call_terminate($137);
                   // unreachable;
                  } else {
                   $139 = ((($119)) + 32|0);
                   HEAP32[$139>>2] = 0;
                   __THREW__ = 0;
                   invoke_vi(637,($2|0));
                   $140 = __THREW__; __THREW__ = 0;
                   $141 = $140&1;
                   if ($141) {
                    $$09 = 1;
                    label = 61;
                    break L64;
                   }
                   HEAP32[$119>>2] = (9516);
                   __THREW__ = 0;
                   invoke_viii(644,($119|0),(1352|0),(7|0));
                   $146 = __THREW__; __THREW__ = 0;
                   $$09 = 0;
                   label = 61;
                   break L64;
                  }
                 }
                } while(0);
                __THREW__ = 0;
                invoke_vi(637,($2|0));
                $142 = __THREW__; __THREW__ = 0;
                $143 = $142&1;
                if (!($143)) {
                 $$09$lpad$bodyZZ2D = 1;$eh$lpad$body38$index7Z2D = $$0$i;$eh$lpad$body38$indexZ2D = $$03$i;
                 break;
                }
                $144 = ___cxa_find_matching_catch_3(0|0)|0;
                $145 = tempRet0;
                ___clang_call_terminate($144);
                // unreachable;
               }
              } while(0);
              if ((label|0) == 61) {
               $149 = ___cxa_find_matching_catch_2()|0;
               $150 = tempRet0;
               $$09$lpad$bodyZZ2D = $$09;$eh$lpad$body38$index7Z2D = $150;$eh$lpad$body38$indexZ2D = $149;
              }
              __THREW__ = 0;
              invoke_vi(637,($7|0));
              $151 = __THREW__; __THREW__ = 0;
              $152 = $151&1;
              if ($152) {
               $223 = ___cxa_find_matching_catch_3(0|0)|0;
               $224 = tempRet0;
               ___clang_call_terminate($223);
               // unreachable;
              } else {
               if ($$09$lpad$bodyZZ2D) {
                $$21753 = $eh$lpad$body38$indexZ2D;$$254 = $eh$lpad$body38$index7Z2D;
                break;
               } else {
                $$3 = $eh$lpad$body38$index7Z2D;$$318 = $eh$lpad$body38$indexZ2D;
                label = 83;
                break L24;
               }
              }
             }
            } while(0);
            ___cxa_free_exception(($119|0));
            $$3 = $$254;$$318 = $$21753;
            label = 83;
            break L24;
           }
          }
         } while(0);
         $153 = HEAP32[9088]|0;
         $154 = ($153|0)==(0|0);
         if ($154) {
          __THREW__ = 0;
          invoke_viiii(680,(27040|0),(27060|0),38,(27075|0));
          $155 = __THREW__; __THREW__ = 0;
          label = 32;
          break;
         }
         $156 = HEAP32[$153>>2]|0;
         $157 = ($156|0)==(1);
         L87: do {
          if ($157) {
           $158 = ((($153)) + 8|0);
           $159 = HEAP8[$158>>0]|0;
           $160 = ($159<<24>>24)==(0);
           if (!($160)) {
            __THREW__ = 0;
            $161 = (invoke_iiii(655,(39840|0),(29740|0),1)|0);
            $162 = __THREW__; __THREW__ = 0;
            $163 = $162&1;
            if ($163) {
             label = 32;
             break L24;
            }
            $164 = HEAP8[$35>>0]|0;
            $165 = ($164<<24>>24)<(0);
            $166 = HEAP32[$3>>2]|0;
            $167 = $165 ? $166 : $3;
            $168 = HEAP32[$38>>2]|0;
            $169 = $164&255;
            $170 = $165 ? $168 : $169;
            __THREW__ = 0;
            $171 = (invoke_iiii(655,($161|0),($167|0),($170|0))|0);
            $172 = __THREW__; __THREW__ = 0;
            $173 = $172&1;
            if ($173) {
             label = 32;
             break L24;
            }
            $174 = HEAP32[$171>>2]|0;
            $175 = ((($174)) + -12|0);
            $176 = HEAP32[$175>>2]|0;
            $177 = (($171) + ($176)|0);
            __THREW__ = 0;
            $178 = (invoke_ii(658,($177|0))|0);
            $179 = __THREW__; __THREW__ = 0;
            $180 = $179&1;
            if ($180) {
             label = 32;
             break L24;
            }
            HEAP32[$1>>2] = $178;
            __THREW__ = 0;
            $181 = (invoke_iii(659,($1|0),(40712|0))|0);
            $182 = __THREW__; __THREW__ = 0;
            $183 = $182&1;
            do {
             if (!($183)) {
              $184 = HEAP32[$181>>2]|0;
              $185 = ((($184)) + 28|0);
              $186 = HEAP32[$185>>2]|0;
              __THREW__ = 0;
              $187 = (invoke_iii($186|0,($181|0),10)|0);
              $188 = __THREW__; __THREW__ = 0;
              $189 = $188&1;
              if ($189) {
               break;
              }
              __THREW__ = 0;
              invoke_vi(660,($1|0));
              $190 = __THREW__; __THREW__ = 0;
              $191 = $190&1;
              if ($191) {
               label = 32;
               break L24;
              }
              __THREW__ = 0;
              (invoke_iii(687,($171|0),($187|0))|0);
              $198 = __THREW__; __THREW__ = 0;
              $199 = $198&1;
              if ($199) {
               label = 32;
               break L24;
              }
              __THREW__ = 0;
              (invoke_ii(688,($171|0))|0);
              $200 = __THREW__; __THREW__ = 0;
              $201 = $200&1;
              if ($201) {
               label = 32;
               break L24;
              } else {
               break L87;
              }
             }
            } while(0);
            $192 = ___cxa_find_matching_catch_2()|0;
            $193 = tempRet0;
            __THREW__ = 0;
            invoke_vi(660,($1|0));
            $194 = __THREW__; __THREW__ = 0;
            $195 = $194&1;
            if ($195) {
             $196 = ___cxa_find_matching_catch_3(0|0)|0;
             $197 = tempRet0;
             ___clang_call_terminate($196);
             // unreachable;
            } else {
             $eh$lpad$body47$index2Z2D = $193;$eh$lpad$body47$indexZ2D = $192;
             label = 33;
             break L24;
            }
           }
          }
         } while(0);
         __THREW__ = 0;
         invoke_vi(637,($4|0));
         $202 = __THREW__; __THREW__ = 0;
         $203 = $202&1;
         if ($203) {
          $204 = ___cxa_find_matching_catch_2()|0;
          $205 = tempRet0;
          $$4 = $205;$$419 = $204;
          break;
         } else {
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
          STACKTOP = sp;return;
         }
        }
       } while(0);
       if ((label|0) == 32) {
        $89 = ___cxa_find_matching_catch_2()|0;
        $90 = tempRet0;
        $eh$lpad$body47$index2Z2D = $90;$eh$lpad$body47$indexZ2D = $89;
        label = 33;
       }
       if ((label|0) == 33) {
        $$3 = $eh$lpad$body47$index2Z2D;$$318 = $eh$lpad$body47$indexZ2D;
        label = 83;
       }
       if ((label|0) == 83) {
        __THREW__ = 0;
        invoke_vi(637,($4|0));
        $206 = __THREW__; __THREW__ = 0;
        $207 = $206&1;
        if ($207) {
         $223 = ___cxa_find_matching_catch_3(0|0)|0;
         $224 = tempRet0;
         ___clang_call_terminate($223);
         // unreachable;
        } else {
         $$4 = $$3;$$419 = $$318;
        }
       }
       $$5 = $$4;$$520 = $$419;
       break;
      }
     }
     $60 = ___cxa_find_matching_catch_2()|0;
     $61 = tempRet0;
     __THREW__ = 0;
     invoke_vi(637,($4|0));
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      $64 = ___cxa_find_matching_catch_3(0|0)|0;
      $65 = tempRet0;
      ___clang_call_terminate($64);
      // unreachable;
     }
     __THREW__ = 0;
     invoke_vi(637,($5|0));
     $87 = __THREW__; __THREW__ = 0;
     $88 = $87&1;
     if ($88) {
      $223 = ___cxa_find_matching_catch_3(0|0)|0;
      $224 = tempRet0;
      ___clang_call_terminate($223);
      // unreachable;
     } else {
      $$013 = $61;$$015 = $60;
      label = 31;
     }
    }
   } while(0);
   if ((label|0) == 29) {
    $85 = ___cxa_find_matching_catch_2()|0;
    $86 = tempRet0;
    $$013 = $86;$$015 = $85;
    label = 31;
   }
   if ((label|0) == 31) {
    $$5 = $$013;$$520 = $$015;
   }
   __THREW__ = 0;
   invoke_vi(637,($3|0));
   $208 = __THREW__; __THREW__ = 0;
   $209 = $208&1;
   if ($209) {
    $223 = ___cxa_find_matching_catch_3(0|0)|0;
    $224 = tempRet0;
    ___clang_call_terminate($223);
    // unreachable;
   }
   $$7 = $$5;$$722 = $$520;
   ___resumeException($$722|0);
   // unreachable;
  }
 } while(0);
 $210 = (___cxa_allocate_exception(36)|0);
 __THREW__ = 0;
 invoke_vii(635,($8|0),($11|0));
 $211 = __THREW__; __THREW__ = 0;
 $212 = $211&1;
 if ($212) {
  $217 = ___cxa_find_matching_catch_2()|0;
  $218 = tempRet0;
  $$62156 = $217;$$657 = $218;
 } else {
  $213 = HEAP32[$9>>2]|0;
  __THREW__ = 0;
  invoke_viii(730,($210|0),($8|0),($213|0));
  $214 = __THREW__; __THREW__ = 0;
  $215 = $214&1;
  if ($215) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($210|0),(1208|0),(7|0));
   $216 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $219 = ___cxa_find_matching_catch_2()|0;
  $220 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($8|0));
  $221 = __THREW__; __THREW__ = 0;
  $222 = $221&1;
  if ($222) {
   $223 = ___cxa_find_matching_catch_3(0|0)|0;
   $224 = tempRet0;
   ___clang_call_terminate($223);
   // unreachable;
  }
  if ($$0) {
   $$62156 = $219;$$657 = $220;
  } else {
   $$7 = $220;$$722 = $219;
   ___resumeException($$722|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($210|0));
 $$7 = $$657;$$722 = $$62156;
 ___resumeException($$722|0);
 // unreachable;
}
function __ZN10LineParser19HandleDefineCommentEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = ((($1)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 if ($4) {
  $5 = ((($0)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $9 = $6;
 } else {
  $7 = $3&255;
  $9 = $7;
 }
 $8 = ((($0)) + 16|0);
 HEAP32[$8>>2] = $9;
 return;
}
function __ZN10LineParser24HandleStatementSeparatorEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10LineParser11HandlePrintEv($0) {
 $0 = $0|0;
 var $$0$off0$ph$be = 0, $$0$off0$ph96 = 0, $$028 = 0.0, $$02950 = 0, $$030 = 0, $$031 = 0, $$03349 = 0, $$039 = 0, $$13452 = 0, $$153 = 0, $$5 = 0, $$538 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $storemerge = 0, $storemerge$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $1 = sp + 36|0;
 $2 = sp + 24|0;
 $3 = sp + 12|0;
 $4 = sp;
 $5 = (__ZN10LineParser29AdvanceAndCheckEndOfStatementEv($0)|0);
 L1: do {
  if ($5) {
   $6 = ((($0)) + 4|0);
   $7 = ((($0)) + 16|0);
   $8 = ((($6)) + 11|0);
   $9 = ((($4)) + 11|0);
   $10 = ((($4)) + 4|0);
   $$0$off0$ph96 = 0;
   L3: while(1) {
    while(1) {
     $11 = HEAP32[$7>>2]|0;
     $12 = HEAP8[$8>>0]|0;
     $13 = ($12<<24>>24)<(0);
     if ($13) {
      $14 = HEAP32[$6>>2]|0;
      $16 = $14;
     } else {
      $16 = $6;
     }
     $15 = (($16) + ($11)|0);
     $17 = HEAP8[$15>>0]|0;
     $18 = ($17<<24>>24)==(44);
     if ($18) {
      $$0$off0$ph$be = 0;$storemerge$in = $11;
      break;
     }
     if ($$0$off0$ph96) {
      label = 9;
      break L3;
     }
     if ($13) {
      $33 = HEAP32[$6>>2]|0;
      $35 = $33;
     } else {
      $35 = $6;
     }
     $34 = (($35) + ($11)|0);
     $36 = HEAP8[$34>>0]|0;
     $37 = ($36<<24>>24)==(34);
     if ($37) {
      label = 19;
      break;
     }
     if ($13) {
      $83 = HEAP32[$6>>2]|0;
      $85 = $83;
     } else {
      $85 = $6;
     }
     $84 = (($85) + ($11)|0);
     $86 = HEAP8[$84>>0]|0;
     $87 = ($86<<24>>24)==(126);
     if ($87) {
      $88 = (($11) + 1)|0;
      HEAP32[$7>>2] = $88;
      __THREW__ = 0;
      $89 = (invoke_iii(692,($0|0),0)|0);
      $90 = __THREW__; __THREW__ = 0;
      $91 = $90&1;
      if ($91) {
       $92 = ___cxa_find_matching_catch_3(368|0)|0;
       $93 = tempRet0;
       $94 = (_llvm_eh_typeid_for((368|0))|0);
       $95 = ($93|0)==($94|0);
       if (!($95)) {
        $$5 = $92;$$538 = $93;
        label = 76;
        break L3;
       }
       (___cxa_begin_catch(($92|0))|0);
       $96 = HEAP32[9088]|0;
       $97 = ($96|0)==(0|0);
       if ($97) {
        label = 44;
        break L3;
       }
       $99 = HEAP32[$96>>2]|0;
       $100 = ($99|0)==(0);
       if (!($100)) {
        label = 48;
        break L3;
       }
       ___cxa_end_catch();
       $$030 = 0;
      } else {
       $$030 = $89;
      }
      $106 = HEAP32[9088]|0;
      $107 = ($106|0)==(0|0);
      if ($107) {
       label = 50;
       break L3;
      }
      $108 = HEAP32[$106>>2]|0;
      $109 = ($108|0)==(1);
      if ($109) {
       $110 = HEAP32[9960]|0;
       $111 = ((($110)) + -12|0);
       $112 = HEAP32[$111>>2]|0;
       $113 = (39840 + ($112)|0);
       $114 = ((($113)) + 4|0);
       $115 = HEAP32[$114>>2]|0;
       $116 = $115 & -75;
       $117 = $116 | 8;
       HEAP32[$114>>2] = $117;
       $118 = HEAP32[9960]|0;
       $119 = ((($118)) + -12|0);
       $120 = HEAP32[$119>>2]|0;
       $121 = (39840 + ($120)|0);
       $122 = ((($121)) + 4|0);
       $123 = HEAP32[$122>>2]|0;
       $124 = $123 | 16384;
       HEAP32[$122>>2] = $124;
       $125 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(39840,28399,1)|0);
       $126 = (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi($125,$$030)|0);
       $127 = HEAP32[$126>>2]|0;
       $128 = ((($127)) + -12|0);
       $129 = HEAP32[$128>>2]|0;
       $130 = (($126) + ($129)|0);
       $131 = ((($130)) + 4|0);
       $132 = HEAP32[$131>>2]|0;
       $133 = $132 & -75;
       $134 = $133 | 2;
       HEAP32[$131>>2] = $134;
       $135 = HEAP32[$126>>2]|0;
       $136 = ((($135)) + -12|0);
       $137 = HEAP32[$136>>2]|0;
       $138 = (($126) + ($137)|0);
       $139 = ((($138)) + 4|0);
       $140 = HEAP32[$139>>2]|0;
       $141 = $140 & -16385;
       HEAP32[$139>>2] = $141;
       (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($126,28271,1)|0);
      }
     } else {
      __THREW__ = 0;
      $143 = (+invoke_dii(709,($0|0),0));
      $144 = __THREW__; __THREW__ = 0;
      $145 = $144&1;
      if ($145) {
       $146 = ___cxa_find_matching_catch_3(368|0)|0;
       $147 = tempRet0;
       $148 = (_llvm_eh_typeid_for((368|0))|0);
       $149 = ($147|0)==($148|0);
       if (!($149)) {
        $$5 = $146;$$538 = $147;
        label = 76;
        break L3;
       }
       (___cxa_begin_catch(($146|0))|0);
       $150 = HEAP32[9088]|0;
       $151 = ($150|0)==(0|0);
       if ($151) {
        label = 57;
        break L3;
       }
       $153 = HEAP32[$150>>2]|0;
       $154 = ($153|0)==(0);
       if (!($154)) {
        label = 61;
        break L3;
       }
       ___cxa_end_catch();
       $$028 = 0.0;
      } else {
       $$028 = $143;
      }
      $160 = HEAP32[9088]|0;
      $161 = ($160|0)==(0|0);
      if ($161) {
       label = 63;
       break L3;
      }
      $162 = HEAP32[$160>>2]|0;
      $163 = ($162|0)==(1);
      if ($163) {
       $164 = (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEd(39840,$$028)|0);
       (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($164,28271,1)|0);
      }
     }
     $142 = (__ZN10LineParser29AdvanceAndCheckEndOfStatementEv($0)|0);
     if (!($142)) {
      break L1;
     }
    }
    if ((label|0) == 19) {
     label = 0;
     $38 = (($11) + 1)|0;
     $39 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcj($6,34,$38)|0);
     $40 = ($39|0)==(-1);
     if ($40) {
      label = 20;
      break;
     }
     $59 = HEAP32[9088]|0;
     $60 = ($59|0)==(0|0);
     if ($60) {
      label = 31;
      break;
     }
     $61 = HEAP32[$59>>2]|0;
     $62 = ($61|0)==(1);
     if ($62) {
      $63 = HEAP32[$7>>2]|0;
      $64 = (($63) + 1)|0;
      $65 = (($39) + -1)|0;
      $66 = (($65) - ($63))|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($4,$6,$64,$66,$6);
      $67 = HEAP8[$9>>0]|0;
      $68 = ($67<<24>>24)<(0);
      $69 = HEAP32[$4>>2]|0;
      $70 = $68 ? $69 : $4;
      $71 = HEAP32[$10>>2]|0;
      $72 = $67&255;
      $73 = $68 ? $71 : $72;
      __THREW__ = 0;
      $74 = (invoke_iiii(655,(39840|0),($70|0),($73|0))|0);
      $75 = __THREW__; __THREW__ = 0;
      $76 = $75&1;
      if ($76) {
       label = 36;
       break;
      }
      __THREW__ = 0;
      (invoke_iiii(655,($74|0),(28271|0),1)|0);
      $77 = __THREW__; __THREW__ = 0;
      $78 = $77&1;
      if ($78) {
       label = 36;
       break;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
      $$0$off0$ph$be = 1;$storemerge$in = $39;
     } else {
      $$0$off0$ph$be = 1;$storemerge$in = $39;
     }
    }
    $storemerge = (($storemerge$in) + 1)|0;
    HEAP32[$7>>2] = $storemerge;
    $19 = (__ZN10LineParser29AdvanceAndCheckEndOfStatementEv($0)|0);
    if ($19) {
     $$0$off0$ph96 = $$0$off0$ph$be;
    } else {
     break L1;
    }
   }
   switch (label|0) {
    case 9: {
     $20 = (___cxa_allocate_exception(36)|0);
     __THREW__ = 0;
     invoke_vii(635,($2|0),($6|0));
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     if ($22) {
      $27 = ___cxa_find_matching_catch_2()|0;
      $28 = tempRet0;
      $$02950 = $27;$$03349 = $28;
     } else {
      $23 = HEAP32[$7>>2]|0;
      __THREW__ = 0;
      invoke_viii(731,($20|0),($2|0),($23|0));
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       $$039 = 1;
      } else {
       __THREW__ = 0;
       invoke_viii(644,($20|0),(1192|0),(7|0));
       $26 = __THREW__; __THREW__ = 0;
       $$039 = 0;
      }
      $29 = ___cxa_find_matching_catch_2()|0;
      $30 = tempRet0;
      __THREW__ = 0;
      invoke_vi(637,($2|0));
      $31 = __THREW__; __THREW__ = 0;
      $32 = $31&1;
      if ($32) {
       $189 = ___cxa_find_matching_catch_3(0|0)|0;
       $190 = tempRet0;
       ___clang_call_terminate($189);
       // unreachable;
      }
      if ($$039) {
       $$02950 = $29;$$03349 = $30;
      } else {
       $$5 = $29;$$538 = $30;
       ___resumeException($$5|0);
       // unreachable;
      }
     }
     ___cxa_free_exception(($20|0));
     $$5 = $$02950;$$538 = $$03349;
     ___resumeException($$5|0);
     // unreachable;
     break;
    }
    case 20: {
     $41 = (___cxa_allocate_exception(36)|0);
     __THREW__ = 0;
     invoke_vii(635,($3|0),($6|0));
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      $53 = ___cxa_find_matching_catch_2()|0;
      $54 = tempRet0;
      $$13452 = $54;$$153 = $53;
     } else {
      $44 = HEAP8[$8>>0]|0;
      $45 = ($44<<24>>24)<(0);
      if ($45) {
       $46 = ((($0)) + 8|0);
       $47 = HEAP32[$46>>2]|0;
       $49 = $47;
      } else {
       $48 = $44&255;
       $49 = $48;
      }
      __THREW__ = 0;
      invoke_viii(732,($41|0),($3|0),($49|0));
      $50 = __THREW__; __THREW__ = 0;
      $51 = $50&1;
      if ($51) {
       $$031 = 1;
      } else {
       __THREW__ = 0;
       invoke_viii(644,($41|0),(1128|0),(7|0));
       $52 = __THREW__; __THREW__ = 0;
       $$031 = 0;
      }
      $55 = ___cxa_find_matching_catch_2()|0;
      $56 = tempRet0;
      __THREW__ = 0;
      invoke_vi(637,($3|0));
      $57 = __THREW__; __THREW__ = 0;
      $58 = $57&1;
      if ($58) {
       $189 = ___cxa_find_matching_catch_3(0|0)|0;
       $190 = tempRet0;
       ___clang_call_terminate($189);
       // unreachable;
      }
      if ($$031) {
       $$13452 = $56;$$153 = $55;
      } else {
       $$5 = $55;$$538 = $56;
       ___resumeException($$5|0);
       // unreachable;
      }
     }
     ___cxa_free_exception(($41|0));
     $$5 = $$153;$$538 = $$13452;
     ___resumeException($$5|0);
     // unreachable;
     break;
    }
    case 31: {
     ___assert_fail((27040|0),(27060|0),38,(27075|0));
     // unreachable;
     break;
    }
    case 36: {
     $79 = ___cxa_find_matching_catch_2()|0;
     $80 = tempRet0;
     __THREW__ = 0;
     invoke_vi(637,($4|0));
     $81 = __THREW__; __THREW__ = 0;
     $82 = $81&1;
     if ($82) {
      $189 = ___cxa_find_matching_catch_3(0|0)|0;
      $190 = tempRet0;
      ___clang_call_terminate($189);
      // unreachable;
     }
     $$5 = $79;$$538 = $80;
     ___resumeException($$5|0);
     // unreachable;
     break;
    }
    case 44: {
     __THREW__ = 0;
     invoke_viiii(680,(27040|0),(27060|0),38,(27075|0));
     $98 = __THREW__; __THREW__ = 0;
     label = 47;
     break;
    }
    case 48: {
     __THREW__ = 0;
     invoke_v(642);
     $105 = __THREW__; __THREW__ = 0;
     label = 47;
     break;
    }
    case 50: {
     ___assert_fail((27040|0),(27060|0),38,(27075|0));
     // unreachable;
     break;
    }
    case 57: {
     __THREW__ = 0;
     invoke_viiii(680,(27040|0),(27060|0),38,(27075|0));
     $152 = __THREW__; __THREW__ = 0;
     label = 60;
     break;
    }
    case 61: {
     __THREW__ = 0;
     invoke_v(642);
     $159 = __THREW__; __THREW__ = 0;
     label = 60;
     break;
    }
    case 63: {
     ___assert_fail((27040|0),(27060|0),38,(27075|0));
     // unreachable;
     break;
    }
    case 76: {
     ___resumeException($$5|0);
     // unreachable;
     break;
    }
   }
   if ((label|0) == 47) {
    $101 = ___cxa_find_matching_catch_2()|0;
    $102 = tempRet0;
    __THREW__ = 0;
    invoke_v(643);
    $103 = __THREW__; __THREW__ = 0;
    $104 = $103&1;
    if ($104) {
     $189 = ___cxa_find_matching_catch_3(0|0)|0;
     $190 = tempRet0;
     ___clang_call_terminate($189);
     // unreachable;
    } else {
     $$5 = $101;$$538 = $102;
     ___resumeException($$5|0);
     // unreachable;
    }
   }
   else if ((label|0) == 60) {
    $155 = ___cxa_find_matching_catch_2()|0;
    $156 = tempRet0;
    __THREW__ = 0;
    invoke_v(643);
    $157 = __THREW__; __THREW__ = 0;
    $158 = $157&1;
    if ($158) {
     $189 = ___cxa_find_matching_catch_3(0|0)|0;
     $190 = tempRet0;
     ___clang_call_terminate($189);
     // unreachable;
    } else {
     $$5 = $155;$$538 = $156;
     ___resumeException($$5|0);
     // unreachable;
    }
   }
  }
 } while(0);
 $165 = HEAP32[9088]|0;
 $166 = ($165|0)==(0|0);
 if ($166) {
  ___assert_fail((27040|0),(27060|0),38,(27075|0));
  // unreachable;
 }
 $167 = HEAP32[$165>>2]|0;
 $168 = ($167|0)==(1);
 if (!($168)) {
  STACKTOP = sp;return;
 }
 $169 = HEAP32[9960]|0;
 $170 = ((($169)) + -12|0);
 $171 = HEAP32[$170>>2]|0;
 $172 = (39840 + ($171)|0);
 $173 = (__ZNKSt3__28ios_base6getlocEv($172)|0);
 HEAP32[$1>>2] = $173;
 __THREW__ = 0;
 $174 = (invoke_iii(659,($1|0),(40712|0))|0);
 $175 = __THREW__; __THREW__ = 0;
 $176 = $175&1;
 if (!($176)) {
  $177 = HEAP32[$174>>2]|0;
  $178 = ((($177)) + 28|0);
  $179 = HEAP32[$178>>2]|0;
  __THREW__ = 0;
  $180 = (invoke_iii($179|0,($174|0),10)|0);
  $181 = __THREW__; __THREW__ = 0;
  $182 = $181&1;
  if (!($182)) {
   __ZNSt3__26localeD2Ev($1);
   (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc(39840,$180)|0);
   (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv(39840)|0);
   STACKTOP = sp;return;
  }
 }
 $183 = ___cxa_find_matching_catch_2()|0;
 $184 = tempRet0;
 __THREW__ = 0;
 invoke_vi(660,($1|0));
 $185 = __THREW__; __THREW__ = 0;
 $186 = $185&1;
 if ($186) {
  $187 = ___cxa_find_matching_catch_3(0|0)|0;
  $188 = tempRet0;
  ___clang_call_terminate($187);
  // unreachable;
 } else {
  ___resumeException($183|0);
  // unreachable;
 }
}
function __ZN10LineParser9HandleCpuEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$010 = 0, $$01218 = 0, $$01417 = 0, $$11321 = 0, $$11520 = 0, $$2 = 0, $$216 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 12|0;
 $2 = sp;
 $3 = (__ZN10LineParser23EvaluateExpressionAsIntEb($0,0)|0);
 $4 = ($3>>>0)>(1);
 if ($4) {
  $5 = (___cxa_allocate_exception(36)|0);
  $6 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vii(635,($1|0),($6|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   $14 = ___cxa_find_matching_catch_2()|0;
   $15 = tempRet0;
   $$01218 = $15;$$01417 = $14;
  } else {
   $9 = ((($0)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   __THREW__ = 0;
   invoke_viii(733,($5|0),($1|0),($10|0));
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if ($12) {
    $$010 = 1;
   } else {
    __THREW__ = 0;
    invoke_viii(644,($5|0),(1112|0),(7|0));
    $13 = __THREW__; __THREW__ = 0;
    $$010 = 0;
   }
   $16 = ___cxa_find_matching_catch_2()|0;
   $17 = tempRet0;
   __THREW__ = 0;
   invoke_vi(637,($1|0));
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   if ($19) {
    $52 = ___cxa_find_matching_catch_3(0|0)|0;
    $53 = tempRet0;
    ___clang_call_terminate($52);
    // unreachable;
   }
   if ($$010) {
    $$01218 = $17;$$01417 = $16;
   } else {
    $$2 = $17;$$216 = $16;
    ___resumeException($$216|0);
    // unreachable;
   }
  }
  ___cxa_free_exception(($5|0));
  $$2 = $$01218;$$216 = $$01417;
  ___resumeException($$216|0);
  // unreachable;
 }
 $20 = HEAP32[9090]|0;
 $21 = ($20|0)==(0|0);
 if ($21) {
  ___assert_fail((27040|0),(27084|0),36,(27075|0));
  // unreachable;
 }
 $22 = ((($20)) + 131076|0);
 HEAP32[$22>>2] = $3;
 $23 = ((($0)) + 16|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($0)) + 4|0);
 $26 = ((($25)) + 11|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = ($27<<24>>24)<(0);
 if ($28) {
  $29 = ((($0)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $33 = $30;
 } else {
  $31 = $27&255;
  $33 = $31;
 }
 $32 = ($24>>>0)<($33>>>0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 if ($28) {
  $34 = HEAP32[$25>>2]|0;
  $36 = $34;
 } else {
  $36 = $25;
 }
 $35 = (($36) + ($24)|0);
 $37 = HEAP8[$35>>0]|0;
 $38 = ($37<<24>>24)==(44);
 if (!($38)) {
  STACKTOP = sp;return;
 }
 $39 = (___cxa_allocate_exception(36)|0);
 __THREW__ = 0;
 invoke_vii(635,($2|0),($25|0));
 $40 = __THREW__; __THREW__ = 0;
 $41 = $40&1;
 if ($41) {
  $46 = ___cxa_find_matching_catch_2()|0;
  $47 = tempRet0;
  $$11321 = $47;$$11520 = $46;
 } else {
  $42 = HEAP32[$23>>2]|0;
  __THREW__ = 0;
  invoke_viii(734,($39|0),($2|0),($42|0));
  $43 = __THREW__; __THREW__ = 0;
  $44 = $43&1;
  if ($44) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($39|0),(568|0),(7|0));
   $45 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $48 = ___cxa_find_matching_catch_2()|0;
  $49 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($2|0));
  $50 = __THREW__; __THREW__ = 0;
  $51 = $50&1;
  if ($51) {
   $52 = ___cxa_find_matching_catch_3(0|0)|0;
   $53 = tempRet0;
   ___clang_call_terminate($52);
   // unreachable;
  }
  if ($$0) {
   $$11321 = $49;$$11520 = $48;
  } else {
   $$2 = $49;$$216 = $48;
   ___resumeException($$216|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($39|0));
 $$2 = $$11321;$$216 = $$11520;
 ___resumeException($$216|0);
 // unreachable;
}
function __ZN10LineParser9HandleOrgEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$011 = 0, $$01319 = 0, $$01518 = 0, $$11422 = 0, $$11621 = 0, $$2 = 0, $$217 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $1 = sp + 24|0;
 $2 = sp + 12|0;
 $3 = sp;
 $4 = (__ZN10LineParser23EvaluateExpressionAsIntEb($0,0)|0);
 $5 = ($4>>>0)>(65535);
 if ($5) {
  $6 = (___cxa_allocate_exception(36)|0);
  $7 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vii(635,($1|0),($7|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if ($9) {
   $15 = ___cxa_find_matching_catch_2()|0;
   $16 = tempRet0;
   $$01319 = $16;$$01518 = $15;
  } else {
   $10 = ((($0)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   __THREW__ = 0;
   invoke_viii(733,($6|0),($1|0),($11|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    $$011 = 1;
   } else {
    __THREW__ = 0;
    invoke_viii(644,($6|0),(1112|0),(7|0));
    $14 = __THREW__; __THREW__ = 0;
    $$011 = 0;
   }
   $17 = ___cxa_find_matching_catch_2()|0;
   $18 = tempRet0;
   __THREW__ = 0;
   invoke_vi(637,($1|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    $62 = ___cxa_find_matching_catch_3(0|0)|0;
    $63 = tempRet0;
    ___clang_call_terminate($62);
    // unreachable;
   }
   if ($$011) {
    $$01319 = $18;$$01518 = $17;
   } else {
    $$2 = $18;$$217 = $17;
    ___resumeException($$217|0);
    // unreachable;
   }
  }
  ___cxa_free_exception(($6|0));
  $$2 = $$01319;$$217 = $$01518;
  ___resumeException($$217|0);
  // unreachable;
 }
 $21 = HEAP32[9090]|0;
 $22 = ($21|0)==(0|0);
 if ($22) {
  ___assert_fail((27040|0),(27084|0),36,(27075|0));
  // unreachable;
 }
 $23 = ((($21)) + 131072|0);
 HEAP32[$23>>2] = $4;
 $24 = HEAP32[9091]|0;
 $25 = ($24|0)==(0|0);
 if ($25) {
  ___assert_fail((27040|0),(27806|0),38,(27075|0));
  // unreachable;
 }
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($2,28396,2);
 $26 = (+($4|0));
 __THREW__ = 0;
 invoke_viid(722,($24|0),($2|0),(+$26));
 $27 = __THREW__; __THREW__ = 0;
 $28 = $27&1;
 if ($28) {
  $52 = ___cxa_find_matching_catch_2()|0;
  $53 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($2|0));
  $54 = __THREW__; __THREW__ = 0;
  $55 = $54&1;
  if ($55) {
   $62 = ___cxa_find_matching_catch_3(0|0)|0;
   $63 = tempRet0;
   ___clang_call_terminate($62);
   // unreachable;
  }
  $$2 = $53;$$217 = $52;
  ___resumeException($$217|0);
  // unreachable;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
 $29 = ((($0)) + 16|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($0)) + 4|0);
 $32 = ((($31)) + 11|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = ($33<<24>>24)<(0);
 if ($34) {
  $35 = ((($0)) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $39 = $36;
 } else {
  $37 = $33&255;
  $39 = $37;
 }
 $38 = ($30>>>0)<($39>>>0);
 if (!($38)) {
  STACKTOP = sp;return;
 }
 if ($34) {
  $40 = HEAP32[$31>>2]|0;
  $42 = $40;
 } else {
  $42 = $31;
 }
 $41 = (($42) + ($30)|0);
 $43 = HEAP8[$41>>0]|0;
 $44 = ($43<<24>>24)==(44);
 if (!($44)) {
  STACKTOP = sp;return;
 }
 $45 = (___cxa_allocate_exception(36)|0);
 __THREW__ = 0;
 invoke_vii(635,($3|0),($31|0));
 $46 = __THREW__; __THREW__ = 0;
 $47 = $46&1;
 if ($47) {
  $56 = ___cxa_find_matching_catch_2()|0;
  $57 = tempRet0;
  $$11422 = $57;$$11621 = $56;
 } else {
  $48 = HEAP32[$29>>2]|0;
  __THREW__ = 0;
  invoke_viii(734,($45|0),($3|0),($48|0));
  $49 = __THREW__; __THREW__ = 0;
  $50 = $49&1;
  if ($50) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($45|0),(568|0),(7|0));
   $51 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $58 = ___cxa_find_matching_catch_2()|0;
  $59 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($3|0));
  $60 = __THREW__; __THREW__ = 0;
  $61 = $60&1;
  if ($61) {
   $62 = ___cxa_find_matching_catch_3(0|0)|0;
   $63 = tempRet0;
   ___clang_call_terminate($62);
   // unreachable;
  }
  if ($$0) {
   $$11422 = $59;$$11621 = $58;
  } else {
   $$2 = $59;$$217 = $58;
   ___resumeException($$217|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($45|0));
 $$2 = $$11422;$$217 = $$11621;
 ___resumeException($$217|0);
 // unreachable;
}
function __ZN10LineParser13HandleIncludeEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i = 0, $$012 = 0, $$01449 = 0, $$016 = 0, $$018 = 0, $$020 = 0, $$020$lpad$bodyZZ2D = 0, $$02248 = 0, $$03$i = 0, $$11552 = 0, $$12351 = 0, $$22454 = 0, $$255 = 0, $$32557 = 0, $$358 = 0, $$4 = 0, $$426 = 0, $$5 = 0, $$527 = 0;
 var $$6 = 0, $$628 = 0, $$72960 = 0, $$761 = 0, $$9 = 0, $$931 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $eh$lpad$body47$index7Z2D = 0, $eh$lpad$body47$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24928|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(24928|0);
 $1 = sp + 24912|0;
 $2 = sp + 24900|0;
 $3 = sp + 24888|0;
 $4 = sp + 24876|0;
 $5 = sp + 24864|0;
 $6 = sp + 24852|0;
 $7 = sp + 24840|0;
 $8 = sp;
 $9 = sp + 24828|0;
 $10 = sp + 24816|0;
 $11 = HEAP32[$0>>2]|0;
 $12 = ((($11)) + 18440|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)>(0);
 if ($14) {
  $15 = (___cxa_allocate_exception(36)|0);
  $16 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vii(635,($3|0),($16|0));
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  if ($18) {
   $46 = ___cxa_find_matching_catch_2()|0;
   $47 = tempRet0;
   $$01449 = $46;$$02248 = $47;
  } else {
   $19 = ((($0)) + 16|0);
   $20 = HEAP32[$19>>2]|0;
   __THREW__ = 0;
   invoke_vii(635,($2|0),($3|0));
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   L6: do {
    if ($22) {
     $$020 = 1;
     label = 14;
    } else {
     HEAP32[$15>>2] = (4652);
     $23 = ((($15)) + 4|0);
     __THREW__ = 0;
     invoke_vii(635,($23|0),($2|0));
     $24 = __THREW__; __THREW__ = 0;
     $25 = $24&1;
     do {
      if ($25) {
       $30 = ___cxa_find_matching_catch_2()|0;
       $31 = tempRet0;
       $$0$i = $31;$$03$i = $30;
      } else {
       $26 = ((($15)) + 16|0);
       HEAP32[$26>>2] = $20;
       $27 = ((($15)) + 20|0);
       ;HEAP32[$27>>2]=0|0;HEAP32[$27+4>>2]=0|0;HEAP32[$27+8>>2]=0|0;
       __THREW__ = 0;
       invoke_viii(646,($27|0),(44984|0),0);
       $28 = __THREW__; __THREW__ = 0;
       $29 = $28&1;
       if ($29) {
        $32 = ___cxa_find_matching_catch_2()|0;
        $33 = tempRet0;
        __THREW__ = 0;
        invoke_vi(637,($23|0));
        $34 = __THREW__; __THREW__ = 0;
        $35 = $34&1;
        if (!($35)) {
         $$0$i = $33;$$03$i = $32;
         break;
        }
        $36 = ___cxa_find_matching_catch_3(0|0)|0;
        $37 = tempRet0;
        ___clang_call_terminate($36);
        // unreachable;
       } else {
        $38 = ((($15)) + 32|0);
        HEAP32[$38>>2] = 0;
        __THREW__ = 0;
        invoke_vi(637,($2|0));
        $39 = __THREW__; __THREW__ = 0;
        $40 = $39&1;
        if ($40) {
         $$020 = 1;
         label = 14;
         break L6;
        }
        HEAP32[$15>>2] = (9492);
        __THREW__ = 0;
        invoke_viii(644,($15|0),(1336|0),(7|0));
        $45 = __THREW__; __THREW__ = 0;
        $$020 = 0;
        label = 14;
        break L6;
       }
      }
     } while(0);
     __THREW__ = 0;
     invoke_vi(637,($2|0));
     $41 = __THREW__; __THREW__ = 0;
     $42 = $41&1;
     if ($42) {
      $43 = ___cxa_find_matching_catch_3(0|0)|0;
      $44 = tempRet0;
      ___clang_call_terminate($43);
      // unreachable;
     } else {
      $$020$lpad$bodyZZ2D = 1;$eh$lpad$body$index2Z2D = $$0$i;$eh$lpad$body$indexZ2D = $$03$i;
     }
    }
   } while(0);
   if ((label|0) == 14) {
    $48 = ___cxa_find_matching_catch_2()|0;
    $49 = tempRet0;
    $$020$lpad$bodyZZ2D = $$020;$eh$lpad$body$index2Z2D = $49;$eh$lpad$body$indexZ2D = $48;
   }
   __THREW__ = 0;
   invoke_vi(637,($3|0));
   $50 = __THREW__; __THREW__ = 0;
   $51 = $50&1;
   if ($51) {
    $220 = ___cxa_find_matching_catch_3(0|0)|0;
    $221 = tempRet0;
    ___clang_call_terminate($220);
    // unreachable;
   }
   if ($$020$lpad$bodyZZ2D) {
    $$01449 = $eh$lpad$body$indexZ2D;$$02248 = $eh$lpad$body$index2Z2D;
   } else {
    $$9 = $eh$lpad$body$indexZ2D;$$931 = $eh$lpad$body$index2Z2D;
    ___resumeException($$9|0);
    // unreachable;
   }
  }
  ___cxa_free_exception(($15|0));
  $$9 = $$01449;$$931 = $$02248;
  ___resumeException($$9|0);
  // unreachable;
 }
 $52 = (__ZN10LineParser29AdvanceAndCheckEndOfStatementEv($0)|0);
 if (!($52)) {
  $53 = (___cxa_allocate_exception(36)|0);
  $54 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vii(635,($4|0),($54|0));
  $55 = __THREW__; __THREW__ = 0;
  $56 = $55&1;
  if ($56) {
   $62 = ___cxa_find_matching_catch_2()|0;
   $63 = tempRet0;
   $$11552 = $62;$$12351 = $63;
  } else {
   $57 = ((($0)) + 16|0);
   $58 = HEAP32[$57>>2]|0;
   __THREW__ = 0;
   invoke_viii(735,($53|0),($4|0),($58|0));
   $59 = __THREW__; __THREW__ = 0;
   $60 = $59&1;
   if ($60) {
    $$018 = 1;
   } else {
    __THREW__ = 0;
    invoke_viii(644,($53|0),(432|0),(7|0));
    $61 = __THREW__; __THREW__ = 0;
    $$018 = 0;
   }
   $64 = ___cxa_find_matching_catch_2()|0;
   $65 = tempRet0;
   __THREW__ = 0;
   invoke_vi(637,($4|0));
   $66 = __THREW__; __THREW__ = 0;
   $67 = $66&1;
   if ($67) {
    $220 = ___cxa_find_matching_catch_3(0|0)|0;
    $221 = tempRet0;
    ___clang_call_terminate($220);
    // unreachable;
   }
   if ($$018) {
    $$11552 = $64;$$12351 = $65;
   } else {
    $$9 = $64;$$931 = $65;
    ___resumeException($$9|0);
    // unreachable;
   }
  }
  ___cxa_free_exception(($53|0));
  $$9 = $$11552;$$931 = $$12351;
  ___resumeException($$9|0);
  // unreachable;
 }
 $68 = ((($0)) + 16|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ((($0)) + 4|0);
 $71 = ((($70)) + 11|0);
 $72 = HEAP8[$71>>0]|0;
 $73 = ($72<<24>>24)<(0);
 if ($73) {
  $74 = ((($0)) + 8|0);
  $75 = HEAP32[$74>>2]|0;
  $78 = $75;
 } else {
  $76 = $72&255;
  $78 = $76;
 }
 $77 = ($69>>>0)<($78>>>0);
 if ($77) {
  if ($73) {
   $79 = HEAP32[$70>>2]|0;
   $81 = $79;
  } else {
   $81 = $70;
  }
  $80 = (($81) + ($69)|0);
  $82 = HEAP8[$80>>0]|0;
  $83 = ($82<<24>>24)==(34);
  if ($83) {
   $97 = (($69) + 1)|0;
   $98 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcj($70,34,$97)|0);
   $99 = ($98|0)==(-1);
   if ($99) {
    $100 = (___cxa_allocate_exception(36)|0);
    __THREW__ = 0;
    invoke_vii(635,($6|0),($70|0));
    $101 = __THREW__; __THREW__ = 0;
    $102 = $101&1;
    if ($102) {
     $112 = ___cxa_find_matching_catch_2()|0;
     $113 = tempRet0;
     $$32557 = $113;$$358 = $112;
    } else {
     $103 = HEAP8[$71>>0]|0;
     $104 = ($103<<24>>24)<(0);
     if ($104) {
      $105 = ((($0)) + 8|0);
      $106 = HEAP32[$105>>2]|0;
      $108 = $106;
     } else {
      $107 = $103&255;
      $108 = $107;
     }
     __THREW__ = 0;
     invoke_viii(732,($100|0),($6|0),($108|0));
     $109 = __THREW__; __THREW__ = 0;
     $110 = $109&1;
     if ($110) {
      $$012 = 1;
     } else {
      __THREW__ = 0;
      invoke_viii(644,($100|0),(1128|0),(7|0));
      $111 = __THREW__; __THREW__ = 0;
      $$012 = 0;
     }
     $114 = ___cxa_find_matching_catch_2()|0;
     $115 = tempRet0;
     __THREW__ = 0;
     invoke_vi(637,($6|0));
     $116 = __THREW__; __THREW__ = 0;
     $117 = $116&1;
     if ($117) {
      $220 = ___cxa_find_matching_catch_3(0|0)|0;
      $221 = tempRet0;
      ___clang_call_terminate($220);
      // unreachable;
     }
     if ($$012) {
      $$32557 = $115;$$358 = $114;
     } else {
      $$9 = $114;$$931 = $115;
      ___resumeException($$9|0);
      // unreachable;
     }
    }
    ___cxa_free_exception(($100|0));
    $$9 = $$358;$$931 = $$32557;
    ___resumeException($$9|0);
    // unreachable;
   }
   $118 = HEAP32[$68>>2]|0;
   $119 = (($118) + 1)|0;
   $120 = (($98) + -1)|0;
   $121 = (($120) - ($118))|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($7,$70,$119,$121,$70);
   $122 = HEAP32[9088]|0;
   $123 = ($122|0)==(0|0);
   L73: do {
    if ($123) {
     __THREW__ = 0;
     invoke_viiii(680,(27040|0),(27060|0),38,(27075|0));
     $124 = __THREW__; __THREW__ = 0;
     label = 67;
    } else {
     $125 = HEAP32[$122>>2]|0;
     $126 = ($125|0)==(1);
     do {
      if ($126) {
       $127 = ((($122)) + 8|0);
       $128 = HEAP8[$127>>0]|0;
       $129 = ($128<<24>>24)==(0);
       if (!($129)) {
        __THREW__ = 0;
        $130 = (invoke_iiii(655,(40008|0),(28277|0),15)|0);
        $131 = __THREW__; __THREW__ = 0;
        $132 = $131&1;
        if ($132) {
         label = 67;
         break L73;
        }
        $133 = ((($7)) + 11|0);
        $134 = HEAP8[$133>>0]|0;
        $135 = ($134<<24>>24)<(0);
        $136 = HEAP32[$7>>2]|0;
        $137 = $135 ? $136 : $7;
        $138 = ((($7)) + 4|0);
        $139 = HEAP32[$138>>2]|0;
        $140 = $134&255;
        $141 = $135 ? $139 : $140;
        __THREW__ = 0;
        $142 = (invoke_iiii(655,($130|0),($137|0),($141|0))|0);
        $143 = __THREW__; __THREW__ = 0;
        $144 = $143&1;
        if ($144) {
         label = 67;
         break L73;
        }
        $145 = HEAP32[$142>>2]|0;
        $146 = ((($145)) + -12|0);
        $147 = HEAP32[$146>>2]|0;
        $148 = (($142) + ($147)|0);
        __THREW__ = 0;
        $149 = (invoke_ii(658,($148|0))|0);
        $150 = __THREW__; __THREW__ = 0;
        $151 = $150&1;
        if ($151) {
         label = 67;
         break L73;
        }
        HEAP32[$1>>2] = $149;
        __THREW__ = 0;
        $152 = (invoke_iii(659,($1|0),(40712|0))|0);
        $153 = __THREW__; __THREW__ = 0;
        $154 = $153&1;
        if (!($154)) {
         $155 = HEAP32[$152>>2]|0;
         $156 = ((($155)) + 28|0);
         $157 = HEAP32[$156>>2]|0;
         __THREW__ = 0;
         $158 = (invoke_iii($157|0,($152|0),10)|0);
         $159 = __THREW__; __THREW__ = 0;
         $160 = $159&1;
         if (!($160)) {
          __THREW__ = 0;
          invoke_vi(660,($1|0));
          $161 = __THREW__; __THREW__ = 0;
          $162 = $161&1;
          if ($162) {
           label = 67;
           break L73;
          }
          __THREW__ = 0;
          (invoke_iii(687,($142|0),($158|0))|0);
          $169 = __THREW__; __THREW__ = 0;
          $170 = $169&1;
          if ($170) {
           label = 67;
           break L73;
          }
          __THREW__ = 0;
          (invoke_ii(688,($142|0))|0);
          $171 = __THREW__; __THREW__ = 0;
          $172 = $171&1;
          if ($172) {
           label = 67;
           break L73;
          } else {
           break;
          }
         }
        }
        $163 = ___cxa_find_matching_catch_2()|0;
        $164 = tempRet0;
        __THREW__ = 0;
        invoke_vi(660,($1|0));
        $165 = __THREW__; __THREW__ = 0;
        $166 = $165&1;
        if ($166) {
         $167 = ___cxa_find_matching_catch_3(0|0)|0;
         $168 = tempRet0;
         ___clang_call_terminate($167);
         // unreachable;
        } else {
         $eh$lpad$body47$index7Z2D = $164;$eh$lpad$body47$indexZ2D = $163;
         label = 68;
         break L73;
        }
       }
      }
     } while(0);
     $175 = ((($7)) + 11|0);
     $176 = HEAP8[$175>>0]|0;
     $177 = ($176<<24>>24)<(0);
     $178 = HEAP32[$7>>2]|0;
     $179 = $177 ? $178 : $7;
     ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
     $180 = (_strlen($179)|0);
     __THREW__ = 0;
     invoke_viii(646,($9|0),($179|0),($180|0));
     $181 = __THREW__; __THREW__ = 0;
     $182 = $181&1;
     do {
      if ($182) {
       label = 75;
      } else {
       __THREW__ = 0;
       invoke_vii(720,($8|0),($9|0));
       $183 = __THREW__; __THREW__ = 0;
       $184 = $183&1;
       if ($184) {
        $195 = ___cxa_find_matching_catch_2()|0;
        $196 = tempRet0;
        __THREW__ = 0;
        invoke_vi(637,($9|0));
        $197 = __THREW__; __THREW__ = 0;
        $198 = $197&1;
        if (!($198)) {
         $$4 = $195;$$426 = $196;
         break;
        }
        $220 = ___cxa_find_matching_catch_3(0|0)|0;
        $221 = tempRet0;
        ___clang_call_terminate($220);
        // unreachable;
       }
       __THREW__ = 0;
       invoke_vi(637,($9|0));
       $185 = __THREW__; __THREW__ = 0;
       $186 = $185&1;
       if ($186) {
        label = 75;
       } else {
        __THREW__ = 0;
        invoke_vi(194,($8|0));
        $187 = __THREW__; __THREW__ = 0;
        $188 = $187&1;
        do {
         if ($188) {
          $199 = ___cxa_find_matching_catch_2()|0;
          $200 = tempRet0;
          __THREW__ = 0;
          invoke_vi(199,($8|0));
          $201 = __THREW__; __THREW__ = 0;
          $202 = $201&1;
          if ($202) {
           $220 = ___cxa_find_matching_catch_3(0|0)|0;
           $221 = tempRet0;
           ___clang_call_terminate($220);
           // unreachable;
          } else {
           $$5 = $199;$$527 = $200;
          }
         } else {
          __THREW__ = 0;
          invoke_vi(199,($8|0));
          $189 = __THREW__; __THREW__ = 0;
          $190 = $189&1;
          if ($190) {
           $203 = ___cxa_find_matching_catch_2()|0;
           $204 = tempRet0;
           $$5 = $203;$$527 = $204;
           break;
          }
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
          $191 = (($98) + 1)|0;
          HEAP32[$68>>2] = $191;
          $192 = (__ZN10LineParser29AdvanceAndCheckEndOfStatementEv($0)|0);
          if (!($192)) {
           STACKTOP = sp;return;
          }
          $207 = (___cxa_allocate_exception(36)|0);
          __THREW__ = 0;
          invoke_vii(635,($10|0),($70|0));
          $208 = __THREW__; __THREW__ = 0;
          $209 = $208&1;
          do {
           if ($209) {
            $214 = ___cxa_find_matching_catch_2()|0;
            $215 = tempRet0;
            $$72960 = $215;$$761 = $214;
           } else {
            $210 = HEAP32[$68>>2]|0;
            __THREW__ = 0;
            invoke_viii(676,($207|0),($10|0),($210|0));
            $211 = __THREW__; __THREW__ = 0;
            $212 = $211&1;
            if ($212) {
             $$0 = 1;
            } else {
             __THREW__ = 0;
             invoke_viii(644,($207|0),(352|0),(7|0));
             $213 = __THREW__; __THREW__ = 0;
             $$0 = 0;
            }
            $216 = ___cxa_find_matching_catch_2()|0;
            $217 = tempRet0;
            __THREW__ = 0;
            invoke_vi(637,($10|0));
            $218 = __THREW__; __THREW__ = 0;
            $219 = $218&1;
            if ($219) {
             $220 = ___cxa_find_matching_catch_3(0|0)|0;
             $221 = tempRet0;
             ___clang_call_terminate($220);
             // unreachable;
            }
            if ($$0) {
             $$72960 = $217;$$761 = $216;
             break;
            } else {
             $$9 = $216;$$931 = $217;
            }
            ___resumeException($$9|0);
            // unreachable;
           }
          } while(0);
          ___cxa_free_exception(($207|0));
          $$9 = $$761;$$931 = $$72960;
          ___resumeException($$9|0);
          // unreachable;
         }
        } while(0);
        $$6 = $$5;$$628 = $$527;
        break L73;
       }
      }
     } while(0);
     if ((label|0) == 75) {
      $193 = ___cxa_find_matching_catch_2()|0;
      $194 = tempRet0;
      $$4 = $193;$$426 = $194;
     }
     $$6 = $$4;$$628 = $$426;
    }
   } while(0);
   if ((label|0) == 67) {
    $173 = ___cxa_find_matching_catch_2()|0;
    $174 = tempRet0;
    $eh$lpad$body47$index7Z2D = $174;$eh$lpad$body47$indexZ2D = $173;
    label = 68;
   }
   if ((label|0) == 68) {
    $$6 = $eh$lpad$body47$indexZ2D;$$628 = $eh$lpad$body47$index7Z2D;
   }
   __THREW__ = 0;
   invoke_vi(637,($7|0));
   $205 = __THREW__; __THREW__ = 0;
   $206 = $205&1;
   if ($206) {
    $220 = ___cxa_find_matching_catch_3(0|0)|0;
    $221 = tempRet0;
    ___clang_call_terminate($220);
    // unreachable;
   }
   $$9 = $$6;$$931 = $$628;
   ___resumeException($$9|0);
   // unreachable;
  }
 }
 $84 = (___cxa_allocate_exception(36)|0);
 __THREW__ = 0;
 invoke_vii(635,($5|0),($70|0));
 $85 = __THREW__; __THREW__ = 0;
 $86 = $85&1;
 if ($86) {
  $91 = ___cxa_find_matching_catch_2()|0;
  $92 = tempRet0;
  $$22454 = $92;$$255 = $91;
 } else {
  $87 = HEAP32[$68>>2]|0;
  __THREW__ = 0;
  invoke_viii(735,($84|0),($5|0),($87|0));
  $88 = __THREW__; __THREW__ = 0;
  $89 = $88&1;
  if ($89) {
   $$016 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($84|0),(432|0),(7|0));
   $90 = __THREW__; __THREW__ = 0;
   $$016 = 0;
  }
  $93 = ___cxa_find_matching_catch_2()|0;
  $94 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($5|0));
  $95 = __THREW__; __THREW__ = 0;
  $96 = $95&1;
  if ($96) {
   $220 = ___cxa_find_matching_catch_3(0|0)|0;
   $221 = tempRet0;
   ___clang_call_terminate($220);
   // unreachable;
  }
  if ($$016) {
   $$22454 = $94;$$255 = $93;
  } else {
   $$9 = $93;$$931 = $94;
   ___resumeException($$9|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($84|0));
 $$9 = $$255;$$931 = $$22454;
 ___resumeException($$9|0);
 // unreachable;
}
function __ZN10LineParser10HandleEqubEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$047129 = 0, $$049 = 0, $$051128 = 0, $$063134 = 0, $$064 = 0, $$066 = 0, $$068267 = 0, $$10140 = 0, $$1061139 = 0, $$11 = 0, $$1162 = 0, $$148132 = 0, $$152131 = 0, $$2 = 0, $$253 = 0, $$5 = 0, $$556 = 0, $$7137 = 0, $$758136 = 0;
 var $$8 = 0, $$859 = 0, $$pre = 0, $$pre$phiZ2D = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, $lpad$phi$index = 0, $lpad$phi$index14 = 0, $lpad$phi145$index = 0, $lpad$phi145$index19 = 0, $lpad$phi150$index = 0, $lpad$phi150$index24 = 0, $lpad$phi156$index = 0, $lpad$phi156$index29 = 0, $lpad$phi161$index = 0, $lpad$phi161$index9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $1 = sp + 88|0;
 $2 = sp + 84|0;
 $3 = sp + 72|0;
 $4 = sp + 60|0;
 $5 = sp + 48|0;
 $6 = sp + 36|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 $10 = (__ZN10LineParser29AdvanceAndCheckEndOfStatementEv($0)|0);
 L1: do {
  if ($10) {
   $11 = ((($0)) + 16|0);
   $12 = ((($0)) + 4|0);
   $13 = ((($12)) + 11|0);
   $14 = ((($0)) + 8|0);
   $15 = ((($5)) + 11|0);
   $16 = ((($5)) + 4|0);
   L3: while(1) {
    $31 = HEAP32[$11>>2]|0;
    $32 = HEAP8[$13>>0]|0;
    $33 = ($32<<24>>24)<(0);
    if ($33) {
     $34 = HEAP32[$14>>2]|0;
     $37 = $34;
    } else {
     $35 = $32&255;
     $37 = $35;
    }
    $36 = ($31>>>0)<($37>>>0);
    if ($36) {
     if ($33) {
      $38 = HEAP32[$12>>2]|0;
      $40 = $38;
     } else {
      $40 = $12;
     }
     $39 = (($40) + ($31)|0);
     $41 = HEAP8[$39>>0]|0;
     $42 = ($41<<24>>24)==(34);
     if ($42) {
      $43 = (($31) + 1)|0;
      $44 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcj($12,34,$43)|0);
      $45 = ($44|0)==(-1);
      if ($45) {
       label = 19;
       break;
      }
      $63 = HEAP32[$11>>2]|0;
      $64 = (($63) + 1)|0;
      $65 = (($44) + -1)|0;
      $66 = (($65) - ($63))|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($5,$12,$64,$66,$12);
      $67 = HEAP32[9088]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       label = 30;
       break;
      }
      $70 = HEAP32[$67>>2]|0;
      $71 = ($70|0)==(1);
      if ($71) {
       $72 = ((($67)) + 8|0);
       $73 = HEAP8[$72>>0]|0;
       $74 = ($73<<24>>24)==(0);
       if (!($74)) {
        $81 = HEAP32[9960]|0;
        $82 = ((($81)) + -12|0);
        $83 = HEAP32[$82>>2]|0;
        $84 = (39840 + ($83)|0);
        $85 = ((($84)) + 4|0);
        $86 = HEAP32[$85>>2]|0;
        $87 = $86 | 16384;
        HEAP32[$85>>2] = $87;
        $88 = HEAP32[9960]|0;
        $89 = ((($88)) + -12|0);
        $90 = HEAP32[$89>>2]|0;
        $91 = (39840 + ($90)|0);
        $92 = ((($91)) + 4|0);
        $93 = HEAP32[$92>>2]|0;
        $94 = $93 & -75;
        $95 = $94 | 8;
        HEAP32[$92>>2] = $95;
        $96 = HEAP32[9960]|0;
        $97 = ((($96)) + -12|0);
        $98 = HEAP32[$97>>2]|0;
        $99 = (39840 + ($98)|0);
        $100 = ((($99)) + 76|0);
        HEAP32[$100>>2] = 48;
        __THREW__ = 0;
        (invoke_iiii(655,(39840|0),(27661|0),5)|0);
        $101 = __THREW__; __THREW__ = 0;
        $102 = $101&1;
        if ($102) {
         label = 42;
         break;
        }
        $103 = HEAP32[9960]|0;
        $104 = ((($103)) + -12|0);
        $105 = HEAP32[$104>>2]|0;
        $106 = (39840 + ($105)|0);
        $107 = ((($106)) + 12|0);
        HEAP32[$107>>2] = 4;
        $108 = HEAP32[9090]|0;
        $109 = ($108|0)==(0|0);
        if ($109) {
         label = 36;
         break;
        }
        $113 = ((($108)) + 131072|0);
        $114 = HEAP32[$113>>2]|0;
        __THREW__ = 0;
        $115 = (invoke_iii(656,(39840|0),($114|0))|0);
        $116 = __THREW__; __THREW__ = 0;
        $117 = $116&1;
        if ($117) {
         label = 43;
         break;
        }
        __THREW__ = 0;
        (invoke_iiii(655,($115|0),(28267|0),3)|0);
        $118 = __THREW__; __THREW__ = 0;
        $119 = $118&1;
        if ($119) {
         label = 43;
         break;
        }
       }
      }
      $75 = HEAP8[$15>>0]|0;
      $76 = ($75<<24>>24)<(0);
      $77 = HEAP32[$16>>2]|0;
      $78 = $75&255;
      $79 = $76 ? $77 : $78;
      $80 = ($79|0)==(0);
      if (!($80)) {
       $$068267 = 0;$136 = $75;
       while(1) {
        $131 = HEAP32[9090]|0;
        $132 = ($131|0)==(0|0);
        if ($132) {
         label = 48;
         break L3;
        }
        $137 = ($136<<24>>24)<(0);
        $138 = HEAP32[$5>>2]|0;
        $139 = $137 ? $138 : $5;
        $140 = (($139) + ($$068267)|0);
        $141 = HEAP8[$140>>0]|0;
        $142 = $141 << 24 >> 24;
        __THREW__ = 0;
        $143 = (invoke_iii(736,($131|0),($142|0))|0);
        $144 = __THREW__; __THREW__ = 0;
        $145 = $144&1;
        if ($145) {
         label = 57;
         break L3;
        }
        $146 = HEAP32[9088]|0;
        $147 = ($146|0)==(0|0);
        if ($147) {
         label = 51;
         break L3;
        }
        $151 = HEAP32[$146>>2]|0;
        $152 = ($151|0)==(1);
        do {
         if ($152) {
          $153 = ((($146)) + 8|0);
          $154 = HEAP8[$153>>0]|0;
          $155 = ($154<<24>>24)==(0);
          if (!($155)) {
           $156 = ($$068267>>>0)<(3);
           if ($156) {
            $157 = HEAP32[9960]|0;
            $158 = ((($157)) + -12|0);
            $159 = HEAP32[$158>>2]|0;
            $160 = (39840 + ($159)|0);
            $161 = ((($160)) + 12|0);
            HEAP32[$161>>2] = 2;
            __THREW__ = 0;
            $162 = (invoke_iii(656,(39840|0),($143|0))|0);
            $163 = __THREW__; __THREW__ = 0;
            $164 = $163&1;
            if ($164) {
             label = 61;
             break L3;
            }
            __THREW__ = 0;
            (invoke_iiii(655,($162|0),(28271|0),1)|0);
            $165 = __THREW__; __THREW__ = 0;
            $166 = $165&1;
            if ($166) {
             label = 61;
             break L3;
            } else {
             break;
            }
           } else {
            $173 = ($$068267|0)==(3);
            if (!($173)) {
             break;
            }
            __THREW__ = 0;
            (invoke_iiii(655,(39840|0),(28273|0),3)|0);
            $174 = __THREW__; __THREW__ = 0;
            $175 = $174&1;
            if ($175) {
             label = 59;
             break L3;
            } else {
             break;
            }
           }
          }
         }
        } while(0);
        $176 = HEAP32[9090]|0;
        $177 = ($176|0)==(0|0);
        if ($177) {
         label = 65;
         break L3;
        }
        __THREW__ = 0;
        invoke_vii(737,($176|0),($143|0));
        $181 = __THREW__; __THREW__ = 0;
        $182 = $181&1;
        if ($182) {
         label = 67;
         break L3;
        }
        $206 = (($$068267) + 1)|0;
        $207 = HEAP8[$15>>0]|0;
        $208 = ($207<<24>>24)<(0);
        $209 = HEAP32[$16>>2]|0;
        $210 = $207&255;
        $211 = $208 ? $209 : $210;
        $212 = ($206>>>0)<($211>>>0);
        if ($212) {
         $$068267 = $206;$136 = $207;
        } else {
         break;
        }
       }
      }
      $128 = HEAP32[9088]|0;
      $129 = ($128|0)==(0|0);
      if ($129) {
       label = 46;
       break;
      }
      $213 = HEAP32[$128>>2]|0;
      $214 = ($213|0)==(1);
      if ($214) {
       $215 = ((($128)) + 8|0);
       $216 = HEAP8[$215>>0]|0;
       $217 = ($216<<24>>24)==(0);
       if (!($217)) {
        $218 = HEAP32[9960]|0;
        $219 = ((($218)) + -12|0);
        $220 = HEAP32[$219>>2]|0;
        $221 = (39840 + ($220)|0);
        __THREW__ = 0;
        $222 = (invoke_ii(658,($221|0))|0);
        $223 = __THREW__; __THREW__ = 0;
        $224 = $223&1;
        if ($224) {
         label = 39;
         break;
        }
        HEAP32[$1>>2] = $222;
        __THREW__ = 0;
        $225 = (invoke_iii(659,($1|0),(40712|0))|0);
        $226 = __THREW__; __THREW__ = 0;
        $227 = $226&1;
        if ($227) {
         label = 83;
         break;
        }
        $228 = HEAP32[$225>>2]|0;
        $229 = ((($228)) + 28|0);
        $230 = HEAP32[$229>>2]|0;
        __THREW__ = 0;
        $231 = (invoke_iii($230|0,($225|0),10)|0);
        $232 = __THREW__; __THREW__ = 0;
        $233 = $232&1;
        if ($233) {
         label = 83;
         break;
        }
        __THREW__ = 0;
        invoke_vi(660,($1|0));
        $234 = __THREW__; __THREW__ = 0;
        $235 = $234&1;
        if ($235) {
         label = 39;
         break;
        }
        __THREW__ = 0;
        (invoke_iii(687,(39840|0),($231|0))|0);
        $242 = __THREW__; __THREW__ = 0;
        $243 = $242&1;
        if ($243) {
         label = 39;
         break;
        }
        __THREW__ = 0;
        (invoke_ii(688,(39840|0))|0);
        $244 = __THREW__; __THREW__ = 0;
        $245 = $244&1;
        if ($245) {
         label = 39;
         break;
        }
        $246 = HEAP32[9960]|0;
        $247 = ((($246)) + -12|0);
        $248 = HEAP32[$247>>2]|0;
        $249 = (39840 + ($248)|0);
        $250 = ((($249)) + 4|0);
        $251 = HEAP32[$250>>2]|0;
        $252 = $251 & -16385;
        HEAP32[$250>>2] = $252;
        $253 = HEAP32[9960]|0;
        $254 = ((($253)) + -12|0);
        $255 = HEAP32[$254>>2]|0;
        $256 = (39840 + ($255)|0);
        $257 = ((($256)) + 4|0);
        $258 = HEAP32[$257>>2]|0;
        $259 = $258 & -75;
        $260 = $259 | 2;
        HEAP32[$257>>2] = $260;
        $261 = HEAP32[9960]|0;
        $262 = ((($261)) + -12|0);
        $263 = HEAP32[$262>>2]|0;
        $264 = (39840 + ($263)|0);
        $265 = ((($264)) + 76|0);
        HEAP32[$265>>2] = 32;
       }
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
      $266 = (($44) + 1)|0;
      HEAP32[$11>>2] = $266;
     } else {
      label = 92;
     }
    } else {
     label = 92;
    }
    if ((label|0) == 92) {
     label = 0;
     __THREW__ = 0;
     $269 = (invoke_iii(692,($0|0),0)|0);
     $270 = __THREW__; __THREW__ = 0;
     $271 = $270&1;
     if ($271) {
      $272 = ___cxa_find_matching_catch_3(368|0)|0;
      $273 = tempRet0;
      $274 = (_llvm_eh_typeid_for((368|0))|0);
      $275 = ($273|0)==($274|0);
      if (!($275)) {
       $$11 = $272;$$1162 = $273;
       label = 149;
       break;
      }
      (___cxa_begin_catch(($272|0))|0);
      $276 = HEAP32[9088]|0;
      $277 = ($276|0)==(0|0);
      if ($277) {
       label = 95;
       break;
      }
      $279 = HEAP32[$276>>2]|0;
      $280 = ($279|0)==(0);
      if (!($280)) {
       label = 99;
       break;
      }
      ___cxa_end_catch();
      $$063134 = 0;
     } else {
      $286 = ($269|0)>(255);
      if ($286) {
       label = 101;
       break;
      } else {
       $$063134 = $269;
      }
     }
     $300 = HEAP32[9088]|0;
     $301 = ($300|0)==(0|0);
     if ($301) {
      label = 109;
      break;
     }
     $302 = HEAP32[$300>>2]|0;
     $303 = ($302|0)==(1);
     if ($303) {
      $304 = ((($300)) + 8|0);
      $305 = HEAP8[$304>>0]|0;
      $306 = ($305<<24>>24)==(0);
      if (!($306)) {
       $307 = HEAP32[9960]|0;
       $308 = ((($307)) + -12|0);
       $309 = HEAP32[$308>>2]|0;
       $310 = (39840 + ($309)|0);
       $311 = ((($310)) + 4|0);
       $312 = HEAP32[$311>>2]|0;
       $313 = $312 | 16384;
       HEAP32[$311>>2] = $313;
       $314 = HEAP32[9960]|0;
       $315 = ((($314)) + -12|0);
       $316 = HEAP32[$315>>2]|0;
       $317 = (39840 + ($316)|0);
       $318 = ((($317)) + 4|0);
       $319 = HEAP32[$318>>2]|0;
       $320 = $319 & -75;
       $321 = $320 | 8;
       HEAP32[$318>>2] = $321;
       $322 = HEAP32[9960]|0;
       $323 = ((($322)) + -12|0);
       $324 = HEAP32[$323>>2]|0;
       $325 = (39840 + ($324)|0);
       $326 = ((($325)) + 76|0);
       HEAP32[$326>>2] = 48;
       (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(39840,27661,5)|0);
       $327 = HEAP32[9960]|0;
       $328 = ((($327)) + -12|0);
       $329 = HEAP32[$328>>2]|0;
       $330 = (39840 + ($329)|0);
       $331 = ((($330)) + 12|0);
       HEAP32[$331>>2] = 4;
       $332 = HEAP32[9090]|0;
       $333 = ($332|0)==(0|0);
       if ($333) {
        label = 113;
        break;
       }
       $334 = ((($332)) + 131072|0);
       $335 = HEAP32[$334>>2]|0;
       $336 = (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi(39840,$335)|0);
       (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($336,28267,3)|0);
       $337 = HEAP32[9960]|0;
       $338 = ((($337)) + -12|0);
       $339 = HEAP32[$338>>2]|0;
       $340 = (39840 + ($339)|0);
       $341 = ((($340)) + 12|0);
       HEAP32[$341>>2] = 2;
       $342 = $$063134 & 255;
       (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi(39840,$342)|0);
       $343 = HEAP32[9960]|0;
       $344 = ((($343)) + -12|0);
       $345 = HEAP32[$344>>2]|0;
       $346 = (39840 + ($345)|0);
       $347 = (__ZNKSt3__28ios_base6getlocEv($346)|0);
       HEAP32[$2>>2] = $347;
       __THREW__ = 0;
       $348 = (invoke_iii(659,($2|0),(40712|0))|0);
       $349 = __THREW__; __THREW__ = 0;
       $350 = $349&1;
       if ($350) {
        label = 116;
        break;
       }
       $351 = HEAP32[$348>>2]|0;
       $352 = ((($351)) + 28|0);
       $353 = HEAP32[$352>>2]|0;
       __THREW__ = 0;
       $354 = (invoke_iii($353|0,($348|0),10)|0);
       $355 = __THREW__; __THREW__ = 0;
       $356 = $355&1;
       if ($356) {
        label = 116;
        break;
       }
       __ZNSt3__26localeD2Ev($2);
       (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc(39840,$354)|0);
       (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv(39840)|0);
       $363 = HEAP32[9960]|0;
       $364 = ((($363)) + -12|0);
       $365 = HEAP32[$364>>2]|0;
       $366 = (39840 + ($365)|0);
       $367 = ((($366)) + 4|0);
       $368 = HEAP32[$367>>2]|0;
       $369 = $368 & -16385;
       HEAP32[$367>>2] = $369;
       $370 = HEAP32[9960]|0;
       $371 = ((($370)) + -12|0);
       $372 = HEAP32[$371>>2]|0;
       $373 = (39840 + ($372)|0);
       $374 = ((($373)) + 4|0);
       $375 = HEAP32[$374>>2]|0;
       $376 = $375 & -75;
       $377 = $376 | 2;
       HEAP32[$374>>2] = $377;
       $378 = HEAP32[9960]|0;
       $379 = ((($378)) + -12|0);
       $380 = HEAP32[$379>>2]|0;
       $381 = (39840 + ($380)|0);
       $382 = ((($381)) + 76|0);
       HEAP32[$382>>2] = 32;
      }
     }
     $383 = HEAP32[9090]|0;
     $384 = ($383|0)==(0|0);
     if ($384) {
      label = 121;
      break;
     }
     $388 = $$063134 & 255;
     __THREW__ = 0;
     invoke_vii(737,($383|0),($388|0));
     $389 = __THREW__; __THREW__ = 0;
     $390 = $389&1;
     if ($390) {
      label = 123;
      break;
     }
    }
    $414 = (__ZN10LineParser29AdvanceAndCheckEndOfStatementEv($0)|0);
    if (!($414)) {
     label = 148;
     break;
    }
    $415 = HEAP32[$11>>2]|0;
    $416 = HEAP8[$13>>0]|0;
    $417 = ($416<<24>>24)<(0);
    if ($417) {
     $418 = HEAP32[$14>>2]|0;
     $421 = $418;
    } else {
     $419 = $416&255;
     $421 = $419;
    }
    $420 = ($415>>>0)<($421>>>0);
    if (!($420)) {
     label = 140;
     break;
    }
    if ($417) {
     $422 = HEAP32[$12>>2]|0;
     $424 = $422;
    } else {
     $424 = $12;
    }
    $423 = (($424) + ($415)|0);
    $425 = HEAP8[$423>>0]|0;
    $426 = ($425<<24>>24)==(44);
    if (!($426)) {
     label = 140;
     break;
    }
    $440 = (($415) + 1)|0;
    HEAP32[$11>>2] = $440;
    $441 = (__ZN10LineParser29AdvanceAndCheckEndOfStatementEv($0)|0);
    if (!($441)) {
     $$pre$phiZ2D = $12;
     break L1;
    }
   }
   switch (label|0) {
    case 19: {
     $46 = (___cxa_allocate_exception(36)|0);
     __THREW__ = 0;
     invoke_vii(635,($4|0),($12|0));
     $47 = __THREW__; __THREW__ = 0;
     $48 = $47&1;
     if ($48) {
      $57 = ___cxa_find_matching_catch_2()|0;
      $58 = tempRet0;
      $$148132 = $57;$$152131 = $58;
     } else {
      $49 = HEAP8[$13>>0]|0;
      $50 = ($49<<24>>24)<(0);
      if ($50) {
       $51 = HEAP32[$14>>2]|0;
       $53 = $51;
      } else {
       $52 = $49&255;
       $53 = $52;
      }
      __THREW__ = 0;
      invoke_viii(732,($46|0),($4|0),($53|0));
      $54 = __THREW__; __THREW__ = 0;
      $55 = $54&1;
      if ($55) {
       $$066 = 1;
      } else {
       __THREW__ = 0;
       invoke_viii(644,($46|0),(1128|0),(7|0));
       $56 = __THREW__; __THREW__ = 0;
       $$066 = 0;
      }
      $59 = ___cxa_find_matching_catch_2()|0;
      $60 = tempRet0;
      __THREW__ = 0;
      invoke_vi(637,($4|0));
      $61 = __THREW__; __THREW__ = 0;
      $62 = $61&1;
      if ($62) {
       $442 = ___cxa_find_matching_catch_3(0|0)|0;
       $443 = tempRet0;
       ___clang_call_terminate($442);
       // unreachable;
      }
      if ($$066) {
       $$148132 = $59;$$152131 = $60;
      } else {
       $$11 = $59;$$1162 = $60;
       ___resumeException($$11|0);
       // unreachable;
      }
     }
     ___cxa_free_exception(($46|0));
     $$11 = $$148132;$$1162 = $$152131;
     ___resumeException($$11|0);
     // unreachable;
     break;
    }
    case 30: {
     __THREW__ = 0;
     invoke_viiii(680,(27040|0),(27060|0),38,(27075|0));
     $69 = __THREW__; __THREW__ = 0;
     label = 40;
     break;
    }
    case 36: {
     __THREW__ = 0;
     invoke_viiii(680,(27040|0),(27084|0),36,(27075|0));
     $110 = __THREW__; __THREW__ = 0;
     $111 = ___cxa_find_matching_catch_2()|0;
     $112 = tempRet0;
     $lpad$phi161$index = $111;$lpad$phi161$index9 = $112;
     label = 44;
     break;
    }
    case 39: {
     $120 = ___cxa_find_matching_catch_2()|0;
     $121 = tempRet0;
     $eh$lpad$body$index3Z2D = $121;$eh$lpad$body$indexZ2D = $120;
     label = 41;
     break;
    }
    case 42: {
     $124 = ___cxa_find_matching_catch_2()|0;
     $125 = tempRet0;
     $$5 = $124;$$556 = $125;
     break;
    }
    case 43: {
     $126 = ___cxa_find_matching_catch_2()|0;
     $127 = tempRet0;
     $lpad$phi161$index = $126;$lpad$phi161$index9 = $127;
     label = 44;
     break;
    }
    case 46: {
     __THREW__ = 0;
     invoke_viiii(680,(27040|0),(27060|0),38,(27075|0));
     $130 = __THREW__; __THREW__ = 0;
     label = 40;
     break;
    }
    case 48: {
     __THREW__ = 0;
     invoke_viiii(680,(27040|0),(27084|0),36,(27075|0));
     $133 = __THREW__; __THREW__ = 0;
     $134 = ___cxa_find_matching_catch_2()|0;
     $135 = tempRet0;
     $lpad$phi$index = $134;$lpad$phi$index14 = $135;
     label = 58;
     break;
    }
    case 51: {
     __THREW__ = 0;
     invoke_viiii(680,(27040|0),(27060|0),38,(27075|0));
     $148 = __THREW__; __THREW__ = 0;
     $149 = ___cxa_find_matching_catch_2()|0;
     $150 = tempRet0;
     $lpad$phi145$index = $149;$lpad$phi145$index19 = $150;
     label = 60;
     break;
    }
    case 57: {
     $167 = ___cxa_find_matching_catch_2()|0;
     $168 = tempRet0;
     $lpad$phi$index = $167;$lpad$phi$index14 = $168;
     label = 58;
     break;
    }
    case 59: {
     $169 = ___cxa_find_matching_catch_2()|0;
     $170 = tempRet0;
     $lpad$phi145$index = $169;$lpad$phi145$index19 = $170;
     label = 60;
     break;
    }
    case 61: {
     $171 = ___cxa_find_matching_catch_2()|0;
     $172 = tempRet0;
     $$5 = $171;$$556 = $172;
     break;
    }
    case 65: {
     __THREW__ = 0;
     invoke_viiii(680,(27040|0),(27084|0),36,(27075|0));
     $178 = __THREW__; __THREW__ = 0;
     $179 = ___cxa_find_matching_catch_3(488|0)|0;
     $180 = tempRet0;
     $lpad$phi150$index = $179;$lpad$phi150$index24 = $180;
     label = 68;
     break;
    }
    case 67: {
     $183 = ___cxa_find_matching_catch_3(488|0)|0;
     $184 = tempRet0;
     $lpad$phi150$index = $183;$lpad$phi150$index24 = $184;
     label = 68;
     break;
    }
    case 83: {
     $236 = ___cxa_find_matching_catch_2()|0;
     $237 = tempRet0;
     __THREW__ = 0;
     invoke_vi(660,($1|0));
     $238 = __THREW__; __THREW__ = 0;
     $239 = $238&1;
     if ($239) {
      $240 = ___cxa_find_matching_catch_3(0|0)|0;
      $241 = tempRet0;
      ___clang_call_terminate($240);
      // unreachable;
     } else {
      $eh$lpad$body$index3Z2D = $237;$eh$lpad$body$indexZ2D = $236;
      label = 41;
      break;
     }
     break;
    }
    case 95: {
     __THREW__ = 0;
     invoke_viiii(680,(27040|0),(27060|0),38,(27075|0));
     $278 = __THREW__; __THREW__ = 0;
     label = 98;
     break;
    }
    case 99: {
     __THREW__ = 0;
     invoke_v(642);
     $285 = __THREW__; __THREW__ = 0;
     label = 98;
     break;
    }
    case 101: {
     $287 = (___cxa_allocate_exception(36)|0);
     __THREW__ = 0;
     invoke_vii(635,($7|0),($12|0));
     $288 = __THREW__; __THREW__ = 0;
     $289 = $288&1;
     if ($289) {
      $294 = ___cxa_find_matching_catch_2()|0;
      $295 = tempRet0;
      $$7137 = $294;$$758136 = $295;
     } else {
      $290 = HEAP32[$11>>2]|0;
      __THREW__ = 0;
      invoke_viii(738,($287|0),($7|0),($290|0));
      $291 = __THREW__; __THREW__ = 0;
      $292 = $291&1;
      if ($292) {
       $$049 = 1;
      } else {
       __THREW__ = 0;
       invoke_viii(644,($287|0),(288|0),(7|0));
       $293 = __THREW__; __THREW__ = 0;
       $$049 = 0;
      }
      $296 = ___cxa_find_matching_catch_2()|0;
      $297 = tempRet0;
      __THREW__ = 0;
      invoke_vi(637,($7|0));
      $298 = __THREW__; __THREW__ = 0;
      $299 = $298&1;
      if ($299) {
       $442 = ___cxa_find_matching_catch_3(0|0)|0;
       $443 = tempRet0;
       ___clang_call_terminate($442);
       // unreachable;
      }
      if ($$049) {
       $$7137 = $296;$$758136 = $297;
      } else {
       $$11 = $296;$$1162 = $297;
       ___resumeException($$11|0);
       // unreachable;
      }
     }
     ___cxa_free_exception(($287|0));
     $$11 = $$7137;$$1162 = $$758136;
     ___resumeException($$11|0);
     // unreachable;
     break;
    }
    case 109: {
     ___assert_fail((27040|0),(27060|0),38,(27075|0));
     // unreachable;
     break;
    }
    case 113: {
     ___assert_fail((27040|0),(27084|0),36,(27075|0));
     // unreachable;
     break;
    }
    case 116: {
     $357 = ___cxa_find_matching_catch_2()|0;
     $358 = tempRet0;
     __THREW__ = 0;
     invoke_vi(660,($2|0));
     $359 = __THREW__; __THREW__ = 0;
     $360 = $359&1;
     if ($360) {
      $361 = ___cxa_find_matching_catch_3(0|0)|0;
      $362 = tempRet0;
      ___clang_call_terminate($361);
      // unreachable;
     } else {
      ___resumeException($357|0);
      // unreachable;
     }
     break;
    }
    case 121: {
     __THREW__ = 0;
     invoke_viiii(680,(27040|0),(27084|0),36,(27075|0));
     $385 = __THREW__; __THREW__ = 0;
     $386 = ___cxa_find_matching_catch_3(488|0)|0;
     $387 = tempRet0;
     $lpad$phi156$index = $386;$lpad$phi156$index29 = $387;
     label = 124;
     break;
    }
    case 123: {
     $391 = ___cxa_find_matching_catch_3(488|0)|0;
     $392 = tempRet0;
     $lpad$phi156$index = $391;$lpad$phi156$index29 = $392;
     label = 124;
     break;
    }
    case 140: {
     $427 = (___cxa_allocate_exception(36)|0);
     __THREW__ = 0;
     invoke_vii(635,($9|0),($12|0));
     $428 = __THREW__; __THREW__ = 0;
     $429 = $428&1;
     if ($429) {
      $434 = ___cxa_find_matching_catch_2()|0;
      $435 = tempRet0;
      $$10140 = $434;$$1061139 = $435;
     } else {
      $430 = HEAP32[$11>>2]|0;
      __THREW__ = 0;
      invoke_viii(676,($427|0),($9|0),($430|0));
      $431 = __THREW__; __THREW__ = 0;
      $432 = $431&1;
      if ($432) {
       $$0 = 1;
      } else {
       __THREW__ = 0;
       invoke_viii(644,($427|0),(352|0),(7|0));
       $433 = __THREW__; __THREW__ = 0;
       $$0 = 0;
      }
      $436 = ___cxa_find_matching_catch_2()|0;
      $437 = tempRet0;
      __THREW__ = 0;
      invoke_vi(637,($9|0));
      $438 = __THREW__; __THREW__ = 0;
      $439 = $438&1;
      if ($439) {
       $442 = ___cxa_find_matching_catch_3(0|0)|0;
       $443 = tempRet0;
       ___clang_call_terminate($442);
       // unreachable;
      }
      if ($$0) {
       $$10140 = $436;$$1061139 = $437;
      } else {
       $$11 = $436;$$1162 = $437;
       ___resumeException($$11|0);
       // unreachable;
      }
     }
     ___cxa_free_exception(($427|0));
     $$11 = $$10140;$$1162 = $$1061139;
     ___resumeException($$11|0);
     // unreachable;
     break;
    }
    case 148: {
     STACKTOP = sp;return;
     break;
    }
    case 149: {
     ___resumeException($$11|0);
     // unreachable;
     break;
    }
   }
   if ((label|0) == 40) {
    $122 = ___cxa_find_matching_catch_2()|0;
    $123 = tempRet0;
    $eh$lpad$body$index3Z2D = $123;$eh$lpad$body$indexZ2D = $122;
    label = 41;
   }
   else if ((label|0) == 44) {
    $$5 = $lpad$phi161$index;$$556 = $lpad$phi161$index9;
   }
   else if ((label|0) == 58) {
    $$5 = $lpad$phi$index;$$556 = $lpad$phi$index14;
   }
   else if ((label|0) == 60) {
    $$5 = $lpad$phi145$index;$$556 = $lpad$phi145$index19;
   }
   else if ((label|0) == 68) {
    $185 = (_llvm_eh_typeid_for((488|0))|0);
    $186 = ($lpad$phi150$index24|0)==($185|0);
    if ($186) {
     $187 = (___cxa_begin_catch(($lpad$phi150$index|0))|0);
     __THREW__ = 0;
     invoke_vii(635,($6|0),($12|0));
     $188 = __THREW__; __THREW__ = 0;
     $189 = $188&1;
     do {
      if ($189) {
       label = 73;
      } else {
       $190 = ((($187)) + 4|0);
       __THREW__ = 0;
       (invoke_iii(641,($190|0),($6|0))|0);
       $191 = __THREW__; __THREW__ = 0;
       $192 = $191&1;
       if ($192) {
        $200 = ___cxa_find_matching_catch_2()|0;
        $201 = tempRet0;
        __THREW__ = 0;
        invoke_vi(637,($6|0));
        $202 = __THREW__; __THREW__ = 0;
        $203 = $202&1;
        if (!($203)) {
         $$2 = $200;$$253 = $201;
         break;
        }
        $442 = ___cxa_find_matching_catch_3(0|0)|0;
        $443 = tempRet0;
        ___clang_call_terminate($442);
        // unreachable;
       } else {
        __THREW__ = 0;
        invoke_vi(637,($6|0));
        $193 = __THREW__; __THREW__ = 0;
        $194 = $193&1;
        if ($194) {
         label = 73;
         break;
        }
        $195 = HEAP32[$11>>2]|0;
        $196 = ((($187)) + 16|0);
        HEAP32[$196>>2] = $195;
        __THREW__ = 0;
        invoke_v(642);
        $197 = __THREW__; __THREW__ = 0;
        label = 73;
        break;
       }
      }
     } while(0);
     if ((label|0) == 73) {
      $198 = ___cxa_find_matching_catch_2()|0;
      $199 = tempRet0;
      $$2 = $198;$$253 = $199;
     }
     __THREW__ = 0;
     invoke_v(643);
     $204 = __THREW__; __THREW__ = 0;
     $205 = $204&1;
     if ($205) {
      $442 = ___cxa_find_matching_catch_3(0|0)|0;
      $443 = tempRet0;
      ___clang_call_terminate($442);
      // unreachable;
     } else {
      $$5 = $$2;$$556 = $$253;
     }
    } else {
     $$5 = $lpad$phi150$index;$$556 = $lpad$phi150$index24;
    }
   }
   else if ((label|0) == 98) {
    $281 = ___cxa_find_matching_catch_2()|0;
    $282 = tempRet0;
    __THREW__ = 0;
    invoke_v(643);
    $283 = __THREW__; __THREW__ = 0;
    $284 = $283&1;
    if ($284) {
     $442 = ___cxa_find_matching_catch_3(0|0)|0;
     $443 = tempRet0;
     ___clang_call_terminate($442);
     // unreachable;
    } else {
     $$11 = $281;$$1162 = $282;
     ___resumeException($$11|0);
     // unreachable;
    }
   }
   else if ((label|0) == 124) {
    $393 = (_llvm_eh_typeid_for((488|0))|0);
    $394 = ($lpad$phi156$index29|0)==($393|0);
    if (!($394)) {
     $$11 = $lpad$phi156$index;$$1162 = $lpad$phi156$index29;
     ___resumeException($$11|0);
     // unreachable;
    }
    $395 = (___cxa_begin_catch(($lpad$phi156$index|0))|0);
    __THREW__ = 0;
    invoke_vii(635,($8|0),($12|0));
    $396 = __THREW__; __THREW__ = 0;
    $397 = $396&1;
    do {
     if ($397) {
      label = 129;
     } else {
      $398 = ((($395)) + 4|0);
      __THREW__ = 0;
      (invoke_iii(641,($398|0),($8|0))|0);
      $399 = __THREW__; __THREW__ = 0;
      $400 = $399&1;
      if ($400) {
       $408 = ___cxa_find_matching_catch_2()|0;
       $409 = tempRet0;
       __THREW__ = 0;
       invoke_vi(637,($8|0));
       $410 = __THREW__; __THREW__ = 0;
       $411 = $410&1;
       if (!($411)) {
        $$8 = $408;$$859 = $409;
        break;
       }
       $442 = ___cxa_find_matching_catch_3(0|0)|0;
       $443 = tempRet0;
       ___clang_call_terminate($442);
       // unreachable;
      } else {
       __THREW__ = 0;
       invoke_vi(637,($8|0));
       $401 = __THREW__; __THREW__ = 0;
       $402 = $401&1;
       if ($402) {
        label = 129;
        break;
       }
       $403 = HEAP32[$11>>2]|0;
       $404 = ((($395)) + 16|0);
       HEAP32[$404>>2] = $403;
       __THREW__ = 0;
       invoke_v(642);
       $405 = __THREW__; __THREW__ = 0;
       label = 129;
       break;
      }
     }
    } while(0);
    if ((label|0) == 129) {
     $406 = ___cxa_find_matching_catch_2()|0;
     $407 = tempRet0;
     $$8 = $406;$$859 = $407;
    }
    __THREW__ = 0;
    invoke_v(643);
    $412 = __THREW__; __THREW__ = 0;
    $413 = $412&1;
    if ($413) {
     $442 = ___cxa_find_matching_catch_3(0|0)|0;
     $443 = tempRet0;
     ___clang_call_terminate($442);
     // unreachable;
    } else {
     $$11 = $$8;$$1162 = $$859;
     ___resumeException($$11|0);
     // unreachable;
    }
   }
   if ((label|0) == 41) {
    $$5 = $eh$lpad$body$indexZ2D;$$556 = $eh$lpad$body$index3Z2D;
   }
   __THREW__ = 0;
   invoke_vi(637,($5|0));
   $267 = __THREW__; __THREW__ = 0;
   $268 = $267&1;
   if ($268) {
    $442 = ___cxa_find_matching_catch_3(0|0)|0;
    $443 = tempRet0;
    ___clang_call_terminate($442);
    // unreachable;
   }
   $$11 = $$5;$$1162 = $$556;
   ___resumeException($$11|0);
   // unreachable;
  } else {
   $$pre = ((($0)) + 4|0);
   $$pre$phiZ2D = $$pre;
  }
 } while(0);
 $17 = (___cxa_allocate_exception(36)|0);
 __THREW__ = 0;
 invoke_vii(635,($3|0),($$pre$phiZ2D|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $25 = ___cxa_find_matching_catch_2()|0;
  $26 = tempRet0;
  $$047129 = $25;$$051128 = $26;
 } else {
  $20 = ((($0)) + 16|0);
  $21 = HEAP32[$20>>2]|0;
  __THREW__ = 0;
  invoke_viii(735,($17|0),($3|0),($21|0));
  $22 = __THREW__; __THREW__ = 0;
  $23 = $22&1;
  if ($23) {
   $$064 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($17|0),(432|0),(7|0));
   $24 = __THREW__; __THREW__ = 0;
   $$064 = 0;
  }
  $27 = ___cxa_find_matching_catch_2()|0;
  $28 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($3|0));
  $29 = __THREW__; __THREW__ = 0;
  $30 = $29&1;
  if ($30) {
   $442 = ___cxa_find_matching_catch_3(0|0)|0;
   $443 = tempRet0;
   ___clang_call_terminate($442);
   // unreachable;
  }
  if ($$064) {
   $$047129 = $27;$$051128 = $28;
  } else {
   $$11 = $27;$$1162 = $28;
   ___resumeException($$11|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($17|0));
 $$11 = $$047129;$$1162 = $$051128;
 ___resumeException($$11|0);
 // unreachable;
}
function __ZN10LineParser10HandleEqudEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$026 = 0, $$029 = 0, $$030 = 0, $$032 = 0, $$13158 = 0, $$13357 = 0, $$23460 = 0, $$261 = 0, $$3 = 0, $$335 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $1 = sp + 36|0;
 $2 = sp + 24|0;
 $3 = sp + 12|0;
 $4 = sp;
 $5 = ((($0)) + 16|0);
 $6 = ((($0)) + 4|0);
 $7 = ((($6)) + 11|0);
 $8 = ((($0)) + 8|0);
 while(1) {
  __THREW__ = 0;
  $9 = (invoke_iii(739,($0|0),0)|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $12 = ___cxa_find_matching_catch_3(368|0)|0;
   $13 = tempRet0;
   $14 = (_llvm_eh_typeid_for((368|0))|0);
   $15 = ($13|0)==($14|0);
   if (!($15)) {
    $$3 = $12;$$335 = $13;
    label = 68;
    break;
   }
   (___cxa_begin_catch(($12|0))|0);
   $16 = HEAP32[9088]|0;
   $17 = ($16|0)==(0|0);
   if ($17) {
    label = 5;
    break;
   }
   $19 = HEAP32[$16>>2]|0;
   $20 = ($19|0)==(0);
   if (!($20)) {
    label = 9;
    break;
   }
   ___cxa_end_catch();
   $$029 = 0;
  } else {
   $$029 = $9;
  }
  $26 = HEAP32[9088]|0;
  $27 = ($26|0)==(0|0);
  if ($27) {
   label = 11;
   break;
  }
  $28 = HEAP32[$26>>2]|0;
  $29 = ($28|0)==(1);
  if ($29) {
   $30 = ((($26)) + 8|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = ($31<<24>>24)==(0);
   if (!($32)) {
    $33 = HEAP32[9960]|0;
    $34 = ((($33)) + -12|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = (39840 + ($35)|0);
    $37 = ((($36)) + 4|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = $38 | 16384;
    HEAP32[$37>>2] = $39;
    $40 = HEAP32[9960]|0;
    $41 = ((($40)) + -12|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = (39840 + ($42)|0);
    $44 = ((($43)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = $45 & -75;
    $47 = $46 | 8;
    HEAP32[$44>>2] = $47;
    $48 = HEAP32[9960]|0;
    $49 = ((($48)) + -12|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (39840 + ($50)|0);
    $52 = ((($51)) + 76|0);
    HEAP32[$52>>2] = 48;
    (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(39840,27661,5)|0);
    $53 = HEAP32[9960]|0;
    $54 = ((($53)) + -12|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (39840 + ($55)|0);
    $57 = ((($56)) + 12|0);
    HEAP32[$57>>2] = 4;
    $58 = HEAP32[9090]|0;
    $59 = ($58|0)==(0|0);
    if ($59) {
     label = 15;
     break;
    }
    $60 = ((($58)) + 131072|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi(39840,$61)|0);
    (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($62,28267,3)|0);
    $63 = HEAP32[9960]|0;
    $64 = ((($63)) + -12|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (39840 + ($65)|0);
    $67 = ((($66)) + 12|0);
    HEAP32[$67>>2] = 2;
    $68 = $$029 & 255;
    $69 = (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEj(39840,$68)|0);
    (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($69,28271,1)|0);
    $70 = HEAP32[9960]|0;
    $71 = ((($70)) + -12|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (39840 + ($72)|0);
    $74 = ((($73)) + 12|0);
    HEAP32[$74>>2] = 2;
    $75 = $$029 >>> 8;
    $76 = $75 & 255;
    $77 = (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEj(39840,$76)|0);
    (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($77,28271,1)|0);
    $78 = HEAP32[9960]|0;
    $79 = ((($78)) + -12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (39840 + ($80)|0);
    $82 = ((($81)) + 12|0);
    HEAP32[$82>>2] = 2;
    $83 = $$029 >>> 16;
    $84 = $83 & 255;
    $85 = (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEj(39840,$84)|0);
    (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($85,28271,1)|0);
    $86 = HEAP32[9960]|0;
    $87 = ((($86)) + -12|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = (39840 + ($88)|0);
    $90 = ((($89)) + 12|0);
    HEAP32[$90>>2] = 2;
    $91 = $$029 >>> 24;
    (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEj(39840,$91)|0);
    $92 = HEAP32[9960]|0;
    $93 = ((($92)) + -12|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = (39840 + ($94)|0);
    $96 = (__ZNKSt3__28ios_base6getlocEv($95)|0);
    HEAP32[$1>>2] = $96;
    __THREW__ = 0;
    $97 = (invoke_iii(659,($1|0),(40712|0))|0);
    $98 = __THREW__; __THREW__ = 0;
    $99 = $98&1;
    if ($99) {
     label = 18;
     break;
    }
    $100 = HEAP32[$97>>2]|0;
    $101 = ((($100)) + 28|0);
    $102 = HEAP32[$101>>2]|0;
    __THREW__ = 0;
    $103 = (invoke_iii($102|0,($97|0),10)|0);
    $104 = __THREW__; __THREW__ = 0;
    $105 = $104&1;
    if ($105) {
     label = 18;
     break;
    }
    __ZNSt3__26localeD2Ev($1);
    (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc(39840,$103)|0);
    (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv(39840)|0);
    $112 = HEAP32[9960]|0;
    $113 = ((($112)) + -12|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = (39840 + ($114)|0);
    $116 = ((($115)) + 4|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = $117 & -16385;
    HEAP32[$116>>2] = $118;
    $119 = HEAP32[9960]|0;
    $120 = ((($119)) + -12|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = (39840 + ($121)|0);
    $123 = ((($122)) + 4|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = $124 & -75;
    $126 = $125 | 2;
    HEAP32[$123>>2] = $126;
    $127 = HEAP32[9960]|0;
    $128 = ((($127)) + -12|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = (39840 + ($129)|0);
    $131 = ((($130)) + 76|0);
    HEAP32[$131>>2] = 32;
   }
  }
  $132 = HEAP32[9090]|0;
  $133 = ($132|0)==(0|0);
  if ($133) {
   label = 23;
   break;
  }
  $135 = $$029 & 255;
  __THREW__ = 0;
  invoke_vii(737,($132|0),($135|0));
  $136 = __THREW__; __THREW__ = 0;
  $137 = $136&1;
  if ($137) {
   label = 34;
   break;
  }
  $138 = HEAP32[9090]|0;
  $139 = ($138|0)==(0|0);
  if ($139) {
   label = 26;
   break;
  }
  $141 = $$029 >>> 8;
  $142 = $141 & 255;
  __THREW__ = 0;
  invoke_vii(737,($138|0),($142|0));
  $143 = __THREW__; __THREW__ = 0;
  $144 = $143&1;
  if ($144) {
   label = 34;
   break;
  }
  $145 = HEAP32[9090]|0;
  $146 = ($145|0)==(0|0);
  if ($146) {
   label = 29;
   break;
  }
  $148 = $$029 >>> 16;
  $149 = $148 & 255;
  __THREW__ = 0;
  invoke_vii(737,($145|0),($149|0));
  $150 = __THREW__; __THREW__ = 0;
  $151 = $150&1;
  if ($151) {
   label = 34;
   break;
  }
  $152 = HEAP32[9090]|0;
  $153 = ($152|0)==(0|0);
  if ($153) {
   label = 32;
   break;
  }
  $155 = $$029 >>> 24;
  __THREW__ = 0;
  invoke_vii(737,($152|0),($155|0));
  $156 = __THREW__; __THREW__ = 0;
  $157 = $156&1;
  if ($157) {
   label = 34;
   break;
  }
  $183 = (__ZN10LineParser29AdvanceAndCheckEndOfStatementEv($0)|0);
  if (!($183)) {
   label = 67;
   break;
  }
  $184 = HEAP32[$5>>2]|0;
  $185 = HEAP8[$7>>0]|0;
  $186 = ($185<<24>>24)<(0);
  if ($186) {
   $187 = HEAP32[$8>>2]|0;
   $190 = $187;
  } else {
   $188 = $185&255;
   $190 = $188;
  }
  $189 = ($184>>>0)<($190>>>0);
  if (!($189)) {
   label = 52;
   break;
  }
  if ($186) {
   $191 = HEAP32[$6>>2]|0;
   $193 = $191;
  } else {
   $193 = $6;
  }
  $192 = (($193) + ($184)|0);
  $194 = HEAP8[$192>>0]|0;
  $195 = ($194<<24>>24)==(44);
  if (!($195)) {
   label = 52;
   break;
  }
  $209 = (($184) + 1)|0;
  HEAP32[$5>>2] = $209;
  $210 = (__ZN10LineParser29AdvanceAndCheckEndOfStatementEv($0)|0);
  if (!($210)) {
   label = 60;
   break;
  }
 }
 switch (label|0) {
  case 5: {
   __THREW__ = 0;
   invoke_viiii(680,(27040|0),(27060|0),38,(27075|0));
   $18 = __THREW__; __THREW__ = 0;
   label = 8;
   break;
  }
  case 9: {
   __THREW__ = 0;
   invoke_v(642);
   $25 = __THREW__; __THREW__ = 0;
   label = 8;
   break;
  }
  case 11: {
   ___assert_fail((27040|0),(27060|0),38,(27075|0));
   // unreachable;
   break;
  }
  case 15: {
   ___assert_fail((27040|0),(27084|0),36,(27075|0));
   // unreachable;
   break;
  }
  case 18: {
   $106 = ___cxa_find_matching_catch_2()|0;
   $107 = tempRet0;
   __THREW__ = 0;
   invoke_vi(660,($1|0));
   $108 = __THREW__; __THREW__ = 0;
   $109 = $108&1;
   if ($109) {
    $110 = ___cxa_find_matching_catch_3(0|0)|0;
    $111 = tempRet0;
    ___clang_call_terminate($110);
    // unreachable;
   } else {
    ___resumeException($106|0);
    // unreachable;
   }
   break;
  }
  case 23: {
   __THREW__ = 0;
   invoke_viiii(680,(27040|0),(27084|0),36,(27075|0));
   $134 = __THREW__; __THREW__ = 0;
   label = 35;
   break;
  }
  case 26: {
   __THREW__ = 0;
   invoke_viiii(680,(27040|0),(27084|0),36,(27075|0));
   $140 = __THREW__; __THREW__ = 0;
   label = 35;
   break;
  }
  case 29: {
   __THREW__ = 0;
   invoke_viiii(680,(27040|0),(27084|0),36,(27075|0));
   $147 = __THREW__; __THREW__ = 0;
   label = 35;
   break;
  }
  case 32: {
   __THREW__ = 0;
   invoke_viiii(680,(27040|0),(27084|0),36,(27075|0));
   $154 = __THREW__; __THREW__ = 0;
   label = 35;
   break;
  }
  case 34: {
   $158 = ___cxa_find_matching_catch_3(488|0)|0;
   $159 = tempRet0;
   $lpad$phi$index = $158;$lpad$phi$index2 = $159;
   break;
  }
  case 52: {
   $196 = (___cxa_allocate_exception(36)|0);
   __THREW__ = 0;
   invoke_vii(635,($3|0),($6|0));
   $197 = __THREW__; __THREW__ = 0;
   $198 = $197&1;
   if ($198) {
    $203 = ___cxa_find_matching_catch_2()|0;
    $204 = tempRet0;
    $$13158 = $203;$$13357 = $204;
   } else {
    $199 = HEAP32[$5>>2]|0;
    __THREW__ = 0;
    invoke_viii(676,($196|0),($3|0),($199|0));
    $200 = __THREW__; __THREW__ = 0;
    $201 = $200&1;
    if ($201) {
     $$026 = 1;
    } else {
     __THREW__ = 0;
     invoke_viii(644,($196|0),(352|0),(7|0));
     $202 = __THREW__; __THREW__ = 0;
     $$026 = 0;
    }
    $205 = ___cxa_find_matching_catch_2()|0;
    $206 = tempRet0;
    __THREW__ = 0;
    invoke_vi(637,($3|0));
    $207 = __THREW__; __THREW__ = 0;
    $208 = $207&1;
    if ($208) {
     $224 = ___cxa_find_matching_catch_3(0|0)|0;
     $225 = tempRet0;
     ___clang_call_terminate($224);
     // unreachable;
    }
    if ($$026) {
     $$13158 = $205;$$13357 = $206;
    } else {
     $$3 = $205;$$335 = $206;
     ___resumeException($$3|0);
     // unreachable;
    }
   }
   ___cxa_free_exception(($196|0));
   $$3 = $$13158;$$335 = $$13357;
   ___resumeException($$3|0);
   // unreachable;
   break;
  }
  case 60: {
   $211 = (___cxa_allocate_exception(36)|0);
   __THREW__ = 0;
   invoke_vii(635,($4|0),($6|0));
   $212 = __THREW__; __THREW__ = 0;
   $213 = $212&1;
   if ($213) {
    $218 = ___cxa_find_matching_catch_2()|0;
    $219 = tempRet0;
    $$23460 = $219;$$261 = $218;
   } else {
    $214 = HEAP32[$5>>2]|0;
    __THREW__ = 0;
    invoke_viii(735,($211|0),($4|0),($214|0));
    $215 = __THREW__; __THREW__ = 0;
    $216 = $215&1;
    if ($216) {
     $$0 = 1;
    } else {
     __THREW__ = 0;
     invoke_viii(644,($211|0),(432|0),(7|0));
     $217 = __THREW__; __THREW__ = 0;
     $$0 = 0;
    }
    $220 = ___cxa_find_matching_catch_2()|0;
    $221 = tempRet0;
    __THREW__ = 0;
    invoke_vi(637,($4|0));
    $222 = __THREW__; __THREW__ = 0;
    $223 = $222&1;
    if ($223) {
     $224 = ___cxa_find_matching_catch_3(0|0)|0;
     $225 = tempRet0;
     ___clang_call_terminate($224);
     // unreachable;
    }
    if ($$0) {
     $$23460 = $221;$$261 = $220;
    } else {
     $$3 = $220;$$335 = $221;
     ___resumeException($$3|0);
     // unreachable;
    }
   }
   ___cxa_free_exception(($211|0));
   $$3 = $$261;$$335 = $$23460;
   ___resumeException($$3|0);
   // unreachable;
   break;
  }
  case 67: {
   STACKTOP = sp;return;
   break;
  }
  case 68: {
   ___resumeException($$3|0);
   // unreachable;
   break;
  }
 }
 if ((label|0) == 8) {
  $21 = ___cxa_find_matching_catch_2()|0;
  $22 = tempRet0;
  __THREW__ = 0;
  invoke_v(643);
  $23 = __THREW__; __THREW__ = 0;
  $24 = $23&1;
  if ($24) {
   $224 = ___cxa_find_matching_catch_3(0|0)|0;
   $225 = tempRet0;
   ___clang_call_terminate($224);
   // unreachable;
  } else {
   $$3 = $21;$$335 = $22;
   ___resumeException($$3|0);
   // unreachable;
  }
 }
 else if ((label|0) == 35) {
  $160 = ___cxa_find_matching_catch_3(488|0)|0;
  $161 = tempRet0;
  $lpad$phi$index = $160;$lpad$phi$index2 = $161;
 }
 $162 = (_llvm_eh_typeid_for((488|0))|0);
 $163 = ($lpad$phi$index2|0)==($162|0);
 if (!($163)) {
  $$3 = $lpad$phi$index;$$335 = $lpad$phi$index2;
  ___resumeException($$3|0);
  // unreachable;
 }
 $164 = (___cxa_begin_catch(($lpad$phi$index|0))|0);
 __THREW__ = 0;
 invoke_vii(635,($2|0),($6|0));
 $165 = __THREW__; __THREW__ = 0;
 $166 = $165&1;
 do {
  if ($166) {
   label = 41;
  } else {
   $167 = ((($164)) + 4|0);
   __THREW__ = 0;
   (invoke_iii(641,($167|0),($2|0))|0);
   $168 = __THREW__; __THREW__ = 0;
   $169 = $168&1;
   if ($169) {
    $177 = ___cxa_find_matching_catch_2()|0;
    $178 = tempRet0;
    __THREW__ = 0;
    invoke_vi(637,($2|0));
    $179 = __THREW__; __THREW__ = 0;
    $180 = $179&1;
    if (!($180)) {
     $$030 = $177;$$032 = $178;
     break;
    }
    $224 = ___cxa_find_matching_catch_3(0|0)|0;
    $225 = tempRet0;
    ___clang_call_terminate($224);
    // unreachable;
   } else {
    __THREW__ = 0;
    invoke_vi(637,($2|0));
    $170 = __THREW__; __THREW__ = 0;
    $171 = $170&1;
    if ($171) {
     label = 41;
     break;
    }
    $172 = HEAP32[$5>>2]|0;
    $173 = ((($164)) + 16|0);
    HEAP32[$173>>2] = $172;
    __THREW__ = 0;
    invoke_v(642);
    $174 = __THREW__; __THREW__ = 0;
    label = 41;
    break;
   }
  }
 } while(0);
 if ((label|0) == 41) {
  $175 = ___cxa_find_matching_catch_2()|0;
  $176 = tempRet0;
  $$030 = $175;$$032 = $176;
 }
 __THREW__ = 0;
 invoke_v(643);
 $181 = __THREW__; __THREW__ = 0;
 $182 = $181&1;
 if ($182) {
  $224 = ___cxa_find_matching_catch_3(0|0)|0;
  $225 = tempRet0;
  ___clang_call_terminate($224);
  // unreachable;
 } else {
  $$3 = $$030;$$335 = $$032;
  ___resumeException($$3|0);
  // unreachable;
 }
}
function __ZN10LineParser10HandleEquwEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$024 = 0, $$02750 = 0, $$028 = 0, $$03053 = 0, $$03252 = 0, $$131 = 0, $$133 = 0, $$23455 = 0, $$256 = 0, $$33558 = 0, $$359 = 0, $$4 = 0, $$436 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $1 = sp + 48|0;
 $2 = sp + 36|0;
 $3 = sp + 24|0;
 $4 = sp + 12|0;
 $5 = sp;
 $6 = ((($0)) + 16|0);
 $7 = ((($0)) + 4|0);
 $8 = ((($7)) + 11|0);
 $9 = ((($0)) + 8|0);
 while(1) {
  __THREW__ = 0;
  $10 = (invoke_iii(692,($0|0),0)|0);
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   $13 = ___cxa_find_matching_catch_3(368|0)|0;
   $14 = tempRet0;
   $15 = (_llvm_eh_typeid_for((368|0))|0);
   $16 = ($14|0)==($15|0);
   if (!($16)) {
    $$4 = $13;$$436 = $14;
    label = 70;
    break;
   }
   (___cxa_begin_catch(($13|0))|0);
   $17 = HEAP32[9088]|0;
   $18 = ($17|0)==(0|0);
   if ($18) {
    label = 5;
    break;
   }
   $20 = HEAP32[$17>>2]|0;
   $21 = ($20|0)==(0);
   if (!($21)) {
    label = 9;
    break;
   }
   ___cxa_end_catch();
   $$02750 = 0;
  } else {
   $27 = ($10|0)>(65535);
   if ($27) {
    label = 11;
    break;
   } else {
    $$02750 = $10;
   }
  }
  $41 = HEAP32[9088]|0;
  $42 = ($41|0)==(0|0);
  if ($42) {
   label = 19;
   break;
  }
  $43 = HEAP32[$41>>2]|0;
  $44 = ($43|0)==(1);
  if ($44) {
   $45 = ((($41)) + 8|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = ($46<<24>>24)==(0);
   if (!($47)) {
    $48 = HEAP32[9960]|0;
    $49 = ((($48)) + -12|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (39840 + ($50)|0);
    $52 = ((($51)) + 4|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = $53 | 16384;
    HEAP32[$52>>2] = $54;
    $55 = HEAP32[9960]|0;
    $56 = ((($55)) + -12|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = (39840 + ($57)|0);
    $59 = ((($58)) + 4|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = $60 & -75;
    $62 = $61 | 8;
    HEAP32[$59>>2] = $62;
    $63 = HEAP32[9960]|0;
    $64 = ((($63)) + -12|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (39840 + ($65)|0);
    $67 = ((($66)) + 76|0);
    HEAP32[$67>>2] = 48;
    (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(39840,27661,5)|0);
    $68 = HEAP32[9960]|0;
    $69 = ((($68)) + -12|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (39840 + ($70)|0);
    $72 = ((($71)) + 12|0);
    HEAP32[$72>>2] = 4;
    $73 = HEAP32[9090]|0;
    $74 = ($73|0)==(0|0);
    if ($74) {
     label = 23;
     break;
    }
    $75 = ((($73)) + 131072|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi(39840,$76)|0);
    (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($77,28267,3)|0);
    $78 = HEAP32[9960]|0;
    $79 = ((($78)) + -12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (39840 + ($80)|0);
    $82 = ((($81)) + 12|0);
    HEAP32[$82>>2] = 2;
    $83 = $$02750 & 255;
    $84 = (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi(39840,$83)|0);
    (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($84,28271,1)|0);
    $85 = HEAP32[9960]|0;
    $86 = ((($85)) + -12|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = (39840 + ($87)|0);
    $89 = ((($88)) + 12|0);
    HEAP32[$89>>2] = 2;
    $90 = $$02750 >>> 8;
    $91 = $90 & 255;
    (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi(39840,$91)|0);
    $92 = HEAP32[9960]|0;
    $93 = ((($92)) + -12|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = (39840 + ($94)|0);
    $96 = (__ZNKSt3__28ios_base6getlocEv($95)|0);
    HEAP32[$1>>2] = $96;
    __THREW__ = 0;
    $97 = (invoke_iii(659,($1|0),(40712|0))|0);
    $98 = __THREW__; __THREW__ = 0;
    $99 = $98&1;
    if ($99) {
     label = 26;
     break;
    }
    $100 = HEAP32[$97>>2]|0;
    $101 = ((($100)) + 28|0);
    $102 = HEAP32[$101>>2]|0;
    __THREW__ = 0;
    $103 = (invoke_iii($102|0,($97|0),10)|0);
    $104 = __THREW__; __THREW__ = 0;
    $105 = $104&1;
    if ($105) {
     label = 26;
     break;
    }
    __ZNSt3__26localeD2Ev($1);
    (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc(39840,$103)|0);
    (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv(39840)|0);
    $112 = HEAP32[9960]|0;
    $113 = ((($112)) + -12|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = (39840 + ($114)|0);
    $116 = ((($115)) + 4|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = $117 & -16385;
    HEAP32[$116>>2] = $118;
    $119 = HEAP32[9960]|0;
    $120 = ((($119)) + -12|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = (39840 + ($121)|0);
    $123 = ((($122)) + 4|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = $124 & -75;
    $126 = $125 | 2;
    HEAP32[$123>>2] = $126;
    $127 = HEAP32[9960]|0;
    $128 = ((($127)) + -12|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = (39840 + ($129)|0);
    $131 = ((($130)) + 76|0);
    HEAP32[$131>>2] = 32;
   }
  }
  $132 = HEAP32[9090]|0;
  $133 = ($132|0)==(0|0);
  if ($133) {
   label = 31;
   break;
  }
  $135 = $$02750 & 255;
  __THREW__ = 0;
  invoke_vii(737,($132|0),($135|0));
  $136 = __THREW__; __THREW__ = 0;
  $137 = $136&1;
  if ($137) {
   label = 36;
   break;
  }
  $138 = HEAP32[9090]|0;
  $139 = ($138|0)==(0|0);
  if ($139) {
   label = 34;
   break;
  }
  $141 = $$02750 >>> 8;
  $142 = $141 & 255;
  __THREW__ = 0;
  invoke_vii(737,($138|0),($142|0));
  $143 = __THREW__; __THREW__ = 0;
  $144 = $143&1;
  if ($144) {
   label = 36;
   break;
  }
  $170 = (__ZN10LineParser29AdvanceAndCheckEndOfStatementEv($0)|0);
  if (!($170)) {
   label = 69;
   break;
  }
  $171 = HEAP32[$6>>2]|0;
  $172 = HEAP8[$8>>0]|0;
  $173 = ($172<<24>>24)<(0);
  if ($173) {
   $174 = HEAP32[$9>>2]|0;
   $177 = $174;
  } else {
   $175 = $172&255;
   $177 = $175;
  }
  $176 = ($171>>>0)<($177>>>0);
  if (!($176)) {
   label = 54;
   break;
  }
  if ($173) {
   $178 = HEAP32[$7>>2]|0;
   $180 = $178;
  } else {
   $180 = $7;
  }
  $179 = (($180) + ($171)|0);
  $181 = HEAP8[$179>>0]|0;
  $182 = ($181<<24>>24)==(44);
  if (!($182)) {
   label = 54;
   break;
  }
  $196 = (($171) + 1)|0;
  HEAP32[$6>>2] = $196;
  $197 = (__ZN10LineParser29AdvanceAndCheckEndOfStatementEv($0)|0);
  if (!($197)) {
   label = 62;
   break;
  }
 }
 switch (label|0) {
  case 5: {
   __THREW__ = 0;
   invoke_viiii(680,(27040|0),(27060|0),38,(27075|0));
   $19 = __THREW__; __THREW__ = 0;
   label = 8;
   break;
  }
  case 9: {
   __THREW__ = 0;
   invoke_v(642);
   $26 = __THREW__; __THREW__ = 0;
   label = 8;
   break;
  }
  case 11: {
   $28 = (___cxa_allocate_exception(36)|0);
   __THREW__ = 0;
   invoke_vii(635,($2|0),($7|0));
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   if ($30) {
    $35 = ___cxa_find_matching_catch_2()|0;
    $36 = tempRet0;
    $$03053 = $35;$$03252 = $36;
   } else {
    $31 = HEAP32[$6>>2]|0;
    __THREW__ = 0;
    invoke_viii(738,($28|0),($2|0),($31|0));
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     $$028 = 1;
    } else {
     __THREW__ = 0;
     invoke_viii(644,($28|0),(288|0),(7|0));
     $34 = __THREW__; __THREW__ = 0;
     $$028 = 0;
    }
    $37 = ___cxa_find_matching_catch_2()|0;
    $38 = tempRet0;
    __THREW__ = 0;
    invoke_vi(637,($2|0));
    $39 = __THREW__; __THREW__ = 0;
    $40 = $39&1;
    if ($40) {
     $211 = ___cxa_find_matching_catch_3(0|0)|0;
     $212 = tempRet0;
     ___clang_call_terminate($211);
     // unreachable;
    }
    if ($$028) {
     $$03053 = $37;$$03252 = $38;
    } else {
     $$4 = $37;$$436 = $38;
     ___resumeException($$4|0);
     // unreachable;
    }
   }
   ___cxa_free_exception(($28|0));
   $$4 = $$03053;$$436 = $$03252;
   ___resumeException($$4|0);
   // unreachable;
   break;
  }
  case 19: {
   ___assert_fail((27040|0),(27060|0),38,(27075|0));
   // unreachable;
   break;
  }
  case 23: {
   ___assert_fail((27040|0),(27084|0),36,(27075|0));
   // unreachable;
   break;
  }
  case 26: {
   $106 = ___cxa_find_matching_catch_2()|0;
   $107 = tempRet0;
   __THREW__ = 0;
   invoke_vi(660,($1|0));
   $108 = __THREW__; __THREW__ = 0;
   $109 = $108&1;
   if ($109) {
    $110 = ___cxa_find_matching_catch_3(0|0)|0;
    $111 = tempRet0;
    ___clang_call_terminate($110);
    // unreachable;
   } else {
    ___resumeException($106|0);
    // unreachable;
   }
   break;
  }
  case 31: {
   __THREW__ = 0;
   invoke_viiii(680,(27040|0),(27084|0),36,(27075|0));
   $134 = __THREW__; __THREW__ = 0;
   label = 37;
   break;
  }
  case 34: {
   __THREW__ = 0;
   invoke_viiii(680,(27040|0),(27084|0),36,(27075|0));
   $140 = __THREW__; __THREW__ = 0;
   label = 37;
   break;
  }
  case 36: {
   $145 = ___cxa_find_matching_catch_3(488|0)|0;
   $146 = tempRet0;
   $lpad$phi$index = $145;$lpad$phi$index2 = $146;
   break;
  }
  case 54: {
   $183 = (___cxa_allocate_exception(36)|0);
   __THREW__ = 0;
   invoke_vii(635,($4|0),($7|0));
   $184 = __THREW__; __THREW__ = 0;
   $185 = $184&1;
   if ($185) {
    $190 = ___cxa_find_matching_catch_2()|0;
    $191 = tempRet0;
    $$23455 = $191;$$256 = $190;
   } else {
    $186 = HEAP32[$6>>2]|0;
    __THREW__ = 0;
    invoke_viii(676,($183|0),($4|0),($186|0));
    $187 = __THREW__; __THREW__ = 0;
    $188 = $187&1;
    if ($188) {
     $$024 = 1;
    } else {
     __THREW__ = 0;
     invoke_viii(644,($183|0),(352|0),(7|0));
     $189 = __THREW__; __THREW__ = 0;
     $$024 = 0;
    }
    $192 = ___cxa_find_matching_catch_2()|0;
    $193 = tempRet0;
    __THREW__ = 0;
    invoke_vi(637,($4|0));
    $194 = __THREW__; __THREW__ = 0;
    $195 = $194&1;
    if ($195) {
     $211 = ___cxa_find_matching_catch_3(0|0)|0;
     $212 = tempRet0;
     ___clang_call_terminate($211);
     // unreachable;
    }
    if ($$024) {
     $$23455 = $193;$$256 = $192;
    } else {
     $$4 = $192;$$436 = $193;
     ___resumeException($$4|0);
     // unreachable;
    }
   }
   ___cxa_free_exception(($183|0));
   $$4 = $$256;$$436 = $$23455;
   ___resumeException($$4|0);
   // unreachable;
   break;
  }
  case 62: {
   $198 = (___cxa_allocate_exception(36)|0);
   __THREW__ = 0;
   invoke_vii(635,($5|0),($7|0));
   $199 = __THREW__; __THREW__ = 0;
   $200 = $199&1;
   if ($200) {
    $205 = ___cxa_find_matching_catch_2()|0;
    $206 = tempRet0;
    $$33558 = $206;$$359 = $205;
   } else {
    $201 = HEAP32[$6>>2]|0;
    __THREW__ = 0;
    invoke_viii(735,($198|0),($5|0),($201|0));
    $202 = __THREW__; __THREW__ = 0;
    $203 = $202&1;
    if ($203) {
     $$0 = 1;
    } else {
     __THREW__ = 0;
     invoke_viii(644,($198|0),(432|0),(7|0));
     $204 = __THREW__; __THREW__ = 0;
     $$0 = 0;
    }
    $207 = ___cxa_find_matching_catch_2()|0;
    $208 = tempRet0;
    __THREW__ = 0;
    invoke_vi(637,($5|0));
    $209 = __THREW__; __THREW__ = 0;
    $210 = $209&1;
    if ($210) {
     $211 = ___cxa_find_matching_catch_3(0|0)|0;
     $212 = tempRet0;
     ___clang_call_terminate($211);
     // unreachable;
    }
    if ($$0) {
     $$33558 = $208;$$359 = $207;
    } else {
     $$4 = $207;$$436 = $208;
     ___resumeException($$4|0);
     // unreachable;
    }
   }
   ___cxa_free_exception(($198|0));
   $$4 = $$359;$$436 = $$33558;
   ___resumeException($$4|0);
   // unreachable;
   break;
  }
  case 69: {
   STACKTOP = sp;return;
   break;
  }
  case 70: {
   ___resumeException($$4|0);
   // unreachable;
   break;
  }
 }
 if ((label|0) == 8) {
  $22 = ___cxa_find_matching_catch_2()|0;
  $23 = tempRet0;
  __THREW__ = 0;
  invoke_v(643);
  $24 = __THREW__; __THREW__ = 0;
  $25 = $24&1;
  if ($25) {
   $211 = ___cxa_find_matching_catch_3(0|0)|0;
   $212 = tempRet0;
   ___clang_call_terminate($211);
   // unreachable;
  } else {
   $$4 = $22;$$436 = $23;
   ___resumeException($$4|0);
   // unreachable;
  }
 }
 else if ((label|0) == 37) {
  $147 = ___cxa_find_matching_catch_3(488|0)|0;
  $148 = tempRet0;
  $lpad$phi$index = $147;$lpad$phi$index2 = $148;
 }
 $149 = (_llvm_eh_typeid_for((488|0))|0);
 $150 = ($lpad$phi$index2|0)==($149|0);
 if (!($150)) {
  $$4 = $lpad$phi$index;$$436 = $lpad$phi$index2;
  ___resumeException($$4|0);
  // unreachable;
 }
 $151 = (___cxa_begin_catch(($lpad$phi$index|0))|0);
 __THREW__ = 0;
 invoke_vii(635,($3|0),($7|0));
 $152 = __THREW__; __THREW__ = 0;
 $153 = $152&1;
 do {
  if ($153) {
   label = 43;
  } else {
   $154 = ((($151)) + 4|0);
   __THREW__ = 0;
   (invoke_iii(641,($154|0),($3|0))|0);
   $155 = __THREW__; __THREW__ = 0;
   $156 = $155&1;
   if ($156) {
    $164 = ___cxa_find_matching_catch_2()|0;
    $165 = tempRet0;
    __THREW__ = 0;
    invoke_vi(637,($3|0));
    $166 = __THREW__; __THREW__ = 0;
    $167 = $166&1;
    if (!($167)) {
     $$131 = $164;$$133 = $165;
     break;
    }
    $211 = ___cxa_find_matching_catch_3(0|0)|0;
    $212 = tempRet0;
    ___clang_call_terminate($211);
    // unreachable;
   } else {
    __THREW__ = 0;
    invoke_vi(637,($3|0));
    $157 = __THREW__; __THREW__ = 0;
    $158 = $157&1;
    if ($158) {
     label = 43;
     break;
    }
    $159 = HEAP32[$6>>2]|0;
    $160 = ((($151)) + 16|0);
    HEAP32[$160>>2] = $159;
    __THREW__ = 0;
    invoke_v(642);
    $161 = __THREW__; __THREW__ = 0;
    label = 43;
    break;
   }
  }
 } while(0);
 if ((label|0) == 43) {
  $162 = ___cxa_find_matching_catch_2()|0;
  $163 = tempRet0;
  $$131 = $162;$$133 = $163;
 }
 __THREW__ = 0;
 invoke_v(643);
 $168 = __THREW__; __THREW__ = 0;
 $169 = $168&1;
 if ($169) {
  $211 = ___cxa_find_matching_catch_3(0|0)|0;
  $212 = tempRet0;
  ___clang_call_terminate($211);
  // unreachable;
 } else {
  $$4 = $$131;$$436 = $$133;
  ___resumeException($$4|0);
  // unreachable;
 }
}
function __ZN10LineParser10HandleSaveEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i = 0, $$0$i196 = 0, $$0$i200 = 0, $$0116225 = 0, $$0118 = 0, $$02$i = 0, $$03$i = 0, $$03$i199 = 0, $$068 = 0, $$070 = 0, $$070$lpad$bodyZZ2D = 0, $$072 = 0, $$072$lpad$bodyZZ2D = 0, $$074 = 0, $$076 = 0, $$078 = 0, $$080 = 0, $$082 = 0, $$084 = 0;
 var $$086 = 0, $$088 = 0, $$090 = 0, $$092 = 0, $$094205 = 0, $$096204 = 0, $$10106230 = 0, $$10231 = 0, $$11107233 = 0, $$1117 = 0, $$11234 = 0, $$12108236 = 0, $$12237 = 0, $$13109239 = 0, $$13240 = 0, $$14110242 = 0, $$14243 = 0, $$15111245 = 0, $$15246 = 0, $$16 = 0;
 var $$16112 = 0, $$17 = 0, $$17113 = 0, $$18 = 0, $$18114 = 0, $$19 = 0, $$19115 = 0, $$195208 = 0, $$197207 = 0, $$2 = 0, $$298 = 0, $$3211 = 0, $$399210 = 0, $$4100213 = 0, $$4214 = 0, $$6102216 = 0, $$6217 = 0, $$7103219 = 0, $$7220 = 0, $$8104222 = 0;
 var $$8223 = 0, $$9105227 = 0, $$9228 = 0, $$pre = 0, $$pre247 = 0, $$pre248 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $eh$lpad$body$i$indexZ2D = 0, $eh$lpad$body$i130$index24Z2D = 0, $eh$lpad$body$i130$indexZ2D = 0, $eh$lpad$body$indexZ2D = 0, $eh$lpad$body134$index29Z2D = 0, $eh$lpad$body134$indexZ2D = 0, $eh$lpad$body151$index9Z2D = 0, $eh$lpad$body151$indexZ2D = 0, $eh$lpad$body157$index14Z2D = 0, $eh$lpad$body157$indexZ2D = 0, $eh$lpad$body175$index3Z2D = 0, $eh$lpad$body175$indexZ2D = 0, $eh$lpad$body194$index19Z2D = 0, $eh$lpad$body194$indexZ2D = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(416|0);
 $1 = sp + 400|0;
 $2 = sp + 388|0;
 $3 = sp + 376|0;
 $4 = sp + 364|0;
 $5 = sp + 352|0;
 $6 = sp + 340|0;
 $7 = sp + 328|0;
 $8 = sp + 316|0;
 $9 = sp + 304|0;
 $10 = sp + 292|0;
 $11 = sp + 280|0;
 $12 = sp + 268|0;
 $13 = sp + 256|0;
 $14 = sp + 244|0;
 $15 = sp + 232|0;
 $16 = sp + 220|0;
 $17 = sp + 208|0;
 $18 = sp + 24|0;
 $19 = sp + 12|0;
 $20 = sp;
 $21 = ((($0)) + 16|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (__ZN10LineParser29AdvanceAndCheckEndOfStatementEv($0)|0);
 L1: do {
  if ($23) {
   ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
   $38 = ((($0)) + 4|0);
   $39 = HEAP32[$21>>2]|0;
   $40 = ((($38)) + 11|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = ($41<<24>>24)<(0);
   if ($42) {
    $43 = HEAP32[$38>>2]|0;
    $45 = $43;
   } else {
    $45 = $38;
   }
   $44 = (($45) + ($39)|0);
   $46 = HEAP8[$44>>0]|0;
   $47 = ($46<<24>>24)==(34);
   L7: do {
    if ($47) {
     $48 = (($39) + 1)|0;
     $49 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcj($38,34,$48)|0);
     $50 = ($49|0)==(-1);
     if ($50) {
      $51 = (___cxa_allocate_exception(36)|0);
      __THREW__ = 0;
      invoke_vii(635,($6|0),($38|0));
      $52 = __THREW__; __THREW__ = 0;
      $53 = $52&1;
      if ($53) {
       $65 = ___cxa_find_matching_catch_2()|0;
       $66 = tempRet0;
       $$195208 = $66;$$197207 = $65;
      } else {
       $54 = HEAP8[$40>>0]|0;
       $55 = ($54<<24>>24)<(0);
       if ($55) {
        $56 = ((($0)) + 8|0);
        $57 = HEAP32[$56>>2]|0;
        $59 = $57;
       } else {
        $58 = $54&255;
        $59 = $58;
       }
       __THREW__ = 0;
       invoke_viii(732,($51|0),($6|0),($59|0));
       $60 = __THREW__; __THREW__ = 0;
       $61 = $60&1;
       if ($61) {
        $$090 = 1;
       } else {
        __THREW__ = 0;
        invoke_viii(644,($51|0),(1128|0),(7|0));
        $62 = __THREW__; __THREW__ = 0;
        $$090 = 0;
       }
       $67 = ___cxa_find_matching_catch_2()|0;
       $68 = tempRet0;
       __THREW__ = 0;
       invoke_vi(637,($6|0));
       $69 = __THREW__; __THREW__ = 0;
       $70 = $69&1;
       if ($70) {
        break L1;
       }
       if ($$090) {
        $$195208 = $68;$$197207 = $67;
       } else {
        $$18 = $68;$$18114 = $67;
        break;
       }
      }
      ___cxa_free_exception(($51|0));
      $$18 = $$195208;$$18114 = $$197207;
      break;
     }
     $71 = HEAP32[$21>>2]|0;
     $72 = (($71) + 1)|0;
     $73 = (($49) + -1)|0;
     $74 = (($73) - ($71))|0;
     __THREW__ = 0;
     invoke_viiiii(740,($7|0),($38|0),($72|0),($74|0),($38|0));
     $75 = __THREW__; __THREW__ = 0;
     $76 = $75&1;
     do {
      if ($76) {
       label = 34;
      } else {
       __THREW__ = 0;
       (invoke_iii(641,($5|0),($7|0))|0);
       $77 = __THREW__; __THREW__ = 0;
       $78 = $77&1;
       if ($78) {
        $94 = ___cxa_find_matching_catch_2()|0;
        $95 = tempRet0;
        __THREW__ = 0;
        invoke_vi(637,($7|0));
        $96 = __THREW__; __THREW__ = 0;
        $97 = $96&1;
        if ($97) {
         break L1;
        } else {
         $$2 = $95;$$298 = $94;
         break;
        }
       }
       __THREW__ = 0;
       invoke_vi(637,($7|0));
       $79 = __THREW__; __THREW__ = 0;
       $80 = $79&1;
       if ($80) {
        label = 34;
       } else {
        $81 = (($49) + 1)|0;
        HEAP32[$21>>2] = $81;
        __THREW__ = 0;
        $82 = (invoke_ii(741,($0|0))|0);
        $83 = __THREW__; __THREW__ = 0;
        $84 = $83&1;
        if ($84) {
         $98 = ___cxa_find_matching_catch_2()|0;
         $99 = tempRet0;
         $$18 = $99;$$18114 = $98;
         break L7;
        }
        if (!($82)) {
         $85 = (___cxa_allocate_exception(36)|0);
         __THREW__ = 0;
         invoke_vii(635,($8|0),($38|0));
         $86 = __THREW__; __THREW__ = 0;
         $87 = $86&1;
         if ($87) {
          $100 = ___cxa_find_matching_catch_2()|0;
          $101 = tempRet0;
          $$3211 = $101;$$399210 = $100;
         } else {
          $88 = HEAP32[$21>>2]|0;
          __THREW__ = 0;
          invoke_viii(735,($85|0),($8|0),($88|0));
          $89 = __THREW__; __THREW__ = 0;
          $90 = $89&1;
          if ($90) {
           $$088 = 1;
          } else {
           __THREW__ = 0;
           invoke_viii(644,($85|0),(432|0),(7|0));
           $91 = __THREW__; __THREW__ = 0;
           $$088 = 0;
          }
          $102 = ___cxa_find_matching_catch_2()|0;
          $103 = tempRet0;
          __THREW__ = 0;
          invoke_vi(637,($8|0));
          $104 = __THREW__; __THREW__ = 0;
          $105 = $104&1;
          if ($105) {
           break L1;
          }
          if ($$088) {
           $$3211 = $103;$$399210 = $102;
          } else {
           $$18 = $103;$$18114 = $102;
           break L7;
          }
         }
         ___cxa_free_exception(($85|0));
         $$18 = $$3211;$$18114 = $$399210;
         break L7;
        }
        $106 = HEAP32[$21>>2]|0;
        $107 = HEAP8[$40>>0]|0;
        $108 = ($107<<24>>24)<(0);
        if ($108) {
         $109 = HEAP32[$38>>2]|0;
         $111 = $109;
        } else {
         $111 = $38;
        }
        $110 = (($111) + ($106)|0);
        $112 = HEAP8[$110>>0]|0;
        $113 = ($112<<24>>24)==(44);
        if ($113) {
         $127 = (($106) + 1)|0;
         HEAP32[$21>>2] = $127;
         label = 54;
         break L7;
        }
        $114 = (___cxa_allocate_exception(36)|0);
        __THREW__ = 0;
        invoke_vii(635,($9|0),($38|0));
        $115 = __THREW__; __THREW__ = 0;
        $116 = $115&1;
        if ($116) {
         $121 = ___cxa_find_matching_catch_2()|0;
         $122 = tempRet0;
         $$4100213 = $121;$$4214 = $122;
        } else {
         $117 = HEAP32[$21>>2]|0;
         __THREW__ = 0;
         invoke_viii(676,($114|0),($9|0),($117|0));
         $118 = __THREW__; __THREW__ = 0;
         $119 = $118&1;
         if ($119) {
          $$086 = 1;
         } else {
          __THREW__ = 0;
          invoke_viii(644,($114|0),(352|0),(7|0));
          $120 = __THREW__; __THREW__ = 0;
          $$086 = 0;
         }
         $123 = ___cxa_find_matching_catch_2()|0;
         $124 = tempRet0;
         __THREW__ = 0;
         invoke_vi(637,($9|0));
         $125 = __THREW__; __THREW__ = 0;
         $126 = $125&1;
         if ($126) {
          break L1;
         }
         if ($$086) {
          $$4100213 = $123;$$4214 = $124;
         } else {
          $$18 = $124;$$18114 = $123;
          break L7;
         }
        }
        ___cxa_free_exception(($114|0));
        $$18 = $$4214;$$18114 = $$4100213;
        break L7;
       }
      }
     } while(0);
     if ((label|0) == 34) {
      $92 = ___cxa_find_matching_catch_2()|0;
      $93 = tempRet0;
      $$2 = $93;$$298 = $92;
     }
     $$18 = $$2;$$18114 = $$298;
    } else {
     label = 54;
    }
   } while(0);
   L62: do {
    if ((label|0) == 54) {
     __THREW__ = 0;
     $128 = (invoke_iii(692,($0|0),0)|0);
     $129 = __THREW__; __THREW__ = 0;
     $130 = $129&1;
     L64: do {
      if ($130) {
       label = 20;
      } else {
       $131 = ($128>>>0)>(65535);
       if ($131) {
        $132 = (___cxa_allocate_exception(36)|0);
        __THREW__ = 0;
        invoke_vii(635,($10|0),($38|0));
        $133 = __THREW__; __THREW__ = 0;
        $134 = $133&1;
        if ($134) {
         $139 = ___cxa_find_matching_catch_2()|0;
         $140 = tempRet0;
         $$6102216 = $139;$$6217 = $140;
        } else {
         $135 = HEAP32[$21>>2]|0;
         __THREW__ = 0;
         invoke_viii(733,($132|0),($10|0),($135|0));
         $136 = __THREW__; __THREW__ = 0;
         $137 = $136&1;
         if ($137) {
          $$084 = 1;
         } else {
          __THREW__ = 0;
          invoke_viii(644,($132|0),(1112|0),(7|0));
          $138 = __THREW__; __THREW__ = 0;
          $$084 = 0;
         }
         $141 = ___cxa_find_matching_catch_2()|0;
         $142 = tempRet0;
         __THREW__ = 0;
         invoke_vi(637,($10|0));
         $143 = __THREW__; __THREW__ = 0;
         $144 = $143&1;
         if ($144) {
          break L1;
         }
         if ($$084) {
          $$6102216 = $141;$$6217 = $142;
         } else {
          $$18 = $142;$$18114 = $141;
          break L62;
         }
        }
        ___cxa_free_exception(($132|0));
        $$18 = $$6217;$$18114 = $$6102216;
        break L62;
       }
       $145 = HEAP32[$21>>2]|0;
       $146 = HEAP8[$40>>0]|0;
       $147 = ($146<<24>>24)<(0);
       if ($147) {
        $148 = ((($0)) + 8|0);
        $149 = HEAP32[$148>>2]|0;
        $152 = $149;
       } else {
        $150 = $146&255;
        $152 = $150;
       }
       $151 = ($145>>>0)<($152>>>0);
       if ($151) {
        if ($147) {
         $153 = HEAP32[$38>>2]|0;
         $155 = $153;
        } else {
         $155 = $38;
        }
        $154 = (($155) + ($145)|0);
        $156 = HEAP8[$154>>0]|0;
        $157 = ($156<<24>>24)==(44);
        if ($157) {
         $171 = (($145) + 1)|0;
         HEAP32[$21>>2] = $171;
         __THREW__ = 0;
         $172 = (invoke_iii(692,($0|0),0)|0);
         $173 = __THREW__; __THREW__ = 0;
         $174 = $173&1;
         if ($174) {
          label = 20;
          break;
         }
         $175 = ($172>>>0)>(65536);
         if ($175) {
          $176 = (___cxa_allocate_exception(36)|0);
          __THREW__ = 0;
          invoke_vii(635,($12|0),($38|0));
          $177 = __THREW__; __THREW__ = 0;
          $178 = $177&1;
          if ($178) {
           $183 = ___cxa_find_matching_catch_2()|0;
           $184 = tempRet0;
           $$8104222 = $183;$$8223 = $184;
          } else {
           $179 = HEAP32[$21>>2]|0;
           __THREW__ = 0;
           invoke_viii(733,($176|0),($12|0),($179|0));
           $180 = __THREW__; __THREW__ = 0;
           $181 = $180&1;
           if ($181) {
            $$080 = 1;
           } else {
            __THREW__ = 0;
            invoke_viii(644,($176|0),(1112|0),(7|0));
            $182 = __THREW__; __THREW__ = 0;
            $$080 = 0;
           }
           $185 = ___cxa_find_matching_catch_2()|0;
           $186 = tempRet0;
           __THREW__ = 0;
           invoke_vi(637,($12|0));
           $187 = __THREW__; __THREW__ = 0;
           $188 = $187&1;
           if ($188) {
            break L1;
           }
           if ($$080) {
            $$8104222 = $185;$$8223 = $186;
           } else {
            $$18 = $186;$$18114 = $185;
            break L62;
           }
          }
          ___cxa_free_exception(($176|0));
          $$18 = $$8223;$$18114 = $$8104222;
          break L62;
         }
         $189 = HEAP32[$21>>2]|0;
         $190 = HEAP8[$40>>0]|0;
         $191 = ($190<<24>>24)<(0);
         if ($191) {
          $192 = ((($0)) + 8|0);
          $193 = HEAP32[$192>>2]|0;
          $196 = $193;
         } else {
          $194 = $190&255;
          $196 = $194;
         }
         $195 = ($189>>>0)<($196>>>0);
         do {
          if ($195) {
           if ($191) {
            $197 = HEAP32[$38>>2]|0;
            $199 = $197;
           } else {
            $199 = $38;
           }
           $198 = (($199) + ($189)|0);
           $200 = HEAP8[$198>>0]|0;
           $201 = ($200<<24>>24)==(44);
           if ($201) {
            $202 = (($189) + 1)|0;
            HEAP32[$21>>2] = $202;
            __THREW__ = 0;
            $203 = (invoke_iii(692,($0|0),0)|0);
            $204 = __THREW__; __THREW__ = 0;
            $205 = $204&1;
            L111: do {
             if ($205) {
              $206 = ___cxa_find_matching_catch_3(368|0)|0;
              $207 = tempRet0;
              $208 = (_llvm_eh_typeid_for((368|0))|0);
              $209 = ($207|0)==($208|0);
              if (!($209)) {
               $$18 = $207;$$18114 = $206;
               break L62;
              }
              (___cxa_begin_catch(($206|0))|0);
              $210 = HEAP32[9088]|0;
              $211 = ($210|0)==(0|0);
              do {
               if ($211) {
                __THREW__ = 0;
                invoke_viiii(680,(27040|0),(27060|0),38,(27075|0));
                $212 = __THREW__; __THREW__ = 0;
               } else {
                $213 = HEAP32[$210>>2]|0;
                $214 = ($213|0)==(1);
                if ($214) {
                 __THREW__ = 0;
                 invoke_v(642);
                 $215 = __THREW__; __THREW__ = 0;
                 break;
                } else {
                 __THREW__ = 0;
                 invoke_v(643);
                 $220 = __THREW__; __THREW__ = 0;
                 $221 = $220&1;
                 if ($221) {
                  label = 20;
                  break L64;
                 } else {
                  $$0116225 = $128;
                  break L111;
                 }
                }
               }
              } while(0);
              $216 = ___cxa_find_matching_catch_2()|0;
              $217 = tempRet0;
              __THREW__ = 0;
              invoke_v(643);
              $218 = __THREW__; __THREW__ = 0;
              $219 = $218&1;
              if ($219) {
               break L1;
              } else {
               $$18 = $217;$$18114 = $216;
               break L62;
              }
             } else {
              $222 = ($203>>>0)>(65535);
              if (!($222)) {
               $$0116225 = $203;
               break;
              }
              $223 = (___cxa_allocate_exception(36)|0);
              __THREW__ = 0;
              invoke_vii(635,($13|0),($38|0));
              $224 = __THREW__; __THREW__ = 0;
              $225 = $224&1;
              if ($225) {
               $230 = ___cxa_find_matching_catch_2()|0;
               $231 = tempRet0;
               $$9105227 = $230;$$9228 = $231;
              } else {
               $226 = HEAP32[$21>>2]|0;
               __THREW__ = 0;
               invoke_viii(733,($223|0),($13|0),($226|0));
               $227 = __THREW__; __THREW__ = 0;
               $228 = $227&1;
               if ($228) {
                $$078 = 1;
               } else {
                __THREW__ = 0;
                invoke_viii(644,($223|0),(1112|0),(7|0));
                $229 = __THREW__; __THREW__ = 0;
                $$078 = 0;
               }
               $232 = ___cxa_find_matching_catch_2()|0;
               $233 = tempRet0;
               __THREW__ = 0;
               invoke_vi(637,($13|0));
               $234 = __THREW__; __THREW__ = 0;
               $235 = $234&1;
               if ($235) {
                break L1;
               }
               if ($$078) {
                $$9105227 = $232;$$9228 = $233;
               } else {
                $$18 = $233;$$18114 = $232;
                break L62;
               }
              }
              ___cxa_free_exception(($223|0));
              $$18 = $$9228;$$18114 = $$9105227;
              break L62;
             }
            } while(0);
            $236 = HEAP32[$21>>2]|0;
            $237 = HEAP8[$40>>0]|0;
            $238 = ($237<<24>>24)<(0);
            if ($238) {
             $239 = ((($0)) + 8|0);
             $240 = HEAP32[$239>>2]|0;
             $243 = $240;
            } else {
             $241 = $237&255;
             $243 = $241;
            }
            $242 = ($236>>>0)<($243>>>0);
            if (!($242)) {
             $$0118 = $128;$$1117 = $$0116225;$267 = $237;$272 = $236;
             break;
            }
            if ($238) {
             $244 = HEAP32[$38>>2]|0;
             $246 = $244;
            } else {
             $246 = $38;
            }
            $245 = (($246) + ($236)|0);
            $247 = HEAP8[$245>>0]|0;
            $248 = ($247<<24>>24)==(44);
            if (!($248)) {
             $$0118 = $128;$$1117 = $$0116225;$267 = $237;$272 = $236;
             break;
            }
            $249 = (($236) + 1)|0;
            HEAP32[$21>>2] = $249;
            __THREW__ = 0;
            $250 = (invoke_iii(692,($0|0),0)|0);
            $251 = __THREW__; __THREW__ = 0;
            $252 = $251&1;
            if ($252) {
             label = 20;
             break L64;
            }
            $253 = ($250>>>0)>(65535);
            if (!($253)) {
             $$pre = HEAP32[$21>>2]|0;
             $$pre247 = HEAP8[$40>>0]|0;
             $$0118 = $250;$$1117 = $$0116225;$267 = $$pre247;$272 = $$pre;
             break;
            }
            $254 = (___cxa_allocate_exception(36)|0);
            __THREW__ = 0;
            invoke_vii(635,($14|0),($38|0));
            $255 = __THREW__; __THREW__ = 0;
            $256 = $255&1;
            if ($256) {
             $261 = ___cxa_find_matching_catch_2()|0;
             $262 = tempRet0;
             $$10106230 = $261;$$10231 = $262;
            } else {
             $257 = HEAP32[$21>>2]|0;
             __THREW__ = 0;
             invoke_viii(733,($254|0),($14|0),($257|0));
             $258 = __THREW__; __THREW__ = 0;
             $259 = $258&1;
             if ($259) {
              $$076 = 1;
             } else {
              __THREW__ = 0;
              invoke_viii(644,($254|0),(1112|0),(7|0));
              $260 = __THREW__; __THREW__ = 0;
              $$076 = 0;
             }
             $263 = ___cxa_find_matching_catch_2()|0;
             $264 = tempRet0;
             __THREW__ = 0;
             invoke_vi(637,($14|0));
             $265 = __THREW__; __THREW__ = 0;
             $266 = $265&1;
             if ($266) {
              break L1;
             }
             if ($$076) {
              $$10106230 = $263;$$10231 = $264;
             } else {
              $$18 = $264;$$18114 = $263;
              break L62;
             }
            }
            ___cxa_free_exception(($254|0));
            $$18 = $$10231;$$18114 = $$10106230;
            break L62;
           } else {
            $$0118 = $128;$$1117 = $128;$267 = $190;$272 = $189;
           }
          } else {
           $$0118 = $128;$$1117 = $128;$267 = $190;$272 = $189;
          }
         } while(0);
         $268 = ($267<<24>>24)<(0);
         if ($268) {
          $269 = ((($0)) + 8|0);
          $270 = HEAP32[$269>>2]|0;
          $274 = $270;
         } else {
          $271 = $267&255;
          $274 = $271;
         }
         $273 = ($272>>>0)<($274>>>0);
         do {
          if ($273) {
           if ($268) {
            $275 = HEAP32[$38>>2]|0;
            $277 = $275;
           } else {
            $277 = $38;
           }
           $276 = (($277) + ($272)|0);
           $278 = HEAP8[$276>>0]|0;
           $279 = ($278<<24>>24)==(44);
           if (!($279)) {
            break;
           }
           $280 = (___cxa_allocate_exception(36)|0);
           __THREW__ = 0;
           invoke_vii(635,($15|0),($38|0));
           $281 = __THREW__; __THREW__ = 0;
           $282 = $281&1;
           if ($282) {
            $287 = ___cxa_find_matching_catch_2()|0;
            $288 = tempRet0;
            $$11107233 = $287;$$11234 = $288;
           } else {
            $283 = HEAP32[$21>>2]|0;
            __THREW__ = 0;
            invoke_viii(734,($280|0),($15|0),($283|0));
            $284 = __THREW__; __THREW__ = 0;
            $285 = $284&1;
            if ($285) {
             $$074 = 1;
            } else {
             __THREW__ = 0;
             invoke_viii(644,($280|0),(568|0),(7|0));
             $286 = __THREW__; __THREW__ = 0;
             $$074 = 0;
            }
            $289 = ___cxa_find_matching_catch_2()|0;
            $290 = tempRet0;
            __THREW__ = 0;
            invoke_vi(637,($15|0));
            $291 = __THREW__; __THREW__ = 0;
            $292 = $291&1;
            if ($292) {
             break L1;
            }
            if ($$074) {
             $$11107233 = $289;$$11234 = $290;
            } else {
             $$18 = $290;$$18114 = $289;
             break L62;
            }
           }
           ___cxa_free_exception(($280|0));
           $$18 = $$11234;$$18114 = $$11107233;
           break L62;
          }
         } while(0);
         $293 = ((($5)) + 11|0);
         $294 = HEAP8[$293>>0]|0;
         $295 = ($294<<24>>24)<(0);
         $296 = ((($5)) + 4|0);
         $297 = HEAP32[$296>>2]|0;
         $298 = $294&255;
         $299 = $295 ? $297 : $298;
         $300 = ($299|0)==(0);
         do {
          if ($300) {
           __THREW__ = 0;
           $301 = (invoke_iiiiii(640,($5|0),0,-1,(44984|0),0)|0);
           $302 = __THREW__; __THREW__ = 0;
           $303 = $302&1;
           if ($303) {
            $304 = ___cxa_find_matching_catch_2()|0;
            $305 = tempRet0;
            ___cxa_call_unexpected(($304|0));
            // unreachable;
           }
           $306 = ($301|0)==(0);
           if (!($306)) {
            break;
           }
           $307 = HEAP32[9088]|0;
           $308 = ($307|0)==(0|0);
           if ($308) {
            __THREW__ = 0;
            invoke_viiii(680,(27040|0),(27060|0),38,(27075|0));
            $309 = __THREW__; __THREW__ = 0;
            label = 20;
            break L64;
           }
           $310 = ((($307)) + 24|0);
           $311 = HEAP32[$310>>2]|0;
           $312 = ($311|0)==(0|0);
           if ($312) {
            $358 = (___cxa_allocate_exception(36)|0);
            __THREW__ = 0;
            invoke_vii(635,($17|0),($38|0));
            $359 = __THREW__; __THREW__ = 0;
            $360 = $359&1;
            if ($360) {
             $386 = ___cxa_find_matching_catch_2()|0;
             $387 = tempRet0;
             $$13109239 = $386;$$13240 = $387;
            } else {
             __THREW__ = 0;
             invoke_vii(635,($2|0),($17|0));
             $361 = __THREW__; __THREW__ = 0;
             $362 = $361&1;
             L189: do {
              if ($362) {
               $$070 = 1;
               label = 185;
              } else {
               HEAP32[$358>>2] = (4652);
               $363 = ((($358)) + 4|0);
               __THREW__ = 0;
               invoke_vii(635,($363|0),($2|0));
               $364 = __THREW__; __THREW__ = 0;
               $365 = $364&1;
               do {
                if ($365) {
                 $370 = ___cxa_find_matching_catch_2()|0;
                 $371 = tempRet0;
                 $$0$i200 = $371;$$03$i199 = $370;
                } else {
                 $366 = ((($358)) + 16|0);
                 HEAP32[$366>>2] = $22;
                 $367 = ((($358)) + 20|0);
                 ;HEAP32[$367>>2]=0|0;HEAP32[$367+4>>2]=0|0;HEAP32[$367+8>>2]=0|0;
                 __THREW__ = 0;
                 invoke_viii(646,($367|0),(44984|0),0);
                 $368 = __THREW__; __THREW__ = 0;
                 $369 = $368&1;
                 if ($369) {
                  $372 = ___cxa_find_matching_catch_2()|0;
                  $373 = tempRet0;
                  __THREW__ = 0;
                  invoke_vi(637,($363|0));
                  $374 = __THREW__; __THREW__ = 0;
                  $375 = $374&1;
                  if (!($375)) {
                   $$0$i200 = $373;$$03$i199 = $372;
                   break;
                  }
                  $376 = ___cxa_find_matching_catch_3(0|0)|0;
                  $377 = tempRet0;
                  ___clang_call_terminate($376);
                  // unreachable;
                 } else {
                  $378 = ((($358)) + 32|0);
                  HEAP32[$378>>2] = 0;
                  __THREW__ = 0;
                  invoke_vi(637,($2|0));
                  $379 = __THREW__; __THREW__ = 0;
                  $380 = $379&1;
                  if ($380) {
                   $$070 = 1;
                   label = 185;
                   break L189;
                  }
                  HEAP32[$358>>2] = (9420);
                  __THREW__ = 0;
                  invoke_viii(644,($358|0),(1288|0),(7|0));
                  $385 = __THREW__; __THREW__ = 0;
                  $$070 = 0;
                  label = 185;
                  break L189;
                 }
                }
               } while(0);
               __THREW__ = 0;
               invoke_vi(637,($2|0));
               $381 = __THREW__; __THREW__ = 0;
               $382 = $381&1;
               if (!($382)) {
                $$070$lpad$bodyZZ2D = 1;$eh$lpad$body157$index14Z2D = $$0$i200;$eh$lpad$body157$indexZ2D = $$03$i199;
                break;
               }
               $383 = ___cxa_find_matching_catch_3(0|0)|0;
               $384 = tempRet0;
               ___clang_call_terminate($383);
               // unreachable;
              }
             } while(0);
             if ((label|0) == 185) {
              $388 = ___cxa_find_matching_catch_2()|0;
              $389 = tempRet0;
              $$070$lpad$bodyZZ2D = $$070;$eh$lpad$body157$index14Z2D = $389;$eh$lpad$body157$indexZ2D = $388;
             }
             __THREW__ = 0;
             invoke_vi(637,($17|0));
             $390 = __THREW__; __THREW__ = 0;
             $391 = $390&1;
             if ($391) {
              break L1;
             }
             if ($$070$lpad$bodyZZ2D) {
              $$13109239 = $eh$lpad$body157$indexZ2D;$$13240 = $eh$lpad$body157$index14Z2D;
             } else {
              $$18 = $eh$lpad$body157$index14Z2D;$$18114 = $eh$lpad$body157$indexZ2D;
              break L62;
             }
            }
            ___cxa_free_exception(($358|0));
            $$18 = $$13240;$$18114 = $$13109239;
            break L62;
           }
           __THREW__ = 0;
           (invoke_iii(742,($5|0),($311|0))|0);
           $313 = __THREW__; __THREW__ = 0;
           $314 = $313&1;
           if ($314) {
            label = 20;
            break L64;
           }
           $315 = HEAP32[9088]|0;
           $316 = ($315|0)==(0|0);
           if ($316) {
            __THREW__ = 0;
            invoke_viiii(680,(27040|0),(27060|0),38,(27075|0));
            $317 = __THREW__; __THREW__ = 0;
            label = 20;
            break L64;
           }
           $318 = HEAP32[$315>>2]|0;
           $319 = ($318|0)==(1);
           if (!($319)) {
            break;
           }
           $320 = ((($315)) + 28|0);
           $321 = HEAP32[$320>>2]|0;
           $322 = ($321|0)>(0);
           if (!($322)) {
            $357 = (($321) + 1)|0;
            HEAP32[$320>>2] = $357;
            break;
           }
           $323 = (___cxa_allocate_exception(36)|0);
           __THREW__ = 0;
           invoke_vii(635,($16|0),($38|0));
           $324 = __THREW__; __THREW__ = 0;
           $325 = $324&1;
           if ($325) {
            $351 = ___cxa_find_matching_catch_2()|0;
            $352 = tempRet0;
            $$12108236 = $351;$$12237 = $352;
           } else {
            __THREW__ = 0;
            invoke_vii(635,($3|0),($16|0));
            $326 = __THREW__; __THREW__ = 0;
            $327 = $326&1;
            L218: do {
             if ($327) {
              $$072 = 1;
              label = 168;
             } else {
              HEAP32[$323>>2] = (4652);
              $328 = ((($323)) + 4|0);
              __THREW__ = 0;
              invoke_vii(635,($328|0),($3|0));
              $329 = __THREW__; __THREW__ = 0;
              $330 = $329&1;
              do {
               if ($330) {
                $335 = ___cxa_find_matching_catch_2()|0;
                $336 = tempRet0;
                $$0$i196 = $336;$$03$i = $335;
               } else {
                $331 = ((($323)) + 16|0);
                HEAP32[$331>>2] = $22;
                $332 = ((($323)) + 20|0);
                ;HEAP32[$332>>2]=0|0;HEAP32[$332+4>>2]=0|0;HEAP32[$332+8>>2]=0|0;
                __THREW__ = 0;
                invoke_viii(646,($332|0),(44984|0),0);
                $333 = __THREW__; __THREW__ = 0;
                $334 = $333&1;
                if ($334) {
                 $337 = ___cxa_find_matching_catch_2()|0;
                 $338 = tempRet0;
                 __THREW__ = 0;
                 invoke_vi(637,($328|0));
                 $339 = __THREW__; __THREW__ = 0;
                 $340 = $339&1;
                 if (!($340)) {
                  $$0$i196 = $338;$$03$i = $337;
                  break;
                 }
                 $341 = ___cxa_find_matching_catch_3(0|0)|0;
                 $342 = tempRet0;
                 ___clang_call_terminate($341);
                 // unreachable;
                } else {
                 $343 = ((($323)) + 32|0);
                 HEAP32[$343>>2] = 0;
                 __THREW__ = 0;
                 invoke_vi(637,($3|0));
                 $344 = __THREW__; __THREW__ = 0;
                 $345 = $344&1;
                 if ($345) {
                  $$072 = 1;
                  label = 168;
                  break L218;
                 }
                 HEAP32[$323>>2] = (9396);
                 __THREW__ = 0;
                 invoke_viii(644,($323|0),(1272|0),(7|0));
                 $350 = __THREW__; __THREW__ = 0;
                 $$072 = 0;
                 label = 168;
                 break L218;
                }
               }
              } while(0);
              __THREW__ = 0;
              invoke_vi(637,($3|0));
              $346 = __THREW__; __THREW__ = 0;
              $347 = $346&1;
              if (!($347)) {
               $$072$lpad$bodyZZ2D = 1;$eh$lpad$body151$index9Z2D = $$0$i196;$eh$lpad$body151$indexZ2D = $$03$i;
               break;
              }
              $348 = ___cxa_find_matching_catch_3(0|0)|0;
              $349 = tempRet0;
              ___clang_call_terminate($348);
              // unreachable;
             }
            } while(0);
            if ((label|0) == 168) {
             $353 = ___cxa_find_matching_catch_2()|0;
             $354 = tempRet0;
             $$072$lpad$bodyZZ2D = $$072;$eh$lpad$body151$index9Z2D = $354;$eh$lpad$body151$indexZ2D = $353;
            }
            __THREW__ = 0;
            invoke_vi(637,($16|0));
            $355 = __THREW__; __THREW__ = 0;
            $356 = $355&1;
            if ($356) {
             break L1;
            }
            if ($$072$lpad$bodyZZ2D) {
             $$12108236 = $eh$lpad$body151$indexZ2D;$$12237 = $eh$lpad$body151$index9Z2D;
            } else {
             $$18 = $eh$lpad$body151$index9Z2D;$$18114 = $eh$lpad$body151$indexZ2D;
             break L62;
            }
           }
           ___cxa_free_exception(($323|0));
           $$18 = $$12237;$$18114 = $$12108236;
           break L62;
          }
         } while(0);
         $392 = HEAP32[9088]|0;
         $393 = ($392|0)==(0|0);
         if ($393) {
          __THREW__ = 0;
          invoke_viiii(680,(27040|0),(27060|0),38,(27075|0));
          $394 = __THREW__; __THREW__ = 0;
          label = 20;
          break;
         }
         $395 = HEAP32[$392>>2]|0;
         $396 = ($395|0)==(1);
         L239: do {
          if ($396) {
           $397 = ((($392)) + 8|0);
           $398 = HEAP8[$397>>0]|0;
           $399 = ($398<<24>>24)==(0);
           if ($399) {
            $447 = $392;
            break;
           }
           __THREW__ = 0;
           $400 = (invoke_iiii(655,(39840|0),(27884|0),13)|0);
           $401 = __THREW__; __THREW__ = 0;
           $402 = $401&1;
           if ($402) {
            label = 20;
            break L64;
           }
           $403 = HEAP8[$293>>0]|0;
           $404 = ($403<<24>>24)<(0);
           $405 = HEAP32[$5>>2]|0;
           $406 = $404 ? $405 : $5;
           $407 = HEAP32[$296>>2]|0;
           $408 = $403&255;
           $409 = $404 ? $407 : $408;
           __THREW__ = 0;
           $410 = (invoke_iiii(655,($400|0),($406|0),($409|0))|0);
           $411 = __THREW__; __THREW__ = 0;
           $412 = $411&1;
           if ($412) {
            label = 20;
            break L64;
           }
           __THREW__ = 0;
           $413 = (invoke_iiii(655,($410|0),(27898|0),1)|0);
           $414 = __THREW__; __THREW__ = 0;
           $415 = $414&1;
           if ($415) {
            label = 20;
            break L64;
           }
           $416 = HEAP32[$413>>2]|0;
           $417 = ((($416)) + -12|0);
           $418 = HEAP32[$417>>2]|0;
           $419 = (($413) + ($418)|0);
           __THREW__ = 0;
           $420 = (invoke_ii(658,($419|0))|0);
           $421 = __THREW__; __THREW__ = 0;
           $422 = $421&1;
           if ($422) {
            label = 20;
            break L64;
           }
           HEAP32[$1>>2] = $420;
           __THREW__ = 0;
           $423 = (invoke_iii(659,($1|0),(40712|0))|0);
           $424 = __THREW__; __THREW__ = 0;
           $425 = $424&1;
           do {
            if (!($425)) {
             $426 = HEAP32[$423>>2]|0;
             $427 = ((($426)) + 28|0);
             $428 = HEAP32[$427>>2]|0;
             __THREW__ = 0;
             $429 = (invoke_iii($428|0,($423|0),10)|0);
             $430 = __THREW__; __THREW__ = 0;
             $431 = $430&1;
             if ($431) {
              break;
             }
             __THREW__ = 0;
             invoke_vi(660,($1|0));
             $432 = __THREW__; __THREW__ = 0;
             $433 = $432&1;
             if ($433) {
              label = 20;
              break L64;
             }
             __THREW__ = 0;
             (invoke_iii(687,($413|0),($429|0))|0);
             $440 = __THREW__; __THREW__ = 0;
             $441 = $440&1;
             if ($441) {
              label = 20;
              break L64;
             }
             __THREW__ = 0;
             (invoke_ii(688,($413|0))|0);
             $442 = __THREW__; __THREW__ = 0;
             $443 = $442&1;
             if ($443) {
              label = 20;
              break L64;
             }
             $$pre248 = HEAP32[9088]|0;
             $444 = ($$pre248|0)==(0|0);
             if (!($444)) {
              $447 = $$pre248;
              break L239;
             }
             __THREW__ = 0;
             invoke_viiii(680,(27040|0),(27060|0),38,(27075|0));
             $445 = __THREW__; __THREW__ = 0;
             label = 20;
             break L64;
            }
           } while(0);
           $434 = ___cxa_find_matching_catch_2()|0;
           $435 = tempRet0;
           __THREW__ = 0;
           invoke_vi(660,($1|0));
           $436 = __THREW__; __THREW__ = 0;
           $437 = $436&1;
           if ($437) {
            $438 = ___cxa_find_matching_catch_3(0|0)|0;
            $439 = tempRet0;
            ___clang_call_terminate($438);
            // unreachable;
           } else {
            $eh$lpad$body175$index3Z2D = $435;$eh$lpad$body175$indexZ2D = $434;
            break L64;
           }
          } else {
           $447 = $392;
          }
         } while(0);
         $446 = HEAP32[$447>>2]|0;
         $448 = ($446|0)==(1);
         if (!($448)) {
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
          STACKTOP = sp;return;
         }
         $449 = ((($447)) + 9|0);
         $450 = HEAP8[$449>>0]|0;
         $451 = ($450<<24>>24)==(0);
         L261: do {
          if ($451) {
           $465 = ((($18)) + 104|0);
           $466 = ((($18)) + 4|0);
           HEAP32[$18>>2] = ((7744));
           HEAP32[$465>>2] = ((7764));
           $467 = ((($18)) + 104|0);
           __THREW__ = 0;
           invoke_vii(649,($467|0),($466|0));
           $468 = __THREW__; __THREW__ = 0;
           $469 = $468&1;
           do {
            if ($469) {
             $474 = ___cxa_find_matching_catch_2()|0;
             $475 = tempRet0;
             $$0$i = $475;$$02$i = $474;
            } else {
             $470 = ((($18)) + 176|0);
             HEAP32[$470>>2] = 0;
             $471 = ((($18)) + 180|0);
             HEAP32[$471>>2] = -1;
             HEAP32[$18>>2] = (7784);
             HEAP32[$465>>2] = (7804);
             __THREW__ = 0;
             invoke_vi(699,($466|0));
             $472 = __THREW__; __THREW__ = 0;
             $473 = $472&1;
             if ($473) {
              $476 = ___cxa_find_matching_catch_2()|0;
              $477 = tempRet0;
              __THREW__ = 0;
              invoke_vii(652,($18|0),((7816)|0));
              $478 = __THREW__; __THREW__ = 0;
              $479 = $478&1;
              if (!($479)) {
               $$0$i = $477;$$02$i = $476;
               break;
              }
              $482 = ___cxa_find_matching_catch_3(0|0)|0;
              $483 = tempRet0;
              ___clang_call_terminate($482);
              // unreachable;
             }
             $484 = ((($18)) + 68|0);
             $485 = HEAP32[$484>>2]|0;
             $486 = ($485|0)==(0|0);
             do {
              if ($486) {
               $487 = HEAP8[$293>>0]|0;
               $488 = ($487<<24>>24)<(0);
               $489 = HEAP32[$5>>2]|0;
               $490 = $488 ? $489 : $5;
               $491 = (_fopen($490,27900)|0);
               HEAP32[$484>>2] = $491;
               $492 = ($491|0)==(0|0);
               if ($492) {
                label = 222;
                break;
               }
               $493 = ((($18)) + 92|0);
               HEAP32[$493>>2] = 52;
               $494 = HEAP32[$18>>2]|0;
               $495 = ((($494)) + -12|0);
               $496 = HEAP32[$495>>2]|0;
               $497 = (($18) + ($496)|0);
               __THREW__ = 0;
               invoke_vii(662,($497|0),0);
               $498 = __THREW__; __THREW__ = 0;
               $499 = $498&1;
               if ($499) {
                label = 227;
               } else {
                $510 = $18;
                label = 223;
               }
              } else {
               label = 222;
              }
             } while(0);
             if ((label|0) == 222) {
              $500 = HEAP32[$18>>2]|0;
              $501 = ((($500)) + -12|0);
              $502 = HEAP32[$501>>2]|0;
              $503 = (($18) + ($502)|0);
              $504 = ((($503)) + 16|0);
              $505 = HEAP32[$504>>2]|0;
              $506 = $505 | 4;
              __THREW__ = 0;
              invoke_vii(662,($503|0),($506|0));
              $507 = __THREW__; __THREW__ = 0;
              $508 = $507&1;
              if ($508) {
               label = 227;
              } else {
               $510 = $18;
               label = 223;
              }
             }
             L275: do {
              if ((label|0) == 223) {
               $509 = HEAP32[$510>>2]|0;
               $511 = ((($509)) + -12|0);
               $512 = HEAP32[$511>>2]|0;
               $513 = (($18) + ($512)|0);
               $514 = ((($513)) + 16|0);
               $515 = HEAP32[$514>>2]|0;
               $516 = $515 & 5;
               $517 = ($516|0)==(0);
               if (!($517)) {
                $518 = (___cxa_allocate_exception(16)|0);
                $519 = HEAP8[$293>>0]|0;
                $520 = ($519<<24>>24)<(0);
                $521 = HEAP32[$5>>2]|0;
                $522 = $520 ? $521 : $5;
                ;HEAP32[$19>>2]=0|0;HEAP32[$19+4>>2]=0|0;HEAP32[$19+8>>2]=0|0;
                $523 = (_strlen($522)|0);
                __THREW__ = 0;
                invoke_viii(646,($19|0),($522|0),($523|0));
                $524 = __THREW__; __THREW__ = 0;
                $525 = $524&1;
                if ($525) {
                 $532 = ___cxa_find_matching_catch_2()|0;
                 $533 = tempRet0;
                 $$14110242 = $532;$$14243 = $533;
                } else {
                 HEAP32[$518>>2] = (4628);
                 $526 = ((($518)) + 4|0);
                 __THREW__ = 0;
                 invoke_vii(635,($526|0),($19|0));
                 $527 = __THREW__; __THREW__ = 0;
                 $528 = $527&1;
                 if ($528) {
                  $$068 = 1;
                 } else {
                  HEAP32[$518>>2] = (9444);
                  __THREW__ = 0;
                  invoke_viii(644,($518|0),(1304|0),(3|0));
                  $529 = __THREW__; __THREW__ = 0;
                  $$068 = 0;
                 }
                 $534 = ___cxa_find_matching_catch_2()|0;
                 $535 = tempRet0;
                 __THREW__ = 0;
                 invoke_vi(637,($19|0));
                 $536 = __THREW__; __THREW__ = 0;
                 $537 = $536&1;
                 if ($537) {
                  break L1;
                 }
                 if ($$068) {
                  $$14110242 = $534;$$14243 = $535;
                 } else {
                  $$16 = $535;$$16112 = $534;
                  label = 261;
                  break;
                 }
                }
                ___cxa_free_exception(($518|0));
                $$16 = $$14243;$$16112 = $$14110242;
                label = 261;
                break;
               }
               $538 = HEAP32[9090]|0;
               $539 = ($538|0)==(0|0);
               if ($539) {
                __THREW__ = 0;
                invoke_viiii(680,(27040|0),(27084|0),36,(27075|0));
                $540 = __THREW__; __THREW__ = 0;
                label = 227;
                break;
               }
               $541 = (($538) + ($128)|0);
               $542 = (($172) - ($128))|0;
               __THREW__ = 0;
               $543 = (invoke_iiii(702,($18|0),($541|0),($542|0))|0);
               $544 = __THREW__; __THREW__ = 0;
               $545 = $544&1;
               if ($545) {
                label = 227;
                break;
               }
               $546 = HEAP32[$543>>2]|0;
               $547 = ((($546)) + -12|0);
               $548 = HEAP32[$547>>2]|0;
               $549 = (($543) + ($548)|0);
               $550 = ((($549)) + 16|0);
               $551 = HEAP32[$550>>2]|0;
               $552 = $551 & 5;
               $553 = ($552|0)==(0);
               if (!($553)) {
                $554 = (___cxa_allocate_exception(16)|0);
                $555 = HEAP8[$293>>0]|0;
                $556 = ($555<<24>>24)<(0);
                $557 = HEAP32[$5>>2]|0;
                $558 = $556 ? $557 : $5;
                ;HEAP32[$20>>2]=0|0;HEAP32[$20+4>>2]=0|0;HEAP32[$20+8>>2]=0|0;
                $559 = (_strlen($558)|0);
                __THREW__ = 0;
                invoke_viii(646,($20|0),($558|0),($559|0));
                $560 = __THREW__; __THREW__ = 0;
                $561 = $560&1;
                if ($561) {
                 $566 = ___cxa_find_matching_catch_2()|0;
                 $567 = tempRet0;
                 $$15111245 = $566;$$15246 = $567;
                } else {
                 HEAP32[$554>>2] = (4628);
                 $562 = ((($554)) + 4|0);
                 __THREW__ = 0;
                 invoke_vii(635,($562|0),($20|0));
                 $563 = __THREW__; __THREW__ = 0;
                 $564 = $563&1;
                 if ($564) {
                  $$0 = 1;
                 } else {
                  HEAP32[$554>>2] = (9468);
                  __THREW__ = 0;
                  invoke_viii(644,($554|0),(1320|0),(3|0));
                  $565 = __THREW__; __THREW__ = 0;
                  $$0 = 0;
                 }
                 $568 = ___cxa_find_matching_catch_2()|0;
                 $569 = tempRet0;
                 __THREW__ = 0;
                 invoke_vi(637,($20|0));
                 $570 = __THREW__; __THREW__ = 0;
                 $571 = $570&1;
                 if ($571) {
                  break L1;
                 }
                 if ($$0) {
                  $$15111245 = $568;$$15246 = $569;
                 } else {
                  $$16 = $569;$$16112 = $568;
                  label = 261;
                  break;
                 }
                }
                ___cxa_free_exception(($554|0));
                $$16 = $$15246;$$16112 = $$15111245;
                label = 261;
                break;
               }
               $572 = HEAP32[$484>>2]|0;
               $573 = ($572|0)==(0|0);
               do {
                if ($573) {
                 label = 249;
                } else {
                 $574 = HEAP32[$466>>2]|0;
                 $575 = ((($574)) + 24|0);
                 $576 = HEAP32[$575>>2]|0;
                 __THREW__ = 0;
                 $577 = (invoke_ii($576|0,($466|0))|0);
                 $578 = __THREW__; __THREW__ = 0;
                 $579 = $578&1;
                 if ($579) {
                  $582 = ___cxa_find_matching_catch_2()|0;
                  $583 = tempRet0;
                  (_fclose($572)|0);
                  $eh$lpad$body194$index19Z2D = $583;$eh$lpad$body194$indexZ2D = $582;
                  label = 228;
                  break L275;
                 }
                 $580 = (_fclose($572)|0);
                 $581 = ($580|0)==(0);
                 if (!($581)) {
                  label = 249;
                  break;
                 }
                 $584 = ($577|0)==(0);
                 HEAP32[$484>>2] = 0;
                 if (!($584)) {
                  label = 249;
                 }
                }
               } while(0);
               if ((label|0) == 249) {
                $585 = HEAP32[$510>>2]|0;
                $586 = ((($585)) + -12|0);
                $587 = HEAP32[$586>>2]|0;
                $588 = (($18) + ($587)|0);
                $589 = ((($588)) + 16|0);
                $590 = HEAP32[$589>>2]|0;
                $591 = $590 | 4;
                __THREW__ = 0;
                invoke_vii(662,($588|0),($591|0));
                $592 = __THREW__; __THREW__ = 0;
                $593 = $592&1;
                if ($593) {
                 label = 227;
                 break;
                }
               }
               HEAP32[$18>>2] = ((7784));
               HEAP32[$465>>2] = ((7804));
               __THREW__ = 0;
               invoke_vi(176,($466|0));
               $594 = __THREW__; __THREW__ = 0;
               $595 = $594&1;
               do {
                if ($595) {
                 $598 = ___cxa_find_matching_catch_2()|0;
                 $599 = tempRet0;
                 __THREW__ = 0;
                 invoke_vii(652,($18|0),((7816)|0));
                 $600 = __THREW__; __THREW__ = 0;
                 $601 = $600&1;
                 if (!($601)) {
                  $eh$lpad$body$i130$index24Z2D = $599;$eh$lpad$body$i130$indexZ2D = $598;
                  label = 256;
                  break;
                 }
                 $602 = ___cxa_find_matching_catch_3(0|0)|0;
                 $603 = tempRet0;
                 ___clang_call_terminate($602);
                 // unreachable;
                } else {
                 __THREW__ = 0;
                 invoke_vii(652,($18|0),((7816)|0));
                 $596 = __THREW__; __THREW__ = 0;
                 $597 = $596&1;
                 if ($597) {
                  $606 = ___cxa_find_matching_catch_2()|0;
                  $607 = tempRet0;
                  $eh$lpad$body$i130$index24Z2D = $607;$eh$lpad$body$i130$indexZ2D = $606;
                  label = 256;
                  break;
                 }
                 __THREW__ = 0;
                 invoke_vi(653,($465|0));
                 $604 = __THREW__; __THREW__ = 0;
                 $605 = $604&1;
                 if ($605) {
                  $612 = ___cxa_find_matching_catch_2()|0;
                  $613 = tempRet0;
                  $eh$lpad$body134$index29Z2D = $613;$eh$lpad$body134$indexZ2D = $612;
                  break;
                 } else {
                  break L261;
                 }
                }
               } while(0);
               do {
                if ((label|0) == 256) {
                 __THREW__ = 0;
                 invoke_vi(653,($465|0));
                 $608 = __THREW__; __THREW__ = 0;
                 $609 = $608&1;
                 if (!($609)) {
                  $eh$lpad$body134$index29Z2D = $eh$lpad$body$i130$index24Z2D;$eh$lpad$body134$indexZ2D = $eh$lpad$body$i130$indexZ2D;
                  break;
                 }
                 $610 = ___cxa_find_matching_catch_3(0|0)|0;
                 $611 = tempRet0;
                 ___clang_call_terminate($610);
                 // unreachable;
                }
               } while(0);
               $$17 = $eh$lpad$body134$index29Z2D;$$17113 = $eh$lpad$body134$indexZ2D;
              }
             } while(0);
             if ((label|0) == 227) {
              $530 = ___cxa_find_matching_catch_2()|0;
              $531 = tempRet0;
              $eh$lpad$body194$index19Z2D = $531;$eh$lpad$body194$indexZ2D = $530;
              label = 228;
             }
             if ((label|0) == 228) {
              $$16 = $eh$lpad$body194$index19Z2D;$$16112 = $eh$lpad$body194$indexZ2D;
              label = 261;
             }
             L330: do {
              if ((label|0) == 261) {
               HEAP32[$18>>2] = ((7784));
               HEAP32[$465>>2] = ((7804));
               __THREW__ = 0;
               invoke_vi(176,($466|0));
               $614 = __THREW__; __THREW__ = 0;
               $615 = $614&1;
               do {
                if ($615) {
                 $618 = ___cxa_find_matching_catch_3(0|0)|0;
                 $619 = tempRet0;
                 __THREW__ = 0;
                 invoke_vii(652,($18|0),((7816)|0));
                 $620 = __THREW__; __THREW__ = 0;
                 $621 = $620&1;
                 if (!($621)) {
                  $eh$lpad$body$i$indexZ2D = $618;
                  break;
                 }
                 $622 = ___cxa_find_matching_catch_3(0|0)|0;
                 $623 = tempRet0;
                 ___clang_call_terminate($622);
                 // unreachable;
                } else {
                 __THREW__ = 0;
                 invoke_vii(652,($18|0),((7816)|0));
                 $616 = __THREW__; __THREW__ = 0;
                 $617 = $616&1;
                 if ($617) {
                  $626 = ___cxa_find_matching_catch_3(0|0)|0;
                  $627 = tempRet0;
                  $eh$lpad$body$i$indexZ2D = $626;
                  break;
                 } else {
                  __THREW__ = 0;
                  invoke_vi(653,($465|0));
                  $624 = __THREW__; __THREW__ = 0;
                  $625 = $624&1;
                  if ($625) {
                   break L1;
                  } else {
                   $$17 = $$16;$$17113 = $$16112;
                   break L330;
                  }
                 }
                }
               } while(0);
               __THREW__ = 0;
               invoke_vi(653,($465|0));
               $628 = __THREW__; __THREW__ = 0;
               $629 = $628&1;
               if ($629) {
                $630 = ___cxa_find_matching_catch_3(0|0)|0;
                $631 = tempRet0;
                ___clang_call_terminate($630);
                // unreachable;
               } else {
                $eh$lpad$body$indexZ2D = $eh$lpad$body$i$indexZ2D;
                ___clang_call_terminate($eh$lpad$body$indexZ2D);
                // unreachable;
               }
              }
             } while(0);
             $$18 = $$17;$$18114 = $$17113;
             break L62;
            }
           } while(0);
           __THREW__ = 0;
           invoke_vi(653,($465|0));
           $480 = __THREW__; __THREW__ = 0;
           $481 = $480&1;
           if ($481) {
            $482 = ___cxa_find_matching_catch_3(0|0)|0;
            $483 = tempRet0;
            ___clang_call_terminate($482);
            // unreachable;
           } else {
            $eh$lpad$body175$index3Z2D = $$0$i;$eh$lpad$body175$indexZ2D = $$02$i;
            break L64;
           }
          } else {
           $452 = HEAP32[9090]|0;
           $453 = ($452|0)==(0|0);
           if ($453) {
            __THREW__ = 0;
            invoke_viiii(680,(27040|0),(27084|0),36,(27075|0));
            $454 = __THREW__; __THREW__ = 0;
            label = 20;
            break L64;
           } else {
            $455 = HEAP8[$293>>0]|0;
            $456 = ($455<<24>>24)<(0);
            $457 = HEAP32[$5>>2]|0;
            $458 = $456 ? $457 : $5;
            $459 = ((($447)) + 12|0);
            $460 = HEAP32[$459>>2]|0;
            $461 = (($452) + ($128)|0);
            $462 = (($172) - ($128))|0;
            __THREW__ = 0;
            invoke_viiiiii(703,($460|0),($458|0),($461|0),($$0118|0),($$1117|0),($462|0));
            $463 = __THREW__; __THREW__ = 0;
            $464 = $463&1;
            if ($464) {
             label = 20;
             break L64;
            } else {
             break;
            }
           }
          }
         } while(0);
         $632 = HEAP32[9088]|0;
         $633 = ($632|0)==(0|0);
         if ($633) {
          __THREW__ = 0;
          invoke_viiii(680,(27040|0),(27060|0),38,(27075|0));
          $634 = __THREW__; __THREW__ = 0;
          label = 20;
          break;
         }
         $635 = ((($632)) + 20|0);
         HEAP8[$635>>0] = 1;
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
         STACKTOP = sp;return;
        }
       }
       $158 = (___cxa_allocate_exception(36)|0);
       __THREW__ = 0;
       invoke_vii(635,($11|0),($38|0));
       $159 = __THREW__; __THREW__ = 0;
       $160 = $159&1;
       if ($160) {
        $165 = ___cxa_find_matching_catch_2()|0;
        $166 = tempRet0;
        $$7103219 = $165;$$7220 = $166;
       } else {
        $161 = HEAP32[$21>>2]|0;
        __THREW__ = 0;
        invoke_viii(676,($158|0),($11|0),($161|0));
        $162 = __THREW__; __THREW__ = 0;
        $163 = $162&1;
        if ($163) {
         $$082 = 1;
        } else {
         __THREW__ = 0;
         invoke_viii(644,($158|0),(352|0),(7|0));
         $164 = __THREW__; __THREW__ = 0;
         $$082 = 0;
        }
        $167 = ___cxa_find_matching_catch_2()|0;
        $168 = tempRet0;
        __THREW__ = 0;
        invoke_vi(637,($11|0));
        $169 = __THREW__; __THREW__ = 0;
        $170 = $169&1;
        if ($170) {
         break L1;
        }
        if ($$082) {
         $$7103219 = $167;$$7220 = $168;
        } else {
         $$18 = $168;$$18114 = $167;
         break L62;
        }
       }
       ___cxa_free_exception(($158|0));
       $$18 = $$7220;$$18114 = $$7103219;
       break L62;
      }
     } while(0);
     if ((label|0) == 20) {
      $63 = ___cxa_find_matching_catch_2()|0;
      $64 = tempRet0;
      $eh$lpad$body175$index3Z2D = $64;$eh$lpad$body175$indexZ2D = $63;
     }
     $$18 = $eh$lpad$body175$index3Z2D;$$18114 = $eh$lpad$body175$indexZ2D;
    }
   } while(0);
   __THREW__ = 0;
   invoke_vi(637,($5|0));
   $636 = __THREW__; __THREW__ = 0;
   $637 = $636&1;
   if (!($637)) {
    $$19 = $$18;$$19115 = $$18114;
    ___resumeException($$19115|0);
    // unreachable;
   }
  } else {
   $24 = (___cxa_allocate_exception(36)|0);
   $25 = ((($0)) + 4|0);
   __THREW__ = 0;
   invoke_vii(635,($4|0),($25|0));
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if ($27) {
    $32 = ___cxa_find_matching_catch_2()|0;
    $33 = tempRet0;
    $$094205 = $33;$$096204 = $32;
   } else {
    $28 = HEAP32[$21>>2]|0;
    __THREW__ = 0;
    invoke_viii(735,($24|0),($4|0),($28|0));
    $29 = __THREW__; __THREW__ = 0;
    $30 = $29&1;
    if ($30) {
     $$092 = 1;
    } else {
     __THREW__ = 0;
     invoke_viii(644,($24|0),(432|0),(7|0));
     $31 = __THREW__; __THREW__ = 0;
     $$092 = 0;
    }
    $34 = ___cxa_find_matching_catch_2()|0;
    $35 = tempRet0;
    __THREW__ = 0;
    invoke_vi(637,($4|0));
    $36 = __THREW__; __THREW__ = 0;
    $37 = $36&1;
    if ($37) {
     break;
    }
    if ($$092) {
     $$094205 = $35;$$096204 = $34;
    } else {
     $$19 = $35;$$19115 = $34;
     ___resumeException($$19115|0);
     // unreachable;
    }
   }
   ___cxa_free_exception(($24|0));
   $$19 = $$094205;$$19115 = $$096204;
   ___resumeException($$19115|0);
   // unreachable;
  }
 } while(0);
 $638 = ___cxa_find_matching_catch_3(0|0)|0;
 $639 = tempRet0;
 $eh$lpad$body$indexZ2D = $638;
 ___clang_call_terminate($eh$lpad$body$indexZ2D);
 // unreachable;
}
function __ZN10LineParser9HandleForEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i = 0, $$029 = 0, $$029$lpad$bodyZZ2D = 0, $$03$i = 0, $$031 = 0, $$033 = 0.0, $$03477 = 0, $$036 = 0, $$038 = 0, $$04076 = 0, $$056 = 0, $$058 = 0, $$060 = 0, $$062 = 0, $$064 = 0, $$10104 = 0, $$1050103 = 0, $$13 = 0, $$1353 = 0;
 var $$13580 = 0, $$14179 = 0, $$15 = 0, $$1555 = 0, $$2 = 0, $$242 = 0, $$34382 = 0, $$383 = 0, $$44485 = 0, $$486 = 0, $$54588 = 0, $$589 = 0, $$64691 = 0, $$692 = 0, $$74794 = 0, $$795 = 0, $$84897 = 0, $$898 = 0, $$9101 = 0, $$949100 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0.0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0.0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $eh$lpad$body73$index2Z2D = 0, $eh$lpad$body73$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $1 = sp + 156|0;
 $2 = sp + 144|0;
 $3 = sp + 132|0;
 $4 = sp + 120|0;
 $5 = sp + 108|0;
 $6 = sp + 96|0;
 $7 = sp + 84|0;
 $8 = sp + 72|0;
 $9 = sp + 60|0;
 $10 = sp + 48|0;
 $11 = sp + 36|0;
 $12 = sp + 24|0;
 $13 = sp + 12|0;
 $14 = sp;
 $15 = (__ZN10LineParser29AdvanceAndCheckEndOfStatementEv($0)|0);
 if (!($15)) {
  $16 = (___cxa_allocate_exception(36)|0);
  $17 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vii(635,($2|0),($17|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if ($19) {
   $25 = ___cxa_find_matching_catch_2()|0;
   $26 = tempRet0;
   $$03477 = $25;$$04076 = $26;
  } else {
   $20 = ((($0)) + 16|0);
   $21 = HEAP32[$20>>2]|0;
   __THREW__ = 0;
   invoke_viii(735,($16|0),($2|0),($21|0));
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if ($23) {
    $$062 = 1;
   } else {
    __THREW__ = 0;
    invoke_viii(644,($16|0),(432|0),(7|0));
    $24 = __THREW__; __THREW__ = 0;
    $$062 = 0;
   }
   $27 = ___cxa_find_matching_catch_2()|0;
   $28 = tempRet0;
   __THREW__ = 0;
   invoke_vi(637,($2|0));
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   if ($30) {
    $299 = ___cxa_find_matching_catch_3(0|0)|0;
    $300 = tempRet0;
    ___clang_call_terminate($299);
    // unreachable;
   }
   if ($$062) {
    $$03477 = $27;$$04076 = $28;
   } else {
    $$15 = $27;$$1555 = $28;
    ___resumeException($$15|0);
    // unreachable;
   }
  }
  ___cxa_free_exception(($16|0));
  $$15 = $$03477;$$1555 = $$04076;
  ___resumeException($$15|0);
  // unreachable;
 }
 $31 = ((($0)) + 4|0);
 $32 = ((($0)) + 16|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($31)) + 11|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = ($35<<24>>24)<(0);
 if ($36) {
  $37 = HEAP32[$31>>2]|0;
  $39 = $37;
 } else {
  $39 = $31;
 }
 $38 = (($39) + ($33)|0);
 $40 = HEAP8[$38>>0]|0;
 $41 = $40 << 24 >> 24;
 $42 = (_isalpha($41)|0);
 $43 = ($42|0)==(0);
 if ($43) {
  if ($36) {
   $44 = HEAP32[$31>>2]|0;
   $46 = $44;
  } else {
   $46 = $31;
  }
  $45 = (($46) + ($33)|0);
  $47 = HEAP8[$45>>0]|0;
  $48 = ($47<<24>>24)==(95);
  if (!($48)) {
   $49 = (___cxa_allocate_exception(36)|0);
   __THREW__ = 0;
   invoke_vii(635,($3|0),($31|0));
   $50 = __THREW__; __THREW__ = 0;
   $51 = $50&1;
   if ($51) {
    $56 = ___cxa_find_matching_catch_2()|0;
    $57 = tempRet0;
    $$13580 = $56;$$14179 = $57;
   } else {
    $52 = HEAP32[$32>>2]|0;
    __THREW__ = 0;
    invoke_viii(730,($49|0),($3|0),($52|0));
    $53 = __THREW__; __THREW__ = 0;
    $54 = $53&1;
    if ($54) {
     $$064 = 1;
    } else {
     __THREW__ = 0;
     invoke_viii(644,($49|0),(1208|0),(7|0));
     $55 = __THREW__; __THREW__ = 0;
     $$064 = 0;
    }
    $58 = ___cxa_find_matching_catch_2()|0;
    $59 = tempRet0;
    __THREW__ = 0;
    invoke_vi(637,($3|0));
    $60 = __THREW__; __THREW__ = 0;
    $61 = $60&1;
    if ($61) {
     $299 = ___cxa_find_matching_catch_3(0|0)|0;
     $300 = tempRet0;
     ___clang_call_terminate($299);
     // unreachable;
    }
    if ($$064) {
     $$13580 = $58;$$14179 = $59;
    } else {
     $$15 = $58;$$1555 = $59;
     ___resumeException($$15|0);
     // unreachable;
    }
   }
   ___cxa_free_exception(($49|0));
   $$15 = $$13580;$$1555 = $$14179;
   ___resumeException($$15|0);
   // unreachable;
  }
 }
 __ZN10LineParser13GetSymbolNameEv($5,$0);
 $62 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 invoke_viii(677,($6|0),($62|0),-1);
 $63 = __THREW__; __THREW__ = 0;
 $64 = $63&1;
 do {
  if ($64) {
   label = 37;
  } else {
   ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
   $65 = ((($5)) + 11|0);
   $66 = HEAP8[$65>>0]|0;
   $67 = ($66<<24>>24)<(0);
   $68 = ((($5)) + 4|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = $66&255;
   $71 = $67 ? $69 : $70;
   $72 = ((($6)) + 11|0);
   $73 = HEAP8[$72>>0]|0;
   $74 = ($73<<24>>24)<(0);
   $75 = ((($6)) + 4|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $73&255;
   $78 = $74 ? $76 : $77;
   $79 = HEAP32[$5>>2]|0;
   $80 = $67 ? $79 : $5;
   $81 = (($78) + ($71))|0;
   __THREW__ = 0;
   invoke_viiii(678,($4|0),($80|0),($71|0),($81|0));
   $82 = __THREW__; __THREW__ = 0;
   $83 = $82&1;
   if (!($83)) {
    $84 = HEAP8[$72>>0]|0;
    $85 = ($84<<24>>24)<(0);
    $86 = HEAP32[$6>>2]|0;
    $87 = $85 ? $86 : $6;
    __THREW__ = 0;
    (invoke_iiii(679,($4|0),($87|0),($78|0))|0);
    $88 = __THREW__; __THREW__ = 0;
    $89 = $88&1;
    if (!($89)) {
     __THREW__ = 0;
     invoke_vi(637,($6|0));
     $96 = __THREW__; __THREW__ = 0;
     $97 = $96&1;
     if ($97) {
      label = 37;
      break;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
     $98 = HEAP32[9091]|0;
     $99 = ($98|0)==(0|0);
     L46: do {
      if ($99) {
       __THREW__ = 0;
       invoke_viiii(680,(27040|0),(27806|0),38,(27075|0));
       $100 = __THREW__; __THREW__ = 0;
       label = 41;
      } else {
       __THREW__ = 0;
       $101 = (invoke_iii(681,($98|0),($4|0))|0);
       $102 = __THREW__; __THREW__ = 0;
       $103 = $102&1;
       if ($103) {
        label = 41;
       } else {
        if ($101) {
         $104 = (___cxa_allocate_exception(36)|0);
         __THREW__ = 0;
         invoke_vii(635,($7|0),($31|0));
         $105 = __THREW__; __THREW__ = 0;
         $106 = $105&1;
         do {
          if ($106) {
           $118 = ___cxa_find_matching_catch_2()|0;
           $119 = tempRet0;
           $$34382 = $119;$$383 = $118;
          } else {
           __THREW__ = 0;
           invoke_viii(729,($104|0),($7|0),($33|0));
           $107 = __THREW__; __THREW__ = 0;
           $108 = $107&1;
           if ($108) {
            $$060 = 1;
           } else {
            __THREW__ = 0;
            invoke_viii(644,($104|0),(984|0),(7|0));
            $109 = __THREW__; __THREW__ = 0;
            $$060 = 0;
           }
           $120 = ___cxa_find_matching_catch_2()|0;
           $121 = tempRet0;
           __THREW__ = 0;
           invoke_vi(637,($7|0));
           $122 = __THREW__; __THREW__ = 0;
           $123 = $122&1;
           if ($123) {
            $299 = ___cxa_find_matching_catch_3(0|0)|0;
            $300 = tempRet0;
            ___clang_call_terminate($299);
            // unreachable;
           } else {
            if ($$060) {
             $$34382 = $121;$$383 = $120;
             break;
            } else {
             $$13 = $120;$$1353 = $121;
             break L46;
            }
           }
          }
         } while(0);
         ___cxa_free_exception(($104|0));
         $$13 = $$383;$$1353 = $$34382;
         break;
        }
        __THREW__ = 0;
        $124 = (invoke_ii(741,($0|0))|0);
        $125 = __THREW__; __THREW__ = 0;
        $126 = $125&1;
        if ($126) {
         label = 41;
        } else {
         if (!($124)) {
          $127 = (___cxa_allocate_exception(36)|0);
          __THREW__ = 0;
          invoke_vii(635,($8|0),($31|0));
          $128 = __THREW__; __THREW__ = 0;
          $129 = $128&1;
          do {
           if ($129) {
            $134 = ___cxa_find_matching_catch_2()|0;
            $135 = tempRet0;
            $$44485 = $135;$$486 = $134;
           } else {
            $130 = HEAP32[$32>>2]|0;
            __THREW__ = 0;
            invoke_viii(735,($127|0),($8|0),($130|0));
            $131 = __THREW__; __THREW__ = 0;
            $132 = $131&1;
            if ($132) {
             $$058 = 1;
            } else {
             __THREW__ = 0;
             invoke_viii(644,($127|0),(432|0),(7|0));
             $133 = __THREW__; __THREW__ = 0;
             $$058 = 0;
            }
            $136 = ___cxa_find_matching_catch_2()|0;
            $137 = tempRet0;
            __THREW__ = 0;
            invoke_vi(637,($8|0));
            $138 = __THREW__; __THREW__ = 0;
            $139 = $138&1;
            if ($139) {
             $299 = ___cxa_find_matching_catch_3(0|0)|0;
             $300 = tempRet0;
             ___clang_call_terminate($299);
             // unreachable;
            } else {
             if ($$058) {
              $$44485 = $137;$$486 = $136;
              break;
             } else {
              $$13 = $136;$$1353 = $137;
              break L46;
             }
            }
           }
          } while(0);
          ___cxa_free_exception(($127|0));
          $$13 = $$486;$$1353 = $$44485;
          break;
         }
         $140 = HEAP32[$32>>2]|0;
         $141 = HEAP8[$34>>0]|0;
         $142 = ($141<<24>>24)<(0);
         if ($142) {
          $143 = HEAP32[$31>>2]|0;
          $145 = $143;
         } else {
          $145 = $31;
         }
         $144 = (($145) + ($140)|0);
         $146 = HEAP8[$144>>0]|0;
         $147 = ($146<<24>>24)==(44);
         if (!($147)) {
          $148 = (___cxa_allocate_exception(36)|0);
          __THREW__ = 0;
          invoke_vii(635,($9|0),($31|0));
          $149 = __THREW__; __THREW__ = 0;
          $150 = $149&1;
          do {
           if ($150) {
            $155 = ___cxa_find_matching_catch_2()|0;
            $156 = tempRet0;
            $$54588 = $156;$$589 = $155;
           } else {
            $151 = HEAP32[$32>>2]|0;
            __THREW__ = 0;
            invoke_viii(676,($148|0),($9|0),($151|0));
            $152 = __THREW__; __THREW__ = 0;
            $153 = $152&1;
            if ($153) {
             $$056 = 1;
            } else {
             __THREW__ = 0;
             invoke_viii(644,($148|0),(352|0),(7|0));
             $154 = __THREW__; __THREW__ = 0;
             $$056 = 0;
            }
            $157 = ___cxa_find_matching_catch_2()|0;
            $158 = tempRet0;
            __THREW__ = 0;
            invoke_vi(637,($9|0));
            $159 = __THREW__; __THREW__ = 0;
            $160 = $159&1;
            if ($160) {
             $299 = ___cxa_find_matching_catch_3(0|0)|0;
             $300 = tempRet0;
             ___clang_call_terminate($299);
             // unreachable;
            } else {
             if ($$056) {
              $$54588 = $158;$$589 = $157;
              break;
             } else {
              $$13 = $157;$$1353 = $158;
              break L46;
             }
            }
           }
          } while(0);
          ___cxa_free_exception(($148|0));
          $$13 = $$589;$$1353 = $$54588;
          break;
         }
         $161 = (($140) + 1)|0;
         HEAP32[$32>>2] = $161;
         __THREW__ = 0;
         $162 = (+invoke_dii(709,($0|0),0));
         $163 = __THREW__; __THREW__ = 0;
         $164 = $163&1;
         if ($164) {
          label = 41;
         } else {
          __THREW__ = 0;
          $165 = (invoke_ii(741,($0|0))|0);
          $166 = __THREW__; __THREW__ = 0;
          $167 = $166&1;
          do {
           if (!($167)) {
            if (!($165)) {
             $168 = (___cxa_allocate_exception(36)|0);
             __THREW__ = 0;
             invoke_vii(635,($10|0),($31|0));
             $169 = __THREW__; __THREW__ = 0;
             $170 = $169&1;
             do {
              if ($170) {
               $177 = ___cxa_find_matching_catch_2()|0;
               $178 = tempRet0;
               $$64691 = $178;$$692 = $177;
              } else {
               $171 = HEAP32[$32>>2]|0;
               __THREW__ = 0;
               invoke_viii(735,($168|0),($10|0),($171|0));
               $172 = __THREW__; __THREW__ = 0;
               $173 = $172&1;
               if ($173) {
                $$038 = 1;
               } else {
                __THREW__ = 0;
                invoke_viii(644,($168|0),(432|0),(7|0));
                $174 = __THREW__; __THREW__ = 0;
                $$038 = 0;
               }
               $179 = ___cxa_find_matching_catch_2()|0;
               $180 = tempRet0;
               __THREW__ = 0;
               invoke_vi(637,($10|0));
               $181 = __THREW__; __THREW__ = 0;
               $182 = $181&1;
               if ($182) {
                $299 = ___cxa_find_matching_catch_3(0|0)|0;
                $300 = tempRet0;
                ___clang_call_terminate($299);
                // unreachable;
               } else {
                if ($$038) {
                 $$64691 = $180;$$692 = $179;
                 break;
                } else {
                 $$13 = $179;$$1353 = $180;
                 break L46;
                }
               }
              }
             } while(0);
             ___cxa_free_exception(($168|0));
             $$13 = $$692;$$1353 = $$64691;
             break L46;
            }
            $183 = HEAP32[$32>>2]|0;
            $184 = HEAP8[$34>>0]|0;
            $185 = ($184<<24>>24)<(0);
            if ($185) {
             $186 = HEAP32[$31>>2]|0;
             $188 = $186;
            } else {
             $188 = $31;
            }
            $187 = (($188) + ($183)|0);
            $189 = HEAP8[$187>>0]|0;
            $190 = ($189<<24>>24)==(44);
            if (!($190)) {
             $191 = (___cxa_allocate_exception(36)|0);
             __THREW__ = 0;
             invoke_vii(635,($11|0),($31|0));
             $192 = __THREW__; __THREW__ = 0;
             $193 = $192&1;
             do {
              if ($193) {
               $198 = ___cxa_find_matching_catch_2()|0;
               $199 = tempRet0;
               $$74794 = $199;$$795 = $198;
              } else {
               $194 = HEAP32[$32>>2]|0;
               __THREW__ = 0;
               invoke_viii(676,($191|0),($11|0),($194|0));
               $195 = __THREW__; __THREW__ = 0;
               $196 = $195&1;
               if ($196) {
                $$036 = 1;
               } else {
                __THREW__ = 0;
                invoke_viii(644,($191|0),(352|0),(7|0));
                $197 = __THREW__; __THREW__ = 0;
                $$036 = 0;
               }
               $200 = ___cxa_find_matching_catch_2()|0;
               $201 = tempRet0;
               __THREW__ = 0;
               invoke_vi(637,($11|0));
               $202 = __THREW__; __THREW__ = 0;
               $203 = $202&1;
               if ($203) {
                $299 = ___cxa_find_matching_catch_3(0|0)|0;
                $300 = tempRet0;
                ___clang_call_terminate($299);
                // unreachable;
               } else {
                if ($$036) {
                 $$74794 = $201;$$795 = $200;
                 break;
                } else {
                 $$13 = $200;$$1353 = $201;
                 break L46;
                }
               }
              }
             } while(0);
             ___cxa_free_exception(($191|0));
             $$13 = $$795;$$1353 = $$74794;
             break L46;
            }
            $204 = (($183) + 1)|0;
            HEAP32[$32>>2] = $204;
            __THREW__ = 0;
            $205 = (+invoke_dii(709,($0|0),0));
            $206 = __THREW__; __THREW__ = 0;
            $207 = $206&1;
            if ($207) {
             break;
            }
            __THREW__ = 0;
            $208 = (invoke_ii(741,($0|0))|0);
            $209 = __THREW__; __THREW__ = 0;
            $210 = $209&1;
            L128: do {
             if (!($210)) {
              do {
               if ($208) {
                $211 = HEAP32[$32>>2]|0;
                $212 = HEAP8[$34>>0]|0;
                $213 = ($212<<24>>24)<(0);
                if ($213) {
                 $214 = HEAP32[$31>>2]|0;
                 $216 = $214;
                } else {
                 $216 = $31;
                }
                $215 = (($216) + ($211)|0);
                $217 = HEAP8[$215>>0]|0;
                $218 = ($217<<24>>24)==(44);
                if (!($218)) {
                 $219 = (___cxa_allocate_exception(36)|0);
                 __THREW__ = 0;
                 invoke_vii(635,($12|0),($31|0));
                 $220 = __THREW__; __THREW__ = 0;
                 $221 = $220&1;
                 do {
                  if ($221) {
                   $228 = ___cxa_find_matching_catch_2()|0;
                   $229 = tempRet0;
                   $$84897 = $229;$$898 = $228;
                  } else {
                   $222 = HEAP32[$32>>2]|0;
                   __THREW__ = 0;
                   invoke_viii(676,($219|0),($12|0),($222|0));
                   $223 = __THREW__; __THREW__ = 0;
                   $224 = $223&1;
                   if ($224) {
                    $$031 = 1;
                   } else {
                    __THREW__ = 0;
                    invoke_viii(644,($219|0),(352|0),(7|0));
                    $225 = __THREW__; __THREW__ = 0;
                    $$031 = 0;
                   }
                   $230 = ___cxa_find_matching_catch_2()|0;
                   $231 = tempRet0;
                   __THREW__ = 0;
                   invoke_vi(637,($12|0));
                   $232 = __THREW__; __THREW__ = 0;
                   $233 = $232&1;
                   if ($233) {
                    $299 = ___cxa_find_matching_catch_3(0|0)|0;
                    $300 = tempRet0;
                    ___clang_call_terminate($299);
                    // unreachable;
                   } else {
                    if ($$031) {
                     $$84897 = $231;$$898 = $230;
                     break;
                    } else {
                     $$13 = $230;$$1353 = $231;
                     break L46;
                    }
                   }
                  }
                 } while(0);
                 ___cxa_free_exception(($219|0));
                 $$13 = $$898;$$1353 = $$84897;
                 break L46;
                }
                $234 = (($211) + 1)|0;
                HEAP32[$32>>2] = $234;
                __THREW__ = 0;
                $235 = (+invoke_dii(709,($0|0),0));
                $236 = __THREW__; __THREW__ = 0;
                $237 = $236&1;
                if ($237) {
                 break L128;
                }
                $238 = $235 == 0.0;
                if (!($238)) {
                 __THREW__ = 0;
                 $274 = (invoke_ii(741,($0|0))|0);
                 $275 = __THREW__; __THREW__ = 0;
                 $276 = $275&1;
                 if ($276) {
                  break L128;
                 }
                 if (!($274)) {
                  $$033 = $235;
                  break;
                 }
                 $277 = (___cxa_allocate_exception(36)|0);
                 __THREW__ = 0;
                 invoke_vii(635,($14|0),($31|0));
                 $278 = __THREW__; __THREW__ = 0;
                 $279 = $278&1;
                 do {
                  if ($279) {
                   $284 = ___cxa_find_matching_catch_2()|0;
                   $285 = tempRet0;
                   $$10104 = $284;$$1050103 = $285;
                  } else {
                   $280 = HEAP32[$32>>2]|0;
                   __THREW__ = 0;
                   invoke_viii(676,($277|0),($14|0),($280|0));
                   $281 = __THREW__; __THREW__ = 0;
                   $282 = $281&1;
                   if ($282) {
                    $$0 = 1;
                   } else {
                    __THREW__ = 0;
                    invoke_viii(644,($277|0),(352|0),(7|0));
                    $283 = __THREW__; __THREW__ = 0;
                    $$0 = 0;
                   }
                   $286 = ___cxa_find_matching_catch_2()|0;
                   $287 = tempRet0;
                   __THREW__ = 0;
                   invoke_vi(637,($14|0));
                   $288 = __THREW__; __THREW__ = 0;
                   $289 = $288&1;
                   if ($289) {
                    $299 = ___cxa_find_matching_catch_3(0|0)|0;
                    $300 = tempRet0;
                    ___clang_call_terminate($299);
                    // unreachable;
                   } else {
                    if ($$0) {
                     $$10104 = $286;$$1050103 = $287;
                     break;
                    } else {
                     $$13 = $286;$$1353 = $287;
                     break L46;
                    }
                   }
                  }
                 } while(0);
                 ___cxa_free_exception(($277|0));
                 $$13 = $$10104;$$1353 = $$1050103;
                 break L46;
                }
                $239 = (___cxa_allocate_exception(36)|0);
                __THREW__ = 0;
                invoke_vii(635,($13|0),($31|0));
                $240 = __THREW__; __THREW__ = 0;
                $241 = $240&1;
                do {
                 if ($241) {
                  $268 = ___cxa_find_matching_catch_2()|0;
                  $269 = tempRet0;
                  $$9101 = $268;$$949100 = $269;
                 } else {
                  $242 = HEAP32[$32>>2]|0;
                  __THREW__ = 0;
                  invoke_vii(635,($1|0),($13|0));
                  $243 = __THREW__; __THREW__ = 0;
                  $244 = $243&1;
                  L168: do {
                   if ($244) {
                    $$029 = 1;
                    label = 117;
                   } else {
                    HEAP32[$239>>2] = (4652);
                    $245 = ((($239)) + 4|0);
                    __THREW__ = 0;
                    invoke_vii(635,($245|0),($1|0));
                    $246 = __THREW__; __THREW__ = 0;
                    $247 = $246&1;
                    do {
                     if ($247) {
                      $252 = ___cxa_find_matching_catch_2()|0;
                      $253 = tempRet0;
                      $$0$i = $253;$$03$i = $252;
                     } else {
                      $248 = ((($239)) + 16|0);
                      HEAP32[$248>>2] = $242;
                      $249 = ((($239)) + 20|0);
                      ;HEAP32[$249>>2]=0|0;HEAP32[$249+4>>2]=0|0;HEAP32[$249+8>>2]=0|0;
                      __THREW__ = 0;
                      invoke_viii(646,($249|0),(44984|0),0);
                      $250 = __THREW__; __THREW__ = 0;
                      $251 = $250&1;
                      if ($251) {
                       $254 = ___cxa_find_matching_catch_2()|0;
                       $255 = tempRet0;
                       __THREW__ = 0;
                       invoke_vi(637,($245|0));
                       $256 = __THREW__; __THREW__ = 0;
                       $257 = $256&1;
                       if (!($257)) {
                        $$0$i = $255;$$03$i = $254;
                        break;
                       }
                       $258 = ___cxa_find_matching_catch_3(0|0)|0;
                       $259 = tempRet0;
                       ___clang_call_terminate($258);
                       // unreachable;
                      } else {
                       $260 = ((($239)) + 32|0);
                       HEAP32[$260>>2] = 0;
                       __THREW__ = 0;
                       invoke_vi(637,($1|0));
                       $261 = __THREW__; __THREW__ = 0;
                       $262 = $261&1;
                       if ($262) {
                        $$029 = 1;
                        label = 117;
                        break L168;
                       }
                       HEAP32[$239>>2] = (9372);
                       __THREW__ = 0;
                       invoke_viii(644,($239|0),(1256|0),(7|0));
                       $267 = __THREW__; __THREW__ = 0;
                       $$029 = 0;
                       label = 117;
                       break L168;
                      }
                     }
                    } while(0);
                    __THREW__ = 0;
                    invoke_vi(637,($1|0));
                    $263 = __THREW__; __THREW__ = 0;
                    $264 = $263&1;
                    if (!($264)) {
                     $$029$lpad$bodyZZ2D = 1;$eh$lpad$body73$index2Z2D = $$0$i;$eh$lpad$body73$indexZ2D = $$03$i;
                     break;
                    }
                    $265 = ___cxa_find_matching_catch_3(0|0)|0;
                    $266 = tempRet0;
                    ___clang_call_terminate($265);
                    // unreachable;
                   }
                  } while(0);
                  if ((label|0) == 117) {
                   $270 = ___cxa_find_matching_catch_2()|0;
                   $271 = tempRet0;
                   $$029$lpad$bodyZZ2D = $$029;$eh$lpad$body73$index2Z2D = $271;$eh$lpad$body73$indexZ2D = $270;
                  }
                  __THREW__ = 0;
                  invoke_vi(637,($13|0));
                  $272 = __THREW__; __THREW__ = 0;
                  $273 = $272&1;
                  if ($273) {
                   $299 = ___cxa_find_matching_catch_3(0|0)|0;
                   $300 = tempRet0;
                   ___clang_call_terminate($299);
                   // unreachable;
                  } else {
                   if ($$029$lpad$bodyZZ2D) {
                    $$9101 = $eh$lpad$body73$indexZ2D;$$949100 = $eh$lpad$body73$index2Z2D;
                    break;
                   } else {
                    $$13 = $eh$lpad$body73$indexZ2D;$$1353 = $eh$lpad$body73$index2Z2D;
                    break L46;
                   }
                  }
                 }
                } while(0);
                ___cxa_free_exception(($239|0));
                $$13 = $$9101;$$1353 = $$949100;
                break L46;
               } else {
                $$033 = 1.0;
               }
              } while(0);
              $290 = HEAP32[$0>>2]|0;
              $291 = ((($290)) + 24620|0);
              $292 = HEAP32[$291>>2]|0;
              $293 = HEAP32[$32>>2]|0;
              $294 = (($293) + ($292))|0;
              __THREW__ = 0;
              invoke_viidddiii(743,($290|0),($4|0),(+$162),(+$205),(+$$033),($294|0),($31|0),($33|0));
              $295 = __THREW__; __THREW__ = 0;
              $296 = $295&1;
              if ($296) {
               break;
              }
              __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
              STACKTOP = sp;return;
             }
            } while(0);
            $226 = ___cxa_find_matching_catch_2()|0;
            $227 = tempRet0;
            $$13 = $226;$$1353 = $227;
            break L46;
           }
          } while(0);
          $175 = ___cxa_find_matching_catch_2()|0;
          $176 = tempRet0;
          $$13 = $175;$$1353 = $176;
         }
        }
       }
      }
     } while(0);
     if ((label|0) == 41) {
      $116 = ___cxa_find_matching_catch_2()|0;
      $117 = tempRet0;
      $$13 = $116;$$1353 = $117;
     }
     __THREW__ = 0;
     invoke_vi(637,($4|0));
     $297 = __THREW__; __THREW__ = 0;
     $298 = $297&1;
     if ($298) {
      $299 = ___cxa_find_matching_catch_3(0|0)|0;
      $300 = tempRet0;
      ___clang_call_terminate($299);
      // unreachable;
     }
     $$15 = $$13;$$1555 = $$1353;
     ___resumeException($$15|0);
     // unreachable;
    }
   }
   $90 = ___cxa_find_matching_catch_2()|0;
   $91 = tempRet0;
   __THREW__ = 0;
   invoke_vi(637,($4|0));
   $92 = __THREW__; __THREW__ = 0;
   $93 = $92&1;
   if ($93) {
    $94 = ___cxa_find_matching_catch_3(0|0)|0;
    $95 = tempRet0;
    ___clang_call_terminate($94);
    // unreachable;
   }
   __THREW__ = 0;
   invoke_vi(637,($6|0));
   $112 = __THREW__; __THREW__ = 0;
   $113 = $112&1;
   if ($113) {
    $299 = ___cxa_find_matching_catch_3(0|0)|0;
    $300 = tempRet0;
    ___clang_call_terminate($299);
    // unreachable;
   } else {
    $$2 = $90;$$242 = $91;
   }
  }
 } while(0);
 if ((label|0) == 37) {
  $110 = ___cxa_find_matching_catch_2()|0;
  $111 = tempRet0;
  $$2 = $110;$$242 = $111;
 }
 __THREW__ = 0;
 invoke_vi(637,($5|0));
 $114 = __THREW__; __THREW__ = 0;
 $115 = $114&1;
 if ($115) {
  $299 = ___cxa_find_matching_catch_3(0|0)|0;
  $300 = tempRet0;
  ___clang_call_terminate($299);
  // unreachable;
 }
 $$15 = $$2;$$1555 = $$242;
 ___resumeException($$15|0);
 // unreachable;
}
function __ZN10LineParser10HandleNextEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$0610 = 0, $$0611 = 0, $$078 = 0, $$079 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (__ZN10LineParser29AdvanceAndCheckEndOfStatementEv($0)|0);
 if (!($4)) {
  $19 = HEAP32[$0>>2]|0;
  $20 = ((($0)) + 4|0);
  __ZN10SourceCode9UpdateForERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($19,$20,$3);
  STACKTOP = sp;return;
 }
 $5 = (___cxa_allocate_exception(36)|0);
 $6 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($1|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  $$0611 = $14;$$079 = $13;
 } else {
  $9 = HEAP32[$2>>2]|0;
  __THREW__ = 0;
  invoke_viii(676,($5|0),($1|0),($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($5|0),(352|0),(7|0));
   $12 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $15 = ___cxa_find_matching_catch_2()|0;
  $16 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($1|0));
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  if ($18) {
   $21 = ___cxa_find_matching_catch_3(0|0)|0;
   $22 = tempRet0;
   ___clang_call_terminate($21);
   // unreachable;
  }
  if ($$0) {
   $$0611 = $16;$$079 = $15;
  } else {
   $$0610 = $16;$$078 = $15;
   ___resumeException($$078|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($5|0));
 $$0610 = $$0611;$$078 = $$079;
 ___resumeException($$078|0);
 // unreachable;
}
function __ZN10LineParser8HandleIfEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$048 = 0, $$049 = 0, $$056 = 0, $$057 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = (__ZN10LineParser23EvaluateExpressionAsIntEb($0,0)|0);
 $3 = ($2|0)!=(0);
 $4 = HEAP32[$0>>2]|0;
 __ZN10SourceCode21SetCurrentIfConditionEb($4,$3);
 $5 = ((($0)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 4|0);
 $8 = ((($7)) + 11|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)<(0);
 if ($10) {
  $11 = ((($0)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $15 = $12;
 } else {
  $13 = $9&255;
  $15 = $13;
 }
 $14 = ($6>>>0)<($15>>>0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 if ($10) {
  $16 = HEAP32[$7>>2]|0;
  $18 = $16;
 } else {
  $18 = $7;
 }
 $17 = (($18) + ($6)|0);
 $19 = HEAP8[$17>>0]|0;
 $20 = ($19<<24>>24)==(44);
 if (!($20)) {
  STACKTOP = sp;return;
 }
 $21 = (___cxa_allocate_exception(36)|0);
 __THREW__ = 0;
 invoke_vii(635,($1|0),($7|0));
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if ($23) {
  $28 = ___cxa_find_matching_catch_2()|0;
  $29 = tempRet0;
  $$049 = $29;$$057 = $28;
 } else {
  $24 = HEAP32[$5>>2]|0;
  __THREW__ = 0;
  invoke_viii(734,($21|0),($1|0),($24|0));
  $25 = __THREW__; __THREW__ = 0;
  $26 = $25&1;
  if ($26) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($21|0),(568|0),(7|0));
   $27 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $30 = ___cxa_find_matching_catch_2()|0;
  $31 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($1|0));
  $32 = __THREW__; __THREW__ = 0;
  $33 = $32&1;
  if ($33) {
   $34 = ___cxa_find_matching_catch_3(0|0)|0;
   $35 = tempRet0;
   ___clang_call_terminate($34);
   // unreachable;
  }
  if ($$0) {
   $$049 = $31;$$057 = $30;
  } else {
   $$048 = $31;$$056 = $30;
   ___resumeException($$056|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($21|0));
 $$048 = $$049;$$056 = $$057;
 ___resumeException($$056|0);
 // unreachable;
}
function __ZN10LineParser15HandleDirectiveEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$037 = 0, $$038 = 0, $$045 = 0, $$046 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = (__ZN10LineParser29AdvanceAndCheckEndOfStatementEv($0)|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (___cxa_allocate_exception(36)|0);
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($1|0),($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $12 = ___cxa_find_matching_catch_2()|0;
  $13 = tempRet0;
  $$038 = $13;$$046 = $12;
 } else {
  $7 = ((($0)) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  __THREW__ = 0;
  invoke_viii(676,($3|0),($1|0),($8|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($3|0),(352|0),(7|0));
   $11 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($1|0));
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if ($17) {
   $18 = ___cxa_find_matching_catch_3(0|0)|0;
   $19 = tempRet0;
   ___clang_call_terminate($18);
   // unreachable;
  }
  if ($$0) {
   $$038 = $15;$$046 = $14;
  } else {
   $$037 = $15;$$045 = $14;
   ___resumeException($$045|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($3|0));
 $$037 = $$038;$$045 = $$046;
 ___resumeException($$045|0);
 // unreachable;
}
function __ZN10LineParser11HandleAlignEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i = 0, $$02035 = 0, $$022 = 0, $$022$lpad$bodyZZ2D = 0, $$02434 = 0, $$03$i = 0, $$121 = 0, $$125 = 0, $$22637 = 0, $$238 = 0, $$3 = 0, $$327 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $1 = sp + 36|0;
 $2 = sp + 24|0;
 $3 = sp + 12|0;
 $4 = sp;
 $5 = ((($0)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN10LineParser23EvaluateExpressionAsIntEb($0,0)|0);
 $8 = ($7|0)<(1);
 if (!($8)) {
  $9 = (($7) + -1)|0;
  $10 = $9 & $7;
  $11 = ($10|0)==(0);
  if ($11) {
   while(1) {
    $47 = HEAP32[9090]|0;
    $48 = ($47|0)==(0|0);
    if ($48) {
     label = 20;
     break;
    }
    $49 = ((($47)) + 131072|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = $50 & $9;
    $52 = ($51|0)==(0);
    if ($52) {
     label = 31;
     break;
    }
    __THREW__ = 0;
    invoke_vii(737,($47|0),0);
    $53 = __THREW__; __THREW__ = 0;
    $54 = $53&1;
    if ($54) {
     label = 23;
     break;
    }
   }
   if ((label|0) == 20) {
    ___assert_fail((27040|0),(27084|0),36,(27075|0));
    // unreachable;
   }
   else if ((label|0) == 23) {
    $55 = ___cxa_find_matching_catch_3(488|0)|0;
    $56 = tempRet0;
    $57 = (_llvm_eh_typeid_for((488|0))|0);
    $58 = ($56|0)==($57|0);
    if (!($58)) {
     $$3 = $55;$$327 = $56;
     ___resumeException($$3|0);
     // unreachable;
    }
    $59 = (___cxa_begin_catch(($55|0))|0);
    $60 = ((($0)) + 4|0);
    __THREW__ = 0;
    invoke_vii(635,($3|0),($60|0));
    $61 = __THREW__; __THREW__ = 0;
    $62 = $61&1;
    do {
     if ($62) {
      label = 28;
     } else {
      $63 = ((($59)) + 4|0);
      __THREW__ = 0;
      (invoke_iii(641,($63|0),($3|0))|0);
      $64 = __THREW__; __THREW__ = 0;
      $65 = $64&1;
      if ($65) {
       $73 = ___cxa_find_matching_catch_2()|0;
       $74 = tempRet0;
       __THREW__ = 0;
       invoke_vi(637,($3|0));
       $75 = __THREW__; __THREW__ = 0;
       $76 = $75&1;
       if (!($76)) {
        $$121 = $73;$$125 = $74;
        break;
       }
       $107 = ___cxa_find_matching_catch_3(0|0)|0;
       $108 = tempRet0;
       ___clang_call_terminate($107);
       // unreachable;
      } else {
       __THREW__ = 0;
       invoke_vi(637,($3|0));
       $66 = __THREW__; __THREW__ = 0;
       $67 = $66&1;
       if ($67) {
        label = 28;
        break;
       }
       $68 = HEAP32[$5>>2]|0;
       $69 = ((($59)) + 16|0);
       HEAP32[$69>>2] = $68;
       __THREW__ = 0;
       invoke_v(642);
       $70 = __THREW__; __THREW__ = 0;
       label = 28;
       break;
      }
     }
    } while(0);
    if ((label|0) == 28) {
     $71 = ___cxa_find_matching_catch_2()|0;
     $72 = tempRet0;
     $$121 = $71;$$125 = $72;
    }
    __THREW__ = 0;
    invoke_v(643);
    $77 = __THREW__; __THREW__ = 0;
    $78 = $77&1;
    if ($78) {
     $107 = ___cxa_find_matching_catch_3(0|0)|0;
     $108 = tempRet0;
     ___clang_call_terminate($107);
     // unreachable;
    } else {
     $$3 = $$121;$$327 = $$125;
     ___resumeException($$3|0);
     // unreachable;
    }
   }
   else if ((label|0) == 31) {
    $79 = HEAP32[$5>>2]|0;
    $80 = ((($0)) + 4|0);
    $81 = ((($80)) + 11|0);
    $82 = HEAP8[$81>>0]|0;
    $83 = ($82<<24>>24)<(0);
    if ($83) {
     $84 = ((($0)) + 8|0);
     $85 = HEAP32[$84>>2]|0;
     $88 = $85;
    } else {
     $86 = $82&255;
     $88 = $86;
    }
    $87 = ($79>>>0)<($88>>>0);
    if (!($87)) {
     STACKTOP = sp;return;
    }
    if ($83) {
     $89 = HEAP32[$80>>2]|0;
     $91 = $89;
    } else {
     $91 = $80;
    }
    $90 = (($91) + ($79)|0);
    $92 = HEAP8[$90>>0]|0;
    $93 = ($92<<24>>24)==(44);
    if (!($93)) {
     STACKTOP = sp;return;
    }
    $94 = (___cxa_allocate_exception(36)|0);
    __THREW__ = 0;
    invoke_vii(635,($4|0),($80|0));
    $95 = __THREW__; __THREW__ = 0;
    $96 = $95&1;
    if ($96) {
     $101 = ___cxa_find_matching_catch_2()|0;
     $102 = tempRet0;
     $$22637 = $102;$$238 = $101;
    } else {
     $97 = HEAP32[$5>>2]|0;
     __THREW__ = 0;
     invoke_viii(734,($94|0),($4|0),($97|0));
     $98 = __THREW__; __THREW__ = 0;
     $99 = $98&1;
     if ($99) {
      $$0 = 1;
     } else {
      __THREW__ = 0;
      invoke_viii(644,($94|0),(568|0),(7|0));
      $100 = __THREW__; __THREW__ = 0;
      $$0 = 0;
     }
     $103 = ___cxa_find_matching_catch_2()|0;
     $104 = tempRet0;
     __THREW__ = 0;
     invoke_vi(637,($4|0));
     $105 = __THREW__; __THREW__ = 0;
     $106 = $105&1;
     if ($106) {
      $107 = ___cxa_find_matching_catch_3(0|0)|0;
      $108 = tempRet0;
      ___clang_call_terminate($107);
      // unreachable;
     }
     if ($$0) {
      $$22637 = $104;$$238 = $103;
     } else {
      $$3 = $103;$$327 = $104;
      ___resumeException($$3|0);
      // unreachable;
     }
    }
    ___cxa_free_exception(($94|0));
    $$3 = $$238;$$327 = $$22637;
    ___resumeException($$3|0);
    // unreachable;
   }
  }
 }
 $12 = (___cxa_allocate_exception(36)|0);
 $13 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($2|0),($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $41 = ___cxa_find_matching_catch_2()|0;
  $42 = tempRet0;
  $$02035 = $41;$$02434 = $42;
 } else {
  __THREW__ = 0;
  invoke_vii(635,($1|0),($2|0));
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  L57: do {
   if ($17) {
    $$022 = 1;
    label = 15;
   } else {
    HEAP32[$12>>2] = (4652);
    $18 = ((($12)) + 4|0);
    __THREW__ = 0;
    invoke_vii(635,($18|0),($1|0));
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    do {
     if ($20) {
      $25 = ___cxa_find_matching_catch_2()|0;
      $26 = tempRet0;
      $$0$i = $26;$$03$i = $25;
     } else {
      $21 = ((($12)) + 16|0);
      HEAP32[$21>>2] = $6;
      $22 = ((($12)) + 20|0);
      ;HEAP32[$22>>2]=0|0;HEAP32[$22+4>>2]=0|0;HEAP32[$22+8>>2]=0|0;
      __THREW__ = 0;
      invoke_viii(646,($22|0),(44984|0),0);
      $23 = __THREW__; __THREW__ = 0;
      $24 = $23&1;
      if ($24) {
       $27 = ___cxa_find_matching_catch_2()|0;
       $28 = tempRet0;
       __THREW__ = 0;
       invoke_vi(637,($18|0));
       $29 = __THREW__; __THREW__ = 0;
       $30 = $29&1;
       if (!($30)) {
        $$0$i = $28;$$03$i = $27;
        break;
       }
       $31 = ___cxa_find_matching_catch_3(0|0)|0;
       $32 = tempRet0;
       ___clang_call_terminate($31);
       // unreachable;
      } else {
       $33 = ((($12)) + 32|0);
       HEAP32[$33>>2] = 0;
       __THREW__ = 0;
       invoke_vi(637,($1|0));
       $34 = __THREW__; __THREW__ = 0;
       $35 = $34&1;
       if ($35) {
        $$022 = 1;
        label = 15;
        break L57;
       }
       HEAP32[$12>>2] = (9348);
       __THREW__ = 0;
       invoke_viii(644,($12|0),(1240|0),(7|0));
       $40 = __THREW__; __THREW__ = 0;
       $$022 = 0;
       label = 15;
       break L57;
      }
     }
    } while(0);
    __THREW__ = 0;
    invoke_vi(637,($1|0));
    $36 = __THREW__; __THREW__ = 0;
    $37 = $36&1;
    if ($37) {
     $38 = ___cxa_find_matching_catch_3(0|0)|0;
     $39 = tempRet0;
     ___clang_call_terminate($38);
     // unreachable;
    } else {
     $$022$lpad$bodyZZ2D = 1;$eh$lpad$body$index2Z2D = $$0$i;$eh$lpad$body$indexZ2D = $$03$i;
    }
   }
  } while(0);
  if ((label|0) == 15) {
   $43 = ___cxa_find_matching_catch_2()|0;
   $44 = tempRet0;
   $$022$lpad$bodyZZ2D = $$022;$eh$lpad$body$index2Z2D = $44;$eh$lpad$body$indexZ2D = $43;
  }
  __THREW__ = 0;
  invoke_vi(637,($2|0));
  $45 = __THREW__; __THREW__ = 0;
  $46 = $45&1;
  if ($46) {
   $107 = ___cxa_find_matching_catch_3(0|0)|0;
   $108 = tempRet0;
   ___clang_call_terminate($107);
   // unreachable;
  }
  if ($$022$lpad$bodyZZ2D) {
   $$02035 = $eh$lpad$body$indexZ2D;$$02434 = $eh$lpad$body$index2Z2D;
  } else {
   $$3 = $eh$lpad$body$indexZ2D;$$327 = $eh$lpad$body$index2Z2D;
   ___resumeException($$3|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($12|0));
 $$3 = $$02035;$$327 = $$02434;
 ___resumeException($$3|0);
 // unreachable;
}
function __ZN10LineParser12HandleSkipToEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i = 0, $$0$i46 = 0, $$02351 = 0, $$025 = 0, $$025$lpad$bodyZZ2D = 0, $$027 = 0, $$027$lpad$bodyZZ2D = 0, $$02950 = 0, $$03$i = 0, $$03$i45 = 0, $$12454 = 0, $$13053 = 0, $$2 = 0, $$231 = 0, $$33256 = 0, $$357 = 0, $$4 = 0, $$433 = 0, $$pre = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $eh$lpad$body38$index7Z2D = 0, $eh$lpad$body38$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $1 = sp + 60|0;
 $2 = sp + 48|0;
 $3 = sp + 36|0;
 $4 = sp + 24|0;
 $5 = sp + 12|0;
 $6 = sp;
 $7 = ((($0)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZN10LineParser23EvaluateExpressionAsIntEb($0,0)|0);
 $10 = ($9>>>0)>(65536);
 if ($10) {
  $11 = (___cxa_allocate_exception(36)|0);
  $12 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vii(635,($3|0),($12|0));
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if ($14) {
   $40 = ___cxa_find_matching_catch_2()|0;
   $41 = tempRet0;
   $$02351 = $40;$$02950 = $41;
  } else {
   __THREW__ = 0;
   invoke_vii(635,($2|0),($3|0));
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   L6: do {
    if ($16) {
     $$027 = 1;
     label = 14;
    } else {
     HEAP32[$11>>2] = (4652);
     $17 = ((($11)) + 4|0);
     __THREW__ = 0;
     invoke_vii(635,($17|0),($2|0));
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     do {
      if ($19) {
       $24 = ___cxa_find_matching_catch_2()|0;
       $25 = tempRet0;
       $$0$i46 = $25;$$03$i45 = $24;
      } else {
       $20 = ((($11)) + 16|0);
       HEAP32[$20>>2] = $8;
       $21 = ((($11)) + 20|0);
       ;HEAP32[$21>>2]=0|0;HEAP32[$21+4>>2]=0|0;HEAP32[$21+8>>2]=0|0;
       __THREW__ = 0;
       invoke_viii(646,($21|0),(44984|0),0);
       $22 = __THREW__; __THREW__ = 0;
       $23 = $22&1;
       if ($23) {
        $26 = ___cxa_find_matching_catch_2()|0;
        $27 = tempRet0;
        __THREW__ = 0;
        invoke_vi(637,($17|0));
        $28 = __THREW__; __THREW__ = 0;
        $29 = $28&1;
        if (!($29)) {
         $$0$i46 = $27;$$03$i45 = $26;
         break;
        }
        $30 = ___cxa_find_matching_catch_3(0|0)|0;
        $31 = tempRet0;
        ___clang_call_terminate($30);
        // unreachable;
       } else {
        $32 = ((($11)) + 32|0);
        HEAP32[$32>>2] = 0;
        __THREW__ = 0;
        invoke_vi(637,($2|0));
        $33 = __THREW__; __THREW__ = 0;
        $34 = $33&1;
        if ($34) {
         $$027 = 1;
         label = 14;
         break L6;
        }
        HEAP32[$11>>2] = (7668);
        __THREW__ = 0;
        invoke_viii(644,($11|0),(632|0),(7|0));
        $39 = __THREW__; __THREW__ = 0;
        $$027 = 0;
        label = 14;
        break L6;
       }
      }
     } while(0);
     __THREW__ = 0;
     invoke_vi(637,($2|0));
     $35 = __THREW__; __THREW__ = 0;
     $36 = $35&1;
     if ($36) {
      $37 = ___cxa_find_matching_catch_3(0|0)|0;
      $38 = tempRet0;
      ___clang_call_terminate($37);
      // unreachable;
     } else {
      $$027$lpad$bodyZZ2D = 1;$eh$lpad$body$index2Z2D = $$0$i46;$eh$lpad$body$indexZ2D = $$03$i45;
     }
    }
   } while(0);
   if ((label|0) == 14) {
    $42 = ___cxa_find_matching_catch_2()|0;
    $43 = tempRet0;
    $$027$lpad$bodyZZ2D = $$027;$eh$lpad$body$index2Z2D = $43;$eh$lpad$body$indexZ2D = $42;
   }
   __THREW__ = 0;
   invoke_vi(637,($3|0));
   $44 = __THREW__; __THREW__ = 0;
   $45 = $44&1;
   if ($45) {
    $146 = ___cxa_find_matching_catch_3(0|0)|0;
    $147 = tempRet0;
    ___clang_call_terminate($146);
    // unreachable;
   }
   if ($$027$lpad$bodyZZ2D) {
    $$02351 = $eh$lpad$body$indexZ2D;$$02950 = $eh$lpad$body$index2Z2D;
   } else {
    $$4 = $eh$lpad$body$indexZ2D;$$433 = $eh$lpad$body$index2Z2D;
    ___resumeException($$4|0);
    // unreachable;
   }
  }
  ___cxa_free_exception(($11|0));
  $$4 = $$02351;$$433 = $$02950;
  ___resumeException($$4|0);
  // unreachable;
 }
 $46 = HEAP32[9090]|0;
 $47 = ($46|0)==(0|0);
 if ($47) {
  ___assert_fail((27040|0),(27084|0),36,(27075|0));
  // unreachable;
 }
 $48 = ((($46)) + 131072|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)>($9|0);
 if ($50) {
  $52 = (___cxa_allocate_exception(36)|0);
  $53 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vii(635,($4|0),($53|0));
  $54 = __THREW__; __THREW__ = 0;
  $55 = $54&1;
  if ($55) {
   $81 = ___cxa_find_matching_catch_2()|0;
   $82 = tempRet0;
   $$12454 = $81;$$13053 = $82;
  } else {
   __THREW__ = 0;
   invoke_vii(635,($1|0),($4|0));
   $56 = __THREW__; __THREW__ = 0;
   $57 = $56&1;
   L36: do {
    if ($57) {
     $$025 = 1;
     label = 34;
    } else {
     HEAP32[$52>>2] = (4652);
     $58 = ((($52)) + 4|0);
     __THREW__ = 0;
     invoke_vii(635,($58|0),($1|0));
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     do {
      if ($60) {
       $65 = ___cxa_find_matching_catch_2()|0;
       $66 = tempRet0;
       $$0$i = $66;$$03$i = $65;
      } else {
       $61 = ((($52)) + 16|0);
       HEAP32[$61>>2] = $8;
       $62 = ((($52)) + 20|0);
       ;HEAP32[$62>>2]=0|0;HEAP32[$62+4>>2]=0|0;HEAP32[$62+8>>2]=0|0;
       __THREW__ = 0;
       invoke_viii(646,($62|0),(44984|0),0);
       $63 = __THREW__; __THREW__ = 0;
       $64 = $63&1;
       if ($64) {
        $67 = ___cxa_find_matching_catch_2()|0;
        $68 = tempRet0;
        __THREW__ = 0;
        invoke_vi(637,($58|0));
        $69 = __THREW__; __THREW__ = 0;
        $70 = $69&1;
        if (!($70)) {
         $$0$i = $68;$$03$i = $67;
         break;
        }
        $71 = ___cxa_find_matching_catch_3(0|0)|0;
        $72 = tempRet0;
        ___clang_call_terminate($71);
        // unreachable;
       } else {
        $73 = ((($52)) + 32|0);
        HEAP32[$73>>2] = 0;
        __THREW__ = 0;
        invoke_vi(637,($1|0));
        $74 = __THREW__; __THREW__ = 0;
        $75 = $74&1;
        if ($75) {
         $$025 = 1;
         label = 34;
         break L36;
        }
        HEAP32[$52>>2] = (9324);
        __THREW__ = 0;
        invoke_viii(644,($52|0),(1224|0),(7|0));
        $80 = __THREW__; __THREW__ = 0;
        $$025 = 0;
        label = 34;
        break L36;
       }
      }
     } while(0);
     __THREW__ = 0;
     invoke_vi(637,($1|0));
     $76 = __THREW__; __THREW__ = 0;
     $77 = $76&1;
     if ($77) {
      $78 = ___cxa_find_matching_catch_3(0|0)|0;
      $79 = tempRet0;
      ___clang_call_terminate($78);
      // unreachable;
     } else {
      $$025$lpad$bodyZZ2D = 1;$eh$lpad$body38$index7Z2D = $$0$i;$eh$lpad$body38$indexZ2D = $$03$i;
     }
    }
   } while(0);
   if ((label|0) == 34) {
    $83 = ___cxa_find_matching_catch_2()|0;
    $84 = tempRet0;
    $$025$lpad$bodyZZ2D = $$025;$eh$lpad$body38$index7Z2D = $84;$eh$lpad$body38$indexZ2D = $83;
   }
   __THREW__ = 0;
   invoke_vi(637,($4|0));
   $85 = __THREW__; __THREW__ = 0;
   $86 = $85&1;
   if ($86) {
    $146 = ___cxa_find_matching_catch_3(0|0)|0;
    $147 = tempRet0;
    ___clang_call_terminate($146);
    // unreachable;
   }
   if ($$025$lpad$bodyZZ2D) {
    $$12454 = $eh$lpad$body38$indexZ2D;$$13053 = $eh$lpad$body38$index7Z2D;
   } else {
    $$4 = $eh$lpad$body38$indexZ2D;$$433 = $eh$lpad$body38$index7Z2D;
    ___resumeException($$4|0);
    // unreachable;
   }
  }
  ___cxa_free_exception(($52|0));
  $$4 = $$12454;$$433 = $$13053;
  ___resumeException($$4|0);
  // unreachable;
 }
 $51 = ($46|0)==(0|0);
 if ($51) {
  ___assert_fail((27040|0),(27084|0),36,(27075|0));
  // unreachable;
 } else {
  $88 = $46;
 }
 while(1) {
  $87 = ((($88)) + 131072|0);
  $89 = HEAP32[$87>>2]|0;
  $90 = ($89|0)<($9|0);
  if (!($90)) {
   label = 50;
   break;
  }
  __THREW__ = 0;
  invoke_vii(737,($88|0),0);
  $91 = __THREW__; __THREW__ = 0;
  $92 = $91&1;
  if ($92) {
   label = 42;
   break;
  }
  $$pre = HEAP32[9090]|0;
  $93 = ($$pre|0)==(0|0);
  if ($93) {
   label = 38;
   break;
  } else {
   $88 = $$pre;
  }
 }
 if ((label|0) == 38) {
  ___assert_fail((27040|0),(27084|0),36,(27075|0));
  // unreachable;
 }
 else if ((label|0) == 42) {
  $94 = ___cxa_find_matching_catch_3(488|0)|0;
  $95 = tempRet0;
  $96 = (_llvm_eh_typeid_for((488|0))|0);
  $97 = ($95|0)==($96|0);
  if (!($97)) {
   $$4 = $94;$$433 = $95;
   ___resumeException($$4|0);
   // unreachable;
  }
  $98 = (___cxa_begin_catch(($94|0))|0);
  $99 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vii(635,($5|0),($99|0));
  $100 = __THREW__; __THREW__ = 0;
  $101 = $100&1;
  do {
   if ($101) {
    label = 47;
   } else {
    $102 = ((($98)) + 4|0);
    __THREW__ = 0;
    (invoke_iii(641,($102|0),($5|0))|0);
    $103 = __THREW__; __THREW__ = 0;
    $104 = $103&1;
    if ($104) {
     $112 = ___cxa_find_matching_catch_2()|0;
     $113 = tempRet0;
     __THREW__ = 0;
     invoke_vi(637,($5|0));
     $114 = __THREW__; __THREW__ = 0;
     $115 = $114&1;
     if (!($115)) {
      $$2 = $112;$$231 = $113;
      break;
     }
     $146 = ___cxa_find_matching_catch_3(0|0)|0;
     $147 = tempRet0;
     ___clang_call_terminate($146);
     // unreachable;
    } else {
     __THREW__ = 0;
     invoke_vi(637,($5|0));
     $105 = __THREW__; __THREW__ = 0;
     $106 = $105&1;
     if ($106) {
      label = 47;
      break;
     }
     $107 = HEAP32[$7>>2]|0;
     $108 = ((($98)) + 16|0);
     HEAP32[$108>>2] = $107;
     __THREW__ = 0;
     invoke_v(642);
     $109 = __THREW__; __THREW__ = 0;
     label = 47;
     break;
    }
   }
  } while(0);
  if ((label|0) == 47) {
   $110 = ___cxa_find_matching_catch_2()|0;
   $111 = tempRet0;
   $$2 = $110;$$231 = $111;
  }
  __THREW__ = 0;
  invoke_v(643);
  $116 = __THREW__; __THREW__ = 0;
  $117 = $116&1;
  if ($117) {
   $146 = ___cxa_find_matching_catch_3(0|0)|0;
   $147 = tempRet0;
   ___clang_call_terminate($146);
   // unreachable;
  } else {
   $$4 = $$2;$$433 = $$231;
   ___resumeException($$4|0);
   // unreachable;
  }
 }
 else if ((label|0) == 50) {
  $118 = HEAP32[$7>>2]|0;
  $119 = ((($0)) + 4|0);
  $120 = ((($119)) + 11|0);
  $121 = HEAP8[$120>>0]|0;
  $122 = ($121<<24>>24)<(0);
  if ($122) {
   $123 = ((($0)) + 8|0);
   $124 = HEAP32[$123>>2]|0;
   $127 = $124;
  } else {
   $125 = $121&255;
   $127 = $125;
  }
  $126 = ($118>>>0)<($127>>>0);
  if (!($126)) {
   STACKTOP = sp;return;
  }
  if ($122) {
   $128 = HEAP32[$119>>2]|0;
   $130 = $128;
  } else {
   $130 = $119;
  }
  $129 = (($130) + ($118)|0);
  $131 = HEAP8[$129>>0]|0;
  $132 = ($131<<24>>24)==(44);
  if (!($132)) {
   STACKTOP = sp;return;
  }
  $133 = (___cxa_allocate_exception(36)|0);
  __THREW__ = 0;
  invoke_vii(635,($6|0),($119|0));
  $134 = __THREW__; __THREW__ = 0;
  $135 = $134&1;
  if ($135) {
   $140 = ___cxa_find_matching_catch_2()|0;
   $141 = tempRet0;
   $$33256 = $141;$$357 = $140;
  } else {
   $136 = HEAP32[$7>>2]|0;
   __THREW__ = 0;
   invoke_viii(734,($133|0),($6|0),($136|0));
   $137 = __THREW__; __THREW__ = 0;
   $138 = $137&1;
   if ($138) {
    $$0 = 1;
   } else {
    __THREW__ = 0;
    invoke_viii(644,($133|0),(568|0),(7|0));
    $139 = __THREW__; __THREW__ = 0;
    $$0 = 0;
   }
   $142 = ___cxa_find_matching_catch_2()|0;
   $143 = tempRet0;
   __THREW__ = 0;
   invoke_vi(637,($6|0));
   $144 = __THREW__; __THREW__ = 0;
   $145 = $144&1;
   if ($145) {
    $146 = ___cxa_find_matching_catch_3(0|0)|0;
    $147 = tempRet0;
    ___clang_call_terminate($146);
    // unreachable;
   }
   if ($$0) {
    $$33256 = $143;$$357 = $142;
   } else {
    $$4 = $142;$$433 = $143;
    ___resumeException($$4|0);
    // unreachable;
   }
  }
  ___cxa_free_exception(($133|0));
  $$4 = $$357;$$433 = $$33256;
  ___resumeException($$4|0);
  // unreachable;
 }
}
function __ZN10LineParser10HandleSkipEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i = 0, $$02342 = 0, $$02546 = 0, $$026 = 0, $$026$lpad$bodyZZ2D = 0, $$02841 = 0, $$03$i = 0, $$124 = 0, $$129 = 0, $$33144 = 0, $$345 = 0, $$4 = 0, $$432 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $eh$lpad$body$index2Z2D = 0;
 var $eh$lpad$body$indexZ2D = 0, $lpad$phi$index = 0, $lpad$phi$index7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $1 = sp + 48|0;
 $2 = sp + 36|0;
 $3 = sp + 24|0;
 $4 = sp + 12|0;
 $5 = sp;
 $6 = ((($0)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10LineParser23EvaluateExpressionAsIntEb($0,0)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  $10 = (___cxa_allocate_exception(36)|0);
  $11 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vii(635,($3|0),($11|0));
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if ($13) {
   $39 = ___cxa_find_matching_catch_2()|0;
   $40 = tempRet0;
   $$02342 = $39;$$02841 = $40;
  } else {
   __THREW__ = 0;
   invoke_vii(635,($2|0),($3|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   L6: do {
    if ($15) {
     $$026 = 1;
     label = 14;
    } else {
     HEAP32[$10>>2] = (4652);
     $16 = ((($10)) + 4|0);
     __THREW__ = 0;
     invoke_vii(635,($16|0),($2|0));
     $17 = __THREW__; __THREW__ = 0;
     $18 = $17&1;
     do {
      if ($18) {
       $23 = ___cxa_find_matching_catch_2()|0;
       $24 = tempRet0;
       $$0$i = $24;$$03$i = $23;
      } else {
       $19 = ((($10)) + 16|0);
       HEAP32[$19>>2] = $7;
       $20 = ((($10)) + 20|0);
       ;HEAP32[$20>>2]=0|0;HEAP32[$20+4>>2]=0|0;HEAP32[$20+8>>2]=0|0;
       __THREW__ = 0;
       invoke_viii(646,($20|0),(44984|0),0);
       $21 = __THREW__; __THREW__ = 0;
       $22 = $21&1;
       if ($22) {
        $25 = ___cxa_find_matching_catch_2()|0;
        $26 = tempRet0;
        __THREW__ = 0;
        invoke_vi(637,($16|0));
        $27 = __THREW__; __THREW__ = 0;
        $28 = $27&1;
        if (!($28)) {
         $$0$i = $26;$$03$i = $25;
         break;
        }
        $29 = ___cxa_find_matching_catch_3(0|0)|0;
        $30 = tempRet0;
        ___clang_call_terminate($29);
        // unreachable;
       } else {
        $31 = ((($10)) + 32|0);
        HEAP32[$31>>2] = 0;
        __THREW__ = 0;
        invoke_vi(637,($2|0));
        $32 = __THREW__; __THREW__ = 0;
        $33 = $32&1;
        if ($33) {
         $$026 = 1;
         label = 14;
         break L6;
        }
        HEAP32[$10>>2] = (7428);
        __THREW__ = 0;
        invoke_viii(644,($10|0),(552|0),(7|0));
        $38 = __THREW__; __THREW__ = 0;
        $$026 = 0;
        label = 14;
        break L6;
       }
      }
     } while(0);
     __THREW__ = 0;
     invoke_vi(637,($2|0));
     $34 = __THREW__; __THREW__ = 0;
     $35 = $34&1;
     if ($35) {
      $36 = ___cxa_find_matching_catch_3(0|0)|0;
      $37 = tempRet0;
      ___clang_call_terminate($36);
      // unreachable;
     } else {
      $$026$lpad$bodyZZ2D = 1;$eh$lpad$body$index2Z2D = $$0$i;$eh$lpad$body$indexZ2D = $$03$i;
     }
    }
   } while(0);
   if ((label|0) == 14) {
    $41 = ___cxa_find_matching_catch_2()|0;
    $42 = tempRet0;
    $$026$lpad$bodyZZ2D = $$026;$eh$lpad$body$index2Z2D = $42;$eh$lpad$body$indexZ2D = $41;
   }
   __THREW__ = 0;
   invoke_vi(637,($3|0));
   $43 = __THREW__; __THREW__ = 0;
   $44 = $43&1;
   if ($44) {
    $164 = ___cxa_find_matching_catch_3(0|0)|0;
    $165 = tempRet0;
    ___clang_call_terminate($164);
    // unreachable;
   }
   if ($$026$lpad$bodyZZ2D) {
    $$02342 = $eh$lpad$body$indexZ2D;$$02841 = $eh$lpad$body$index2Z2D;
   } else {
    $$4 = $eh$lpad$body$indexZ2D;$$432 = $eh$lpad$body$index2Z2D;
    ___resumeException($$4|0);
    // unreachable;
   }
  }
  ___cxa_free_exception(($10|0));
  $$4 = $$02342;$$432 = $$02841;
  ___resumeException($$4|0);
  // unreachable;
 }
 $45 = HEAP32[9088]|0;
 $46 = ($45|0)==(0|0);
 if ($46) {
  ___assert_fail((27040|0),(27060|0),38,(27075|0));
  // unreachable;
 }
 $47 = HEAP32[$45>>2]|0;
 $48 = ($47|0)==(1);
 do {
  if ($48) {
   $49 = ((($45)) + 8|0);
   $50 = HEAP8[$49>>0]|0;
   $51 = ($50<<24>>24)==(0);
   if (!($51)) {
    $52 = HEAP32[9960]|0;
    $53 = ((($52)) + -12|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = (39840 + ($54)|0);
    $56 = ((($55)) + 4|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = $57 | 16384;
    HEAP32[$56>>2] = $58;
    $59 = HEAP32[9960]|0;
    $60 = ((($59)) + -12|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = (39840 + ($61)|0);
    $63 = ((($62)) + 4|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = $64 & -75;
    $66 = $65 | 8;
    HEAP32[$63>>2] = $66;
    $67 = HEAP32[9960]|0;
    $68 = ((($67)) + -12|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = (39840 + ($69)|0);
    $71 = ((($70)) + 76|0);
    HEAP32[$71>>2] = 48;
    (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(39840,27661,5)|0);
    $72 = HEAP32[9960]|0;
    $73 = ((($72)) + -12|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (39840 + ($74)|0);
    $76 = ((($75)) + 12|0);
    HEAP32[$76>>2] = 4;
    $77 = HEAP32[9090]|0;
    $78 = ($77|0)==(0|0);
    if ($78) {
     ___assert_fail((27040|0),(27084|0),36,(27075|0));
     // unreachable;
    }
    $79 = ((($77)) + 131072|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi(39840,$80)|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ((($82)) + -12|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = (($81) + ($84)|0);
    $86 = (__ZNKSt3__28ios_base6getlocEv($85)|0);
    HEAP32[$1>>2] = $86;
    __THREW__ = 0;
    $87 = (invoke_iii(659,($1|0),(40712|0))|0);
    $88 = __THREW__; __THREW__ = 0;
    $89 = $88&1;
    if (!($89)) {
     $90 = HEAP32[$87>>2]|0;
     $91 = ((($90)) + 28|0);
     $92 = HEAP32[$91>>2]|0;
     __THREW__ = 0;
     $93 = (invoke_iii($92|0,($87|0),10)|0);
     $94 = __THREW__; __THREW__ = 0;
     $95 = $94&1;
     if (!($95)) {
      __ZNSt3__26localeD2Ev($1);
      (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($81,$93)|0);
      (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($81)|0);
      break;
     }
    }
    $96 = ___cxa_find_matching_catch_2()|0;
    $97 = tempRet0;
    __THREW__ = 0;
    invoke_vi(660,($1|0));
    $98 = __THREW__; __THREW__ = 0;
    $99 = $98&1;
    if ($99) {
     $100 = ___cxa_find_matching_catch_3(0|0)|0;
     $101 = tempRet0;
     ___clang_call_terminate($100);
     // unreachable;
    } else {
     ___resumeException($96|0);
     // unreachable;
    }
   }
  }
 } while(0);
 $102 = ($8|0)>(0);
 L45: do {
  if ($102) {
   $$02546 = 0;
   while(1) {
    $113 = HEAP32[9090]|0;
    $114 = ($113|0)==(0|0);
    if ($114) {
     label = 36;
     break;
    }
    __THREW__ = 0;
    invoke_vii(737,($113|0),0);
    $118 = __THREW__; __THREW__ = 0;
    $119 = $118&1;
    if ($119) {
     label = 38;
     break;
    }
    $144 = (($$02546) + 1)|0;
    $145 = ($144|0)<($8|0);
    if ($145) {
     $$02546 = $144;
    } else {
     break L45;
    }
   }
   if ((label|0) == 36) {
    __THREW__ = 0;
    invoke_viiii(680,(27040|0),(27084|0),36,(27075|0));
    $115 = __THREW__; __THREW__ = 0;
    $116 = ___cxa_find_matching_catch_3(488|0)|0;
    $117 = tempRet0;
    $lpad$phi$index = $116;$lpad$phi$index7 = $117;
   }
   else if ((label|0) == 38) {
    $120 = ___cxa_find_matching_catch_3(488|0)|0;
    $121 = tempRet0;
    $lpad$phi$index = $120;$lpad$phi$index7 = $121;
   }
   $122 = (_llvm_eh_typeid_for((488|0))|0);
   $123 = ($lpad$phi$index7|0)==($122|0);
   if (!($123)) {
    $$4 = $lpad$phi$index;$$432 = $lpad$phi$index7;
    ___resumeException($$4|0);
    // unreachable;
   }
   $124 = (___cxa_begin_catch(($lpad$phi$index|0))|0);
   $125 = ((($0)) + 4|0);
   __THREW__ = 0;
   invoke_vii(635,($4|0),($125|0));
   $126 = __THREW__; __THREW__ = 0;
   $127 = $126&1;
   do {
    if ($127) {
     label = 44;
    } else {
     $128 = ((($124)) + 4|0);
     __THREW__ = 0;
     (invoke_iii(641,($128|0),($4|0))|0);
     $129 = __THREW__; __THREW__ = 0;
     $130 = $129&1;
     if ($130) {
      $138 = ___cxa_find_matching_catch_2()|0;
      $139 = tempRet0;
      __THREW__ = 0;
      invoke_vi(637,($4|0));
      $140 = __THREW__; __THREW__ = 0;
      $141 = $140&1;
      if (!($141)) {
       $$124 = $138;$$129 = $139;
       break;
      }
      $164 = ___cxa_find_matching_catch_3(0|0)|0;
      $165 = tempRet0;
      ___clang_call_terminate($164);
      // unreachable;
     } else {
      __THREW__ = 0;
      invoke_vi(637,($4|0));
      $131 = __THREW__; __THREW__ = 0;
      $132 = $131&1;
      if ($132) {
       label = 44;
       break;
      }
      $133 = HEAP32[$6>>2]|0;
      $134 = ((($124)) + 16|0);
      HEAP32[$134>>2] = $133;
      __THREW__ = 0;
      invoke_v(642);
      $135 = __THREW__; __THREW__ = 0;
      label = 44;
      break;
     }
    }
   } while(0);
   if ((label|0) == 44) {
    $136 = ___cxa_find_matching_catch_2()|0;
    $137 = tempRet0;
    $$124 = $136;$$129 = $137;
   }
   __THREW__ = 0;
   invoke_v(643);
   $142 = __THREW__; __THREW__ = 0;
   $143 = $142&1;
   if ($143) {
    $164 = ___cxa_find_matching_catch_3(0|0)|0;
    $165 = tempRet0;
    ___clang_call_terminate($164);
    // unreachable;
   } else {
    $$4 = $$124;$$432 = $$129;
    ___resumeException($$4|0);
    // unreachable;
   }
  }
 } while(0);
 $103 = HEAP32[$6>>2]|0;
 $104 = ((($0)) + 4|0);
 $105 = ((($104)) + 11|0);
 $106 = HEAP8[$105>>0]|0;
 $107 = ($106<<24>>24)<(0);
 if ($107) {
  $108 = ((($0)) + 8|0);
  $109 = HEAP32[$108>>2]|0;
  $112 = $109;
 } else {
  $110 = $106&255;
  $112 = $110;
 }
 $111 = ($103>>>0)<($112>>>0);
 if (!($111)) {
  STACKTOP = sp;return;
 }
 if ($107) {
  $146 = HEAP32[$104>>2]|0;
  $148 = $146;
 } else {
  $148 = $104;
 }
 $147 = (($148) + ($103)|0);
 $149 = HEAP8[$147>>0]|0;
 $150 = ($149<<24>>24)==(44);
 if (!($150)) {
  STACKTOP = sp;return;
 }
 $151 = (___cxa_allocate_exception(36)|0);
 __THREW__ = 0;
 invoke_vii(635,($5|0),($104|0));
 $152 = __THREW__; __THREW__ = 0;
 $153 = $152&1;
 if ($153) {
  $158 = ___cxa_find_matching_catch_2()|0;
  $159 = tempRet0;
  $$33144 = $159;$$345 = $158;
 } else {
  $154 = HEAP32[$6>>2]|0;
  __THREW__ = 0;
  invoke_viii(734,($151|0),($5|0),($154|0));
  $155 = __THREW__; __THREW__ = 0;
  $156 = $155&1;
  if ($156) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($151|0),(568|0),(7|0));
   $157 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $160 = ___cxa_find_matching_catch_2()|0;
  $161 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($5|0));
  $162 = __THREW__; __THREW__ = 0;
  $163 = $162&1;
  if ($163) {
   $164 = ___cxa_find_matching_catch_3(0|0)|0;
   $165 = tempRet0;
   ___clang_call_terminate($164);
   // unreachable;
  }
  if ($$0) {
   $$33144 = $161;$$345 = $160;
  } else {
   $$4 = $160;$$432 = $161;
   ___resumeException($$4|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($151|0));
 $$4 = $$345;$$432 = $$33144;
 ___resumeException($$4|0);
 // unreachable;
}
function __ZN10LineParser11HandleGuardEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$010 = 0, $$01218 = 0, $$01417 = 0, $$11321 = 0, $$11520 = 0, $$2 = 0, $$216 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 12|0;
 $2 = sp;
 $3 = (__ZN10LineParser23EvaluateExpressionAsIntEb($0,0)|0);
 $4 = ($3>>>0)>(65535);
 if ($4) {
  $5 = (___cxa_allocate_exception(36)|0);
  $6 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vii(635,($1|0),($6|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   $14 = ___cxa_find_matching_catch_2()|0;
   $15 = tempRet0;
   $$01218 = $15;$$01417 = $14;
  } else {
   $9 = ((($0)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   __THREW__ = 0;
   invoke_viii(733,($5|0),($1|0),($10|0));
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if ($12) {
    $$010 = 1;
   } else {
    __THREW__ = 0;
    invoke_viii(644,($5|0),(1112|0),(7|0));
    $13 = __THREW__; __THREW__ = 0;
    $$010 = 0;
   }
   $16 = ___cxa_find_matching_catch_2()|0;
   $17 = tempRet0;
   __THREW__ = 0;
   invoke_vi(637,($1|0));
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   if ($19) {
    $51 = ___cxa_find_matching_catch_3(0|0)|0;
    $52 = tempRet0;
    ___clang_call_terminate($51);
    // unreachable;
   }
   if ($$010) {
    $$01218 = $17;$$01417 = $16;
   } else {
    $$2 = $17;$$216 = $16;
    ___resumeException($$216|0);
    // unreachable;
   }
  }
  ___cxa_free_exception(($5|0));
  $$2 = $$01218;$$216 = $$01417;
  ___resumeException($$216|0);
  // unreachable;
 }
 $20 = HEAP32[9090]|0;
 $21 = ($20|0)==(0|0);
 if ($21) {
  ___assert_fail((27040|0),(27084|0),36,(27075|0));
  // unreachable;
 }
 __ZN10ObjectCode8SetGuardEi($20,$3);
 $22 = ((($0)) + 16|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($0)) + 4|0);
 $25 = ((($24)) + 11|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = ($26<<24>>24)<(0);
 if ($27) {
  $28 = ((($0)) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $32 = $29;
 } else {
  $30 = $26&255;
  $32 = $30;
 }
 $31 = ($23>>>0)<($32>>>0);
 if (!($31)) {
  STACKTOP = sp;return;
 }
 if ($27) {
  $33 = HEAP32[$24>>2]|0;
  $35 = $33;
 } else {
  $35 = $24;
 }
 $34 = (($35) + ($23)|0);
 $36 = HEAP8[$34>>0]|0;
 $37 = ($36<<24>>24)==(44);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $38 = (___cxa_allocate_exception(36)|0);
 __THREW__ = 0;
 invoke_vii(635,($2|0),($24|0));
 $39 = __THREW__; __THREW__ = 0;
 $40 = $39&1;
 if ($40) {
  $45 = ___cxa_find_matching_catch_2()|0;
  $46 = tempRet0;
  $$11321 = $46;$$11520 = $45;
 } else {
  $41 = HEAP32[$22>>2]|0;
  __THREW__ = 0;
  invoke_viii(734,($38|0),($2|0),($41|0));
  $42 = __THREW__; __THREW__ = 0;
  $43 = $42&1;
  if ($43) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($38|0),(568|0),(7|0));
   $44 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $47 = ___cxa_find_matching_catch_2()|0;
  $48 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($2|0));
  $49 = __THREW__; __THREW__ = 0;
  $50 = $49&1;
  if ($50) {
   $51 = ___cxa_find_matching_catch_3(0|0)|0;
   $52 = tempRet0;
   ___clang_call_terminate($51);
   // unreachable;
  }
  if ($$0) {
   $$11321 = $48;$$11520 = $47;
  } else {
   $$2 = $48;$$216 = $47;
   ___resumeException($$216|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($38|0));
 $$2 = $$11321;$$216 = $$11520;
 ___resumeException($$216|0);
 // unreachable;
}
function __ZN10LineParser11HandleClearEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$020 = 0, $$02237 = 0, $$024 = 0, $$026 = 0, $$02836 = 0, $$12340 = 0, $$12939 = 0, $$23042 = 0, $$243 = 0, $$33145 = 0, $$346 = 0, $$5 = 0, $$533 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $1 = sp + 36|0;
 $2 = sp + 24|0;
 $3 = sp + 12|0;
 $4 = sp;
 $5 = (__ZN10LineParser23EvaluateExpressionAsIntEb($0,0)|0);
 $6 = ($5>>>0)>(65535);
 if ($6) {
  $7 = (___cxa_allocate_exception(36)|0);
  $8 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vii(635,($1|0),($8|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $16 = ___cxa_find_matching_catch_2()|0;
   $17 = tempRet0;
   $$02237 = $16;$$02836 = $17;
  } else {
   $11 = ((($0)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   __THREW__ = 0;
   invoke_viii(733,($7|0),($1|0),($12|0));
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    $$026 = 1;
   } else {
    __THREW__ = 0;
    invoke_viii(644,($7|0),(1112|0),(7|0));
    $15 = __THREW__; __THREW__ = 0;
    $$026 = 0;
   }
   $18 = ___cxa_find_matching_catch_2()|0;
   $19 = tempRet0;
   __THREW__ = 0;
   invoke_vi(637,($1|0));
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if ($21) {
    $95 = ___cxa_find_matching_catch_3(0|0)|0;
    $96 = tempRet0;
    ___clang_call_terminate($95);
    // unreachable;
   }
   if ($$026) {
    $$02237 = $18;$$02836 = $19;
   } else {
    $$5 = $18;$$533 = $19;
    ___resumeException($$5|0);
    // unreachable;
   }
  }
  ___cxa_free_exception(($7|0));
  $$5 = $$02237;$$533 = $$02836;
  ___resumeException($$5|0);
  // unreachable;
 }
 $22 = ((($0)) + 16|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($0)) + 4|0);
 $25 = ((($24)) + 11|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = ($26<<24>>24)<(0);
 if ($27) {
  $28 = ((($0)) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $32 = $29;
 } else {
  $30 = $26&255;
  $32 = $30;
 }
 $31 = ($23>>>0)<($32>>>0);
 if ($31) {
  if ($27) {
   $33 = HEAP32[$24>>2]|0;
   $35 = $33;
  } else {
   $35 = $24;
  }
  $34 = (($35) + ($23)|0);
  $36 = HEAP8[$34>>0]|0;
  $37 = ($36<<24>>24)==(44);
  if ($37) {
   $51 = (($23) + 1)|0;
   HEAP32[$22>>2] = $51;
   $52 = (__ZN10LineParser23EvaluateExpressionAsIntEb($0,0)|0);
   $53 = ($52>>>0)>(65536);
   if ($53) {
    $54 = (___cxa_allocate_exception(36)|0);
    __THREW__ = 0;
    invoke_vii(635,($3|0),($24|0));
    $55 = __THREW__; __THREW__ = 0;
    $56 = $55&1;
    if ($56) {
     $61 = ___cxa_find_matching_catch_2()|0;
     $62 = tempRet0;
     $$23042 = $62;$$243 = $61;
    } else {
     $57 = HEAP32[$22>>2]|0;
     __THREW__ = 0;
     invoke_viii(733,($54|0),($3|0),($57|0));
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      $$020 = 1;
     } else {
      __THREW__ = 0;
      invoke_viii(644,($54|0),(1112|0),(7|0));
      $60 = __THREW__; __THREW__ = 0;
      $$020 = 0;
     }
     $63 = ___cxa_find_matching_catch_2()|0;
     $64 = tempRet0;
     __THREW__ = 0;
     invoke_vi(637,($3|0));
     $65 = __THREW__; __THREW__ = 0;
     $66 = $65&1;
     if ($66) {
      $95 = ___cxa_find_matching_catch_3(0|0)|0;
      $96 = tempRet0;
      ___clang_call_terminate($95);
      // unreachable;
     }
     if ($$020) {
      $$23042 = $64;$$243 = $63;
     } else {
      $$5 = $63;$$533 = $64;
      ___resumeException($$5|0);
      // unreachable;
     }
    }
    ___cxa_free_exception(($54|0));
    $$5 = $$243;$$533 = $$23042;
    ___resumeException($$5|0);
    // unreachable;
   }
   $67 = HEAP32[9090]|0;
   $68 = ($67|0)==(0|0);
   if ($68) {
    ___assert_fail((27040|0),(27084|0),36,(27075|0));
    // unreachable;
   }
   __ZN10ObjectCode5ClearEiib($67,$5,$52,1);
   $69 = HEAP32[$22>>2]|0;
   $70 = HEAP8[$25>>0]|0;
   $71 = ($70<<24>>24)<(0);
   if ($71) {
    $72 = ((($0)) + 8|0);
    $73 = HEAP32[$72>>2]|0;
    $76 = $73;
   } else {
    $74 = $70&255;
    $76 = $74;
   }
   $75 = ($69>>>0)<($76>>>0);
   if (!($75)) {
    STACKTOP = sp;return;
   }
   if ($71) {
    $77 = HEAP32[$24>>2]|0;
    $79 = $77;
   } else {
    $79 = $24;
   }
   $78 = (($79) + ($69)|0);
   $80 = HEAP8[$78>>0]|0;
   $81 = ($80<<24>>24)==(44);
   if (!($81)) {
    STACKTOP = sp;return;
   }
   $82 = (___cxa_allocate_exception(36)|0);
   __THREW__ = 0;
   invoke_vii(635,($4|0),($24|0));
   $83 = __THREW__; __THREW__ = 0;
   $84 = $83&1;
   if ($84) {
    $89 = ___cxa_find_matching_catch_2()|0;
    $90 = tempRet0;
    $$33145 = $90;$$346 = $89;
   } else {
    $85 = HEAP32[$22>>2]|0;
    __THREW__ = 0;
    invoke_viii(734,($82|0),($4|0),($85|0));
    $86 = __THREW__; __THREW__ = 0;
    $87 = $86&1;
    if ($87) {
     $$0 = 1;
    } else {
     __THREW__ = 0;
     invoke_viii(644,($82|0),(568|0),(7|0));
     $88 = __THREW__; __THREW__ = 0;
     $$0 = 0;
    }
    $91 = ___cxa_find_matching_catch_2()|0;
    $92 = tempRet0;
    __THREW__ = 0;
    invoke_vi(637,($4|0));
    $93 = __THREW__; __THREW__ = 0;
    $94 = $93&1;
    if ($94) {
     $95 = ___cxa_find_matching_catch_3(0|0)|0;
     $96 = tempRet0;
     ___clang_call_terminate($95);
     // unreachable;
    }
    if ($$0) {
     $$33145 = $92;$$346 = $91;
    } else {
     $$5 = $91;$$533 = $92;
     ___resumeException($$5|0);
     // unreachable;
    }
   }
   ___cxa_free_exception(($82|0));
   $$5 = $$346;$$533 = $$33145;
   ___resumeException($$5|0);
   // unreachable;
  }
 }
 $38 = (___cxa_allocate_exception(36)|0);
 __THREW__ = 0;
 invoke_vii(635,($2|0),($24|0));
 $39 = __THREW__; __THREW__ = 0;
 $40 = $39&1;
 if ($40) {
  $45 = ___cxa_find_matching_catch_2()|0;
  $46 = tempRet0;
  $$12340 = $45;$$12939 = $46;
 } else {
  $41 = HEAP32[$22>>2]|0;
  __THREW__ = 0;
  invoke_viii(676,($38|0),($2|0),($41|0));
  $42 = __THREW__; __THREW__ = 0;
  $43 = $42&1;
  if ($43) {
   $$024 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($38|0),(352|0),(7|0));
   $44 = __THREW__; __THREW__ = 0;
   $$024 = 0;
  }
  $47 = ___cxa_find_matching_catch_2()|0;
  $48 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($2|0));
  $49 = __THREW__; __THREW__ = 0;
  $50 = $49&1;
  if ($50) {
   $95 = ___cxa_find_matching_catch_3(0|0)|0;
   $96 = tempRet0;
   ___clang_call_terminate($95);
   // unreachable;
  }
  if ($$024) {
   $$12340 = $47;$$12939 = $48;
  } else {
   $$5 = $47;$$533 = $48;
   ___resumeException($$5|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($38|0));
 $$5 = $$12340;$$533 = $$12939;
 ___resumeException($$5|0);
 // unreachable;
}
function __ZN10LineParser12HandleIncBinEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$01735 = 0, $$019 = 0, $$02134 = 0, $$029 = 0, $$031 = 0, $$11838 = 0, $$12237 = 0, $$22340 = 0, $$241 = 0, $$3 = 0, $$324 = 0, $$4 = 0, $$425 = 0, $$52643 = 0, $$544 = 0, $$7 = 0, $$728 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $1 = sp + 60|0;
 $2 = sp + 48|0;
 $3 = sp + 36|0;
 $4 = sp + 24|0;
 $5 = sp + 12|0;
 $6 = sp;
 $7 = (__ZN10LineParser29AdvanceAndCheckEndOfStatementEv($0)|0);
 if (!($7)) {
  $8 = (___cxa_allocate_exception(36)|0);
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vii(635,($1|0),($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $17 = ___cxa_find_matching_catch_2()|0;
   $18 = tempRet0;
   $$01735 = $17;$$02134 = $18;
  } else {
   $12 = ((($0)) + 16|0);
   $13 = HEAP32[$12>>2]|0;
   __THREW__ = 0;
   invoke_viii(735,($8|0),($1|0),($13|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $$031 = 1;
   } else {
    __THREW__ = 0;
    invoke_viii(644,($8|0),(432|0),(7|0));
    $16 = __THREW__; __THREW__ = 0;
    $$031 = 0;
   }
   $19 = ___cxa_find_matching_catch_2()|0;
   $20 = tempRet0;
   __THREW__ = 0;
   invoke_vi(637,($1|0));
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   if ($22) {
    $127 = ___cxa_find_matching_catch_3(0|0)|0;
    $128 = tempRet0;
    ___clang_call_terminate($127);
    // unreachable;
   }
   if ($$031) {
    $$01735 = $19;$$02134 = $20;
   } else {
    $$7 = $19;$$728 = $20;
    ___resumeException($$7|0);
    // unreachable;
   }
  }
  ___cxa_free_exception(($8|0));
  $$7 = $$01735;$$728 = $$02134;
  ___resumeException($$7|0);
  // unreachable;
 }
 $23 = ((($0)) + 16|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($0)) + 4|0);
 $26 = ((($25)) + 11|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = ($27<<24>>24)<(0);
 if ($28) {
  $29 = ((($0)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $33 = $30;
 } else {
  $31 = $27&255;
  $33 = $31;
 }
 $32 = ($24>>>0)<($33>>>0);
 if ($32) {
  if ($28) {
   $34 = HEAP32[$25>>2]|0;
   $36 = $34;
  } else {
   $36 = $25;
  }
  $35 = (($36) + ($24)|0);
  $37 = HEAP8[$35>>0]|0;
  $38 = ($37<<24>>24)==(34);
  if ($38) {
   $52 = (($24) + 1)|0;
   $53 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcj($25,34,$52)|0);
   $54 = ($53|0)==(-1);
   if ($54) {
    $55 = (___cxa_allocate_exception(36)|0);
    __THREW__ = 0;
    invoke_vii(635,($3|0),($25|0));
    $56 = __THREW__; __THREW__ = 0;
    $57 = $56&1;
    if ($57) {
     $67 = ___cxa_find_matching_catch_2()|0;
     $68 = tempRet0;
     $$22340 = $68;$$241 = $67;
    } else {
     $58 = HEAP8[$26>>0]|0;
     $59 = ($58<<24>>24)<(0);
     if ($59) {
      $60 = ((($0)) + 8|0);
      $61 = HEAP32[$60>>2]|0;
      $63 = $61;
     } else {
      $62 = $58&255;
      $63 = $62;
     }
     __THREW__ = 0;
     invoke_viii(732,($55|0),($3|0),($63|0));
     $64 = __THREW__; __THREW__ = 0;
     $65 = $64&1;
     if ($65) {
      $$019 = 1;
     } else {
      __THREW__ = 0;
      invoke_viii(644,($55|0),(1128|0),(7|0));
      $66 = __THREW__; __THREW__ = 0;
      $$019 = 0;
     }
     $69 = ___cxa_find_matching_catch_2()|0;
     $70 = tempRet0;
     __THREW__ = 0;
     invoke_vi(637,($3|0));
     $71 = __THREW__; __THREW__ = 0;
     $72 = $71&1;
     if ($72) {
      $127 = ___cxa_find_matching_catch_3(0|0)|0;
      $128 = tempRet0;
      ___clang_call_terminate($127);
      // unreachable;
     }
     if ($$019) {
      $$22340 = $70;$$241 = $69;
     } else {
      $$7 = $69;$$728 = $70;
      ___resumeException($$7|0);
      // unreachable;
     }
    }
    ___cxa_free_exception(($55|0));
    $$7 = $$241;$$728 = $$22340;
    ___resumeException($$7|0);
    // unreachable;
   }
   $73 = HEAP32[$23>>2]|0;
   $74 = (($73) + 1)|0;
   $75 = (($53) + -1)|0;
   $76 = (($75) - ($73))|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($4,$25,$74,$76,$25);
   $77 = HEAP32[9090]|0;
   $78 = ($77|0)==(0|0);
   if ($78) {
    __THREW__ = 0;
    invoke_viiii(680,(27040|0),(27084|0),36,(27075|0));
    $79 = __THREW__; __THREW__ = 0;
   } else {
    $80 = ((($4)) + 11|0);
    $81 = HEAP8[$80>>0]|0;
    $82 = ($81<<24>>24)<(0);
    $83 = HEAP32[$4>>2]|0;
    $84 = $82 ? $83 : $4;
    __THREW__ = 0;
    invoke_vii(744,($77|0),($84|0));
    $85 = __THREW__; __THREW__ = 0;
    $86 = $85&1;
    if (!($86)) {
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
     $110 = (($53) + 1)|0;
     HEAP32[$23>>2] = $110;
     $111 = (__ZN10LineParser29AdvanceAndCheckEndOfStatementEv($0)|0);
     if (!($111)) {
      STACKTOP = sp;return;
     }
     $114 = (___cxa_allocate_exception(36)|0);
     __THREW__ = 0;
     invoke_vii(635,($6|0),($25|0));
     $115 = __THREW__; __THREW__ = 0;
     $116 = $115&1;
     if ($116) {
      $121 = ___cxa_find_matching_catch_2()|0;
      $122 = tempRet0;
      $$52643 = $122;$$544 = $121;
     } else {
      $117 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      invoke_viii(676,($114|0),($6|0),($117|0));
      $118 = __THREW__; __THREW__ = 0;
      $119 = $118&1;
      if ($119) {
       $$0 = 1;
      } else {
       __THREW__ = 0;
       invoke_viii(644,($114|0),(352|0),(7|0));
       $120 = __THREW__; __THREW__ = 0;
       $$0 = 0;
      }
      $123 = ___cxa_find_matching_catch_2()|0;
      $124 = tempRet0;
      __THREW__ = 0;
      invoke_vi(637,($6|0));
      $125 = __THREW__; __THREW__ = 0;
      $126 = $125&1;
      if ($126) {
       $127 = ___cxa_find_matching_catch_3(0|0)|0;
       $128 = tempRet0;
       ___clang_call_terminate($127);
       // unreachable;
      }
      if ($$0) {
       $$52643 = $124;$$544 = $123;
      } else {
       $$7 = $123;$$728 = $124;
       ___resumeException($$7|0);
       // unreachable;
      }
     }
     ___cxa_free_exception(($114|0));
     $$7 = $$544;$$728 = $$52643;
     ___resumeException($$7|0);
     // unreachable;
    }
   }
   $87 = ___cxa_find_matching_catch_3(488|0)|0;
   $88 = tempRet0;
   $89 = (_llvm_eh_typeid_for((488|0))|0);
   $90 = ($88|0)==($89|0);
   if ($90) {
    $91 = (___cxa_begin_catch(($87|0))|0);
    __THREW__ = 0;
    invoke_vii(635,($5|0),($25|0));
    $92 = __THREW__; __THREW__ = 0;
    $93 = $92&1;
    do {
     if ($93) {
      label = 43;
     } else {
      $94 = ((($91)) + 4|0);
      __THREW__ = 0;
      (invoke_iii(641,($94|0),($5|0))|0);
      $95 = __THREW__; __THREW__ = 0;
      $96 = $95&1;
      if ($96) {
       $104 = ___cxa_find_matching_catch_2()|0;
       $105 = tempRet0;
       __THREW__ = 0;
       invoke_vi(637,($5|0));
       $106 = __THREW__; __THREW__ = 0;
       $107 = $106&1;
       if (!($107)) {
        $$3 = $104;$$324 = $105;
        break;
       }
       $127 = ___cxa_find_matching_catch_3(0|0)|0;
       $128 = tempRet0;
       ___clang_call_terminate($127);
       // unreachable;
      } else {
       __THREW__ = 0;
       invoke_vi(637,($5|0));
       $97 = __THREW__; __THREW__ = 0;
       $98 = $97&1;
       if ($98) {
        label = 43;
        break;
       }
       $99 = HEAP32[$23>>2]|0;
       $100 = ((($91)) + 16|0);
       HEAP32[$100>>2] = $99;
       __THREW__ = 0;
       invoke_v(642);
       $101 = __THREW__; __THREW__ = 0;
       label = 43;
       break;
      }
     }
    } while(0);
    if ((label|0) == 43) {
     $102 = ___cxa_find_matching_catch_2()|0;
     $103 = tempRet0;
     $$3 = $102;$$324 = $103;
    }
    __THREW__ = 0;
    invoke_v(643);
    $108 = __THREW__; __THREW__ = 0;
    $109 = $108&1;
    if ($109) {
     $127 = ___cxa_find_matching_catch_3(0|0)|0;
     $128 = tempRet0;
     ___clang_call_terminate($127);
     // unreachable;
    } else {
     $$4 = $$3;$$425 = $$324;
    }
   } else {
    $$4 = $87;$$425 = $88;
   }
   __THREW__ = 0;
   invoke_vi(637,($4|0));
   $112 = __THREW__; __THREW__ = 0;
   $113 = $112&1;
   if ($113) {
    $127 = ___cxa_find_matching_catch_3(0|0)|0;
    $128 = tempRet0;
    ___clang_call_terminate($127);
    // unreachable;
   }
   $$7 = $$4;$$728 = $$425;
   ___resumeException($$7|0);
   // unreachable;
  }
 }
 $39 = (___cxa_allocate_exception(36)|0);
 __THREW__ = 0;
 invoke_vii(635,($2|0),($25|0));
 $40 = __THREW__; __THREW__ = 0;
 $41 = $40&1;
 if ($41) {
  $46 = ___cxa_find_matching_catch_2()|0;
  $47 = tempRet0;
  $$11838 = $46;$$12237 = $47;
 } else {
  $42 = HEAP32[$23>>2]|0;
  __THREW__ = 0;
  invoke_viii(735,($39|0),($2|0),($42|0));
  $43 = __THREW__; __THREW__ = 0;
  $44 = $43&1;
  if ($44) {
   $$029 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($39|0),(432|0),(7|0));
   $45 = __THREW__; __THREW__ = 0;
   $$029 = 0;
  }
  $48 = ___cxa_find_matching_catch_2()|0;
  $49 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($2|0));
  $50 = __THREW__; __THREW__ = 0;
  $51 = $50&1;
  if ($51) {
   $127 = ___cxa_find_matching_catch_3(0|0)|0;
   $128 = tempRet0;
   ___clang_call_terminate($127);
   // unreachable;
  }
  if ($$029) {
   $$11838 = $48;$$12237 = $49;
  } else {
   $$7 = $48;$$728 = $49;
   ___resumeException($$7|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($39|0));
 $$7 = $$11838;$$728 = $$12237;
 ___resumeException($$7|0);
 // unreachable;
}
function __ZN10LineParser15HandleOpenBraceEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 4|0);
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + -1)|0;
 __ZN10SourceCode9OpenBraceERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($1,$2,$5);
 return;
}
function __ZN10LineParser16HandleCloseBraceEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 4|0);
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + -1)|0;
 __ZN10SourceCode10CloseBraceERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($1,$2,$5);
 return;
}
function __ZN10LineParser13HandleMapCharEv($0) {
 $0 = $0|0;
 var $$045 = 0, $$046 = 0, $$048 = 0, $$050 = 0, $$052 = 0, $$054 = 0, $$055 = 0, $$05774 = 0, $$05973 = 0, $$090 = 0, $$15877 = 0, $$16076 = 0, $$26179 = 0, $$280 = 0, $$36282 = 0, $$383 = 0, $$46385 = 0, $$486 = 0, $$56488 = 0, $$589 = 0;
 var $$7 = 0, $$766 = 0, $$off = 0, $$off67 = 0, $$pre = 0, $$pre91 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $1 = sp + 60|0;
 $2 = sp + 48|0;
 $3 = sp + 36|0;
 $4 = sp + 24|0;
 $5 = sp + 12|0;
 $6 = sp;
 $7 = (__ZN10LineParser23EvaluateExpressionAsIntEb($0,0)|0);
 $8 = ((($0)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($0)) + 4|0);
 $11 = ((($10)) + 11|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)<(0);
 if ($13) {
  $14 = ((($0)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $18 = $15;
 } else {
  $16 = $12&255;
  $18 = $16;
 }
 $17 = ($9>>>0)<($18>>>0);
 if ($17) {
  if ($13) {
   $19 = HEAP32[$10>>2]|0;
   $21 = $19;
  } else {
   $21 = $10;
  }
  $20 = (($21) + ($9)|0);
  $22 = HEAP8[$20>>0]|0;
  $23 = ($22<<24>>24)==(44);
  if ($23) {
   $37 = (($9) + 1)|0;
   HEAP32[$8>>2] = $37;
   $38 = (__ZN10LineParser23EvaluateExpressionAsIntEb($0,0)|0);
   $39 = HEAP32[$8>>2]|0;
   $40 = HEAP8[$11>>0]|0;
   $41 = ($40<<24>>24)<(0);
   if ($41) {
    $42 = ((($0)) + 8|0);
    $43 = HEAP32[$42>>2]|0;
    $46 = $43;
   } else {
    $44 = $40&255;
    $46 = $44;
   }
   $45 = ($39>>>0)<($46>>>0);
   if ($45) {
    if ($41) {
     $47 = HEAP32[$10>>2]|0;
     $49 = $47;
    } else {
     $49 = $10;
    }
    $48 = (($49) + ($39)|0);
    $50 = HEAP8[$48>>0]|0;
    $51 = ($50<<24>>24)==(44);
    if ($51) {
     $52 = (($39) + 1)|0;
     HEAP32[$8>>2] = $52;
     $53 = (__ZN10LineParser23EvaluateExpressionAsIntEb($0,0)|0);
     $$pre = HEAP32[$8>>2]|0;
     $$pre91 = HEAP8[$11>>0]|0;
     $$054 = $53;$54 = $$pre91;$59 = $$pre;
    } else {
     $$054 = -1;$54 = $40;$59 = $39;
    }
   } else {
    $$054 = -1;$54 = $40;$59 = $39;
   }
   $55 = ($54<<24>>24)<(0);
   if ($55) {
    $56 = ((($0)) + 8|0);
    $57 = HEAP32[$56>>2]|0;
    $61 = $57;
   } else {
    $58 = $54&255;
    $61 = $58;
   }
   $60 = ($59>>>0)<($61>>>0);
   if ($60) {
    if ($55) {
     $62 = HEAP32[$10>>2]|0;
     $64 = $62;
    } else {
     $64 = $10;
    }
    $63 = (($64) + ($59)|0);
    $65 = HEAP8[$63>>0]|0;
    $66 = ($65<<24>>24)==(44);
    if ($66) {
     $67 = (___cxa_allocate_exception(36)|0);
     __THREW__ = 0;
     invoke_vii(635,($2|0),($10|0));
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      $74 = ___cxa_find_matching_catch_2()|0;
      $75 = tempRet0;
      $$15877 = $75;$$16076 = $74;
     } else {
      $70 = HEAP32[$8>>2]|0;
      __THREW__ = 0;
      invoke_viii(734,($67|0),($2|0),($70|0));
      $71 = __THREW__; __THREW__ = 0;
      $72 = $71&1;
      if ($72) {
       $$052 = 1;
      } else {
       __THREW__ = 0;
       invoke_viii(644,($67|0),(568|0),(7|0));
       $73 = __THREW__; __THREW__ = 0;
       $$052 = 0;
      }
      $76 = ___cxa_find_matching_catch_2()|0;
      $77 = tempRet0;
      __THREW__ = 0;
      invoke_vi(637,($2|0));
      $78 = __THREW__; __THREW__ = 0;
      $79 = $78&1;
      if ($79) {
       $146 = ___cxa_find_matching_catch_3(0|0)|0;
       $147 = tempRet0;
       ___clang_call_terminate($146);
       // unreachable;
      }
      if ($$052) {
       $$15877 = $77;$$16076 = $76;
      } else {
       $$7 = $77;$$766 = $76;
       ___resumeException($$766|0);
       // unreachable;
      }
     }
     ___cxa_free_exception(($67|0));
     $$7 = $$15877;$$766 = $$16076;
     ___resumeException($$766|0);
     // unreachable;
    }
   }
   $$off = (($7) + -32)|0;
   $80 = ($$off>>>0)>(94);
   if ($80) {
    $81 = (___cxa_allocate_exception(36)|0);
    __THREW__ = 0;
    invoke_vii(635,($3|0),($10|0));
    $82 = __THREW__; __THREW__ = 0;
    $83 = $82&1;
    if ($83) {
     $88 = ___cxa_find_matching_catch_2()|0;
     $89 = tempRet0;
     $$26179 = $88;$$280 = $89;
    } else {
     $84 = HEAP32[$8>>2]|0;
     __THREW__ = 0;
     invoke_viii(733,($81|0),($3|0),($84|0));
     $85 = __THREW__; __THREW__ = 0;
     $86 = $85&1;
     if ($86) {
      $$050 = 1;
     } else {
      __THREW__ = 0;
      invoke_viii(644,($81|0),(1112|0),(7|0));
      $87 = __THREW__; __THREW__ = 0;
      $$050 = 0;
     }
     $90 = ___cxa_find_matching_catch_2()|0;
     $91 = tempRet0;
     __THREW__ = 0;
     invoke_vi(637,($3|0));
     $92 = __THREW__; __THREW__ = 0;
     $93 = $92&1;
     if ($93) {
      $146 = ___cxa_find_matching_catch_3(0|0)|0;
      $147 = tempRet0;
      ___clang_call_terminate($146);
      // unreachable;
     }
     if ($$050) {
      $$26179 = $90;$$280 = $91;
     } else {
      $$7 = $91;$$766 = $90;
      ___resumeException($$766|0);
      // unreachable;
     }
    }
    ___cxa_free_exception(($81|0));
    $$7 = $$280;$$766 = $$26179;
    ___resumeException($$766|0);
    // unreachable;
   }
   $94 = ($$054|0)==(-1);
   if ($94) {
    $95 = ($38>>>0)>(255);
    if (!($95)) {
     $109 = HEAP32[9090]|0;
     $110 = ($109|0)==(0|0);
     if ($110) {
      ___assert_fail((27040|0),(27084|0),36,(27075|0));
      // unreachable;
     }
     __ZN10ObjectCode10SetMappingEii($109,$7,$38);
     STACKTOP = sp;return;
    }
    $96 = (___cxa_allocate_exception(36)|0);
    __THREW__ = 0;
    invoke_vii(635,($4|0),($10|0));
    $97 = __THREW__; __THREW__ = 0;
    $98 = $97&1;
    if ($98) {
     $103 = ___cxa_find_matching_catch_2()|0;
     $104 = tempRet0;
     $$36282 = $103;$$383 = $104;
    } else {
     $99 = HEAP32[$8>>2]|0;
     __THREW__ = 0;
     invoke_viii(733,($96|0),($4|0),($99|0));
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      $$048 = 1;
     } else {
      __THREW__ = 0;
      invoke_viii(644,($96|0),(1112|0),(7|0));
      $102 = __THREW__; __THREW__ = 0;
      $$048 = 0;
     }
     $105 = ___cxa_find_matching_catch_2()|0;
     $106 = tempRet0;
     __THREW__ = 0;
     invoke_vi(637,($4|0));
     $107 = __THREW__; __THREW__ = 0;
     $108 = $107&1;
     if ($108) {
      $146 = ___cxa_find_matching_catch_3(0|0)|0;
      $147 = tempRet0;
      ___clang_call_terminate($146);
      // unreachable;
     }
     if ($$048) {
      $$36282 = $105;$$383 = $106;
     } else {
      $$7 = $106;$$766 = $105;
      ___resumeException($$766|0);
      // unreachable;
     }
    }
    ___cxa_free_exception(($96|0));
    $$7 = $$383;$$766 = $$36282;
    ___resumeException($$766|0);
    // unreachable;
   }
   $$off67 = (($38) + -32)|0;
   $111 = ($$off67>>>0)>(94);
   $112 = ($38|0)<($7|0);
   $or$cond = $112 | $111;
   if ($or$cond) {
    $113 = (___cxa_allocate_exception(36)|0);
    __THREW__ = 0;
    invoke_vii(635,($5|0),($10|0));
    $114 = __THREW__; __THREW__ = 0;
    $115 = $114&1;
    if ($115) {
     $120 = ___cxa_find_matching_catch_2()|0;
     $121 = tempRet0;
     $$46385 = $120;$$486 = $121;
    } else {
     $116 = HEAP32[$8>>2]|0;
     __THREW__ = 0;
     invoke_viii(733,($113|0),($5|0),($116|0));
     $117 = __THREW__; __THREW__ = 0;
     $118 = $117&1;
     if ($118) {
      $$046 = 1;
     } else {
      __THREW__ = 0;
      invoke_viii(644,($113|0),(1112|0),(7|0));
      $119 = __THREW__; __THREW__ = 0;
      $$046 = 0;
     }
     $122 = ___cxa_find_matching_catch_2()|0;
     $123 = tempRet0;
     __THREW__ = 0;
     invoke_vi(637,($5|0));
     $124 = __THREW__; __THREW__ = 0;
     $125 = $124&1;
     if ($125) {
      $146 = ___cxa_find_matching_catch_3(0|0)|0;
      $147 = tempRet0;
      ___clang_call_terminate($146);
      // unreachable;
     }
     if ($$046) {
      $$46385 = $122;$$486 = $123;
     } else {
      $$7 = $123;$$766 = $122;
      ___resumeException($$766|0);
      // unreachable;
     }
    }
    ___cxa_free_exception(($113|0));
    $$7 = $$486;$$766 = $$46385;
    ___resumeException($$766|0);
    // unreachable;
   }
   $126 = ($$054>>>0)>(255);
   if (!($126)) {
    $127 = (($$054) - ($7))|0;
    $$090 = $7;
    while(1) {
     $141 = HEAP32[9090]|0;
     $142 = ($141|0)==(0|0);
     if ($142) {
      label = 78;
      break;
     }
     $143 = (($127) + ($$090))|0;
     __ZN10ObjectCode10SetMappingEii($141,$$090,$143);
     $144 = (($$090) + 1)|0;
     $145 = ($$090|0)<($38|0);
     if ($145) {
      $$090 = $144;
     } else {
      label = 80;
      break;
     }
    }
    if ((label|0) == 78) {
     ___assert_fail((27040|0),(27084|0),36,(27075|0));
     // unreachable;
    }
    else if ((label|0) == 80) {
     STACKTOP = sp;return;
    }
   }
   $128 = (___cxa_allocate_exception(36)|0);
   __THREW__ = 0;
   invoke_vii(635,($6|0),($10|0));
   $129 = __THREW__; __THREW__ = 0;
   $130 = $129&1;
   if ($130) {
    $135 = ___cxa_find_matching_catch_2()|0;
    $136 = tempRet0;
    $$56488 = $135;$$589 = $136;
   } else {
    $131 = HEAP32[$8>>2]|0;
    __THREW__ = 0;
    invoke_viii(733,($128|0),($6|0),($131|0));
    $132 = __THREW__; __THREW__ = 0;
    $133 = $132&1;
    if ($133) {
     $$045 = 1;
    } else {
     __THREW__ = 0;
     invoke_viii(644,($128|0),(1112|0),(7|0));
     $134 = __THREW__; __THREW__ = 0;
     $$045 = 0;
    }
    $137 = ___cxa_find_matching_catch_2()|0;
    $138 = tempRet0;
    __THREW__ = 0;
    invoke_vi(637,($6|0));
    $139 = __THREW__; __THREW__ = 0;
    $140 = $139&1;
    if ($140) {
     $146 = ___cxa_find_matching_catch_3(0|0)|0;
     $147 = tempRet0;
     ___clang_call_terminate($146);
     // unreachable;
    }
    if ($$045) {
     $$56488 = $137;$$589 = $138;
    } else {
     $$7 = $138;$$766 = $137;
     ___resumeException($$766|0);
     // unreachable;
    }
   }
   ___cxa_free_exception(($128|0));
   $$7 = $$589;$$766 = $$56488;
   ___resumeException($$766|0);
   // unreachable;
  }
 }
 $24 = (___cxa_allocate_exception(36)|0);
 __THREW__ = 0;
 invoke_vii(635,($1|0),($10|0));
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  $31 = ___cxa_find_matching_catch_2()|0;
  $32 = tempRet0;
  $$05774 = $32;$$05973 = $31;
 } else {
  $27 = HEAP32[$8>>2]|0;
  __THREW__ = 0;
  invoke_viii(676,($24|0),($1|0),($27|0));
  $28 = __THREW__; __THREW__ = 0;
  $29 = $28&1;
  if ($29) {
   $$055 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($24|0),(352|0),(7|0));
   $30 = __THREW__; __THREW__ = 0;
   $$055 = 0;
  }
  $33 = ___cxa_find_matching_catch_2()|0;
  $34 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($1|0));
  $35 = __THREW__; __THREW__ = 0;
  $36 = $35&1;
  if ($36) {
   $146 = ___cxa_find_matching_catch_3(0|0)|0;
   $147 = tempRet0;
   ___clang_call_terminate($146);
   // unreachable;
  }
  if ($$055) {
   $$05774 = $34;$$05973 = $33;
  } else {
   $$7 = $34;$$766 = $33;
   ___resumeException($$766|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($24|0));
 $$7 = $$05774;$$766 = $$05973;
 ___resumeException($$766|0);
 // unreachable;
}
function __ZN10LineParser13HandlePutFileEv($0) {
 $0 = $0|0;
 var $$0$i = 0, $$0101 = 0, $$0105166 = 0, $$0106 = 0, $$0140 = 0, $$02$i = 0, $$060139 = 0, $$081 = 0, $$083 = 0, $$085 = 0, $$087 = 0, $$089 = 0, $$091 = 0, $$093 = 0, $$095 = 0, $$097 = 0, $$099 = 0, $$10169 = 0, $$1070168 = 0, $$1104 = 0;
 var $$11173 = 0, $$1143 = 0, $$1171172 = 0, $$12176 = 0, $$1272175 = 0, $$14 = 0, $$1474 = 0, $$15 = 0, $$1575 = 0, $$16 = 0, $$161142 = 0, $$1676 = 0, $$17 = 0, $$1777 = 0, $$18 = 0, $$1878 = 0, $$20 = 0, $$2080 = 0, $$2146 = 0, $$262145 = 0;
 var $$3149 = 0, $$363148 = 0, $$4152 = 0, $$464151 = 0, $$5155 = 0, $$565154 = 0, $$6158 = 0, $$666157 = 0, $$7 = 0, $$767 = 0, $$8161 = 0, $$868160 = 0, $$9164 = 0, $$969163 = 0, $$sink$index = 0, $$sink$index13 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $eh$lpad$body$i$indexZ2D = 0, $eh$lpad$body$i115$index7Z2D = 0, $eh$lpad$body$i115$indexZ2D = 0, $eh$lpad$body$indexZ2D = 0, $eh$lpad$body119$index19Z2D = 0, $eh$lpad$body119$indexZ2D = 0, $eh$lpad$body126$index2Z2D = 0, $eh$lpad$body126$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(384|0);
 $1 = sp + 372|0;
 $2 = sp + 360|0;
 $3 = sp + 348|0;
 $4 = sp + 336|0;
 $5 = sp + 324|0;
 $6 = sp + 312|0;
 $7 = sp + 300|0;
 $8 = sp + 288|0;
 $9 = sp + 276|0;
 $10 = sp + 264|0;
 $11 = sp + 252|0;
 $12 = sp + 240|0;
 $13 = sp + 228|0;
 $14 = sp + 216|0;
 $15 = sp + 204|0;
 $16 = sp + 16|0;
 $17 = sp;
 $18 = (__ZN10LineParser29AdvanceAndCheckEndOfStatementEv($0)|0);
 L1: do {
  if ($18) {
   $34 = ((($0)) + 4|0);
   $35 = ((($0)) + 16|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ((($34)) + 11|0);
   $38 = HEAP8[$37>>0]|0;
   $39 = ($38<<24>>24)<(0);
   if ($39) {
    $40 = HEAP32[$34>>2]|0;
    $42 = $40;
   } else {
    $42 = $34;
   }
   $41 = (($42) + ($36)|0);
   $43 = HEAP8[$41>>0]|0;
   $44 = ($43<<24>>24)==(34);
   if (!($44)) {
    $45 = (___cxa_allocate_exception(36)|0);
    __THREW__ = 0;
    invoke_vii(635,($2|0),($34|0));
    $46 = __THREW__; __THREW__ = 0;
    $47 = $46&1;
    if ($47) {
     $52 = ___cxa_find_matching_catch_2()|0;
     $53 = tempRet0;
     $$1143 = $52;$$161142 = $53;
    } else {
     $48 = HEAP32[$35>>2]|0;
     __THREW__ = 0;
     invoke_viii(735,($45|0),($2|0),($48|0));
     $49 = __THREW__; __THREW__ = 0;
     $50 = $49&1;
     if ($50) {
      $$089 = 1;
     } else {
      __THREW__ = 0;
      invoke_viii(644,($45|0),(432|0),(7|0));
      $51 = __THREW__; __THREW__ = 0;
      $$089 = 0;
     }
     $54 = ___cxa_find_matching_catch_2()|0;
     $55 = tempRet0;
     __THREW__ = 0;
     invoke_vi(637,($2|0));
     $56 = __THREW__; __THREW__ = 0;
     $57 = $56&1;
     if ($57) {
      break;
     }
     if ($$089) {
      $$1143 = $54;$$161142 = $55;
     } else {
      $$20 = $54;$$2080 = $55;
      ___resumeException($$20|0);
      // unreachable;
     }
    }
    ___cxa_free_exception(($45|0));
    $$20 = $$1143;$$2080 = $$161142;
    ___resumeException($$20|0);
    // unreachable;
   }
   $58 = (($36) + 1)|0;
   $59 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcj($34,34,$58)|0);
   $60 = ($59|0)==(-1);
   if ($60) {
    $61 = (___cxa_allocate_exception(36)|0);
    __THREW__ = 0;
    invoke_vii(635,($3|0),($34|0));
    $62 = __THREW__; __THREW__ = 0;
    $63 = $62&1;
    if ($63) {
     $73 = ___cxa_find_matching_catch_2()|0;
     $74 = tempRet0;
     $$2146 = $73;$$262145 = $74;
    } else {
     $64 = HEAP8[$37>>0]|0;
     $65 = ($64<<24>>24)<(0);
     if ($65) {
      $66 = ((($0)) + 8|0);
      $67 = HEAP32[$66>>2]|0;
      $69 = $67;
     } else {
      $68 = $64&255;
      $69 = $68;
     }
     __THREW__ = 0;
     invoke_viii(732,($61|0),($3|0),($69|0));
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      $$0106 = 1;
     } else {
      __THREW__ = 0;
      invoke_viii(644,($61|0),(1128|0),(7|0));
      $72 = __THREW__; __THREW__ = 0;
      $$0106 = 0;
     }
     $75 = ___cxa_find_matching_catch_2()|0;
     $76 = tempRet0;
     __THREW__ = 0;
     invoke_vi(637,($3|0));
     $77 = __THREW__; __THREW__ = 0;
     $78 = $77&1;
     if ($78) {
      break;
     }
     if ($$0106) {
      $$2146 = $75;$$262145 = $76;
     } else {
      $$20 = $75;$$2080 = $76;
      ___resumeException($$20|0);
      // unreachable;
     }
    }
    ___cxa_free_exception(($61|0));
    $$20 = $$2146;$$2080 = $$262145;
    ___resumeException($$20|0);
    // unreachable;
   }
   $79 = HEAP32[$35>>2]|0;
   $80 = (($79) + 1)|0;
   $81 = (($59) + -1)|0;
   $82 = (($81) - ($79))|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($4,$34,$80,$82,$34);
   __THREW__ = 0;
   invoke_vii(635,($5|0),($4|0));
   $83 = __THREW__; __THREW__ = 0;
   $84 = $83&1;
   if ($84) {
    $96 = ___cxa_find_matching_catch_2()|0;
    $97 = tempRet0;
    $$18 = $96;$$1878 = $97;
   } else {
    $85 = (($59) + 1)|0;
    HEAP32[$35>>2] = $85;
    __THREW__ = 0;
    $86 = (invoke_ii(741,($0|0))|0);
    $87 = __THREW__; __THREW__ = 0;
    $88 = $87&1;
    L40: do {
     if ($88) {
      label = 38;
     } else {
      if (!($86)) {
       $89 = (___cxa_allocate_exception(36)|0);
       __THREW__ = 0;
       invoke_vii(635,($6|0),($34|0));
       $90 = __THREW__; __THREW__ = 0;
       $91 = $90&1;
       if ($91) {
        $100 = ___cxa_find_matching_catch_2()|0;
        $101 = tempRet0;
        $$3149 = $100;$$363148 = $101;
       } else {
        $92 = HEAP32[$35>>2]|0;
        __THREW__ = 0;
        invoke_viii(735,($89|0),($6|0),($92|0));
        $93 = __THREW__; __THREW__ = 0;
        $94 = $93&1;
        if ($94) {
         $$0101 = 1;
        } else {
         __THREW__ = 0;
         invoke_viii(644,($89|0),(432|0),(7|0));
         $95 = __THREW__; __THREW__ = 0;
         $$0101 = 0;
        }
        $102 = ___cxa_find_matching_catch_2()|0;
        $103 = tempRet0;
        __THREW__ = 0;
        invoke_vi(637,($6|0));
        $104 = __THREW__; __THREW__ = 0;
        $105 = $104&1;
        if ($105) {
         break L1;
        }
        if ($$0101) {
         $$3149 = $102;$$363148 = $103;
        } else {
         $$16 = $102;$$1676 = $103;
         label = 216;
         break;
        }
       }
       ___cxa_free_exception(($89|0));
       $$16 = $$3149;$$1676 = $$363148;
       label = 216;
       break;
      }
      $106 = HEAP32[$35>>2]|0;
      $107 = HEAP8[$37>>0]|0;
      $108 = ($107<<24>>24)<(0);
      if ($108) {
       $109 = HEAP32[$34>>2]|0;
       $111 = $109;
      } else {
       $111 = $34;
      }
      $110 = (($111) + ($106)|0);
      $112 = HEAP8[$110>>0]|0;
      $113 = ($112<<24>>24)==(44);
      if (!($113)) {
       $114 = (___cxa_allocate_exception(36)|0);
       __THREW__ = 0;
       invoke_vii(635,($7|0),($34|0));
       $115 = __THREW__; __THREW__ = 0;
       $116 = $115&1;
       if ($116) {
        $121 = ___cxa_find_matching_catch_2()|0;
        $122 = tempRet0;
        $$4152 = $121;$$464151 = $122;
       } else {
        $117 = HEAP32[$35>>2]|0;
        __THREW__ = 0;
        invoke_viii(731,($114|0),($7|0),($117|0));
        $118 = __THREW__; __THREW__ = 0;
        $119 = $118&1;
        if ($119) {
         $$099 = 1;
        } else {
         __THREW__ = 0;
         invoke_viii(644,($114|0),(1192|0),(7|0));
         $120 = __THREW__; __THREW__ = 0;
         $$099 = 0;
        }
        $123 = ___cxa_find_matching_catch_2()|0;
        $124 = tempRet0;
        __THREW__ = 0;
        invoke_vi(637,($7|0));
        $125 = __THREW__; __THREW__ = 0;
        $126 = $125&1;
        if ($126) {
         break L1;
        }
        if ($$099) {
         $$4152 = $123;$$464151 = $124;
        } else {
         $$16 = $123;$$1676 = $124;
         label = 216;
         break;
        }
       }
       ___cxa_free_exception(($114|0));
       $$16 = $$4152;$$1676 = $$464151;
       label = 216;
       break;
      }
      $127 = (($106) + 1)|0;
      HEAP32[$35>>2] = $127;
      __THREW__ = 0;
      $128 = (invoke_ii(741,($0|0))|0);
      $129 = __THREW__; __THREW__ = 0;
      $130 = $129&1;
      if ($130) {
       label = 38;
      } else {
       if (!($128)) {
        $131 = (___cxa_allocate_exception(36)|0);
        __THREW__ = 0;
        invoke_vii(635,($8|0),($34|0));
        $132 = __THREW__; __THREW__ = 0;
        $133 = $132&1;
        if ($133) {
         $138 = ___cxa_find_matching_catch_2()|0;
         $139 = tempRet0;
         $$5155 = $138;$$565154 = $139;
        } else {
         $134 = HEAP32[$35>>2]|0;
         __THREW__ = 0;
         invoke_viii(735,($131|0),($8|0),($134|0));
         $135 = __THREW__; __THREW__ = 0;
         $136 = $135&1;
         if ($136) {
          $$097 = 1;
         } else {
          __THREW__ = 0;
          invoke_viii(644,($131|0),(432|0),(7|0));
          $137 = __THREW__; __THREW__ = 0;
          $$097 = 0;
         }
         $140 = ___cxa_find_matching_catch_2()|0;
         $141 = tempRet0;
         __THREW__ = 0;
         invoke_vi(637,($8|0));
         $142 = __THREW__; __THREW__ = 0;
         $143 = $142&1;
         if ($143) {
          break L1;
         }
         if ($$097) {
          $$5155 = $140;$$565154 = $141;
         } else {
          $$16 = $140;$$1676 = $141;
          label = 216;
          break;
         }
        }
        ___cxa_free_exception(($131|0));
        $$16 = $$5155;$$1676 = $$565154;
        label = 216;
        break;
       }
       $144 = HEAP32[$35>>2]|0;
       $145 = HEAP8[$37>>0]|0;
       $146 = ($145<<24>>24)<(0);
       if ($146) {
        $147 = HEAP32[$34>>2]|0;
        $149 = $147;
       } else {
        $149 = $34;
       }
       $148 = (($149) + ($144)|0);
       $150 = HEAP8[$148>>0]|0;
       $151 = ($150<<24>>24)==(34);
       L84: do {
        if ($151) {
         $152 = (($144) + 1)|0;
         $153 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcj($34,34,$152)|0);
         $154 = ($153|0)==(-1);
         if ($154) {
          $155 = (___cxa_allocate_exception(36)|0);
          __THREW__ = 0;
          invoke_vii(635,($9|0),($34|0));
          $156 = __THREW__; __THREW__ = 0;
          $157 = $156&1;
          if ($157) {
           $167 = ___cxa_find_matching_catch_2()|0;
           $168 = tempRet0;
           $$6158 = $167;$$666157 = $168;
          } else {
           $158 = HEAP8[$37>>0]|0;
           $159 = ($158<<24>>24)<(0);
           if ($159) {
            $160 = ((($0)) + 8|0);
            $161 = HEAP32[$160>>2]|0;
            $163 = $161;
           } else {
            $162 = $158&255;
            $163 = $162;
           }
           __THREW__ = 0;
           invoke_viii(732,($155|0),($9|0),($163|0));
           $164 = __THREW__; __THREW__ = 0;
           $165 = $164&1;
           if ($165) {
            $$095 = 1;
           } else {
            __THREW__ = 0;
            invoke_viii(644,($155|0),(1128|0),(7|0));
            $166 = __THREW__; __THREW__ = 0;
            $$095 = 0;
           }
           $169 = ___cxa_find_matching_catch_2()|0;
           $170 = tempRet0;
           __THREW__ = 0;
           invoke_vi(637,($9|0));
           $171 = __THREW__; __THREW__ = 0;
           $172 = $171&1;
           if ($172) {
            break L1;
           }
           if ($$095) {
            $$6158 = $169;$$666157 = $170;
           } else {
            $$16 = $169;$$1676 = $170;
            label = 216;
            break L40;
           }
          }
          ___cxa_free_exception(($155|0));
          $$16 = $$6158;$$1676 = $$666157;
          label = 216;
          break L40;
         }
         $173 = HEAP32[$35>>2]|0;
         $174 = (($173) + 1)|0;
         $175 = (($153) + -1)|0;
         $176 = (($175) - ($173))|0;
         __THREW__ = 0;
         invoke_viiiii(740,($10|0),($34|0),($174|0),($176|0),($34|0));
         $177 = __THREW__; __THREW__ = 0;
         $178 = $177&1;
         do {
          if ($178) {
           label = 87;
          } else {
           __THREW__ = 0;
           (invoke_iii(641,($5|0),($10|0))|0);
           $179 = __THREW__; __THREW__ = 0;
           $180 = $179&1;
           if ($180) {
            $196 = ___cxa_find_matching_catch_2()|0;
            $197 = tempRet0;
            __THREW__ = 0;
            invoke_vi(637,($10|0));
            $198 = __THREW__; __THREW__ = 0;
            $199 = $198&1;
            if ($199) {
             break L1;
            } else {
             $$7 = $196;$$767 = $197;
             break;
            }
           }
           __THREW__ = 0;
           invoke_vi(637,($10|0));
           $181 = __THREW__; __THREW__ = 0;
           $182 = $181&1;
           if ($182) {
            label = 87;
            break;
           }
           $183 = (($153) + 1)|0;
           HEAP32[$35>>2] = $183;
           __THREW__ = 0;
           $184 = (invoke_ii(741,($0|0))|0);
           $185 = __THREW__; __THREW__ = 0;
           $186 = $185&1;
           if ($186) {
            label = 38;
            break L40;
           }
           if (!($184)) {
            $187 = (___cxa_allocate_exception(36)|0);
            __THREW__ = 0;
            invoke_vii(635,($11|0),($34|0));
            $188 = __THREW__; __THREW__ = 0;
            $189 = $188&1;
            if ($189) {
             $200 = ___cxa_find_matching_catch_2()|0;
             $201 = tempRet0;
             $$8161 = $200;$$868160 = $201;
            } else {
             $190 = HEAP32[$35>>2]|0;
             __THREW__ = 0;
             invoke_viii(735,($187|0),($11|0),($190|0));
             $191 = __THREW__; __THREW__ = 0;
             $192 = $191&1;
             if ($192) {
              $$093 = 1;
             } else {
              __THREW__ = 0;
              invoke_viii(644,($187|0),(432|0),(7|0));
              $193 = __THREW__; __THREW__ = 0;
              $$093 = 0;
             }
             $202 = ___cxa_find_matching_catch_2()|0;
             $203 = tempRet0;
             __THREW__ = 0;
             invoke_vi(637,($11|0));
             $204 = __THREW__; __THREW__ = 0;
             $205 = $204&1;
             if ($205) {
              break L1;
             }
             if ($$093) {
              $$8161 = $202;$$868160 = $203;
             } else {
              $$16 = $202;$$1676 = $203;
              label = 216;
              break L40;
             }
            }
            ___cxa_free_exception(($187|0));
            $$16 = $$8161;$$1676 = $$868160;
            label = 216;
            break L40;
           }
           $206 = HEAP32[$35>>2]|0;
           $207 = HEAP8[$37>>0]|0;
           $208 = ($207<<24>>24)<(0);
           if ($208) {
            $209 = HEAP32[$34>>2]|0;
            $211 = $209;
           } else {
            $211 = $34;
           }
           $210 = (($211) + ($206)|0);
           $212 = HEAP8[$210>>0]|0;
           $213 = ($212<<24>>24)==(44);
           if ($213) {
            $227 = (($206) + 1)|0;
            HEAP32[$35>>2] = $227;
            break L84;
           }
           $214 = (___cxa_allocate_exception(36)|0);
           __THREW__ = 0;
           invoke_vii(635,($12|0),($34|0));
           $215 = __THREW__; __THREW__ = 0;
           $216 = $215&1;
           if ($216) {
            $221 = ___cxa_find_matching_catch_2()|0;
            $222 = tempRet0;
            $$9164 = $221;$$969163 = $222;
           } else {
            $217 = HEAP32[$35>>2]|0;
            __THREW__ = 0;
            invoke_viii(676,($214|0),($12|0),($217|0));
            $218 = __THREW__; __THREW__ = 0;
            $219 = $218&1;
            if ($219) {
             $$091 = 1;
            } else {
             __THREW__ = 0;
             invoke_viii(644,($214|0),(352|0),(7|0));
             $220 = __THREW__; __THREW__ = 0;
             $$091 = 0;
            }
            $223 = ___cxa_find_matching_catch_2()|0;
            $224 = tempRet0;
            __THREW__ = 0;
            invoke_vi(637,($12|0));
            $225 = __THREW__; __THREW__ = 0;
            $226 = $225&1;
            if ($226) {
             break L1;
            }
            if ($$091) {
             $$9164 = $223;$$969163 = $224;
            } else {
             $$16 = $223;$$1676 = $224;
             label = 216;
             break L40;
            }
           }
           ___cxa_free_exception(($214|0));
           $$16 = $$9164;$$1676 = $$969163;
           label = 216;
           break L40;
          }
         } while(0);
         if ((label|0) == 87) {
          $194 = ___cxa_find_matching_catch_2()|0;
          $195 = tempRet0;
          $$7 = $194;$$767 = $195;
         }
         $$16 = $$7;$$1676 = $$767;
         label = 216;
         break L40;
        }
       } while(0);
       __THREW__ = 0;
       $228 = (invoke_iii(692,($0|0),0)|0);
       $229 = __THREW__; __THREW__ = 0;
       $230 = $229&1;
       L138: do {
        if ($230) {
         $231 = ___cxa_find_matching_catch_3(368|0)|0;
         $232 = tempRet0;
         $233 = (_llvm_eh_typeid_for((368|0))|0);
         $234 = ($232|0)==($233|0);
         if (!($234)) {
          $$16 = $231;$$1676 = $232;
          label = 216;
          break L40;
         }
         (___cxa_begin_catch(($231|0))|0);
         $235 = HEAP32[9088]|0;
         $236 = ($235|0)==(0|0);
         do {
          if ($236) {
           __THREW__ = 0;
           invoke_viiii(680,(27040|0),(27060|0),38,(27075|0));
           $237 = __THREW__; __THREW__ = 0;
          } else {
           $238 = HEAP32[$235>>2]|0;
           $239 = ($238|0)==(1);
           if ($239) {
            __THREW__ = 0;
            invoke_v(642);
            $240 = __THREW__; __THREW__ = 0;
            break;
           } else {
            __THREW__ = 0;
            invoke_v(643);
            $245 = __THREW__; __THREW__ = 0;
            $246 = $245&1;
            if ($246) {
             label = 38;
             break L40;
            } else {
             $$0105166 = 0;
             break L138;
            }
           }
          }
         } while(0);
         $241 = ___cxa_find_matching_catch_2()|0;
         $242 = tempRet0;
         __THREW__ = 0;
         invoke_v(643);
         $243 = __THREW__; __THREW__ = 0;
         $244 = $243&1;
         if ($244) {
          break L1;
         } else {
          $$16 = $241;$$1676 = $242;
          label = 216;
          break L40;
         }
        } else {
         $247 = ($228>>>0)>(65535);
         if ($247) {
          $248 = (___cxa_allocate_exception(36)|0);
          __THREW__ = 0;
          invoke_vii(635,($13|0),($34|0));
          $249 = __THREW__; __THREW__ = 0;
          $250 = $249&1;
          if ($250) {
           $255 = ___cxa_find_matching_catch_2()|0;
           $256 = tempRet0;
           $$10169 = $255;$$1070168 = $256;
          } else {
           $251 = HEAP32[$35>>2]|0;
           __THREW__ = 0;
           invoke_viii(733,($248|0),($13|0),($251|0));
           $252 = __THREW__; __THREW__ = 0;
           $253 = $252&1;
           if ($253) {
            $$087 = 1;
           } else {
            __THREW__ = 0;
            invoke_viii(644,($248|0),(1112|0),(7|0));
            $254 = __THREW__; __THREW__ = 0;
            $$087 = 0;
           }
           $257 = ___cxa_find_matching_catch_2()|0;
           $258 = tempRet0;
           __THREW__ = 0;
           invoke_vi(637,($13|0));
           $259 = __THREW__; __THREW__ = 0;
           $260 = $259&1;
           if ($260) {
            break L1;
           }
           if ($$087) {
            $$10169 = $257;$$1070168 = $258;
           } else {
            $$16 = $257;$$1676 = $258;
            label = 216;
            break L40;
           }
          }
          ___cxa_free_exception(($248|0));
          $$16 = $$10169;$$1676 = $$1070168;
          label = 216;
          break L40;
         } else {
          $$0105166 = $228;
         }
        }
       } while(0);
       $261 = HEAP32[$35>>2]|0;
       $262 = HEAP8[$37>>0]|0;
       $263 = ($262<<24>>24)<(0);
       if ($263) {
        $264 = ((($0)) + 8|0);
        $265 = HEAP32[$264>>2]|0;
        $268 = $265;
       } else {
        $266 = $262&255;
        $268 = $266;
       }
       $267 = ($261>>>0)<($268>>>0);
       L163: do {
        if ($267) {
         if ($263) {
          $269 = HEAP32[$34>>2]|0;
          $271 = $269;
         } else {
          $271 = $34;
         }
         $270 = (($271) + ($261)|0);
         $272 = HEAP8[$270>>0]|0;
         $273 = ($272<<24>>24)==(44);
         if (!($273)) {
          $$1104 = $$0105166;
          break;
         }
         $274 = (($261) + 1)|0;
         HEAP32[$35>>2] = $274;
         __THREW__ = 0;
         $275 = (invoke_iii(692,($0|0),0)|0);
         $276 = __THREW__; __THREW__ = 0;
         $277 = $276&1;
         if ($277) {
          $278 = ___cxa_find_matching_catch_3(368|0)|0;
          $279 = tempRet0;
          $280 = (_llvm_eh_typeid_for((368|0))|0);
          $281 = ($279|0)==($280|0);
          if (!($281)) {
           $$16 = $278;$$1676 = $279;
           label = 216;
           break L40;
          }
          (___cxa_begin_catch(($278|0))|0);
          $282 = HEAP32[9088]|0;
          $283 = ($282|0)==(0|0);
          do {
           if ($283) {
            __THREW__ = 0;
            invoke_viiii(680,(27040|0),(27060|0),38,(27075|0));
            $284 = __THREW__; __THREW__ = 0;
           } else {
            $285 = HEAP32[$282>>2]|0;
            $286 = ($285|0)==(1);
            if ($286) {
             __THREW__ = 0;
             invoke_v(642);
             $287 = __THREW__; __THREW__ = 0;
             break;
            } else {
             __THREW__ = 0;
             invoke_v(643);
             $292 = __THREW__; __THREW__ = 0;
             $293 = $292&1;
             if ($293) {
              label = 38;
              break L40;
             } else {
              $$1104 = $$0105166;
              break L163;
             }
            }
           }
          } while(0);
          $288 = ___cxa_find_matching_catch_2()|0;
          $289 = tempRet0;
          __THREW__ = 0;
          invoke_v(643);
          $290 = __THREW__; __THREW__ = 0;
          $291 = $290&1;
          if ($291) {
           break L1;
          } else {
           $$16 = $288;$$1676 = $289;
           label = 216;
           break L40;
          }
         }
         $294 = ($275>>>0)>(65535);
         if (!($294)) {
          $$1104 = $275;
          break;
         }
         $295 = (___cxa_allocate_exception(36)|0);
         __THREW__ = 0;
         invoke_vii(635,($14|0),($34|0));
         $296 = __THREW__; __THREW__ = 0;
         $297 = $296&1;
         if ($297) {
          $302 = ___cxa_find_matching_catch_2()|0;
          $303 = tempRet0;
          $$11173 = $302;$$1171172 = $303;
         } else {
          $298 = HEAP32[$35>>2]|0;
          __THREW__ = 0;
          invoke_viii(733,($295|0),($14|0),($298|0));
          $299 = __THREW__; __THREW__ = 0;
          $300 = $299&1;
          if ($300) {
           $$083 = 1;
          } else {
           __THREW__ = 0;
           invoke_viii(644,($295|0),(1112|0),(7|0));
           $301 = __THREW__; __THREW__ = 0;
           $$083 = 0;
          }
          $304 = ___cxa_find_matching_catch_2()|0;
          $305 = tempRet0;
          __THREW__ = 0;
          invoke_vi(637,($14|0));
          $306 = __THREW__; __THREW__ = 0;
          $307 = $306&1;
          if ($307) {
           break L1;
          }
          if ($$083) {
           $$11173 = $304;$$1171172 = $305;
          } else {
           $$16 = $304;$$1676 = $305;
           label = 216;
           break L40;
          }
         }
         ___cxa_free_exception(($295|0));
         $$16 = $$11173;$$1676 = $$1171172;
         label = 216;
         break L40;
        } else {
         $$1104 = $$0105166;
        }
       } while(0);
       __THREW__ = 0;
       $308 = (invoke_ii(741,($0|0))|0);
       $309 = __THREW__; __THREW__ = 0;
       $310 = $309&1;
       if ($310) {
        label = 38;
       } else {
        if ($308) {
         $311 = (___cxa_allocate_exception(36)|0);
         __THREW__ = 0;
         invoke_vii(635,($15|0),($34|0));
         $312 = __THREW__; __THREW__ = 0;
         $313 = $312&1;
         if ($313) {
          $318 = ___cxa_find_matching_catch_2()|0;
          $319 = tempRet0;
          $$12176 = $318;$$1272175 = $319;
         } else {
          $314 = HEAP32[$35>>2]|0;
          __THREW__ = 0;
          invoke_viii(676,($311|0),($15|0),($314|0));
          $315 = __THREW__; __THREW__ = 0;
          $316 = $315&1;
          if ($316) {
           $$081 = 1;
          } else {
           __THREW__ = 0;
           invoke_viii(644,($311|0),(352|0),(7|0));
           $317 = __THREW__; __THREW__ = 0;
           $$081 = 0;
          }
          $320 = ___cxa_find_matching_catch_2()|0;
          $321 = tempRet0;
          __THREW__ = 0;
          invoke_vi(637,($15|0));
          $322 = __THREW__; __THREW__ = 0;
          $323 = $322&1;
          if ($323) {
           break L1;
          }
          if ($$081) {
           $$12176 = $320;$$1272175 = $321;
          } else {
           $$16 = $320;$$1676 = $321;
           label = 216;
           break;
          }
         }
         ___cxa_free_exception(($311|0));
         $$16 = $$12176;$$1676 = $$1272175;
         label = 216;
         break;
        }
        $324 = HEAP32[9088]|0;
        $325 = ($324|0)==(0|0);
        if ($325) {
         __THREW__ = 0;
         invoke_viiii(680,(27040|0),(27060|0),38,(27075|0));
         $326 = __THREW__; __THREW__ = 0;
         label = 38;
         break;
        }
        $327 = HEAP32[$324>>2]|0;
        $328 = ($327|0)==(1);
        L206: do {
         if ($328) {
          $329 = ((($16)) + 108|0);
          $330 = ((($16)) + 8|0);
          HEAP32[$16>>2] = ((7840));
          HEAP32[$329>>2] = ((7860));
          $331 = ((($16)) + 4|0);
          HEAP32[$331>>2] = 0;
          $332 = ((($16)) + 108|0);
          __THREW__ = 0;
          invoke_vii(649,($332|0),($330|0));
          $333 = __THREW__; __THREW__ = 0;
          $334 = $333&1;
          do {
           if ($334) {
            $339 = ___cxa_find_matching_catch_2()|0;
            $340 = tempRet0;
            $$0$i = $340;$$02$i = $339;
           } else {
            $335 = ((($16)) + 180|0);
            HEAP32[$335>>2] = 0;
            $336 = ((($16)) + 184|0);
            HEAP32[$336>>2] = -1;
            HEAP32[$16>>2] = (7880);
            HEAP32[$329>>2] = (7900);
            __THREW__ = 0;
            invoke_vi(699,($330|0));
            $337 = __THREW__; __THREW__ = 0;
            $338 = $337&1;
            if ($338) {
             $341 = ___cxa_find_matching_catch_2()|0;
             $342 = tempRet0;
             __THREW__ = 0;
             invoke_vii(671,($16|0),((7912)|0));
             $343 = __THREW__; __THREW__ = 0;
             $344 = $343&1;
             if (!($344)) {
              $$0$i = $342;$$02$i = $341;
              break;
             }
             $347 = ___cxa_find_matching_catch_3(0|0)|0;
             $348 = tempRet0;
             ___clang_call_terminate($347);
             // unreachable;
            }
            $349 = ((($16)) + 72|0);
            $350 = HEAP32[$349>>2]|0;
            $351 = ($350|0)==(0|0);
            do {
             if ($351) {
              $352 = ((($4)) + 11|0);
              $353 = HEAP8[$352>>0]|0;
              $354 = ($353<<24>>24)<(0);
              $355 = HEAP32[$4>>2]|0;
              $356 = $354 ? $355 : $4;
              $357 = (_fopen($356,27658)|0);
              HEAP32[$349>>2] = $357;
              $358 = ($357|0)==(0|0);
              if ($358) {
               label = 168;
               break;
              }
              $359 = ((($16)) + 96|0);
              HEAP32[$359>>2] = 12;
              $360 = HEAP32[$16>>2]|0;
              $361 = ((($360)) + -12|0);
              $362 = HEAP32[$361>>2]|0;
              $363 = (($16) + ($362)|0);
              __THREW__ = 0;
              invoke_vii(662,($363|0),0);
              $364 = __THREW__; __THREW__ = 0;
              $365 = $364&1;
              if ($365) {
               label = 174;
              } else {
               $376 = $16;
               label = 169;
              }
             } else {
              label = 168;
             }
            } while(0);
            if ((label|0) == 168) {
             $366 = HEAP32[$16>>2]|0;
             $367 = ((($366)) + -12|0);
             $368 = HEAP32[$367>>2]|0;
             $369 = (($16) + ($368)|0);
             $370 = ((($369)) + 16|0);
             $371 = HEAP32[$370>>2]|0;
             $372 = $371 | 4;
             __THREW__ = 0;
             invoke_vii(662,($369|0),($372|0));
             $373 = __THREW__; __THREW__ = 0;
             $374 = $373&1;
             if ($374) {
              label = 174;
             } else {
              $376 = $16;
              label = 169;
             }
            }
            L220: do {
             if ((label|0) == 169) {
              $375 = HEAP32[$376>>2]|0;
              $377 = ((($375)) + -12|0);
              $378 = HEAP32[$377>>2]|0;
              $379 = (($16) + ($378)|0);
              $380 = ((($379)) + 16|0);
              $381 = HEAP32[$380>>2]|0;
              $382 = $381 & 5;
              $383 = ($382|0)==(0);
              if (!($383)) {
               $384 = (___cxa_allocate_exception(36)|0);
               HEAP32[$384>>2] = (4652);
               $385 = ((($384)) + 4|0);
               ;HEAP32[$385>>2]=0|0;HEAP32[$385+4>>2]=0|0;HEAP32[$385+8>>2]=0|0;
               $386 = ((($384)) + 20|0);
               ;HEAP32[$386>>2]=0|0;HEAP32[$386+4>>2]=0|0;HEAP32[$386+8>>2]=0|0;
               __THREW__ = 0;
               invoke_viii(646,($386|0),(44984|0),0);
               $387 = __THREW__; __THREW__ = 0;
               $388 = $387&1;
               if (!($388)) {
                $395 = ((($384)) + 32|0);
                HEAP32[$395>>2] = 0;
                HEAP32[$384>>2] = (8428);
                __THREW__ = 0;
                invoke_viii(644,($384|0),(1080|0),(7|0));
                $396 = __THREW__; __THREW__ = 0;
                label = 174;
                break;
               }
               $389 = ___cxa_find_matching_catch_2()|0;
               $390 = tempRet0;
               __THREW__ = 0;
               invoke_vi(637,($385|0));
               $391 = __THREW__; __THREW__ = 0;
               $392 = $391&1;
               if ($392) {
                $393 = ___cxa_find_matching_catch_3(0|0)|0;
                $394 = tempRet0;
                ___clang_call_terminate($393);
                // unreachable;
               } else {
                ___cxa_free_exception(($384|0));
                $$14 = $389;$$1474 = $390;
                label = 205;
                break;
               }
              }
              __THREW__ = 0;
              (invoke_iiiii(701,($16|0),0,0,2)|0);
              $399 = __THREW__; __THREW__ = 0;
              $400 = $399&1;
              if ($400) {
               label = 174;
               break;
              }
              __THREW__ = 0;
              invoke_vii(674,($17|0),($16|0));
              $401 = __THREW__; __THREW__ = 0;
              $402 = $401&1;
              if ($402) {
               label = 174;
               break;
              }
              $403 = ((($17)) + 8|0);
              $404 = $403;
              $405 = $404;
              $406 = HEAP32[$405>>2]|0;
              $407 = (($404) + 4)|0;
              $408 = $407;
              $409 = HEAP32[$408>>2]|0;
              __THREW__ = 0;
              (invoke_iiiii(701,($16|0),0,0,0)|0);
              $410 = __THREW__; __THREW__ = 0;
              $411 = $410&1;
              L233: do {
               if ($411) {
                label = 191;
               } else {
                __THREW__ = 0;
                $412 = (invoke_ii(745,($406|0))|0);
                $413 = __THREW__; __THREW__ = 0;
                $414 = $413&1;
                if ($414) {
                 label = 191;
                 break;
                }
                __THREW__ = 0;
                (invoke_iiii(700,($16|0),($412|0),($406|0))|0);
                $415 = __THREW__; __THREW__ = 0;
                $416 = $415&1;
                do {
                 if (!($416)) {
                  $417 = HEAP32[$349>>2]|0;
                  $418 = ($417|0)==(0|0);
                  do {
                   if ($418) {
                    label = 186;
                   } else {
                    $419 = HEAP32[$330>>2]|0;
                    $420 = ((($419)) + 24|0);
                    $421 = HEAP32[$420>>2]|0;
                    __THREW__ = 0;
                    $422 = (invoke_ii($421|0,($330|0))|0);
                    $423 = __THREW__; __THREW__ = 0;
                    $424 = $423&1;
                    if ($424) {
                     $427 = ___cxa_find_matching_catch_2()|0;
                     $428 = tempRet0;
                     (_fclose($417)|0);
                     $$sink$index = $427;$$sink$index13 = $428;
                     break L233;
                    }
                    $425 = (_fclose($417)|0);
                    $426 = ($425|0)==(0);
                    if (!($426)) {
                     label = 186;
                     break;
                    }
                    $429 = ($422|0)==(0);
                    HEAP32[$349>>2] = 0;
                    if (!($429)) {
                     label = 186;
                    }
                   }
                  } while(0);
                  if ((label|0) == 186) {
                   $430 = HEAP32[$376>>2]|0;
                   $431 = ((($430)) + -12|0);
                   $432 = HEAP32[$431>>2]|0;
                   $433 = (($16) + ($432)|0);
                   $434 = ((($433)) + 16|0);
                   $435 = HEAP32[$434>>2]|0;
                   $436 = $435 | 4;
                   __THREW__ = 0;
                   invoke_vii(662,($433|0),($436|0));
                   $437 = __THREW__; __THREW__ = 0;
                   $438 = $437&1;
                   if ($438) {
                    break;
                   }
                  }
                  $439 = HEAP32[9088]|0;
                  $440 = ($439|0)==(0|0);
                  if ($440) {
                   __THREW__ = 0;
                   invoke_viiii(680,(27040|0),(27060|0),38,(27075|0));
                   $441 = __THREW__; __THREW__ = 0;
                   break;
                  }
                  $442 = ((($439)) + 9|0);
                  $443 = HEAP8[$442>>0]|0;
                  $444 = ($443<<24>>24)==(0);
                  if (!($444)) {
                   $445 = ((($439)) + 12|0);
                   $446 = HEAP32[$445>>2]|0;
                   $447 = ((($5)) + 11|0);
                   $448 = HEAP8[$447>>0]|0;
                   $449 = ($448<<24>>24)<(0);
                   $450 = HEAP32[$5>>2]|0;
                   $451 = $449 ? $450 : $5;
                   __THREW__ = 0;
                   invoke_viiiiii(703,($446|0),($451|0),($412|0),($$0105166|0),($$1104|0),($406|0));
                   $452 = __THREW__; __THREW__ = 0;
                   $453 = $452&1;
                   if ($453) {
                    break;
                   }
                  }
                  __ZdaPv($412);
                  HEAP32[$16>>2] = ((7880));
                  HEAP32[$329>>2] = ((7900));
                  __THREW__ = 0;
                  invoke_vi(176,($330|0));
                  $458 = __THREW__; __THREW__ = 0;
                  $459 = $458&1;
                  do {
                   if ($459) {
                    $462 = ___cxa_find_matching_catch_2()|0;
                    $463 = tempRet0;
                    __THREW__ = 0;
                    invoke_vii(671,($16|0),((7912)|0));
                    $464 = __THREW__; __THREW__ = 0;
                    $465 = $464&1;
                    if (!($465)) {
                     $eh$lpad$body$i115$index7Z2D = $463;$eh$lpad$body$i115$indexZ2D = $462;
                     label = 199;
                     break;
                    }
                    $466 = ___cxa_find_matching_catch_3(0|0)|0;
                    $467 = tempRet0;
                    ___clang_call_terminate($466);
                    // unreachable;
                   } else {
                    __THREW__ = 0;
                    invoke_vii(671,($16|0),((7912)|0));
                    $460 = __THREW__; __THREW__ = 0;
                    $461 = $460&1;
                    if ($461) {
                     $470 = ___cxa_find_matching_catch_2()|0;
                     $471 = tempRet0;
                     $eh$lpad$body$i115$index7Z2D = $471;$eh$lpad$body$i115$indexZ2D = $470;
                     label = 199;
                     break;
                    }
                    __THREW__ = 0;
                    invoke_vi(653,($329|0));
                    $468 = __THREW__; __THREW__ = 0;
                    $469 = $468&1;
                    if ($469) {
                     $476 = ___cxa_find_matching_catch_2()|0;
                     $477 = tempRet0;
                     $eh$lpad$body119$index19Z2D = $477;$eh$lpad$body119$indexZ2D = $476;
                     break;
                    } else {
                     break L206;
                    }
                   }
                  } while(0);
                  do {
                   if ((label|0) == 199) {
                    __THREW__ = 0;
                    invoke_vi(653,($329|0));
                    $472 = __THREW__; __THREW__ = 0;
                    $473 = $472&1;
                    if (!($473)) {
                     $eh$lpad$body119$index19Z2D = $eh$lpad$body$i115$index7Z2D;$eh$lpad$body119$indexZ2D = $eh$lpad$body$i115$indexZ2D;
                     break;
                    }
                    $474 = ___cxa_find_matching_catch_3(0|0)|0;
                    $475 = tempRet0;
                    ___clang_call_terminate($474);
                    // unreachable;
                   }
                  } while(0);
                  $$15 = $eh$lpad$body119$indexZ2D;$$1575 = $eh$lpad$body119$index19Z2D;
                  break L220;
                 }
                } while(0);
                $456 = ___cxa_find_matching_catch_2()|0;
                $457 = tempRet0;
                $$sink$index = $456;$$sink$index13 = $457;
               }
              } while(0);
              if ((label|0) == 191) {
               $454 = ___cxa_find_matching_catch_2()|0;
               $455 = tempRet0;
               $$sink$index = $454;$$sink$index13 = $455;
              }
              $$14 = $$sink$index;$$1474 = $$sink$index13;
              label = 205;
             }
            } while(0);
            if ((label|0) == 174) {
             $397 = ___cxa_find_matching_catch_2()|0;
             $398 = tempRet0;
             $$14 = $397;$$1474 = $398;
             label = 205;
            }
            L273: do {
             if ((label|0) == 205) {
              HEAP32[$16>>2] = ((7880));
              HEAP32[$329>>2] = ((7900));
              __THREW__ = 0;
              invoke_vi(176,($330|0));
              $478 = __THREW__; __THREW__ = 0;
              $479 = $478&1;
              do {
               if ($479) {
                $482 = ___cxa_find_matching_catch_3(0|0)|0;
                $483 = tempRet0;
                __THREW__ = 0;
                invoke_vii(671,($16|0),((7912)|0));
                $484 = __THREW__; __THREW__ = 0;
                $485 = $484&1;
                if (!($485)) {
                 $eh$lpad$body$i$indexZ2D = $482;
                 break;
                }
                $486 = ___cxa_find_matching_catch_3(0|0)|0;
                $487 = tempRet0;
                ___clang_call_terminate($486);
                // unreachable;
               } else {
                __THREW__ = 0;
                invoke_vii(671,($16|0),((7912)|0));
                $480 = __THREW__; __THREW__ = 0;
                $481 = $480&1;
                if ($481) {
                 $490 = ___cxa_find_matching_catch_3(0|0)|0;
                 $491 = tempRet0;
                 $eh$lpad$body$i$indexZ2D = $490;
                 break;
                } else {
                 __THREW__ = 0;
                 invoke_vi(653,($329|0));
                 $488 = __THREW__; __THREW__ = 0;
                 $489 = $488&1;
                 if ($489) {
                  break L1;
                 } else {
                  $$15 = $$14;$$1575 = $$1474;
                  break L273;
                 }
                }
               }
              } while(0);
              __THREW__ = 0;
              invoke_vi(653,($329|0));
              $492 = __THREW__; __THREW__ = 0;
              $493 = $492&1;
              if ($493) {
               $494 = ___cxa_find_matching_catch_3(0|0)|0;
               $495 = tempRet0;
               ___clang_call_terminate($494);
               // unreachable;
              } else {
               $eh$lpad$body$indexZ2D = $eh$lpad$body$i$indexZ2D;
               ___clang_call_terminate($eh$lpad$body$indexZ2D);
               // unreachable;
              }
             }
            } while(0);
            $$16 = $$15;$$1676 = $$1575;
            label = 216;
            break L40;
           }
          } while(0);
          __THREW__ = 0;
          invoke_vi(653,($329|0));
          $345 = __THREW__; __THREW__ = 0;
          $346 = $345&1;
          if ($346) {
           $347 = ___cxa_find_matching_catch_3(0|0)|0;
           $348 = tempRet0;
           ___clang_call_terminate($347);
           // unreachable;
          } else {
           $eh$lpad$body126$index2Z2D = $$0$i;$eh$lpad$body126$indexZ2D = $$02$i;
           label = 39;
           break L40;
          }
         }
        } while(0);
        __THREW__ = 0;
        invoke_vi(637,($5|0));
        $496 = __THREW__; __THREW__ = 0;
        $497 = $496&1;
        if ($497) {
         $500 = ___cxa_find_matching_catch_2()|0;
         $501 = tempRet0;
         $$17 = $500;$$1777 = $501;
         break;
        } else {
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
         STACKTOP = sp;return;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 38) {
     $98 = ___cxa_find_matching_catch_2()|0;
     $99 = tempRet0;
     $eh$lpad$body126$index2Z2D = $99;$eh$lpad$body126$indexZ2D = $98;
     label = 39;
    }
    if ((label|0) == 39) {
     $$16 = $eh$lpad$body126$indexZ2D;$$1676 = $eh$lpad$body126$index2Z2D;
     label = 216;
    }
    if ((label|0) == 216) {
     __THREW__ = 0;
     invoke_vi(637,($5|0));
     $498 = __THREW__; __THREW__ = 0;
     $499 = $498&1;
     if ($499) {
      break;
     } else {
      $$17 = $$16;$$1777 = $$1676;
     }
    }
    $$18 = $$17;$$1878 = $$1777;
   }
   __THREW__ = 0;
   invoke_vi(637,($4|0));
   $502 = __THREW__; __THREW__ = 0;
   $503 = $502&1;
   if (!($503)) {
    $$20 = $$18;$$2080 = $$1878;
    ___resumeException($$20|0);
    // unreachable;
   }
  } else {
   $19 = (___cxa_allocate_exception(36)|0);
   $20 = ((($0)) + 4|0);
   __THREW__ = 0;
   invoke_vii(635,($1|0),($20|0));
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   if ($22) {
    $28 = ___cxa_find_matching_catch_2()|0;
    $29 = tempRet0;
    $$0140 = $28;$$060139 = $29;
   } else {
    $23 = ((($0)) + 16|0);
    $24 = HEAP32[$23>>2]|0;
    __THREW__ = 0;
    invoke_viii(735,($19|0),($1|0),($24|0));
    $25 = __THREW__; __THREW__ = 0;
    $26 = $25&1;
    if ($26) {
     $$085 = 1;
    } else {
     __THREW__ = 0;
     invoke_viii(644,($19|0),(432|0),(7|0));
     $27 = __THREW__; __THREW__ = 0;
     $$085 = 0;
    }
    $30 = ___cxa_find_matching_catch_2()|0;
    $31 = tempRet0;
    __THREW__ = 0;
    invoke_vi(637,($1|0));
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     break;
    }
    if ($$085) {
     $$0140 = $30;$$060139 = $31;
    } else {
     $$20 = $30;$$2080 = $31;
     ___resumeException($$20|0);
     // unreachable;
    }
   }
   ___cxa_free_exception(($19|0));
   $$20 = $$0140;$$2080 = $$060139;
   ___resumeException($$20|0);
   // unreachable;
  }
 } while(0);
 $504 = ___cxa_find_matching_catch_3(0|0)|0;
 $505 = tempRet0;
 $eh$lpad$body$indexZ2D = $504;
 ___clang_call_terminate($eh$lpad$body$indexZ2D);
 // unreachable;
}
function __ZN10LineParser14HandlePutBasicEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$02674 = 0, $$02873 = 0, $$045 = 0, $$047 = 0, $$049 = 0, $$051 = 0, $$053 = 0, $$055 = 0, $$057 = 0, $$059 = 0, $$11 = 0, $$1139 = 0, $$12 = 0, $$1240 = 0, $$12777 = 0, $$12976 = 0, $$13 = 0, $$1341 = 0, $$14 = 0;
 var $$1442 = 0, $$16 = 0, $$1644 = 0, $$23079 = 0, $$280 = 0, $$33182 = 0, $$383 = 0, $$43285 = 0, $$486 = 0, $$53388 = 0, $$589 = 0, $$63491 = 0, $$692 = 0, $$7 = 0, $$735 = 0, $$83694 = 0, $$895 = 0, $$93797 = 0, $$998 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $1 = sp + 136|0;
 $2 = sp + 124|0;
 $3 = sp + 112|0;
 $4 = sp + 100|0;
 $5 = sp + 88|0;
 $6 = sp + 76|0;
 $7 = sp + 64|0;
 $8 = sp + 52|0;
 $9 = sp + 40|0;
 $10 = sp + 28|0;
 $11 = sp + 16|0;
 $12 = sp + 12|0;
 $13 = sp;
 $14 = (__ZN10LineParser29AdvanceAndCheckEndOfStatementEv($0)|0);
 if (!($14)) {
  $15 = (___cxa_allocate_exception(36)|0);
  $16 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vii(635,($1|0),($16|0));
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  if ($18) {
   $24 = ___cxa_find_matching_catch_2()|0;
   $25 = tempRet0;
   $$02674 = $24;$$02873 = $25;
  } else {
   $19 = ((($0)) + 16|0);
   $20 = HEAP32[$19>>2]|0;
   __THREW__ = 0;
   invoke_viii(735,($15|0),($1|0),($20|0));
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   if ($22) {
    $$059 = 1;
   } else {
    __THREW__ = 0;
    invoke_viii(644,($15|0),(432|0),(7|0));
    $23 = __THREW__; __THREW__ = 0;
    $$059 = 0;
   }
   $26 = ___cxa_find_matching_catch_2()|0;
   $27 = tempRet0;
   __THREW__ = 0;
   invoke_vi(637,($1|0));
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if ($29) {
    $281 = ___cxa_find_matching_catch_3(0|0)|0;
    $282 = tempRet0;
    ___clang_call_terminate($281);
    // unreachable;
   }
   if ($$059) {
    $$02674 = $26;$$02873 = $27;
   } else {
    $$16 = $26;$$1644 = $27;
    ___resumeException($$16|0);
    // unreachable;
   }
  }
  ___cxa_free_exception(($15|0));
  $$16 = $$02674;$$1644 = $$02873;
  ___resumeException($$16|0);
  // unreachable;
 }
 $30 = ((($0)) + 4|0);
 $31 = ((($0)) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($30)) + 11|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = ($34<<24>>24)<(0);
 if ($35) {
  $36 = HEAP32[$30>>2]|0;
  $38 = $36;
 } else {
  $38 = $30;
 }
 $37 = (($38) + ($32)|0);
 $39 = HEAP8[$37>>0]|0;
 $40 = ($39<<24>>24)==(34);
 if (!($40)) {
  $41 = (___cxa_allocate_exception(36)|0);
  __THREW__ = 0;
  invoke_vii(635,($2|0),($30|0));
  $42 = __THREW__; __THREW__ = 0;
  $43 = $42&1;
  if ($43) {
   $48 = ___cxa_find_matching_catch_2()|0;
   $49 = tempRet0;
   $$12777 = $48;$$12976 = $49;
  } else {
   $44 = HEAP32[$31>>2]|0;
   __THREW__ = 0;
   invoke_viii(735,($41|0),($2|0),($44|0));
   $45 = __THREW__; __THREW__ = 0;
   $46 = $45&1;
   if ($46) {
    $$057 = 1;
   } else {
    __THREW__ = 0;
    invoke_viii(644,($41|0),(432|0),(7|0));
    $47 = __THREW__; __THREW__ = 0;
    $$057 = 0;
   }
   $50 = ___cxa_find_matching_catch_2()|0;
   $51 = tempRet0;
   __THREW__ = 0;
   invoke_vi(637,($2|0));
   $52 = __THREW__; __THREW__ = 0;
   $53 = $52&1;
   if ($53) {
    $281 = ___cxa_find_matching_catch_3(0|0)|0;
    $282 = tempRet0;
    ___clang_call_terminate($281);
    // unreachable;
   }
   if ($$057) {
    $$12777 = $50;$$12976 = $51;
   } else {
    $$16 = $50;$$1644 = $51;
    ___resumeException($$16|0);
    // unreachable;
   }
  }
  ___cxa_free_exception(($41|0));
  $$16 = $$12777;$$1644 = $$12976;
  ___resumeException($$16|0);
  // unreachable;
 }
 $54 = (($32) + 1)|0;
 $55 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcj($30,34,$54)|0);
 $56 = ($55|0)==(-1);
 if ($56) {
  $57 = (___cxa_allocate_exception(36)|0);
  __THREW__ = 0;
  invoke_vii(635,($3|0),($30|0));
  $58 = __THREW__; __THREW__ = 0;
  $59 = $58&1;
  if ($59) {
   $69 = ___cxa_find_matching_catch_2()|0;
   $70 = tempRet0;
   $$23079 = $70;$$280 = $69;
  } else {
   $60 = HEAP8[$33>>0]|0;
   $61 = ($60<<24>>24)<(0);
   if ($61) {
    $62 = ((($0)) + 8|0);
    $63 = HEAP32[$62>>2]|0;
    $65 = $63;
   } else {
    $64 = $60&255;
    $65 = $64;
   }
   __THREW__ = 0;
   invoke_viii(732,($57|0),($3|0),($65|0));
   $66 = __THREW__; __THREW__ = 0;
   $67 = $66&1;
   if ($67) {
    $$055 = 1;
   } else {
    __THREW__ = 0;
    invoke_viii(644,($57|0),(1128|0),(7|0));
    $68 = __THREW__; __THREW__ = 0;
    $$055 = 0;
   }
   $71 = ___cxa_find_matching_catch_2()|0;
   $72 = tempRet0;
   __THREW__ = 0;
   invoke_vi(637,($3|0));
   $73 = __THREW__; __THREW__ = 0;
   $74 = $73&1;
   if ($74) {
    $281 = ___cxa_find_matching_catch_3(0|0)|0;
    $282 = tempRet0;
    ___clang_call_terminate($281);
    // unreachable;
   }
   if ($$055) {
    $$23079 = $72;$$280 = $71;
   } else {
    $$16 = $71;$$1644 = $72;
    ___resumeException($$16|0);
    // unreachable;
   }
  }
  ___cxa_free_exception(($57|0));
  $$16 = $$280;$$1644 = $$23079;
  ___resumeException($$16|0);
  // unreachable;
 }
 $75 = HEAP32[$31>>2]|0;
 $76 = (($75) + 1)|0;
 $77 = (($55) + -1)|0;
 $78 = (($77) - ($75))|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($4,$30,$76,$78,$30);
 __THREW__ = 0;
 invoke_vii(635,($5|0),($4|0));
 $79 = __THREW__; __THREW__ = 0;
 $80 = $79&1;
 if ($80) {
  $100 = ___cxa_find_matching_catch_2()|0;
  $101 = tempRet0;
  $$14 = $100;$$1442 = $101;
 } else {
  $81 = (($55) + 1)|0;
  HEAP32[$31>>2] = $81;
  __THREW__ = 0;
  $82 = (invoke_ii(741,($0|0))|0);
  $83 = __THREW__; __THREW__ = 0;
  $84 = $83&1;
  L57: do {
   if ($84) {
    label = 42;
   } else {
    L59: do {
     if ($82) {
      $85 = HEAP32[$31>>2]|0;
      $86 = HEAP8[$33>>0]|0;
      $87 = ($86<<24>>24)<(0);
      if ($87) {
       $88 = HEAP32[$30>>2]|0;
       $90 = $88;
      } else {
       $90 = $30;
      }
      $89 = (($90) + ($85)|0);
      $91 = HEAP8[$89>>0]|0;
      $92 = ($91<<24>>24)==(44);
      if (!($92)) {
       $93 = (___cxa_allocate_exception(36)|0);
       __THREW__ = 0;
       invoke_vii(635,($6|0),($30|0));
       $94 = __THREW__; __THREW__ = 0;
       $95 = $94&1;
       do {
        if ($95) {
         $104 = ___cxa_find_matching_catch_2()|0;
         $105 = tempRet0;
         $$33182 = $105;$$383 = $104;
        } else {
         $96 = HEAP32[$31>>2]|0;
         __THREW__ = 0;
         invoke_viii(731,($93|0),($6|0),($96|0));
         $97 = __THREW__; __THREW__ = 0;
         $98 = $97&1;
         if ($98) {
          $$053 = 1;
         } else {
          __THREW__ = 0;
          invoke_viii(644,($93|0),(1192|0),(7|0));
          $99 = __THREW__; __THREW__ = 0;
          $$053 = 0;
         }
         $106 = ___cxa_find_matching_catch_2()|0;
         $107 = tempRet0;
         __THREW__ = 0;
         invoke_vi(637,($6|0));
         $108 = __THREW__; __THREW__ = 0;
         $109 = $108&1;
         if ($109) {
          $281 = ___cxa_find_matching_catch_3(0|0)|0;
          $282 = tempRet0;
          ___clang_call_terminate($281);
          // unreachable;
         } else {
          if ($$053) {
           $$33182 = $107;$$383 = $106;
           break;
          } else {
           $$12 = $106;$$1240 = $107;
           label = 125;
           break L57;
          }
         }
        }
       } while(0);
       ___cxa_free_exception(($93|0));
       $$12 = $$383;$$1240 = $$33182;
       label = 125;
       break L57;
      }
      $110 = (($85) + 1)|0;
      HEAP32[$31>>2] = $110;
      __THREW__ = 0;
      $111 = (invoke_ii(741,($0|0))|0);
      $112 = __THREW__; __THREW__ = 0;
      $113 = $112&1;
      if ($113) {
       label = 42;
       break L57;
      }
      if (!($111)) {
       $114 = (___cxa_allocate_exception(36)|0);
       __THREW__ = 0;
       invoke_vii(635,($7|0),($30|0));
       $115 = __THREW__; __THREW__ = 0;
       $116 = $115&1;
       do {
        if ($116) {
         $121 = ___cxa_find_matching_catch_2()|0;
         $122 = tempRet0;
         $$43285 = $122;$$486 = $121;
        } else {
         $117 = HEAP32[$31>>2]|0;
         __THREW__ = 0;
         invoke_viii(735,($114|0),($7|0),($117|0));
         $118 = __THREW__; __THREW__ = 0;
         $119 = $118&1;
         if ($119) {
          $$051 = 1;
         } else {
          __THREW__ = 0;
          invoke_viii(644,($114|0),(432|0),(7|0));
          $120 = __THREW__; __THREW__ = 0;
          $$051 = 0;
         }
         $123 = ___cxa_find_matching_catch_2()|0;
         $124 = tempRet0;
         __THREW__ = 0;
         invoke_vi(637,($7|0));
         $125 = __THREW__; __THREW__ = 0;
         $126 = $125&1;
         if ($126) {
          $281 = ___cxa_find_matching_catch_3(0|0)|0;
          $282 = tempRet0;
          ___clang_call_terminate($281);
          // unreachable;
         } else {
          if ($$051) {
           $$43285 = $124;$$486 = $123;
           break;
          } else {
           $$12 = $123;$$1240 = $124;
           label = 125;
           break L57;
          }
         }
        }
       } while(0);
       ___cxa_free_exception(($114|0));
       $$12 = $$486;$$1240 = $$43285;
       label = 125;
       break L57;
      }
      $127 = HEAP32[$31>>2]|0;
      $128 = HEAP8[$33>>0]|0;
      $129 = ($128<<24>>24)<(0);
      if ($129) {
       $130 = HEAP32[$30>>2]|0;
       $132 = $130;
      } else {
       $132 = $30;
      }
      $131 = (($132) + ($127)|0);
      $133 = HEAP8[$131>>0]|0;
      $134 = ($133<<24>>24)==(34);
      if (!($134)) {
       $135 = (___cxa_allocate_exception(36)|0);
       __THREW__ = 0;
       invoke_vii(635,($8|0),($30|0));
       $136 = __THREW__; __THREW__ = 0;
       $137 = $136&1;
       do {
        if ($137) {
         $142 = ___cxa_find_matching_catch_2()|0;
         $143 = tempRet0;
         $$53388 = $143;$$589 = $142;
        } else {
         $138 = HEAP32[$31>>2]|0;
         __THREW__ = 0;
         invoke_viii(735,($135|0),($8|0),($138|0));
         $139 = __THREW__; __THREW__ = 0;
         $140 = $139&1;
         if ($140) {
          $$049 = 1;
         } else {
          __THREW__ = 0;
          invoke_viii(644,($135|0),(432|0),(7|0));
          $141 = __THREW__; __THREW__ = 0;
          $$049 = 0;
         }
         $144 = ___cxa_find_matching_catch_2()|0;
         $145 = tempRet0;
         __THREW__ = 0;
         invoke_vi(637,($8|0));
         $146 = __THREW__; __THREW__ = 0;
         $147 = $146&1;
         if ($147) {
          $281 = ___cxa_find_matching_catch_3(0|0)|0;
          $282 = tempRet0;
          ___clang_call_terminate($281);
          // unreachable;
         } else {
          if ($$049) {
           $$53388 = $145;$$589 = $144;
           break;
          } else {
           $$12 = $144;$$1240 = $145;
           label = 125;
           break L57;
          }
         }
        }
       } while(0);
       ___cxa_free_exception(($135|0));
       $$12 = $$589;$$1240 = $$53388;
       label = 125;
       break L57;
      }
      $148 = (($127) + 1)|0;
      $149 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcj($30,34,$148)|0);
      $150 = ($149|0)==(-1);
      if (!($150)) {
       $169 = HEAP32[$31>>2]|0;
       $170 = (($169) + 1)|0;
       $171 = (($149) + -1)|0;
       $172 = (($171) - ($169))|0;
       __THREW__ = 0;
       invoke_viiiii(740,($10|0),($30|0),($170|0),($172|0),($30|0));
       $173 = __THREW__; __THREW__ = 0;
       $174 = $173&1;
       do {
        if ($174) {
         label = 82;
        } else {
         __THREW__ = 0;
         (invoke_iii(641,($5|0),($10|0))|0);
         $175 = __THREW__; __THREW__ = 0;
         $176 = $175&1;
         if ($176) {
          $182 = ___cxa_find_matching_catch_2()|0;
          $183 = tempRet0;
          __THREW__ = 0;
          invoke_vi(637,($10|0));
          $184 = __THREW__; __THREW__ = 0;
          $185 = $184&1;
          if (!($185)) {
           $$7 = $182;$$735 = $183;
           break;
          }
          $281 = ___cxa_find_matching_catch_3(0|0)|0;
          $282 = tempRet0;
          ___clang_call_terminate($281);
          // unreachable;
         } else {
          __THREW__ = 0;
          invoke_vi(637,($10|0));
          $177 = __THREW__; __THREW__ = 0;
          $178 = $177&1;
          if ($178) {
           label = 82;
           break;
          }
          $179 = (($149) + 1)|0;
          HEAP32[$31>>2] = $179;
          break L59;
         }
        }
       } while(0);
       if ((label|0) == 82) {
        $180 = ___cxa_find_matching_catch_2()|0;
        $181 = tempRet0;
        $$7 = $180;$$735 = $181;
       }
       $$12 = $$7;$$1240 = $$735;
       label = 125;
       break L57;
      }
      $151 = (___cxa_allocate_exception(36)|0);
      __THREW__ = 0;
      invoke_vii(635,($9|0),($30|0));
      $152 = __THREW__; __THREW__ = 0;
      $153 = $152&1;
      do {
       if ($153) {
        $163 = ___cxa_find_matching_catch_2()|0;
        $164 = tempRet0;
        $$63491 = $164;$$692 = $163;
       } else {
        $154 = HEAP8[$33>>0]|0;
        $155 = ($154<<24>>24)<(0);
        if ($155) {
         $156 = ((($0)) + 8|0);
         $157 = HEAP32[$156>>2]|0;
         $159 = $157;
        } else {
         $158 = $154&255;
         $159 = $158;
        }
        __THREW__ = 0;
        invoke_viii(732,($151|0),($9|0),($159|0));
        $160 = __THREW__; __THREW__ = 0;
        $161 = $160&1;
        if ($161) {
         $$047 = 1;
        } else {
         __THREW__ = 0;
         invoke_viii(644,($151|0),(1128|0),(7|0));
         $162 = __THREW__; __THREW__ = 0;
         $$047 = 0;
        }
        $165 = ___cxa_find_matching_catch_2()|0;
        $166 = tempRet0;
        __THREW__ = 0;
        invoke_vi(637,($9|0));
        $167 = __THREW__; __THREW__ = 0;
        $168 = $167&1;
        if ($168) {
         $281 = ___cxa_find_matching_catch_3(0|0)|0;
         $282 = tempRet0;
         ___clang_call_terminate($281);
         // unreachable;
        } else {
         if ($$047) {
          $$63491 = $166;$$692 = $165;
          break;
         } else {
          $$12 = $165;$$1240 = $166;
          label = 125;
          break L57;
         }
        }
       }
      } while(0);
      ___cxa_free_exception(($151|0));
      $$12 = $$692;$$1240 = $$63491;
      label = 125;
      break L57;
     }
    } while(0);
    __THREW__ = 0;
    $186 = (invoke_ii(741,($0|0))|0);
    $187 = __THREW__; __THREW__ = 0;
    $188 = $187&1;
    if ($188) {
     label = 42;
    } else {
     if ($186) {
      $189 = (___cxa_allocate_exception(36)|0);
      __THREW__ = 0;
      invoke_vii(635,($11|0),($30|0));
      $190 = __THREW__; __THREW__ = 0;
      $191 = $190&1;
      do {
       if ($191) {
        $196 = ___cxa_find_matching_catch_2()|0;
        $197 = tempRet0;
        $$83694 = $197;$$895 = $196;
       } else {
        $192 = HEAP32[$31>>2]|0;
        __THREW__ = 0;
        invoke_viii(676,($189|0),($11|0),($192|0));
        $193 = __THREW__; __THREW__ = 0;
        $194 = $193&1;
        if ($194) {
         $$045 = 1;
        } else {
         __THREW__ = 0;
         invoke_viii(644,($189|0),(352|0),(7|0));
         $195 = __THREW__; __THREW__ = 0;
         $$045 = 0;
        }
        $198 = ___cxa_find_matching_catch_2()|0;
        $199 = tempRet0;
        __THREW__ = 0;
        invoke_vi(637,($11|0));
        $200 = __THREW__; __THREW__ = 0;
        $201 = $200&1;
        if ($201) {
         $281 = ___cxa_find_matching_catch_3(0|0)|0;
         $282 = tempRet0;
         ___clang_call_terminate($281);
         // unreachable;
        } else {
         if ($$045) {
          $$83694 = $199;$$895 = $198;
          break;
         } else {
          $$12 = $198;$$1240 = $199;
          label = 125;
          break L57;
         }
        }
       }
      } while(0);
      ___cxa_free_exception(($189|0));
      $$12 = $$895;$$1240 = $$83694;
      label = 125;
      break;
     }
     $202 = HEAP32[9088]|0;
     $203 = ($202|0)==(0|0);
     if ($203) {
      __THREW__ = 0;
      invoke_viiii(680,(27040|0),(27060|0),38,(27075|0));
      $204 = __THREW__; __THREW__ = 0;
      label = 42;
      break;
     }
     $205 = HEAP32[$202>>2]|0;
     $206 = ($205|0)==(1);
     L154: do {
      if ($206) {
       $207 = ((($202)) + 9|0);
       $208 = HEAP8[$207>>0]|0;
       $209 = ($208<<24>>24)==(0);
       if (!($209)) {
        __THREW__ = 0;
        $210 = (invoke_ii(745,65536)|0);
        $211 = __THREW__; __THREW__ = 0;
        $212 = $211&1;
        if ($212) {
         label = 42;
         break L57;
        }
        $213 = ((($4)) + 11|0);
        $214 = HEAP8[$213>>0]|0;
        $215 = ($214<<24>>24)<(0);
        $216 = HEAP32[$4>>2]|0;
        $217 = $215 ? $216 : $4;
        __THREW__ = 0;
        $218 = (invoke_iiii(746,($217|0),($210|0),($12|0))|0);
        $219 = __THREW__; __THREW__ = 0;
        $220 = $219&1;
        L158: do {
         if ($220) {
          $238 = ___cxa_find_matching_catch_2()|0;
          $239 = tempRet0;
          $$11 = $238;$$1139 = $239;
         } else {
          do {
           if ($218) {
            $260 = HEAP32[9088]|0;
            $261 = ($260|0)==(0|0);
            if ($261) {
             __THREW__ = 0;
             invoke_viiii(680,(27040|0),(27060|0),38,(27075|0));
             $262 = __THREW__; __THREW__ = 0;
             break;
            }
            $263 = ((($260)) + 12|0);
            $264 = HEAP32[$263>>2]|0;
            $265 = ((($5)) + 11|0);
            $266 = HEAP8[$265>>0]|0;
            $267 = ($266<<24>>24)<(0);
            $268 = HEAP32[$5>>2]|0;
            $269 = $267 ? $268 : $5;
            $270 = HEAP32[$12>>2]|0;
            __THREW__ = 0;
            invoke_viiiiii(703,($264|0),($269|0),($210|0),-59136,-32733,($270|0));
            $271 = __THREW__; __THREW__ = 0;
            $272 = $271&1;
            if ($272) {
             break;
            }
            __ZdaPv($210);
            break L154;
           } else {
            __THREW__ = 0;
            $221 = (invoke_i(747)|0);
            $222 = __THREW__; __THREW__ = 0;
            $223 = $222&1;
            if ($223) {
             break;
            }
            $224 = ($221|0)==(2);
            if ($224) {
             $225 = (___cxa_allocate_exception(36)|0);
             HEAP32[$225>>2] = (4652);
             $226 = ((($225)) + 4|0);
             ;HEAP32[$226>>2]=0|0;HEAP32[$226+4>>2]=0|0;HEAP32[$226+8>>2]=0|0;
             $227 = ((($225)) + 20|0);
             ;HEAP32[$227>>2]=0|0;HEAP32[$227+4>>2]=0|0;HEAP32[$227+8>>2]=0|0;
             __THREW__ = 0;
             invoke_viii(646,($227|0),(44984|0),0);
             $228 = __THREW__; __THREW__ = 0;
             $229 = $228&1;
             if (!($229)) {
              $236 = ((($225)) + 32|0);
              HEAP32[$236>>2] = 0;
              HEAP32[$225>>2] = (8428);
              __THREW__ = 0;
              invoke_viii(644,($225|0),(1080|0),(7|0));
              $237 = __THREW__; __THREW__ = 0;
              break;
             }
             $230 = ___cxa_find_matching_catch_2()|0;
             $231 = tempRet0;
             __THREW__ = 0;
             invoke_vi(637,($226|0));
             $232 = __THREW__; __THREW__ = 0;
             $233 = $232&1;
             if ($233) {
              $234 = ___cxa_find_matching_catch_3(0|0)|0;
              $235 = tempRet0;
              ___clang_call_terminate($234);
              // unreachable;
             } else {
              ___cxa_free_exception(($225|0));
              $$11 = $230;$$1139 = $231;
              break L158;
             }
            }
            $242 = (___cxa_allocate_exception(16)|0);
            $243 = HEAP8[$213>>0]|0;
            $244 = ($243<<24>>24)<(0);
            $245 = HEAP32[$4>>2]|0;
            $246 = $244 ? $245 : $4;
            ;HEAP32[$13>>2]=0|0;HEAP32[$13+4>>2]=0|0;HEAP32[$13+8>>2]=0|0;
            $247 = (_strlen($246)|0);
            __THREW__ = 0;
            invoke_viii(646,($13|0),($246|0),($247|0));
            $248 = __THREW__; __THREW__ = 0;
            $249 = $248&1;
            do {
             if ($249) {
              $254 = ___cxa_find_matching_catch_2()|0;
              $255 = tempRet0;
              $$93797 = $255;$$998 = $254;
             } else {
              HEAP32[$242>>2] = (4628);
              $250 = ((($242)) + 4|0);
              __THREW__ = 0;
              invoke_vii(635,($250|0),($13|0));
              $251 = __THREW__; __THREW__ = 0;
              $252 = $251&1;
              if ($252) {
               $$0 = 1;
              } else {
               __THREW__ = 0;
               invoke_viii(644,($242|0),(448|0),(3|0));
               $253 = __THREW__; __THREW__ = 0;
               $$0 = 0;
              }
              $256 = ___cxa_find_matching_catch_2()|0;
              $257 = tempRet0;
              __THREW__ = 0;
              invoke_vi(637,($13|0));
              $258 = __THREW__; __THREW__ = 0;
              $259 = $258&1;
              if ($259) {
               $281 = ___cxa_find_matching_catch_3(0|0)|0;
               $282 = tempRet0;
               ___clang_call_terminate($281);
               // unreachable;
              } else {
               if ($$0) {
                $$93797 = $257;$$998 = $256;
                break;
               } else {
                $$11 = $256;$$1139 = $257;
                break L158;
               }
              }
             }
            } while(0);
            ___cxa_free_exception(($242|0));
            $$11 = $$998;$$1139 = $$93797;
            break L158;
           }
          } while(0);
          $240 = ___cxa_find_matching_catch_2()|0;
          $241 = tempRet0;
          $$11 = $240;$$1139 = $241;
         }
        } while(0);
        $$12 = $$11;$$1240 = $$1139;
        label = 125;
        break L57;
       }
      }
     } while(0);
     __THREW__ = 0;
     invoke_vi(637,($5|0));
     $273 = __THREW__; __THREW__ = 0;
     $274 = $273&1;
     if ($274) {
      $275 = ___cxa_find_matching_catch_2()|0;
      $276 = tempRet0;
      $$13 = $275;$$1341 = $276;
      break;
     } else {
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
      STACKTOP = sp;return;
     }
    }
   }
  } while(0);
  if ((label|0) == 42) {
   $102 = ___cxa_find_matching_catch_2()|0;
   $103 = tempRet0;
   $$12 = $102;$$1240 = $103;
   label = 125;
  }
  if ((label|0) == 125) {
   __THREW__ = 0;
   invoke_vi(637,($5|0));
   $277 = __THREW__; __THREW__ = 0;
   $278 = $277&1;
   if ($278) {
    $281 = ___cxa_find_matching_catch_3(0|0)|0;
    $282 = tempRet0;
    ___clang_call_terminate($281);
    // unreachable;
   } else {
    $$13 = $$12;$$1341 = $$1240;
   }
  }
  $$14 = $$13;$$1442 = $$1341;
 }
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $279 = __THREW__; __THREW__ = 0;
 $280 = $279&1;
 if ($280) {
  $281 = ___cxa_find_matching_catch_3(0|0)|0;
  $282 = tempRet0;
  ___clang_call_terminate($281);
  // unreachable;
 }
 $$16 = $$14;$$1644 = $$1442;
 ___resumeException($$16|0);
 // unreachable;
}
function __ZN10LineParser11HandleMacroEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i = 0, $$0$i57 = 0, $$011 = 0, $$013 = 0, $$015$off0$not = 0, $$016$off0 = 0, $$016$off0$ph = 0, $$017 = 0, $$017$lpad$bodyZZ2D = 0, $$019 = 0, $$019$lpad$bodyZZ2D = 0, $$021 = 0, $$02362 = 0, $$02561 = 0, $$03$i = 0, $$03$i56 = 0, $$10 = 0, $$1035 = 0, $$11 = 0;
 var $$1136 = 0, $$124 = 0, $$126 = 0, $$22764 = 0, $$265 = 0, $$32867 = 0, $$368 = 0, $$42970 = 0, $$471 = 0, $$5 = 0, $$530 = 0, $$63173 = 0, $$674 = 0, $$73276 = 0, $$777 = 0, $$8 = 0, $$833 = 0, $$pre$phiZ2D = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $eh$lpad$body45$index7Z2D = 0, $eh$lpad$body45$indexZ2D = 0, $lpad$phi$index = 0, $lpad$phi$index13 = 0, $lpad$phi82$index = 0, $lpad$phi82$index19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $1 = sp + 132|0;
 $2 = sp + 120|0;
 $3 = sp + 108|0;
 $4 = sp + 96|0;
 $5 = sp + 84|0;
 $6 = sp + 72|0;
 $7 = sp + 60|0;
 $8 = sp + 48|0;
 $9 = sp + 36|0;
 $10 = sp + 24|0;
 $11 = sp + 12|0;
 $12 = sp;
 $13 = (__ZN10LineParser29AdvanceAndCheckEndOfStatementEv($0)|0);
 if (!($13)) {
  $14 = (___cxa_allocate_exception(36)|0);
  $15 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vii(635,($3|0),($15|0));
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if ($17) {
   $23 = ___cxa_find_matching_catch_2()|0;
   $24 = tempRet0;
   $$02362 = $24;$$02561 = $23;
  } else {
   $18 = ((($0)) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   __THREW__ = 0;
   invoke_viii(735,($14|0),($3|0),($19|0));
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if ($21) {
    $$021 = 1;
   } else {
    __THREW__ = 0;
    invoke_viii(644,($14|0),(432|0),(7|0));
    $22 = __THREW__; __THREW__ = 0;
    $$021 = 0;
   }
   $25 = ___cxa_find_matching_catch_2()|0;
   $26 = tempRet0;
   __THREW__ = 0;
   invoke_vi(637,($3|0));
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if ($28) {
    $289 = ___cxa_find_matching_catch_3(0|0)|0;
    $290 = tempRet0;
    ___clang_call_terminate($289);
    // unreachable;
   }
   if ($$021) {
    $$02362 = $26;$$02561 = $25;
   } else {
    $$11 = $26;$$1136 = $25;
    ___resumeException($$1136|0);
    // unreachable;
   }
  }
  ___cxa_free_exception(($14|0));
  $$11 = $$02362;$$1136 = $$02561;
  ___resumeException($$1136|0);
  // unreachable;
 }
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
 $29 = ((($0)) + 4|0);
 $30 = ((($0)) + 16|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($29)) + 11|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = ($33<<24>>24)<(0);
 if ($34) {
  $35 = HEAP32[$29>>2]|0;
  $37 = $35;
 } else {
  $37 = $29;
 }
 $36 = (($37) + ($31)|0);
 $38 = HEAP8[$36>>0]|0;
 $39 = $38 << 24 >> 24;
 $40 = (_isalpha($39)|0);
 $41 = ($40|0)==(0);
 L20: do {
  if ($41) {
   if ($34) {
    $42 = HEAP32[$29>>2]|0;
    $44 = $42;
   } else {
    $44 = $29;
   }
   $43 = (($44) + ($31)|0);
   $45 = HEAP8[$43>>0]|0;
   $46 = ($45<<24>>24)==(95);
   if ($46) {
    label = 17;
   } else {
    $113 = (___cxa_allocate_exception(36)|0);
    __THREW__ = 0;
    invoke_vii(635,($7|0),($29|0));
    $114 = __THREW__; __THREW__ = 0;
    $115 = $114&1;
    do {
     if ($115) {
      $142 = ___cxa_find_matching_catch_2()|0;
      $143 = tempRet0;
      $$32867 = $142;$$368 = $143;
     } else {
      $116 = HEAP32[$30>>2]|0;
      __THREW__ = 0;
      invoke_vii(635,($1|0),($7|0));
      $117 = __THREW__; __THREW__ = 0;
      $118 = $117&1;
      L30: do {
       if ($118) {
        $$017 = 1;
        label = 62;
       } else {
        HEAP32[$113>>2] = (4652);
        $119 = ((($113)) + 4|0);
        __THREW__ = 0;
        invoke_vii(635,($119|0),($1|0));
        $120 = __THREW__; __THREW__ = 0;
        $121 = $120&1;
        do {
         if ($121) {
          $126 = ___cxa_find_matching_catch_2()|0;
          $127 = tempRet0;
          $$0$i = $127;$$03$i = $126;
         } else {
          $122 = ((($113)) + 16|0);
          HEAP32[$122>>2] = $116;
          $123 = ((($113)) + 20|0);
          ;HEAP32[$123>>2]=0|0;HEAP32[$123+4>>2]=0|0;HEAP32[$123+8>>2]=0|0;
          __THREW__ = 0;
          invoke_viii(646,($123|0),(44984|0),0);
          $124 = __THREW__; __THREW__ = 0;
          $125 = $124&1;
          if ($125) {
           $128 = ___cxa_find_matching_catch_2()|0;
           $129 = tempRet0;
           __THREW__ = 0;
           invoke_vi(637,($119|0));
           $130 = __THREW__; __THREW__ = 0;
           $131 = $130&1;
           if (!($131)) {
            $$0$i = $129;$$03$i = $128;
            break;
           }
           $132 = ___cxa_find_matching_catch_3(0|0)|0;
           $133 = tempRet0;
           ___clang_call_terminate($132);
           // unreachable;
          } else {
           $134 = ((($113)) + 32|0);
           HEAP32[$134>>2] = 0;
           __THREW__ = 0;
           invoke_vi(637,($1|0));
           $135 = __THREW__; __THREW__ = 0;
           $136 = $135&1;
           if ($136) {
            $$017 = 1;
            label = 62;
            break L30;
           }
           HEAP32[$113>>2] = (9252);
           __THREW__ = 0;
           invoke_viii(644,($113|0),(1176|0),(7|0));
           $141 = __THREW__; __THREW__ = 0;
           $$017 = 0;
           label = 62;
           break L30;
          }
         }
        } while(0);
        __THREW__ = 0;
        invoke_vi(637,($1|0));
        $137 = __THREW__; __THREW__ = 0;
        $138 = $137&1;
        if ($138) {
         $139 = ___cxa_find_matching_catch_3(0|0)|0;
         $140 = tempRet0;
         ___clang_call_terminate($139);
         // unreachable;
        } else {
         $$017$lpad$bodyZZ2D = 1;$eh$lpad$body45$index7Z2D = $$0$i;$eh$lpad$body45$indexZ2D = $$03$i;
        }
       }
      } while(0);
      if ((label|0) == 62) {
       $144 = ___cxa_find_matching_catch_2()|0;
       $145 = tempRet0;
       $$017$lpad$bodyZZ2D = $$017;$eh$lpad$body45$index7Z2D = $145;$eh$lpad$body45$indexZ2D = $144;
      }
      __THREW__ = 0;
      invoke_vi(637,($7|0));
      $146 = __THREW__; __THREW__ = 0;
      $147 = $146&1;
      if ($147) {
       $289 = ___cxa_find_matching_catch_3(0|0)|0;
       $290 = tempRet0;
       ___clang_call_terminate($289);
       // unreachable;
      } else {
       if ($$017$lpad$bodyZZ2D) {
        $$32867 = $eh$lpad$body45$indexZ2D;$$368 = $eh$lpad$body45$index7Z2D;
        break;
       } else {
        $$10 = $eh$lpad$body45$index7Z2D;$$1035 = $eh$lpad$body45$indexZ2D;
        break L20;
       }
      }
     }
    } while(0);
    ___cxa_free_exception(($113|0));
    $$10 = $$368;$$1035 = $$32867;
   }
  } else {
   label = 17;
  }
 } while(0);
 L49: do {
  if ((label|0) == 17) {
   __THREW__ = 0;
   invoke_vii(748,($5|0),($0|0));
   $47 = __THREW__; __THREW__ = 0;
   $48 = $47&1;
   do {
    if ($48) {
     label = 40;
    } else {
     __THREW__ = 0;
     (invoke_iii(641,($4|0),($5|0))|0);
     $49 = __THREW__; __THREW__ = 0;
     $50 = $49&1;
     if ($50) {
      $97 = ___cxa_find_matching_catch_2()|0;
      $98 = tempRet0;
      __THREW__ = 0;
      invoke_vi(637,($5|0));
      $99 = __THREW__; __THREW__ = 0;
      $100 = $99&1;
      if (!($100)) {
       $$124 = $98;$$126 = $97;
       break;
      }
      $289 = ___cxa_find_matching_catch_3(0|0)|0;
      $290 = tempRet0;
      ___clang_call_terminate($289);
      // unreachable;
     }
     __THREW__ = 0;
     invoke_vi(637,($5|0));
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      label = 40;
     } else {
      $53 = HEAP32[9088]|0;
      $54 = ($53|0)==(0|0);
      L58: do {
       if ($54) {
        __THREW__ = 0;
        invoke_viiii(680,(27040|0),(27060|0),38,(27075|0));
        $55 = __THREW__; __THREW__ = 0;
       } else {
        $56 = HEAP32[$53>>2]|0;
        $57 = ($56|0)==(0);
        do {
         if ($57) {
          $58 = HEAP32[9089]|0;
          $59 = ($58|0)==(0|0);
          if ($59) {
           __THREW__ = 0;
           invoke_viiii(680,(27040|0),(27237|0),128,(27075|0));
           $60 = __THREW__; __THREW__ = 0;
           break L58;
          }
          __THREW__ = 0;
          $61 = (invoke_iii(749,($58|0),($4|0))|0);
          $62 = __THREW__; __THREW__ = 0;
          $63 = $62&1;
          if ($63) {
           break L58;
          }
          if (!($61)) {
           $107 = HEAP32[$0>>2]|0;
           $108 = ((($107)) + 24600|0);
           $109 = HEAP32[$108>>2]|0;
           $110 = ((($109)) + 16|0);
           __THREW__ = 0;
           (invoke_iii(641,($110|0),($4|0))|0);
           $111 = __THREW__; __THREW__ = 0;
           $112 = $111&1;
           if ($112) {
            break L58;
           } else {
            $$pre$phiZ2D = $0;
            break;
           }
          }
          $64 = (___cxa_allocate_exception(36)|0);
          __THREW__ = 0;
          invoke_vii(635,($6|0),($29|0));
          $65 = __THREW__; __THREW__ = 0;
          $66 = $65&1;
          do {
           if ($66) {
            $101 = ___cxa_find_matching_catch_2()|0;
            $102 = tempRet0;
            $$22764 = $101;$$265 = $102;
           } else {
            $67 = HEAP32[$30>>2]|0;
            __THREW__ = 0;
            invoke_vii(635,($2|0),($6|0));
            $68 = __THREW__; __THREW__ = 0;
            $69 = $68&1;
            L73: do {
             if ($69) {
              $$019 = 1;
              label = 44;
             } else {
              HEAP32[$64>>2] = (4652);
              $70 = ((($64)) + 4|0);
              __THREW__ = 0;
              invoke_vii(635,($70|0),($2|0));
              $71 = __THREW__; __THREW__ = 0;
              $72 = $71&1;
              do {
               if ($72) {
                $77 = ___cxa_find_matching_catch_2()|0;
                $78 = tempRet0;
                $$0$i57 = $78;$$03$i56 = $77;
               } else {
                $73 = ((($64)) + 16|0);
                HEAP32[$73>>2] = $67;
                $74 = ((($64)) + 20|0);
                ;HEAP32[$74>>2]=0|0;HEAP32[$74+4>>2]=0|0;HEAP32[$74+8>>2]=0|0;
                __THREW__ = 0;
                invoke_viii(646,($74|0),(44984|0),0);
                $75 = __THREW__; __THREW__ = 0;
                $76 = $75&1;
                if ($76) {
                 $79 = ___cxa_find_matching_catch_2()|0;
                 $80 = tempRet0;
                 __THREW__ = 0;
                 invoke_vi(637,($70|0));
                 $81 = __THREW__; __THREW__ = 0;
                 $82 = $81&1;
                 if (!($82)) {
                  $$0$i57 = $80;$$03$i56 = $79;
                  break;
                 }
                 $83 = ___cxa_find_matching_catch_3(0|0)|0;
                 $84 = tempRet0;
                 ___clang_call_terminate($83);
                 // unreachable;
                } else {
                 $85 = ((($64)) + 32|0);
                 HEAP32[$85>>2] = 0;
                 __THREW__ = 0;
                 invoke_vi(637,($2|0));
                 $86 = __THREW__; __THREW__ = 0;
                 $87 = $86&1;
                 if ($87) {
                  $$019 = 1;
                  label = 44;
                  break L73;
                 }
                 HEAP32[$64>>2] = (9228);
                 __THREW__ = 0;
                 invoke_viii(644,($64|0),(1160|0),(7|0));
                 $92 = __THREW__; __THREW__ = 0;
                 $$019 = 0;
                 label = 44;
                 break L73;
                }
               }
              } while(0);
              __THREW__ = 0;
              invoke_vi(637,($2|0));
              $88 = __THREW__; __THREW__ = 0;
              $89 = $88&1;
              if (!($89)) {
               $$019$lpad$bodyZZ2D = 1;$eh$lpad$body$index2Z2D = $$0$i57;$eh$lpad$body$indexZ2D = $$03$i56;
               break;
              }
              $90 = ___cxa_find_matching_catch_3(0|0)|0;
              $91 = tempRet0;
              ___clang_call_terminate($90);
              // unreachable;
             }
            } while(0);
            if ((label|0) == 44) {
             $103 = ___cxa_find_matching_catch_2()|0;
             $104 = tempRet0;
             $$019$lpad$bodyZZ2D = $$019;$eh$lpad$body$index2Z2D = $104;$eh$lpad$body$indexZ2D = $103;
            }
            __THREW__ = 0;
            invoke_vi(637,($6|0));
            $105 = __THREW__; __THREW__ = 0;
            $106 = $105&1;
            if ($106) {
             $289 = ___cxa_find_matching_catch_3(0|0)|0;
             $290 = tempRet0;
             ___clang_call_terminate($289);
             // unreachable;
            } else {
             if ($$019$lpad$bodyZZ2D) {
              $$22764 = $eh$lpad$body$indexZ2D;$$265 = $eh$lpad$body$index2Z2D;
              break;
             } else {
              $$10 = $eh$lpad$body$index2Z2D;$$1035 = $eh$lpad$body$indexZ2D;
              break L49;
             }
            }
           }
          } while(0);
          ___cxa_free_exception(($64|0));
          $$10 = $$265;$$1035 = $$22764;
          break L49;
         } else {
          $$pre$phiZ2D = $0;
         }
        } while(0);
        $$016$off0$ph = 0;
        L94: while(1) {
         $$016$off0 = $$016$off0$ph;
         while(1) {
          __THREW__ = 0;
          $148 = (invoke_ii(741,($0|0))|0);
          $149 = __THREW__; __THREW__ = 0;
          $150 = $149&1;
          if ($150) {
           label = 73;
           break L94;
          }
          if (!($148)) {
           label = 110;
           break L94;
          }
          $151 = HEAP32[$30>>2]|0;
          $152 = HEAP8[$32>>0]|0;
          $153 = ($152<<24>>24)<(0);
          if ($153) {
           $154 = HEAP32[$29>>2]|0;
           $156 = $154;
          } else {
           $156 = $29;
          }
          $155 = (($156) + ($151)|0);
          $157 = HEAP8[$155>>0]|0;
          if (!($$016$off0)) {
           break;
          }
          $158 = ($157<<24>>24)==(44);
          if (!($158)) {
           label = 77;
           break L94;
          }
          $159 = (($151) + 1)|0;
          HEAP32[$30>>2] = $159;
          $$016$off0 = 0;
         }
         $179 = $157 << 24 >> 24;
         $180 = (_isalpha($179)|0);
         $181 = ($180|0)==(0);
         if ($181) {
          if ($153) {
           $182 = HEAP32[$29>>2]|0;
           $184 = $182;
          } else {
           $184 = $29;
          }
          $183 = (($184) + ($151)|0);
          $185 = HEAP8[$183>>0]|0;
          $186 = ($185<<24>>24)==(95);
          if (!($186)) {
           label = 103;
           break;
          }
         }
         __THREW__ = 0;
         invoke_vii(748,($9|0),($0|0));
         $187 = __THREW__; __THREW__ = 0;
         $188 = $187&1;
         if ($188) {
          label = 74;
          break;
         }
         $189 = HEAP32[9088]|0;
         $190 = ($189|0)==(0|0);
         if ($190) {
          label = 90;
          break;
         }
         $194 = HEAP32[$189>>2]|0;
         $195 = ($194|0)==(0);
         do {
          if ($195) {
           $196 = HEAP32[$$pre$phiZ2D>>2]|0;
           $197 = ((($196)) + 24600|0);
           $198 = HEAP32[$197>>2]|0;
           $199 = ((($198)) + 32|0);
           $200 = HEAP32[$199>>2]|0;
           $201 = ((($198)) + 36|0);
           $202 = HEAP32[$201>>2]|0;
           $203 = ($200|0)==($202|0);
           if ($203) {
            $208 = ((($198)) + 28|0);
            __THREW__ = 0;
            invoke_vii(750,($208|0),($9|0));
            $209 = __THREW__; __THREW__ = 0;
            $210 = $209&1;
            if ($210) {
             label = 96;
             break L94;
            } else {
             break;
            }
           }
           __THREW__ = 0;
           invoke_vii(635,($200|0),($9|0));
           $204 = __THREW__; __THREW__ = 0;
           $205 = $204&1;
           if ($205) {
            label = 96;
            break L94;
           }
           $206 = HEAP32[$199>>2]|0;
           $207 = ((($206)) + 12|0);
           HEAP32[$199>>2] = $207;
          }
         } while(0);
         __THREW__ = 0;
         invoke_vi(637,($9|0));
         $215 = __THREW__; __THREW__ = 0;
         $216 = $215&1;
         if ($216) {
          label = 101;
          break;
         }
         $$016$off0$ph = 1;
        }
        if ((label|0) == 73) {
         $160 = ___cxa_find_matching_catch_2()|0;
         $161 = tempRet0;
         $lpad$phi$index = $160;$lpad$phi$index13 = $161;
         label = 76;
        }
        else if ((label|0) == 74) {
         $162 = ___cxa_find_matching_catch_2()|0;
         $163 = tempRet0;
         $lpad$phi$index = $162;$lpad$phi$index13 = $163;
         label = 76;
        }
        else if ((label|0) == 77) {
         $166 = (___cxa_allocate_exception(36)|0);
         __THREW__ = 0;
         invoke_vii(635,($8|0),($29|0));
         $167 = __THREW__; __THREW__ = 0;
         $168 = $167&1;
         do {
          if ($168) {
           $173 = ___cxa_find_matching_catch_2()|0;
           $174 = tempRet0;
           $$42970 = $173;$$471 = $174;
          } else {
           $169 = HEAP32[$30>>2]|0;
           __THREW__ = 0;
           invoke_viii(731,($166|0),($8|0),($169|0));
           $170 = __THREW__; __THREW__ = 0;
           $171 = $170&1;
           if ($171) {
            $$013 = 1;
           } else {
            __THREW__ = 0;
            invoke_viii(644,($166|0),(1192|0),(7|0));
            $172 = __THREW__; __THREW__ = 0;
            $$013 = 0;
           }
           $175 = ___cxa_find_matching_catch_2()|0;
           $176 = tempRet0;
           __THREW__ = 0;
           invoke_vi(637,($8|0));
           $177 = __THREW__; __THREW__ = 0;
           $178 = $177&1;
           if ($178) {
            $289 = ___cxa_find_matching_catch_3(0|0)|0;
            $290 = tempRet0;
            ___clang_call_terminate($289);
            // unreachable;
           } else {
            if ($$013) {
             $$42970 = $175;$$471 = $176;
             break;
            } else {
             $$10 = $176;$$1035 = $175;
             break L49;
            }
           }
          }
         } while(0);
         ___cxa_free_exception(($166|0));
         $$10 = $$471;$$1035 = $$42970;
         break L49;
        }
        else if ((label|0) == 90) {
         __THREW__ = 0;
         invoke_viiii(680,(27040|0),(27060|0),38,(27075|0));
         $191 = __THREW__; __THREW__ = 0;
         $192 = ___cxa_find_matching_catch_2()|0;
         $193 = tempRet0;
         $lpad$phi82$index = $192;$lpad$phi82$index19 = $193;
         label = 97;
        }
        else if ((label|0) == 96) {
         $211 = ___cxa_find_matching_catch_2()|0;
         $212 = tempRet0;
         $lpad$phi82$index = $211;$lpad$phi82$index19 = $212;
         label = 97;
        }
        else if ((label|0) == 101) {
         $217 = ___cxa_find_matching_catch_2()|0;
         $218 = tempRet0;
         $$5 = $218;$$530 = $217;
        }
        else if ((label|0) == 103) {
         $219 = (___cxa_allocate_exception(36)|0);
         __THREW__ = 0;
         invoke_vii(635,($10|0),($29|0));
         $220 = __THREW__; __THREW__ = 0;
         $221 = $220&1;
         do {
          if ($221) {
           $226 = ___cxa_find_matching_catch_2()|0;
           $227 = tempRet0;
           $$63173 = $226;$$674 = $227;
          } else {
           $222 = HEAP32[$30>>2]|0;
           __THREW__ = 0;
           invoke_viii(730,($219|0),($10|0),($222|0));
           $223 = __THREW__; __THREW__ = 0;
           $224 = $223&1;
           if ($224) {
            $$011 = 1;
           } else {
            __THREW__ = 0;
            invoke_viii(644,($219|0),(1208|0),(7|0));
            $225 = __THREW__; __THREW__ = 0;
            $$011 = 0;
           }
           $228 = ___cxa_find_matching_catch_2()|0;
           $229 = tempRet0;
           __THREW__ = 0;
           invoke_vi(637,($10|0));
           $230 = __THREW__; __THREW__ = 0;
           $231 = $230&1;
           if ($231) {
            $289 = ___cxa_find_matching_catch_3(0|0)|0;
            $290 = tempRet0;
            ___clang_call_terminate($289);
            // unreachable;
           } else {
            if ($$011) {
             $$63173 = $228;$$674 = $229;
             break;
            } else {
             $$10 = $229;$$1035 = $228;
             break L49;
            }
           }
          }
         } while(0);
         ___cxa_free_exception(($219|0));
         $$10 = $$674;$$1035 = $$63173;
         break L49;
        }
        else if ((label|0) == 110) {
         $$015$off0$not = $$016$off0$ph ^ 1;
         $brmerge = $$016$off0 | $$015$off0$not;
         if (!($brmerge)) {
          $232 = (___cxa_allocate_exception(36)|0);
          __THREW__ = 0;
          invoke_vii(635,($11|0),($29|0));
          $233 = __THREW__; __THREW__ = 0;
          $234 = $233&1;
          do {
           if ($234) {
            $240 = ___cxa_find_matching_catch_2()|0;
            $241 = tempRet0;
            $$73276 = $240;$$777 = $241;
           } else {
            $235 = HEAP32[$30>>2]|0;
            $236 = (($235) + -1)|0;
            __THREW__ = 0;
            invoke_viii(734,($232|0),($11|0),($236|0));
            $237 = __THREW__; __THREW__ = 0;
            $238 = $237&1;
            if ($238) {
             $$0 = 1;
            } else {
             __THREW__ = 0;
             invoke_viii(644,($232|0),(568|0),(7|0));
             $239 = __THREW__; __THREW__ = 0;
             $$0 = 0;
            }
            $242 = ___cxa_find_matching_catch_2()|0;
            $243 = tempRet0;
            __THREW__ = 0;
            invoke_vi(637,($11|0));
            $244 = __THREW__; __THREW__ = 0;
            $245 = $244&1;
            if ($245) {
             $289 = ___cxa_find_matching_catch_3(0|0)|0;
             $290 = tempRet0;
             ___clang_call_terminate($289);
             // unreachable;
            } else {
             if ($$0) {
              $$73276 = $242;$$777 = $243;
              break;
             } else {
              $$10 = $243;$$1035 = $242;
              break L49;
             }
            }
           }
          } while(0);
          ___cxa_free_exception(($232|0));
          $$10 = $$777;$$1035 = $$73276;
          break L49;
         }
         $246 = HEAP32[$30>>2]|0;
         $247 = HEAP8[$32>>0]|0;
         $248 = ($247<<24>>24)<(0);
         if ($248) {
          $249 = ((($0)) + 8|0);
          $250 = HEAP32[$249>>2]|0;
          $253 = $250;
         } else {
          $251 = $247&255;
          $253 = $251;
         }
         $252 = ($246|0)==($253|0);
         L156: do {
          if ($252) {
           $254 = HEAP32[9088]|0;
           $255 = ($254|0)==(0|0);
           if ($255) {
            __THREW__ = 0;
            invoke_viiii(680,(27040|0),(27060|0),38,(27075|0));
            $256 = __THREW__; __THREW__ = 0;
            break;
           }
           $257 = HEAP32[$254>>2]|0;
           $258 = ($257|0)==(0);
           if ($258) {
            $259 = HEAP32[$$pre$phiZ2D>>2]|0;
            $260 = ((($259)) + 24600|0);
            $261 = HEAP32[$260>>2]|0;
            ;HEAP32[$12>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;
            __THREW__ = 0;
            invoke_viii(646,($12|0),(27247|0),1);
            $262 = __THREW__; __THREW__ = 0;
            $263 = $262&1;
            do {
             if ($263) {
              label = 129;
             } else {
              $264 = ((($261)) + 40|0);
              $265 = ((($12)) + 11|0);
              $266 = HEAP8[$265>>0]|0;
              $267 = ($266<<24>>24)<(0);
              $268 = HEAP32[$12>>2]|0;
              $269 = $267 ? $268 : $12;
              $270 = ((($12)) + 4|0);
              $271 = HEAP32[$270>>2]|0;
              $272 = $266&255;
              $273 = $267 ? $271 : $272;
              __THREW__ = 0;
              (invoke_iiii(679,($264|0),($269|0),($273|0))|0);
              $274 = __THREW__; __THREW__ = 0;
              $275 = $274&1;
              if ($275) {
               $280 = ___cxa_find_matching_catch_2()|0;
               $281 = tempRet0;
               __THREW__ = 0;
               invoke_vi(637,($12|0));
               $282 = __THREW__; __THREW__ = 0;
               $283 = $282&1;
               if (!($283)) {
                $$8 = $281;$$833 = $280;
                break;
               }
               $289 = ___cxa_find_matching_catch_3(0|0)|0;
               $290 = tempRet0;
               ___clang_call_terminate($289);
               // unreachable;
              } else {
               __THREW__ = 0;
               invoke_vi(637,($12|0));
               $276 = __THREW__; __THREW__ = 0;
               $277 = $276&1;
               if ($277) {
                label = 129;
                break;
               }
               label = 132;
               break L156;
              }
             }
            } while(0);
            if ((label|0) == 129) {
             $278 = ___cxa_find_matching_catch_2()|0;
             $279 = tempRet0;
             $$8 = $279;$$833 = $278;
            }
            $$10 = $$8;$$1035 = $$833;
            break L49;
           } else {
            label = 132;
           }
          } else {
           label = 132;
          }
         } while(0);
         if ((label|0) == 132) {
          $284 = HEAP32[$$pre$phiZ2D>>2]|0;
          __THREW__ = 0;
          invoke_vii(751,($284|0),0);
          $285 = __THREW__; __THREW__ = 0;
          $286 = $285&1;
          if (!($286)) {
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
           STACKTOP = sp;return;
          }
         }
         $164 = ___cxa_find_matching_catch_2()|0;
         $165 = tempRet0;
         $lpad$phi$index = $164;$lpad$phi$index13 = $165;
         label = 76;
        }
        if ((label|0) == 76) {
         $$10 = $lpad$phi$index13;$$1035 = $lpad$phi$index;
         break L49;
        }
        if ((label|0) == 97) {
         __THREW__ = 0;
         invoke_vi(637,($9|0));
         $213 = __THREW__; __THREW__ = 0;
         $214 = $213&1;
         if ($214) {
          $289 = ___cxa_find_matching_catch_3(0|0)|0;
          $290 = tempRet0;
          ___clang_call_terminate($289);
          // unreachable;
         } else {
          $$5 = $lpad$phi82$index19;$$530 = $lpad$phi82$index;
         }
        }
        $$10 = $$5;$$1035 = $$530;
        break L49;
       }
      } while(0);
      $93 = ___cxa_find_matching_catch_2()|0;
      $94 = tempRet0;
      $$10 = $94;$$1035 = $93;
      break L49;
     }
    }
   } while(0);
   if ((label|0) == 40) {
    $95 = ___cxa_find_matching_catch_2()|0;
    $96 = tempRet0;
    $$124 = $96;$$126 = $95;
   }
   $$10 = $$124;$$1035 = $$126;
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $287 = __THREW__; __THREW__ = 0;
 $288 = $287&1;
 if ($288) {
  $289 = ___cxa_find_matching_catch_3(0|0)|0;
  $290 = tempRet0;
  ___clang_call_terminate($289);
  // unreachable;
 }
 $$11 = $$10;$$1136 = $$1035;
 ___resumeException($$1136|0);
 // unreachable;
}
function __ZN10LineParser14HandleEndMacroEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$037 = 0, $$038 = 0, $$045 = 0, $$046 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = (__ZN10LineParser29AdvanceAndCheckEndOfStatementEv($0)|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (___cxa_allocate_exception(36)|0);
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($1|0),($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $12 = ___cxa_find_matching_catch_2()|0;
  $13 = tempRet0;
  $$038 = $13;$$046 = $12;
 } else {
  $7 = ((($0)) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  __THREW__ = 0;
  invoke_viii(676,($3|0),($1|0),($8|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($3|0),(352|0),(7|0));
   $11 = __THREW__; __THREW__ = 0;
   $$0 = 0;
  }
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($1|0));
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if ($17) {
   $18 = ___cxa_find_matching_catch_3(0|0)|0;
   $19 = tempRet0;
   ___clang_call_terminate($18);
   // unreachable;
  }
  if ($$0) {
   $$038 = $15;$$046 = $14;
  } else {
   $$037 = $15;$$045 = $14;
   ___resumeException($$045|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($3|0));
 $$037 = $$038;$$045 = $$046;
 ___resumeException($$045|0);
 // unreachable;
}
function __ZN10LineParser11HandleErrorEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$012 = 0, $$01430 = 0, $$017 = 0, $$019 = 0, $$02129 = 0, $$1 = 0, $$11533 = 0, $$12232 = 0, $$21636 = 0, $$22335 = 0, $$3 = 0, $$324 = 0, $$42538 = 0, $$42539 = 0, $$440 = 0, $$441 = 0, $$6 = 0, $$627 = 0, $1 = 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $1 = sp + 60|0;
 $2 = sp + 48|0;
 $3 = sp + 36|0;
 $4 = sp + 24|0;
 $5 = sp + 12|0;
 $6 = sp;
 $7 = ((($0)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZN10LineParser29AdvanceAndCheckEndOfStatementEv($0)|0);
 if (!($9)) {
  $10 = (___cxa_allocate_exception(36)|0);
  $11 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vii(635,($1|0),($11|0));
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if ($13) {
   $18 = ___cxa_find_matching_catch_2()|0;
   $19 = tempRet0;
   $$01430 = $18;$$02129 = $19;
  } else {
   $14 = HEAP32[$7>>2]|0;
   __THREW__ = 0;
   invoke_viii(735,($10|0),($1|0),($14|0));
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   if ($16) {
    $$019 = 1;
   } else {
    __THREW__ = 0;
    invoke_viii(644,($10|0),(432|0),(7|0));
    $17 = __THREW__; __THREW__ = 0;
    $$019 = 0;
   }
   $20 = ___cxa_find_matching_catch_2()|0;
   $21 = tempRet0;
   __THREW__ = 0;
   invoke_vi(637,($1|0));
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if ($23) {
    $97 = ___cxa_find_matching_catch_3(0|0)|0;
    $98 = tempRet0;
    ___clang_call_terminate($97);
    // unreachable;
   }
   if ($$019) {
    $$01430 = $20;$$02129 = $21;
   } else {
    $$6 = $20;$$627 = $21;
    ___resumeException($$6|0);
    // unreachable;
   }
  }
  ___cxa_free_exception(($10|0));
  $$6 = $$01430;$$627 = $$02129;
  ___resumeException($$6|0);
  // unreachable;
 }
 $24 = HEAP32[$7>>2]|0;
 $25 = ((($0)) + 4|0);
 $26 = ((($25)) + 11|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = ($27<<24>>24)<(0);
 if ($28) {
  $29 = ((($0)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $33 = $30;
 } else {
  $31 = $27&255;
  $33 = $31;
 }
 $32 = ($24>>>0)<($33>>>0);
 if ($32) {
  if ($28) {
   $34 = HEAP32[$25>>2]|0;
   $36 = $34;
  } else {
   $36 = $25;
  }
  $35 = (($36) + ($24)|0);
  $37 = HEAP8[$35>>0]|0;
  $38 = ($37<<24>>24)==(34);
  if ($38) {
   $52 = (($24) + 1)|0;
   $53 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcj($25,34,$52)|0);
   $54 = ($53|0)==(-1);
   if ($54) {
    $55 = (___cxa_allocate_exception(36)|0);
    __THREW__ = 0;
    invoke_vii(635,($3|0),($25|0));
    $56 = __THREW__; __THREW__ = 0;
    $57 = $56&1;
    if ($57) {
     $67 = ___cxa_find_matching_catch_2()|0;
     $68 = tempRet0;
     $$21636 = $67;$$22335 = $68;
    } else {
     $58 = HEAP8[$26>>0]|0;
     $59 = ($58<<24>>24)<(0);
     if ($59) {
      $60 = ((($0)) + 8|0);
      $61 = HEAP32[$60>>2]|0;
      $63 = $61;
     } else {
      $62 = $58&255;
      $63 = $62;
     }
     __THREW__ = 0;
     invoke_viii(732,($55|0),($3|0),($63|0));
     $64 = __THREW__; __THREW__ = 0;
     $65 = $64&1;
     if ($65) {
      $$012 = 1;
     } else {
      __THREW__ = 0;
      invoke_viii(644,($55|0),(1128|0),(7|0));
      $66 = __THREW__; __THREW__ = 0;
      $$012 = 0;
     }
     $69 = ___cxa_find_matching_catch_2()|0;
     $70 = tempRet0;
     __THREW__ = 0;
     invoke_vi(637,($3|0));
     $71 = __THREW__; __THREW__ = 0;
     $72 = $71&1;
     if ($72) {
      $97 = ___cxa_find_matching_catch_3(0|0)|0;
      $98 = tempRet0;
      ___clang_call_terminate($97);
      // unreachable;
     }
     if ($$012) {
      $$21636 = $69;$$22335 = $70;
     } else {
      $$6 = $69;$$627 = $70;
      ___resumeException($$6|0);
      // unreachable;
     }
    }
    ___cxa_free_exception(($55|0));
    $$6 = $$21636;$$627 = $$22335;
    ___resumeException($$6|0);
    // unreachable;
   }
   $73 = HEAP32[$7>>2]|0;
   $74 = (($73) + 1)|0;
   $75 = (($53) + -1)|0;
   $76 = (($75) - ($73))|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($4,$25,$74,$76,$25);
   $77 = (___cxa_allocate_exception(48)|0);
   __THREW__ = 0;
   invoke_vii(635,($5|0),($25|0));
   $78 = __THREW__; __THREW__ = 0;
   $79 = $78&1;
   do {
    if ($79) {
     $85 = ___cxa_find_matching_catch_2()|0;
     $86 = tempRet0;
     $$42539 = $86;$$441 = $85;
     label = 44;
    } else {
     __THREW__ = 0;
     invoke_vii(635,($6|0),($4|0));
     $80 = __THREW__; __THREW__ = 0;
     $81 = $80&1;
     if ($81) {
      $87 = ___cxa_find_matching_catch_2()|0;
      $88 = tempRet0;
      $$1 = 1;$$3 = $87;$$324 = $88;
     } else {
      __THREW__ = 0;
      invoke_viiii(752,($77|0),($5|0),($8|0),($6|0));
      $82 = __THREW__; __THREW__ = 0;
      $83 = $82&1;
      if ($83) {
       $$0 = 1;
      } else {
       __THREW__ = 0;
       invoke_viii(644,($77|0),(1144|0),(263|0));
       $84 = __THREW__; __THREW__ = 0;
       $$0 = 0;
      }
      $89 = ___cxa_find_matching_catch_2()|0;
      $90 = tempRet0;
      __THREW__ = 0;
      invoke_vi(637,($6|0));
      $91 = __THREW__; __THREW__ = 0;
      $92 = $91&1;
      if ($92) {
       $97 = ___cxa_find_matching_catch_3(0|0)|0;
       $98 = tempRet0;
       ___clang_call_terminate($97);
       // unreachable;
      } else {
       $$1 = $$0;$$3 = $89;$$324 = $90;
      }
     }
     __THREW__ = 0;
     invoke_vi(637,($5|0));
     $93 = __THREW__; __THREW__ = 0;
     $94 = $93&1;
     if ($94) {
      $97 = ___cxa_find_matching_catch_3(0|0)|0;
      $98 = tempRet0;
      ___clang_call_terminate($97);
      // unreachable;
     } else {
      if ($$1) {
       $$42539 = $$324;$$441 = $$3;
       label = 44;
       break;
      } else {
       $$42538 = $$324;$$440 = $$3;
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 44) {
    ___cxa_free_exception(($77|0));
    $$42538 = $$42539;$$440 = $$441;
   }
   __THREW__ = 0;
   invoke_vi(637,($4|0));
   $95 = __THREW__; __THREW__ = 0;
   $96 = $95&1;
   if ($96) {
    $97 = ___cxa_find_matching_catch_3(0|0)|0;
    $98 = tempRet0;
    ___clang_call_terminate($97);
    // unreachable;
   }
   $$6 = $$440;$$627 = $$42538;
   ___resumeException($$6|0);
   // unreachable;
  }
 }
 $39 = (___cxa_allocate_exception(36)|0);
 __THREW__ = 0;
 invoke_vii(635,($2|0),($25|0));
 $40 = __THREW__; __THREW__ = 0;
 $41 = $40&1;
 if ($41) {
  $46 = ___cxa_find_matching_catch_2()|0;
  $47 = tempRet0;
  $$11533 = $46;$$12232 = $47;
 } else {
  $42 = HEAP32[$7>>2]|0;
  __THREW__ = 0;
  invoke_viii(735,($39|0),($2|0),($42|0));
  $43 = __THREW__; __THREW__ = 0;
  $44 = $43&1;
  if ($44) {
   $$017 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($39|0),(432|0),(7|0));
   $45 = __THREW__; __THREW__ = 0;
   $$017 = 0;
  }
  $48 = ___cxa_find_matching_catch_2()|0;
  $49 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($2|0));
  $50 = __THREW__; __THREW__ = 0;
  $51 = $50&1;
  if ($51) {
   $97 = ___cxa_find_matching_catch_3(0|0)|0;
   $98 = tempRet0;
   ___clang_call_terminate($97);
   // unreachable;
  }
  if ($$017) {
   $$11533 = $48;$$12232 = $49;
  } else {
   $$6 = $48;$$627 = $49;
   ___resumeException($$6|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($39|0));
 $$6 = $$11533;$$627 = $$12232;
 ___resumeException($$6|0);
 // unreachable;
}
function __ZN10LineParser15HandleCopyBlockEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$030 = 0, $$03256 = 0, $$034 = 0, $$036 = 0, $$03855 = 0, $$047 = 0, $$049 = 0, $$13359 = 0, $$13958 = 0, $$24061 = 0, $$262 = 0, $$34164 = 0, $$365 = 0, $$44267 = 0, $$468 = 0, $$54370 = 0, $$571 = 0, $$8 = 0, $$846 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $1 = sp + 60|0;
 $2 = sp + 48|0;
 $3 = sp + 36|0;
 $4 = sp + 24|0;
 $5 = sp + 12|0;
 $6 = sp;
 $7 = (__ZN10LineParser23EvaluateExpressionAsIntEb($0,0)|0);
 $8 = ($7>>>0)>(65535);
 if ($8) {
  $9 = (___cxa_allocate_exception(36)|0);
  $10 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vii(635,($1|0),($10|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   $18 = ___cxa_find_matching_catch_2()|0;
   $19 = tempRet0;
   $$03256 = $18;$$03855 = $19;
  } else {
   $13 = ((($0)) + 16|0);
   $14 = HEAP32[$13>>2]|0;
   __THREW__ = 0;
   invoke_viii(733,($9|0),($1|0),($14|0));
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   if ($16) {
    $$049 = 1;
   } else {
    __THREW__ = 0;
    invoke_viii(644,($9|0),(1112|0),(7|0));
    $17 = __THREW__; __THREW__ = 0;
    $$049 = 0;
   }
   $20 = ___cxa_find_matching_catch_2()|0;
   $21 = tempRet0;
   __THREW__ = 0;
   invoke_vi(637,($1|0));
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if ($23) {
    $143 = ___cxa_find_matching_catch_3(0|0)|0;
    $144 = tempRet0;
    ___clang_call_terminate($143);
    // unreachable;
   }
   if ($$049) {
    $$03256 = $20;$$03855 = $21;
   } else {
    $$8 = $20;$$846 = $21;
    ___resumeException($$8|0);
    // unreachable;
   }
  }
  ___cxa_free_exception(($9|0));
  $$8 = $$03256;$$846 = $$03855;
  ___resumeException($$8|0);
  // unreachable;
 }
 $24 = ((($0)) + 16|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($0)) + 4|0);
 $27 = ((($26)) + 11|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = ($28<<24>>24)<(0);
 if ($29) {
  $30 = ((($0)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $34 = $31;
 } else {
  $32 = $28&255;
  $34 = $32;
 }
 $33 = ($25>>>0)<($34>>>0);
 if ($33) {
  if ($29) {
   $35 = HEAP32[$26>>2]|0;
   $37 = $35;
  } else {
   $37 = $26;
  }
  $36 = (($37) + ($25)|0);
  $38 = HEAP8[$36>>0]|0;
  $39 = ($38<<24>>24)==(44);
  if ($39) {
   $53 = (($25) + 1)|0;
   HEAP32[$24>>2] = $53;
   $54 = (__ZN10LineParser23EvaluateExpressionAsIntEb($0,0)|0);
   $55 = ($54>>>0)>(65535);
   if ($55) {
    $56 = (___cxa_allocate_exception(36)|0);
    __THREW__ = 0;
    invoke_vii(635,($3|0),($26|0));
    $57 = __THREW__; __THREW__ = 0;
    $58 = $57&1;
    if ($58) {
     $63 = ___cxa_find_matching_catch_2()|0;
     $64 = tempRet0;
     $$24061 = $64;$$262 = $63;
    } else {
     $59 = HEAP32[$24>>2]|0;
     __THREW__ = 0;
     invoke_viii(733,($56|0),($3|0),($59|0));
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      $$036 = 1;
     } else {
      __THREW__ = 0;
      invoke_viii(644,($56|0),(1112|0),(7|0));
      $62 = __THREW__; __THREW__ = 0;
      $$036 = 0;
     }
     $65 = ___cxa_find_matching_catch_2()|0;
     $66 = tempRet0;
     __THREW__ = 0;
     invoke_vi(637,($3|0));
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      $143 = ___cxa_find_matching_catch_3(0|0)|0;
      $144 = tempRet0;
      ___clang_call_terminate($143);
      // unreachable;
     }
     if ($$036) {
      $$24061 = $66;$$262 = $65;
     } else {
      $$8 = $65;$$846 = $66;
      ___resumeException($$8|0);
      // unreachable;
     }
    }
    ___cxa_free_exception(($56|0));
    $$8 = $$262;$$846 = $$24061;
    ___resumeException($$8|0);
    // unreachable;
   }
   $69 = HEAP32[$24>>2]|0;
   $70 = HEAP8[$27>>0]|0;
   $71 = ($70<<24>>24)<(0);
   if ($71) {
    $72 = ((($0)) + 8|0);
    $73 = HEAP32[$72>>2]|0;
    $76 = $73;
   } else {
    $74 = $70&255;
    $76 = $74;
   }
   $75 = ($69>>>0)<($76>>>0);
   if ($75) {
    if ($71) {
     $77 = HEAP32[$26>>2]|0;
     $79 = $77;
    } else {
     $79 = $26;
    }
    $78 = (($79) + ($69)|0);
    $80 = HEAP8[$78>>0]|0;
    $81 = ($80<<24>>24)==(44);
    if ($81) {
     $95 = (($69) + 1)|0;
     HEAP32[$24>>2] = $95;
     $96 = (__ZN10LineParser23EvaluateExpressionAsIntEb($0,0)|0);
     $97 = ($96>>>0)>(65535);
     if ($97) {
      $98 = (___cxa_allocate_exception(36)|0);
      __THREW__ = 0;
      invoke_vii(635,($5|0),($26|0));
      $99 = __THREW__; __THREW__ = 0;
      $100 = $99&1;
      if ($100) {
       $105 = ___cxa_find_matching_catch_2()|0;
       $106 = tempRet0;
       $$44267 = $106;$$468 = $105;
      } else {
       $101 = HEAP32[$24>>2]|0;
       __THREW__ = 0;
       invoke_viii(733,($98|0),($5|0),($101|0));
       $102 = __THREW__; __THREW__ = 0;
       $103 = $102&1;
       if ($103) {
        $$030 = 1;
       } else {
        __THREW__ = 0;
        invoke_viii(644,($98|0),(1112|0),(7|0));
        $104 = __THREW__; __THREW__ = 0;
        $$030 = 0;
       }
       $107 = ___cxa_find_matching_catch_2()|0;
       $108 = tempRet0;
       __THREW__ = 0;
       invoke_vi(637,($5|0));
       $109 = __THREW__; __THREW__ = 0;
       $110 = $109&1;
       if ($110) {
        $143 = ___cxa_find_matching_catch_3(0|0)|0;
        $144 = tempRet0;
        ___clang_call_terminate($143);
        // unreachable;
       }
       if ($$030) {
        $$44267 = $108;$$468 = $107;
       } else {
        $$8 = $107;$$846 = $108;
        ___resumeException($$8|0);
        // unreachable;
       }
      }
      ___cxa_free_exception(($98|0));
      $$8 = $$468;$$846 = $$44267;
      ___resumeException($$8|0);
      // unreachable;
     }
     $111 = HEAP32[9088]|0;
     $112 = ($111|0)==(0|0);
     if ($112) {
      ___assert_fail((27040|0),(27060|0),38,(27075|0));
      // unreachable;
     }
     $113 = HEAP32[$111>>2]|0;
     $114 = ($113|0)==(1);
     do {
      if ($114) {
       $115 = HEAP32[9090]|0;
       $116 = ($115|0)==(0|0);
       if ($116) {
        ___assert_fail((27040|0),(27084|0),36,(27075|0));
        // unreachable;
       } else {
        __ZN10ObjectCode9CopyBlockEiii($115,$7,$54,$96);
        break;
       }
      }
     } while(0);
     $117 = HEAP32[$24>>2]|0;
     $118 = HEAP8[$27>>0]|0;
     $119 = ($118<<24>>24)<(0);
     if ($119) {
      $120 = ((($0)) + 8|0);
      $121 = HEAP32[$120>>2]|0;
      $124 = $121;
     } else {
      $122 = $118&255;
      $124 = $122;
     }
     $123 = ($117>>>0)<($124>>>0);
     if (!($123)) {
      STACKTOP = sp;return;
     }
     if ($119) {
      $125 = HEAP32[$26>>2]|0;
      $127 = $125;
     } else {
      $127 = $26;
     }
     $126 = (($127) + ($117)|0);
     $128 = HEAP8[$126>>0]|0;
     $129 = ($128<<24>>24)==(44);
     if (!($129)) {
      STACKTOP = sp;return;
     }
     $130 = (___cxa_allocate_exception(36)|0);
     __THREW__ = 0;
     invoke_vii(635,($6|0),($26|0));
     $131 = __THREW__; __THREW__ = 0;
     $132 = $131&1;
     do {
      if ($132) {
       $137 = ___cxa_find_matching_catch_2()|0;
       $138 = tempRet0;
       $$54370 = $138;$$571 = $137;
      } else {
       $133 = HEAP32[$24>>2]|0;
       __THREW__ = 0;
       invoke_viii(734,($130|0),($6|0),($133|0));
       $134 = __THREW__; __THREW__ = 0;
       $135 = $134&1;
       if ($135) {
        $$0 = 1;
       } else {
        __THREW__ = 0;
        invoke_viii(644,($130|0),(568|0),(7|0));
        $136 = __THREW__; __THREW__ = 0;
        $$0 = 0;
       }
       $139 = ___cxa_find_matching_catch_2()|0;
       $140 = tempRet0;
       __THREW__ = 0;
       invoke_vi(637,($6|0));
       $141 = __THREW__; __THREW__ = 0;
       $142 = $141&1;
       if ($142) {
        $143 = ___cxa_find_matching_catch_3(0|0)|0;
        $144 = tempRet0;
        ___clang_call_terminate($143);
        // unreachable;
       }
       if ($$0) {
        $$54370 = $140;$$571 = $139;
        break;
       } else {
        $$8 = $139;$$846 = $140;
       }
       ___resumeException($$8|0);
       // unreachable;
      }
     } while(0);
     ___cxa_free_exception(($130|0));
     $$8 = $$571;$$846 = $$54370;
     ___resumeException($$8|0);
     // unreachable;
    }
   }
   $82 = (___cxa_allocate_exception(36)|0);
   __THREW__ = 0;
   invoke_vii(635,($4|0),($26|0));
   $83 = __THREW__; __THREW__ = 0;
   $84 = $83&1;
   if ($84) {
    $89 = ___cxa_find_matching_catch_2()|0;
    $90 = tempRet0;
    $$34164 = $90;$$365 = $89;
   } else {
    $85 = HEAP32[$24>>2]|0;
    __THREW__ = 0;
    invoke_viii(676,($82|0),($4|0),($85|0));
    $86 = __THREW__; __THREW__ = 0;
    $87 = $86&1;
    if ($87) {
     $$034 = 1;
    } else {
     __THREW__ = 0;
     invoke_viii(644,($82|0),(352|0),(7|0));
     $88 = __THREW__; __THREW__ = 0;
     $$034 = 0;
    }
    $91 = ___cxa_find_matching_catch_2()|0;
    $92 = tempRet0;
    __THREW__ = 0;
    invoke_vi(637,($4|0));
    $93 = __THREW__; __THREW__ = 0;
    $94 = $93&1;
    if ($94) {
     $143 = ___cxa_find_matching_catch_3(0|0)|0;
     $144 = tempRet0;
     ___clang_call_terminate($143);
     // unreachable;
    }
    if ($$034) {
     $$34164 = $92;$$365 = $91;
    } else {
     $$8 = $91;$$846 = $92;
     ___resumeException($$8|0);
     // unreachable;
    }
   }
   ___cxa_free_exception(($82|0));
   $$8 = $$365;$$846 = $$34164;
   ___resumeException($$8|0);
   // unreachable;
  }
 }
 $40 = (___cxa_allocate_exception(36)|0);
 __THREW__ = 0;
 invoke_vii(635,($2|0),($26|0));
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $47 = ___cxa_find_matching_catch_2()|0;
  $48 = tempRet0;
  $$13359 = $47;$$13958 = $48;
 } else {
  $43 = HEAP32[$24>>2]|0;
  __THREW__ = 0;
  invoke_viii(676,($40|0),($2|0),($43|0));
  $44 = __THREW__; __THREW__ = 0;
  $45 = $44&1;
  if ($45) {
   $$047 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(644,($40|0),(352|0),(7|0));
   $46 = __THREW__; __THREW__ = 0;
   $$047 = 0;
  }
  $49 = ___cxa_find_matching_catch_2()|0;
  $50 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($2|0));
  $51 = __THREW__; __THREW__ = 0;
  $52 = $51&1;
  if ($52) {
   $143 = ___cxa_find_matching_catch_3(0|0)|0;
   $144 = tempRet0;
   ___clang_call_terminate($143);
   // unreachable;
  }
  if ($$047) {
   $$13359 = $49;$$13958 = $50;
  } else {
   $$8 = $49;$$846 = $50;
   ___resumeException($$8|0);
   // unreachable;
  }
 }
 ___cxa_free_exception(($40|0));
 $$8 = $$13359;$$846 = $$13958;
 ___resumeException($$8|0);
 // unreachable;
}
function __ZN35AsmException_SyntaxError_OutOfRangeC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$03$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3,$1);
 HEAP32[$0>>2] = (4652);
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($4|0),($3|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $11 = ___cxa_find_matching_catch_2()|0;
  $12 = tempRet0;
  $$0$i = $12;$$03$i = $11;
 } else {
  $7 = ((($0)) + 16|0);
  HEAP32[$7>>2] = $2;
  $8 = ((($0)) + 20|0);
  ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
  __THREW__ = 0;
  invoke_viii(646,($8|0),(44984|0),0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   $19 = ((($0)) + 32|0);
   HEAP32[$19>>2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
   HEAP32[$0>>2] = (9156);
   STACKTOP = sp;return;
  }
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($4|0));
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if ($16) {
   $17 = ___cxa_find_matching_catch_3(0|0)|0;
   $18 = tempRet0;
   ___clang_call_terminate($17);
   // unreachable;
  } else {
   $$0$i = $14;$$03$i = $13;
  }
 }
 __THREW__ = 0;
 invoke_vi(637,($3|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch_3(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  ___resumeException($$03$i|0);
  // unreachable;
 }
}
function __ZN40AsmException_SyntaxError_UnexpectedCommaC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$03$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3,$1);
 HEAP32[$0>>2] = (4652);
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($4|0),($3|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $11 = ___cxa_find_matching_catch_2()|0;
  $12 = tempRet0;
  $$0$i = $12;$$03$i = $11;
 } else {
  $7 = ((($0)) + 16|0);
  HEAP32[$7>>2] = $2;
  $8 = ((($0)) + 20|0);
  ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
  __THREW__ = 0;
  invoke_viii(646,($8|0),(44984|0),0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   $19 = ((($0)) + 32|0);
   HEAP32[$19>>2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
   HEAP32[$0>>2] = (7452);
   STACKTOP = sp;return;
  }
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($4|0));
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if ($16) {
   $17 = ___cxa_find_matching_catch_3(0|0)|0;
   $18 = tempRet0;
   ___clang_call_terminate($17);
   // unreachable;
  } else {
   $$0$i = $14;$$03$i = $13;
  }
 }
 __THREW__ = 0;
 invoke_vi(637,($3|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch_3(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  ___resumeException($$03$i|0);
  // unreachable;
 }
}
function __ZN35AsmException_SyntaxError_OutOfRangeD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK35AsmException_SyntaxError_OutOfRange7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (27137|0);
}
function __ZN40AsmException_SyntaxError_EmptyExpressionC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$03$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3,$1);
 HEAP32[$0>>2] = (4652);
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($4|0),($3|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $11 = ___cxa_find_matching_catch_2()|0;
  $12 = tempRet0;
  $$0$i = $12;$$03$i = $11;
 } else {
  $7 = ((($0)) + 16|0);
  HEAP32[$7>>2] = $2;
  $8 = ((($0)) + 20|0);
  ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
  __THREW__ = 0;
  invoke_viii(646,($8|0),(44984|0),0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   $19 = ((($0)) + 32|0);
   HEAP32[$19>>2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
   HEAP32[$0>>2] = (4556);
   STACKTOP = sp;return;
  }
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($4|0));
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if ($16) {
   $17 = ___cxa_find_matching_catch_3(0|0)|0;
   $18 = tempRet0;
   ___clang_call_terminate($17);
   // unreachable;
  } else {
   $$0$i = $14;$$03$i = $13;
  }
 }
 __THREW__ = 0;
 invoke_vi(637,($3|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch_3(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  ___resumeException($$03$i|0);
  // unreachable;
 }
}
function __ZN37AsmException_SyntaxError_MissingQuoteC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$03$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3,$1);
 HEAP32[$0>>2] = (4652);
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($4|0),($3|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $11 = ___cxa_find_matching_catch_2()|0;
  $12 = tempRet0;
  $$0$i = $12;$$03$i = $11;
 } else {
  $7 = ((($0)) + 16|0);
  HEAP32[$7>>2] = $2;
  $8 = ((($0)) + 20|0);
  ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
  __THREW__ = 0;
  invoke_viii(646,($8|0),(44984|0),0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   $19 = ((($0)) + 32|0);
   HEAP32[$19>>2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
   HEAP32[$0>>2] = (9204);
   STACKTOP = sp;return;
  }
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($4|0));
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if ($16) {
   $17 = ___cxa_find_matching_catch_3(0|0)|0;
   $18 = tempRet0;
   ___clang_call_terminate($17);
   // unreachable;
  } else {
   $$0$i = $14;$$03$i = $13;
  }
 }
 __THREW__ = 0;
 invoke_vi(637,($3|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch_3(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  ___resumeException($$03$i|0);
  // unreachable;
 }
}
function __ZN22AsmException_UserErrorC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEiS6_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0$i = 0, $$02$i = 0, $$03 = 0, $$03$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body6$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($4,$1);
 HEAP32[$0>>2] = (4652);
 $5 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($5|0),($4|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 do {
  if ($7) {
   $12 = ___cxa_find_matching_catch_2()|0;
   $13 = tempRet0;
   $$0$i = $13;$$03$i = $12;
  } else {
   $8 = ((($0)) + 16|0);
   HEAP32[$8>>2] = $2;
   $9 = ((($0)) + 20|0);
   ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
   __THREW__ = 0;
   invoke_viii(646,($9|0),(44984|0),0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    $14 = ___cxa_find_matching_catch_2()|0;
    $15 = tempRet0;
    __THREW__ = 0;
    invoke_vi(637,($5|0));
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     $$0$i = $15;$$03$i = $14;
     break;
    }
    $18 = ___cxa_find_matching_catch_3(0|0)|0;
    $19 = tempRet0;
    ___clang_call_terminate($18);
    // unreachable;
   }
   $20 = ((($0)) + 32|0);
   HEAP32[$20>>2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
   HEAP32[$0>>2] = (9180);
   $21 = ((($0)) + 36|0);
   __THREW__ = 0;
   invoke_vii(635,($21|0),($3|0));
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if (!($23)) {
    STACKTOP = sp;return;
   }
   $26 = ___cxa_find_matching_catch_2()|0;
   $27 = tempRet0;
   HEAP32[$0>>2] = (4652);
   __THREW__ = 0;
   invoke_vi(637,($9|0));
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   do {
    if ($29) {
     $32 = ___cxa_find_matching_catch_3(0|0)|0;
     $33 = tempRet0;
     __THREW__ = 0;
     invoke_vi(637,($5|0));
     $34 = __THREW__; __THREW__ = 0;
     $35 = $34&1;
     if ($35) {
      $38 = ___cxa_find_matching_catch_3(0|0)|0;
      $39 = tempRet0;
      ___clang_call_terminate($38);
      // unreachable;
     } else {
      $$02$i = $32;
     }
    } else {
     __THREW__ = 0;
     invoke_vi(637,($5|0));
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     if ($31) {
      $36 = ___cxa_find_matching_catch_3(0|0)|0;
      $37 = tempRet0;
      $$02$i = $36;
      break;
     } else {
      $$0 = $27;$$03 = $26;
      ___resumeException($$03|0);
      // unreachable;
     }
    }
   } while(0);
   $eh$lpad$body6$indexZ2D = $$02$i;
   ___clang_call_terminate($eh$lpad$body6$indexZ2D);
   // unreachable;
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if (!($25)) {
  $$0 = $$0$i;$$03 = $$03$i;
  ___resumeException($$03|0);
  // unreachable;
 }
 $40 = ___cxa_find_matching_catch_3(0|0)|0;
 $41 = tempRet0;
 $eh$lpad$body6$indexZ2D = $40;
 ___clang_call_terminate($eh$lpad$body6$indexZ2D);
 // unreachable;
}
function __ZN22AsmException_UserErrorD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (9180);
 $1 = ((($0)) + 36|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  __ZN24AsmException_SyntaxErrorD2Ev($0);
  return;
 }
 $4 = ___cxa_find_matching_catch_2()|0;
 $5 = tempRet0;
 __THREW__ = 0;
 invoke_vi(7,($0|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch_3(0|0)|0;
  $9 = tempRet0;
  ___clang_call_terminate($8);
  // unreachable;
 } else {
  ___resumeException($4|0);
  // unreachable;
 }
}
function __ZN22AsmException_UserErrorD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $$02$i4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (9180);
 $1 = ((($0)) + 36|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $19 = ___cxa_find_matching_catch_2()|0;
  $20 = tempRet0;
  HEAP32[$0>>2] = (4652);
  $21 = ((($0)) + 20|0);
  __THREW__ = 0;
  invoke_vi(637,($21|0));
  $22 = __THREW__; __THREW__ = 0;
  $23 = $22&1;
  if ($23) {
   $27 = ___cxa_find_matching_catch_3(0|0)|0;
   $28 = tempRet0;
   $29 = ((($0)) + 4|0);
   __THREW__ = 0;
   invoke_vi(637,($29|0));
   $30 = __THREW__; __THREW__ = 0;
   $31 = $30&1;
   if ($31) {
    $34 = ___cxa_find_matching_catch_3(0|0)|0;
    $35 = tempRet0;
    ___clang_call_terminate($34);
    // unreachable;
   } else {
    $$02$i4 = $27;
    ___clang_call_terminate($$02$i4);
    // unreachable;
   }
  }
  $24 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($24|0));
  $25 = __THREW__; __THREW__ = 0;
  $26 = $25&1;
  if (!($26)) {
   $eh$lpad$body$index2Z2D = $20;$eh$lpad$body$indexZ2D = $19;
   __ZdlPv($0);
   ___resumeException($eh$lpad$body$indexZ2D|0);
   // unreachable;
  }
  $32 = ___cxa_find_matching_catch_3(0|0)|0;
  $33 = tempRet0;
  $$02$i4 = $32;
  ___clang_call_terminate($$02$i4);
  // unreachable;
 } else {
  HEAP32[$0>>2] = (4652);
  $4 = ((($0)) + 20|0);
  __THREW__ = 0;
  invoke_vi(637,($4|0));
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  do {
   if ($6) {
    $10 = ___cxa_find_matching_catch_2()|0;
    $11 = tempRet0;
    $12 = ((($0)) + 4|0);
    __THREW__ = 0;
    invoke_vi(637,($12|0));
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if ($14) {
     $17 = ___cxa_find_matching_catch_3(0|0)|0;
     $18 = tempRet0;
     ___clang_call_terminate($17);
     // unreachable;
    } else {
     $$0$i = $11;$$02$i = $10;
    }
   } else {
    $7 = ((($0)) + 4|0);
    __THREW__ = 0;
    invoke_vi(637,($7|0));
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if ($9) {
     $15 = ___cxa_find_matching_catch_2()|0;
     $16 = tempRet0;
     $$0$i = $16;$$02$i = $15;
     break;
    } else {
     __ZdlPv($0);
     return;
    }
   }
  } while(0);
  $eh$lpad$body$index2Z2D = $$0$i;$eh$lpad$body$indexZ2D = $$02$i;
  __ZdlPv($0);
  ___resumeException($eh$lpad$body$indexZ2D|0);
  // unreachable;
 }
}
function __ZNK22AsmException_UserError7MessageEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 36|0);
 $2 = ((($1)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = $5;
  return ($6|0);
 } else {
  $6 = $1;
  return ($6|0);
 }
 return (0)|0;
}
function __ZN37AsmException_SyntaxError_MissingQuoteD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK37AsmException_SyntaxError_MissingQuote7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (27216|0);
}
function __ZN37AsmException_SyntaxError_MissingCommaC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$03$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3,$1);
 HEAP32[$0>>2] = (4652);
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($4|0),($3|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $11 = ___cxa_find_matching_catch_2()|0;
  $12 = tempRet0;
  $$0$i = $12;$$03$i = $11;
 } else {
  $7 = ((($0)) + 16|0);
  HEAP32[$7>>2] = $2;
  $8 = ((($0)) + 20|0);
  ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
  __THREW__ = 0;
  invoke_viii(646,($8|0),(44984|0),0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   $19 = ((($0)) + 32|0);
   HEAP32[$19>>2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
   HEAP32[$0>>2] = (9300);
   STACKTOP = sp;return;
  }
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($4|0));
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if ($16) {
   $17 = ___cxa_find_matching_catch_3(0|0)|0;
   $18 = tempRet0;
   ___clang_call_terminate($17);
   // unreachable;
  } else {
   $$0$i = $14;$$03$i = $13;
  }
 }
 __THREW__ = 0;
 invoke_vi(637,($3|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch_3(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  ___resumeException($$03$i|0);
  // unreachable;
 }
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIKS6_EEvRT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$06$i$i = 0, $$pre$i = 0, $$pre38 = 0, $$sroa$16$0 = 0, $$sroa$16$1 = 0, $$sroa$16$2 = 0, $$sroa$7$0 = 0, $$sroa$7$1 = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $8 = 0, $9 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = (($5|0) / 12)&-1;
 $7 = (($6) + 1)|0;
 $8 = ($7>>>0)>(357913941);
 if ($8) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) - ($4))|0;
 $12 = (($11|0) / 12)&-1;
 $13 = ($12>>>0)<(178956970);
 $14 = $12 << 1;
 $15 = ($14>>>0)<($7>>>0);
 $$sroa$speculated$i = $15 ? $7 : $14;
 $$0$i = $13 ? $$sroa$speculated$i : 357913941;
 $16 = (($3) - ($4))|0;
 $17 = (($16|0) / 12)&-1;
 $18 = ($$0$i|0)==(0);
 do {
  if ($18) {
   $24 = 0;
  } else {
   $19 = ($$0$i>>>0)>(357913941);
   if ($19) {
    $20 = (___cxa_allocate_exception(4)|0);
    __ZNSt9bad_allocC2Ev($20);
    ___cxa_throw(($20|0),(2848|0),(617|0));
    // unreachable;
   } else {
    $21 = ($$0$i*12)|0;
    $22 = (__Znwj($21)|0);
    $24 = $22;
    break;
   }
  }
 } while(0);
 $23 = (($24) + (($17*12)|0)|0);
 $25 = $23;
 $26 = (($24) + (($$0$i*12)|0)|0);
 $27 = $26;
 __THREW__ = 0;
 invoke_vii(635,($23|0),($1|0));
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 L10: do {
  if ($29) {
   $61 = ___cxa_find_matching_catch_2()|0;
   $62 = tempRet0;
   $$sroa$16$1 = $25;$$sroa$7$1 = $25;$lpad$phi$index = $61;$lpad$phi$index2 = $62;
  } else {
   $30 = ((($23)) + 12|0);
   $31 = $30;
   $32 = HEAP32[$0>>2]|0;
   $33 = HEAP32[$2>>2]|0;
   $34 = ($33|0)==($32|0);
   do {
    if ($34) {
     $35 = $33;
     $36 = $32;
     $46 = $25;$47 = $36;$73 = $35;
    } else {
     $$06$i$i = $33;$$sroa$7$0 = $25;$38 = $23;
     while(1) {
      $37 = ((($38)) + -12|0);
      $39 = ((($$06$i$i)) + -12|0);
      __THREW__ = 0;
      invoke_vii(635,($37|0),($39|0));
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       label = 20;
       break;
      }
      $42 = $$sroa$7$0;
      $43 = ((($42)) + -12|0);
      $44 = $43;
      $45 = ($39|0)==($32|0);
      if ($45) {
       label = 12;
       break;
      } else {
       $$06$i$i = $39;$$sroa$7$0 = $44;$38 = $43;
      }
     }
     if ((label|0) == 12) {
      $$pre$i = HEAP32[$0>>2]|0;
      $$pre38 = HEAP32[$2>>2]|0;
      $46 = $44;$47 = $$pre$i;$73 = $$pre38;
      break;
     }
     else if ((label|0) == 20) {
      $59 = ___cxa_find_matching_catch_2()|0;
      $60 = tempRet0;
      $$sroa$16$1 = $31;$$sroa$7$1 = $$sroa$7$0;$lpad$phi$index = $59;$lpad$phi$index2 = $60;
      break L10;
     }
    }
   } while(0);
   HEAP32[$0>>2] = $46;
   HEAP32[$2>>2] = $31;
   HEAP32[$9>>2] = $27;
   $48 = $47;
   $$sroa$16$0 = $73;
   while(1) {
    $49 = $$sroa$16$0;
    $50 = ($49|0)==($48|0);
    if ($50) {
     break;
    }
    $51 = ((($49)) + -12|0);
    $52 = $51;
    __THREW__ = 0;
    invoke_vi(637,($51|0));
    $53 = __THREW__; __THREW__ = 0;
    $54 = $53&1;
    if ($54) {
     label = 16;
     break;
    } else {
     $$sroa$16$0 = $52;
    }
   }
   if ((label|0) == 16) {
    $55 = ___cxa_find_matching_catch_2()|0;
    $56 = tempRet0;
    ___cxa_call_unexpected(($55|0));
    // unreachable;
   }
   $57 = ($47|0)==(0);
   if ($57) {
    return;
   }
   $58 = $47;
   __ZdlPv($58);
   return;
  }
 } while(0);
 $63 = $$sroa$7$1;
 $$sroa$16$2 = $$sroa$16$1;
 while(1) {
  $64 = $$sroa$16$2;
  $65 = ($64|0)==($63|0);
  if ($65) {
   break;
  }
  $66 = ((($64)) + -12|0);
  $67 = $66;
  __THREW__ = 0;
  invoke_vi(637,($66|0));
  $68 = __THREW__; __THREW__ = 0;
  $69 = $68&1;
  if ($69) {
   label = 25;
   break;
  } else {
   $$sroa$16$2 = $67;
  }
 }
 if ((label|0) == 25) {
  $70 = ___cxa_find_matching_catch_2()|0;
  $71 = tempRet0;
  ___cxa_call_unexpected(($70|0));
  // unreachable;
 }
 $72 = ($24|0)==(0|0);
 if ($72) {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 __ZdlPv($24);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZN42AsmException_SyntaxError_InvalidSymbolNameC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$03$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3,$1);
 HEAP32[$0>>2] = (4652);
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($4|0),($3|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $11 = ___cxa_find_matching_catch_2()|0;
  $12 = tempRet0;
  $$0$i = $12;$$03$i = $11;
 } else {
  $7 = ((($0)) + 16|0);
  HEAP32[$7>>2] = $2;
  $8 = ((($0)) + 20|0);
  ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
  __THREW__ = 0;
  invoke_viii(646,($8|0),(44984|0),0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   $19 = ((($0)) + 32|0);
   HEAP32[$19>>2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
   HEAP32[$0>>2] = (9276);
   STACKTOP = sp;return;
  }
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($4|0));
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if ($16) {
   $17 = ___cxa_find_matching_catch_3(0|0)|0;
   $18 = tempRet0;
   ___clang_call_terminate($17);
   // unreachable;
  } else {
   $$0$i = $14;$$03$i = $13;
  }
 }
 __THREW__ = 0;
 invoke_vi(637,($3|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch_3(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  ___resumeException($$03$i|0);
  // unreachable;
 }
}
function __ZN42AsmException_SyntaxError_InvalidSymbolNameD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK42AsmException_SyntaxError_InvalidSymbolName7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (27294|0);
}
function __ZN37AsmException_SyntaxError_MissingCommaD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK37AsmException_SyntaxError_MissingComma7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (27430|0);
}
function __ZN41AsmException_SyntaxError_InvalidMacroNameD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK41AsmException_SyntaxError_InvalidMacroName7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (27489|0);
}
function __ZN43AsmException_SyntaxError_DuplicateMacroNameD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK43AsmException_SyntaxError_DuplicateMacroName7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (27630|0);
}
function __ZN38AsmException_SyntaxError_BackwardsSkipD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK38AsmException_SyntaxError_BackwardsSkip7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (27708|0);
}
function __ZN37AsmException_SyntaxError_BadAlignmentD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK37AsmException_SyntaxError_BadAlignment7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (27791|0);
}
function __ZN44AsmException_SyntaxError_LabelAlreadyDefinedC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$03$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3,$1);
 HEAP32[$0>>2] = (4652);
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($4|0),($3|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $11 = ___cxa_find_matching_catch_2()|0;
  $12 = tempRet0;
  $$0$i = $12;$$03$i = $11;
 } else {
  $7 = ((($0)) + 16|0);
  HEAP32[$7>>2] = $2;
  $8 = ((($0)) + 20|0);
  ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
  __THREW__ = 0;
  invoke_viii(646,($8|0),(44984|0),0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   $19 = ((($0)) + 32|0);
   HEAP32[$19>>2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
   HEAP32[$0>>2] = (8248);
   STACKTOP = sp;return;
  }
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($4|0));
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if ($16) {
   $17 = ___cxa_find_matching_catch_3(0|0)|0;
   $18 = tempRet0;
   ___clang_call_terminate($17);
   // unreachable;
  } else {
   $$0$i = $14;$$03$i = $13;
  }
 }
 __THREW__ = 0;
 invoke_vi(637,($3|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch_3(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  ___resumeException($$03$i|0);
  // unreachable;
 }
}
function __ZN32AsmException_SyntaxError_BadStepD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK32AsmException_SyntaxError_BadStep7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (27857|0);
}
function __ZN31AsmException_FileError_WriteObjD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4628);
 $1 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  __ZdlPv($0);
  ___resumeException($4|0);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZNK31AsmException_FileError_WriteObj7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (27937|0);
}
function __ZN30AsmException_FileError_OpenObjD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4628);
 $1 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  __ZdlPv($0);
  ___resumeException($4|0);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZNK30AsmException_FileError_OpenObj7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (28002|0);
}
function __ZN35AsmException_SyntaxError_NoAnonSaveD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK35AsmException_SyntaxError_NoAnonSave7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (28080|0);
}
function __ZN40AsmException_SyntaxError_OnlyOneAnonSaveD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK40AsmException_SyntaxError_OnlyOneAnonSave7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (28212|0);
}
function __ZN37AsmException_SyntaxError_NumberTooBigC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$03$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3,$1);
 HEAP32[$0>>2] = (4652);
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(635,($4|0),($3|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $11 = ___cxa_find_matching_catch_2()|0;
  $12 = tempRet0;
  $$0$i = $12;$$03$i = $11;
 } else {
  $7 = ((($0)) + 16|0);
  HEAP32[$7>>2] = $2;
  $8 = ((($0)) + 20|0);
  ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
  __THREW__ = 0;
  invoke_viii(646,($8|0),(44984|0),0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   $19 = ((($0)) + 32|0);
   HEAP32[$19>>2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
   HEAP32[$0>>2] = (3916);
   STACKTOP = sp;return;
  }
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  __THREW__ = 0;
  invoke_vi(637,($4|0));
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if ($16) {
   $17 = ___cxa_find_matching_catch_3(0|0)|0;
   $18 = tempRet0;
   ___clang_call_terminate($17);
   // unreachable;
  } else {
   $$0$i = $14;$$03$i = $13;
  }
 }
 __THREW__ = 0;
 invoke_vi(637,($3|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch_3(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  ___resumeException($$03$i|0);
  // unreachable;
 }
}
function __ZN36AsmException_SyntaxError_CantIncludeD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK36AsmException_SyntaxError_CantInclude7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (28332|0);
}
function __ZN42AsmException_SyntaxError_SecondPassProblemD0Ev($0) {
 $0 = $0|0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4652);
 $1 = ((($0)) + 20|0);
 __THREW__ = 0;
 invoke_vi(637,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $9 = ((($0)) + 4|0);
  __THREW__ = 0;
  invoke_vi(637,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   $$0$i = $8;$$02$i = $7;
   __ZdlPv($0);
   ___resumeException($$02$i|0);
   // unreachable;
  }
 }
 $4 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vi(637,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $$0$i = $13;$$02$i = $12;
 __ZdlPv($0);
 ___resumeException($$02$i|0);
 // unreachable;
}
function __ZNK42AsmException_SyntaxError_SecondPassProblem7MessageEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (28446|0);
}
function __ZN10LineParser24GetTokenAndAdvanceColumnEv($0) {
 $0 = $0|0;
 var $$02536 = 0, $$031 = 0, $$031$us = 0, $$127 = 0, $$pre = 0, $$pre48 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = ((($0)) + 16|0);
 $3 = ((($1)) + 11|0);
 $$pre48 = HEAP32[$2>>2]|0;
 $$02536 = 0;
 L1: while(1) {
  $4 = (8468 + (($$02536*20)|0)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_strlen($5)|0);
  $7 = ($6|0)==(0);
  if ($7) {
   $33 = 0;
   break;
  }
  $8 = HEAP8[$3>>0]|0;
  $9 = ($8<<24>>24)<(0);
  L4: do {
   if ($9) {
    $$pre = HEAP32[$1>>2]|0;
    $$031$us = 0;
    while(1) {
     $10 = (($5) + ($$031$us)|0);
     $11 = HEAP8[$10>>0]|0;
     $12 = $11 << 24 >> 24;
     $13 = (($$pre48) + ($$031$us))|0;
     $14 = (($$pre) + ($13)|0);
     $15 = HEAP8[$14>>0]|0;
     $16 = $15 << 24 >> 24;
     $17 = (_toupper($16)|0);
     $18 = ($12|0)==($17|0);
     $19 = (($$031$us) + 1)|0;
     if (!($18)) {
      break L4;
     }
     $20 = ($19>>>0)<($6>>>0);
     if ($20) {
      $$031$us = $19;
     } else {
      $33 = $6;
      break L1;
     }
    }
   } else {
    $$031 = 0;
    while(1) {
     $23 = (($5) + ($$031)|0);
     $24 = HEAP8[$23>>0]|0;
     $25 = $24 << 24 >> 24;
     $26 = (($$pre48) + ($$031))|0;
     $27 = (($1) + ($26)|0);
     $28 = HEAP8[$27>>0]|0;
     $29 = $28 << 24 >> 24;
     $30 = (_toupper($29)|0);
     $31 = ($25|0)==($30|0);
     $21 = (($$031) + 1)|0;
     if (!($31)) {
      break L4;
     }
     $22 = ($21>>>0)<($6>>>0);
     if ($22) {
      $$031 = $21;
     } else {
      $33 = $6;
      break L1;
     }
    }
   }
  } while(0);
  $34 = (($$02536) + 1)|0;
  $35 = ($34|0)<(34);
  if ($35) {
   $$02536 = $34;
  } else {
   $$127 = -1;
   label = 11;
   break;
  }
 }
 if ((label|0) == 11) {
  return ($$127|0);
 }
 $32 = (($$pre48) + ($33))|0;
 HEAP32[$2>>2] = $32;
 $$127 = $$02536;
 return ($$127|0);
}
function __Z16SetupBASICTablesv() {
 var $$ = 0, $$0 = 0, $$054$ph63 = 0, $$055$ph62 = 0, $$056 = 0, $$164 = 0, $$off = 0, $$off58 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _memset((36368|0),0,2704)|0;
 $$164 = 0;
 while(1) {
  $0 = (9532 + ($$164<<4)|0);
  $1 = HEAP32[$0>>2]|0;
  $2 = (_strlen($1)|0);
  $3 = (((9532 + ($$164<<4)|0)) + 8|0);
  HEAP32[$3>>2] = $2;
  $4 = ($2|0)==(0);
  do {
   if (!($4)) {
    $5 = ($$164|0)<(64);
    if (!($5)) {
     $6 = (($$164) + -64)|0;
     $7 = (9532 + ($6<<4)|0);
     $8 = HEAP32[$7>>2]|0;
     $9 = (_strcmp($1,$8)|0);
     $10 = ($9|0)==(0);
     if ($10) {
      break;
     }
    }
    $11 = HEAP8[$1>>0]|0;
    $$off = (($11) + -65)<<24>>24;
    $12 = ($$off&255)>(25);
    if ($12) {
     $22 = 0;
    } else {
     $13 = $11 << 24 >> 24;
     $14 = ((($1)) + 1|0);
     $15 = HEAP8[$14>>0]|0;
     $16 = $15 << 24 >> 24;
     $$off58 = (($15) + -65)<<24>>24;
     $17 = ($$off58&255)>(25);
     $18 = ($13*26)|0;
     $19 = (($18) + -1755)|0;
     $20 = (($19) + ($16))|0;
     $$ = $17 ? 0 : $20;
     $22 = $$;
    }
    $21 = (36368 + ($22<<2)|0);
    $$056 = $21;
    while(1) {
     $23 = HEAP32[$$056>>2]|0;
     $24 = ($23|0)==(0|0);
     $25 = ((($23)) + 12|0);
     if ($24) {
      break;
     } else {
      $$056 = $25;
     }
    }
    HEAP32[$$056>>2] = $0;
   }
  } while(0);
  $26 = (($$164) + 1)|0;
  $exitcond = ($26|0)==(128);
  if ($exitcond) {
   $28 = 675;
   break;
  } else {
   $$164 = $26;
  }
 }
 while(1) {
  $27 = (36368 + ($28<<2)|0);
  $29 = HEAP32[$27>>2]|0;
  $30 = ($29|0)==(0|0);
  L17: do {
   if (!($30)) {
    $33 = ((($29)) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($34|0)==(0|0);
    if (!($35)) {
     $36 = ((($29)) + 8|0);
     $37 = HEAP32[$36>>2]|0;
     $$054$ph63 = $37;$$055$ph62 = $33;$53 = $34;
     while(1) {
      $42 = $53;
      while(1) {
       $41 = ((($42)) + 8|0);
       $43 = HEAP32[$41>>2]|0;
       $44 = ($43>>>0)>($$054$ph63>>>0);
       $39 = ((($42)) + 12|0);
       if (!($44)) {
        break;
       }
       $45 = HEAP32[$39>>2]|0;
       HEAP32[$$055$ph62>>2] = $45;
       $$0 = $27;
       while(1) {
        $46 = HEAP32[$$0>>2]|0;
        $47 = ((($46)) + 8|0);
        $48 = HEAP32[$47>>2]|0;
        $49 = ($48>>>0)<($43>>>0);
        $50 = ((($46)) + 12|0);
        if ($49) {
         break;
        } else {
         $$0 = $50;
        }
       }
       HEAP32[$39>>2] = $46;
       HEAP32[$$0>>2] = $42;
       $51 = HEAP32[$$055$ph62>>2]|0;
       $52 = ($51|0)==(0|0);
       if ($52) {
        break L17;
       } else {
        $42 = $51;
       }
      }
      $38 = HEAP32[$39>>2]|0;
      $40 = ($38|0)==(0|0);
      if ($40) {
       break;
      } else {
       $$054$ph63 = $43;$$055$ph62 = $39;$53 = $38;
      }
     }
    }
   }
  } while(0);
  $31 = (($28) + -1)|0;
  $32 = ($28|0)==(0);
  if ($32) {
   break;
  } else {
   $28 = $31;
  }
 }
 return;
}
function __Z16GetBASICErrorNumv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[9768]|0;
 return ($0|0);
}
function __Z12GetCharacterv() {
 var $$ = 0, $$0 = 0, $$027 = 0, $$028 = 0, $$off = 0, $$off20 = 0, $$off21 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $phitmp36 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp;
 $1 = HEAP32[9769]|0;
 $2 = ($1|0)==(8);
 if ($2) {
  $3 = HEAP8[(42899)>>0]|0;
  HEAP8[42898] = $3;
  $4 = HEAP8[(42900)>>0]|0;
  HEAP8[(42899)>>0] = $4;
  $5 = HEAP8[(42901)>>0]|0;
  HEAP8[(42900)>>0] = $5;
  $6 = HEAP8[(42902)>>0]|0;
  HEAP8[(42901)>>0] = $6;
  $7 = HEAP8[(42903)>>0]|0;
  HEAP8[(42902)>>0] = $7;
  $8 = HEAP8[(42904)>>0]|0;
  HEAP8[(42903)>>0] = $8;
  $9 = HEAP8[(42905)>>0]|0;
  HEAP8[(42904)>>0] = $9;
  $10 = HEAP8[(42906)>>0]|0;
  HEAP8[(42905)>>0] = $10;
  $11 = HEAP32[9770]|0;
  L3: while(1) {
   $12 = (_fgetc($11)|0);
   switch ($12|0) {
   case 13:  {
    break;
   }
   case 10:  {
    label = 4;
    break L3;
    break;
   }
   default: {
    label = 5;
    break L3;
   }
   }
  }
  if ((label|0) == 4) {
   $13 = HEAP32[9773]|0;
   $14 = (($13) + 1)|0;
   HEAP32[9773] = $14;
   $15 = 10;
  }
  else if ((label|0) == 5) {
   $phitmp36 = $12&255;
   $15 = $phitmp36;
  }
  HEAP8[(42906)>>0] = $15;
 } else {
  $16 = HEAP32[9770]|0;
  L10: while(1) {
   $17 = (_fgetc($16)|0);
   switch ($17|0) {
   case 13:  {
    break;
   }
   case 10:  {
    label = 9;
    break L10;
    break;
   }
   default: {
    label = 10;
    break L10;
   }
   }
  }
  if ((label|0) == 9) {
   $18 = HEAP32[9773]|0;
   $19 = (($18) + 1)|0;
   HEAP32[9773] = $19;
   $22 = 10;
  }
  else if ((label|0) == 10) {
   $phitmp = $17&255;
   $22 = $phitmp;
  }
  $20 = HEAP32[9769]|0;
  $21 = (42898 + ($20)|0);
  HEAP8[$21>>0] = $22;
  $23 = (($20) + 1)|0;
  HEAP32[9769] = $23;
 }
 $24 = HEAP32[9770]|0;
 $25 = (_feof($24)|0);
 $26 = ($25|0)==(0);
 if (!($26)) {
  $27 = HEAP32[9769]|0;
  $28 = (($27) + -1)|0;
  HEAP32[9769] = $28;
  $29 = ($28|0)==(0);
  if ($29) {
   HEAP8[42909] = 1;
   STACKTOP = sp;return;
  }
 }
 $30 = HEAP8[42898]|0;
 HEAP8[42907] = $30;
 $$off = (($30) + -65)<<24>>24;
 $31 = ($$off&255)>(25);
 if ($31) {
  $40 = 0;
 } else {
  $32 = $30 << 24 >> 24;
  $33 = HEAP8[(42899)>>0]|0;
  $34 = $33 << 24 >> 24;
  $$off20 = (($33) + -65)<<24>>24;
  $35 = ($$off20&255)>(25);
  $36 = ($32*26)|0;
  $37 = (($36) + -1755)|0;
  $38 = (($37) + ($34))|0;
  $$ = $35 ? 0 : $38;
  $40 = $$;
 }
 $39 = (36368 + ($40<<2)|0);
 $$027 = HEAP32[$39>>2]|0;
 $41 = ($$027|0)==(0|0);
 L25: do {
  if ($41) {
   $58 = $30;
  } else {
   $42 = HEAP32[9769]|0;
   $$028 = $$027;
   while(1) {
    $43 = ((($$028)) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ($42>>>0)<($44>>>0);
    if (!($45)) {
     $46 = HEAP32[$$028>>2]|0;
     $47 = (_strncmp(42898,$46,$44)|0);
     $48 = ($47|0)==(0);
     if ($48) {
      break;
     }
    }
    $56 = ((($$028)) + 12|0);
    $$0 = HEAP32[$56>>2]|0;
    $57 = ($$0|0)==(0|0);
    if ($57) {
     $58 = $30;
     break L25;
    } else {
     $$028 = $$0;
    }
   }
   $49 = $$028;
   $50 = (($49) - (9532))|0;
   $51 = $50 >>> 4;
   $52 = (($51) + 128)|0;
   $53 = $52&255;
   HEAP8[42907] = $53;
   $54 = (42898 + ($44)|0);
   $55 = HEAP8[$54>>0]|0;
   HEAP8[42908] = $55;
   $58 = $53;
  }
 } while(0);
 HEAP8[42910] = 0;
 $$off21 = (($58) + -48)<<24>>24;
 $59 = ($$off21&255)<(10);
 if (!($59)) {
  STACKTOP = sp;return;
 }
 HEAP8[42910] = 1;
 $60 = (_strtol(42898,$0,10)|0);
 HEAP32[9771] = $60;
 $61 = HEAP32[$0>>2]|0;
 $62 = (($61) - (42898))|0;
 HEAP32[9772] = $62;
 STACKTOP = sp;return;
}
function __Z17CopyStringLiteralv() {
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond20 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP16[21320]|0;
 $1 = ($0<<16>>16)==(-32768);
 if ($1) {
  HEAP32[9768] = 3;
 } else {
  $2 = HEAP8[42898]|0;
  $3 = $0&65535;
  $4 = (($0) + 1)<<16>>16;
  HEAP16[21320] = $4;
  $5 = HEAP32[9774]|0;
  $6 = (($5) + ($3)|0);
  HEAP8[$6>>0] = $2;
 }
 $7 = HEAP8[(42899)>>0]|0;
 HEAP8[42898] = $7;
 $8 = HEAP8[(42900)>>0]|0;
 HEAP8[(42899)>>0] = $8;
 $9 = HEAP8[(42901)>>0]|0;
 HEAP8[(42900)>>0] = $9;
 $10 = HEAP8[(42902)>>0]|0;
 HEAP8[(42901)>>0] = $10;
 $11 = HEAP8[(42903)>>0]|0;
 HEAP8[(42902)>>0] = $11;
 $12 = HEAP8[(42904)>>0]|0;
 HEAP8[(42903)>>0] = $12;
 $13 = HEAP8[(42905)>>0]|0;
 HEAP8[(42904)>>0] = $13;
 $14 = HEAP8[(42906)>>0]|0;
 HEAP8[(42905)>>0] = $14;
 $15 = HEAP32[9769]|0;
 $16 = (($15) + -1)|0;
 HEAP32[9769] = $16;
 $17 = (42898 + ($16)|0);
 HEAP8[$17>>0] = 0;
 __Z12GetCharacterv();
 $18 = HEAP32[9768]|0;
 $19 = ($18|0)==(0);
 $20 = HEAP8[42909]|0;
 $21 = ($20<<24>>24)==(0);
 $or$cond20 = $19 & $21;
 $22 = HEAP8[42898]|0;
 L5: do {
  if ($or$cond20) {
   $23 = $22;
   while(1) {
    switch ($23<<24>>24) {
    case 10: case 34:  {
     $46 = $23;
     break L5;
     break;
    }
    default: {
    }
    }
    $24 = HEAP16[21320]|0;
    $25 = ($24<<16>>16)==(-32768);
    if ($25) {
     HEAP32[9768] = 3;
    } else {
     $26 = $24&65535;
     $27 = (($24) + 1)<<16>>16;
     HEAP16[21320] = $27;
     $28 = HEAP32[9774]|0;
     $29 = (($28) + ($26)|0);
     HEAP8[$29>>0] = $23;
    }
    $30 = HEAP8[(42899)>>0]|0;
    HEAP8[42898] = $30;
    $31 = HEAP8[(42900)>>0]|0;
    HEAP8[(42899)>>0] = $31;
    $32 = HEAP8[(42901)>>0]|0;
    HEAP8[(42900)>>0] = $32;
    $33 = HEAP8[(42902)>>0]|0;
    HEAP8[(42901)>>0] = $33;
    $34 = HEAP8[(42903)>>0]|0;
    HEAP8[(42902)>>0] = $34;
    $35 = HEAP8[(42904)>>0]|0;
    HEAP8[(42903)>>0] = $35;
    $36 = HEAP8[(42905)>>0]|0;
    HEAP8[(42904)>>0] = $36;
    $37 = HEAP8[(42906)>>0]|0;
    HEAP8[(42905)>>0] = $37;
    $38 = HEAP32[9769]|0;
    $39 = (($38) + -1)|0;
    HEAP32[9769] = $39;
    $40 = (42898 + ($39)|0);
    HEAP8[$40>>0] = 0;
    __Z12GetCharacterv();
    $41 = HEAP32[9768]|0;
    $42 = ($41|0)==(0);
    $43 = HEAP8[42909]|0;
    $44 = ($43<<24>>24)==(0);
    $or$cond = $42 & $44;
    $45 = HEAP8[42898]|0;
    if ($or$cond) {
     $23 = $45;
    } else {
     $46 = $45;
     break L5;
    }
   }
  } else {
   $46 = $22;
  }
 } while(0);
 $47 = ($46<<24>>24)==(34);
 if (!($47)) {
  HEAP32[9768] = -1;
  $48 = HEAP32[9773]|0;
  HEAP32[$vararg_buffer>>2] = $48;
  (_sprintf(42642,29140,$vararg_buffer)|0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $49 = HEAP16[21320]|0;
 $50 = ($49<<16>>16)==(-32768);
 if ($50) {
  HEAP32[9768] = 3;
 } else {
  $51 = $49&65535;
  $52 = (($49) + 1)<<16>>16;
  HEAP16[21320] = $52;
  $53 = HEAP32[9774]|0;
  $54 = (($53) + ($51)|0);
  HEAP8[$54>>0] = 34;
 }
 $55 = HEAP8[(42899)>>0]|0;
 HEAP8[42898] = $55;
 $56 = HEAP8[(42900)>>0]|0;
 HEAP8[(42899)>>0] = $56;
 $57 = HEAP8[(42901)>>0]|0;
 HEAP8[(42900)>>0] = $57;
 $58 = HEAP8[(42902)>>0]|0;
 HEAP8[(42901)>>0] = $58;
 $59 = HEAP8[(42903)>>0]|0;
 HEAP8[(42902)>>0] = $59;
 $60 = HEAP8[(42904)>>0]|0;
 HEAP8[(42903)>>0] = $60;
 $61 = HEAP8[(42905)>>0]|0;
 HEAP8[(42904)>>0] = $61;
 $62 = HEAP8[(42906)>>0]|0;
 HEAP8[(42905)>>0] = $62;
 $63 = HEAP32[9769]|0;
 $64 = (($63) + -1)|0;
 HEAP32[9769] = $64;
 $65 = (42898 + ($64)|0);
 HEAP8[$65>>0] = 0;
 __Z12GetCharacterv();
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function __Z21DoLineNumberTokeniserv() {
 var $$0 = 0, $$011$i38 = 0, $$0910$i42 = 0, $$off = 0, $$off47 = 0, $$pre = 0, $$pre60 = 0, $$pre61 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i39 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond1152 = 0, $or$cond49 = 0, $or$cond53 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[9768]|0;
 $1 = ($0|0)==(0);
 $2 = HEAP8[42909]|0;
 $3 = ($2<<24>>24)==(0);
 $or$cond53 = $1 & $3;
 if (!($or$cond53)) {
  $$0 = 1;
  return ($$0|0);
 }
 L3: while(1) {
  $4 = HEAP8[42910]|0;
  $5 = ($4<<24>>24)==(0);
  L5: do {
   if ($5) {
    $58 = HEAP8[42907]|0;
    switch ($58<<24>>24) {
    case 44: case 32:  {
     $59 = HEAP16[21320]|0;
     $60 = ($59<<16>>16)==(-32768);
     if ($60) {
      HEAP32[9768] = 3;
     } else {
      $61 = $59&65535;
      $62 = (($59) + 1)<<16>>16;
      HEAP16[21320] = $62;
      $63 = HEAP32[9774]|0;
      $64 = (($63) + ($61)|0);
      HEAP8[$64>>0] = $58;
     }
     $65 = HEAP8[(42899)>>0]|0;
     HEAP8[42898] = $65;
     $66 = HEAP8[(42900)>>0]|0;
     HEAP8[(42899)>>0] = $66;
     $67 = HEAP8[(42901)>>0]|0;
     HEAP8[(42900)>>0] = $67;
     $68 = HEAP8[(42902)>>0]|0;
     HEAP8[(42901)>>0] = $68;
     $69 = HEAP8[(42903)>>0]|0;
     HEAP8[(42902)>>0] = $69;
     $70 = HEAP8[(42904)>>0]|0;
     HEAP8[(42903)>>0] = $70;
     $71 = HEAP8[(42905)>>0]|0;
     HEAP8[(42904)>>0] = $71;
     $72 = HEAP8[(42906)>>0]|0;
     HEAP8[(42905)>>0] = $72;
     $73 = HEAP32[9769]|0;
     $74 = (($73) + -1)|0;
     HEAP32[9769] = $74;
     $75 = (42898 + ($74)|0);
     HEAP8[$75>>0] = 0;
     __Z12GetCharacterv();
     break L5;
     break;
    }
    case 38:  {
     $76 = HEAP16[21320]|0;
     $77 = ($76<<16>>16)==(-32768);
     if ($77) {
      HEAP32[9768] = 3;
     } else {
      $78 = $76&65535;
      $79 = (($76) + 1)<<16>>16;
      HEAP16[21320] = $79;
      $80 = HEAP32[9774]|0;
      $81 = (($80) + ($78)|0);
      HEAP8[$81>>0] = 38;
     }
     $82 = HEAP8[(42899)>>0]|0;
     HEAP8[42898] = $82;
     $83 = HEAP8[(42900)>>0]|0;
     HEAP8[(42899)>>0] = $83;
     $84 = HEAP8[(42901)>>0]|0;
     HEAP8[(42900)>>0] = $84;
     $85 = HEAP8[(42902)>>0]|0;
     HEAP8[(42901)>>0] = $85;
     $86 = HEAP8[(42903)>>0]|0;
     HEAP8[(42902)>>0] = $86;
     $87 = HEAP8[(42904)>>0]|0;
     HEAP8[(42903)>>0] = $87;
     $88 = HEAP8[(42905)>>0]|0;
     HEAP8[(42904)>>0] = $88;
     $89 = HEAP8[(42906)>>0]|0;
     HEAP8[(42905)>>0] = $89;
     $90 = HEAP32[9769]|0;
     $91 = (($90) + -1)|0;
     HEAP32[9769] = $91;
     $92 = (42898 + ($91)|0);
     HEAP8[$92>>0] = 0;
     __Z12GetCharacterv();
     $93 = HEAP32[9768]|0;
     $94 = ($93|0)==(0);
     $95 = HEAP8[42909]|0;
     $96 = ($95<<24>>24)==(0);
     $or$cond1152 = $94 & $96;
     if (!($or$cond1152)) {
      break L5;
     }
     while(1) {
      $97 = HEAP8[42898]|0;
      $$off = (($97) + -48)<<24>>24;
      $98 = ($$off&255)<(10);
      $$off47 = (($97) + -65)<<24>>24;
      $99 = ($$off47&255)<(6);
      $or$cond49 = $98 | $99;
      if (!($or$cond49)) {
       break L5;
      }
      $100 = HEAP16[21320]|0;
      $101 = ($100<<16>>16)==(-32768);
      if ($101) {
       HEAP32[9768] = 3;
      } else {
       $102 = $100&65535;
       $103 = (($100) + 1)<<16>>16;
       HEAP16[21320] = $103;
       $104 = HEAP32[9774]|0;
       $105 = (($104) + ($102)|0);
       HEAP8[$105>>0] = $97;
      }
      $106 = HEAP8[(42899)>>0]|0;
      HEAP8[42898] = $106;
      $107 = HEAP8[(42900)>>0]|0;
      HEAP8[(42899)>>0] = $107;
      $108 = HEAP8[(42901)>>0]|0;
      HEAP8[(42900)>>0] = $108;
      $109 = HEAP8[(42902)>>0]|0;
      HEAP8[(42901)>>0] = $109;
      $110 = HEAP8[(42903)>>0]|0;
      HEAP8[(42902)>>0] = $110;
      $111 = HEAP8[(42904)>>0]|0;
      HEAP8[(42903)>>0] = $111;
      $112 = HEAP8[(42905)>>0]|0;
      HEAP8[(42904)>>0] = $112;
      $113 = HEAP8[(42906)>>0]|0;
      HEAP8[(42905)>>0] = $113;
      $114 = HEAP32[9769]|0;
      $115 = (($114) + -1)|0;
      HEAP32[9769] = $115;
      $116 = (42898 + ($115)|0);
      HEAP8[$116>>0] = 0;
      __Z12GetCharacterv();
      $117 = HEAP32[9768]|0;
      $118 = ($117|0)==(0);
      $119 = HEAP8[42909]|0;
      $120 = ($119<<24>>24)==(0);
      $or$cond11 = $118 & $120;
      if (!($or$cond11)) {
       break;
      }
     }
     break;
    }
    case 34:  {
     $121 = (__Z17CopyStringLiteralv()|0);
     if ($121) {
      break L5;
     } else {
      $$0 = 0;
      label = 32;
      break L3;
     }
     break;
    }
    default: {
     $$0 = 1;
     label = 32;
     break L3;
    }
    }
   } else {
    $6 = HEAP32[9771]|0;
    $7 = HEAP16[21320]|0;
    $8 = ($7<<16>>16)==(-32768);
    if ($8) {
     HEAP32[9768] = 3;
     label = 6;
    } else {
     $9 = $7&65535;
     $10 = (($7) + 1)<<16>>16;
     HEAP16[21320] = $10;
     $11 = HEAP32[9774]|0;
     $12 = (($11) + ($9)|0);
     HEAP8[$12>>0] = -115;
     $$pre = HEAP16[21320]|0;
     $13 = $6 & 65535;
     $14 = $13 ^ 16448;
     $15 = ($$pre<<16>>16)==(-32768);
     if ($15) {
      label = 6;
     } else {
      $16 = $14 >>> 2;
      $17 = $16 & 48;
      $18 = $14 >>> 12;
      $19 = $18 & 12;
      $20 = $19 | $17;
      $21 = $20 | 64;
      $22 = $21&255;
      $23 = $$pre&65535;
      $24 = (($$pre) + 1)<<16>>16;
      HEAP16[21320] = $24;
      $25 = HEAP32[9774]|0;
      $26 = (($25) + ($23)|0);
      HEAP8[$26>>0] = $22;
      $$pre60 = HEAP16[21320]|0;
      $27 = ($$pre60<<16>>16)==(-32768);
      if ($27) {
       label = 8;
      } else {
       $28 = $6 & 63;
       $29 = $28 | 64;
       $30 = $29&255;
       $31 = $$pre60&65535;
       $32 = (($$pre60) + 1)<<16>>16;
       HEAP16[21320] = $32;
       $33 = HEAP32[9774]|0;
       $34 = (($33) + ($31)|0);
       HEAP8[$34>>0] = $30;
       $$pre61 = HEAP16[21320]|0;
       $35 = ($$pre61<<16>>16)==(-32768);
       if ($35) {
        label = 10;
       } else {
        $36 = $6 >>> 8;
        $37 = $36 & 63;
        $38 = $37 | 64;
        $39 = $38&255;
        $40 = $$pre61&65535;
        $41 = (($$pre61) + 1)<<16>>16;
        HEAP16[21320] = $41;
        $42 = HEAP32[9774]|0;
        $43 = (($42) + ($40)|0);
        HEAP8[$43>>0] = $39;
       }
      }
     }
    }
    if ((label|0) == 6) {
     label = 0;
     HEAP32[9768] = 3;
     label = 8;
    }
    if ((label|0) == 8) {
     label = 0;
     HEAP32[9768] = 3;
     label = 10;
    }
    if ((label|0) == 10) {
     label = 0;
     HEAP32[9768] = 3;
    }
    $44 = HEAP32[9772]|0;
    $45 = (9 - ($44))|0;
    $46 = ($45|0)>(0);
    if ($46) {
     $$011$i38 = 0;
     while(1) {
      $47 = (($$011$i38) + ($44))|0;
      $48 = (42898 + ($47)|0);
      $49 = HEAP8[$48>>0]|0;
      $50 = (42898 + ($$011$i38)|0);
      HEAP8[$50>>0] = $49;
      $51 = (($$011$i38) + 1)|0;
      $exitcond$i39 = ($51|0)==($45|0);
      if ($exitcond$i39) {
       break;
      } else {
       $$011$i38 = $51;
      }
     }
    }
    $52 = HEAP32[9769]|0;
    $53 = (($52) - ($44))|0;
    HEAP32[9769] = $53;
    $54 = (42898 + ($53)|0);
    HEAP8[$54>>0] = 0;
    $55 = ($44|0)==(0);
    if (!($55)) {
     $$0910$i42 = $44;
     while(1) {
      $56 = (($$0910$i42) + -1)|0;
      __Z12GetCharacterv();
      $57 = ($56|0)==(0);
      if ($57) {
       break;
      } else {
       $$0910$i42 = $56;
      }
     }
    }
   }
  } while(0);
  $122 = HEAP32[9768]|0;
  $123 = ($122|0)==(0);
  $124 = HEAP8[42909]|0;
  $125 = ($124<<24>>24)==(0);
  $or$cond = $123 & $125;
  if (!($or$cond)) {
   $$0 = 1;
   label = 32;
   break;
  }
 }
 if ((label|0) == 32) {
  return ($$0|0);
 }
 return (0)|0;
}
function __Z10EncodeLinev() {
 var $$$029$off0 = 0, $$011$i134 = 0, $$029$off0$ = 0, $$029$off0$not = 0, $$029$off0$ph$ph$be = 0, $$029$off0$ph$ph199 = 0, $$0910$i138 = 0, $$2 = 0, $$3$off0 = 0, $$lcssa = 0, $$off145 = 0, $$off150 = 0, $$off150196 = 0, $$off153 = 0, $$old = 0, $$old15 = 0, $$old17 = 0, $$old18 = 0, $$old57 = 0, $$old58 = 0;
 var $$old68 = 0, $$old68$pre = 0, $$old68217 = 0, $$old69 = 0, $$pr$pre = 0, $$pr192 = 0, $$pr192198 = 0, $$pre = 0, $$pre214 = 0, $$pre215 = 0, $$pre222 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $exitcond$i135 = 0, $not$ = 0, $notlhs = 0, $notlhs142 = 0, $notrhs = 0, $notrhs143 = 0, $or$cond = 0, $or$cond159 = 0, $or$cond16$not = 0, $or$cond168 = 0;
 var $or$cond168197 = 0, $or$cond174 = 0, $or$cond19$not = 0, $or$cond190 = 0, $or$cond40 = 0, $or$cond59 = 0, $or$cond61 = 0, $or$cond70 = 0, $or$cond72 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$pr192198 = HEAP8[42909]|0;
 $0 = ($$pr192198<<24>>24)==(0);
 L1: do {
  if ($0) {
   $$029$off0$ph$ph199 = 1;
   L2: while(1) {
    L4: while(1) {
     $$pre = HEAP32[9768]|0;
     $5 = $$pre;
     L6: while(1) {
      $2 = HEAP8[42907]|0;
      $3 = $2&255;
      $4 = ($2<<24>>24)!=(10);
      $6 = ($5|0)==(0);
      $or$cond40 = $4 & $6;
      if (!($or$cond40)) {
       break L1;
      }
      $7 = ($2<<24>>24)<(0);
      if ($7) {
       $8 = (($3) + -128)|0;
       $9 = (((9532 + ($8<<4)|0)) + 4|0);
       $10 = HEAP8[$9>>0]|0;
       $11 = $10 & 1;
       $12 = ($11<<24>>24)==(0);
       if ($12) {
        $129 = $2;
        label = 35;
        break L4;
       }
       $13 = HEAP8[42908]|0;
       $14 = $13 & -33;
       $15 = (($14) + -65)<<24>>24;
       $16 = ($15&255)<(26);
       $$off153 = (($13) + -48)<<24>>24;
       $17 = ($$off153&255)<(10);
       $or$cond159 = $17 | $16;
       if (!($or$cond159)) {
        $129 = $2;
        label = 35;
        break L4;
       }
       $18 = HEAP8[42898]|0;
       HEAP8[42907] = $18;
       $19 = ($18<<24>>24)>(-1);
       if ($19) {
        $20 = $18;
       } else {
        $129 = $18;
        label = 35;
        break L4;
       }
      } else {
       $20 = $2;
      }
      switch ($20<<24>>24) {
      case 34:  {
       break L6;
       break;
      }
      case 42:  {
       break;
      }
      default: {
       label = 11;
       break L4;
      }
      }
      $82 = HEAP16[21320]|0;
      $83 = ($82<<16>>16)==(-32768);
      if ($83) {
       HEAP32[9768] = 3;
      } else {
       $84 = $82&65535;
       $85 = (($82) + 1)<<16>>16;
       HEAP16[21320] = $85;
       $86 = HEAP32[9774]|0;
       $87 = (($86) + ($84)|0);
       HEAP8[$87>>0] = 42;
      }
      $88 = HEAP8[(42899)>>0]|0;
      HEAP8[42898] = $88;
      $89 = HEAP8[(42900)>>0]|0;
      HEAP8[(42899)>>0] = $89;
      $90 = HEAP8[(42901)>>0]|0;
      HEAP8[(42900)>>0] = $90;
      $91 = HEAP8[(42902)>>0]|0;
      HEAP8[(42901)>>0] = $91;
      $92 = HEAP8[(42903)>>0]|0;
      HEAP8[(42902)>>0] = $92;
      $93 = HEAP8[(42904)>>0]|0;
      HEAP8[(42903)>>0] = $93;
      $94 = HEAP8[(42905)>>0]|0;
      HEAP8[(42904)>>0] = $94;
      $95 = HEAP8[(42906)>>0]|0;
      HEAP8[(42905)>>0] = $95;
      $96 = HEAP32[9769]|0;
      $97 = (($96) + -1)|0;
      HEAP32[9769] = $97;
      $98 = (42898 + ($97)|0);
      HEAP8[$98>>0] = 0;
      __Z12GetCharacterv();
      if (!($$029$off0$ph$ph199)) {
       $$029$off0$ph$ph$be = 0;
       break L4;
      }
      $99 = HEAP8[42909]|0;
      $100 = ($99<<24>>24)!=(0);
      $101 = HEAP32[9768]|0;
      $102 = ($101|0)!=(0);
      $or$cond190 = $100 | $102;
      L20: do {
       if ($or$cond190) {
        $$lcssa = $99;$236 = $101;
       } else {
        while(1) {
         $103 = HEAP8[42898]|0;
         switch ($103<<24>>24) {
         case 10:  {
          continue L4;
          break;
         }
         case 34:  {
          $121 = (__Z17CopyStringLiteralv()|0);
          if (!($121)) {
           $$2 = 0;
           label = 62;
           break L2;
          }
          break;
         }
         default: {
          $104 = HEAP16[21320]|0;
          $105 = ($104<<16>>16)==(-32768);
          if ($105) {
           HEAP32[9768] = 3;
          } else {
           $106 = $104&65535;
           $107 = (($104) + 1)<<16>>16;
           HEAP16[21320] = $107;
           $108 = HEAP32[9774]|0;
           $109 = (($108) + ($106)|0);
           HEAP8[$109>>0] = $103;
          }
          $110 = HEAP8[(42899)>>0]|0;
          HEAP8[42898] = $110;
          $111 = HEAP8[(42900)>>0]|0;
          HEAP8[(42899)>>0] = $111;
          $112 = HEAP8[(42901)>>0]|0;
          HEAP8[(42900)>>0] = $112;
          $113 = HEAP8[(42902)>>0]|0;
          HEAP8[(42901)>>0] = $113;
          $114 = HEAP8[(42903)>>0]|0;
          HEAP8[(42902)>>0] = $114;
          $115 = HEAP8[(42904)>>0]|0;
          HEAP8[(42903)>>0] = $115;
          $116 = HEAP8[(42905)>>0]|0;
          HEAP8[(42904)>>0] = $116;
          $117 = HEAP8[(42906)>>0]|0;
          HEAP8[(42905)>>0] = $117;
          $118 = HEAP32[9769]|0;
          $119 = (($118) + -1)|0;
          HEAP32[9769] = $119;
          $120 = (42898 + ($119)|0);
          HEAP8[$120>>0] = 0;
          __Z12GetCharacterv();
         }
         }
         $122 = HEAP8[42909]|0;
         $123 = ($122<<24>>24)!=(0);
         $124 = HEAP32[9768]|0;
         $125 = ($124|0)!=(0);
         $or$cond = $123 | $125;
         if ($or$cond) {
          $$lcssa = $122;$236 = $124;
          break L20;
         }
        }
       }
      } while(0);
      $1 = ($$lcssa<<24>>24)==(0);
      if ($1) {
       $5 = $236;
      } else {
       break L1;
      }
     }
     $126 = (__Z17CopyStringLiteralv()|0);
     if (!($126)) {
      $$2 = 0;
      label = 62;
      break L2;
     }
     $$pr$pre = HEAP8[42909]|0;
     $127 = ($$pr$pre<<24>>24)==(0);
     if (!($127)) {
      break L1;
     }
    }
    do {
     if ((label|0) == 11) {
      label = 0;
      $21 = HEAP16[21320]|0;
      $22 = ($21<<16>>16)==(-32768);
      if ($22) {
       HEAP32[9768] = 3;
       $28 = $20;
      } else {
       $23 = $21&65535;
       $24 = (($21) + 1)<<16>>16;
       HEAP16[21320] = $24;
       $25 = HEAP32[9774]|0;
       $26 = (($25) + ($23)|0);
       HEAP8[$26>>0] = $20;
       $$pre222 = HEAP8[42907]|0;
       $28 = $$pre222;
      }
      $27 = $28 & -33;
      $29 = (($27) + -65)<<24>>24;
      $30 = ($29&255)<(26);
      if (!($30)) {
       $31 = ($28<<24>>24)==(58);
       $$$029$off0 = $$029$off0$ph$ph199 | $31;
       $32 = HEAP8[(42899)>>0]|0;
       HEAP8[42898] = $32;
       $33 = HEAP8[(42900)>>0]|0;
       HEAP8[(42899)>>0] = $33;
       $34 = HEAP8[(42901)>>0]|0;
       HEAP8[(42900)>>0] = $34;
       $35 = HEAP8[(42902)>>0]|0;
       HEAP8[(42901)>>0] = $35;
       $36 = HEAP8[(42903)>>0]|0;
       HEAP8[(42902)>>0] = $36;
       $37 = HEAP8[(42904)>>0]|0;
       HEAP8[(42903)>>0] = $37;
       $38 = HEAP8[(42905)>>0]|0;
       HEAP8[(42904)>>0] = $38;
       $39 = HEAP8[(42906)>>0]|0;
       HEAP8[(42905)>>0] = $39;
       $40 = HEAP32[9769]|0;
       $41 = (($40) + -1)|0;
       HEAP32[9769] = $41;
       $42 = (42898 + ($41)|0);
       HEAP8[$42>>0] = 0;
       __Z12GetCharacterv();
       $$029$off0$ph$ph$be = $$$029$off0;
       break;
      }
      $43 = HEAP8[(42899)>>0]|0;
      HEAP8[42898] = $43;
      $44 = HEAP8[(42900)>>0]|0;
      HEAP8[(42899)>>0] = $44;
      $45 = HEAP8[(42901)>>0]|0;
      HEAP8[(42900)>>0] = $45;
      $46 = HEAP8[(42902)>>0]|0;
      HEAP8[(42901)>>0] = $46;
      $47 = HEAP8[(42903)>>0]|0;
      HEAP8[(42902)>>0] = $47;
      $48 = HEAP8[(42904)>>0]|0;
      HEAP8[(42903)>>0] = $48;
      $49 = HEAP8[(42905)>>0]|0;
      HEAP8[(42904)>>0] = $49;
      $50 = HEAP8[(42906)>>0]|0;
      HEAP8[(42905)>>0] = $50;
      $51 = HEAP32[9769]|0;
      $52 = (($51) + -1)|0;
      HEAP32[9769] = $52;
      $53 = (42898 + ($52)|0);
      HEAP8[$53>>0] = 0;
      __Z12GetCharacterv();
      $54 = HEAP8[42898]|0;
      $55 = $54 & -33;
      $56 = (($55) + -65)<<24>>24;
      $57 = ($56&255)<(26);
      $$off150196 = (($54) + -48)<<24>>24;
      $58 = ($$off150196&255)<(10);
      $or$cond168197 = $58 | $57;
      if ($or$cond168197) {
       $65 = $54;
       while(1) {
        $59 = HEAP16[21320]|0;
        $60 = ($59<<16>>16)==(-32768);
        if ($60) {
         HEAP32[9768] = 3;
        } else {
         $61 = $59&65535;
         $62 = (($59) + 1)<<16>>16;
         HEAP16[21320] = $62;
         $63 = HEAP32[9774]|0;
         $64 = (($63) + ($61)|0);
         HEAP8[$64>>0] = $65;
        }
        $66 = HEAP8[(42899)>>0]|0;
        HEAP8[42898] = $66;
        $67 = HEAP8[(42900)>>0]|0;
        HEAP8[(42899)>>0] = $67;
        $68 = HEAP8[(42901)>>0]|0;
        HEAP8[(42900)>>0] = $68;
        $69 = HEAP8[(42902)>>0]|0;
        HEAP8[(42901)>>0] = $69;
        $70 = HEAP8[(42903)>>0]|0;
        HEAP8[(42902)>>0] = $70;
        $71 = HEAP8[(42904)>>0]|0;
        HEAP8[(42903)>>0] = $71;
        $72 = HEAP8[(42905)>>0]|0;
        HEAP8[(42904)>>0] = $72;
        $73 = HEAP8[(42906)>>0]|0;
        HEAP8[(42905)>>0] = $73;
        $74 = HEAP32[9769]|0;
        $75 = (($74) + -1)|0;
        HEAP32[9769] = $75;
        $76 = (42898 + ($75)|0);
        HEAP8[$76>>0] = 0;
        __Z12GetCharacterv();
        $77 = HEAP8[42898]|0;
        $78 = $77 & -33;
        $79 = (($78) + -65)<<24>>24;
        $80 = ($79&255)<(26);
        $$off150 = (($77) + -48)<<24>>24;
        $81 = ($$off150&255)<(10);
        $or$cond168 = $81 | $80;
        if ($or$cond168) {
         $65 = $77;
        } else {
         $$029$off0$ph$ph$be = 0;
         break;
        }
       }
      } else {
       $$029$off0$ph$ph$be = 0;
      }
     }
     else if ((label|0) == 35) {
      label = 0;
      $128 = $129&255;
      $130 = (($128) + -128)|0;
      $131 = (((9532 + ($130<<4)|0)) + 4|0);
      $132 = HEAP8[$131>>0]|0;
      $133 = HEAP16[21320]|0;
      $134 = ($133<<16>>16)==(-32768);
      if ($134) {
       HEAP32[9768] = 3;
       $140 = $129;
      } else {
       $135 = $133&65535;
       $136 = (($133) + 1)<<16>>16;
       HEAP16[21320] = $136;
       $137 = HEAP32[9774]|0;
       $138 = (($137) + ($135)|0);
       HEAP8[$138>>0] = $129;
       $$pre214 = HEAP8[42907]|0;
       $140 = $$pre214;
      }
      $139 = $140&255;
      $141 = (($139) + -128)|0;
      $142 = (((9532 + ($141<<4)|0)) + 8|0);
      $143 = HEAP32[$142>>2]|0;
      $144 = (9 - ($143))|0;
      $145 = ($144|0)>(0);
      if ($145) {
       $$011$i134 = 0;
       while(1) {
        $146 = (($$011$i134) + ($143))|0;
        $147 = (42898 + ($146)|0);
        $148 = HEAP8[$147>>0]|0;
        $149 = (42898 + ($$011$i134)|0);
        HEAP8[$149>>0] = $148;
        $150 = (($$011$i134) + 1)|0;
        $exitcond$i135 = ($150|0)==($144|0);
        if ($exitcond$i135) {
         break;
        } else {
         $$011$i134 = $150;
        }
       }
      }
      $151 = HEAP32[9769]|0;
      $152 = (($151) - ($143))|0;
      HEAP32[9769] = $152;
      $153 = (42898 + ($152)|0);
      HEAP8[$153>>0] = 0;
      $154 = ($143|0)==(0);
      if (!($154)) {
       $$0910$i138 = $143;
       while(1) {
        $155 = (($$0910$i138) + -1)|0;
        __Z12GetCharacterv();
        $156 = ($155|0)==(0);
        if ($156) {
         break;
        } else {
         $$0910$i138 = $155;
        }
       }
      }
      $157 = $132&255;
      $158 = $157 & 8;
      $159 = HEAP32[9768]|0;
      $notlhs = ($158|0)!=(0);
      $notrhs = ($159|0)==(0);
      $or$cond16$not = $notlhs & $notrhs;
      $$old57 = HEAP8[42909]|0;
      $$old58 = ($$old57<<24>>24)==(0);
      $or$cond61 = $or$cond16$not & $$old58;
      L62: do {
       if ($or$cond61) {
        while(1) {
         $160 = HEAP8[42898]|0;
         $161 = $160 & -33;
         $162 = (($161) + -65)<<24>>24;
         $163 = ($162&255)<(26);
         $$off145 = (($160) + -48)<<24>>24;
         $164 = ($$off145&255)<(10);
         $or$cond174 = $164 | $163;
         if (!($or$cond174)) {
          $$old68217 = 0;$237 = 0;
          break L62;
         }
         $165 = HEAP16[21320]|0;
         $166 = ($165<<16>>16)==(-32768);
         if ($166) {
          HEAP32[9768] = 3;
         } else {
          $167 = $165&65535;
          $168 = (($165) + 1)<<16>>16;
          HEAP16[21320] = $168;
          $169 = HEAP32[9774]|0;
          $170 = (($169) + ($167)|0);
          HEAP8[$170>>0] = $160;
         }
         $171 = HEAP8[(42899)>>0]|0;
         HEAP8[42898] = $171;
         $172 = HEAP8[(42900)>>0]|0;
         HEAP8[(42899)>>0] = $172;
         $173 = HEAP8[(42901)>>0]|0;
         HEAP8[(42900)>>0] = $173;
         $174 = HEAP8[(42902)>>0]|0;
         HEAP8[(42901)>>0] = $174;
         $175 = HEAP8[(42903)>>0]|0;
         HEAP8[(42902)>>0] = $175;
         $176 = HEAP8[(42904)>>0]|0;
         HEAP8[(42903)>>0] = $176;
         $177 = HEAP8[(42905)>>0]|0;
         HEAP8[(42904)>>0] = $177;
         $178 = HEAP8[(42906)>>0]|0;
         HEAP8[(42905)>>0] = $178;
         $179 = HEAP32[9769]|0;
         $180 = (($179) + -1)|0;
         HEAP32[9769] = $180;
         $181 = (42898 + ($180)|0);
         HEAP8[$181>>0] = 0;
         __Z12GetCharacterv();
         $$old = HEAP32[9768]|0;
         $$old15 = ($$old|0)==(0);
         $182 = HEAP8[42909]|0;
         $183 = ($182<<24>>24)==(0);
         $or$cond59 = $$old15 & $183;
         if (!($or$cond59)) {
          $$old68217 = $182;$237 = $$old;
          break;
         }
        }
       } else {
        $$old68217 = $$old57;$237 = $159;
       }
      } while(0);
      $184 = $157 & 16;
      $185 = ($184|0)==(0);
      if ($185) {
       $$old68 = $$old68217;$188 = $237;
      } else {
       $186 = (__Z21DoLineNumberTokeniserv()|0);
       if (!($186)) {
        $$2 = 0;
        label = 62;
        break L2;
       }
       $$pre215 = HEAP32[9768]|0;
       $$old68$pre = HEAP8[42909]|0;
       $$old68 = $$old68$pre;$188 = $$pre215;
      }
      $187 = $157 & 32;
      $notlhs142 = ($187|0)!=(0);
      $notrhs143 = ($188|0)==(0);
      $or$cond19$not = $notlhs142 & $notrhs143;
      $$old69 = ($$old68<<24>>24)==(0);
      $or$cond72 = $or$cond19$not & $$old69;
      L75: do {
       if ($or$cond72) {
        while(1) {
         $189 = HEAP8[42898]|0;
         $190 = ($189<<24>>24)==(10);
         if ($190) {
          break L75;
         }
         $191 = HEAP16[21320]|0;
         $192 = ($191<<16>>16)==(-32768);
         if ($192) {
          HEAP32[9768] = 3;
         } else {
          $193 = $191&65535;
          $194 = (($191) + 1)<<16>>16;
          HEAP16[21320] = $194;
          $195 = HEAP32[9774]|0;
          $196 = (($195) + ($193)|0);
          HEAP8[$196>>0] = $189;
         }
         $197 = HEAP8[(42899)>>0]|0;
         HEAP8[42898] = $197;
         $198 = HEAP8[(42900)>>0]|0;
         HEAP8[(42899)>>0] = $198;
         $199 = HEAP8[(42901)>>0]|0;
         HEAP8[(42900)>>0] = $199;
         $200 = HEAP8[(42902)>>0]|0;
         HEAP8[(42901)>>0] = $200;
         $201 = HEAP8[(42903)>>0]|0;
         HEAP8[(42902)>>0] = $201;
         $202 = HEAP8[(42904)>>0]|0;
         HEAP8[(42903)>>0] = $202;
         $203 = HEAP8[(42905)>>0]|0;
         HEAP8[(42904)>>0] = $203;
         $204 = HEAP8[(42906)>>0]|0;
         HEAP8[(42905)>>0] = $204;
         $205 = HEAP32[9769]|0;
         $206 = (($205) + -1)|0;
         HEAP32[9769] = $206;
         $207 = (42898 + ($206)|0);
         HEAP8[$207>>0] = 0;
         __Z12GetCharacterv();
         $$old17 = HEAP32[9768]|0;
         $$old18 = ($$old17|0)==(0);
         $208 = HEAP8[42909]|0;
         $209 = ($208<<24>>24)==(0);
         $or$cond70 = $$old18 & $209;
         if (!($or$cond70)) {
          break;
         }
        }
       }
      } while(0);
      $210 = $157 & 64;
      $211 = ($210|0)==(0);
      $$029$off0$not = $$029$off0$ph$ph199 ^ 1;
      $brmerge = $211 | $$029$off0$not;
      if (!($brmerge)) {
       $212 = HEAP16[21320]|0;
       $213 = $212&65535;
       $214 = (($213) + -1)|0;
       $215 = HEAP32[9774]|0;
       $216 = (($215) + ($214)|0);
       $217 = HEAP8[$216>>0]|0;
       $218 = $217&255;
       $219 = (($218) + 64)|0;
       $220 = $219&255;
       HEAP8[$216>>0] = $220;
      }
      $221 = $157 & 2;
      $222 = ($221|0)==(0);
      $$029$off0$ = $$029$off0$ph$ph199 & $222;
      $223 = $157 & 4;
      $not$ = ($223|0)!=(0);
      $$3$off0 = $not$ | $$029$off0$;
      $$029$off0$ph$ph$be = $$3$off0;
     }
    } while(0);
    $$pr192 = HEAP8[42909]|0;
    $224 = ($$pr192<<24>>24)==(0);
    if ($224) {
     $$029$off0$ph$ph199 = $$029$off0$ph$ph$be;
    } else {
     break L1;
    }
   }
   if ((label|0) == 62) {
    return ($$2|0);
   }
  }
 } while(0);
 $225 = HEAP8[(42899)>>0]|0;
 HEAP8[42898] = $225;
 $226 = HEAP8[(42900)>>0]|0;
 HEAP8[(42899)>>0] = $226;
 $227 = HEAP8[(42901)>>0]|0;
 HEAP8[(42900)>>0] = $227;
 $228 = HEAP8[(42902)>>0]|0;
 HEAP8[(42901)>>0] = $228;
 $229 = HEAP8[(42903)>>0]|0;
 HEAP8[(42902)>>0] = $229;
 $230 = HEAP8[(42904)>>0]|0;
 HEAP8[(42903)>>0] = $230;
 $231 = HEAP8[(42905)>>0]|0;
 HEAP8[(42904)>>0] = $231;
 $232 = HEAP8[(42906)>>0]|0;
 HEAP8[(42905)>>0] = $232;
 $233 = HEAP32[9769]|0;
 $234 = (($233) + -1)|0;
 HEAP32[9769] = $234;
 $235 = (42898 + ($234)|0);
 HEAP8[$235>>0] = 0;
 __Z12GetCharacterv();
 $$2 = 1;
 return ($$2|0);
}
function __Z11ImportBASICPKcPhPi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$011$i32 = 0, $$015 = 0, $$0910$i36 = 0, $$not = 0, $$old = 0, $$old17 = 0, $$old19 = 0, $$old20 = 0, $$pre = 0, $$pre44 = 0, $$pre45 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $exitcond$i33 = 0, $not$ = 0, $or$cond = 0, $or$cond21 = 0, $or$cond23 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[9774] = $1;
 HEAP32[9768] = 0;
 HEAP16[21320] = 0;
 $3 = (_fopen($0,29176)|0);
 HEAP32[9770] = $3;
 HEAP32[9769] = 0;
 HEAP32[9773] = 1;
 HEAP8[42909] = 0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  HEAP32[9768] = 2;
  $$015 = 0;
  STACKTOP = sp;return ($$015|0);
 }
 __Z12GetCharacterv();
 __Z12GetCharacterv();
 __Z12GetCharacterv();
 __Z12GetCharacterv();
 __Z12GetCharacterv();
 __Z12GetCharacterv();
 __Z12GetCharacterv();
 __Z12GetCharacterv();
 $$old = HEAP8[42909]|0;
 $$old17 = ($$old<<24>>24)==(0);
 $$old19 = HEAP32[9768]|0;
 $$old20 = ($$old19|0)==(0);
 $or$cond23 = $$old17 & $$old20;
 L5: do {
  if ($or$cond23) {
   L6: while(1) {
    $5 = HEAP8[42907]|0;
    switch ($5<<24>>24) {
    case 10: case 13: case 9: case 32:  {
     $6 = HEAP8[(42899)>>0]|0;
     HEAP8[42898] = $6;
     $7 = HEAP8[(42900)>>0]|0;
     HEAP8[(42899)>>0] = $7;
     $8 = HEAP8[(42901)>>0]|0;
     HEAP8[(42900)>>0] = $8;
     $9 = HEAP8[(42902)>>0]|0;
     HEAP8[(42901)>>0] = $9;
     $10 = HEAP8[(42903)>>0]|0;
     HEAP8[(42902)>>0] = $10;
     $11 = HEAP8[(42904)>>0]|0;
     HEAP8[(42903)>>0] = $11;
     $12 = HEAP8[(42905)>>0]|0;
     HEAP8[(42904)>>0] = $12;
     $13 = HEAP8[(42906)>>0]|0;
     HEAP8[(42905)>>0] = $13;
     $14 = HEAP32[9769]|0;
     $15 = (($14) + -1)|0;
     HEAP32[9769] = $15;
     $16 = (42898 + ($15)|0);
     HEAP8[$16>>0] = 0;
     __Z12GetCharacterv();
     continue L6;
     break;
    }
    default: {
    }
    }
    $17 = HEAP8[42909]|0;
    $18 = ($17<<24>>24)==(0);
    if (!($18)) {
     break L5;
    }
    $19 = HEAP8[42910]|0;
    $$not = ($19<<24>>24)==(0);
    $20 = HEAP32[9771]|0;
    $21 = ($20>>>0)>(32767);
    $or$cond = $$not | $21;
    if ($or$cond) {
     break;
    }
    $23 = HEAP16[21320]|0;
    $24 = ($23<<16>>16)==(-32768);
    if ($24) {
     HEAP32[9768] = 3;
     label = 12;
    } else {
     $25 = $23&65535;
     $26 = (($23) + 1)<<16>>16;
     HEAP16[21320] = $26;
     $27 = HEAP32[9774]|0;
     $28 = (($27) + ($25)|0);
     HEAP8[$28>>0] = 13;
     $$pre = HEAP16[21320]|0;
     $29 = ($$pre<<16>>16)==(-32768);
     if ($29) {
      label = 12;
     } else {
      $30 = HEAP32[9771]|0;
      $31 = $30 >>> 8;
      $32 = $31&255;
      $33 = $$pre&65535;
      $34 = (($$pre) + 1)<<16>>16;
      HEAP16[21320] = $34;
      $35 = HEAP32[9774]|0;
      $36 = (($35) + ($33)|0);
      HEAP8[$36>>0] = $32;
      $$pre44 = HEAP16[21320]|0;
      $37 = ($$pre44<<16>>16)==(-32768);
      if ($37) {
       label = 14;
      } else {
       $38 = HEAP32[9771]|0;
       $39 = $38&255;
       $40 = $$pre44&65535;
       $41 = (($$pre44) + 1)<<16>>16;
       HEAP16[21320] = $41;
       $42 = HEAP32[9774]|0;
       $43 = (($42) + ($40)|0);
       HEAP8[$43>>0] = $39;
      }
     }
    }
    if ((label|0) == 12) {
     label = 0;
     HEAP32[9768] = 3;
     label = 14;
    }
    if ((label|0) == 14) {
     label = 0;
     HEAP32[9768] = 3;
    }
    $44 = HEAP32[9772]|0;
    $45 = (9 - ($44))|0;
    $46 = ($45|0)>(0);
    if ($46) {
     $$011$i32 = 0;
     while(1) {
      $47 = (($$011$i32) + ($44))|0;
      $48 = (42898 + ($47)|0);
      $49 = HEAP8[$48>>0]|0;
      $50 = (42898 + ($$011$i32)|0);
      HEAP8[$50>>0] = $49;
      $51 = (($$011$i32) + 1)|0;
      $exitcond$i33 = ($51|0)==($45|0);
      if ($exitcond$i33) {
       break;
      } else {
       $$011$i32 = $51;
      }
     }
    }
    $52 = HEAP32[9769]|0;
    $53 = (($52) - ($44))|0;
    HEAP32[9769] = $53;
    $54 = (42898 + ($53)|0);
    HEAP8[$54>>0] = 0;
    $55 = ($44|0)==(0);
    if (!($55)) {
     $$0910$i36 = $44;
     while(1) {
      $56 = (($$0910$i36) + -1)|0;
      __Z12GetCharacterv();
      $57 = ($56|0)==(0);
      if ($57) {
       break;
      } else {
       $$0910$i36 = $56;
      }
     }
    }
    $58 = HEAP16[21320]|0;
    $59 = ($58<<16>>16)==(-32768);
    if ($59) {
     HEAP32[9768] = 3;
    } else {
     $60 = $58&65535;
     $61 = (($58) + 1)<<16>>16;
     HEAP16[21320] = $61;
     $62 = HEAP32[9774]|0;
     $63 = (($62) + ($60)|0);
     HEAP8[$63>>0] = 0;
    }
    $64 = (__Z10EncodeLinev()|0);
    if (!($64)) {
     break L5;
    }
    $65 = HEAP16[21320]|0;
    $66 = $65&65535;
    $67 = $58&65535;
    $68 = (3 - ($67))|0;
    $69 = (($68) + ($66))|0;
    $70 = $69&255;
    $71 = HEAP32[9774]|0;
    $72 = (($71) + ($67)|0);
    HEAP8[$72>>0] = $70;
    $73 = HEAP8[42909]|0;
    $74 = ($73<<24>>24)==(0);
    $75 = HEAP32[9768]|0;
    $76 = ($75|0)==(0);
    $or$cond21 = $74 & $76;
    if (!($or$cond21)) {
     break L5;
    }
   }
   HEAP32[9768] = -1;
   $22 = HEAP32[9773]|0;
   HEAP32[$vararg_buffer>>2] = $22;
   (_sprintf(42642,29179,$vararg_buffer)|0);
  }
 } while(0);
 $77 = HEAP16[21320]|0;
 $78 = ($77<<16>>16)==(-32768);
 if ($78) {
  HEAP32[9768] = 3;
  label = 28;
 } else {
  $79 = $77&65535;
  $80 = (($77) + 1)<<16>>16;
  HEAP16[21320] = $80;
  $81 = HEAP32[9774]|0;
  $82 = (($81) + ($79)|0);
  HEAP8[$82>>0] = 13;
  $$pre45 = HEAP16[21320]|0;
  $83 = ($$pre45<<16>>16)==(-32768);
  if ($83) {
   label = 28;
  } else {
   $84 = $$pre45&65535;
   $85 = (($$pre45) + 1)<<16>>16;
   HEAP16[21320] = $85;
   $86 = HEAP32[9774]|0;
   $87 = (($86) + ($84)|0);
   HEAP8[$87>>0] = -1;
  }
 }
 if ((label|0) == 28) {
  HEAP32[9768] = 3;
 }
 $88 = ($2|0)==(0|0);
 if (!($88)) {
  $89 = HEAP16[21320]|0;
  $90 = $89&65535;
  HEAP32[$2>>2] = $90;
 }
 $91 = HEAP32[9770]|0;
 (_fclose($91)|0);
 $92 = HEAP32[9768]|0;
 $not$ = ($92|0)==(0);
 $$015 = $not$;
 STACKTOP = sp;return ($$015|0);
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$vararg_buffer>>2] = $2;
 $3 = (___syscall6(6,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer = sp;
 $3 = sp + 12|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 297;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $3;
  $10 = (___syscall54(54,($vararg_buffer|0))|0);
  $11 = ($10|0)==(0);
  if (!($11)) {
   $12 = ((($0)) + 75|0);
   HEAP8[$12>>0] = -1;
  }
 }
 $13 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($13|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $3;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $6 = (___syscall140(140,($vararg_buffer|0))|0);
 $7 = (___syscall_ret($6)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  HEAP32[$3>>2] = -1;
  $9 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $9 = $$pre;
 }
 STACKTOP = sp;return ($9|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[9775]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 39144;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 64|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$056 = 0, $$058 = 0, $$059 = 0, $$061 = 0, $$1 = 0, $$157 = 0, $$160 = 0, $$phi$trans$insert = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = ((($0)) + 44|0);
 $$056 = 2;$$058 = $12;$$059 = $3;
 while(1) {
  $15 = HEAP32[9775]|0;
  $16 = ($15|0)==(0|0);
  if ($16) {
   $20 = HEAP32[$13>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $20;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $$059;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $$056;
   $21 = (___syscall146(146,($vararg_buffer3|0))|0);
   $22 = (___syscall_ret($21)|0);
   $$0 = $22;
  } else {
   _pthread_cleanup_push((753|0),($0|0));
   $17 = HEAP32[$13>>2]|0;
   HEAP32[$vararg_buffer>>2] = $17;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $$059;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $$056;
   $18 = (___syscall146(146,($vararg_buffer|0))|0);
   $19 = (___syscall_ret($18)|0);
   _pthread_cleanup_pop(0);
   $$0 = $19;
  }
  $23 = ($$058|0)==($$0|0);
  if ($23) {
   label = 6;
   break;
  }
  $30 = ($$0|0)<(0);
  if ($30) {
   label = 8;
   break;
  }
  $38 = (($$058) - ($$0))|0;
  $39 = ((($$059)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($$0>>>0)>($40>>>0);
  if ($41) {
   $42 = HEAP32[$14>>2]|0;
   HEAP32[$4>>2] = $42;
   HEAP32[$7>>2] = $42;
   $43 = (($$0) - ($40))|0;
   $44 = ((($$059)) + 8|0);
   $45 = (($$056) + -1)|0;
   $$phi$trans$insert = ((($$059)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $$1 = $43;$$157 = $45;$$160 = $44;$53 = $$pre;
  } else {
   $46 = ($$056|0)==(2);
   if ($46) {
    $47 = HEAP32[$4>>2]|0;
    $48 = (($47) + ($$0)|0);
    HEAP32[$4>>2] = $48;
    $$1 = $$0;$$157 = 2;$$160 = $$059;$53 = $40;
   } else {
    $$1 = $$0;$$157 = $$056;$$160 = $$059;$53 = $40;
   }
  }
  $49 = HEAP32[$$160>>2]|0;
  $50 = (($49) + ($$1)|0);
  HEAP32[$$160>>2] = $50;
  $51 = ((($$160)) + 4|0);
  $52 = (($53) - ($$1))|0;
  HEAP32[$51>>2] = $52;
  $$056 = $$157;$$058 = $38;$$059 = $$160;
 }
 if ((label|0) == 6) {
  $24 = HEAP32[$14>>2]|0;
  $25 = ((($0)) + 48|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($24) + ($26)|0);
  $28 = ((($0)) + 16|0);
  HEAP32[$28>>2] = $27;
  $29 = $24;
  HEAP32[$4>>2] = $29;
  HEAP32[$7>>2] = $29;
  $$061 = $2;
 }
 else if ((label|0) == 8) {
  $31 = ((($0)) + 16|0);
  HEAP32[$31>>2] = 0;
  HEAP32[$4>>2] = 0;
  HEAP32[$7>>2] = 0;
  $32 = HEAP32[$0>>2]|0;
  $33 = $32 | 32;
  HEAP32[$0>>2] = $33;
  $34 = ($$056|0)==(2);
  if ($34) {
   $$061 = 0;
  } else {
   $35 = ((($$059)) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (($2) - ($36))|0;
   $$061 = $37;
  }
 }
 STACKTOP = sp;return ($$061|0);
}
function _cleanup($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  ___unlockfile($0);
 }
 return;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$026 = 0, $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 HEAP32[$3>>2] = $1;
 $4 = ((($3)) + 4|0);
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7&1;
 $9 = (($2) - ($8))|0;
 HEAP32[$4>>2] = $9;
 $10 = ((($3)) + 8|0);
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($3)) + 12|0);
 HEAP32[$13>>2] = $6;
 $14 = HEAP32[9775]|0;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $20 = ((($0)) + 60|0);
  $21 = HEAP32[$20>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $21;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $3;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 2;
  $22 = (___syscall145(145,($vararg_buffer3|0))|0);
  $23 = (___syscall_ret($22)|0);
  $$0 = $23;
 } else {
  _pthread_cleanup_push((754|0),($0|0));
  $16 = ((($0)) + 60|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer>>2] = $17;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $3;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 2;
  $18 = (___syscall145(145,($vararg_buffer|0))|0);
  $19 = (___syscall_ret($18)|0);
  _pthread_cleanup_pop(0);
  $$0 = $19;
 }
 $24 = ($$0|0)<(1);
 if ($24) {
  $25 = $$0 & 48;
  $26 = $25 ^ 16;
  $27 = HEAP32[$0>>2]|0;
  $28 = $27 | $26;
  HEAP32[$0>>2] = $28;
  $29 = ((($0)) + 8|0);
  HEAP32[$29>>2] = 0;
  $30 = ((($0)) + 4|0);
  HEAP32[$30>>2] = 0;
  $$026 = $$0;
 } else {
  $31 = HEAP32[$4>>2]|0;
  $32 = ($$0>>>0)>($31>>>0);
  if ($32) {
   $33 = (($$0) - ($31))|0;
   $34 = HEAP32[$11>>2]|0;
   $35 = ((($0)) + 4|0);
   HEAP32[$35>>2] = $34;
   $$cast = $34;
   $36 = (($$cast) + ($33)|0);
   $37 = ((($0)) + 8|0);
   HEAP32[$37>>2] = $36;
   $38 = HEAP32[$5>>2]|0;
   $39 = ($38|0)==(0);
   if ($39) {
    $$026 = $2;
   } else {
    $40 = ((($$cast)) + 1|0);
    HEAP32[$35>>2] = $40;
    $41 = HEAP8[$$cast>>0]|0;
    $42 = (($2) + -1)|0;
    $43 = (($1) + ($42)|0);
    HEAP8[$43>>0] = $41;
    $$026 = $2;
   }
  } else {
   $$026 = $$0;
  }
 }
 STACKTOP = sp;return ($$026|0);
}
function _cleanup_396($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  ___unlockfile($0);
 }
 return;
}
function _log10($0) {
 $0 = +$0;
 var $$0 = 0, $$0100 = 0, $$0101 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0;
 var $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0;
 var $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $8 = 0, $9 = 0.0, $or$cond = 0, $or$cond105 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = ($2>>>0)<(1048576);
 $4 = ($2|0)<(0);
 $or$cond = $4 | $3;
 do {
  if ($or$cond) {
   $5 = $2 & 2147483647;
   $6 = ($1|0)==(0);
   $7 = ($5|0)==(0);
   $8 = $6 & $7;
   if ($8) {
    $9 = $0 * $0;
    $10 = -1.0 / $9;
    $$0101 = $10;
    break;
   }
   if ($4) {
    $11 = $0 - $0;
    $12 = $11 / 0.0;
    $$0101 = $12;
    break;
   } else {
    $13 = $0 * 18014398509481984.0;
    HEAPF64[tempDoublePtr>>3] = $13;$14 = HEAP32[tempDoublePtr>>2]|0;
    $15 = HEAP32[tempDoublePtr+4>>2]|0;
    $$0 = -1077;$$0100 = $15;$27 = $14;$71 = $15;
    label = 9;
    break;
   }
  } else {
   $16 = ($2>>>0)>(2146435071);
   if ($16) {
    $$0101 = $0;
   } else {
    $17 = ($2|0)==(1072693248);
    $18 = ($1|0)==(0);
    $19 = (0)==(0);
    $20 = $18 & $19;
    $or$cond105 = $20 & $17;
    if ($or$cond105) {
     $$0101 = 0.0;
    } else {
     $$0 = -1023;$$0100 = $2;$27 = $1;$71 = $2;
     label = 9;
    }
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $21 = (($$0100) + 614242)|0;
  $22 = $21 >>> 20;
  $23 = (($$0) + ($22))|0;
  $24 = $21 & 1048575;
  $25 = (($24) + 1072079006)|0;
  HEAP32[tempDoublePtr>>2] = $27;HEAP32[tempDoublePtr+4>>2] = $25;$26 = +HEAPF64[tempDoublePtr>>3];
  $28 = $26 + -1.0;
  $29 = $28 * 0.5;
  $30 = $28 * $29;
  $31 = $28 + 2.0;
  $32 = $28 / $31;
  $33 = $32 * $32;
  $34 = $33 * $33;
  $35 = $34 * 0.15313837699209373;
  $36 = $35 + 0.22222198432149784;
  $37 = $34 * $36;
  $38 = $37 + 0.39999999999409419;
  $39 = $34 * $38;
  $40 = $34 * 0.14798198605116586;
  $41 = $40 + 0.1818357216161805;
  $42 = $34 * $41;
  $43 = $42 + 0.28571428743662391;
  $44 = $34 * $43;
  $45 = $44 + 0.66666666666667351;
  $46 = $33 * $45;
  $47 = $39 + $46;
  $48 = $28 - $30;
  HEAPF64[tempDoublePtr>>3] = $48;$49 = HEAP32[tempDoublePtr>>2]|0;
  $50 = HEAP32[tempDoublePtr+4>>2]|0;
  HEAP32[tempDoublePtr>>2] = 0;HEAP32[tempDoublePtr+4>>2] = $50;$51 = +HEAPF64[tempDoublePtr>>3];
  $52 = $28 - $51;
  $53 = $52 - $30;
  $54 = $30 + $47;
  $55 = $32 * $54;
  $56 = $53 + $55;
  $57 = $51 * 0.43429448187816888;
  $58 = (+($23|0));
  $59 = $58 * 0.30102999566361177;
  $60 = $58 * 3.6942390771589308E-13;
  $61 = $51 + $56;
  $62 = $61 * 2.5082946711645275E-11;
  $63 = $60 + $62;
  $64 = $56 * 0.43429448187816888;
  $65 = $64 + $63;
  $66 = $59 + $57;
  $67 = $59 - $66;
  $68 = $57 + $67;
  $69 = $68 + $65;
  $70 = $66 + $69;
  $$0101 = $70;
 }
 return (+$$0101);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = tempRet0;
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _scalbn($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0.0, $$020 = 0, $$1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(1023);
 if ($2) {
  $3 = $0 * 8.9884656743115795E+307;
  $4 = (($1) + -1023)|0;
  $5 = ($4|0)>(1023);
  $6 = (($1) + -2046)|0;
  if ($5) {
   $7 = $3 * 8.9884656743115795E+307;
   $8 = ($6|0)>(1023);
   $$ = $8 ? 1023 : $6;
   $$0 = $7;$$020 = $$;
  } else {
   $$0 = $3;$$020 = $4;
  }
 } else {
  $9 = ($1|0)<(-1022);
  if ($9) {
   $10 = $0 * 2.2250738585072014E-308;
   $11 = (($1) + 1022)|0;
   $12 = ($11|0)<(-1022);
   $13 = (($1) + 2044)|0;
   if ($12) {
    $14 = $10 * 2.2250738585072014E-308;
    $15 = ($13|0)<(-1022);
    $$1 = $15 ? -1022 : $13;
    $$0 = $14;$$020 = $$1;
   } else {
    $$0 = $10;$$020 = $11;
   }
  } else {
   $$0 = $0;$$020 = $1;
  }
 }
 $16 = (($$020) + 1023)|0;
 $17 = (_bitshift64Shl(($16|0),0,52)|0);
 $18 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $17;HEAP32[tempDoublePtr+4>>2] = $18;$19 = +HEAPF64[tempDoublePtr>>3];
 $20 = $$0 * $19;
 return (+$20);
}
function _copysign($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = $3 & 2147483647;
 $7 = $5 & -2147483648;
 $8 = $7 | $6;
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $8;$9 = +HEAPF64[tempDoublePtr>>3];
 return (+$9);
}
function _fmodl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_fmod($0,$1));
 return (+$2);
}
function _fmod($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$ = 0.0, $$070 = 0.0, $$071$lcssa = 0, $$07195 = 0, $$073$lcssa = 0, $$073101 = 0, $$172$ph = 0, $$174 = 0, $$275$lcssa = 0, $$27587 = 0, $$376$lcssa = 0, $$37684 = 0, $$lcssa = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $7 = tempRet0;
 $8 = $6 & 2047;
 $9 = (_bitshift64Lshr(($4|0),($5|0),52)|0);
 $10 = tempRet0;
 $11 = $9 & 2047;
 $12 = $3 & -2147483648;
 $13 = (_bitshift64Shl(($4|0),($5|0),1)|0);
 $14 = tempRet0;
 $15 = ($13|0)==(0);
 $16 = ($14|0)==(0);
 $17 = $15 & $16;
 L1: do {
  if ($17) {
   label = 3;
  } else {
   $18 = $5 & 2147483647;
   $19 = ($18>>>0)>(2146435072);
   $20 = ($4>>>0)>(0);
   $21 = ($18|0)==(2146435072);
   $22 = $21 & $20;
   $23 = $19 | $22;
   $24 = ($8|0)==(2047);
   $or$cond = $23 | $24;
   if ($or$cond) {
    label = 3;
   } else {
    $27 = (_bitshift64Shl(($2|0),($3|0),1)|0);
    $28 = tempRet0;
    $29 = ($28>>>0)>($14>>>0);
    $30 = ($27>>>0)>($13>>>0);
    $31 = ($28|0)==($14|0);
    $32 = $31 & $30;
    $33 = $29 | $32;
    if (!($33)) {
     $34 = ($27|0)==($13|0);
     $35 = ($28|0)==($14|0);
     $36 = $34 & $35;
     $37 = $0 * 0.0;
     $$ = $36 ? $37 : $0;
     return (+$$);
    }
    $38 = ($8|0)==(0);
    if ($38) {
     $39 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $40 = tempRet0;
     $41 = ($40|0)>(-1);
     $42 = ($39>>>0)>(4294967295);
     $43 = ($40|0)==(-1);
     $44 = $43 & $42;
     $45 = $41 | $44;
     if ($45) {
      $$073101 = 0;$47 = $39;$48 = $40;
      while(1) {
       $46 = (($$073101) + -1)|0;
       $49 = (_bitshift64Shl(($47|0),($48|0),1)|0);
       $50 = tempRet0;
       $51 = ($50|0)>(-1);
       $52 = ($49>>>0)>(4294967295);
       $53 = ($50|0)==(-1);
       $54 = $53 & $52;
       $55 = $51 | $54;
       if ($55) {
        $$073101 = $46;$47 = $49;$48 = $50;
       } else {
        $$073$lcssa = $46;
        break;
       }
      }
     } else {
      $$073$lcssa = 0;
     }
     $56 = (1 - ($$073$lcssa))|0;
     $57 = (_bitshift64Shl(($2|0),($3|0),($56|0))|0);
     $58 = tempRet0;
     $$174 = $$073$lcssa;$85 = $57;$86 = $58;
    } else {
     $59 = $3 & 1048575;
     $60 = $59 | 1048576;
     $$174 = $8;$85 = $2;$86 = $60;
    }
    $61 = ($11|0)==(0);
    if ($61) {
     $62 = (_bitshift64Shl(($4|0),($5|0),12)|0);
     $63 = tempRet0;
     $64 = ($63|0)>(-1);
     $65 = ($62>>>0)>(4294967295);
     $66 = ($63|0)==(-1);
     $67 = $66 & $65;
     $68 = $64 | $67;
     if ($68) {
      $$07195 = 0;$70 = $62;$71 = $63;
      while(1) {
       $69 = (($$07195) + -1)|0;
       $72 = (_bitshift64Shl(($70|0),($71|0),1)|0);
       $73 = tempRet0;
       $74 = ($73|0)>(-1);
       $75 = ($72>>>0)>(4294967295);
       $76 = ($73|0)==(-1);
       $77 = $76 & $75;
       $78 = $74 | $77;
       if ($78) {
        $$07195 = $69;$70 = $72;$71 = $73;
       } else {
        $$071$lcssa = $69;
        break;
       }
      }
     } else {
      $$071$lcssa = 0;
     }
     $79 = (1 - ($$071$lcssa))|0;
     $80 = (_bitshift64Shl(($4|0),($5|0),($79|0))|0);
     $81 = tempRet0;
     $$172$ph = $$071$lcssa;$87 = $80;$88 = $81;
    } else {
     $82 = $5 & 1048575;
     $83 = $82 | 1048576;
     $$172$ph = $11;$87 = $4;$88 = $83;
    }
    $84 = ($$174|0)>($$172$ph|0);
    $89 = (_i64Subtract(($85|0),($86|0),($87|0),($88|0))|0);
    $90 = tempRet0;
    $91 = ($90|0)>(-1);
    $92 = ($89>>>0)>(4294967295);
    $93 = ($90|0)==(-1);
    $94 = $93 & $92;
    $95 = $91 | $94;
    L23: do {
     if ($84) {
      $$27587 = $$174;$154 = $95;$155 = $85;$156 = $86;$96 = $89;$98 = $90;
      while(1) {
       if ($154) {
        $97 = ($96|0)==(0);
        $99 = ($98|0)==(0);
        $100 = $97 & $99;
        if ($100) {
         break;
        } else {
         $102 = $96;$103 = $98;
        }
       } else {
        $102 = $155;$103 = $156;
       }
       $104 = (_bitshift64Shl(($102|0),($103|0),1)|0);
       $105 = tempRet0;
       $106 = (($$27587) + -1)|0;
       $107 = ($106|0)>($$172$ph|0);
       $108 = (_i64Subtract(($104|0),($105|0),($87|0),($88|0))|0);
       $109 = tempRet0;
       $110 = ($109|0)>(-1);
       $111 = ($108>>>0)>(4294967295);
       $112 = ($109|0)==(-1);
       $113 = $112 & $111;
       $114 = $110 | $113;
       if ($107) {
        $$27587 = $106;$154 = $114;$155 = $104;$156 = $105;$96 = $108;$98 = $109;
       } else {
        $$275$lcssa = $106;$$lcssa = $114;$115 = $108;$117 = $109;$157 = $104;$158 = $105;
        break L23;
       }
      }
      $101 = $0 * 0.0;
      $$070 = $101;
      break L1;
     } else {
      $$275$lcssa = $$174;$$lcssa = $95;$115 = $89;$117 = $90;$157 = $85;$158 = $86;
     }
    } while(0);
    if ($$lcssa) {
     $116 = ($115|0)==(0);
     $118 = ($117|0)==(0);
     $119 = $116 & $118;
     if ($119) {
      $127 = $0 * 0.0;
      $$070 = $127;
      break;
     } else {
      $120 = $117;$122 = $115;
     }
    } else {
     $120 = $158;$122 = $157;
    }
    $121 = ($120>>>0)<(1048576);
    $123 = ($122>>>0)<(0);
    $124 = ($120|0)==(1048576);
    $125 = $124 & $123;
    $126 = $121 | $125;
    if ($126) {
     $$37684 = $$275$lcssa;$128 = $122;$129 = $120;
     while(1) {
      $130 = (_bitshift64Shl(($128|0),($129|0),1)|0);
      $131 = tempRet0;
      $132 = (($$37684) + -1)|0;
      $133 = ($131>>>0)<(1048576);
      $134 = ($130>>>0)<(0);
      $135 = ($131|0)==(1048576);
      $136 = $135 & $134;
      $137 = $133 | $136;
      if ($137) {
       $$37684 = $132;$128 = $130;$129 = $131;
      } else {
       $$376$lcssa = $132;$139 = $130;$140 = $131;
       break;
      }
     }
    } else {
     $$376$lcssa = $$275$lcssa;$139 = $122;$140 = $120;
    }
    $138 = ($$376$lcssa|0)>(0);
    if ($138) {
     $141 = (_i64Add(($139|0),($140|0),0,-1048576)|0);
     $142 = tempRet0;
     $143 = (_bitshift64Shl(($$376$lcssa|0),0,52)|0);
     $144 = tempRet0;
     $145 = $141 | $143;
     $146 = $142 | $144;
     $151 = $146;$153 = $145;
    } else {
     $147 = (1 - ($$376$lcssa))|0;
     $148 = (_bitshift64Lshr(($139|0),($140|0),($147|0))|0);
     $149 = tempRet0;
     $151 = $149;$153 = $148;
    }
    $150 = $151 | $12;
    HEAP32[tempDoublePtr>>2] = $153;HEAP32[tempDoublePtr+4>>2] = $150;$152 = +HEAPF64[tempDoublePtr>>3];
    $$070 = $152;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $25 = $0 * $1;
  $26 = $25 / $25;
  $$070 = $26;
 }
 return (+$$070);
}
function _copysignl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_copysign($0,$1));
 return (+$2);
}
function _scalbnl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_scalbn($0,$1));
 return (+$2);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01318 = $0;$$01417 = $2;$$019 = $1;
   while(1) {
    $4 = HEAP8[$$01318>>0]|0;
    $5 = HEAP8[$$019>>0]|0;
    $6 = ($4<<24>>24)==($5<<24>>24);
    if (!($6)) {
     break;
    }
    $7 = (($$01417) + -1)|0;
    $8 = ((($$01318)) + 1|0);
    $9 = ((($$019)) + 1|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $14 = 0;
     break L1;
    } else {
     $$01318 = $8;$$01417 = $7;$$019 = $9;
    }
   }
   $11 = $4&255;
   $12 = $5&255;
   $13 = (($11) - ($12))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function _strncmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$01823 = 0, $$01925 = 0, $$01925$in = 0, $$020 = 0, $$024 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $$020 = 0;
 } else {
  $4 = HEAP8[$0>>0]|0;
  $5 = ($4<<24>>24)==(0);
  L3: do {
   if ($5) {
    $$0$lcssa = $1;$16 = 0;
   } else {
    $$01823 = $0;$$01925$in = $2;$$024 = $1;$9 = $4;
    while(1) {
     $$01925 = (($$01925$in) + -1)|0;
     $6 = HEAP8[$$024>>0]|0;
     $7 = ($6<<24>>24)!=(0);
     $8 = ($$01925|0)!=(0);
     $or$cond = $8 & $7;
     $10 = ($9<<24>>24)==($6<<24>>24);
     $or$cond21 = $10 & $or$cond;
     if (!($or$cond21)) {
      $$0$lcssa = $$024;$16 = $9;
      break L3;
     }
     $11 = ((($$01823)) + 1|0);
     $12 = ((($$024)) + 1|0);
     $13 = HEAP8[$11>>0]|0;
     $14 = ($13<<24>>24)==(0);
     if ($14) {
      $$0$lcssa = $12;$16 = 0;
      break;
     } else {
      $$01823 = $11;$$01925$in = $$01925;$$024 = $12;$9 = $13;
     }
    }
   }
  } while(0);
  $15 = $16&255;
  $17 = HEAP8[$$0$lcssa>>0]|0;
  $18 = $17&255;
  $19 = (($15) - ($18))|0;
  $$020 = $19;
 }
 return ($$020|0);
}
function _sprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vsprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_vsnprintf($0,2147483647,$1,$2)|0);
 return ($3|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp + 112|0;
 $5 = sp;
 dest=$5; src=12136; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $$$015 = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $$$015;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($$$015)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($$$015|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$1$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp + 120|0;
 $4 = sp + 80|0;
 $5 = sp;
 $6 = sp + 136|0;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $39 = $12;
  } else {
   $39 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 1023]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $$ = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $$;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $$1$ = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $40 = ($39|0)==(0);
  if (!($40)) {
   ___unlockfile($0);
  }
  $$0 = $$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$0259 = 0, $$$0262 = 0, $$$0269 = 0, $$$3484$i = 0, $$$3484705$i = 0, $$$3484706$i = 0, $$$3501$i = 0, $$$4266 = 0, $$$4502$i = 0, $$$5 = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i300 = 0, $$0228 = 0, $$0229396 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0;
 var $$0240$lcssa = 0, $$0240$lcssa460 = 0, $$0240395 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249383 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0254$ = 0, $$0259 = 0, $$0262342 = 0, $$0262390 = 0, $$0269 = 0, $$0269$phi = 0, $$0321 = 0, $$0463$lcssa$i = 0, $$0463594$i = 0, $$0464603$i = 0;
 var $$0466$i = 0.0, $$0470$i = 0, $$0471$i = 0.0, $$0479$i = 0, $$0487652$i = 0, $$0488$i = 0, $$0488663$i = 0, $$0488665$i = 0, $$0496$$9$i = 0, $$0497664$i = 0, $$0498$i = 0, $$05$lcssa$i = 0, $$0509592$i = 0.0, $$0510$i = 0, $$0511$i = 0, $$0514647$i = 0, $$0520$i = 0, $$0522$$i = 0, $$0522$i = 0, $$0524$i = 0;
 var $$0526$i = 0, $$0528$i = 0, $$0528639$i = 0, $$0528641$i = 0, $$0531646$i = 0, $$056$i = 0, $$06$i = 0, $$06$i290 = 0, $$06$i298 = 0, $$1 = 0, $$1230407 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241406 = 0, $$1244394 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0, $$1260 = 0;
 var $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$1322 = 0, $$1465$i = 0, $$1467$i = 0.0, $$1469$i = 0.0, $$1472$i = 0.0, $$1480$i = 0, $$1482$lcssa$i = 0, $$1482671$i = 0, $$1489651$i = 0, $$1499$lcssa$i = 0, $$1499670$i = 0, $$1508593$i = 0, $$1512$lcssa$i = 0, $$1512617$i = 0, $$1515$i = 0, $$1521$i = 0, $$1525$i = 0;
 var $$1527$i = 0, $$1529624$i = 0, $$1532$lcssa$i = 0, $$1532640$i = 0, $$1607$i = 0, $$2 = 0, $$2$i = 0, $$2234 = 0, $$2239 = 0, $$2242381 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2256$ = 0, $$2261 = 0, $$2271 = 0, $$2323$lcssa = 0, $$2323382 = 0, $$2473$i = 0.0, $$2476$$545$i = 0;
 var $$2476$$547$i = 0, $$2476$i = 0, $$2483$ph$i = 0, $$2490$lcssa$i = 0, $$2490632$i = 0, $$2500$i = 0, $$2513$i = 0, $$2516628$i = 0, $$2530$i = 0, $$2533627$i = 0, $$3$i = 0.0, $$3257 = 0, $$3265 = 0, $$3272 = 0, $$331 = 0, $$332 = 0, $$333 = 0, $$3379 = 0, $$3477$i = 0, $$3484$lcssa$i = 0;
 var $$3484658$i = 0, $$3501$lcssa$i = 0, $$3501657$i = 0, $$3534623$i = 0, $$4$i = 0.0, $$4258458 = 0, $$4266 = 0, $$4325 = 0, $$4478$lcssa$i = 0, $$4478600$i = 0, $$4492$i = 0, $$4502$i = 0, $$4518$i = 0, $$5 = 0, $$5$lcssa$i = 0, $$537$i = 0, $$538$$i = 0, $$538$i = 0, $$541$i = 0.0, $$544$i = 0;
 var $$546$i = 0, $$5486$lcssa$i = 0, $$5486633$i = 0, $$5493606$i = 0, $$5519$ph$i = 0, $$553$i = 0, $$554$i = 0, $$557$i = 0.0, $$5611$i = 0, $$6 = 0, $$6$i = 0, $$6268 = 0, $$6494599$i = 0, $$7 = 0, $$7495610$i = 0, $$7505$$i = 0, $$7505$i = 0, $$7505$ph$i = 0, $$8$i = 0, $$9$ph$i = 0;
 var $$lcssa683$i = 0, $$neg$i = 0, $$neg572$i = 0, $$pn$i = 0, $$pr = 0, $$pr$i = 0, $$pr571$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi704$iZ2D = 0, $$pre452 = 0, $$pre453 = 0, $$pre454 = 0, $$pre697$i = 0, $$pre700$i = 0, $$pre703$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0.0, $372 = 0, $373 = 0, $374 = 0, $375 = 0.0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0.0, $404 = 0.0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0.0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0.0, $494 = 0.0, $495 = 0.0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0;
 var $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0;
 var $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0;
 var $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0;
 var $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0;
 var $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0;
 var $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0.0, $606 = 0.0, $607 = 0, $608 = 0.0, $609 = 0, $61 = 0;
 var $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0;
 var $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0;
 var $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0;
 var $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0;
 var $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0;
 var $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0;
 var $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0;
 var $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0;
 var $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0;
 var $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0;
 var $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0;
 var $809 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i292 = 0, $isdigit275 = 0;
 var $isdigit277 = 0, $isdigit5$i = 0, $isdigit5$i288 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i291 = 0, $isdigittmp274 = 0, $isdigittmp276 = 0, $isdigittmp4$i = 0, $isdigittmp4$i287 = 0, $isdigittmp7$i = 0, $isdigittmp7$i289 = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond280 = 0, $or$cond282 = 0, $or$cond285 = 0;
 var $or$cond3$not$i = 0, $or$cond412 = 0, $or$cond540$i = 0, $or$cond543$i = 0, $or$cond552$i = 0, $or$cond6$i = 0, $scevgep694$i = 0, $scevgep694695$i = 0, $storemerge = 0, $storemerge273345 = 0, $storemerge273389 = 0, $storemerge278 = 0, $sum = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(624|0);
 $5 = sp + 24|0;
 $6 = sp + 16|0;
 $7 = sp + 588|0;
 $8 = sp + 576|0;
 $9 = sp;
 $10 = sp + 536|0;
 $11 = sp + 8|0;
 $12 = sp + 528|0;
 $13 = ($0|0)!=(0|0);
 $14 = ((($10)) + 40|0);
 $15 = $14;
 $16 = ((($10)) + 39|0);
 $17 = ((($11)) + 4|0);
 $18 = $7;
 $19 = (0 - ($18))|0;
 $20 = ((($8)) + 12|0);
 $21 = ((($8)) + 11|0);
 $22 = $20;
 $23 = (($22) - ($18))|0;
 $24 = (-2 - ($18))|0;
 $25 = (($22) + 2)|0;
 $26 = ((($5)) + 288|0);
 $27 = ((($7)) + 9|0);
 $28 = $27;
 $29 = ((($7)) + 8|0);
 $$0243 = 0;$$0247 = 0;$$0269 = 0;$$0321 = $1;
 L1: while(1) {
  $30 = ($$0247|0)>(-1);
  do {
   if ($30) {
    $31 = (2147483647 - ($$0247))|0;
    $32 = ($$0243|0)>($31|0);
    if ($32) {
     $33 = (___errno_location()|0);
     HEAP32[$33>>2] = 75;
     $$1248 = -1;
     break;
    } else {
     $34 = (($$0243) + ($$0247))|0;
     $$1248 = $34;
     break;
    }
   } else {
    $$1248 = $$0247;
   }
  } while(0);
  $35 = HEAP8[$$0321>>0]|0;
  $36 = ($35<<24>>24)==(0);
  if ($36) {
   label = 243;
   break;
  } else {
   $$1322 = $$0321;$37 = $35;
  }
  L9: while(1) {
   switch ($37<<24>>24) {
   case 37:  {
    $$0249383 = $$1322;$$2323382 = $$1322;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $$0249$lcssa = $$1322;$$2323$lcssa = $$1322;
    break L9;
    break;
   }
   default: {
   }
   }
   $38 = ((($$1322)) + 1|0);
   $$pre = HEAP8[$38>>0]|0;
   $$1322 = $38;$37 = $$pre;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $39 = ((($$2323382)) + 1|0);
     $40 = HEAP8[$39>>0]|0;
     $41 = ($40<<24>>24)==(37);
     if (!($41)) {
      $$0249$lcssa = $$0249383;$$2323$lcssa = $$2323382;
      break L12;
     }
     $42 = ((($$0249383)) + 1|0);
     $43 = ((($$2323382)) + 2|0);
     $44 = HEAP8[$43>>0]|0;
     $45 = ($44<<24>>24)==(37);
     if ($45) {
      $$0249383 = $42;$$2323382 = $43;
      label = 9;
     } else {
      $$0249$lcssa = $42;$$2323$lcssa = $43;
      break;
     }
    }
   }
  } while(0);
  $46 = $$0249$lcssa;
  $47 = $$0321;
  $48 = (($46) - ($47))|0;
  if ($13) {
   $49 = HEAP32[$0>>2]|0;
   $50 = $49 & 32;
   $51 = ($50|0)==(0);
   if ($51) {
    (___fwritex($$0321,$48,$0)|0);
   }
  }
  $52 = ($48|0)==(0);
  if (!($52)) {
   $$0269$phi = $$0269;$$0243 = $48;$$0247 = $$1248;$$0321 = $$2323$lcssa;$$0269 = $$0269$phi;
   continue;
  }
  $53 = ((($$2323$lcssa)) + 1|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54 << 24 >> 24;
  $isdigittmp = (($55) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $56 = ((($$2323$lcssa)) + 2|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = ($57<<24>>24)==(36);
   $59 = ((($$2323$lcssa)) + 3|0);
   $$331 = $58 ? $59 : $53;
   $$$0269 = $58 ? 1 : $$0269;
   $isdigittmp$ = $58 ? $isdigittmp : -1;
   $$pre452 = HEAP8[$$331>>0]|0;
   $$0253 = $isdigittmp$;$$1270 = $$$0269;$61 = $$pre452;$storemerge = $$331;
  } else {
   $$0253 = -1;$$1270 = $$0269;$61 = $54;$storemerge = $53;
  }
  $60 = $61 << 24 >> 24;
  $62 = (($60) + -32)|0;
  $63 = ($62>>>0)<(32);
  L25: do {
   if ($63) {
    $$0262390 = 0;$65 = $62;$69 = $61;$storemerge273389 = $storemerge;
    while(1) {
     $64 = 1 << $65;
     $66 = $64 & 75913;
     $67 = ($66|0)==(0);
     if ($67) {
      $$0262342 = $$0262390;$78 = $69;$storemerge273345 = $storemerge273389;
      break L25;
     }
     $68 = $69 << 24 >> 24;
     $70 = (($68) + -32)|0;
     $71 = 1 << $70;
     $72 = $71 | $$0262390;
     $73 = ((($storemerge273389)) + 1|0);
     $74 = HEAP8[$73>>0]|0;
     $75 = $74 << 24 >> 24;
     $76 = (($75) + -32)|0;
     $77 = ($76>>>0)<(32);
     if ($77) {
      $$0262390 = $72;$65 = $76;$69 = $74;$storemerge273389 = $73;
     } else {
      $$0262342 = $72;$78 = $74;$storemerge273345 = $73;
      break;
     }
    }
   } else {
    $$0262342 = 0;$78 = $61;$storemerge273345 = $storemerge;
   }
  } while(0);
  $79 = ($78<<24>>24)==(42);
  do {
   if ($79) {
    $80 = ((($storemerge273345)) + 1|0);
    $81 = HEAP8[$80>>0]|0;
    $82 = $81 << 24 >> 24;
    $isdigittmp276 = (($82) + -48)|0;
    $isdigit277 = ($isdigittmp276>>>0)<(10);
    if ($isdigit277) {
     $83 = ((($storemerge273345)) + 2|0);
     $84 = HEAP8[$83>>0]|0;
     $85 = ($84<<24>>24)==(36);
     if ($85) {
      $86 = (($4) + ($isdigittmp276<<2)|0);
      HEAP32[$86>>2] = 10;
      $87 = HEAP8[$80>>0]|0;
      $88 = $87 << 24 >> 24;
      $89 = (($88) + -48)|0;
      $90 = (($3) + ($89<<3)|0);
      $91 = $90;
      $92 = $91;
      $93 = HEAP32[$92>>2]|0;
      $94 = (($91) + 4)|0;
      $95 = $94;
      $96 = HEAP32[$95>>2]|0;
      $97 = ((($storemerge273345)) + 3|0);
      $$0259 = $93;$$2271 = 1;$storemerge278 = $97;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $98 = ($$1270|0)==(0);
     if (!($98)) {
      $$0 = -1;
      break L1;
     }
     if (!($13)) {
      $$1260 = 0;$$1263 = $$0262342;$$3272 = 0;$$4325 = $80;$$pr = $81;
      break;
     }
     $arglist_current = HEAP32[$2>>2]|0;
     $99 = $arglist_current;
     $100 = ((0) + 4|0);
     $expanded4 = $100;
     $expanded = (($expanded4) - 1)|0;
     $101 = (($99) + ($expanded))|0;
     $102 = ((0) + 4|0);
     $expanded8 = $102;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $103 = $101 & $expanded6;
     $104 = $103;
     $105 = HEAP32[$104>>2]|0;
     $arglist_next = ((($104)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $$0259 = $105;$$2271 = 0;$storemerge278 = $80;
    }
    $106 = ($$0259|0)<(0);
    $107 = $$0262342 | 8192;
    $108 = (0 - ($$0259))|0;
    $$$0262 = $106 ? $107 : $$0262342;
    $$$0259 = $106 ? $108 : $$0259;
    $$pre453 = HEAP8[$storemerge278>>0]|0;
    $$1260 = $$$0259;$$1263 = $$$0262;$$3272 = $$2271;$$4325 = $storemerge278;$$pr = $$pre453;
   } else {
    $109 = $78 << 24 >> 24;
    $isdigittmp4$i = (($109) + -48)|0;
    $isdigit5$i = ($isdigittmp4$i>>>0)<(10);
    if ($isdigit5$i) {
     $$06$i = 0;$113 = $storemerge273345;$isdigittmp7$i = $isdigittmp4$i;
     while(1) {
      $110 = ($$06$i*10)|0;
      $111 = (($110) + ($isdigittmp7$i))|0;
      $112 = ((($113)) + 1|0);
      $114 = HEAP8[$112>>0]|0;
      $115 = $114 << 24 >> 24;
      $isdigittmp$i = (($115) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $$06$i = $111;$113 = $112;$isdigittmp7$i = $isdigittmp$i;
      } else {
       break;
      }
     }
     $116 = ($111|0)<(0);
     if ($116) {
      $$0 = -1;
      break L1;
     } else {
      $$1260 = $111;$$1263 = $$0262342;$$3272 = $$1270;$$4325 = $112;$$pr = $114;
     }
    } else {
     $$1260 = 0;$$1263 = $$0262342;$$3272 = $$1270;$$4325 = $storemerge273345;$$pr = $78;
    }
   }
  } while(0);
  $117 = ($$pr<<24>>24)==(46);
  L45: do {
   if ($117) {
    $118 = ((($$4325)) + 1|0);
    $119 = HEAP8[$118>>0]|0;
    $120 = ($119<<24>>24)==(42);
    if (!($120)) {
     $147 = $119 << 24 >> 24;
     $isdigittmp4$i287 = (($147) + -48)|0;
     $isdigit5$i288 = ($isdigittmp4$i287>>>0)<(10);
     if ($isdigit5$i288) {
      $$06$i290 = 0;$151 = $118;$isdigittmp7$i289 = $isdigittmp4$i287;
     } else {
      $$0254 = 0;$$6 = $118;
      break;
     }
     while(1) {
      $148 = ($$06$i290*10)|0;
      $149 = (($148) + ($isdigittmp7$i289))|0;
      $150 = ((($151)) + 1|0);
      $152 = HEAP8[$150>>0]|0;
      $153 = $152 << 24 >> 24;
      $isdigittmp$i291 = (($153) + -48)|0;
      $isdigit$i292 = ($isdigittmp$i291>>>0)<(10);
      if ($isdigit$i292) {
       $$06$i290 = $149;$151 = $150;$isdigittmp7$i289 = $isdigittmp$i291;
      } else {
       $$0254 = $149;$$6 = $150;
       break L45;
      }
     }
    }
    $121 = ((($$4325)) + 2|0);
    $122 = HEAP8[$121>>0]|0;
    $123 = $122 << 24 >> 24;
    $isdigittmp274 = (($123) + -48)|0;
    $isdigit275 = ($isdigittmp274>>>0)<(10);
    if ($isdigit275) {
     $124 = ((($$4325)) + 3|0);
     $125 = HEAP8[$124>>0]|0;
     $126 = ($125<<24>>24)==(36);
     if ($126) {
      $127 = (($4) + ($isdigittmp274<<2)|0);
      HEAP32[$127>>2] = 10;
      $128 = HEAP8[$121>>0]|0;
      $129 = $128 << 24 >> 24;
      $130 = (($129) + -48)|0;
      $131 = (($3) + ($130<<3)|0);
      $132 = $131;
      $133 = $132;
      $134 = HEAP32[$133>>2]|0;
      $135 = (($132) + 4)|0;
      $136 = $135;
      $137 = HEAP32[$136>>2]|0;
      $138 = ((($$4325)) + 4|0);
      $$0254 = $134;$$6 = $138;
      break;
     }
    }
    $139 = ($$3272|0)==(0);
    if (!($139)) {
     $$0 = -1;
     break L1;
    }
    if ($13) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $140 = $arglist_current2;
     $141 = ((0) + 4|0);
     $expanded11 = $141;
     $expanded10 = (($expanded11) - 1)|0;
     $142 = (($140) + ($expanded10))|0;
     $143 = ((0) + 4|0);
     $expanded15 = $143;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $144 = $142 & $expanded13;
     $145 = $144;
     $146 = HEAP32[$145>>2]|0;
     $arglist_next3 = ((($145)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $$0254 = $146;$$6 = $121;
    } else {
     $$0254 = 0;$$6 = $121;
    }
   } else {
    $$0254 = -1;$$6 = $$4325;
   }
  } while(0);
  $$0252 = 0;$$7 = $$6;
  while(1) {
   $154 = HEAP8[$$7>>0]|0;
   $155 = $154 << 24 >> 24;
   $156 = (($155) + -65)|0;
   $157 = ($156>>>0)>(57);
   if ($157) {
    $$0 = -1;
    break L1;
   }
   $158 = ((($$7)) + 1|0);
   $159 = ((29212 + (($$0252*58)|0)|0) + ($156)|0);
   $160 = HEAP8[$159>>0]|0;
   $161 = $160&255;
   $162 = (($161) + -1)|0;
   $163 = ($162>>>0)<(8);
   if ($163) {
    $$0252 = $161;$$7 = $158;
   } else {
    break;
   }
  }
  $164 = ($160<<24>>24)==(0);
  if ($164) {
   $$0 = -1;
   break;
  }
  $165 = ($160<<24>>24)==(19);
  $166 = ($$0253|0)>(-1);
  do {
   if ($165) {
    if ($166) {
     $$0 = -1;
     break L1;
    } else {
     label = 51;
    }
   } else {
    if ($166) {
     $167 = (($4) + ($$0253<<2)|0);
     HEAP32[$167>>2] = $161;
     $168 = (($3) + ($$0253<<3)|0);
     $169 = $168;
     $170 = $169;
     $171 = HEAP32[$170>>2]|0;
     $172 = (($169) + 4)|0;
     $173 = $172;
     $174 = HEAP32[$173>>2]|0;
     $175 = $9;
     $176 = $175;
     HEAP32[$176>>2] = $171;
     $177 = (($175) + 4)|0;
     $178 = $177;
     HEAP32[$178>>2] = $174;
     label = 51;
     break;
    }
    if (!($13)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg_375($9,$161,$2);
   }
  } while(0);
  if ((label|0) == 51) {
   label = 0;
   if (!($13)) {
    $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
    continue;
   }
  }
  $179 = HEAP8[$$7>>0]|0;
  $180 = $179 << 24 >> 24;
  $181 = ($$0252|0)!=(0);
  $182 = $180 & 15;
  $183 = ($182|0)==(3);
  $or$cond280 = $181 & $183;
  $184 = $180 & -33;
  $$0235 = $or$cond280 ? $184 : $180;
  $185 = $$1263 & 8192;
  $186 = ($185|0)==(0);
  $187 = $$1263 & -65537;
  $$1263$ = $186 ? $$1263 : $187;
  L74: do {
   switch ($$0235|0) {
   case 110:  {
    $trunc = $$0252&255;
    switch ($trunc<<24>>24) {
    case 0:  {
     $194 = HEAP32[$9>>2]|0;
     HEAP32[$194>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 1:  {
     $195 = HEAP32[$9>>2]|0;
     HEAP32[$195>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 2:  {
     $196 = ($$1248|0)<(0);
     $197 = $196 << 31 >> 31;
     $198 = HEAP32[$9>>2]|0;
     $199 = $198;
     $200 = $199;
     HEAP32[$200>>2] = $$1248;
     $201 = (($199) + 4)|0;
     $202 = $201;
     HEAP32[$202>>2] = $197;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 3:  {
     $203 = $$1248&65535;
     $204 = HEAP32[$9>>2]|0;
     HEAP16[$204>>1] = $203;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 4:  {
     $205 = $$1248&255;
     $206 = HEAP32[$9>>2]|0;
     HEAP8[$206>>0] = $205;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 6:  {
     $207 = HEAP32[$9>>2]|0;
     HEAP32[$207>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 7:  {
     $208 = ($$1248|0)<(0);
     $209 = $208 << 31 >> 31;
     $210 = HEAP32[$9>>2]|0;
     $211 = $210;
     $212 = $211;
     HEAP32[$212>>2] = $$1248;
     $213 = (($211) + 4)|0;
     $214 = $213;
     HEAP32[$214>>2] = $209;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    default: {
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $215 = ($$0254>>>0)>(8);
    $216 = $215 ? $$0254 : 8;
    $217 = $$1263$ | 8;
    $$1236 = 120;$$1255 = $216;$$3265 = $217;
    label = 63;
    break;
   }
   case 88: case 120:  {
    $$1236 = $$0235;$$1255 = $$0254;$$3265 = $$1263$;
    label = 63;
    break;
   }
   case 111:  {
    $257 = $9;
    $258 = $257;
    $259 = HEAP32[$258>>2]|0;
    $260 = (($257) + 4)|0;
    $261 = $260;
    $262 = HEAP32[$261>>2]|0;
    $263 = ($259|0)==(0);
    $264 = ($262|0)==(0);
    $265 = $263 & $264;
    if ($265) {
     $$0$lcssa$i300 = $14;
    } else {
     $$06$i298 = $14;$267 = $259;$271 = $262;
     while(1) {
      $266 = $267 & 7;
      $268 = $266 | 48;
      $269 = $268&255;
      $270 = ((($$06$i298)) + -1|0);
      HEAP8[$270>>0] = $269;
      $272 = (_bitshift64Lshr(($267|0),($271|0),3)|0);
      $273 = tempRet0;
      $274 = ($272|0)==(0);
      $275 = ($273|0)==(0);
      $276 = $274 & $275;
      if ($276) {
       $$0$lcssa$i300 = $270;
       break;
      } else {
       $$06$i298 = $270;$267 = $272;$271 = $273;
      }
     }
    }
    $277 = $$1263$ & 8;
    $278 = ($277|0)==(0);
    if ($278) {
     $$0228 = $$0$lcssa$i300;$$1233 = 0;$$1238 = 29692;$$2256 = $$0254;$$4266 = $$1263$;
     label = 76;
    } else {
     $279 = $$0$lcssa$i300;
     $280 = (($15) - ($279))|0;
     $281 = ($$0254|0)>($280|0);
     $282 = (($280) + 1)|0;
     $$0254$ = $281 ? $$0254 : $282;
     $$0228 = $$0$lcssa$i300;$$1233 = 0;$$1238 = 29692;$$2256 = $$0254$;$$4266 = $$1263$;
     label = 76;
    }
    break;
   }
   case 105: case 100:  {
    $283 = $9;
    $284 = $283;
    $285 = HEAP32[$284>>2]|0;
    $286 = (($283) + 4)|0;
    $287 = $286;
    $288 = HEAP32[$287>>2]|0;
    $289 = ($288|0)<(0);
    if ($289) {
     $290 = (_i64Subtract(0,0,($285|0),($288|0))|0);
     $291 = tempRet0;
     $292 = $9;
     $293 = $292;
     HEAP32[$293>>2] = $290;
     $294 = (($292) + 4)|0;
     $295 = $294;
     HEAP32[$295>>2] = $291;
     $$0232 = 1;$$0237 = 29692;$300 = $290;$301 = $291;
     label = 75;
     break L74;
    }
    $296 = $$1263$ & 2048;
    $297 = ($296|0)==(0);
    if ($297) {
     $298 = $$1263$ & 1;
     $299 = ($298|0)==(0);
     $$ = $299 ? 29692 : (29694);
     $$0232 = $298;$$0237 = $$;$300 = $285;$301 = $288;
     label = 75;
    } else {
     $$0232 = 1;$$0237 = (29693);$300 = $285;$301 = $288;
     label = 75;
    }
    break;
   }
   case 117:  {
    $188 = $9;
    $189 = $188;
    $190 = HEAP32[$189>>2]|0;
    $191 = (($188) + 4)|0;
    $192 = $191;
    $193 = HEAP32[$192>>2]|0;
    $$0232 = 0;$$0237 = 29692;$300 = $190;$301 = $193;
    label = 75;
    break;
   }
   case 99:  {
    $321 = $9;
    $322 = $321;
    $323 = HEAP32[$322>>2]|0;
    $324 = (($321) + 4)|0;
    $325 = $324;
    $326 = HEAP32[$325>>2]|0;
    $327 = $323&255;
    HEAP8[$16>>0] = $327;
    $$2 = $16;$$2234 = 0;$$2239 = 29692;$$2251 = $14;$$5 = 1;$$6268 = $187;
    break;
   }
   case 109:  {
    $328 = (___errno_location()|0);
    $329 = HEAP32[$328>>2]|0;
    $330 = (_strerror($329)|0);
    $$1 = $330;
    label = 81;
    break;
   }
   case 115:  {
    $331 = HEAP32[$9>>2]|0;
    $332 = ($331|0)!=(0|0);
    $333 = $332 ? $331 : 29702;
    $$1 = $333;
    label = 81;
    break;
   }
   case 67:  {
    $340 = $9;
    $341 = $340;
    $342 = HEAP32[$341>>2]|0;
    $343 = (($340) + 4)|0;
    $344 = $343;
    $345 = HEAP32[$344>>2]|0;
    HEAP32[$11>>2] = $342;
    HEAP32[$17>>2] = 0;
    HEAP32[$9>>2] = $11;
    $$4258458 = -1;$809 = $11;
    label = 85;
    break;
   }
   case 83:  {
    $$pre454 = HEAP32[$9>>2]|0;
    $346 = ($$0254|0)==(0);
    if ($346) {
     _pad($0,32,$$1260,0,$$1263$);
     $$0240$lcssa460 = 0;
     label = 96;
    } else {
     $$4258458 = $$0254;$809 = $$pre454;
     label = 85;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $371 = +HEAPF64[$9>>3];
    HEAP32[$6>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $371;$372 = HEAP32[tempDoublePtr>>2]|0;
    $373 = HEAP32[tempDoublePtr+4>>2]|0;
    $374 = ($373|0)<(0);
    if ($374) {
     $375 = -$371;
     $$0471$i = $375;$$0520$i = 1;$$0522$i = 29709;
    } else {
     $376 = $$1263$ & 2048;
     $377 = ($376|0)==(0);
     $378 = $$1263$ & 1;
     if ($377) {
      $379 = ($378|0)==(0);
      $$$i = $379 ? (29710) : (29715);
      $$0471$i = $371;$$0520$i = $378;$$0522$i = $$$i;
     } else {
      $$0471$i = $371;$$0520$i = 1;$$0522$i = (29712);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$0471$i;$380 = HEAP32[tempDoublePtr>>2]|0;
    $381 = HEAP32[tempDoublePtr+4>>2]|0;
    $382 = $381 & 2146435072;
    $383 = ($382>>>0)<(2146435072);
    $384 = (0)<(0);
    $385 = ($382|0)==(2146435072);
    $386 = $385 & $384;
    $387 = $383 | $386;
    do {
     if ($387) {
      $403 = (+_frexpl($$0471$i,$6));
      $404 = $403 * 2.0;
      $405 = $404 != 0.0;
      if ($405) {
       $406 = HEAP32[$6>>2]|0;
       $407 = (($406) + -1)|0;
       HEAP32[$6>>2] = $407;
      }
      $408 = $$0235 | 32;
      $409 = ($408|0)==(97);
      if ($409) {
       $410 = $$0235 & 32;
       $411 = ($410|0)==(0);
       $412 = ((($$0522$i)) + 9|0);
       $$0522$$i = $411 ? $$0522$i : $412;
       $413 = $$0520$i | 2;
       $414 = ($$0254>>>0)>(11);
       $415 = (12 - ($$0254))|0;
       $416 = ($415|0)==(0);
       $417 = $414 | $416;
       do {
        if ($417) {
         $$1472$i = $404;
        } else {
         $$0509592$i = 8.0;$$1508593$i = $415;
         while(1) {
          $418 = (($$1508593$i) + -1)|0;
          $419 = $$0509592$i * 16.0;
          $420 = ($418|0)==(0);
          if ($420) {
           break;
          } else {
           $$0509592$i = $419;$$1508593$i = $418;
          }
         }
         $421 = HEAP8[$$0522$$i>>0]|0;
         $422 = ($421<<24>>24)==(45);
         if ($422) {
          $423 = -$404;
          $424 = $423 - $419;
          $425 = $419 + $424;
          $426 = -$425;
          $$1472$i = $426;
          break;
         } else {
          $427 = $404 + $419;
          $428 = $427 - $419;
          $$1472$i = $428;
          break;
         }
        }
       } while(0);
       $429 = HEAP32[$6>>2]|0;
       $430 = ($429|0)<(0);
       $431 = (0 - ($429))|0;
       $432 = $430 ? $431 : $429;
       $433 = ($432|0)<(0);
       $434 = $433 << 31 >> 31;
       $435 = (_fmt_u($432,$434,$20)|0);
       $436 = ($435|0)==($20|0);
       if ($436) {
        HEAP8[$21>>0] = 48;
        $$0511$i = $21;
       } else {
        $$0511$i = $435;
       }
       $437 = $429 >> 31;
       $438 = $437 & 2;
       $439 = (($438) + 43)|0;
       $440 = $439&255;
       $441 = ((($$0511$i)) + -1|0);
       HEAP8[$441>>0] = $440;
       $442 = (($$0235) + 15)|0;
       $443 = $442&255;
       $444 = ((($$0511$i)) + -2|0);
       HEAP8[$444>>0] = $443;
       $notrhs$i = ($$0254|0)<(1);
       $445 = $$1263$ & 8;
       $446 = ($445|0)==(0);
       $$0524$i = $7;$$2473$i = $$1472$i;
       while(1) {
        $447 = (~~(($$2473$i)));
        $448 = (29676 + ($447)|0);
        $449 = HEAP8[$448>>0]|0;
        $450 = $449&255;
        $451 = $450 | $410;
        $452 = $451&255;
        $453 = ((($$0524$i)) + 1|0);
        HEAP8[$$0524$i>>0] = $452;
        $454 = (+($447|0));
        $455 = $$2473$i - $454;
        $456 = $455 * 16.0;
        $457 = $453;
        $458 = (($457) - ($18))|0;
        $459 = ($458|0)==(1);
        do {
         if ($459) {
          $notlhs$i = $456 == 0.0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $446 & $or$cond3$not$i;
          if ($or$cond$i) {
           $$1525$i = $453;
           break;
          }
          $460 = ((($$0524$i)) + 2|0);
          HEAP8[$453>>0] = 46;
          $$1525$i = $460;
         } else {
          $$1525$i = $453;
         }
        } while(0);
        $461 = $456 != 0.0;
        if ($461) {
         $$0524$i = $$1525$i;$$2473$i = $456;
        } else {
         break;
        }
       }
       $462 = ($$0254|0)!=(0);
       $$pre700$i = $$1525$i;
       $463 = (($24) + ($$pre700$i))|0;
       $464 = ($463|0)<($$0254|0);
       $or$cond412 = $462 & $464;
       $465 = $444;
       $466 = (($25) + ($$0254))|0;
       $467 = (($466) - ($465))|0;
       $468 = (($23) - ($465))|0;
       $469 = (($468) + ($$pre700$i))|0;
       $$0526$i = $or$cond412 ? $467 : $469;
       $470 = (($$0526$i) + ($413))|0;
       _pad($0,32,$$1260,$470,$$1263$);
       $471 = HEAP32[$0>>2]|0;
       $472 = $471 & 32;
       $473 = ($472|0)==(0);
       if ($473) {
        (___fwritex($$0522$$i,$413,$0)|0);
       }
       $474 = $$1263$ ^ 65536;
       _pad($0,48,$$1260,$470,$474);
       $475 = (($$pre700$i) - ($18))|0;
       $476 = HEAP32[$0>>2]|0;
       $477 = $476 & 32;
       $478 = ($477|0)==(0);
       if ($478) {
        (___fwritex($7,$475,$0)|0);
       }
       $479 = (($22) - ($465))|0;
       $sum = (($475) + ($479))|0;
       $480 = (($$0526$i) - ($sum))|0;
       _pad($0,48,$480,0,0);
       $481 = HEAP32[$0>>2]|0;
       $482 = $481 & 32;
       $483 = ($482|0)==(0);
       if ($483) {
        (___fwritex($444,$479,$0)|0);
       }
       $484 = $$1263$ ^ 8192;
       _pad($0,32,$$1260,$470,$484);
       $485 = ($470|0)<($$1260|0);
       $$537$i = $485 ? $$1260 : $470;
       $$0470$i = $$537$i;
       break;
      }
      $486 = ($$0254|0)<(0);
      $$538$i = $486 ? 6 : $$0254;
      if ($405) {
       $487 = $404 * 268435456.0;
       $488 = HEAP32[$6>>2]|0;
       $489 = (($488) + -28)|0;
       HEAP32[$6>>2] = $489;
       $$3$i = $487;$$pr$i = $489;
      } else {
       $$pre697$i = HEAP32[$6>>2]|0;
       $$3$i = $404;$$pr$i = $$pre697$i;
      }
      $490 = ($$pr$i|0)<(0);
      $$554$i = $490 ? $5 : $26;
      $$0498$i = $$554$i;$$4$i = $$3$i;
      while(1) {
       $491 = (~~(($$4$i))>>>0);
       HEAP32[$$0498$i>>2] = $491;
       $492 = ((($$0498$i)) + 4|0);
       $493 = (+($491>>>0));
       $494 = $$4$i - $493;
       $495 = $494 * 1.0E+9;
       $496 = $495 != 0.0;
       if ($496) {
        $$0498$i = $492;$$4$i = $495;
       } else {
        break;
       }
      }
      $497 = ($$pr$i|0)>(0);
      if ($497) {
       $$1482671$i = $$554$i;$$1499670$i = $492;$498 = $$pr$i;
       while(1) {
        $499 = ($498|0)>(29);
        $500 = $499 ? 29 : $498;
        $$0488663$i = ((($$1499670$i)) + -4|0);
        $501 = ($$0488663$i>>>0)<($$1482671$i>>>0);
        do {
         if ($501) {
          $$2483$ph$i = $$1482671$i;
         } else {
          $$0488665$i = $$0488663$i;$$0497664$i = 0;
          while(1) {
           $502 = HEAP32[$$0488665$i>>2]|0;
           $503 = (_bitshift64Shl(($502|0),0,($500|0))|0);
           $504 = tempRet0;
           $505 = (_i64Add(($503|0),($504|0),($$0497664$i|0),0)|0);
           $506 = tempRet0;
           $507 = (___uremdi3(($505|0),($506|0),1000000000,0)|0);
           $508 = tempRet0;
           HEAP32[$$0488665$i>>2] = $507;
           $509 = (___udivdi3(($505|0),($506|0),1000000000,0)|0);
           $510 = tempRet0;
           $$0488$i = ((($$0488665$i)) + -4|0);
           $511 = ($$0488$i>>>0)<($$1482671$i>>>0);
           if ($511) {
            break;
           } else {
            $$0488665$i = $$0488$i;$$0497664$i = $509;
           }
          }
          $512 = ($509|0)==(0);
          if ($512) {
           $$2483$ph$i = $$1482671$i;
           break;
          }
          $513 = ((($$1482671$i)) + -4|0);
          HEAP32[$513>>2] = $509;
          $$2483$ph$i = $513;
         }
        } while(0);
        $$2500$i = $$1499670$i;
        while(1) {
         $514 = ($$2500$i>>>0)>($$2483$ph$i>>>0);
         if (!($514)) {
          break;
         }
         $515 = ((($$2500$i)) + -4|0);
         $516 = HEAP32[$515>>2]|0;
         $517 = ($516|0)==(0);
         if ($517) {
          $$2500$i = $515;
         } else {
          break;
         }
        }
        $518 = HEAP32[$6>>2]|0;
        $519 = (($518) - ($500))|0;
        HEAP32[$6>>2] = $519;
        $520 = ($519|0)>(0);
        if ($520) {
         $$1482671$i = $$2483$ph$i;$$1499670$i = $$2500$i;$498 = $519;
        } else {
         $$1482$lcssa$i = $$2483$ph$i;$$1499$lcssa$i = $$2500$i;$$pr571$i = $519;
         break;
        }
       }
      } else {
       $$1482$lcssa$i = $$554$i;$$1499$lcssa$i = $492;$$pr571$i = $$pr$i;
      }
      $521 = ($$pr571$i|0)<(0);
      if ($521) {
       $522 = (($$538$i) + 25)|0;
       $523 = (($522|0) / 9)&-1;
       $524 = (($523) + 1)|0;
       $525 = ($408|0)==(102);
       $$3484658$i = $$1482$lcssa$i;$$3501657$i = $$1499$lcssa$i;$527 = $$pr571$i;
       while(1) {
        $526 = (0 - ($527))|0;
        $528 = ($526|0)>(9);
        $529 = $528 ? 9 : $526;
        $530 = ($$3484658$i>>>0)<($$3501657$i>>>0);
        do {
         if ($530) {
          $534 = 1 << $529;
          $535 = (($534) + -1)|0;
          $536 = 1000000000 >>> $529;
          $$0487652$i = 0;$$1489651$i = $$3484658$i;
          while(1) {
           $537 = HEAP32[$$1489651$i>>2]|0;
           $538 = $537 & $535;
           $539 = $537 >>> $529;
           $540 = (($539) + ($$0487652$i))|0;
           HEAP32[$$1489651$i>>2] = $540;
           $541 = Math_imul($538, $536)|0;
           $542 = ((($$1489651$i)) + 4|0);
           $543 = ($542>>>0)<($$3501657$i>>>0);
           if ($543) {
            $$0487652$i = $541;$$1489651$i = $542;
           } else {
            break;
           }
          }
          $544 = HEAP32[$$3484658$i>>2]|0;
          $545 = ($544|0)==(0);
          $546 = ((($$3484658$i)) + 4|0);
          $$$3484$i = $545 ? $546 : $$3484658$i;
          $547 = ($541|0)==(0);
          if ($547) {
           $$$3484706$i = $$$3484$i;$$4502$i = $$3501657$i;
           break;
          }
          $548 = ((($$3501657$i)) + 4|0);
          HEAP32[$$3501657$i>>2] = $541;
          $$$3484706$i = $$$3484$i;$$4502$i = $548;
         } else {
          $531 = HEAP32[$$3484658$i>>2]|0;
          $532 = ($531|0)==(0);
          $533 = ((($$3484658$i)) + 4|0);
          $$$3484705$i = $532 ? $533 : $$3484658$i;
          $$$3484706$i = $$$3484705$i;$$4502$i = $$3501657$i;
         }
        } while(0);
        $549 = $525 ? $$554$i : $$$3484706$i;
        $550 = $$4502$i;
        $551 = $549;
        $552 = (($550) - ($551))|0;
        $553 = $552 >> 2;
        $554 = ($553|0)>($524|0);
        $555 = (($549) + ($524<<2)|0);
        $$$4502$i = $554 ? $555 : $$4502$i;
        $556 = HEAP32[$6>>2]|0;
        $557 = (($556) + ($529))|0;
        HEAP32[$6>>2] = $557;
        $558 = ($557|0)<(0);
        if ($558) {
         $$3484658$i = $$$3484706$i;$$3501657$i = $$$4502$i;$527 = $557;
        } else {
         $$3484$lcssa$i = $$$3484706$i;$$3501$lcssa$i = $$$4502$i;
         break;
        }
       }
      } else {
       $$3484$lcssa$i = $$1482$lcssa$i;$$3501$lcssa$i = $$1499$lcssa$i;
      }
      $559 = ($$3484$lcssa$i>>>0)<($$3501$lcssa$i>>>0);
      $560 = $$554$i;
      do {
       if ($559) {
        $561 = $$3484$lcssa$i;
        $562 = (($560) - ($561))|0;
        $563 = $562 >> 2;
        $564 = ($563*9)|0;
        $565 = HEAP32[$$3484$lcssa$i>>2]|0;
        $566 = ($565>>>0)<(10);
        if ($566) {
         $$1515$i = $564;
         break;
        } else {
         $$0514647$i = $564;$$0531646$i = 10;
        }
        while(1) {
         $567 = ($$0531646$i*10)|0;
         $568 = (($$0514647$i) + 1)|0;
         $569 = ($565>>>0)<($567>>>0);
         if ($569) {
          $$1515$i = $568;
          break;
         } else {
          $$0514647$i = $568;$$0531646$i = $567;
         }
        }
       } else {
        $$1515$i = 0;
       }
      } while(0);
      $570 = ($408|0)!=(102);
      $571 = $570 ? $$1515$i : 0;
      $572 = (($$538$i) - ($571))|0;
      $573 = ($408|0)==(103);
      $574 = ($$538$i|0)!=(0);
      $575 = $574 & $573;
      $$neg$i = $575 << 31 >> 31;
      $576 = (($572) + ($$neg$i))|0;
      $577 = $$3501$lcssa$i;
      $578 = (($577) - ($560))|0;
      $579 = $578 >> 2;
      $580 = ($579*9)|0;
      $581 = (($580) + -9)|0;
      $582 = ($576|0)<($581|0);
      if ($582) {
       $583 = ((($$554$i)) + 4|0);
       $584 = (($576) + 9216)|0;
       $585 = (($584|0) / 9)&-1;
       $586 = (($585) + -1024)|0;
       $587 = (($583) + ($586<<2)|0);
       $588 = (($584|0) % 9)&-1;
       $$0528639$i = (($588) + 1)|0;
       $589 = ($$0528639$i|0)<(9);
       if ($589) {
        $$0528641$i = $$0528639$i;$$1532640$i = 10;
        while(1) {
         $590 = ($$1532640$i*10)|0;
         $$0528$i = (($$0528641$i) + 1)|0;
         $exitcond$i = ($$0528$i|0)==(9);
         if ($exitcond$i) {
          $$1532$lcssa$i = $590;
          break;
         } else {
          $$0528641$i = $$0528$i;$$1532640$i = $590;
         }
        }
       } else {
        $$1532$lcssa$i = 10;
       }
       $591 = HEAP32[$587>>2]|0;
       $592 = (($591>>>0) % ($$1532$lcssa$i>>>0))&-1;
       $593 = ($592|0)==(0);
       $594 = ((($587)) + 4|0);
       $595 = ($594|0)==($$3501$lcssa$i|0);
       $or$cond540$i = $595 & $593;
       do {
        if ($or$cond540$i) {
         $$4492$i = $587;$$4518$i = $$1515$i;$$8$i = $$3484$lcssa$i;
        } else {
         $596 = (($591>>>0) / ($$1532$lcssa$i>>>0))&-1;
         $597 = $596 & 1;
         $598 = ($597|0)==(0);
         $$541$i = $598 ? 9007199254740992.0 : 9007199254740994.0;
         $599 = (($$1532$lcssa$i|0) / 2)&-1;
         $600 = ($592>>>0)<($599>>>0);
         if ($600) {
          $$0466$i = 0.5;
         } else {
          $601 = ($592|0)==($599|0);
          $or$cond543$i = $595 & $601;
          $$557$i = $or$cond543$i ? 1.0 : 1.5;
          $$0466$i = $$557$i;
         }
         $602 = ($$0520$i|0)==(0);
         do {
          if ($602) {
           $$1467$i = $$0466$i;$$1469$i = $$541$i;
          } else {
           $603 = HEAP8[$$0522$i>>0]|0;
           $604 = ($603<<24>>24)==(45);
           if (!($604)) {
            $$1467$i = $$0466$i;$$1469$i = $$541$i;
            break;
           }
           $605 = -$$541$i;
           $606 = -$$0466$i;
           $$1467$i = $606;$$1469$i = $605;
          }
         } while(0);
         $607 = (($591) - ($592))|0;
         HEAP32[$587>>2] = $607;
         $608 = $$1469$i + $$1467$i;
         $609 = $608 != $$1469$i;
         if (!($609)) {
          $$4492$i = $587;$$4518$i = $$1515$i;$$8$i = $$3484$lcssa$i;
          break;
         }
         $610 = (($607) + ($$1532$lcssa$i))|0;
         HEAP32[$587>>2] = $610;
         $611 = ($610>>>0)>(999999999);
         if ($611) {
          $$2490632$i = $587;$$5486633$i = $$3484$lcssa$i;
          while(1) {
           $612 = ((($$2490632$i)) + -4|0);
           HEAP32[$$2490632$i>>2] = 0;
           $613 = ($612>>>0)<($$5486633$i>>>0);
           if ($613) {
            $614 = ((($$5486633$i)) + -4|0);
            HEAP32[$614>>2] = 0;
            $$6$i = $614;
           } else {
            $$6$i = $$5486633$i;
           }
           $615 = HEAP32[$612>>2]|0;
           $616 = (($615) + 1)|0;
           HEAP32[$612>>2] = $616;
           $617 = ($616>>>0)>(999999999);
           if ($617) {
            $$2490632$i = $612;$$5486633$i = $$6$i;
           } else {
            $$2490$lcssa$i = $612;$$5486$lcssa$i = $$6$i;
            break;
           }
          }
         } else {
          $$2490$lcssa$i = $587;$$5486$lcssa$i = $$3484$lcssa$i;
         }
         $618 = $$5486$lcssa$i;
         $619 = (($560) - ($618))|0;
         $620 = $619 >> 2;
         $621 = ($620*9)|0;
         $622 = HEAP32[$$5486$lcssa$i>>2]|0;
         $623 = ($622>>>0)<(10);
         if ($623) {
          $$4492$i = $$2490$lcssa$i;$$4518$i = $621;$$8$i = $$5486$lcssa$i;
          break;
         } else {
          $$2516628$i = $621;$$2533627$i = 10;
         }
         while(1) {
          $624 = ($$2533627$i*10)|0;
          $625 = (($$2516628$i) + 1)|0;
          $626 = ($622>>>0)<($624>>>0);
          if ($626) {
           $$4492$i = $$2490$lcssa$i;$$4518$i = $625;$$8$i = $$5486$lcssa$i;
           break;
          } else {
           $$2516628$i = $625;$$2533627$i = $624;
          }
         }
        }
       } while(0);
       $627 = ((($$4492$i)) + 4|0);
       $628 = ($$3501$lcssa$i>>>0)>($627>>>0);
       $$$3501$i = $628 ? $627 : $$3501$lcssa$i;
       $$5519$ph$i = $$4518$i;$$7505$ph$i = $$$3501$i;$$9$ph$i = $$8$i;
      } else {
       $$5519$ph$i = $$1515$i;$$7505$ph$i = $$3501$lcssa$i;$$9$ph$i = $$3484$lcssa$i;
      }
      $629 = (0 - ($$5519$ph$i))|0;
      $$7505$i = $$7505$ph$i;
      while(1) {
       $630 = ($$7505$i>>>0)>($$9$ph$i>>>0);
       if (!($630)) {
        $$lcssa683$i = 0;
        break;
       }
       $631 = ((($$7505$i)) + -4|0);
       $632 = HEAP32[$631>>2]|0;
       $633 = ($632|0)==(0);
       if ($633) {
        $$7505$i = $631;
       } else {
        $$lcssa683$i = 1;
        break;
       }
      }
      do {
       if ($573) {
        $634 = $574&1;
        $635 = $634 ^ 1;
        $$538$$i = (($635) + ($$538$i))|0;
        $636 = ($$538$$i|0)>($$5519$ph$i|0);
        $637 = ($$5519$ph$i|0)>(-5);
        $or$cond6$i = $636 & $637;
        if ($or$cond6$i) {
         $638 = (($$0235) + -1)|0;
         $$neg572$i = (($$538$$i) + -1)|0;
         $639 = (($$neg572$i) - ($$5519$ph$i))|0;
         $$0479$i = $638;$$2476$i = $639;
        } else {
         $640 = (($$0235) + -2)|0;
         $641 = (($$538$$i) + -1)|0;
         $$0479$i = $640;$$2476$i = $641;
        }
        $642 = $$1263$ & 8;
        $643 = ($642|0)==(0);
        if (!($643)) {
         $$1480$i = $$0479$i;$$3477$i = $$2476$i;$$pre$phi704$iZ2D = $642;
         break;
        }
        do {
         if ($$lcssa683$i) {
          $644 = ((($$7505$i)) + -4|0);
          $645 = HEAP32[$644>>2]|0;
          $646 = ($645|0)==(0);
          if ($646) {
           $$2530$i = 9;
           break;
          }
          $647 = (($645>>>0) % 10)&-1;
          $648 = ($647|0)==(0);
          if ($648) {
           $$1529624$i = 0;$$3534623$i = 10;
          } else {
           $$2530$i = 0;
           break;
          }
          while(1) {
           $649 = ($$3534623$i*10)|0;
           $650 = (($$1529624$i) + 1)|0;
           $651 = (($645>>>0) % ($649>>>0))&-1;
           $652 = ($651|0)==(0);
           if ($652) {
            $$1529624$i = $650;$$3534623$i = $649;
           } else {
            $$2530$i = $650;
            break;
           }
          }
         } else {
          $$2530$i = 9;
         }
        } while(0);
        $653 = $$0479$i | 32;
        $654 = ($653|0)==(102);
        $655 = $$7505$i;
        $656 = (($655) - ($560))|0;
        $657 = $656 >> 2;
        $658 = ($657*9)|0;
        $659 = (($658) + -9)|0;
        if ($654) {
         $660 = (($659) - ($$2530$i))|0;
         $661 = ($660|0)<(0);
         $$544$i = $661 ? 0 : $660;
         $662 = ($$2476$i|0)<($$544$i|0);
         $$2476$$545$i = $662 ? $$2476$i : $$544$i;
         $$1480$i = $$0479$i;$$3477$i = $$2476$$545$i;$$pre$phi704$iZ2D = 0;
         break;
        } else {
         $663 = (($659) + ($$5519$ph$i))|0;
         $664 = (($663) - ($$2530$i))|0;
         $665 = ($664|0)<(0);
         $$546$i = $665 ? 0 : $664;
         $666 = ($$2476$i|0)<($$546$i|0);
         $$2476$$547$i = $666 ? $$2476$i : $$546$i;
         $$1480$i = $$0479$i;$$3477$i = $$2476$$547$i;$$pre$phi704$iZ2D = 0;
         break;
        }
       } else {
        $$pre703$i = $$1263$ & 8;
        $$1480$i = $$0235;$$3477$i = $$538$i;$$pre$phi704$iZ2D = $$pre703$i;
       }
      } while(0);
      $667 = $$3477$i | $$pre$phi704$iZ2D;
      $668 = ($667|0)!=(0);
      $669 = $668&1;
      $670 = $$1480$i | 32;
      $671 = ($670|0)==(102);
      if ($671) {
       $672 = ($$5519$ph$i|0)>(0);
       $673 = $672 ? $$5519$ph$i : 0;
       $$2513$i = 0;$$pn$i = $673;
      } else {
       $674 = ($$5519$ph$i|0)<(0);
       $675 = $674 ? $629 : $$5519$ph$i;
       $676 = ($675|0)<(0);
       $677 = $676 << 31 >> 31;
       $678 = (_fmt_u($675,$677,$20)|0);
       $679 = $678;
       $680 = (($22) - ($679))|0;
       $681 = ($680|0)<(2);
       if ($681) {
        $$1512617$i = $678;
        while(1) {
         $682 = ((($$1512617$i)) + -1|0);
         HEAP8[$682>>0] = 48;
         $683 = $682;
         $684 = (($22) - ($683))|0;
         $685 = ($684|0)<(2);
         if ($685) {
          $$1512617$i = $682;
         } else {
          $$1512$lcssa$i = $682;
          break;
         }
        }
       } else {
        $$1512$lcssa$i = $678;
       }
       $686 = $$5519$ph$i >> 31;
       $687 = $686 & 2;
       $688 = (($687) + 43)|0;
       $689 = $688&255;
       $690 = ((($$1512$lcssa$i)) + -1|0);
       HEAP8[$690>>0] = $689;
       $691 = $$1480$i&255;
       $692 = ((($$1512$lcssa$i)) + -2|0);
       HEAP8[$692>>0] = $691;
       $693 = $692;
       $694 = (($22) - ($693))|0;
       $$2513$i = $692;$$pn$i = $694;
      }
      $695 = (($$0520$i) + 1)|0;
      $696 = (($695) + ($$3477$i))|0;
      $$1527$i = (($696) + ($669))|0;
      $697 = (($$1527$i) + ($$pn$i))|0;
      _pad($0,32,$$1260,$697,$$1263$);
      $698 = HEAP32[$0>>2]|0;
      $699 = $698 & 32;
      $700 = ($699|0)==(0);
      if ($700) {
       (___fwritex($$0522$i,$$0520$i,$0)|0);
      }
      $701 = $$1263$ ^ 65536;
      _pad($0,48,$$1260,$697,$701);
      do {
       if ($671) {
        $702 = ($$9$ph$i>>>0)>($$554$i>>>0);
        $$0496$$9$i = $702 ? $$554$i : $$9$ph$i;
        $$5493606$i = $$0496$$9$i;
        while(1) {
         $703 = HEAP32[$$5493606$i>>2]|0;
         $704 = (_fmt_u($703,0,$27)|0);
         $705 = ($$5493606$i|0)==($$0496$$9$i|0);
         do {
          if ($705) {
           $711 = ($704|0)==($27|0);
           if (!($711)) {
            $$1465$i = $704;
            break;
           }
           HEAP8[$29>>0] = 48;
           $$1465$i = $29;
          } else {
           $706 = ($704>>>0)>($7>>>0);
           if (!($706)) {
            $$1465$i = $704;
            break;
           }
           $707 = $704;
           $708 = (($707) - ($18))|0;
           _memset(($7|0),48,($708|0))|0;
           $$0464603$i = $704;
           while(1) {
            $709 = ((($$0464603$i)) + -1|0);
            $710 = ($709>>>0)>($7>>>0);
            if ($710) {
             $$0464603$i = $709;
            } else {
             $$1465$i = $709;
             break;
            }
           }
          }
         } while(0);
         $712 = HEAP32[$0>>2]|0;
         $713 = $712 & 32;
         $714 = ($713|0)==(0);
         if ($714) {
          $715 = $$1465$i;
          $716 = (($28) - ($715))|0;
          (___fwritex($$1465$i,$716,$0)|0);
         }
         $717 = ((($$5493606$i)) + 4|0);
         $718 = ($717>>>0)>($$554$i>>>0);
         if ($718) {
          break;
         } else {
          $$5493606$i = $717;
         }
        }
        $719 = ($667|0)==(0);
        do {
         if (!($719)) {
          $720 = HEAP32[$0>>2]|0;
          $721 = $720 & 32;
          $722 = ($721|0)==(0);
          if (!($722)) {
           break;
          }
          (___fwritex(29740,1,$0)|0);
         }
        } while(0);
        $723 = ($717>>>0)<($$7505$i>>>0);
        $724 = ($$3477$i|0)>(0);
        $725 = $724 & $723;
        if ($725) {
         $$4478600$i = $$3477$i;$$6494599$i = $717;
         while(1) {
          $726 = HEAP32[$$6494599$i>>2]|0;
          $727 = (_fmt_u($726,0,$27)|0);
          $728 = ($727>>>0)>($7>>>0);
          if ($728) {
           $729 = $727;
           $730 = (($729) - ($18))|0;
           _memset(($7|0),48,($730|0))|0;
           $$0463594$i = $727;
           while(1) {
            $731 = ((($$0463594$i)) + -1|0);
            $732 = ($731>>>0)>($7>>>0);
            if ($732) {
             $$0463594$i = $731;
            } else {
             $$0463$lcssa$i = $731;
             break;
            }
           }
          } else {
           $$0463$lcssa$i = $727;
          }
          $733 = HEAP32[$0>>2]|0;
          $734 = $733 & 32;
          $735 = ($734|0)==(0);
          if ($735) {
           $736 = ($$4478600$i|0)>(9);
           $737 = $736 ? 9 : $$4478600$i;
           (___fwritex($$0463$lcssa$i,$737,$0)|0);
          }
          $738 = ((($$6494599$i)) + 4|0);
          $739 = (($$4478600$i) + -9)|0;
          $740 = ($738>>>0)<($$7505$i>>>0);
          $741 = ($$4478600$i|0)>(9);
          $742 = $741 & $740;
          if ($742) {
           $$4478600$i = $739;$$6494599$i = $738;
          } else {
           $$4478$lcssa$i = $739;
           break;
          }
         }
        } else {
         $$4478$lcssa$i = $$3477$i;
        }
        $743 = (($$4478$lcssa$i) + 9)|0;
        _pad($0,48,$743,9,0);
       } else {
        $744 = ((($$9$ph$i)) + 4|0);
        $$7505$$i = $$lcssa683$i ? $$7505$i : $744;
        $745 = ($$3477$i|0)>(-1);
        if ($745) {
         $746 = ($$pre$phi704$iZ2D|0)==(0);
         $$5611$i = $$3477$i;$$7495610$i = $$9$ph$i;
         while(1) {
          $747 = HEAP32[$$7495610$i>>2]|0;
          $748 = (_fmt_u($747,0,$27)|0);
          $749 = ($748|0)==($27|0);
          if ($749) {
           HEAP8[$29>>0] = 48;
           $$0$i = $29;
          } else {
           $$0$i = $748;
          }
          $750 = ($$7495610$i|0)==($$9$ph$i|0);
          do {
           if ($750) {
            $754 = ((($$0$i)) + 1|0);
            $755 = HEAP32[$0>>2]|0;
            $756 = $755 & 32;
            $757 = ($756|0)==(0);
            if ($757) {
             (___fwritex($$0$i,1,$0)|0);
            }
            $758 = ($$5611$i|0)<(1);
            $or$cond552$i = $746 & $758;
            if ($or$cond552$i) {
             $$2$i = $754;
             break;
            }
            $759 = HEAP32[$0>>2]|0;
            $760 = $759 & 32;
            $761 = ($760|0)==(0);
            if (!($761)) {
             $$2$i = $754;
             break;
            }
            (___fwritex(29740,1,$0)|0);
            $$2$i = $754;
           } else {
            $751 = ($$0$i>>>0)>($7>>>0);
            if (!($751)) {
             $$2$i = $$0$i;
             break;
            }
            $scevgep694$i = (($$0$i) + ($19)|0);
            $scevgep694695$i = $scevgep694$i;
            _memset(($7|0),48,($scevgep694695$i|0))|0;
            $$1607$i = $$0$i;
            while(1) {
             $752 = ((($$1607$i)) + -1|0);
             $753 = ($752>>>0)>($7>>>0);
             if ($753) {
              $$1607$i = $752;
             } else {
              $$2$i = $752;
              break;
             }
            }
           }
          } while(0);
          $762 = $$2$i;
          $763 = (($28) - ($762))|0;
          $764 = HEAP32[$0>>2]|0;
          $765 = $764 & 32;
          $766 = ($765|0)==(0);
          if ($766) {
           $767 = ($$5611$i|0)>($763|0);
           $768 = $767 ? $763 : $$5611$i;
           (___fwritex($$2$i,$768,$0)|0);
          }
          $769 = (($$5611$i) - ($763))|0;
          $770 = ((($$7495610$i)) + 4|0);
          $771 = ($770>>>0)<($$7505$$i>>>0);
          $772 = ($769|0)>(-1);
          $773 = $771 & $772;
          if ($773) {
           $$5611$i = $769;$$7495610$i = $770;
          } else {
           $$5$lcssa$i = $769;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$3477$i;
        }
        $774 = (($$5$lcssa$i) + 18)|0;
        _pad($0,48,$774,18,0);
        $775 = HEAP32[$0>>2]|0;
        $776 = $775 & 32;
        $777 = ($776|0)==(0);
        if (!($777)) {
         break;
        }
        $778 = $$2513$i;
        $779 = (($22) - ($778))|0;
        (___fwritex($$2513$i,$779,$0)|0);
       }
      } while(0);
      $780 = $$1263$ ^ 8192;
      _pad($0,32,$$1260,$697,$780);
      $781 = ($697|0)<($$1260|0);
      $$553$i = $781 ? $$1260 : $697;
      $$0470$i = $$553$i;
     } else {
      $388 = $$0235 & 32;
      $389 = ($388|0)!=(0);
      $390 = $389 ? 29728 : 29732;
      $391 = ($$0471$i != $$0471$i) | (0.0 != 0.0);
      $392 = $389 ? 31919 : 29736;
      $$1521$i = $391 ? 0 : $$0520$i;
      $$0510$i = $391 ? $392 : $390;
      $393 = (($$1521$i) + 3)|0;
      _pad($0,32,$$1260,$393,$187);
      $394 = HEAP32[$0>>2]|0;
      $395 = $394 & 32;
      $396 = ($395|0)==(0);
      if ($396) {
       (___fwritex($$0522$i,$$1521$i,$0)|0);
       $$pre$i = HEAP32[$0>>2]|0;
       $398 = $$pre$i;
      } else {
       $398 = $394;
      }
      $397 = $398 & 32;
      $399 = ($397|0)==(0);
      if ($399) {
       (___fwritex($$0510$i,3,$0)|0);
      }
      $400 = $$1263$ ^ 8192;
      _pad($0,32,$$1260,$393,$400);
      $401 = ($393|0)<($$1260|0);
      $402 = $401 ? $$1260 : $393;
      $$0470$i = $402;
     }
    } while(0);
    $$0243 = $$0470$i;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
    continue L1;
    break;
   }
   default: {
    $$2 = $$0321;$$2234 = 0;$$2239 = 29692;$$2251 = $14;$$5 = $$0254;$$6268 = $$1263$;
   }
   }
  } while(0);
  L310: do {
   if ((label|0) == 63) {
    label = 0;
    $218 = $9;
    $219 = $218;
    $220 = HEAP32[$219>>2]|0;
    $221 = (($218) + 4)|0;
    $222 = $221;
    $223 = HEAP32[$222>>2]|0;
    $224 = $$1236 & 32;
    $225 = ($220|0)==(0);
    $226 = ($223|0)==(0);
    $227 = $225 & $226;
    if ($227) {
     $$05$lcssa$i = $14;$248 = 0;$250 = 0;
    } else {
     $$056$i = $14;$229 = $220;$236 = $223;
     while(1) {
      $228 = $229 & 15;
      $230 = (29676 + ($228)|0);
      $231 = HEAP8[$230>>0]|0;
      $232 = $231&255;
      $233 = $232 | $224;
      $234 = $233&255;
      $235 = ((($$056$i)) + -1|0);
      HEAP8[$235>>0] = $234;
      $237 = (_bitshift64Lshr(($229|0),($236|0),4)|0);
      $238 = tempRet0;
      $239 = ($237|0)==(0);
      $240 = ($238|0)==(0);
      $241 = $239 & $240;
      if ($241) {
       break;
      } else {
       $$056$i = $235;$229 = $237;$236 = $238;
      }
     }
     $242 = $9;
     $243 = $242;
     $244 = HEAP32[$243>>2]|0;
     $245 = (($242) + 4)|0;
     $246 = $245;
     $247 = HEAP32[$246>>2]|0;
     $$05$lcssa$i = $235;$248 = $244;$250 = $247;
    }
    $249 = ($248|0)==(0);
    $251 = ($250|0)==(0);
    $252 = $249 & $251;
    $253 = $$3265 & 8;
    $254 = ($253|0)==(0);
    $or$cond282 = $254 | $252;
    $255 = $$1236 >> 4;
    $256 = (29692 + ($255)|0);
    $$332 = $or$cond282 ? 29692 : $256;
    $$333 = $or$cond282 ? 0 : 2;
    $$0228 = $$05$lcssa$i;$$1233 = $$333;$$1238 = $$332;$$2256 = $$1255;$$4266 = $$3265;
    label = 76;
   }
   else if ((label|0) == 75) {
    label = 0;
    $302 = (_fmt_u($300,$301,$14)|0);
    $$0228 = $302;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $$1263$;
    label = 76;
   }
   else if ((label|0) == 81) {
    label = 0;
    $334 = (_memchr($$1,0,$$0254)|0);
    $335 = ($334|0)==(0|0);
    $336 = $334;
    $337 = $$1;
    $338 = (($336) - ($337))|0;
    $339 = (($$1) + ($$0254)|0);
    $$3257 = $335 ? $$0254 : $338;
    $$1250 = $335 ? $339 : $334;
    $$2 = $$1;$$2234 = 0;$$2239 = 29692;$$2251 = $$1250;$$5 = $$3257;$$6268 = $187;
   }
   else if ((label|0) == 85) {
    label = 0;
    $$0229396 = $809;$$0240395 = 0;$$1244394 = 0;
    while(1) {
     $347 = HEAP32[$$0229396>>2]|0;
     $348 = ($347|0)==(0);
     if ($348) {
      $$0240$lcssa = $$0240395;$$2245 = $$1244394;
      break;
     }
     $349 = (_wctomb($12,$347)|0);
     $350 = ($349|0)<(0);
     $351 = (($$4258458) - ($$0240395))|0;
     $352 = ($349>>>0)>($351>>>0);
     $or$cond285 = $350 | $352;
     if ($or$cond285) {
      $$0240$lcssa = $$0240395;$$2245 = $349;
      break;
     }
     $353 = ((($$0229396)) + 4|0);
     $354 = (($349) + ($$0240395))|0;
     $355 = ($$4258458>>>0)>($354>>>0);
     if ($355) {
      $$0229396 = $353;$$0240395 = $354;$$1244394 = $349;
     } else {
      $$0240$lcssa = $354;$$2245 = $349;
      break;
     }
    }
    $356 = ($$2245|0)<(0);
    if ($356) {
     $$0 = -1;
     break L1;
    }
    _pad($0,32,$$1260,$$0240$lcssa,$$1263$);
    $357 = ($$0240$lcssa|0)==(0);
    if ($357) {
     $$0240$lcssa460 = 0;
     label = 96;
    } else {
     $$1230407 = $809;$$1241406 = 0;
     while(1) {
      $358 = HEAP32[$$1230407>>2]|0;
      $359 = ($358|0)==(0);
      if ($359) {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break L310;
      }
      $360 = ((($$1230407)) + 4|0);
      $361 = (_wctomb($12,$358)|0);
      $362 = (($361) + ($$1241406))|0;
      $363 = ($362|0)>($$0240$lcssa|0);
      if ($363) {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break L310;
      }
      $364 = HEAP32[$0>>2]|0;
      $365 = $364 & 32;
      $366 = ($365|0)==(0);
      if ($366) {
       (___fwritex($12,$361,$0)|0);
      }
      $367 = ($362>>>0)<($$0240$lcssa>>>0);
      if ($367) {
       $$1230407 = $360;$$1241406 = $362;
      } else {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 96) {
   label = 0;
   $368 = $$1263$ ^ 8192;
   _pad($0,32,$$1260,$$0240$lcssa460,$368);
   $369 = ($$1260|0)>($$0240$lcssa460|0);
   $370 = $369 ? $$1260 : $$0240$lcssa460;
   $$0243 = $370;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
   continue;
  }
  if ((label|0) == 76) {
   label = 0;
   $303 = ($$2256|0)>(-1);
   $304 = $$4266 & -65537;
   $$$4266 = $303 ? $304 : $$4266;
   $305 = $9;
   $306 = $305;
   $307 = HEAP32[$306>>2]|0;
   $308 = (($305) + 4)|0;
   $309 = $308;
   $310 = HEAP32[$309>>2]|0;
   $311 = ($307|0)!=(0);
   $312 = ($310|0)!=(0);
   $313 = $311 | $312;
   $314 = ($$2256|0)!=(0);
   $or$cond = $314 | $313;
   if ($or$cond) {
    $315 = $$0228;
    $316 = (($15) - ($315))|0;
    $317 = $313&1;
    $318 = $317 ^ 1;
    $319 = (($318) + ($316))|0;
    $320 = ($$2256|0)>($319|0);
    $$2256$ = $320 ? $$2256 : $319;
    $$2 = $$0228;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $14;$$5 = $$2256$;$$6268 = $$$4266;
   } else {
    $$2 = $14;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $14;$$5 = 0;$$6268 = $$$4266;
   }
  }
  $782 = $$2251;
  $783 = $$2;
  $784 = (($782) - ($783))|0;
  $785 = ($$5|0)<($784|0);
  $$$5 = $785 ? $784 : $$5;
  $786 = (($$$5) + ($$2234))|0;
  $787 = ($$1260|0)<($786|0);
  $$2261 = $787 ? $786 : $$1260;
  _pad($0,32,$$2261,$786,$$6268);
  $788 = HEAP32[$0>>2]|0;
  $789 = $788 & 32;
  $790 = ($789|0)==(0);
  if ($790) {
   (___fwritex($$2239,$$2234,$0)|0);
  }
  $791 = $$6268 ^ 65536;
  _pad($0,48,$$2261,$786,$791);
  _pad($0,48,$$$5,$784,0);
  $792 = HEAP32[$0>>2]|0;
  $793 = $792 & 32;
  $794 = ($793|0)==(0);
  if ($794) {
   (___fwritex($$2,$784,$0)|0);
  }
  $795 = $$6268 ^ 8192;
  _pad($0,32,$$2261,$786,$795);
  $$0243 = $$2261;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
 }
 L345: do {
  if ((label|0) == 243) {
   $796 = ($0|0)==(0|0);
   if ($796) {
    $797 = ($$0269|0)==(0);
    if ($797) {
     $$0 = 0;
    } else {
     $$2242381 = 1;
     while(1) {
      $798 = (($4) + ($$2242381<<2)|0);
      $799 = HEAP32[$798>>2]|0;
      $800 = ($799|0)==(0);
      if ($800) {
       $$3379 = $$2242381;
       break;
      }
      $801 = (($3) + ($$2242381<<3)|0);
      _pop_arg_375($801,$799,$2);
      $802 = (($$2242381) + 1)|0;
      $803 = ($802|0)<(10);
      if ($803) {
       $$2242381 = $802;
      } else {
       $$0 = 1;
       break L345;
      }
     }
     while(1) {
      $806 = (($4) + ($$3379<<2)|0);
      $807 = HEAP32[$806>>2]|0;
      $808 = ($807|0)==(0);
      $804 = (($$3379) + 1)|0;
      if (!($808)) {
       $$0 = -1;
       break L345;
      }
      $805 = ($804|0)<(10);
      if ($805) {
       $$3379 = $804;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$032 = 0, $$033 = 0, $$034 = 0, $$1 = 0, $$pre = 0, $$pre38 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$032 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 1023]($2,$0,$1)|0);
    $$032 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)>(-1);
   L10: do {
    if ($20) {
     $$0 = $1;
     while(1) {
      $21 = ($$0|0)==(0);
      if ($21) {
       $$033 = $1;$$034 = $0;$$1 = 0;$32 = $14;
       break L10;
      }
      $22 = (($$0) + -1)|0;
      $23 = (($0) + ($22)|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = ($24<<24>>24)==(10);
      if ($25) {
       break;
      } else {
       $$0 = $22;
      }
     }
     $26 = ((($2)) + 36|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_iiii[$27 & 1023]($2,$0,$$0)|0);
     $29 = ($28>>>0)<($$0>>>0);
     if ($29) {
      $$032 = $$0;
      break L5;
     }
     $30 = (($0) + ($$0)|0);
     $31 = (($1) - ($$0))|0;
     $$pre38 = HEAP32[$9>>2]|0;
     $$033 = $31;$$034 = $30;$$1 = $$0;$32 = $$pre38;
    } else {
     $$033 = $1;$$034 = $0;$$1 = 0;$32 = $14;
    }
   } while(0);
   _memcpy(($32|0),($$034|0),($$033|0))|0;
   $33 = HEAP32[$9>>2]|0;
   $34 = (($33) + ($$033)|0);
   HEAP32[$9>>2] = $34;
   $35 = (($$1) + ($$033))|0;
   $$032 = $35;
  }
 } while(0);
 return ($$032|0);
}
function _pop_arg_375($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___uremdi3(($8|0),($9|0),10,0)|0);
   $11 = tempRet0;
   $12 = $10 | 48;
   $13 = $12&255;
   $14 = ((($$0914)) + -1|0);
   HEAP8[$14>>0] = $13;
   $15 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $16 = tempRet0;
   $17 = ($9>>>0)>(9);
   $18 = ($8>>>0)>(4294967295);
   $19 = ($9|0)==(9);
   $20 = $19 & $18;
   $21 = $17 | $20;
   if ($21) {
    $$0914 = $14;$8 = $15;$9 = $16;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $15;$$09$lcssa = $14;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $22 = ($$010$lcssa$off0|0)==(0);
 if ($22) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $23 = (($$012>>>0) % 10)&-1;
   $24 = $23 | 48;
   $25 = $24&255;
   $26 = ((($$111)) + -1|0);
   HEAP8[$26>>0] = $25;
   $27 = (($$012>>>0) / 10)&-1;
   $28 = ($$012>>>0)<(10);
   if ($28) {
    $$1$lcssa = $26;
    break;
   } else {
    $$012 = $27;$$111 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $$011$lcssa = 0, $$01113 = 0, $$015 = 0, $$112 = 0, $$114 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$015 = 0;
 while(1) {
  $2 = (29742 + ($$015)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = ($4|0)==($0|0);
  if ($5) {
   label = 2;
   break;
  }
  $6 = (($$015) + 1)|0;
  $7 = ($6|0)==(87);
  if ($7) {
   $$01113 = 29830;$$114 = 87;
   label = 5;
   break;
  } else {
   $$015 = $6;
  }
 }
 if ((label|0) == 2) {
  $1 = ($$015|0)==(0);
  if ($1) {
   $$011$lcssa = 29830;
  } else {
   $$01113 = 29830;$$114 = $$015;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$112 = $$01113;
   while(1) {
    $8 = HEAP8[$$112>>0]|0;
    $9 = ($8<<24>>24)==(0);
    $10 = ((($$112)) + 1|0);
    if ($9) {
     break;
    } else {
     $$112 = $10;
    }
   }
   $11 = (($$114) + -1)|0;
   $12 = ($11|0)==(0);
   if ($12) {
    $$011$lcssa = $10;
    break;
   } else {
    $$01113 = $10;$$114 = $11;
    label = 5;
   }
  }
 }
 return ($$011$lcssa|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function _pad($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa16 = 0, $$012 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 do {
  if ($or$cond) {
   $9 = (($2) - ($3))|0;
   $10 = ($9>>>0)>(256);
   $11 = $10 ? 256 : $9;
   _memset(($5|0),($1|0),($11|0))|0;
   $12 = ($9>>>0)>(255);
   $13 = HEAP32[$0>>2]|0;
   $14 = $13 & 32;
   $15 = ($14|0)==(0);
   if ($12) {
    $16 = (($2) - ($3))|0;
    $$012 = $9;$23 = $13;$24 = $15;
    while(1) {
     if ($24) {
      (___fwritex($5,256,$0)|0);
      $$pre = HEAP32[$0>>2]|0;
      $20 = $$pre;
     } else {
      $20 = $23;
     }
     $17 = (($$012) + -256)|0;
     $18 = ($17>>>0)>(255);
     $19 = $20 & 32;
     $21 = ($19|0)==(0);
     if ($18) {
      $$012 = $17;$23 = $20;$24 = $21;
     } else {
      break;
     }
    }
    $22 = $16 & 255;
    if ($21) {
     $$0$lcssa16 = $22;
    } else {
     break;
    }
   } else {
    if ($15) {
     $$0$lcssa16 = $9;
    } else {
     break;
    }
   }
   (___fwritex($5,$$0$lcssa16,$0)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = ($1>>>0)<(2048);
   if ($6) {
    $7 = $1 >>> 6;
    $8 = $7 | 192;
    $9 = $8&255;
    $10 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $9;
    $11 = $1 & 63;
    $12 = $11 | 128;
    $13 = $12&255;
    HEAP8[$10>>0] = $13;
    $$0 = 2;
    break;
   }
   $14 = ($1>>>0)<(55296);
   $15 = $1 & -8192;
   $16 = ($15|0)==(57344);
   $or$cond = $14 | $16;
   if ($or$cond) {
    $17 = $1 >>> 12;
    $18 = $17 | 224;
    $19 = $18&255;
    $20 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $19;
    $21 = $1 >>> 6;
    $22 = $21 & 63;
    $23 = $22 | 128;
    $24 = $23&255;
    $25 = ((($0)) + 2|0);
    HEAP8[$20>>0] = $24;
    $26 = $1 & 63;
    $27 = $26 | 128;
    $28 = $27&255;
    HEAP8[$25>>0] = $28;
    $$0 = 3;
    break;
   }
   $29 = (($1) + -65536)|0;
   $30 = ($29>>>0)<(1048576);
   if ($30) {
    $31 = $1 >>> 18;
    $32 = $31 | 240;
    $33 = $32&255;
    $34 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $33;
    $35 = $1 >>> 12;
    $36 = $35 & 63;
    $37 = $36 | 128;
    $38 = $37&255;
    $39 = ((($0)) + 2|0);
    HEAP8[$34>>0] = $38;
    $40 = $1 >>> 6;
    $41 = $40 & 63;
    $42 = $41 | 128;
    $43 = $42&255;
    $44 = ((($0)) + 3|0);
    HEAP8[$39>>0] = $43;
    $45 = $1 & 63;
    $46 = $45 | 128;
    $47 = $46&255;
    HEAP8[$44>>0] = $47;
    $$0 = 4;
    break;
   } else {
    $48 = (___errno_location()|0);
    HEAP32[$48>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $14;
  $18 = ((($0)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + ($19)|0);
  $21 = ((($0)) + 16|0);
  HEAP32[$21>>2] = $20;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$cast = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ($7>>>0)>($2>>>0);
 $$ = $8 ? $2 : $7;
 $$cast = $6;
 _memcpy(($$cast|0),($1|0),($$|0))|0;
 $9 = HEAP32[$5>>2]|0;
 $10 = (($9) + ($$)|0);
 HEAP32[$5>>2] = $10;
 return ($2|0);
}
function _strtox($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $5 = sp;
 HEAP32[$5>>2] = 0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($5)) + 44|0);
 HEAP32[$7>>2] = $0;
 $8 = ($0|0)<(0|0);
 $9 = ((($0)) + 2147483647|0);
 $$sink = $8 ? (-1) : $9;
 $10 = ((($5)) + 8|0);
 HEAP32[$10>>2] = $$sink;
 $11 = ((($5)) + 76|0);
 HEAP32[$11>>2] = -1;
 ___shlim($5,0);
 $12 = (___intscan($5,$2,1,$3,$4)|0);
 $13 = tempRet0;
 $14 = ($1|0)==(0|0);
 if (!($14)) {
  $15 = ((($5)) + 108|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$6>>2]|0;
  $18 = HEAP32[$10>>2]|0;
  $19 = (($17) + ($16))|0;
  $20 = (($19) - ($18))|0;
  $21 = (($0) + ($20)|0);
  HEAP32[$1>>2] = $21;
 }
 tempRet0 = ($13);
 STACKTOP = sp;return ($12|0);
}
function ___shlim($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 104|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ((($0)) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($1|0)!=(0);
 $10 = ($7|0)>($1|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = $6;
  $12 = (($11) + ($1)|0);
  $13 = ((($0)) + 100|0);
  HEAP32[$13>>2] = $12;
 } else {
  $14 = ((($0)) + 100|0);
  HEAP32[$14>>2] = $4;
 }
 return;
}
function ___intscan($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0154222 = 0, $$0157 = 0, $$0157$ = 0, $$0159 = 0, $$1155188 = 0, $$1158 = 0, $$1160 = 0, $$1160169 = 0, $$1165 = 0, $$1165167 = 0, $$1165168 = 0, $$166 = 0, $$2156206 = 0, $$2161$be = 0, $$2161$lcssa = 0, $$3162$be = 0, $$3162$lcssa = 0, $$3162211 = 0, $$4163$be = 0, $$4163$lcssa = 0;
 var $$5$be = 0, $$6$be = 0, $$6$lcssa = 0, $$7$be = 0, $$7194 = 0, $$8 = 0, $$9$be = 0, $$lcssa = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond183 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($1>>>0)>(36);
 L1: do {
  if ($5) {
   $8 = (___errno_location()|0);
   HEAP32[$8>>2] = 22;
   $289 = 0;$290 = 0;
  } else {
   $6 = ((($0)) + 4|0);
   $7 = ((($0)) + 100|0);
   while(1) {
    $9 = HEAP32[$6>>2]|0;
    $10 = HEAP32[$7>>2]|0;
    $11 = ($9>>>0)<($10>>>0);
    if ($11) {
     $12 = ((($9)) + 1|0);
     HEAP32[$6>>2] = $12;
     $13 = HEAP8[$9>>0]|0;
     $14 = $13&255;
     $16 = $14;
    } else {
     $15 = (___shgetc($0)|0);
     $16 = $15;
    }
    $17 = (_isspace($16)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     break;
    }
   }
   $19 = ($16|0)==(45);
   L11: do {
    switch ($16|0) {
    case 43: case 45:  {
     $20 = $19 << 31 >> 31;
     $21 = HEAP32[$6>>2]|0;
     $22 = HEAP32[$7>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = ((($21)) + 1|0);
      HEAP32[$6>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $$0157 = $20;$$0159 = $26;
      break L11;
     } else {
      $27 = (___shgetc($0)|0);
      $$0157 = $20;$$0159 = $27;
      break L11;
     }
     break;
    }
    default: {
     $$0157 = 0;$$0159 = $16;
    }
    }
   } while(0);
   $28 = ($1|0)==(0);
   $29 = $1 | 16;
   $30 = ($29|0)==(16);
   $31 = ($$0159|0)==(48);
   $or$cond5 = $30 & $31;
   do {
    if ($or$cond5) {
     $32 = HEAP32[$6>>2]|0;
     $33 = HEAP32[$7>>2]|0;
     $34 = ($32>>>0)<($33>>>0);
     if ($34) {
      $35 = ((($32)) + 1|0);
      HEAP32[$6>>2] = $35;
      $36 = HEAP8[$32>>0]|0;
      $37 = $36&255;
      $40 = $37;
     } else {
      $38 = (___shgetc($0)|0);
      $40 = $38;
     }
     $39 = $40 | 32;
     $41 = ($39|0)==(120);
     if (!($41)) {
      if ($28) {
       $$1160169 = $40;$$1165168 = 8;
       label = 46;
       break;
      } else {
       $$1160 = $40;$$1165 = $1;
       label = 32;
       break;
      }
     }
     $42 = HEAP32[$6>>2]|0;
     $43 = HEAP32[$7>>2]|0;
     $44 = ($42>>>0)<($43>>>0);
     if ($44) {
      $45 = ((($42)) + 1|0);
      HEAP32[$6>>2] = $45;
      $46 = HEAP8[$42>>0]|0;
      $47 = $46&255;
      $50 = $47;
     } else {
      $48 = (___shgetc($0)|0);
      $50 = $48;
     }
     $49 = ((31635) + ($50)|0);
     $51 = HEAP8[$49>>0]|0;
     $52 = ($51&255)>(15);
     if ($52) {
      $53 = HEAP32[$7>>2]|0;
      $54 = ($53|0)==(0|0);
      if (!($54)) {
       $55 = HEAP32[$6>>2]|0;
       $56 = ((($55)) + -1|0);
       HEAP32[$6>>2] = $56;
      }
      $57 = ($2|0)==(0);
      if ($57) {
       ___shlim($0,0);
       $289 = 0;$290 = 0;
       break L1;
      }
      if ($54) {
       $289 = 0;$290 = 0;
       break L1;
      }
      $58 = HEAP32[$6>>2]|0;
      $59 = ((($58)) + -1|0);
      HEAP32[$6>>2] = $59;
      $289 = 0;$290 = 0;
      break L1;
     } else {
      $$1160169 = $50;$$1165168 = 16;
      label = 46;
     }
    } else {
     $$166 = $28 ? 10 : $1;
     $60 = ((31635) + ($$0159)|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61&255;
     $63 = ($62>>>0)<($$166>>>0);
     if ($63) {
      $$1160 = $$0159;$$1165 = $$166;
      label = 32;
     } else {
      $64 = HEAP32[$7>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $66 = HEAP32[$6>>2]|0;
       $67 = ((($66)) + -1|0);
       HEAP32[$6>>2] = $67;
      }
      ___shlim($0,0);
      $68 = (___errno_location()|0);
      HEAP32[$68>>2] = 22;
      $289 = 0;$290 = 0;
      break L1;
     }
    }
   } while(0);
   if ((label|0) == 32) {
    $69 = ($$1165|0)==(10);
    if ($69) {
     $70 = (($$1160) + -48)|0;
     $71 = ($70>>>0)<(10);
     if ($71) {
      $$0154222 = 0;$74 = $70;
      while(1) {
       $72 = ($$0154222*10)|0;
       $73 = (($72) + ($74))|0;
       $75 = HEAP32[$6>>2]|0;
       $76 = HEAP32[$7>>2]|0;
       $77 = ($75>>>0)<($76>>>0);
       if ($77) {
        $78 = ((($75)) + 1|0);
        HEAP32[$6>>2] = $78;
        $79 = HEAP8[$75>>0]|0;
        $80 = $79&255;
        $$2161$be = $80;
       } else {
        $81 = (___shgetc($0)|0);
        $$2161$be = $81;
       }
       $82 = (($$2161$be) + -48)|0;
       $83 = ($82>>>0)<(10);
       $84 = ($73>>>0)<(429496729);
       $85 = $83 & $84;
       if ($85) {
        $$0154222 = $73;$74 = $82;
       } else {
        break;
       }
      }
      $$2161$lcssa = $$2161$be;$291 = $73;$292 = 0;
     } else {
      $$2161$lcssa = $$1160;$291 = 0;$292 = 0;
     }
     $86 = (($$2161$lcssa) + -48)|0;
     $87 = ($86>>>0)<(10);
     if ($87) {
      $$3162211 = $$2161$lcssa;$88 = $291;$89 = $292;$92 = $86;
      while(1) {
       $90 = (___muldi3(($88|0),($89|0),10,0)|0);
       $91 = tempRet0;
       $93 = ($92|0)<(0);
       $94 = $93 << 31 >> 31;
       $95 = $92 ^ -1;
       $96 = $94 ^ -1;
       $97 = ($91>>>0)>($96>>>0);
       $98 = ($90>>>0)>($95>>>0);
       $99 = ($91|0)==($96|0);
       $100 = $99 & $98;
       $101 = $97 | $100;
       if ($101) {
        $$3162$lcssa = $$3162211;$$lcssa = $92;$293 = $88;$294 = $89;
        break;
       }
       $102 = (_i64Add(($90|0),($91|0),($92|0),($94|0))|0);
       $103 = tempRet0;
       $104 = HEAP32[$6>>2]|0;
       $105 = HEAP32[$7>>2]|0;
       $106 = ($104>>>0)<($105>>>0);
       if ($106) {
        $107 = ((($104)) + 1|0);
        HEAP32[$6>>2] = $107;
        $108 = HEAP8[$104>>0]|0;
        $109 = $108&255;
        $$3162$be = $109;
       } else {
        $110 = (___shgetc($0)|0);
        $$3162$be = $110;
       }
       $111 = (($$3162$be) + -48)|0;
       $112 = ($111>>>0)<(10);
       $113 = ($103>>>0)<(429496729);
       $114 = ($102>>>0)<(2576980378);
       $115 = ($103|0)==(429496729);
       $116 = $115 & $114;
       $117 = $113 | $116;
       $or$cond7 = $112 & $117;
       if ($or$cond7) {
        $$3162211 = $$3162$be;$88 = $102;$89 = $103;$92 = $111;
       } else {
        $$3162$lcssa = $$3162$be;$$lcssa = $111;$293 = $102;$294 = $103;
        break;
       }
      }
      $118 = ($$lcssa>>>0)>(9);
      if ($118) {
       $$1158 = $$0157;$262 = $294;$264 = $293;
      } else {
       $$1165167 = 10;$$8 = $$3162$lcssa;$295 = $293;$296 = $294;
       label = 72;
      }
     } else {
      $$1158 = $$0157;$262 = $292;$264 = $291;
     }
    } else {
     $$1160169 = $$1160;$$1165168 = $$1165;
     label = 46;
    }
   }
   L63: do {
    if ((label|0) == 46) {
     $119 = (($$1165168) + -1)|0;
     $120 = $119 & $$1165168;
     $121 = ($120|0)==(0);
     if ($121) {
      $126 = ($$1165168*23)|0;
      $127 = $126 >>> 5;
      $128 = $127 & 7;
      $129 = (31891 + ($128)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130 << 24 >> 24;
      $132 = ((31635) + ($$1160169)|0);
      $133 = HEAP8[$132>>0]|0;
      $134 = $133&255;
      $135 = ($134>>>0)<($$1165168>>>0);
      if ($135) {
       $$1155188 = 0;$138 = $134;
       while(1) {
        $136 = $$1155188 << $131;
        $137 = $138 | $136;
        $139 = HEAP32[$6>>2]|0;
        $140 = HEAP32[$7>>2]|0;
        $141 = ($139>>>0)<($140>>>0);
        if ($141) {
         $142 = ((($139)) + 1|0);
         HEAP32[$6>>2] = $142;
         $143 = HEAP8[$139>>0]|0;
         $144 = $143&255;
         $$4163$be = $144;
        } else {
         $145 = (___shgetc($0)|0);
         $$4163$be = $145;
        }
        $146 = ((31635) + ($$4163$be)|0);
        $147 = HEAP8[$146>>0]|0;
        $148 = $147&255;
        $149 = ($148>>>0)<($$1165168>>>0);
        $150 = ($137>>>0)<(134217728);
        $151 = $150 & $149;
        if ($151) {
         $$1155188 = $137;$138 = $148;
        } else {
         break;
        }
       }
       $$4163$lcssa = $$4163$be;$155 = $147;$157 = 0;$159 = $137;
      } else {
       $$4163$lcssa = $$1160169;$155 = $133;$157 = 0;$159 = 0;
      }
      $152 = (_bitshift64Lshr(-1,-1,($131|0))|0);
      $153 = tempRet0;
      $154 = $155&255;
      $156 = ($154>>>0)>=($$1165168>>>0);
      $158 = ($157>>>0)>($153>>>0);
      $160 = ($159>>>0)>($152>>>0);
      $161 = ($157|0)==($153|0);
      $162 = $161 & $160;
      $163 = $158 | $162;
      $or$cond183 = $156 | $163;
      if ($or$cond183) {
       $$1165167 = $$1165168;$$8 = $$4163$lcssa;$295 = $159;$296 = $157;
       label = 72;
       break;
      } else {
       $164 = $159;$165 = $157;$169 = $155;
      }
      while(1) {
       $166 = (_bitshift64Shl(($164|0),($165|0),($131|0))|0);
       $167 = tempRet0;
       $168 = $169&255;
       $170 = $168 | $166;
       $171 = HEAP32[$6>>2]|0;
       $172 = HEAP32[$7>>2]|0;
       $173 = ($171>>>0)<($172>>>0);
       if ($173) {
        $174 = ((($171)) + 1|0);
        HEAP32[$6>>2] = $174;
        $175 = HEAP8[$171>>0]|0;
        $176 = $175&255;
        $$5$be = $176;
       } else {
        $177 = (___shgetc($0)|0);
        $$5$be = $177;
       }
       $178 = ((31635) + ($$5$be)|0);
       $179 = HEAP8[$178>>0]|0;
       $180 = $179&255;
       $181 = ($180>>>0)>=($$1165168>>>0);
       $182 = ($167>>>0)>($153>>>0);
       $183 = ($170>>>0)>($152>>>0);
       $184 = ($167|0)==($153|0);
       $185 = $184 & $183;
       $186 = $182 | $185;
       $or$cond = $181 | $186;
       if ($or$cond) {
        $$1165167 = $$1165168;$$8 = $$5$be;$295 = $170;$296 = $167;
        label = 72;
        break L63;
       } else {
        $164 = $170;$165 = $167;$169 = $179;
       }
      }
     }
     $122 = ((31635) + ($$1160169)|0);
     $123 = HEAP8[$122>>0]|0;
     $124 = $123&255;
     $125 = ($124>>>0)<($$1165168>>>0);
     if ($125) {
      $$2156206 = 0;$189 = $124;
      while(1) {
       $187 = Math_imul($$2156206, $$1165168)|0;
       $188 = (($189) + ($187))|0;
       $190 = HEAP32[$6>>2]|0;
       $191 = HEAP32[$7>>2]|0;
       $192 = ($190>>>0)<($191>>>0);
       if ($192) {
        $193 = ((($190)) + 1|0);
        HEAP32[$6>>2] = $193;
        $194 = HEAP8[$190>>0]|0;
        $195 = $194&255;
        $$6$be = $195;
       } else {
        $196 = (___shgetc($0)|0);
        $$6$be = $196;
       }
       $197 = ((31635) + ($$6$be)|0);
       $198 = HEAP8[$197>>0]|0;
       $199 = $198&255;
       $200 = ($199>>>0)<($$1165168>>>0);
       $201 = ($188>>>0)<(119304647);
       $202 = $201 & $200;
       if ($202) {
        $$2156206 = $188;$189 = $199;
       } else {
        break;
       }
      }
      $$6$lcssa = $$6$be;$204 = $198;$297 = $188;$298 = 0;
     } else {
      $$6$lcssa = $$1160169;$204 = $123;$297 = 0;$298 = 0;
     }
     $203 = $204&255;
     $205 = ($203>>>0)<($$1165168>>>0);
     if ($205) {
      $206 = (___udivdi3(-1,-1,($$1165168|0),0)|0);
      $207 = tempRet0;
      $$7194 = $$6$lcssa;$208 = $298;$210 = $297;$218 = $204;
      while(1) {
       $209 = ($208>>>0)>($207>>>0);
       $211 = ($210>>>0)>($206>>>0);
       $212 = ($208|0)==($207|0);
       $213 = $212 & $211;
       $214 = $209 | $213;
       if ($214) {
        $$1165167 = $$1165168;$$8 = $$7194;$295 = $210;$296 = $208;
        label = 72;
        break L63;
       }
       $215 = (___muldi3(($210|0),($208|0),($$1165168|0),0)|0);
       $216 = tempRet0;
       $217 = $218&255;
       $219 = $217 ^ -1;
       $220 = ($216>>>0)>(4294967295);
       $221 = ($215>>>0)>($219>>>0);
       $222 = ($216|0)==(-1);
       $223 = $222 & $221;
       $224 = $220 | $223;
       if ($224) {
        $$1165167 = $$1165168;$$8 = $$7194;$295 = $210;$296 = $208;
        label = 72;
        break L63;
       }
       $225 = (_i64Add(($217|0),0,($215|0),($216|0))|0);
       $226 = tempRet0;
       $227 = HEAP32[$6>>2]|0;
       $228 = HEAP32[$7>>2]|0;
       $229 = ($227>>>0)<($228>>>0);
       if ($229) {
        $230 = ((($227)) + 1|0);
        HEAP32[$6>>2] = $230;
        $231 = HEAP8[$227>>0]|0;
        $232 = $231&255;
        $$7$be = $232;
       } else {
        $233 = (___shgetc($0)|0);
        $$7$be = $233;
       }
       $234 = ((31635) + ($$7$be)|0);
       $235 = HEAP8[$234>>0]|0;
       $236 = $235&255;
       $237 = ($236>>>0)<($$1165168>>>0);
       if ($237) {
        $$7194 = $$7$be;$208 = $226;$210 = $225;$218 = $235;
       } else {
        $$1165167 = $$1165168;$$8 = $$7$be;$295 = $225;$296 = $226;
        label = 72;
        break;
       }
      }
     } else {
      $$1165167 = $$1165168;$$8 = $$6$lcssa;$295 = $297;$296 = $298;
      label = 72;
     }
    }
   } while(0);
   if ((label|0) == 72) {
    $238 = ((31635) + ($$8)|0);
    $239 = HEAP8[$238>>0]|0;
    $240 = $239&255;
    $241 = ($240>>>0)<($$1165167>>>0);
    if ($241) {
     while(1) {
      $242 = HEAP32[$6>>2]|0;
      $243 = HEAP32[$7>>2]|0;
      $244 = ($242>>>0)<($243>>>0);
      if ($244) {
       $245 = ((($242)) + 1|0);
       HEAP32[$6>>2] = $245;
       $246 = HEAP8[$242>>0]|0;
       $247 = $246&255;
       $$9$be = $247;
      } else {
       $248 = (___shgetc($0)|0);
       $$9$be = $248;
      }
      $249 = ((31635) + ($$9$be)|0);
      $250 = HEAP8[$249>>0]|0;
      $251 = $250&255;
      $252 = ($251>>>0)<($$1165167>>>0);
      if (!($252)) {
       break;
      }
     }
     $253 = (___errno_location()|0);
     HEAP32[$253>>2] = 34;
     $254 = $3 & 1;
     $255 = ($254|0)==(0);
     $256 = (0)==(0);
     $257 = $255 & $256;
     $$0157$ = $257 ? $$0157 : 0;
     $$1158 = $$0157$;$262 = $4;$264 = $3;
    } else {
     $$1158 = $$0157;$262 = $296;$264 = $295;
    }
   }
   $258 = HEAP32[$7>>2]|0;
   $259 = ($258|0)==(0|0);
   if (!($259)) {
    $260 = HEAP32[$6>>2]|0;
    $261 = ((($260)) + -1|0);
    HEAP32[$6>>2] = $261;
   }
   $263 = ($262>>>0)<($4>>>0);
   $265 = ($264>>>0)<($3>>>0);
   $266 = ($262|0)==($4|0);
   $267 = $266 & $265;
   $268 = $263 | $267;
   if (!($268)) {
    $269 = $3 & 1;
    $270 = ($269|0)!=(0);
    $271 = (0)!=(0);
    $272 = $270 | $271;
    $273 = ($$1158|0)!=(0);
    $or$cond12 = $272 | $273;
    if (!($or$cond12)) {
     $274 = (___errno_location()|0);
     HEAP32[$274>>2] = 34;
     $275 = (_i64Add(($3|0),($4|0),-1,-1)|0);
     $276 = tempRet0;
     $289 = $276;$290 = $275;
     break;
    }
    $277 = ($262>>>0)>($4>>>0);
    $278 = ($264>>>0)>($3>>>0);
    $279 = ($262|0)==($4|0);
    $280 = $279 & $278;
    $281 = $277 | $280;
    if ($281) {
     $282 = (___errno_location()|0);
     HEAP32[$282>>2] = 34;
     $289 = $4;$290 = $3;
     break;
    }
   }
   $283 = ($$1158|0)<(0);
   $284 = $283 << 31 >> 31;
   $285 = $264 ^ $$1158;
   $286 = $262 ^ $284;
   $287 = (_i64Subtract(($285|0),($286|0),($$1158|0),($284|0))|0);
   $288 = tempRet0;
   $289 = $288;$290 = $287;
  }
 } while(0);
 tempRet0 = ($289);
 return ($290|0);
}
function ___shgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert28 = 0, $$pre = 0, $$pre29 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 104|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  label = 3;
 } else {
  $4 = ((($0)) + 108|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)<($2|0);
  if ($6) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $7 = (___uflow($0)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   label = 4;
  } else {
   $10 = HEAP32[$1>>2]|0;
   $11 = ($10|0)==(0);
   $$phi$trans$insert = ((($0)) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($11) {
    $12 = $$pre;
    $42 = $12;
    label = 9;
   } else {
    $13 = ((($0)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $14;
    $16 = (($$pre) - ($15))|0;
    $17 = ((($0)) + 108|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($10) - ($18))|0;
    $20 = ($16|0)<($19|0);
    $21 = $$pre;
    if ($20) {
     $42 = $21;
     label = 9;
    } else {
     $22 = (($19) + -1)|0;
     $23 = (($14) + ($22)|0);
     $24 = ((($0)) + 100|0);
     HEAP32[$24>>2] = $23;
     $26 = $21;
    }
   }
   if ((label|0) == 9) {
    $25 = ((($0)) + 100|0);
    HEAP32[$25>>2] = $$pre;
    $26 = $42;
   }
   $27 = ($26|0)==(0|0);
   $$phi$trans$insert28 = ((($0)) + 4|0);
   if ($27) {
    $$pre29 = HEAP32[$$phi$trans$insert28>>2]|0;
    $37 = $$pre29;
   } else {
    $28 = HEAP32[$$phi$trans$insert28>>2]|0;
    $29 = $26;
    $30 = ((($0)) + 108|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($29) + 1)|0;
    $33 = (($32) - ($28))|0;
    $34 = (($33) + ($31))|0;
    HEAP32[$30>>2] = $34;
    $35 = $28;
    $37 = $35;
   }
   $36 = ((($37)) + -1|0);
   $38 = HEAP8[$36>>0]|0;
   $39 = $38&255;
   $40 = ($39|0)==($7|0);
   if ($40) {
    $$0 = $7;
   } else {
    $41 = $7&255;
    HEAP8[$36>>0] = $41;
    $$0 = $7;
   }
  }
 }
 if ((label|0) == 4) {
  $9 = ((($0)) + 100|0);
  HEAP32[$9>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function _isspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(32);
 $2 = (($0) + -9)|0;
 $3 = ($2>>>0)<(5);
 $4 = $1 | $3;
 $5 = $4&1;
 return ($5|0);
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = (___toread($0)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $7 = ((($0)) + 32|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (FUNCTION_TABLE_iiii[$8 & 1023]($0,$1,1)|0);
  $10 = ($9|0)==(1);
  if ($10) {
   $11 = HEAP8[$1>>0]|0;
   $12 = $11&255;
   $$0 = $12;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 44|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 1023]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($0)) + 28|0);
 HEAP32[$15>>2] = 0;
 HEAP32[$7>>2] = 0;
 $16 = HEAP32[$0>>2]|0;
 $17 = $16 & 20;
 $18 = ($17|0)==(0);
 if ($18) {
  $22 = HEAP32[$9>>2]|0;
  $23 = ((($0)) + 8|0);
  HEAP32[$23>>2] = $22;
  $24 = ((($0)) + 4|0);
  HEAP32[$24>>2] = $22;
  $$0 = 0;
 } else {
  $19 = $16 & 4;
  $20 = ($19|0)==(0);
  if ($20) {
   $$0 = -1;
  } else {
   $21 = $16 | 32;
   HEAP32[$0>>2] = $21;
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function _toupper($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_islower($0)|0);
 $2 = ($1|0)==(0);
 $3 = $0 & 95;
 $$0 = $2 ? $0 : $3;
 return ($$0|0);
}
function _islower($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -97)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function _freelocale($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($0);
 return;
}
function _catclose($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _isxdigit_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_isxdigit($0)|0);
 return ($2|0);
}
function _isxdigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($0) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $1 = $0 | 32;
 $2 = (($1) + -97)|0;
 $3 = ($2>>>0)<(6);
 $4 = $isdigit | $3;
 $5 = $4&1;
 return ($5|0);
}
function _wcslen($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $0;
 while(1) {
  $1 = HEAP32[$$0>>2]|0;
  $2 = ($1|0)==(0);
  $3 = ((($$0)) + 4|0);
  if ($2) {
   break;
  } else {
   $$0 = $3;
  }
 }
 $4 = $$0;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 return ($7|0);
}
function _wmemcpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$058 = 0, $$067 = 0, $$09 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$058 = $2;$$067 = $1;$$09 = $0;
  while(1) {
   $4 = (($$058) + -1)|0;
   $5 = ((($$067)) + 4|0);
   $6 = HEAP32[$$067>>2]|0;
   $7 = ((($$09)) + 4|0);
   HEAP32[$$09>>2] = $6;
   $8 = ($4|0)==(0);
   if ($8) {
    break;
   } else {
    $$058 = $4;$$067 = $5;$$09 = $7;
   }
  }
 }
 return ($0|0);
}
function _snprintf($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 $4 = (_vsnprintf($0,$1,$2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _catgets($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($3|0);
}
function _newlocale($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  label = 4;
 } else {
  $5 = (_strcmp($1,32662)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 4;
  } else {
   $7 = (_strcmp($1,31900)|0);
   $8 = ($7|0)==(0);
   if ($8) {
    label = 4;
   } else {
    $$06 = 0;
   }
  }
 }
 do {
  if ((label|0) == 4) {
   $9 = ($2|0)==(0|0);
   if ($9) {
    $10 = HEAP32[9787]|0;
    $11 = ($10|0)==(0);
    if ($11) {
     HEAP32[9787] = 1;
     $$06 = 39152;
     break;
    } else {
     $12 = (_calloc(1,4)|0);
     $$06 = $12;
     break;
    }
   } else {
    $$06 = $2;
   }
  }
 } while(0);
 return ($$06|0);
}
function _isdigit_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($0) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $2 = $isdigit&1;
 return ($2|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$014 = 0, $$015$lcssa = 0, $$01518 = 0, $$1$lcssa = 0, $$pn = 0, $$pn29 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01518 = $0;$22 = $1;
   while(1) {
    $4 = HEAP8[$$01518>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$pn = $22;
     break L1;
    }
    $6 = ((($$01518)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01518 = $6;$22 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn29 = $$0;
   while(1) {
    $19 = ((($$pn29)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn29 = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$pn = $21;
 }
 $$014 = (($$pn) - ($1))|0;
 return ($$014|0);
}
function _mbrtowc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$03750 = 0, $$03849 = 0, $$04148 = 0, $$1 = 0, $$139 = 0, $$142 = 0, $$2 = 0, $$45 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($3|0)==(0|0);
 $$ = $5 ? 39156 : $3;
 $6 = HEAP32[$$>>2]|0;
 $7 = ($1|0)==(0|0);
 L1: do {
  if ($7) {
   $8 = ($6|0)==(0);
   if ($8) {
    $$0 = 0;
   } else {
    label = 15;
   }
  } else {
   $9 = ($0|0)==(0|0);
   $$45 = $9 ? $4 : $0;
   $10 = ($2|0)==(0);
   if ($10) {
    $$0 = -2;
   } else {
    $11 = ($6|0)==(0);
    if ($11) {
     $12 = HEAP8[$1>>0]|0;
     $13 = $12&255;
     $14 = ($12<<24>>24)>(-1);
     if ($14) {
      HEAP32[$$45>>2] = $13;
      $15 = ($12<<24>>24)!=(0);
      $16 = $15&1;
      $$0 = $16;
      break;
     }
     $17 = (($13) + -194)|0;
     $18 = ($17>>>0)>(50);
     if ($18) {
      label = 15;
      break;
     }
     $19 = ((($1)) + 1|0);
     $20 = (11932 + ($17<<2)|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = (($2) + -1)|0;
     $23 = ($22|0)==(0);
     if ($23) {
      $$2 = $21;
     } else {
      $$03750 = $19;$$03849 = $21;$$04148 = $22;
      label = 9;
     }
    } else {
     $$03750 = $1;$$03849 = $6;$$04148 = $2;
     label = 9;
    }
    L11: do {
     if ((label|0) == 9) {
      $24 = HEAP8[$$03750>>0]|0;
      $25 = $24&255;
      $26 = $25 >>> 3;
      $27 = (($26) + -16)|0;
      $28 = $$03849 >> 26;
      $29 = (($26) + ($28))|0;
      $30 = $27 | $29;
      $31 = ($30>>>0)>(7);
      if ($31) {
       label = 15;
       break L1;
      } else {
       $$1 = $$03750;$$139 = $$03849;$$142 = $$04148;$35 = $24;
      }
      while(1) {
       $32 = $$139 << 6;
       $33 = ((($$1)) + 1|0);
       $34 = $35&255;
       $36 = (($34) + -128)|0;
       $37 = $36 | $32;
       $38 = (($$142) + -1)|0;
       $39 = ($37|0)<(0);
       if (!($39)) {
        break;
       }
       $41 = ($38|0)==(0);
       if ($41) {
        $$2 = $37;
        break L11;
       }
       $42 = HEAP8[$33>>0]|0;
       $43 = $42 & -64;
       $44 = ($43<<24>>24)==(-128);
       if ($44) {
        $$1 = $33;$$139 = $37;$$142 = $38;$35 = $42;
       } else {
        label = 15;
        break L1;
       }
      }
      HEAP32[$$>>2] = 0;
      HEAP32[$$45>>2] = $37;
      $40 = (($2) - ($38))|0;
      $$0 = $40;
      break L1;
     }
    } while(0);
    HEAP32[$$>>2] = $$2;
    $$0 = -2;
   }
  }
 } while(0);
 if ((label|0) == 15) {
  HEAP32[$$>>2] = 0;
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _strcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($0,$1)|0);
 return ($0|0);
}
function ___stpcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$029 = 0, $$037 = 0, $$1$ph = 0, $$128$ph = 0, $$12834 = 0, $$135 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = $2 ^ $3;
 $5 = $4 & 3;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = $2 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$026$lcssa = $1;$$027$lcssa = $0;
   } else {
    $$02642 = $1;$$02741 = $0;
    while(1) {
     $9 = HEAP8[$$02642>>0]|0;
     HEAP8[$$02741>>0] = $9;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$029 = $$02741;
      break L1;
     }
     $11 = ((($$02642)) + 1|0);
     $12 = ((($$02741)) + 1|0);
     $13 = $11;
     $14 = $13 & 3;
     $15 = ($14|0)==(0);
     if ($15) {
      $$026$lcssa = $11;$$027$lcssa = $12;
      break;
     } else {
      $$02642 = $11;$$02741 = $12;
     }
    }
   }
   $16 = HEAP32[$$026$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   if ($21) {
    $$02536 = $$027$lcssa;$$037 = $$026$lcssa;$24 = $16;
    while(1) {
     $22 = ((($$037)) + 4|0);
     $23 = ((($$02536)) + 4|0);
     HEAP32[$$02536>>2] = $24;
     $25 = HEAP32[$22>>2]|0;
     $26 = (($25) + -16843009)|0;
     $27 = $25 & -2139062144;
     $28 = $27 ^ -2139062144;
     $29 = $28 & $26;
     $30 = ($29|0)==(0);
     if ($30) {
      $$02536 = $23;$$037 = $22;$24 = $25;
     } else {
      $$0$lcssa = $22;$$025$lcssa = $23;
      break;
     }
    }
   } else {
    $$0$lcssa = $$026$lcssa;$$025$lcssa = $$027$lcssa;
   }
   $$1$ph = $$0$lcssa;$$128$ph = $$025$lcssa;
   label = 8;
  } else {
   $$1$ph = $1;$$128$ph = $0;
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $31 = HEAP8[$$1$ph>>0]|0;
  HEAP8[$$128$ph>>0] = $31;
  $32 = ($31<<24>>24)==(0);
  if ($32) {
   $$029 = $$128$ph;
  } else {
   $$12834 = $$128$ph;$$135 = $$1$ph;
   while(1) {
    $33 = ((($$135)) + 1|0);
    $34 = ((($$12834)) + 1|0);
    $35 = HEAP8[$33>>0]|0;
    HEAP8[$34>>0] = $35;
    $36 = ($35<<24>>24)==(0);
    if ($36) {
     $$029 = $34;
     break;
    } else {
     $$12834 = $34;$$135 = $33;
    }
   }
  }
 }
 return ($$029|0);
}
function _isalpha($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 | 32;
 $2 = (($1) + -97)|0;
 $3 = ($2>>>0)<(26);
 $4 = $3&1;
 return ($4|0);
}
function _uselocale($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_pthread_self()|0);
 $2 = ((($1)) + 184|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($0|0)==(0|0);
 if (!($4)) {
  HEAP32[$2>>2] = $0;
 }
 return ($3|0);
}
function _catopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ((-1)|0);
}
function _feof($0) {
 $0 = $0|0;
 var $$lobit = 0, $$lobit8 = 0, $$lobit9 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $6 = (___lockfile($0)|0);
  $phitmp = ($6|0)==(0);
  $7 = HEAP32[$0>>2]|0;
  $8 = $7 >>> 4;
  $$lobit = $8 & 1;
  if ($phitmp) {
   $$lobit9 = $$lobit;
  } else {
   ___unlockfile($0);
   $$lobit9 = $$lobit;
  }
 } else {
  $4 = HEAP32[$0>>2]|0;
  $5 = $4 >>> 4;
  $$lobit8 = $5 & 1;
  $$lobit9 = $$lobit8;
 }
 return ($$lobit9|0);
}
function _fclose($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  (___lockfile($0)|0);
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)!=(0);
 if (!($6)) {
  ___lock(((39128)|0));
  $7 = ((($0)) + 52|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  $10 = $8;
  $$pre = ((($0)) + 56|0);
  if (!($9)) {
   $11 = HEAP32[$$pre>>2]|0;
   $12 = ((($8)) + 56|0);
   HEAP32[$12>>2] = $11;
  }
  $13 = HEAP32[$$pre>>2]|0;
  $14 = ($13|0)==(0|0);
  $15 = $13;
  if (!($14)) {
   $16 = ((($13)) + 52|0);
   HEAP32[$16>>2] = $10;
  }
  $17 = HEAP32[(39124)>>2]|0;
  $18 = ($17|0)==($0|0);
  if ($18) {
   HEAP32[(39124)>>2] = $15;
  }
  ___unlock(((39128)|0));
 }
 $19 = (_fflush($0)|0);
 $20 = ((($0)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (FUNCTION_TABLE_ii[$21 & 1023]($0)|0);
 $23 = $22 | $19;
 $24 = ((($0)) + 92|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0|0);
 if (!($26)) {
  _free($25);
 }
 if (!($6)) {
  _free($0);
 }
 return ($23|0);
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[2924]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $28 = 0;
   } else {
    $10 = HEAP32[2924]|0;
    $11 = (_fflush($10)|0);
    $28 = $11;
   }
   ___lock(((39128)|0));
   $$02325 = HEAP32[(39124)>>2]|0;
   $12 = ($$02325|0)==(0|0);
   if ($12) {
    $$024$lcssa = $28;
   } else {
    $$02327 = $$02325;$$02426 = $28;
    while(1) {
     $13 = ((($$02327)) + 76|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ($14|0)>(-1);
     if ($15) {
      $16 = (___lockfile($$02327)|0);
      $24 = $16;
     } else {
      $24 = 0;
     }
     $17 = ((($$02327)) + 20|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ((($$02327)) + 28|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18>>>0)>($20>>>0);
     if ($21) {
      $22 = (___fflush_unlocked($$02327)|0);
      $23 = $22 | $$02426;
      $$1 = $23;
     } else {
      $$1 = $$02426;
     }
     $25 = ($24|0)==(0);
     if (!($25)) {
      ___unlockfile($$02327);
     }
     $26 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$26>>2]|0;
     $27 = ($$023|0)==(0|0);
     if ($27) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___unlock(((39128)|0));
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 1023]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = ((($0)) + 40|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $11;
   $18 = $13;
   $19 = (($17) - ($18))|0;
   (FUNCTION_TABLE_iiii[$16 & 1023]($0,$19,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function ___fdopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$cast = 0, $$pre = 0, $$pre34 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 52|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3 << 24 >> 24;
 $memchr = (_memchr(31906,$4,4)|0);
 $5 = ($memchr|0)==(0|0);
 if ($5) {
  $6 = (___errno_location()|0);
  HEAP32[$6>>2] = 22;
  $$0 = 0;
 } else {
  $7 = (_malloc(1144)|0);
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = 0;
  } else {
   dest=$7; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $9 = (_strchr($1,43)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = ($3<<24>>24)==(114);
    $12 = $11 ? 8 : 4;
    HEAP32[$7>>2] = $12;
   }
   $13 = (_strchr($1,101)|0);
   $14 = ($13|0)==(0|0);
   if ($14) {
    $15 = $3;
   } else {
    HEAP32[$vararg_buffer>>2] = $0;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$1>>0]|0;
    $15 = $$pre;
   }
   $16 = ($15<<24>>24)==(97);
   if ($16) {
    HEAP32[$vararg_buffer3>>2] = $0;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $17 = (___syscall221(221,($vararg_buffer3|0))|0);
    $18 = $17 & 1024;
    $19 = ($18|0)==(0);
    if ($19) {
     $20 = $17 | 1024;
     HEAP32[$vararg_buffer7>>2] = $0;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $20;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $21 = HEAP32[$7>>2]|0;
    $22 = $21 | 128;
    HEAP32[$7>>2] = $22;
    $29 = $22;
   } else {
    $$pre34 = HEAP32[$7>>2]|0;
    $29 = $$pre34;
   }
   $23 = ((($7)) + 60|0);
   HEAP32[$23>>2] = $0;
   $24 = ((($7)) + 120|0);
   $25 = ((($7)) + 44|0);
   HEAP32[$25>>2] = $24;
   $26 = ((($7)) + 48|0);
   HEAP32[$26>>2] = 1024;
   $27 = ((($7)) + 75|0);
   HEAP8[$27>>0] = -1;
   $28 = $29 & 8;
   $30 = ($28|0)==(0);
   if ($30) {
    HEAP32[$vararg_buffer12>>2] = $0;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21505;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $2;
    $31 = (___syscall54(54,($vararg_buffer12|0))|0);
    $32 = ($31|0)==(0);
    if ($32) {
     HEAP8[$27>>0] = 10;
    }
   }
   $33 = ((($7)) + 32|0);
   HEAP32[$33>>2] = 298;
   $34 = ((($7)) + 36|0);
   HEAP32[$34>>2] = 297;
   $35 = ((($7)) + 40|0);
   HEAP32[$35>>2] = 296;
   $36 = ((($7)) + 12|0);
   HEAP32[$36>>2] = 294;
   $37 = HEAP32[(39104)>>2]|0;
   $38 = ($37|0)==(0);
   if ($38) {
    $39 = ((($7)) + 76|0);
    HEAP32[$39>>2] = -1;
   }
   ___lock(((39128)|0));
   $40 = HEAP32[(39124)>>2]|0;
   $41 = ((($7)) + 56|0);
   HEAP32[$41>>2] = $40;
   $42 = ($40|0)==(0);
   if (!($42)) {
    $$cast = $40;
    $43 = ((($$cast)) + 52|0);
    HEAP32[$43>>2] = $7;
   }
   HEAP32[(39124)>>2] = $7;
   ___unlock(((39128)|0));
   $$0 = $7;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $8 = (_strlen($0)|0);
   $9 = (($0) + ($8)|0);
   $$0 = $9;
  } else {
   $4 = $0;
   $5 = $4 & 3;
   $6 = ($5|0)==(0);
   if ($6) {
    $$030$lcssa = $0;
   } else {
    $7 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($7<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _mbtowc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($1|0)==(0|0);
 L1: do {
  if ($4) {
   $$0 = 0;
  } else {
   $5 = ($2|0)==(0);
   do {
    if (!($5)) {
     $6 = ($0|0)==(0|0);
     $$ = $6 ? $3 : $0;
     $7 = HEAP8[$1>>0]|0;
     $8 = $7&255;
     $9 = ($7<<24>>24)>(-1);
     if ($9) {
      HEAP32[$$>>2] = $8;
      $10 = ($7<<24>>24)!=(0);
      $11 = $10&1;
      $$0 = $11;
      break L1;
     }
     $12 = (($8) + -194)|0;
     $13 = ($12>>>0)>(50);
     if (!($13)) {
      $14 = ((($1)) + 1|0);
      $15 = (11932 + ($12<<2)|0);
      $16 = HEAP32[$15>>2]|0;
      $17 = ($2>>>0)<(4);
      if ($17) {
       $18 = ($2*6)|0;
       $19 = (($18) + -6)|0;
       $20 = -2147483648 >>> $19;
       $21 = $16 & $20;
       $22 = ($21|0)==(0);
       if (!($22)) {
        break;
       }
      }
      $23 = HEAP8[$14>>0]|0;
      $24 = $23&255;
      $25 = $24 >>> 3;
      $26 = (($25) + -16)|0;
      $27 = $16 >> 26;
      $28 = (($25) + ($27))|0;
      $29 = $26 | $28;
      $30 = ($29>>>0)>(7);
      if (!($30)) {
       $31 = $16 << 6;
       $32 = (($24) + -128)|0;
       $33 = $32 | $31;
       $34 = ($33|0)<(0);
       if (!($34)) {
        HEAP32[$$>>2] = $33;
        $$0 = 2;
        break L1;
       }
       $35 = ((($1)) + 2|0);
       $36 = HEAP8[$35>>0]|0;
       $37 = $36&255;
       $38 = (($37) + -128)|0;
       $39 = ($38>>>0)>(63);
       if (!($39)) {
        $40 = $33 << 6;
        $41 = $38 | $40;
        $42 = ($41|0)<(0);
        if (!($42)) {
         HEAP32[$$>>2] = $41;
         $$0 = 3;
         break L1;
        }
        $43 = ((($1)) + 3|0);
        $44 = HEAP8[$43>>0]|0;
        $45 = $44&255;
        $46 = (($45) + -128)|0;
        $47 = ($46>>>0)>(63);
        if (!($47)) {
         $48 = $41 << 6;
         $49 = $46 | $48;
         HEAP32[$$>>2] = $49;
         $$0 = 4;
         break L1;
        }
       }
      }
     }
    }
   } while(0);
   $50 = (___errno_location()|0);
   HEAP32[$50>>2] = 84;
   $$0 = -1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _fopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $memchr = (_memchr(31906,$3,4)|0);
 $4 = ($memchr|0)==(0|0);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $$0 = 0;
 } else {
  $6 = (___fmodeflags($1)|0);
  $7 = $6 | 32768;
  HEAP32[$vararg_buffer>>2] = $0;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $7;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $8 = (___syscall5(5,($vararg_buffer|0))|0);
  $9 = (___syscall_ret($8)|0);
  $10 = ($9|0)<(0);
  if ($10) {
   $$0 = 0;
  } else {
   $11 = (___fdopen($9,$1)|0);
   $12 = ($11|0)==(0|0);
   if ($12) {
    HEAP32[$vararg_buffer3>>2] = $9;
    (___syscall6(6,($vararg_buffer3|0))|0);
    $$0 = 0;
   } else {
    $$0 = $11;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($0) {
 $0 = $0|0;
 var $$ = 0, $$$4 = 0, $$0 = 0, $$0$ = 0, $$2 = 0, $$2$ = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strchr($0,43)|0);
 $2 = ($1|0)==(0|0);
 $3 = HEAP8[$0>>0]|0;
 $not$ = ($3<<24>>24)!=(114);
 $$ = $not$&1;
 $$0 = $2 ? $$ : 2;
 $4 = (_strchr($0,120)|0);
 $5 = ($4|0)==(0|0);
 $6 = $$0 | 128;
 $$0$ = $5 ? $$0 : $6;
 $7 = (_strchr($0,101)|0);
 $8 = ($7|0)==(0|0);
 $9 = $$0$ | 524288;
 $$2 = $8 ? $$0$ : $9;
 $10 = ($3<<24>>24)==(114);
 $11 = $$2 | 64;
 $$2$ = $10 ? $$2 : $11;
 $12 = ($3<<24>>24)==(119);
 $13 = $$2$ | 512;
 $$4 = $12 ? $13 : $$2$;
 $14 = ($3<<24>>24)==(97);
 $15 = $$4 | 1024;
 $$$4 = $14 ? $15 : $$4;
 return ($$$4|0);
}
function _sscanf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsscanf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vsscanf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $3 = sp;
 dest=$3; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($3)) + 32|0);
 HEAP32[$4>>2] = 755;
 $5 = ((($3)) + 44|0);
 HEAP32[$5>>2] = $0;
 $6 = ((($3)) + 76|0);
 HEAP32[$6>>2] = -1;
 $7 = ((($3)) + 84|0);
 HEAP32[$7>>2] = $0;
 $8 = (_vfscanf($3,$1,$2)|0);
 STACKTOP = sp;return ($8|0);
}
function _do_read_309($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___string_read($0,$1,$2)|0);
 return ($3|0);
}
function _vfscanf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$$0266 = 0, $$$0268 = 0, $$0$i = 0, $$0266$lcssa = 0, $$0266408 = 0, $$0268 = 0, $$0270 = 0, $$0272 = 0, $$0273420 = 0, $$0276$ph = 0, $$0278$ph = 0, $$0278$ph$phi = 0, $$0278$ph331 = 0, $$0283419 = 0, $$0286411 = 0, $$0288$ = 0, $$0288416 = 0, $$0292 = 0, $$0293 = 0;
 var $$0294415 = 0, $$0305414 = 0, $$10 = 0, $$10304 = 0, $$11 = 0, $$1267 = 0, $$1271 = 0, $$1274 = 0, $$1277$ph = 0, $$1279 = 0, $$1284 = 0, $$1289 = 0, $$1295 = 0, $$1306 = 0, $$2 = 0, $$2275 = 0, $$2280 = 0, $$2280$ph = 0, $$2280$ph$phi = 0, $$2285 = 0;
 var $$2290 = 0, $$2296 = 0, $$2307$ph = 0, $$3$lcssa = 0, $$319 = 0, $$320 = 0, $$321 = 0, $$322 = 0, $$3281 = 0, $$3291 = 0, $$3297$ph = 0, $$3407 = 0, $$4 = 0, $$4282 = 0, $$4309 = 0, $$5 = 0, $$5299 = 0, $$5310 = 0, $$6 = 0, $$6300 = 0;
 var $$6311 = 0, $$7 = 0, $$7$ph = 0, $$7301 = 0, $$7312 = 0, $$8 = 0, $$8302 = 0, $$8313 = 0, $$9 = 0, $$9303 = 0, $$9314 = 0, $$lcssa349 = 0, $$not = 0, $$old4 = 0, $$pre = 0, $$pre$phi493Z2D = 0, $$pre482 = 0, $$pre484 = 0, $$pre486 = 0, $$pre488 = 0;
 var $$pre489 = 0, $$pre490 = 0, $$pre491 = 0, $$pre492 = 0, $$sroa$2$0$$sroa_idx13 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0.0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0;
 var $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $factor = 0, $factor327 = 0, $isdigit = 0, $isdigit316 = 0, $isdigit316406 = 0, $isdigittmp = 0, $isdigittmp315 = 0, $isdigittmp315405 = 0, $not$ = 0, $or$cond = 0;
 var $or$cond3 = 0, $or$cond318 = 0, $or$cond5 = 0, $trunc = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $3 = sp + 16|0;
 $4 = sp + 8|0;
 $5 = sp + 33|0;
 $6 = sp;
 $7 = sp + 32|0;
 $8 = ((($0)) + 76|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)>(-1);
 if ($10) {
  $11 = (___lockfile($0)|0);
  $332 = $11;
 } else {
  $332 = 0;
 }
 $12 = HEAP8[$1>>0]|0;
 $13 = ($12<<24>>24)==(0);
 L4: do {
  if ($13) {
   $$3291 = 0;
  } else {
   $14 = ((($0)) + 4|0);
   $15 = ((($0)) + 100|0);
   $16 = ((($0)) + 108|0);
   $17 = ((($0)) + 8|0);
   $18 = ((($5)) + 10|0);
   $19 = ((($5)) + 33|0);
   $$sroa$2$0$$sroa_idx13 = ((($4)) + 4|0);
   $20 = ((($5)) + 46|0);
   $21 = ((($5)) + 94|0);
   $22 = ((($5)) + 1|0);
   $23 = ((($5)) + 1|0);
   $$0273420 = $1;$$0283419 = 0;$$0288416 = 0;$$0294415 = 0;$$0305414 = 0;$25 = $12;
   L6: while(1) {
    $24 = $25&255;
    $26 = (_isspace($24)|0);
    $27 = ($26|0)==(0);
    L8: do {
     if ($27) {
      $54 = ($25<<24>>24)==(37);
      L10: do {
       if ($54) {
        $55 = ((($$0273420)) + 1|0);
        $56 = HEAP8[$55>>0]|0;
        L12: do {
         switch ($56<<24>>24) {
         case 37:  {
          break L10;
          break;
         }
         case 42:  {
          $77 = ((($$0273420)) + 2|0);
          $$0293 = 0;$$2275 = $77;
          break;
         }
         default: {
          $78 = $56&255;
          $isdigittmp = (($78) + -48)|0;
          $isdigit = ($isdigittmp>>>0)<(10);
          if ($isdigit) {
           $79 = ((($$0273420)) + 2|0);
           $80 = HEAP8[$79>>0]|0;
           $81 = ($80<<24>>24)==(36);
           if ($81) {
            $vacopy_currentptr = HEAP32[$2>>2]|0;
            HEAP32[$3>>2] = $vacopy_currentptr;
            $$0$i = $isdigittmp;
            while(1) {
             $82 = ($$0$i>>>0)>(1);
             $arglist_current = HEAP32[$3>>2]|0;
             $83 = $arglist_current;
             $84 = ((0) + 4|0);
             $expanded4 = $84;
             $expanded = (($expanded4) - 1)|0;
             $85 = (($83) + ($expanded))|0;
             $86 = ((0) + 4|0);
             $expanded8 = $86;
             $expanded7 = (($expanded8) - 1)|0;
             $expanded6 = $expanded7 ^ -1;
             $87 = $85 & $expanded6;
             $88 = $87;
             $89 = HEAP32[$88>>2]|0;
             $arglist_next = ((($88)) + 4|0);
             HEAP32[$3>>2] = $arglist_next;
             $90 = (($$0$i) + -1)|0;
             if ($82) {
              $$0$i = $90;
             } else {
              break;
             }
            }
            $91 = ((($$0273420)) + 3|0);
            $$0293 = $89;$$2275 = $91;
            break L12;
           }
          }
          $arglist_current2 = HEAP32[$2>>2]|0;
          $92 = $arglist_current2;
          $93 = ((0) + 4|0);
          $expanded11 = $93;
          $expanded10 = (($expanded11) - 1)|0;
          $94 = (($92) + ($expanded10))|0;
          $95 = ((0) + 4|0);
          $expanded15 = $95;
          $expanded14 = (($expanded15) - 1)|0;
          $expanded13 = $expanded14 ^ -1;
          $96 = $94 & $expanded13;
          $97 = $96;
          $98 = HEAP32[$97>>2]|0;
          $arglist_next3 = ((($97)) + 4|0);
          HEAP32[$2>>2] = $arglist_next3;
          $$0293 = $98;$$2275 = $55;
         }
         }
        } while(0);
        $99 = HEAP8[$$2275>>0]|0;
        $100 = $99&255;
        $isdigittmp315405 = (($100) + -48)|0;
        $isdigit316406 = ($isdigittmp315405>>>0)<(10);
        if ($isdigit316406) {
         $$0266408 = 0;$$3407 = $$2275;$104 = $100;
         while(1) {
          $101 = ($$0266408*10)|0;
          $102 = (($101) + -48)|0;
          $103 = (($102) + ($104))|0;
          $105 = ((($$3407)) + 1|0);
          $106 = HEAP8[$105>>0]|0;
          $107 = $106&255;
          $isdigittmp315 = (($107) + -48)|0;
          $isdigit316 = ($isdigittmp315>>>0)<(10);
          if ($isdigit316) {
           $$0266408 = $103;$$3407 = $105;$104 = $107;
          } else {
           $$0266$lcssa = $103;$$3$lcssa = $105;$$lcssa349 = $106;
           break;
          }
         }
        } else {
         $$0266$lcssa = 0;$$3$lcssa = $$2275;$$lcssa349 = $99;
        }
        $108 = ($$lcssa349<<24>>24)==(109);
        if ($108) {
         $109 = ($$0293|0)!=(0|0);
         $110 = $109&1;
         $111 = ((($$3$lcssa)) + 1|0);
         $$pre482 = HEAP8[$111>>0]|0;
         $$0270 = $110;$$1295 = 0;$$1306 = 0;$$4 = $111;$113 = $$pre482;
        } else {
         $$0270 = 0;$$1295 = $$0294415;$$1306 = $$0305414;$$4 = $$3$lcssa;$113 = $$lcssa349;
        }
        $112 = ((($$4)) + 1|0);
        switch ($113<<24>>24) {
        case 104:  {
         $114 = HEAP8[$112>>0]|0;
         $115 = ($114<<24>>24)==(104);
         $116 = ((($$4)) + 2|0);
         $$319 = $115 ? $116 : $112;
         $$320 = $115 ? -2 : -1;
         $$0268 = $$320;$$5 = $$319;
         break;
        }
        case 108:  {
         $117 = HEAP8[$112>>0]|0;
         $118 = ($117<<24>>24)==(108);
         $119 = ((($$4)) + 2|0);
         $$321 = $118 ? $119 : $112;
         $$322 = $118 ? 3 : 1;
         $$0268 = $$322;$$5 = $$321;
         break;
        }
        case 106:  {
         $$0268 = 3;$$5 = $112;
         break;
        }
        case 116: case 122:  {
         $$0268 = 1;$$5 = $112;
         break;
        }
        case 76:  {
         $$0268 = 2;$$5 = $112;
         break;
        }
        case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
         $$0268 = 0;$$5 = $$4;
         break;
        }
        default: {
         $$7312 = $$1306;$$8302 = $$1295;
         label = 154;
         break L6;
        }
        }
        $120 = HEAP8[$$5>>0]|0;
        $121 = $120&255;
        $122 = $121 & 47;
        $123 = ($122|0)==(3);
        $124 = $121 | 32;
        $$ = $123 ? $124 : $121;
        $$$0268 = $123 ? 1 : $$0268;
        $trunc = $$&255;
        switch ($trunc<<24>>24) {
        case 99:  {
         $125 = ($$0266$lcssa|0)<(1);
         $$$0266 = $125 ? 1 : $$0266$lcssa;
         $$1267 = $$$0266;$$1284 = $$0283419;
         break;
        }
        case 91:  {
         $$1267 = $$0266$lcssa;$$1284 = $$0283419;
         break;
        }
        case 110:  {
         $126 = ($$0283419|0)<(0);
         $127 = $126 << 31 >> 31;
         $128 = ($$0293|0)==(0|0);
         if ($128) {
          $$11 = $$5;$$1289 = $$0288416;$$2285 = $$0283419;$$6311 = $$1306;$$7301 = $$1295;
          break L8;
         }
         switch ($$$0268|0) {
         case -2:  {
          $129 = $$0283419&255;
          HEAP8[$$0293>>0] = $129;
          $$11 = $$5;$$1289 = $$0288416;$$2285 = $$0283419;$$6311 = $$1306;$$7301 = $$1295;
          break L8;
          break;
         }
         case -1:  {
          $130 = $$0283419&65535;
          HEAP16[$$0293>>1] = $130;
          $$11 = $$5;$$1289 = $$0288416;$$2285 = $$0283419;$$6311 = $$1306;$$7301 = $$1295;
          break L8;
          break;
         }
         case 0:  {
          HEAP32[$$0293>>2] = $$0283419;
          $$11 = $$5;$$1289 = $$0288416;$$2285 = $$0283419;$$6311 = $$1306;$$7301 = $$1295;
          break L8;
          break;
         }
         case 1:  {
          HEAP32[$$0293>>2] = $$0283419;
          $$11 = $$5;$$1289 = $$0288416;$$2285 = $$0283419;$$6311 = $$1306;$$7301 = $$1295;
          break L8;
          break;
         }
         case 3:  {
          $131 = $$0293;
          $132 = $131;
          HEAP32[$132>>2] = $$0283419;
          $133 = (($131) + 4)|0;
          $134 = $133;
          HEAP32[$134>>2] = $127;
          $$11 = $$5;$$1289 = $$0288416;$$2285 = $$0283419;$$6311 = $$1306;$$7301 = $$1295;
          break L8;
          break;
         }
         default: {
          $$11 = $$5;$$1289 = $$0288416;$$2285 = $$0283419;$$6311 = $$1306;$$7301 = $$1295;
          break L8;
         }
         }
         break;
        }
        default: {
         ___shlim($0,0);
         while(1) {
          $135 = HEAP32[$14>>2]|0;
          $136 = HEAP32[$15>>2]|0;
          $137 = ($135>>>0)<($136>>>0);
          if ($137) {
           $138 = ((($135)) + 1|0);
           HEAP32[$14>>2] = $138;
           $139 = HEAP8[$135>>0]|0;
           $140 = $139&255;
           $142 = $140;
          } else {
           $141 = (___shgetc($0)|0);
           $142 = $141;
          }
          $143 = (_isspace($142)|0);
          $144 = ($143|0)==(0);
          if ($144) {
           break;
          }
         }
         $145 = HEAP32[$15>>2]|0;
         $146 = ($145|0)==(0|0);
         if ($146) {
          $$pre484 = HEAP32[$14>>2]|0;
          $154 = $$pre484;
         } else {
          $147 = HEAP32[$14>>2]|0;
          $148 = ((($147)) + -1|0);
          HEAP32[$14>>2] = $148;
          $149 = $148;
          $154 = $149;
         }
         $150 = HEAP32[$16>>2]|0;
         $151 = HEAP32[$17>>2]|0;
         $152 = (($150) + ($$0283419))|0;
         $153 = (($152) + ($154))|0;
         $155 = (($153) - ($151))|0;
         $$1267 = $$0266$lcssa;$$1284 = $155;
        }
        }
        ___shlim($0,$$1267);
        $156 = HEAP32[$14>>2]|0;
        $157 = HEAP32[$15>>2]|0;
        $158 = ($156>>>0)<($157>>>0);
        if ($158) {
         $159 = ((($156)) + 1|0);
         HEAP32[$14>>2] = $159;
         $162 = $157;
        } else {
         $160 = (___shgetc($0)|0);
         $161 = ($160|0)<(0);
         if ($161) {
          $$7312 = $$1306;$$8302 = $$1295;
          label = 154;
          break L6;
         }
         $$pre486 = HEAP32[$15>>2]|0;
         $162 = $$pre486;
        }
        $163 = ($162|0)==(0|0);
        if (!($163)) {
         $164 = HEAP32[$14>>2]|0;
         $165 = ((($164)) + -1|0);
         HEAP32[$14>>2] = $165;
        }
        L68: do {
         switch ($trunc<<24>>24) {
         case 91: case 99: case 115:  {
          $166 = ($$|0)==(99);
          $167 = $$ | 16;
          $168 = ($167|0)==(115);
          L70: do {
           if ($168) {
            $169 = ($$|0)==(115);
            _memset(($22|0),-1,256)|0;
            HEAP8[$5>>0] = 0;
            if ($169) {
             HEAP8[$19>>0] = 0;
             ;HEAP8[$18>>0]=0|0;HEAP8[$18+1>>0]=0|0;HEAP8[$18+2>>0]=0|0;HEAP8[$18+3>>0]=0|0;HEAP8[$18+4>>0]=0|0;
             $$9 = $$5;
            } else {
             $$9 = $$5;
            }
           } else {
            $170 = ((($$5)) + 1|0);
            $171 = HEAP8[$170>>0]|0;
            $172 = ($171<<24>>24)==(94);
            $173 = ((($$5)) + 2|0);
            $$0292 = $172&1;
            $$6 = $172 ? $173 : $170;
            $174 = $172&1;
            _memset(($23|0),($174|0),256)|0;
            HEAP8[$5>>0] = 0;
            $175 = HEAP8[$$6>>0]|0;
            switch ($175<<24>>24) {
            case 45:  {
             $176 = ((($$6)) + 1|0);
             $177 = $$0292 ^ 1;
             $178 = $177&255;
             HEAP8[$20>>0] = $178;
             $$7$ph = $176;$$pre$phi493Z2D = $178;
             break;
            }
            case 93:  {
             $179 = ((($$6)) + 1|0);
             $180 = $$0292 ^ 1;
             $181 = $180&255;
             HEAP8[$21>>0] = $181;
             $$7$ph = $179;$$pre$phi493Z2D = $181;
             break;
            }
            default: {
             $$pre491 = $$0292 ^ 1;
             $$pre492 = $$pre491&255;
             $$7$ph = $$6;$$pre$phi493Z2D = $$pre492;
            }
            }
            $$7 = $$7$ph;
            while(1) {
             $182 = HEAP8[$$7>>0]|0;
             L81: do {
              switch ($182<<24>>24) {
              case 0:  {
               $$7312 = $$1306;$$8302 = $$1295;
               label = 154;
               break L6;
               break;
              }
              case 93:  {
               $$9 = $$7;
               break L70;
               break;
              }
              case 45:  {
               $183 = ((($$7)) + 1|0);
               $184 = HEAP8[$183>>0]|0;
               switch ($184<<24>>24) {
               case 93: case 0:  {
                $$8 = $$7;$195 = 45;
                break L81;
                break;
               }
               default: {
               }
               }
               $185 = ((($$7)) + -1|0);
               $186 = HEAP8[$185>>0]|0;
               $187 = ($186&255)<($184&255);
               if ($187) {
                $188 = $186&255;
                $$0286411 = $188;
                while(1) {
                 $189 = (($$0286411) + 1)|0;
                 $190 = (($5) + ($189)|0);
                 HEAP8[$190>>0] = $$pre$phi493Z2D;
                 $191 = HEAP8[$183>>0]|0;
                 $192 = $191&255;
                 $193 = ($189|0)<($192|0);
                 if ($193) {
                  $$0286411 = $189;
                 } else {
                  $$8 = $183;$195 = $191;
                  break;
                 }
                }
               } else {
                $$8 = $183;$195 = $184;
               }
               break;
              }
              default: {
               $$8 = $$7;$195 = $182;
              }
              }
             } while(0);
             $194 = $195&255;
             $196 = (($194) + 1)|0;
             $197 = (($5) + ($196)|0);
             HEAP8[$197>>0] = $$pre$phi493Z2D;
             $198 = ((($$8)) + 1|0);
             $$7 = $198;
            }
           }
          } while(0);
          $199 = (($$1267) + 1)|0;
          $200 = $166 ? $199 : 31;
          $201 = ($$$0268|0)==(1);
          $202 = ($$0270|0)!=(0);
          L89: do {
           if ($201) {
            if ($202) {
             $203 = $200 << 2;
             $204 = (_malloc($203)|0);
             $205 = ($204|0)==(0|0);
             if ($205) {
              $$7312 = 0;$$8302 = $204;
              label = 154;
              break L6;
             } else {
              $$2296 = $204;
             }
            } else {
             $$2296 = $$0293;
            }
            HEAP32[$4>>2] = 0;
            HEAP32[$$sroa$2$0$$sroa_idx13>>2] = 0;
            $$0276$ph = $200;$$0278$ph = 0;$$3297$ph = $$2296;
            L95: while(1) {
             $206 = ($$3297$ph|0)==(0|0);
             $$0278$ph331 = $$0278$ph;
             while(1) {
              L99: while(1) {
               $207 = HEAP32[$14>>2]|0;
               $208 = HEAP32[$15>>2]|0;
               $209 = ($207>>>0)<($208>>>0);
               if ($209) {
                $210 = ((($207)) + 1|0);
                HEAP32[$14>>2] = $210;
                $211 = HEAP8[$207>>0]|0;
                $212 = $211&255;
                $215 = $212;
               } else {
                $213 = (___shgetc($0)|0);
                $215 = $213;
               }
               $214 = (($215) + 1)|0;
               $216 = (($5) + ($214)|0);
               $217 = HEAP8[$216>>0]|0;
               $218 = ($217<<24>>24)==(0);
               if ($218) {
                break L95;
               }
               $219 = $215&255;
               HEAP8[$7>>0] = $219;
               $220 = (_mbrtowc($6,$7,1,$4)|0);
               switch ($220|0) {
               case -1:  {
                $$7312 = 0;$$8302 = $$3297$ph;
                label = 154;
                break L6;
                break;
               }
               case -2:  {
                break;
               }
               default: {
                break L99;
               }
               }
              }
              if ($206) {
               $$1279 = $$0278$ph331;
              } else {
               $221 = (($$3297$ph) + ($$0278$ph331<<2)|0);
               $222 = (($$0278$ph331) + 1)|0;
               $223 = HEAP32[$6>>2]|0;
               HEAP32[$221>>2] = $223;
               $$1279 = $222;
              }
              $224 = ($$1279|0)==($$0276$ph|0);
              $or$cond = $202 & $224;
              if ($or$cond) {
               break;
              } else {
               $$0278$ph331 = $$1279;
              }
             }
             $factor327 = $$0276$ph << 1;
             $225 = $factor327 | 1;
             $226 = $225 << 2;
             $227 = (_realloc($$3297$ph,$226)|0);
             $228 = ($227|0)==(0|0);
             if ($228) {
              $$7312 = 0;$$8302 = $$3297$ph;
              label = 154;
              break L6;
             } else {
              $$0278$ph$phi = $$0276$ph;$$0276$ph = $225;$$3297$ph = $227;$$0278$ph = $$0278$ph$phi;
             }
            }
            $229 = (_mbsinit($4)|0);
            $230 = ($229|0)==(0);
            if ($230) {
             $$7312 = 0;$$8302 = $$3297$ph;
             label = 154;
             break L6;
            } else {
             $$4282 = $$0278$ph331;$$4309 = 0;$$5299 = $$3297$ph;
            }
           } else {
            if ($202) {
             $231 = (_malloc($200)|0);
             $232 = ($231|0)==(0|0);
             if ($232) {
              $$7312 = 0;$$8302 = 0;
              label = 154;
              break L6;
             } else {
              $$1277$ph = $200;$$2280$ph = 0;$$2307$ph = $231;
             }
             while(1) {
              $$2280 = $$2280$ph;
              while(1) {
               $233 = HEAP32[$14>>2]|0;
               $234 = HEAP32[$15>>2]|0;
               $235 = ($233>>>0)<($234>>>0);
               if ($235) {
                $236 = ((($233)) + 1|0);
                HEAP32[$14>>2] = $236;
                $237 = HEAP8[$233>>0]|0;
                $238 = $237&255;
                $241 = $238;
               } else {
                $239 = (___shgetc($0)|0);
                $241 = $239;
               }
               $240 = (($241) + 1)|0;
               $242 = (($5) + ($240)|0);
               $243 = HEAP8[$242>>0]|0;
               $244 = ($243<<24>>24)==(0);
               if ($244) {
                $$4282 = $$2280;$$4309 = $$2307$ph;$$5299 = 0;
                break L89;
               }
               $245 = $241&255;
               $246 = (($$2280) + 1)|0;
               $247 = (($$2307$ph) + ($$2280)|0);
               HEAP8[$247>>0] = $245;
               $248 = ($246|0)==($$1277$ph|0);
               if ($248) {
                break;
               } else {
                $$2280 = $246;
               }
              }
              $factor = $$1277$ph << 1;
              $249 = $factor | 1;
              $250 = (_realloc($$2307$ph,$249)|0);
              $251 = ($250|0)==(0|0);
              if ($251) {
               $$7312 = $$2307$ph;$$8302 = 0;
               label = 154;
               break L6;
              } else {
               $$2280$ph$phi = $$1277$ph;$$1277$ph = $249;$$2307$ph = $250;$$2280$ph = $$2280$ph$phi;
              }
             }
            }
            $252 = ($$0293|0)==(0|0);
            if ($252) {
             $270 = $162;
             while(1) {
              $268 = HEAP32[$14>>2]|0;
              $269 = ($268>>>0)<($270>>>0);
              if ($269) {
               $271 = ((($268)) + 1|0);
               HEAP32[$14>>2] = $271;
               $272 = HEAP8[$268>>0]|0;
               $273 = $272&255;
               $276 = $273;
              } else {
               $274 = (___shgetc($0)|0);
               $276 = $274;
              }
              $275 = (($276) + 1)|0;
              $277 = (($5) + ($275)|0);
              $278 = HEAP8[$277>>0]|0;
              $279 = ($278<<24>>24)==(0);
              if ($279) {
               $$4282 = 0;$$4309 = 0;$$5299 = 0;
               break L89;
              }
              $$pre489 = HEAP32[$15>>2]|0;
              $270 = $$pre489;
             }
            } else {
             $$3281 = 0;$255 = $162;
             while(1) {
              $253 = HEAP32[$14>>2]|0;
              $254 = ($253>>>0)<($255>>>0);
              if ($254) {
               $256 = ((($253)) + 1|0);
               HEAP32[$14>>2] = $256;
               $257 = HEAP8[$253>>0]|0;
               $258 = $257&255;
               $261 = $258;
              } else {
               $259 = (___shgetc($0)|0);
               $261 = $259;
              }
              $260 = (($261) + 1)|0;
              $262 = (($5) + ($260)|0);
              $263 = HEAP8[$262>>0]|0;
              $264 = ($263<<24>>24)==(0);
              if ($264) {
               $$4282 = $$3281;$$4309 = $$0293;$$5299 = 0;
               break L89;
              }
              $265 = $261&255;
              $266 = (($$3281) + 1)|0;
              $267 = (($$0293) + ($$3281)|0);
              HEAP8[$267>>0] = $265;
              $$pre488 = HEAP32[$15>>2]|0;
              $$3281 = $266;$255 = $$pre488;
             }
            }
           }
          } while(0);
          $280 = HEAP32[$15>>2]|0;
          $281 = ($280|0)==(0|0);
          if ($281) {
           $$pre490 = HEAP32[$14>>2]|0;
           $288 = $$pre490;
          } else {
           $282 = HEAP32[$14>>2]|0;
           $283 = ((($282)) + -1|0);
           HEAP32[$14>>2] = $283;
           $284 = $283;
           $288 = $284;
          }
          $285 = HEAP32[$16>>2]|0;
          $286 = HEAP32[$17>>2]|0;
          $287 = (($288) - ($286))|0;
          $289 = (($287) + ($285))|0;
          $290 = ($289|0)==(0);
          if ($290) {
           $$10304 = $$5299;$$2 = $$0270;$$2290 = $$0288416;$$9314 = $$4309;
           break L6;
          }
          $$not = $166 ^ 1;
          $291 = ($289|0)==($$1267|0);
          $or$cond318 = $291 | $$not;
          if (!($or$cond318)) {
           $$10304 = $$5299;$$2 = $$0270;$$2290 = $$0288416;$$9314 = $$4309;
           break L6;
          }
          do {
           if ($202) {
            if ($201) {
             HEAP32[$$0293>>2] = $$5299;
             break;
            } else {
             HEAP32[$$0293>>2] = $$4309;
             break;
            }
           }
          } while(0);
          if ($166) {
           $$10 = $$9;$$5310 = $$4309;$$6300 = $$5299;
          } else {
           $292 = ($$5299|0)==(0|0);
           if (!($292)) {
            $293 = (($$5299) + ($$4282<<2)|0);
            HEAP32[$293>>2] = 0;
           }
           $294 = ($$4309|0)==(0|0);
           if ($294) {
            $$10 = $$9;$$5310 = 0;$$6300 = $$5299;
            break L68;
           }
           $295 = (($$4309) + ($$4282)|0);
           HEAP8[$295>>0] = 0;
           $$10 = $$9;$$5310 = $$4309;$$6300 = $$5299;
          }
          break;
         }
         case 120: case 88: case 112:  {
          $$0272 = 16;
          label = 136;
          break;
         }
         case 111:  {
          $$0272 = 8;
          label = 136;
          break;
         }
         case 117: case 100:  {
          $$0272 = 10;
          label = 136;
          break;
         }
         case 105:  {
          $$0272 = 0;
          label = 136;
          break;
         }
         case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
          $313 = (+___floatscan($0,$$$0268,0));
          $314 = HEAP32[$16>>2]|0;
          $315 = HEAP32[$14>>2]|0;
          $316 = HEAP32[$17>>2]|0;
          $317 = (($316) - ($315))|0;
          $318 = ($314|0)==($317|0);
          if ($318) {
           $$10304 = $$1295;$$2 = $$0270;$$2290 = $$0288416;$$9314 = $$1306;
           break L6;
          }
          $319 = ($$0293|0)==(0|0);
          if ($319) {
           $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
          } else {
           switch ($$$0268|0) {
           case 0:  {
            $320 = $313;
            HEAPF32[$$0293>>2] = $320;
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L68;
            break;
           }
           case 1:  {
            HEAPF64[$$0293>>3] = $313;
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L68;
            break;
           }
           case 2:  {
            HEAPF64[$$0293>>3] = $313;
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L68;
            break;
           }
           default: {
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L68;
           }
           }
          }
          break;
         }
         default: {
          $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
         }
         }
        } while(0);
        L169: do {
         if ((label|0) == 136) {
          label = 0;
          $296 = (___intscan($0,$$0272,0,-1,-1)|0);
          $297 = tempRet0;
          $298 = HEAP32[$16>>2]|0;
          $299 = HEAP32[$14>>2]|0;
          $300 = HEAP32[$17>>2]|0;
          $301 = (($300) - ($299))|0;
          $302 = ($298|0)==($301|0);
          if ($302) {
           $$10304 = $$1295;$$2 = $$0270;$$2290 = $$0288416;$$9314 = $$1306;
           break L6;
          }
          $303 = ($$|0)==(112);
          $304 = ($$0293|0)!=(0|0);
          $or$cond3 = $304 & $303;
          if ($or$cond3) {
           $305 = $296;
           HEAP32[$$0293>>2] = $305;
           $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
           break;
          }
          $306 = ($$0293|0)==(0|0);
          if ($306) {
           $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
          } else {
           switch ($$$0268|0) {
           case -2:  {
            $307 = $296&255;
            HEAP8[$$0293>>0] = $307;
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L169;
            break;
           }
           case -1:  {
            $308 = $296&65535;
            HEAP16[$$0293>>1] = $308;
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L169;
            break;
           }
           case 0:  {
            HEAP32[$$0293>>2] = $296;
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L169;
            break;
           }
           case 1:  {
            HEAP32[$$0293>>2] = $296;
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L169;
            break;
           }
           case 3:  {
            $309 = $$0293;
            $310 = $309;
            HEAP32[$310>>2] = $296;
            $311 = (($309) + 4)|0;
            $312 = $311;
            HEAP32[$312>>2] = $297;
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L169;
            break;
           }
           default: {
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L169;
           }
           }
          }
         }
        } while(0);
        $321 = HEAP32[$16>>2]|0;
        $322 = HEAP32[$14>>2]|0;
        $323 = HEAP32[$17>>2]|0;
        $324 = (($321) + ($$1284))|0;
        $325 = (($324) + ($322))|0;
        $326 = (($325) - ($323))|0;
        $not$ = ($$0293|0)!=(0|0);
        $327 = $not$&1;
        $$0288$ = (($327) + ($$0288416))|0;
        $$11 = $$10;$$1289 = $$0288$;$$2285 = $326;$$6311 = $$5310;$$7301 = $$6300;
        break L8;
       }
      } while(0);
      $57 = $54&1;
      $58 = (($$0273420) + ($57)|0);
      ___shlim($0,0);
      $59 = HEAP32[$14>>2]|0;
      $60 = HEAP32[$15>>2]|0;
      $61 = ($59>>>0)<($60>>>0);
      if ($61) {
       $62 = ((($59)) + 1|0);
       HEAP32[$14>>2] = $62;
       $63 = HEAP8[$59>>0]|0;
       $64 = $63&255;
       $68 = $64;
      } else {
       $65 = (___shgetc($0)|0);
       $68 = $65;
      }
      $66 = HEAP8[$58>>0]|0;
      $67 = $66&255;
      $69 = ($68|0)==($67|0);
      if (!($69)) {
       label = 22;
       break L6;
      }
      $76 = (($$0283419) + 1)|0;
      $$11 = $58;$$1289 = $$0288416;$$2285 = $76;$$6311 = $$0305414;$$7301 = $$0294415;
     } else {
      $$1274 = $$0273420;
      while(1) {
       $28 = ((($$1274)) + 1|0);
       $29 = HEAP8[$28>>0]|0;
       $30 = $29&255;
       $31 = (_isspace($30)|0);
       $32 = ($31|0)==(0);
       if ($32) {
        break;
       } else {
        $$1274 = $28;
       }
      }
      ___shlim($0,0);
      while(1) {
       $33 = HEAP32[$14>>2]|0;
       $34 = HEAP32[$15>>2]|0;
       $35 = ($33>>>0)<($34>>>0);
       if ($35) {
        $36 = ((($33)) + 1|0);
        HEAP32[$14>>2] = $36;
        $37 = HEAP8[$33>>0]|0;
        $38 = $37&255;
        $40 = $38;
       } else {
        $39 = (___shgetc($0)|0);
        $40 = $39;
       }
       $41 = (_isspace($40)|0);
       $42 = ($41|0)==(0);
       if ($42) {
        break;
       }
      }
      $43 = HEAP32[$15>>2]|0;
      $44 = ($43|0)==(0|0);
      if ($44) {
       $$pre = HEAP32[$14>>2]|0;
       $52 = $$pre;
      } else {
       $45 = HEAP32[$14>>2]|0;
       $46 = ((($45)) + -1|0);
       HEAP32[$14>>2] = $46;
       $47 = $46;
       $52 = $47;
      }
      $48 = HEAP32[$16>>2]|0;
      $49 = HEAP32[$17>>2]|0;
      $50 = (($48) + ($$0283419))|0;
      $51 = (($50) + ($52))|0;
      $53 = (($51) - ($49))|0;
      $$11 = $$1274;$$1289 = $$0288416;$$2285 = $53;$$6311 = $$0305414;$$7301 = $$0294415;
     }
    } while(0);
    $328 = ((($$11)) + 1|0);
    $329 = HEAP8[$328>>0]|0;
    $330 = ($329<<24>>24)==(0);
    if ($330) {
     $$3291 = $$1289;
     break L4;
    } else {
     $$0273420 = $328;$$0283419 = $$2285;$$0288416 = $$1289;$$0294415 = $$7301;$$0305414 = $$6311;$25 = $329;
    }
   }
   if ((label|0) == 22) {
    $70 = HEAP32[$15>>2]|0;
    $71 = ($70|0)==(0|0);
    if (!($71)) {
     $72 = HEAP32[$14>>2]|0;
     $73 = ((($72)) + -1|0);
     HEAP32[$14>>2] = $73;
    }
    $74 = ($68|0)>(-1);
    $75 = ($$0288416|0)!=(0);
    $or$cond5 = $75 | $74;
    if ($or$cond5) {
     $$3291 = $$0288416;
     break;
    } else {
     $$1271 = 0;$$8313 = $$0305414;$$9303 = $$0294415;
     label = 155;
    }
   }
   else if ((label|0) == 154) {
    $$old4 = ($$0288416|0)==(0);
    if ($$old4) {
     $$1271 = $$0270;$$8313 = $$7312;$$9303 = $$8302;
     label = 155;
    } else {
     $$10304 = $$8302;$$2 = $$0270;$$2290 = $$0288416;$$9314 = $$7312;
    }
   }
   if ((label|0) == 155) {
    $$10304 = $$9303;$$2 = $$1271;$$2290 = -1;$$9314 = $$8313;
   }
   $331 = ($$2|0)==(0);
   if ($331) {
    $$3291 = $$2290;
   } else {
    _free($$9314);
    _free($$10304);
    $$3291 = $$2290;
   }
  }
 } while(0);
 $333 = ($332|0)==(0);
 if (!($333)) {
  ___unlockfile($0);
 }
 STACKTOP = sp;return ($$3291|0);
}
function _mbsinit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $5 = 1;
 } else {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0);
  $5 = $3;
 }
 $4 = $5&1;
 return ($4|0);
}
function ___floatscan($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$0340$i = 0, $$$0345$i = 0, $$$0380$i = 0, $$$0396$i = 0, $$$5350$i = 0, $$$5385$i = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0105$ph = 0, $$0106$ph = 0, $$0107$lcssa = 0, $$0107163 = 0, $$0113 = 0, $$0114 = 0.0, $$0133$i = 0, $$0142$i = 0, $$0146$i = 0, $$0148$i = 0, $$0151$i = 0.0;
 var $$0152$i = 0.0, $$0155$i = 0.0, $$0159$i = 0, $$0166$i = 0, $$0166169$i = 0, $$0166170$i = 0, $$0324$i = 0, $$0327480$i = 0, $$0328$i = 0, $$0329$i = 0, $$0331476$i = 0, $$0335486$i = 0, $$0336$lcssa$i = 0, $$0336453$i = 0, $$0336454$i = 0, $$0336455$i = 0, $$0336503$i = 0, $$0340$lcssa$i = 0, $$0340457$i = 0, $$0340458$i = 0;
 var $$0340459$i = 0, $$0340502$i = 0, $$0345$lcssa545$i = 0, $$0345484$i = 0, $$0355$i = 0.0, $$0356$i = 0.0, $$0360474$i = 0.0, $$0364$i = 0, $$0367$i = 0, $$0375$i = 0, $$0375$ph$i = 0, $$0380$lcssa544$i = 0, $$0380483$i = 0, $$0388$i = 0, $$0391$i = 0, $$0396$lcssa$i = 0, $$0396463$i = 0, $$0396464$i = 0, $$0396465$i = 0, $$0396499$i = 0;
 var $$1$i = 0.0, $$1$lcssa = 0, $$1$ph$i = 0, $$10$i = 0, $$1108 = 0, $$1147$i = 0, $$1149$i = 0, $$1153$i = 0.0, $$1156$i = 0.0, $$1160$i = 0, $$1164 = 0, $$1325$be$i = 0, $$1325$ph$i = 0, $$1330$i = 0, $$1332$i = 0, $$1357$i = 0.0, $$1361$i = 0.0, $$1365$i = 0, $$1368$i = 0, $$1368$ph438$i = 0;
 var $$1376$i = 0, $$1376$ph$i = 0, $$1376$ph549$i = 0, $$1389$lcssa$i = 0, $$1389501$i = 0, $$2 = 0, $$2$i = 0, $$2$i117 = 0, $$2$lcssa$i = 0, $$2109161 = 0, $$2144$i = 0, $$2150$i = 0, $$2154$i = 0.0, $$2157$i = 0.0, $$2161$i = 0, $$2338$i = 0, $$2342$i = 0, $$2347$ph439$i = 0, $$2362$i = 0.0, $$2366$i = 0;
 var $$2369$i = 0, $$2382$ph437$i = 0, $$2390$i = 0, $$2393$i = 0, $$2398$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3110 = 0, $$3145$i = 0, $$3158$lcssa$i = 0.0, $$3158179$i = 0.0, $$3162 = 0, $$3162$lcssa$i = 0, $$3162183$i = 0, $$3339493$i = 0, $$3343$i = 0, $$3359$i = 0.0, $$3363$i = 0.0, $$3370$i = 0, $$3378$i = 0;
 var $$3394$lcssa$i = 0, $$3394500$i = 0, $$3504$i = 0, $$4 = 0, $$4$i = 0.0, $$408$i = 0, $$4111 = 0, $$416$i = 0, $$4163$lcssa$i = 0, $$4163178$i = 0, $$4344485$i = 0, $$4349$i = 0, $$4349$ph$i = 0, $$4349$ph550$i = 0, $$4371$i = 0, $$4379$i = 0, $$4384$ph$i = 0, $$4384$ph435$i = 0, $$4395$i = 0, $$4475$i = 0;
 var $$5 = 0, $$5$$2369$i = 0, $$5$i = 0.0, $$5$i121 = 0, $$5$in$i = 0, $$5164$i = 0, $$5350478$i = 0, $$5385477$i = 0, $$6 = 0, $$6$i = 0, $$6373$ph$i = 0, $$6479$i = 0, $$9473$i = 0, $$in = 0, $$neg432$i = 0, $$neg433$i = 0, $$old8 = 0, $$pn$i = 0.0, $$pre$i = 0, $$pre$i119 = 0;
 var $$pre$phi202$iZ2D = 0.0, $$pre201$i = 0.0, $$promoted$i = 0, $$sink$off0$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0.0;
 var $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0, $286 = 0, $287 = 0.0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0;
 var $313 = 0.0, $314 = 0.0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0.0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0.0, $428 = 0.0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0.0, $445 = 0.0, $446 = 0.0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0.0, $457 = 0.0;
 var $458 = 0.0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0.0, $469 = 0.0, $47 = 0, $470 = 0.0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0.0, $483 = 0, $484 = 0.0, $485 = 0.0, $486 = 0, $487 = 0.0, $488 = 0, $489 = 0.0, $49 = 0, $490 = 0.0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0.0, $495 = 0.0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0.0, $501 = 0.0, $502 = 0.0, $503 = 0, $504 = 0, $505 = 0, $506 = 0.0, $507 = 0.0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0.0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0.0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0.0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0.0, $63 = 0, $630 = 0, $631 = 0, $632 = 0.0, $633 = 0.0, $634 = 0, $635 = 0.0, $636 = 0.0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0.0, $644 = 0.0, $645 = 0, $646 = 0.0, $647 = 0.0, $648 = 0.0, $649 = 0.0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0, $663 = 0.0, $664 = 0.0, $665 = 0, $666 = 0, $667 = 0, $668 = 0.0, $669 = 0.0, $67 = 0, $670 = 0.0, $671 = 0.0, $672 = 0, $673 = 0;
 var $674 = 0.0, $675 = 0, $676 = 0.0, $677 = 0.0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0.0, $683 = 0, $684 = 0, $685 = 0, $686 = 0.0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0.0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0;
 var $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond$i = 0, $exitcond$i = 0;
 var $exitcond541$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i118 = 0, $or$cond168$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond410$i = 0, $or$cond412$i = 0, $or$cond413$i = 0, $or$cond414$i = 0, $or$cond417$i = 0, $or$cond418$i = 0, $or$cond5 = 0, $or$cond571$i = 0, $or$cond6$i = 0, $or$cond6$i122 = 0, $or$cond7 = 0, $or$cond9 = 0, $or$cond9$i = 0;
 var $storemerge$i = 0, $sum$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $3 = sp;
 switch ($1|0) {
 case 0:  {
  $$0105$ph = -149;$$0106$ph = 24;
  label = 4;
  break;
 }
 case 1:  {
  $$0105$ph = -1074;$$0106$ph = 53;
  label = 4;
  break;
 }
 case 2:  {
  $$0105$ph = -1074;$$0106$ph = 53;
  label = 4;
  break;
 }
 default: {
  $$0114 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $4 = ((($0)) + 4|0);
   $5 = ((($0)) + 100|0);
   while(1) {
    $6 = HEAP32[$4>>2]|0;
    $7 = HEAP32[$5>>2]|0;
    $8 = ($6>>>0)<($7>>>0);
    if ($8) {
     $9 = ((($6)) + 1|0);
     HEAP32[$4>>2] = $9;
     $10 = HEAP8[$6>>0]|0;
     $11 = $10&255;
     $13 = $11;
    } else {
     $12 = (___shgetc($0)|0);
     $13 = $12;
    }
    $14 = (_isspace($13)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     break;
    }
   }
   $16 = ($13|0)==(45);
   L13: do {
    switch ($13|0) {
    case 43: case 45:  {
     $17 = $16&1;
     $18 = $17 << 1;
     $19 = (1 - ($18))|0;
     $20 = HEAP32[$4>>2]|0;
     $21 = HEAP32[$5>>2]|0;
     $22 = ($20>>>0)<($21>>>0);
     if ($22) {
      $23 = ((($20)) + 1|0);
      HEAP32[$4>>2] = $23;
      $24 = HEAP8[$20>>0]|0;
      $25 = $24&255;
      $$0 = $25;$$0113 = $19;
      break L13;
     } else {
      $26 = (___shgetc($0)|0);
      $$0 = $26;$$0113 = $19;
      break L13;
     }
     break;
    }
    default: {
     $$0 = $13;$$0113 = 1;
    }
    }
   } while(0);
   $$0107163 = 0;$$1164 = $$0;
   while(1) {
    $27 = $$1164 | 32;
    $28 = (31910 + ($$0107163)|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = $29 << 24 >> 24;
    $31 = ($27|0)==($30|0);
    if (!($31)) {
     $$0107$lcssa = $$0107163;$$1$lcssa = $$1164;
     break;
    }
    $32 = ($$0107163>>>0)<(7);
    do {
     if ($32) {
      $33 = HEAP32[$4>>2]|0;
      $34 = HEAP32[$5>>2]|0;
      $35 = ($33>>>0)<($34>>>0);
      if ($35) {
       $36 = ((($33)) + 1|0);
       HEAP32[$4>>2] = $36;
       $37 = HEAP8[$33>>0]|0;
       $38 = $37&255;
       $$2 = $38;
       break;
      } else {
       $39 = (___shgetc($0)|0);
       $$2 = $39;
       break;
      }
     } else {
      $$2 = $$1164;
     }
    } while(0);
    $40 = (($$0107163) + 1)|0;
    $41 = ($40>>>0)<(8);
    if ($41) {
     $$0107163 = $40;$$1164 = $$2;
    } else {
     $$0107$lcssa = $40;$$1$lcssa = $$2;
     break;
    }
   }
   L29: do {
    switch ($$0107$lcssa|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $42 = ($$0107$lcssa>>>0)>(3);
     $43 = ($2|0)!=(0);
     $or$cond5 = $43 & $42;
     if ($or$cond5) {
      $44 = ($$0107$lcssa|0)==(8);
      if ($44) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $57 = ($$0107$lcssa|0)==(0);
     L34: do {
      if ($57) {
       $$2109161 = 0;$$3162 = $$1$lcssa;
       while(1) {
        $58 = $$3162 | 32;
        $59 = (31919 + ($$2109161)|0);
        $60 = HEAP8[$59>>0]|0;
        $61 = $60 << 24 >> 24;
        $62 = ($58|0)==($61|0);
        if (!($62)) {
         $$3110 = $$2109161;$$5 = $$3162;
         break L34;
        }
        $63 = ($$2109161>>>0)<(2);
        do {
         if ($63) {
          $64 = HEAP32[$4>>2]|0;
          $65 = HEAP32[$5>>2]|0;
          $66 = ($64>>>0)<($65>>>0);
          if ($66) {
           $67 = ((($64)) + 1|0);
           HEAP32[$4>>2] = $67;
           $68 = HEAP8[$64>>0]|0;
           $69 = $68&255;
           $$4 = $69;
           break;
          } else {
           $70 = (___shgetc($0)|0);
           $$4 = $70;
           break;
          }
         } else {
          $$4 = $$3162;
         }
        } while(0);
        $71 = (($$2109161) + 1)|0;
        $72 = ($71>>>0)<(3);
        if ($72) {
         $$2109161 = $71;$$3162 = $$4;
        } else {
         $$3110 = $71;$$5 = $$4;
         break;
        }
       }
      } else {
       $$3110 = $$0107$lcssa;$$5 = $$1$lcssa;
      }
     } while(0);
     switch ($$3110|0) {
     case 3:  {
      $73 = HEAP32[$4>>2]|0;
      $74 = HEAP32[$5>>2]|0;
      $75 = ($73>>>0)<($74>>>0);
      if ($75) {
       $76 = ((($73)) + 1|0);
       HEAP32[$4>>2] = $76;
       $77 = HEAP8[$73>>0]|0;
       $78 = $77&255;
       $80 = $78;
      } else {
       $79 = (___shgetc($0)|0);
       $80 = $79;
      }
      $81 = ($80|0)==(40);
      if ($81) {
       $$4111 = 1;
      } else {
       $82 = HEAP32[$5>>2]|0;
       $83 = ($82|0)==(0|0);
       if ($83) {
        $$0114 = nan;
        break L4;
       }
       $84 = HEAP32[$4>>2]|0;
       $85 = ((($84)) + -1|0);
       HEAP32[$4>>2] = $85;
       $$0114 = nan;
       break L4;
      }
      while(1) {
       $86 = HEAP32[$4>>2]|0;
       $87 = HEAP32[$5>>2]|0;
       $88 = ($86>>>0)<($87>>>0);
       if ($88) {
        $89 = ((($86)) + 1|0);
        HEAP32[$4>>2] = $89;
        $90 = HEAP8[$86>>0]|0;
        $91 = $90&255;
        $94 = $91;
       } else {
        $92 = (___shgetc($0)|0);
        $94 = $92;
       }
       $93 = (($94) + -48)|0;
       $95 = ($93>>>0)<(10);
       $96 = (($94) + -65)|0;
       $97 = ($96>>>0)<(26);
       $or$cond = $95 | $97;
       if (!($or$cond)) {
        $98 = (($94) + -97)|0;
        $99 = ($98>>>0)<(26);
        $100 = ($94|0)==(95);
        $or$cond7 = $100 | $99;
        if (!($or$cond7)) {
         break;
        }
       }
       $112 = (($$4111) + 1)|0;
       $$4111 = $112;
      }
      $101 = ($94|0)==(41);
      if ($101) {
       $$0114 = nan;
       break L4;
      }
      $102 = HEAP32[$5>>2]|0;
      $103 = ($102|0)==(0|0);
      if (!($103)) {
       $104 = HEAP32[$4>>2]|0;
       $105 = ((($104)) + -1|0);
       HEAP32[$4>>2] = $105;
      }
      if (!($43)) {
       $107 = (___errno_location()|0);
       HEAP32[$107>>2] = 22;
       ___shlim($0,0);
       $$0114 = 0.0;
       break L4;
      }
      $106 = ($$4111|0)==(0);
      if ($106) {
       $$0114 = nan;
       break L4;
      } else {
       $$in = $$4111;
      }
      while(1) {
       $108 = (($$in) + -1)|0;
       if (!($103)) {
        $109 = HEAP32[$4>>2]|0;
        $110 = ((($109)) + -1|0);
        HEAP32[$4>>2] = $110;
       }
       $111 = ($108|0)==(0);
       if ($111) {
        $$0114 = nan;
        break L4;
       } else {
        $$in = $108;
       }
      }
      break;
     }
     case 0:  {
      $118 = ($$5|0)==(48);
      do {
       if ($118) {
        $119 = HEAP32[$4>>2]|0;
        $120 = HEAP32[$5>>2]|0;
        $121 = ($119>>>0)<($120>>>0);
        if ($121) {
         $122 = ((($119)) + 1|0);
         HEAP32[$4>>2] = $122;
         $123 = HEAP8[$119>>0]|0;
         $124 = $123&255;
         $127 = $124;
        } else {
         $125 = (___shgetc($0)|0);
         $127 = $125;
        }
        $126 = $127 | 32;
        $128 = ($126|0)==(120);
        if (!($128)) {
         $329 = HEAP32[$5>>2]|0;
         $330 = ($329|0)==(0|0);
         if ($330) {
          $$6 = 48;
          break;
         }
         $331 = HEAP32[$4>>2]|0;
         $332 = ((($331)) + -1|0);
         HEAP32[$4>>2] = $332;
         $$6 = 48;
         break;
        }
        $129 = HEAP32[$4>>2]|0;
        $130 = HEAP32[$5>>2]|0;
        $131 = ($129>>>0)<($130>>>0);
        if ($131) {
         $132 = ((($129)) + 1|0);
         HEAP32[$4>>2] = $132;
         $133 = HEAP8[$129>>0]|0;
         $134 = $133&255;
         $$0$i = $134;$$0142$i = 0;
        } else {
         $135 = (___shgetc($0)|0);
         $$0$i = $135;$$0142$i = 0;
        }
        L94: while(1) {
         switch ($$0$i|0) {
         case 46:  {
          label = 74;
          break L94;
          break;
         }
         case 48:  {
          break;
         }
         default: {
          $$0146$i = 0;$$0148$i = 0;$$0152$i = 1.0;$$0155$i = 0.0;$$0159$i = 0;$$2$i = $$0$i;$$2144$i = $$0142$i;$172 = 0;$174 = 0;$216 = 0;$218 = 0;
          break L94;
         }
         }
         $136 = HEAP32[$4>>2]|0;
         $137 = HEAP32[$5>>2]|0;
         $138 = ($136>>>0)<($137>>>0);
         if ($138) {
          $139 = ((($136)) + 1|0);
          HEAP32[$4>>2] = $139;
          $140 = HEAP8[$136>>0]|0;
          $141 = $140&255;
          $$0$i = $141;$$0142$i = 1;
          continue;
         } else {
          $142 = (___shgetc($0)|0);
          $$0$i = $142;$$0142$i = 1;
          continue;
         }
        }
        if ((label|0) == 74) {
         $143 = HEAP32[$4>>2]|0;
         $144 = HEAP32[$5>>2]|0;
         $145 = ($143>>>0)<($144>>>0);
         if ($145) {
          $146 = ((($143)) + 1|0);
          HEAP32[$4>>2] = $146;
          $147 = HEAP8[$143>>0]|0;
          $148 = $147&255;
          $$1$ph$i = $148;
         } else {
          $149 = (___shgetc($0)|0);
          $$1$ph$i = $149;
         }
         $150 = ($$1$ph$i|0)==(48);
         if ($150) {
          $158 = 0;$159 = 0;
          while(1) {
           $151 = HEAP32[$4>>2]|0;
           $152 = HEAP32[$5>>2]|0;
           $153 = ($151>>>0)<($152>>>0);
           if ($153) {
            $154 = ((($151)) + 1|0);
            HEAP32[$4>>2] = $154;
            $155 = HEAP8[$151>>0]|0;
            $156 = $155&255;
            $162 = $156;
           } else {
            $157 = (___shgetc($0)|0);
            $162 = $157;
           }
           $160 = (_i64Add(($158|0),($159|0),-1,-1)|0);
           $161 = tempRet0;
           $163 = ($162|0)==(48);
           if ($163) {
            $158 = $160;$159 = $161;
           } else {
            $$0146$i = 1;$$0148$i = 0;$$0152$i = 1.0;$$0155$i = 0.0;$$0159$i = 0;$$2$i = $162;$$2144$i = 1;$172 = 0;$174 = 0;$216 = $160;$218 = $161;
            break;
           }
          }
         } else {
          $$0146$i = 1;$$0148$i = 0;$$0152$i = 1.0;$$0155$i = 0.0;$$0159$i = 0;$$2$i = $$1$ph$i;$$2144$i = $$0142$i;$172 = 0;$174 = 0;$216 = 0;$218 = 0;
         }
        }
        while(1) {
         $164 = (($$2$i) + -48)|0;
         $165 = ($164>>>0)<(10);
         $$pre$i = $$2$i | 32;
         if ($165) {
          label = 86;
         } else {
          $166 = (($$pre$i) + -97)|0;
          $167 = ($166>>>0)<(6);
          $168 = ($$2$i|0)==(46);
          $or$cond6$i = $168 | $167;
          if (!($or$cond6$i)) {
           $$2$lcssa$i = $$2$i;
           break;
          }
          if ($168) {
           $169 = ($$0146$i|0)==(0);
           if ($169) {
            $$1147$i = 1;$$2150$i = $$0148$i;$$2154$i = $$0152$i;$$2157$i = $$0155$i;$$2161$i = $$0159$i;$$3145$i = $$2144$i;$693 = $174;$694 = $172;$695 = $174;$696 = $172;
           } else {
            $$2$lcssa$i = 46;
            break;
           }
          } else {
           label = 86;
          }
         }
         if ((label|0) == 86) {
          label = 0;
          $170 = ($$2$i|0)>(57);
          $171 = (($$pre$i) + -87)|0;
          $$0133$i = $170 ? $171 : $164;
          $173 = ($172|0)<(0);
          $175 = ($174>>>0)<(8);
          $176 = ($172|0)==(0);
          $177 = $176 & $175;
          $178 = $173 | $177;
          do {
           if ($178) {
            $179 = $$0159$i << 4;
            $180 = (($$0133$i) + ($179))|0;
            $$1149$i = $$0148$i;$$1153$i = $$0152$i;$$1156$i = $$0155$i;$$1160$i = $180;
           } else {
            $181 = ($172|0)<(0);
            $182 = ($174>>>0)<(14);
            $183 = ($172|0)==(0);
            $184 = $183 & $182;
            $185 = $181 | $184;
            if ($185) {
             $186 = (+($$0133$i|0));
             $187 = $$0152$i * 0.0625;
             $188 = $187 * $186;
             $189 = $$0155$i + $188;
             $$1149$i = $$0148$i;$$1153$i = $187;$$1156$i = $189;$$1160$i = $$0159$i;
             break;
            }
            $190 = ($$0133$i|0)==(0);
            $191 = ($$0148$i|0)!=(0);
            $or$cond$i = $191 | $190;
            if ($or$cond$i) {
             $$1149$i = $$0148$i;$$1153$i = $$0152$i;$$1156$i = $$0155$i;$$1160$i = $$0159$i;
            } else {
             $192 = $$0152$i * 0.5;
             $193 = $$0155$i + $192;
             $$1149$i = 1;$$1153$i = $$0152$i;$$1156$i = $193;$$1160$i = $$0159$i;
            }
           }
          } while(0);
          $194 = (_i64Add(($174|0),($172|0),1,0)|0);
          $195 = tempRet0;
          $$1147$i = $$0146$i;$$2150$i = $$1149$i;$$2154$i = $$1153$i;$$2157$i = $$1156$i;$$2161$i = $$1160$i;$$3145$i = 1;$693 = $216;$694 = $218;$695 = $194;$696 = $195;
         }
         $196 = HEAP32[$4>>2]|0;
         $197 = HEAP32[$5>>2]|0;
         $198 = ($196>>>0)<($197>>>0);
         if ($198) {
          $199 = ((($196)) + 1|0);
          HEAP32[$4>>2] = $199;
          $200 = HEAP8[$196>>0]|0;
          $201 = $200&255;
          $$0146$i = $$1147$i;$$0148$i = $$2150$i;$$0152$i = $$2154$i;$$0155$i = $$2157$i;$$0159$i = $$2161$i;$$2$i = $201;$$2144$i = $$3145$i;$172 = $696;$174 = $695;$216 = $693;$218 = $694;
          continue;
         } else {
          $202 = (___shgetc($0)|0);
          $$0146$i = $$1147$i;$$0148$i = $$2150$i;$$0152$i = $$2154$i;$$0155$i = $$2157$i;$$0159$i = $$2161$i;$$2$i = $202;$$2144$i = $$3145$i;$172 = $696;$174 = $695;$216 = $693;$218 = $694;
          continue;
         }
        }
        $203 = ($$2144$i|0)==(0);
        if ($203) {
         $204 = HEAP32[$5>>2]|0;
         $205 = ($204|0)==(0|0);
         if (!($205)) {
          $206 = HEAP32[$4>>2]|0;
          $207 = ((($206)) + -1|0);
          HEAP32[$4>>2] = $207;
         }
         $208 = ($2|0)==(0);
         if ($208) {
          ___shlim($0,0);
         } else {
          if (!($205)) {
           $209 = HEAP32[$4>>2]|0;
           $210 = ((($209)) + -1|0);
           HEAP32[$4>>2] = $210;
           $211 = ($$0146$i|0)==(0);
           if (!($211)) {
            $212 = ((($209)) + -2|0);
            HEAP32[$4>>2] = $212;
           }
          }
         }
         $213 = (+($$0113|0));
         $214 = $213 * 0.0;
         $$0114 = $214;
         break L4;
        }
        $215 = ($$0146$i|0)==(0);
        $217 = $215 ? $174 : $216;
        $219 = $215 ? $172 : $218;
        $220 = ($172|0)<(0);
        $221 = ($174>>>0)<(8);
        $222 = ($172|0)==(0);
        $223 = $222 & $221;
        $224 = $220 | $223;
        if ($224) {
         $$3162183$i = $$0159$i;$226 = $174;$227 = $172;
         while(1) {
          $225 = $$3162183$i << 4;
          $228 = (_i64Add(($226|0),($227|0),1,0)|0);
          $229 = tempRet0;
          $230 = ($229|0)<(0);
          $231 = ($228>>>0)<(8);
          $232 = ($229|0)==(0);
          $233 = $232 & $231;
          $234 = $230 | $233;
          if ($234) {
           $$3162183$i = $225;$226 = $228;$227 = $229;
          } else {
           $$3162$lcssa$i = $225;
           break;
          }
         }
        } else {
         $$3162$lcssa$i = $$0159$i;
        }
        $235 = $$2$lcssa$i | 32;
        $236 = ($235|0)==(112);
        if ($236) {
         $237 = (_scanexp($0,$2)|0);
         $238 = tempRet0;
         $239 = ($237|0)==(0);
         $240 = ($238|0)==(-2147483648);
         $241 = $239 & $240;
         if ($241) {
          $242 = ($2|0)==(0);
          if ($242) {
           ___shlim($0,0);
           $$0114 = 0.0;
           break L4;
          }
          $243 = HEAP32[$5>>2]|0;
          $244 = ($243|0)==(0|0);
          if ($244) {
           $255 = 0;$256 = 0;
          } else {
           $245 = HEAP32[$4>>2]|0;
           $246 = ((($245)) + -1|0);
           HEAP32[$4>>2] = $246;
           $255 = 0;$256 = 0;
          }
         } else {
          $255 = $237;$256 = $238;
         }
        } else {
         $247 = HEAP32[$5>>2]|0;
         $248 = ($247|0)==(0|0);
         if ($248) {
          $255 = 0;$256 = 0;
         } else {
          $249 = HEAP32[$4>>2]|0;
          $250 = ((($249)) + -1|0);
          HEAP32[$4>>2] = $250;
          $255 = 0;$256 = 0;
         }
        }
        $251 = (_bitshift64Shl(($217|0),($219|0),2)|0);
        $252 = tempRet0;
        $253 = (_i64Add(($251|0),($252|0),-32,-1)|0);
        $254 = tempRet0;
        $257 = (_i64Add(($253|0),($254|0),($255|0),($256|0))|0);
        $258 = tempRet0;
        $259 = ($$3162$lcssa$i|0)==(0);
        if ($259) {
         $260 = (+($$0113|0));
         $261 = $260 * 0.0;
         $$0114 = $261;
         break L4;
        }
        $262 = (0 - ($$0105$ph))|0;
        $263 = ($258|0)>(0);
        $264 = ($257>>>0)>($262>>>0);
        $265 = ($258|0)==(0);
        $266 = $265 & $264;
        $267 = $263 | $266;
        if ($267) {
         $268 = (___errno_location()|0);
         HEAP32[$268>>2] = 34;
         $269 = (+($$0113|0));
         $270 = $269 * 1.7976931348623157E+308;
         $271 = $270 * 1.7976931348623157E+308;
         $$0114 = $271;
         break L4;
        }
        $272 = (($$0105$ph) + -106)|0;
        $273 = ($272|0)<(0);
        $274 = $273 << 31 >> 31;
        $275 = ($258|0)<($274|0);
        $276 = ($257>>>0)<($272>>>0);
        $277 = ($258|0)==($274|0);
        $278 = $277 & $276;
        $279 = $275 | $278;
        if ($279) {
         $281 = (___errno_location()|0);
         HEAP32[$281>>2] = 34;
         $282 = (+($$0113|0));
         $283 = $282 * 2.2250738585072014E-308;
         $284 = $283 * 2.2250738585072014E-308;
         $$0114 = $284;
         break L4;
        }
        $280 = ($$3162$lcssa$i|0)>(-1);
        if ($280) {
         $$3158179$i = $$0155$i;$$4163178$i = $$3162$lcssa$i;$290 = $257;$291 = $258;
         while(1) {
          $285 = !($$3158179$i >= 0.5);
          $286 = $$4163178$i << 1;
          $287 = $$3158179$i + -1.0;
          $288 = $285&1;
          $289 = $288 | $286;
          $$5164$i = $289 ^ 1;
          $$pn$i = $285 ? $$3158179$i : $287;
          $$4$i = $$3158179$i + $$pn$i;
          $292 = (_i64Add(($290|0),($291|0),-1,-1)|0);
          $293 = tempRet0;
          $294 = ($289|0)>(-1);
          if ($294) {
           $$3158179$i = $$4$i;$$4163178$i = $$5164$i;$290 = $292;$291 = $293;
          } else {
           $$3158$lcssa$i = $$4$i;$$4163$lcssa$i = $$5164$i;$299 = $292;$300 = $293;
           break;
          }
         }
        } else {
         $$3158$lcssa$i = $$0155$i;$$4163$lcssa$i = $$3162$lcssa$i;$299 = $257;$300 = $258;
        }
        $295 = ($$0105$ph|0)<(0);
        $296 = $295 << 31 >> 31;
        $297 = (_i64Subtract(32,0,($$0105$ph|0),($296|0))|0);
        $298 = tempRet0;
        $301 = (_i64Add(($299|0),($300|0),($297|0),($298|0))|0);
        $302 = tempRet0;
        $303 = (0)>($302|0);
        $304 = ($$0106$ph>>>0)>($301>>>0);
        $305 = (0)==($302|0);
        $306 = $305 & $304;
        $307 = $303 | $306;
        if ($307) {
         $308 = ($301|0)<(0);
         if ($308) {
          $$0166170$i = 0;$311 = 84;
          label = 127;
         } else {
          $$0166$i = $301;
          label = 125;
         }
        } else {
         $$0166$i = $$0106$ph;
         label = 125;
        }
        if ((label|0) == 125) {
         $309 = ($$0166$i|0)<(53);
         $310 = (84 - ($$0166$i))|0;
         if ($309) {
          $$0166170$i = $$0166$i;$311 = $310;
          label = 127;
         } else {
          $$pre201$i = (+($$0113|0));
          $$0151$i = 0.0;$$0166169$i = $$0166$i;$$pre$phi202$iZ2D = $$pre201$i;
         }
        }
        if ((label|0) == 127) {
         $312 = (+_scalbn(1.0,$311));
         $313 = (+($$0113|0));
         $314 = (+_copysignl($312,$313));
         $$0151$i = $314;$$0166169$i = $$0166170$i;$$pre$phi202$iZ2D = $313;
        }
        $315 = ($$0166169$i|0)<(32);
        $316 = $$3158$lcssa$i != 0.0;
        $or$cond4$i = $316 & $315;
        $317 = $$4163$lcssa$i & 1;
        $318 = ($317|0)==(0);
        $or$cond168$i = $318 & $or$cond4$i;
        $319 = $or$cond168$i&1;
        $$6$i = (($319) + ($$4163$lcssa$i))|0;
        $$5$i = $or$cond168$i ? 0.0 : $$3158$lcssa$i;
        $320 = (+($$6$i>>>0));
        $321 = $$pre$phi202$iZ2D * $320;
        $322 = $$0151$i + $321;
        $323 = $$pre$phi202$iZ2D * $$5$i;
        $324 = $323 + $322;
        $325 = $324 - $$0151$i;
        $326 = $325 != 0.0;
        if (!($326)) {
         $327 = (___errno_location()|0);
         HEAP32[$327>>2] = 34;
        }
        $328 = (+_scalbnl($325,$299));
        $$0114 = $328;
        break L4;
       } else {
        $$6 = $$5;
       }
      } while(0);
      $sum$i = (($$0105$ph) + ($$0106$ph))|0;
      $333 = (0 - ($sum$i))|0;
      $$0324$i = $$6;$$0391$i = 0;
      L184: while(1) {
       switch ($$0324$i|0) {
       case 46:  {
        label = 138;
        break L184;
        break;
       }
       case 48:  {
        break;
       }
       default: {
        $$0388$i = 0;$$2$i117 = $$0324$i;$$2393$i = $$0391$i;$697 = 0;$698 = 0;
        break L184;
       }
       }
       $334 = HEAP32[$4>>2]|0;
       $335 = HEAP32[$5>>2]|0;
       $336 = ($334>>>0)<($335>>>0);
       if ($336) {
        $337 = ((($334)) + 1|0);
        HEAP32[$4>>2] = $337;
        $338 = HEAP8[$334>>0]|0;
        $339 = $338&255;
        $$0324$i = $339;$$0391$i = 1;
        continue;
       } else {
        $340 = (___shgetc($0)|0);
        $$0324$i = $340;$$0391$i = 1;
        continue;
       }
      }
      if ((label|0) == 138) {
       $341 = HEAP32[$4>>2]|0;
       $342 = HEAP32[$5>>2]|0;
       $343 = ($341>>>0)<($342>>>0);
       if ($343) {
        $344 = ((($341)) + 1|0);
        HEAP32[$4>>2] = $344;
        $345 = HEAP8[$341>>0]|0;
        $346 = $345&255;
        $$1325$ph$i = $346;
       } else {
        $347 = (___shgetc($0)|0);
        $$1325$ph$i = $347;
       }
       $348 = ($$1325$ph$i|0)==(48);
       if ($348) {
        $349 = 0;$350 = 0;
        while(1) {
         $351 = (_i64Add(($349|0),($350|0),-1,-1)|0);
         $352 = tempRet0;
         $353 = HEAP32[$4>>2]|0;
         $354 = HEAP32[$5>>2]|0;
         $355 = ($353>>>0)<($354>>>0);
         if ($355) {
          $356 = ((($353)) + 1|0);
          HEAP32[$4>>2] = $356;
          $357 = HEAP8[$353>>0]|0;
          $358 = $357&255;
          $$1325$be$i = $358;
         } else {
          $359 = (___shgetc($0)|0);
          $$1325$be$i = $359;
         }
         $360 = ($$1325$be$i|0)==(48);
         if ($360) {
          $349 = $351;$350 = $352;
         } else {
          $$0388$i = 1;$$2$i117 = $$1325$be$i;$$2393$i = 1;$697 = $351;$698 = $352;
          break;
         }
        }
       } else {
        $$0388$i = 1;$$2$i117 = $$1325$ph$i;$$2393$i = $$0391$i;$697 = 0;$698 = 0;
       }
      }
      HEAP32[$3>>2] = 0;
      $361 = (($$2$i117) + -48)|0;
      $362 = ($361>>>0)<(10);
      $363 = ($$2$i117|0)==(46);
      $364 = $363 | $362;
      L203: do {
       if ($364) {
        $365 = ((($3)) + 496|0);
        $$0336503$i = 0;$$0340502$i = 0;$$0396499$i = 0;$$1389501$i = $$0388$i;$$3394500$i = $$2393$i;$$3504$i = $$2$i117;$368 = 0;$369 = 0;$699 = $363;$700 = $361;$701 = $697;$702 = $698;
        L205: while(1) {
         do {
          if ($699) {
           $cond$i = ($$1389501$i|0)==(0);
           if ($cond$i) {
            $$2338$i = $$0336503$i;$$2342$i = $$0340502$i;$$2390$i = 1;$$2398$i = $$0396499$i;$$4395$i = $$3394500$i;$703 = $368;$704 = $369;$705 = $368;$706 = $369;
           } else {
            break L205;
           }
          } else {
           $367 = ($$0340502$i|0)<(125);
           $370 = (_i64Add(($368|0),($369|0),1,0)|0);
           $371 = tempRet0;
           $372 = ($$3504$i|0)!=(48);
           if (!($367)) {
            if (!($372)) {
             $$2338$i = $$0336503$i;$$2342$i = $$0340502$i;$$2390$i = $$1389501$i;$$2398$i = $$0396499$i;$$4395$i = $$3394500$i;$703 = $701;$704 = $702;$705 = $370;$706 = $371;
             break;
            }
            $382 = HEAP32[$365>>2]|0;
            $383 = $382 | 1;
            HEAP32[$365>>2] = $383;
            $$2338$i = $$0336503$i;$$2342$i = $$0340502$i;$$2390$i = $$1389501$i;$$2398$i = $$0396499$i;$$4395$i = $$3394500$i;$703 = $701;$704 = $702;$705 = $370;$706 = $371;
            break;
           }
           $$$0396$i = $372 ? $370 : $$0396499$i;
           $373 = ($$0336503$i|0)==(0);
           $374 = (($3) + ($$0340502$i<<2)|0);
           if ($373) {
            $storemerge$i = $700;
           } else {
            $375 = (($$3504$i) + -48)|0;
            $376 = HEAP32[$374>>2]|0;
            $377 = ($376*10)|0;
            $378 = (($375) + ($377))|0;
            $storemerge$i = $378;
           }
           HEAP32[$374>>2] = $storemerge$i;
           $379 = (($$0336503$i) + 1)|0;
           $380 = ($379|0)==(9);
           $381 = $380&1;
           $$$0340$i = (($381) + ($$0340502$i))|0;
           $$408$i = $380 ? 0 : $379;
           $$2338$i = $$408$i;$$2342$i = $$$0340$i;$$2390$i = $$1389501$i;$$2398$i = $$$0396$i;$$4395$i = 1;$703 = $701;$704 = $702;$705 = $370;$706 = $371;
          }
         } while(0);
         $384 = HEAP32[$4>>2]|0;
         $385 = HEAP32[$5>>2]|0;
         $386 = ($384>>>0)<($385>>>0);
         if ($386) {
          $387 = ((($384)) + 1|0);
          HEAP32[$4>>2] = $387;
          $388 = HEAP8[$384>>0]|0;
          $389 = $388&255;
          $$3$be$i = $389;
         } else {
          $390 = (___shgetc($0)|0);
          $$3$be$i = $390;
         }
         $391 = (($$3$be$i) + -48)|0;
         $392 = ($391>>>0)<(10);
         $393 = ($$3$be$i|0)==(46);
         $394 = $393 | $392;
         if ($394) {
          $$0336503$i = $$2338$i;$$0340502$i = $$2342$i;$$0396499$i = $$2398$i;$$1389501$i = $$2390$i;$$3394500$i = $$4395$i;$$3504$i = $$3$be$i;$368 = $705;$369 = $706;$699 = $393;$700 = $391;$701 = $703;$702 = $704;
         } else {
          $$0336$lcssa$i = $$2338$i;$$0340$lcssa$i = $$2342$i;$$0396$lcssa$i = $$2398$i;$$1389$lcssa$i = $$2390$i;$$3$lcssa$i = $$3$be$i;$$3394$lcssa$i = $$4395$i;$396 = $703;$397 = $705;$399 = $704;$400 = $706;
          label = 161;
          break L203;
         }
        }
        $366 = ($$3394500$i|0)!=(0);
        $$0336455$i = $$0336503$i;$$0340459$i = $$0340502$i;$$0396465$i = $$0396499$i;$707 = $368;$708 = $369;$709 = $701;$710 = $702;$711 = $366;
        label = 169;
       } else {
        $$0336$lcssa$i = 0;$$0340$lcssa$i = 0;$$0396$lcssa$i = 0;$$1389$lcssa$i = $$0388$i;$$3$lcssa$i = $$2$i117;$$3394$lcssa$i = $$2393$i;$396 = $697;$397 = 0;$399 = $698;$400 = 0;
        label = 161;
       }
      } while(0);
      do {
       if ((label|0) == 161) {
        $395 = ($$1389$lcssa$i|0)==(0);
        $398 = $395 ? $397 : $396;
        $401 = $395 ? $400 : $399;
        $402 = ($$3394$lcssa$i|0)!=(0);
        $403 = $$3$lcssa$i | 32;
        $404 = ($403|0)==(101);
        $or$cond410$i = $402 & $404;
        if (!($or$cond410$i)) {
         $419 = ($$3$lcssa$i|0)>(-1);
         if ($419) {
          $$0336455$i = $$0336$lcssa$i;$$0340459$i = $$0340$lcssa$i;$$0396465$i = $$0396$lcssa$i;$707 = $397;$708 = $400;$709 = $398;$710 = $401;$711 = $402;
          label = 169;
          break;
         } else {
          $$0336454$i = $$0336$lcssa$i;$$0340458$i = $$0340$lcssa$i;$$0396464$i = $$0396$lcssa$i;$712 = $397;$713 = $400;$714 = $402;$715 = $398;$716 = $401;
          label = 171;
          break;
         }
        }
        $405 = (_scanexp($0,$2)|0);
        $406 = tempRet0;
        $407 = ($405|0)==(0);
        $408 = ($406|0)==(-2147483648);
        $409 = $407 & $408;
        if ($409) {
         $410 = ($2|0)==(0);
         if ($410) {
          ___shlim($0,0);
          $$1$i = 0.0;
          break;
         }
         $411 = HEAP32[$5>>2]|0;
         $412 = ($411|0)==(0|0);
         if ($412) {
          $415 = 0;$416 = 0;
         } else {
          $413 = HEAP32[$4>>2]|0;
          $414 = ((($413)) + -1|0);
          HEAP32[$4>>2] = $414;
          $415 = 0;$416 = 0;
         }
        } else {
         $415 = $405;$416 = $406;
        }
        $417 = (_i64Add(($415|0),($416|0),($398|0),($401|0))|0);
        $418 = tempRet0;
        $$0336453$i = $$0336$lcssa$i;$$0340457$i = $$0340$lcssa$i;$$0396463$i = $$0396$lcssa$i;$429 = $417;$431 = $397;$432 = $418;$434 = $400;
        label = 173;
       }
      } while(0);
      if ((label|0) == 169) {
       $420 = HEAP32[$5>>2]|0;
       $421 = ($420|0)==(0|0);
       if ($421) {
        $$0336454$i = $$0336455$i;$$0340458$i = $$0340459$i;$$0396464$i = $$0396465$i;$712 = $707;$713 = $708;$714 = $711;$715 = $709;$716 = $710;
        label = 171;
       } else {
        $422 = HEAP32[$4>>2]|0;
        $423 = ((($422)) + -1|0);
        HEAP32[$4>>2] = $423;
        if ($711) {
         $$0336453$i = $$0336455$i;$$0340457$i = $$0340459$i;$$0396463$i = $$0396465$i;$429 = $709;$431 = $707;$432 = $710;$434 = $708;
         label = 173;
        } else {
         label = 172;
        }
       }
      }
      if ((label|0) == 171) {
       if ($714) {
        $$0336453$i = $$0336454$i;$$0340457$i = $$0340458$i;$$0396463$i = $$0396464$i;$429 = $715;$431 = $712;$432 = $716;$434 = $713;
        label = 173;
       } else {
        label = 172;
       }
      }
      do {
       if ((label|0) == 172) {
        $424 = (___errno_location()|0);
        HEAP32[$424>>2] = 22;
        ___shlim($0,0);
        $$1$i = 0.0;
       }
       else if ((label|0) == 173) {
        $425 = HEAP32[$3>>2]|0;
        $426 = ($425|0)==(0);
        if ($426) {
         $427 = (+($$0113|0));
         $428 = $427 * 0.0;
         $$1$i = $428;
         break;
        }
        $430 = ($429|0)==($431|0);
        $433 = ($432|0)==($434|0);
        $435 = $430 & $433;
        $436 = ($434|0)<(0);
        $437 = ($431>>>0)<(10);
        $438 = ($434|0)==(0);
        $439 = $438 & $437;
        $440 = $436 | $439;
        $or$cond$i118 = $440 & $435;
        if ($or$cond$i118) {
         $441 = ($$0106$ph>>>0)>(30);
         $442 = $425 >>> $$0106$ph;
         $443 = ($442|0)==(0);
         $or$cond412$i = $441 | $443;
         if ($or$cond412$i) {
          $444 = (+($$0113|0));
          $445 = (+($425>>>0));
          $446 = $444 * $445;
          $$1$i = $446;
          break;
         }
        }
        $447 = (($$0105$ph|0) / -2)&-1;
        $448 = ($447|0)<(0);
        $449 = $448 << 31 >> 31;
        $450 = ($432|0)>($449|0);
        $451 = ($429>>>0)>($447>>>0);
        $452 = ($432|0)==($449|0);
        $453 = $452 & $451;
        $454 = $450 | $453;
        if ($454) {
         $455 = (___errno_location()|0);
         HEAP32[$455>>2] = 34;
         $456 = (+($$0113|0));
         $457 = $456 * 1.7976931348623157E+308;
         $458 = $457 * 1.7976931348623157E+308;
         $$1$i = $458;
         break;
        }
        $459 = (($$0105$ph) + -106)|0;
        $460 = ($459|0)<(0);
        $461 = $460 << 31 >> 31;
        $462 = ($432|0)<($461|0);
        $463 = ($429>>>0)<($459>>>0);
        $464 = ($432|0)==($461|0);
        $465 = $464 & $463;
        $466 = $462 | $465;
        if ($466) {
         $467 = (___errno_location()|0);
         HEAP32[$467>>2] = 34;
         $468 = (+($$0113|0));
         $469 = $468 * 2.2250738585072014E-308;
         $470 = $469 * 2.2250738585072014E-308;
         $$1$i = $470;
         break;
        }
        $471 = ($$0336453$i|0)==(0);
        if ($471) {
         $$3343$i = $$0340457$i;
        } else {
         $472 = ($$0336453$i|0)<(9);
         if ($472) {
          $473 = (($3) + ($$0340457$i<<2)|0);
          $$promoted$i = HEAP32[$473>>2]|0;
          $$3339493$i = $$0336453$i;$475 = $$promoted$i;
          while(1) {
           $474 = ($475*10)|0;
           $476 = (($$3339493$i) + 1)|0;
           $exitcond541$i = ($476|0)==(9);
           if ($exitcond541$i) {
            break;
           } else {
            $$3339493$i = $476;$475 = $474;
           }
          }
          HEAP32[$473>>2] = $474;
         }
         $477 = (($$0340457$i) + 1)|0;
         $$3343$i = $477;
        }
        $478 = ($$0396463$i|0)<(9);
        if ($478) {
         $479 = ($$0396463$i|0)<=($429|0);
         $480 = ($429|0)<(18);
         $or$cond3$i = $479 & $480;
         if ($or$cond3$i) {
          $481 = ($429|0)==(9);
          if ($481) {
           $482 = (+($$0113|0));
           $483 = HEAP32[$3>>2]|0;
           $484 = (+($483>>>0));
           $485 = $482 * $484;
           $$1$i = $485;
           break;
          }
          $486 = ($429|0)<(9);
          if ($486) {
           $487 = (+($$0113|0));
           $488 = HEAP32[$3>>2]|0;
           $489 = (+($488>>>0));
           $490 = $487 * $489;
           $491 = (8 - ($429))|0;
           $492 = (12248 + ($491<<2)|0);
           $493 = HEAP32[$492>>2]|0;
           $494 = (+($493|0));
           $495 = $490 / $494;
           $$1$i = $495;
           break;
          }
          $$neg432$i = Math_imul($429, -3)|0;
          $$neg433$i = (($$0106$ph) + 27)|0;
          $496 = (($$neg433$i) + ($$neg432$i))|0;
          $497 = ($496|0)>(30);
          $$pre$i119 = HEAP32[$3>>2]|0;
          $498 = $$pre$i119 >>> $496;
          $499 = ($498|0)==(0);
          $or$cond571$i = $497 | $499;
          if ($or$cond571$i) {
           $500 = (+($$0113|0));
           $501 = (+($$pre$i119>>>0));
           $502 = $500 * $501;
           $503 = (($429) + -10)|0;
           $504 = (12248 + ($503<<2)|0);
           $505 = HEAP32[$504>>2]|0;
           $506 = (+($505|0));
           $507 = $502 * $506;
           $$1$i = $507;
           break;
          }
         }
        }
        $508 = (($429|0) % 9)&-1;
        $509 = ($508|0)==(0);
        if ($509) {
         $$0375$ph$i = 0;$$1368$ph438$i = $$3343$i;$$2347$ph439$i = 0;$$2382$ph437$i = $429;
        } else {
         $510 = ($429|0)>(-1);
         $511 = (($508) + 9)|0;
         $512 = $510 ? $508 : $511;
         $513 = (8 - ($512))|0;
         $514 = (12248 + ($513<<2)|0);
         $515 = HEAP32[$514>>2]|0;
         $516 = ($$3343$i|0)==(0);
         if ($516) {
          $$0345$lcssa545$i = 0;$$0367$i = 0;$$0380$lcssa544$i = $429;
         } else {
          $517 = (1000000000 / ($515|0))&-1;
          $$0335486$i = 0;$$0345484$i = 0;$$0380483$i = $429;$$4344485$i = 0;
          while(1) {
           $518 = (($3) + ($$4344485$i<<2)|0);
           $519 = HEAP32[$518>>2]|0;
           $520 = (($519>>>0) % ($515>>>0))&-1;
           $521 = (($519>>>0) / ($515>>>0))&-1;
           $522 = (($521) + ($$0335486$i))|0;
           HEAP32[$518>>2] = $522;
           $523 = Math_imul($520, $517)|0;
           $524 = ($$4344485$i|0)==($$0345484$i|0);
           $525 = ($522|0)==(0);
           $or$cond413$i = $524 & $525;
           $526 = (($$0345484$i) + 1)|0;
           $527 = $526 & 127;
           $528 = (($$0380483$i) + -9)|0;
           $$$0380$i = $or$cond413$i ? $528 : $$0380483$i;
           $$$0345$i = $or$cond413$i ? $527 : $$0345484$i;
           $529 = (($$4344485$i) + 1)|0;
           $530 = ($529|0)==($$3343$i|0);
           if ($530) {
            break;
           } else {
            $$0335486$i = $523;$$0345484$i = $$$0345$i;$$0380483$i = $$$0380$i;$$4344485$i = $529;
           }
          }
          $531 = ($523|0)==(0);
          if ($531) {
           $$0345$lcssa545$i = $$$0345$i;$$0367$i = $$3343$i;$$0380$lcssa544$i = $$$0380$i;
          } else {
           $532 = (($$3343$i) + 1)|0;
           $533 = (($3) + ($$3343$i<<2)|0);
           HEAP32[$533>>2] = $523;
           $$0345$lcssa545$i = $$$0345$i;$$0367$i = $532;$$0380$lcssa544$i = $$$0380$i;
          }
         }
         $534 = (9 - ($512))|0;
         $535 = (($534) + ($$0380$lcssa544$i))|0;
         $$0375$ph$i = 0;$$1368$ph438$i = $$0367$i;$$2347$ph439$i = $$0345$lcssa545$i;$$2382$ph437$i = $535;
        }
        L284: while(1) {
         $536 = ($$2382$ph437$i|0)<(18);
         $537 = ($$2382$ph437$i|0)==(18);
         $538 = (($3) + ($$2347$ph439$i<<2)|0);
         $$0375$i = $$0375$ph$i;$$1368$i = $$1368$ph438$i;
         while(1) {
          if (!($536)) {
           if (!($537)) {
            $$1376$ph$i = $$0375$i;$$4349$ph$i = $$2347$ph439$i;$$4384$ph435$i = $$2382$ph437$i;$$6373$ph$i = $$1368$i;
            break L284;
           }
           $539 = HEAP32[$538>>2]|0;
           $540 = ($539>>>0)<(9007199);
           if (!($540)) {
            $$1376$ph$i = $$0375$i;$$4349$ph$i = $$2347$ph439$i;$$4384$ph435$i = 18;$$6373$ph$i = $$1368$i;
            break L284;
           }
          }
          $541 = (($$1368$i) + 127)|0;
          $$0329$i = 0;$$2369$i = $$1368$i;$$5$in$i = $541;
          while(1) {
           $$5$i121 = $$5$in$i & 127;
           $542 = (($3) + ($$5$i121<<2)|0);
           $543 = HEAP32[$542>>2]|0;
           $544 = (_bitshift64Shl(($543|0),0,29)|0);
           $545 = tempRet0;
           $546 = (_i64Add(($544|0),($545|0),($$0329$i|0),0)|0);
           $547 = tempRet0;
           $548 = ($547>>>0)>(0);
           $549 = ($546>>>0)>(1000000000);
           $550 = ($547|0)==(0);
           $551 = $550 & $549;
           $552 = $548 | $551;
           if ($552) {
            $553 = (___udivdi3(($546|0),($547|0),1000000000,0)|0);
            $554 = tempRet0;
            $555 = (___uremdi3(($546|0),($547|0),1000000000,0)|0);
            $556 = tempRet0;
            $$1330$i = $553;$$sink$off0$i = $555;
           } else {
            $$1330$i = 0;$$sink$off0$i = $546;
           }
           HEAP32[$542>>2] = $$sink$off0$i;
           $557 = (($$2369$i) + 127)|0;
           $558 = $557 & 127;
           $559 = ($$5$i121|0)!=($558|0);
           $560 = ($$5$i121|0)==($$2347$ph439$i|0);
           $or$cond414$i = $559 | $560;
           $561 = ($$sink$off0$i|0)==(0);
           $$5$$2369$i = $561 ? $$5$i121 : $$2369$i;
           $$3370$i = $or$cond414$i ? $$2369$i : $$5$$2369$i;
           $562 = (($$5$i121) + -1)|0;
           if ($560) {
            break;
           } else {
            $$0329$i = $$1330$i;$$2369$i = $$3370$i;$$5$in$i = $562;
           }
          }
          $563 = (($$0375$i) + -29)|0;
          $564 = ($$1330$i|0)==(0);
          if ($564) {
           $$0375$i = $563;$$1368$i = $$3370$i;
          } else {
           break;
          }
         }
         $565 = (($$2382$ph437$i) + 9)|0;
         $566 = (($$2347$ph439$i) + 127)|0;
         $567 = $566 & 127;
         $568 = ($567|0)==($$3370$i|0);
         $569 = (($$3370$i) + 127)|0;
         $570 = $569 & 127;
         $571 = (($$3370$i) + 126)|0;
         $572 = $571 & 127;
         $573 = (($3) + ($572<<2)|0);
         if ($568) {
          $574 = (($3) + ($570<<2)|0);
          $575 = HEAP32[$574>>2]|0;
          $576 = HEAP32[$573>>2]|0;
          $577 = $576 | $575;
          HEAP32[$573>>2] = $577;
          $$4371$i = $570;
         } else {
          $$4371$i = $$3370$i;
         }
         $578 = (($3) + ($567<<2)|0);
         HEAP32[$578>>2] = $$1330$i;
         $$0375$ph$i = $563;$$1368$ph438$i = $$4371$i;$$2347$ph439$i = $567;$$2382$ph437$i = $565;
        }
        L302: while(1) {
         $615 = (($$6373$ph$i) + 1)|0;
         $612 = $615 & 127;
         $616 = (($$6373$ph$i) + 127)|0;
         $617 = $616 & 127;
         $618 = (($3) + ($617<<2)|0);
         $$1376$ph549$i = $$1376$ph$i;$$4349$ph550$i = $$4349$ph$i;$$4384$ph$i = $$4384$ph435$i;
         while(1) {
          $591 = ($$4384$ph$i|0)==(18);
          $619 = ($$4384$ph$i|0)>(27);
          $$416$i = $619 ? 9 : 1;
          $$1376$i = $$1376$ph549$i;$$4349$i = $$4349$ph550$i;
          while(1) {
           $$0331476$i = 0;
           while(1) {
            $579 = (($$0331476$i) + ($$4349$i))|0;
            $580 = $579 & 127;
            $581 = ($580|0)==($$6373$ph$i|0);
            if ($581) {
             $$1332$i = 2;
             label = 220;
             break;
            }
            $582 = (($3) + ($580<<2)|0);
            $583 = HEAP32[$582>>2]|0;
            $584 = (12280 + ($$0331476$i<<2)|0);
            $585 = HEAP32[$584>>2]|0;
            $586 = ($583>>>0)<($585>>>0);
            if ($586) {
             $$1332$i = 2;
             label = 220;
             break;
            }
            $587 = ($583>>>0)>($585>>>0);
            if ($587) {
             break;
            }
            $588 = (($$0331476$i) + 1)|0;
            $589 = ($588|0)<(2);
            if ($589) {
             $$0331476$i = $588;
            } else {
             $$1332$i = $588;
             label = 220;
             break;
            }
           }
           if ((label|0) == 220) {
            label = 0;
            $590 = ($$1332$i|0)==(2);
            $or$cond6$i122 = $591 & $590;
            if ($or$cond6$i122) {
             $$0360474$i = 0.0;$$4475$i = 0;$$9473$i = $$6373$ph$i;
             break L302;
            }
           }
           $592 = (($$1376$i) + ($$416$i))|0;
           $593 = ($$4349$i|0)==($$6373$ph$i|0);
           if ($593) {
            $$1376$i = $592;$$4349$i = $$6373$ph$i;
           } else {
            break;
           }
          }
          $594 = 1 << $$416$i;
          $595 = (($594) + -1)|0;
          $596 = 1000000000 >>> $$416$i;
          $$0327480$i = 0;$$5350478$i = $$4349$i;$$5385477$i = $$4384$ph$i;$$6479$i = $$4349$i;
          while(1) {
           $597 = (($3) + ($$6479$i<<2)|0);
           $598 = HEAP32[$597>>2]|0;
           $599 = $598 & $595;
           $600 = $598 >>> $$416$i;
           $601 = (($600) + ($$0327480$i))|0;
           HEAP32[$597>>2] = $601;
           $602 = Math_imul($599, $596)|0;
           $603 = ($$6479$i|0)==($$5350478$i|0);
           $604 = ($601|0)==(0);
           $or$cond417$i = $603 & $604;
           $605 = (($$5350478$i) + 1)|0;
           $606 = $605 & 127;
           $607 = (($$5385477$i) + -9)|0;
           $$$5385$i = $or$cond417$i ? $607 : $$5385477$i;
           $$$5350$i = $or$cond417$i ? $606 : $$5350478$i;
           $608 = (($$6479$i) + 1)|0;
           $609 = $608 & 127;
           $610 = ($609|0)==($$6373$ph$i|0);
           if ($610) {
            break;
           } else {
            $$0327480$i = $602;$$5350478$i = $$$5350$i;$$5385477$i = $$$5385$i;$$6479$i = $609;
           }
          }
          $611 = ($602|0)==(0);
          if ($611) {
           $$1376$ph549$i = $592;$$4349$ph550$i = $$$5350$i;$$4384$ph$i = $$$5385$i;
           continue;
          }
          $613 = ($612|0)==($$$5350$i|0);
          if (!($613)) {
           break;
          }
          $620 = HEAP32[$618>>2]|0;
          $621 = $620 | 1;
          HEAP32[$618>>2] = $621;
          $$1376$ph549$i = $592;$$4349$ph550$i = $$$5350$i;$$4384$ph$i = $$$5385$i;
         }
         $614 = (($3) + ($$6373$ph$i<<2)|0);
         HEAP32[$614>>2] = $602;
         $$1376$ph$i = $592;$$4349$ph$i = $$$5350$i;$$4384$ph435$i = $$$5385$i;$$6373$ph$i = $612;
        }
        while(1) {
         $622 = (($$4475$i) + ($$4349$i))|0;
         $623 = $622 & 127;
         $624 = ($623|0)==($$9473$i|0);
         $625 = (($$9473$i) + 1)|0;
         $626 = $625 & 127;
         if ($624) {
          $627 = (($626) + -1)|0;
          $628 = (($3) + ($627<<2)|0);
          HEAP32[$628>>2] = 0;
          $$10$i = $626;
         } else {
          $$10$i = $$9473$i;
         }
         $629 = $$0360474$i * 1.0E+9;
         $630 = (($3) + ($623<<2)|0);
         $631 = HEAP32[$630>>2]|0;
         $632 = (+($631>>>0));
         $633 = $629 + $632;
         $634 = (($$4475$i) + 1)|0;
         $exitcond$i = ($634|0)==(2);
         if ($exitcond$i) {
          break;
         } else {
          $$0360474$i = $633;$$4475$i = $634;$$9473$i = $$10$i;
         }
        }
        $635 = (+($$0113|0));
        $636 = $635 * $633;
        $637 = (($$1376$i) + 53)|0;
        $638 = (($637) - ($$0105$ph))|0;
        $639 = ($638|0)<($$0106$ph|0);
        $640 = ($638|0)<(0);
        $$$i = $640 ? 0 : $638;
        $$0364$i = $639&1;
        $$0328$i = $639 ? $$$i : $$0106$ph;
        $641 = ($$0328$i|0)<(53);
        if ($641) {
         $642 = (105 - ($$0328$i))|0;
         $643 = (+_scalbn(1.0,$642));
         $644 = (+_copysignl($643,$636));
         $645 = (53 - ($$0328$i))|0;
         $646 = (+_scalbn(1.0,$645));
         $647 = (+_fmodl($636,$646));
         $648 = $636 - $647;
         $649 = $644 + $648;
         $$0355$i = $644;$$0356$i = $647;$$1361$i = $649;
        } else {
         $$0355$i = 0.0;$$0356$i = 0.0;$$1361$i = $636;
        }
        $650 = (($$4349$i) + 2)|0;
        $651 = $650 & 127;
        $652 = ($651|0)==($$10$i|0);
        do {
         if ($652) {
          $$3359$i = $$0356$i;
         } else {
          $653 = (($3) + ($651<<2)|0);
          $654 = HEAP32[$653>>2]|0;
          $655 = ($654>>>0)<(500000000);
          do {
           if ($655) {
            $656 = ($654|0)==(0);
            if ($656) {
             $657 = (($$4349$i) + 3)|0;
             $658 = $657 & 127;
             $659 = ($658|0)==($$10$i|0);
             if ($659) {
              $$1357$i = $$0356$i;
              break;
             }
            }
            $660 = $635 * 0.25;
            $661 = $660 + $$0356$i;
            $$1357$i = $661;
           } else {
            $662 = ($654|0)==(500000000);
            if (!($662)) {
             $663 = $635 * 0.75;
             $664 = $663 + $$0356$i;
             $$1357$i = $664;
             break;
            }
            $665 = (($$4349$i) + 3)|0;
            $666 = $665 & 127;
            $667 = ($666|0)==($$10$i|0);
            if ($667) {
             $668 = $635 * 0.5;
             $669 = $668 + $$0356$i;
             $$1357$i = $669;
             break;
            } else {
             $670 = $635 * 0.75;
             $671 = $670 + $$0356$i;
             $$1357$i = $671;
             break;
            }
           }
          } while(0);
          $672 = (53 - ($$0328$i))|0;
          $673 = ($672|0)>(1);
          if ($673) {
           $674 = (+_fmodl($$1357$i,1.0));
           $675 = $674 != 0.0;
           if ($675) {
            $$3359$i = $$1357$i;
            break;
           }
           $676 = $$1357$i + 1.0;
           $$3359$i = $676;
          } else {
           $$3359$i = $$1357$i;
          }
         }
        } while(0);
        $677 = $$1361$i + $$3359$i;
        $678 = $677 - $$0355$i;
        $679 = $637 & 2147483647;
        $680 = (-2 - ($sum$i))|0;
        $681 = ($679|0)>($680|0);
        do {
         if ($681) {
          $682 = (+Math_abs((+$678)));
          $683 = !($682 >= 9007199254740992.0);
          if ($683) {
           $$2362$i = $678;$$2366$i = $$0364$i;$$3378$i = $$1376$i;
          } else {
           $684 = (($$1376$i) + 1)|0;
           $685 = ($$0328$i|0)==($638|0);
           $or$cond418$i = $639 & $685;
           $$1365$i = $or$cond418$i ? 0 : $$0364$i;
           $686 = $678 * 0.5;
           $$2362$i = $686;$$2366$i = $$1365$i;$$3378$i = $684;
          }
          $687 = (($$3378$i) + 50)|0;
          $688 = ($687|0)>($333|0);
          if (!($688)) {
           $689 = ($$2366$i|0)!=(0);
           $690 = $$3359$i != 0.0;
           $or$cond9$i = $690 & $689;
           if (!($or$cond9$i)) {
            $$3363$i = $$2362$i;$$4379$i = $$3378$i;
            break;
           }
          }
          $691 = (___errno_location()|0);
          HEAP32[$691>>2] = 34;
          $$3363$i = $$2362$i;$$4379$i = $$3378$i;
         } else {
          $$3363$i = $678;$$4379$i = $$1376$i;
         }
        } while(0);
        $692 = (+_scalbnl($$3363$i,$$4379$i));
        $$1$i = $692;
       }
      } while(0);
      $$0114 = $$1$i;
      break L4;
      break;
     }
     default: {
      $113 = HEAP32[$5>>2]|0;
      $114 = ($113|0)==(0|0);
      if (!($114)) {
       $115 = HEAP32[$4>>2]|0;
       $116 = ((($115)) + -1|0);
       HEAP32[$4>>2] = $116;
      }
      $117 = (___errno_location()|0);
      HEAP32[$117>>2] = 22;
      ___shlim($0,0);
      $$0114 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $45 = HEAP32[$5>>2]|0;
    $46 = ($45|0)==(0|0);
    if (!($46)) {
     $47 = HEAP32[$4>>2]|0;
     $48 = ((($47)) + -1|0);
     HEAP32[$4>>2] = $48;
    }
    $49 = ($2|0)!=(0);
    $50 = ($$0107$lcssa>>>0)>(3);
    $or$cond9 = $49 & $50;
    if ($or$cond9) {
     $$1108 = $$0107$lcssa;
     while(1) {
      if (!($46)) {
       $51 = HEAP32[$4>>2]|0;
       $52 = ((($51)) + -1|0);
       HEAP32[$4>>2] = $52;
      }
      $53 = (($$1108) + -1)|0;
      $$old8 = ($53>>>0)>(3);
      if ($$old8) {
       $$1108 = $53;
      } else {
       break;
      }
     }
    }
   }
   $54 = (+($$0113|0));
   $55 = $54 * inf;
   $56 = $55;
   $$0114 = $56;
  }
 } while(0);
 STACKTOP = sp;return (+$$0114);
}
function _scanexp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04860 = 0, $$049 = 0, $$1$be = 0, $$159 = 0, $$2$be = 0, $$2$lcssa = 0, $$254 = 0, $$3$be = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 100|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if ($6) {
  $7 = ((($3)) + 1|0);
  HEAP32[$2>>2] = $7;
  $8 = HEAP8[$3>>0]|0;
  $9 = $8&255;
  $11 = $9;
 } else {
  $10 = (___shgetc($0)|0);
  $11 = $10;
 }
 $12 = ($11|0)==(45);
 switch ($11|0) {
 case 43: case 45:  {
  $13 = $12&1;
  $14 = HEAP32[$2>>2]|0;
  $15 = HEAP32[$4>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$2>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $22 = $19;
  } else {
   $20 = (___shgetc($0)|0);
   $22 = $20;
  }
  $21 = (($22) + -48)|0;
  $23 = ($21>>>0)>(9);
  $24 = ($1|0)!=(0);
  $or$cond3 = $24 & $23;
  if ($or$cond3) {
   $25 = HEAP32[$4>>2]|0;
   $26 = ($25|0)==(0|0);
   if ($26) {
    $$0 = $13;$$049 = $22;
   } else {
    $27 = HEAP32[$2>>2]|0;
    $28 = ((($27)) + -1|0);
    HEAP32[$2>>2] = $28;
    $$0 = $13;$$049 = $22;
   }
  } else {
   $$0 = $13;$$049 = $22;
  }
  break;
 }
 default: {
  $$0 = 0;$$049 = $11;
 }
 }
 $29 = (($$049) + -48)|0;
 $30 = ($29>>>0)>(9);
 if ($30) {
  $31 = HEAP32[$4>>2]|0;
  $32 = ($31|0)==(0|0);
  if ($32) {
   $100 = -2147483648;$101 = 0;
  } else {
   $33 = HEAP32[$2>>2]|0;
   $34 = ((($33)) + -1|0);
   HEAP32[$2>>2] = $34;
   $100 = -2147483648;$101 = 0;
  }
 } else {
  $$04860 = 0;$$159 = $$049;
  while(1) {
   $35 = ($$04860*10)|0;
   $36 = (($$159) + -48)|0;
   $37 = (($36) + ($35))|0;
   $38 = HEAP32[$2>>2]|0;
   $39 = HEAP32[$4>>2]|0;
   $40 = ($38>>>0)<($39>>>0);
   if ($40) {
    $41 = ((($38)) + 1|0);
    HEAP32[$2>>2] = $41;
    $42 = HEAP8[$38>>0]|0;
    $43 = $42&255;
    $$1$be = $43;
   } else {
    $44 = (___shgetc($0)|0);
    $$1$be = $44;
   }
   $45 = (($$1$be) + -48)|0;
   $46 = ($45>>>0)<(10);
   $47 = ($37|0)<(214748364);
   $48 = $46 & $47;
   if ($48) {
    $$04860 = $37;$$159 = $$1$be;
   } else {
    break;
   }
  }
  $49 = ($37|0)<(0);
  $50 = $49 << 31 >> 31;
  $51 = (($$1$be) + -48)|0;
  $52 = ($51>>>0)<(10);
  if ($52) {
   $$254 = $$1$be;$55 = $37;$56 = $50;
   while(1) {
    $57 = (___muldi3(($55|0),($56|0),10,0)|0);
    $58 = tempRet0;
    $59 = ($$254|0)<(0);
    $60 = $59 << 31 >> 31;
    $61 = (_i64Add(($$254|0),($60|0),-48,-1)|0);
    $62 = tempRet0;
    $63 = (_i64Add(($61|0),($62|0),($57|0),($58|0))|0);
    $64 = tempRet0;
    $65 = HEAP32[$2>>2]|0;
    $66 = HEAP32[$4>>2]|0;
    $67 = ($65>>>0)<($66>>>0);
    if ($67) {
     $68 = ((($65)) + 1|0);
     HEAP32[$2>>2] = $68;
     $69 = HEAP8[$65>>0]|0;
     $70 = $69&255;
     $$2$be = $70;
    } else {
     $71 = (___shgetc($0)|0);
     $$2$be = $71;
    }
    $72 = (($$2$be) + -48)|0;
    $73 = ($72>>>0)<(10);
    $74 = ($64|0)<(21474836);
    $75 = ($63>>>0)<(2061584302);
    $76 = ($64|0)==(21474836);
    $77 = $76 & $75;
    $78 = $74 | $77;
    $79 = $73 & $78;
    if ($79) {
     $$254 = $$2$be;$55 = $63;$56 = $64;
    } else {
     $$2$lcssa = $$2$be;$94 = $63;$95 = $64;
     break;
    }
   }
  } else {
   $$2$lcssa = $$1$be;$94 = $37;$95 = $50;
  }
  $53 = (($$2$lcssa) + -48)|0;
  $54 = ($53>>>0)<(10);
  if ($54) {
   while(1) {
    $80 = HEAP32[$2>>2]|0;
    $81 = HEAP32[$4>>2]|0;
    $82 = ($80>>>0)<($81>>>0);
    if ($82) {
     $83 = ((($80)) + 1|0);
     HEAP32[$2>>2] = $83;
     $84 = HEAP8[$80>>0]|0;
     $85 = $84&255;
     $$3$be = $85;
    } else {
     $86 = (___shgetc($0)|0);
     $$3$be = $86;
    }
    $87 = (($$3$be) + -48)|0;
    $88 = ($87>>>0)<(10);
    if (!($88)) {
     break;
    }
   }
  }
  $89 = HEAP32[$4>>2]|0;
  $90 = ($89|0)==(0|0);
  if (!($90)) {
   $91 = HEAP32[$2>>2]|0;
   $92 = ((($91)) + -1|0);
   HEAP32[$2>>2] = $92;
  }
  $93 = ($$0|0)!=(0);
  $96 = (_i64Subtract(0,0,($94|0),($95|0))|0);
  $97 = tempRet0;
  $98 = $93 ? $96 : $94;
  $99 = $93 ? $97 : $95;
  $100 = $99;$101 = $98;
 }
 tempRet0 = ($100);
 return ($101|0);
}
function ___string_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$027 = 0, $$027$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 84|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 256)|0;
 $6 = (_memchr($4,0,$5)|0);
 $7 = ($6|0)==(0|0);
 $8 = $6;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $$027 = $7 ? $5 : $10;
 $11 = ($$027>>>0)<($2>>>0);
 $$027$ = $11 ? $$027 : $2;
 _memcpy(($1|0),($4|0),($$027$|0))|0;
 $12 = (($4) + ($$027$)|0);
 $13 = ((($0)) + 4|0);
 HEAP32[$13>>2] = $12;
 $14 = (($4) + ($$027)|0);
 $15 = ((($0)) + 8|0);
 HEAP32[$15>>2] = $14;
 HEAP32[$3>>2] = $14;
 return ($$027$|0);
}
function ___fseeko($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(-1);
 if ($5) {
  $7 = (___lockfile($0)|0);
  $phitmp = ($7|0)==(0);
  $8 = (___fseeko_unlocked($0,$1,$2)|0);
  if ($phitmp) {
   $9 = $8;
  } else {
   ___unlockfile($0);
   $9 = $8;
  }
 } else {
  $6 = (___fseeko_unlocked($0,$1,$2)|0);
  $9 = $6;
 }
 return ($9|0);
}
function ___fseeko_unlocked($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(1);
 if ($3) {
  $4 = ((($0)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($0)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($1) - ($5))|0;
  $9 = (($8) + ($7))|0;
  $$019 = $9;
 } else {
  $$019 = $1;
 }
 $10 = ((($0)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11>>>0)>($13>>>0);
 if ($14) {
  $15 = ((($0)) + 36|0);
  $16 = HEAP32[$15>>2]|0;
  (FUNCTION_TABLE_iiii[$16 & 1023]($0,0,0)|0);
  $17 = HEAP32[$10>>2]|0;
  $18 = ($17|0)==(0|0);
  if ($18) {
   $$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $19 = ((($0)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $20 = ((($0)) + 40|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (FUNCTION_TABLE_iiii[$21 & 1023]($0,$$019,$2)|0);
  $23 = ($22|0)<(0);
  if ($23) {
   $$0 = -1;
  } else {
   $24 = ((($0)) + 8|0);
   HEAP32[$24>>2] = 0;
   $25 = ((($0)) + 4|0);
   HEAP32[$25>>2] = 0;
   $26 = HEAP32[$0>>2]|0;
   $27 = $26 & -17;
   HEAP32[$0>>2] = $27;
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function _strtol($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strtox($0,$1,$2,-2147483648,0)|0);
 $4 = tempRet0;
 return ($3|0);
}
function _strtoull($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strtox($0,$1,$2,-1,-1)|0);
 $4 = tempRet0;
 tempRet0 = ($4);
 return ($3|0);
}
function _strtoll($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strtox($0,$1,$2,0,-2147483648)|0);
 $4 = tempRet0;
 tempRet0 = ($4);
 return ($3|0);
}
function _strtox_242($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $3 = sp;
 dest=$3; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = $0;
 $5 = ((($3)) + 8|0);
 HEAP32[$5>>2] = (-1);
 $6 = ((($3)) + 44|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($3)) + 76|0);
 HEAP32[$7>>2] = -1;
 ___shlim($3,0);
 $8 = (+___floatscan($3,$2,1));
 $9 = ((($3)) + 108|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$4>>2]|0;
 $12 = HEAP32[$5>>2]|0;
 $13 = (($11) - ($12))|0;
 $14 = (($13) + ($10))|0;
 $15 = ($1|0)==(0|0);
 if (!($15)) {
  $16 = ($14|0)!=(0);
  $17 = (($0) + ($14)|0);
  $18 = $16 ? $17 : $0;
  HEAP32[$1>>2] = $18;
 }
 STACKTOP = sp;return (+$8);
}
function _strtold_l($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (+_strtox_242($0,$1,2));
 return (+$3);
}
function _mbsnrtowcs($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$04975 = 0, $$05274 = 0, $$055$ = 0, $$05573 = 0, $$064 = 0, $$076 = 0, $$1 = 0, $$150 = 0, $$153 = 0, $$156 = 0, $$25170 = 0, $$25469 = 0, $$257 = 0, $$271 = 0, $$3 = 0, $$35868 = 0, $$59 = 0, $$cast = 0, $$pr$pre = 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $or$cond72 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1040|0);
 $5 = sp + 8|0;
 $6 = sp;
 $7 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $7;
 $8 = ($0|0)!=(0|0);
 $$ = $8 ? $3 : 256;
 $$59 = $8 ? $0 : $5;
 $$cast = $7;
 $9 = ($7|0)!=(0);
 $10 = ($$|0)!=(0);
 $or$cond72 = $10 & $9;
 L1: do {
  if ($or$cond72) {
   $$04975 = 0;$$05274 = $2;$$05573 = $$;$$076 = $$59;$44 = $$cast;
   while(1) {
    $11 = $$05274 >>> 2;
    $12 = ($11>>>0)>=($$05573>>>0);
    $13 = ($$05274>>>0)>(131);
    $14 = $13 | $12;
    if (!($14)) {
     $$064 = $$076;$$150 = $$04975;$$153 = $$05274;$$257 = $$05573;$25 = $44;
     break L1;
    }
    $$055$ = $12 ? $$05573 : $11;
    $15 = (($$05274) - ($$055$))|0;
    $16 = (_mbsrtowcs($$076,$6,$$055$,$4)|0);
    $17 = ($16|0)==(-1);
    if ($17) {
     break;
    }
    $18 = ($$076|0)==($5|0);
    $19 = (($$076) + ($16<<2)|0);
    $20 = $18 ? 0 : $16;
    $$156 = (($$05573) - ($20))|0;
    $$1 = $18 ? $$076 : $19;
    $21 = (($16) + ($$04975))|0;
    $22 = HEAP32[$6>>2]|0;
    $23 = ($22|0)!=(0|0);
    $24 = ($$156|0)!=(0);
    $or$cond = $24 & $23;
    if ($or$cond) {
     $$04975 = $21;$$05274 = $15;$$05573 = $$156;$$076 = $$1;$44 = $22;
    } else {
     $$064 = $$1;$$150 = $21;$$153 = $15;$$257 = $$156;$25 = $22;
     break L1;
    }
   }
   $$pr$pre = HEAP32[$6>>2]|0;
   $$064 = $$076;$$150 = -1;$$153 = $15;$$257 = 0;$25 = $$pr$pre;
  } else {
   $$064 = $$59;$$150 = 0;$$153 = $2;$$257 = $$;$25 = $$cast;
  }
 } while(0);
 $26 = ($25|0)==(0|0);
 L8: do {
  if ($26) {
   $$3 = $$150;
  } else {
   $27 = ($$257|0)!=(0);
   $28 = ($$153|0)!=(0);
   $29 = $27 & $28;
   if ($29) {
    $$25170 = $$150;$$25469 = $$153;$$271 = $$064;$$35868 = $$257;$30 = $25;
    while(1) {
     $31 = (_mbrtowc($$271,$30,$$25469,$4)|0);
     $32 = (($31) + 2)|0;
     $33 = ($32>>>0)<(3);
     if ($33) {
      break;
     }
     $34 = HEAP32[$6>>2]|0;
     $35 = (($34) + ($31)|0);
     HEAP32[$6>>2] = $35;
     $36 = (($$25469) - ($31))|0;
     $37 = ((($$271)) + 4|0);
     $38 = (($$35868) + -1)|0;
     $39 = (($$25170) + 1)|0;
     $40 = ($38|0)!=(0);
     $41 = ($36|0)!=(0);
     $42 = $40 & $41;
     if ($42) {
      $$25170 = $39;$$25469 = $36;$$271 = $37;$$35868 = $38;$30 = $35;
     } else {
      $$3 = $39;
      break L8;
     }
    }
    switch ($31|0) {
    case -1:  {
     $$3 = -1;
     break L8;
     break;
    }
    case 0:  {
     HEAP32[$6>>2] = 0;
     $$3 = $$25170;
     break L8;
     break;
    }
    default: {
     HEAP32[$4>>2] = 0;
     $$3 = $$25170;
     break L8;
    }
    }
   } else {
    $$3 = $$150;
   }
  }
 } while(0);
 if ($8) {
  $43 = HEAP32[$6>>2]|0;
  HEAP32[$1>>2] = $43;
 }
 STACKTOP = sp;return ($$3|0);
}
function _mbsrtowcs($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$086 = 0, $$087 = 0, $$087$ph = 0, $$094$ph = 0, $$094119 = 0, $$099 = 0, $$099$ph = 0, $$10 = 0, $$10109 = 0, $$10135 = 0, $$1100115 = 0, $$188116 = 0, $$195 = 0, $$2 = 0, $$2101 = 0, $$289 = 0, $$296 = 0, $$3102 = 0, $$390 = 0, $$397 = 0;
 var $$4 = 0, $$4103$ph = 0, $$4103118 = 0, $$491 = 0, $$498 = 0, $$498108 = 0, $$498134 = 0, $$5 = 0, $$5104 = 0, $$592$lcssa = 0, $$592$ph = 0, $$592120 = 0, $$6 = 0, $$6105 = 0, $$693 = 0, $$7 = 0, $$7106 = 0, $$8 = 0, $$8107 = 0, $$8107133 = 0;
 var $$9 = 0, $$old1 = 0, $$pre$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($3|0)==(0|0);
 if ($5) {
  label = 5;
 } else {
  $6 = HEAP32[$3>>2]|0;
  $7 = ($6|0)==(0);
  if ($7) {
   label = 5;
  } else {
   $8 = ($0|0)==(0|0);
   if ($8) {
    $$2 = $6;$$3102 = $2;$$390 = $4;
    label = 17;
   } else {
    HEAP32[$3>>2] = 0;
    $$397 = $0;$$4 = $6;$$7106 = $2;$$8 = $4;
    label = 38;
   }
  }
 }
 if ((label|0) == 5) {
  $9 = ($0|0)==(0|0);
  if ($9) {
   $$087$ph = $4;$$099$ph = $2;
   label = 7;
  } else {
   $$094$ph = $0;$$4103$ph = $2;$$592$ph = $4;
   label = 6;
  }
 }
 L7: while(1) {
  if ((label|0) == 6) {
   label = 0;
   $10 = ($$4103$ph|0)==(0);
   if ($10) {
    $$592$lcssa = $$592$ph;
    label = 27;
    break;
   } else {
    $$094119 = $$094$ph;$$4103118 = $$4103$ph;$$592120 = $$592$ph;
   }
   while(1) {
    $68 = HEAP8[$$592120>>0]|0;
    $69 = $68&255;
    $70 = (($69) + -1)|0;
    $71 = ($70>>>0)<(127);
    do {
     if ($71) {
      $72 = $$592120;
      $73 = $72 & 3;
      $74 = ($73|0)==(0);
      $75 = ($$4103118>>>0)>(4);
      $or$cond = $75 & $74;
      if ($or$cond) {
       $$195 = $$094119;$$5104 = $$4103118;$$693 = $$592120;
       while(1) {
        $76 = HEAP32[$$693>>2]|0;
        $77 = (($76) + -16843009)|0;
        $78 = $77 | $76;
        $79 = $78 & -2139062144;
        $80 = ($79|0)==(0);
        if (!($80)) {
         label = 33;
         break;
        }
        $81 = ((($$693)) + 1|0);
        $82 = $76 & 255;
        $83 = ((($$195)) + 4|0);
        HEAP32[$$195>>2] = $82;
        $84 = ((($$693)) + 2|0);
        $85 = HEAP8[$81>>0]|0;
        $86 = $85&255;
        $87 = ((($$195)) + 8|0);
        HEAP32[$83>>2] = $86;
        $88 = ((($$693)) + 3|0);
        $89 = HEAP8[$84>>0]|0;
        $90 = $89&255;
        $91 = ((($$195)) + 12|0);
        HEAP32[$87>>2] = $90;
        $92 = ((($$693)) + 4|0);
        $93 = HEAP8[$88>>0]|0;
        $94 = $93&255;
        $95 = ((($$195)) + 16|0);
        HEAP32[$91>>2] = $94;
        $96 = (($$5104) + -4)|0;
        $$old1 = ($96>>>0)>(4);
        if ($$old1) {
         $$195 = $95;$$5104 = $96;$$693 = $92;
        } else {
         label = 32;
         break;
        }
       }
       if ((label|0) == 32) {
        label = 0;
        $$pre$pre = HEAP8[$92>>0]|0;
        $$296 = $95;$$6105 = $96;$$7 = $92;$99 = $$pre$pre;
        break;
       }
       else if ((label|0) == 33) {
        label = 0;
        $97 = $76&255;
        $$296 = $$195;$$6105 = $$5104;$$7 = $$693;$99 = $97;
        break;
       }
      } else {
       $$296 = $$094119;$$6105 = $$4103118;$$7 = $$592120;$99 = $68;
      }
     } else {
      $$296 = $$094119;$$6105 = $$4103118;$$7 = $$592120;$99 = $68;
     }
    } while(0);
    $98 = $99&255;
    $100 = (($98) + -1)|0;
    $101 = ($100>>>0)<(127);
    if (!($101)) {
     break;
    }
    $102 = ((($$7)) + 1|0);
    $103 = ((($$296)) + 4|0);
    HEAP32[$$296>>2] = $98;
    $104 = (($$6105) + -1)|0;
    $105 = ($104|0)==(0);
    if ($105) {
     $$592$lcssa = $102;
     label = 27;
     break L7;
    } else {
     $$094119 = $103;$$4103118 = $104;$$592120 = $102;
    }
   }
   $106 = (($98) + -194)|0;
   $107 = ($106>>>0)>(50);
   if ($107) {
    $$10135 = $$7;$$498134 = $$296;$$8107133 = $$6105;
    label = 49;
    break;
   }
   $108 = ((($$7)) + 1|0);
   $109 = (11932 + ($106<<2)|0);
   $110 = HEAP32[$109>>2]|0;
   $$397 = $$296;$$4 = $110;$$7106 = $$6105;$$8 = $108;
   label = 38;
   continue;
  }
  else if ((label|0) == 7) {
   label = 0;
   $$087 = $$087$ph;$$099 = $$099$ph;
   while(1) {
    $11 = HEAP8[$$087>>0]|0;
    $12 = $11&255;
    $13 = (($12) + -1)|0;
    $14 = ($13>>>0)<(127);
    if ($14) {
     $15 = $$087;
     $16 = $15 & 3;
     $17 = ($16|0)==(0);
     if ($17) {
      $18 = HEAP32[$$087>>2]|0;
      $19 = (($18) + -16843009)|0;
      $20 = $19 | $18;
      $21 = $20 & -2139062144;
      $22 = ($21|0)==(0);
      $23 = $18&255;
      if ($22) {
       $$1100115 = $$099;$$188116 = $$087;
       while(1) {
        $24 = ((($$188116)) + 4|0);
        $25 = (($$1100115) + -4)|0;
        $26 = HEAP32[$24>>2]|0;
        $27 = (($26) + -16843009)|0;
        $28 = $27 | $26;
        $29 = $28 & -2139062144;
        $30 = ($29|0)==(0);
        if ($30) {
         $$1100115 = $25;$$188116 = $24;
        } else {
         break;
        }
       }
       $31 = $26&255;
       $$2101 = $25;$$289 = $24;$33 = $31;
      } else {
       $$2101 = $$099;$$289 = $$087;$33 = $23;
      }
     } else {
      $$2101 = $$099;$$289 = $$087;$33 = $11;
     }
    } else {
     $$2101 = $$099;$$289 = $$087;$33 = $11;
    }
    $32 = $33&255;
    $34 = (($32) + -1)|0;
    $35 = ($34>>>0)<(127);
    if (!($35)) {
     break;
    }
    $36 = ((($$289)) + 1|0);
    $37 = (($$2101) + -1)|0;
    $$087 = $36;$$099 = $37;
   }
   $38 = (($32) + -194)|0;
   $39 = ($38>>>0)>(50);
   if ($39) {
    $$10135 = $$289;$$498134 = $0;$$8107133 = $$2101;
    label = 49;
    break;
   }
   $40 = ((($$289)) + 1|0);
   $41 = (11932 + ($38<<2)|0);
   $42 = HEAP32[$41>>2]|0;
   $$2 = $42;$$3102 = $$2101;$$390 = $40;
   label = 17;
   continue;
  }
  else if ((label|0) == 17) {
   label = 0;
   $43 = HEAP8[$$390>>0]|0;
   $44 = $43&255;
   $45 = $44 >>> 3;
   $46 = (($45) + -16)|0;
   $47 = $$2 >> 26;
   $48 = (($45) + ($47))|0;
   $49 = $46 | $48;
   $50 = ($49>>>0)>(7);
   if ($50) {
    label = 18;
    break;
   }
   $52 = ((($$390)) + 1|0);
   $53 = $$2 & 33554432;
   $54 = ($53|0)==(0);
   if ($54) {
    $$491 = $52;
   } else {
    $55 = HEAP8[$52>>0]|0;
    $56 = $55 & -64;
    $57 = ($56<<24>>24)==(-128);
    if (!($57)) {
     label = 21;
     break;
    }
    $59 = ((($$390)) + 2|0);
    $60 = $$2 & 524288;
    $61 = ($60|0)==(0);
    if ($61) {
     $$491 = $59;
    } else {
     $62 = HEAP8[$59>>0]|0;
     $63 = $62 & -64;
     $64 = ($63<<24>>24)==(-128);
     if (!($64)) {
      label = 24;
      break;
     }
     $66 = ((($$390)) + 3|0);
     $$491 = $66;
    }
   }
   $67 = (($$3102) + -1)|0;
   $$087$ph = $$491;$$099$ph = $67;
   label = 7;
   continue;
  }
  else if ((label|0) == 38) {
   label = 0;
   $111 = HEAP8[$$8>>0]|0;
   $112 = $111&255;
   $113 = $112 >>> 3;
   $114 = (($113) + -16)|0;
   $115 = $$4 >> 26;
   $116 = (($113) + ($115))|0;
   $117 = $114 | $116;
   $118 = ($117>>>0)>(7);
   if ($118) {
    label = 39;
    break;
   }
   $120 = $$4 << 6;
   $121 = ((($$8)) + 1|0);
   $122 = (($112) + -128)|0;
   $123 = $122 | $120;
   $124 = ($123|0)<(0);
   if ($124) {
    $125 = HEAP8[$121>>0]|0;
    $126 = $125&255;
    $127 = (($126) + -128)|0;
    $128 = ($127>>>0)>(63);
    if ($128) {
     label = 42;
     break;
    }
    $130 = $123 << 6;
    $131 = ((($$8)) + 2|0);
    $132 = $127 | $130;
    $133 = ($132|0)<(0);
    if ($133) {
     $134 = HEAP8[$131>>0]|0;
     $135 = $134&255;
     $136 = (($135) + -128)|0;
     $137 = ($136>>>0)>(63);
     if ($137) {
      label = 45;
      break;
     }
     $139 = $132 << 6;
     $140 = ((($$8)) + 3|0);
     $141 = $136 | $139;
     $$5 = $141;$$9 = $140;
    } else {
     $$5 = $132;$$9 = $131;
    }
   } else {
    $$5 = $123;$$9 = $121;
   }
   $142 = ((($$397)) + 4|0);
   HEAP32[$$397>>2] = $$5;
   $143 = (($$7106) + -1)|0;
   $$094$ph = $142;$$4103$ph = $143;$$592$ph = $$9;
   label = 6;
   continue;
  }
 }
 if ((label|0) == 18) {
  $51 = ((($$390)) + -1|0);
  $$10 = $51;$$498 = $0;$$6 = $$2;$$8107 = $$3102;
  label = 48;
 }
 else if ((label|0) == 21) {
  $58 = ((($$390)) + -1|0);
  $$10 = $58;$$498 = $0;$$6 = $$2;$$8107 = $$3102;
  label = 48;
 }
 else if ((label|0) == 24) {
  $65 = ((($$390)) + -1|0);
  $$10 = $65;$$498 = $0;$$6 = $$2;$$8107 = $$3102;
  label = 48;
 }
 else if ((label|0) == 27) {
  HEAP32[$1>>2] = $$592$lcssa;
  $$086 = $2;
 }
 else if ((label|0) == 39) {
  $119 = ((($$8)) + -1|0);
  $$10 = $119;$$498 = $$397;$$6 = $$4;$$8107 = $$7106;
  label = 48;
 }
 else if ((label|0) == 42) {
  $129 = ((($$8)) + -1|0);
  $$10109 = $129;$$498108 = $$397;
  label = 53;
 }
 else if ((label|0) == 45) {
  $138 = ((($$8)) + -1|0);
  $$10109 = $138;$$498108 = $$397;
  label = 53;
 }
 if ((label|0) == 48) {
  $144 = ($$6|0)==(0);
  if ($144) {
   $$10135 = $$10;$$498134 = $$498;$$8107133 = $$8107;
   label = 49;
  } else {
   $$10109 = $$10;$$498108 = $$498;
   label = 53;
  }
 }
 if ((label|0) == 49) {
  $145 = HEAP8[$$10135>>0]|0;
  $146 = ($145<<24>>24)==(0);
  if ($146) {
   $147 = ($$498134|0)==(0|0);
   if (!($147)) {
    HEAP32[$$498134>>2] = 0;
    HEAP32[$1>>2] = 0;
   }
   $148 = (($2) - ($$8107133))|0;
   $$086 = $148;
  } else {
   $$10109 = $$10135;$$498108 = $$498134;
   label = 53;
  }
 }
 if ((label|0) == 53) {
  $149 = (___errno_location()|0);
  HEAP32[$149>>2] = 84;
  $150 = ($$498108|0)==(0|0);
  if ($150) {
   $$086 = -1;
  } else {
   HEAP32[$1>>2] = $$10109;
   $$086 = -1;
  }
 }
 return ($$086|0);
}
function ___overflow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $1&255;
 HEAP8[$2>>0] = $3;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___towrite($0)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$4>>2]|0;
   $12 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $12 = $5;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $9 = ((($0)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<($12>>>0);
   if ($11) {
    $13 = $1 & 255;
    $14 = ((($0)) + 75|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = ($13|0)==($16|0);
    if (!($17)) {
     $18 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $18;
     HEAP8[$10>>0] = $3;
     $$0 = $13;
     break;
    }
   }
   $19 = ((($0)) + 36|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (FUNCTION_TABLE_iiii[$20 & 1023]($0,$2,1)|0);
   $22 = ($21|0)==(1);
   if ($22) {
    $23 = HEAP8[$2>>0]|0;
    $24 = $23&255;
    $$0 = $24;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _wcsrtombs($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$05675 = 0, $$057$lcssa = 0, $$05785 = 0, $$05874 = 0, $$1 = 0, $$159 = 0, $$260$lcssa = 0, $$26084 = 0, $$279 = 0, $$3 = 0, $$361 = 0, $$478 = 0, $$5 = 0, $$pn = 0, $$pre = 0, $$pre100 = 0, $$pre101 = 0, $$pre102 = 0, $10 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($0|0)==(0|0);
 L1: do {
  if ($5) {
   $7 = HEAP32[$1>>2]|0;
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    $$0 = 0;
   } else {
    $$05675 = $7;$$05874 = 0;$10 = $8;
    while(1) {
     $11 = ($10>>>0)>(127);
     if ($11) {
      $12 = (_wcrtomb($4,$10,0)|0);
      $13 = ($12|0)==(-1);
      if ($13) {
       $$0 = -1;
       break L1;
      } else {
       $$pn = $12;
      }
     } else {
      $$pn = 1;
     }
     $$159 = (($$pn) + ($$05874))|0;
     $14 = ((($$05675)) + 4|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==(0);
     if ($16) {
      $$0 = $$159;
      break;
     } else {
      $$05675 = $14;$$05874 = $$159;$10 = $15;
     }
    }
   }
  } else {
   $6 = ($2>>>0)>(3);
   L9: do {
    if ($6) {
     $$pre = HEAP32[$1>>2]|0;
     $$05785 = $0;$$26084 = $2;$19 = $$pre;
     while(1) {
      $18 = HEAP32[$19>>2]|0;
      $20 = (($18) + -1)|0;
      $21 = ($20>>>0)>(126);
      if ($21) {
       $22 = ($18|0)==(0);
       if ($22) {
        break;
       }
       $24 = (_wcrtomb($$05785,$18,0)|0);
       $25 = ($24|0)==(-1);
       if ($25) {
        $$0 = -1;
        break L1;
       }
       $26 = (($$05785) + ($24)|0);
       $27 = (($$26084) - ($24))|0;
       $$1 = $26;$$361 = $27;$32 = $19;
      } else {
       $28 = $18&255;
       $29 = ((($$05785)) + 1|0);
       HEAP8[$$05785>>0] = $28;
       $30 = (($$26084) + -1)|0;
       $$pre100 = HEAP32[$1>>2]|0;
       $$1 = $29;$$361 = $30;$32 = $$pre100;
      }
      $31 = ((($32)) + 4|0);
      HEAP32[$1>>2] = $31;
      $33 = ($$361>>>0)>(3);
      if ($33) {
       $$05785 = $$1;$$26084 = $$361;$19 = $31;
      } else {
       $$057$lcssa = $$1;$$260$lcssa = $$361;
       break L9;
      }
     }
     HEAP8[$$05785>>0] = 0;
     HEAP32[$1>>2] = 0;
     $23 = (($2) - ($$26084))|0;
     $$0 = $23;
     break L1;
    } else {
     $$057$lcssa = $0;$$260$lcssa = $2;
    }
   } while(0);
   $17 = ($$260$lcssa|0)==(0);
   if ($17) {
    $$0 = $2;
   } else {
    $$pre101 = HEAP32[$1>>2]|0;
    $$279 = $$057$lcssa;$$478 = $$260$lcssa;$35 = $$pre101;
    while(1) {
     $34 = HEAP32[$35>>2]|0;
     $36 = (($34) + -1)|0;
     $37 = ($36>>>0)>(126);
     if ($37) {
      $38 = ($34|0)==(0);
      if ($38) {
       label = 19;
       break;
      }
      $40 = (_wcrtomb($4,$34,0)|0);
      $41 = ($40|0)==(-1);
      if ($41) {
       $$0 = -1;
       break L1;
      }
      $42 = ($$478>>>0)<($40>>>0);
      if ($42) {
       label = 22;
       break;
      }
      $44 = HEAP32[$35>>2]|0;
      (_wcrtomb($$279,$44,0)|0);
      $45 = (($$279) + ($40)|0);
      $46 = (($$478) - ($40))|0;
      $$3 = $45;$$5 = $46;$51 = $35;
     } else {
      $47 = $34&255;
      $48 = ((($$279)) + 1|0);
      HEAP8[$$279>>0] = $47;
      $49 = (($$478) + -1)|0;
      $$pre102 = HEAP32[$1>>2]|0;
      $$3 = $48;$$5 = $49;$51 = $$pre102;
     }
     $50 = ((($51)) + 4|0);
     HEAP32[$1>>2] = $50;
     $52 = ($$5|0)==(0);
     if ($52) {
      $$0 = $2;
      break L1;
     } else {
      $$279 = $$3;$$478 = $$5;$35 = $50;
     }
    }
    if ((label|0) == 19) {
     HEAP8[$$279>>0] = 0;
     HEAP32[$1>>2] = 0;
     $39 = (($2) - ($$478))|0;
     $$0 = $39;
     break;
    }
    else if ((label|0) == 22) {
     $43 = (($2) - ($$478))|0;
     $$0 = $43;
     break;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _fread($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$053$ph = 0, $$05357 = 0, $$054$ph = 0, $$05456 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ((($3)) + 76|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(-1);
 if ($7) {
  $8 = (___lockfile($3)|0);
  $34 = $8;
 } else {
  $34 = 0;
 }
 $9 = ((($3)) + 74|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10 << 24 >> 24;
 $12 = (($11) + 255)|0;
 $13 = $12 | $11;
 $14 = $13&255;
 HEAP8[$9>>0] = $14;
 $15 = ((($3)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($3)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) - ($18))|0;
 $20 = ($19|0)>(0);
 $21 = $18;
 if ($20) {
  $22 = ($19>>>0)<($4>>>0);
  $$ = $22 ? $19 : $4;
  _memcpy(($0|0),($21|0),($$|0))|0;
  $23 = (($21) + ($$)|0);
  HEAP32[$17>>2] = $23;
  $24 = (($0) + ($$)|0);
  $25 = (($4) - ($$))|0;
  $$053$ph = $25;$$054$ph = $24;
 } else {
  $$053$ph = $4;$$054$ph = $0;
 }
 $26 = ($$053$ph|0)==(0);
 L7: do {
  if ($26) {
   label = 13;
  } else {
   $27 = ((($3)) + 32|0);
   $$05357 = $$053$ph;$$05456 = $$054$ph;
   while(1) {
    $28 = (___toread($3)|0);
    $29 = ($28|0)==(0);
    if (!($29)) {
     break;
    }
    $30 = HEAP32[$27>>2]|0;
    $31 = (FUNCTION_TABLE_iiii[$30 & 1023]($3,$$05456,$$05357)|0);
    $32 = (($31) + 1)|0;
    $33 = ($32>>>0)<(2);
    if ($33) {
     break;
    }
    $38 = (($$05357) - ($31))|0;
    $39 = (($$05456) + ($31)|0);
    $40 = ($38|0)==(0);
    if ($40) {
     label = 13;
     break L7;
    } else {
     $$05357 = $38;$$05456 = $39;
    }
   }
   $35 = ($34|0)==(0);
   if (!($35)) {
    ___unlockfile($3);
   }
   $36 = (($4) - ($$05357))|0;
   $37 = (($36>>>0) / ($1>>>0))&-1;
   $$0 = $37;
  }
 } while(0);
 if ((label|0) == 13) {
  $41 = ($34|0)==(0);
  if ($41) {
   $$0 = $2;
  } else {
   ___unlockfile($3);
   $$0 = $2;
  }
 }
 return ($$0|0);
}
function _vasprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = (_malloc(240)|0);
 $5 = ($4|0)==(0|0);
 do {
  if ($5) {
   $$0 = -1;
  } else {
   $vacopy_currentptr = HEAP32[$2>>2]|0;
   HEAP32[$3>>2] = $vacopy_currentptr;
   $6 = (_vsnprintf($4,240,$1,$3)|0);
   $7 = ($6>>>0)<(240);
   if ($7) {
    $8 = (($6) + 1)|0;
    $9 = (_realloc($4,$8)|0);
    $10 = ($9|0)!=(0|0);
    $11 = $10 ? $9 : $4;
    HEAP32[$0>>2] = $11;
    $$0 = $6;
    break;
   }
   _free($4);
   $12 = ($6|0)<(0);
   if ($12) {
    $$0 = -1;
   } else {
    $13 = (($6) + 1)|0;
    $14 = (_malloc($13)|0);
    HEAP32[$0>>2] = $14;
    $15 = ($14|0)==(0|0);
    if ($15) {
     $$0 = -1;
    } else {
     $16 = (_vsnprintf($14,$13,$1,$2)|0);
     $$0 = $16;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _fwrite($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ((($3)) + 76|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(-1);
 if ($7) {
  $9 = (___lockfile($3)|0);
  $phitmp = ($9|0)==(0);
  $10 = (___fwritex($0,$4,$3)|0);
  if ($phitmp) {
   $11 = $10;
  } else {
   ___unlockfile($3);
   $11 = $10;
  }
 } else {
  $8 = (___fwritex($0,$4,$3)|0);
  $11 = $8;
 }
 $12 = ($11|0)==($4|0);
 if ($12) {
  $14 = $2;
 } else {
  $13 = (($11>>>0) / ($1>>>0))&-1;
  $14 = $13;
 }
 return ($14|0);
}
function _fgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<(0);
 if ($3) {
  label = 3;
 } else {
  $4 = (___lockfile($0)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   label = 3;
  } else {
   $15 = ((($0)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($0)) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16>>>0)<($18>>>0);
   if ($19) {
    $20 = ((($16)) + 1|0);
    HEAP32[$15>>2] = $20;
    $21 = HEAP8[$16>>0]|0;
    $22 = $21&255;
    $24 = $22;
   } else {
    $23 = (___uflow($0)|0);
    $24 = $23;
   }
   ___unlockfile($0);
   $$0 = $24;
  }
 }
 do {
  if ((label|0) == 3) {
   $6 = ((($0)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ((($0)) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($7>>>0)<($9>>>0);
   if ($10) {
    $11 = ((($7)) + 1|0);
    HEAP32[$6>>2] = $11;
    $12 = HEAP8[$7>>0]|0;
    $13 = $12&255;
    $$0 = $13;
    break;
   } else {
    $14 = (___uflow($0)|0);
    $$0 = $14;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _ungetc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(-1);
 do {
  if ($2) {
   $$1 = -1;
  } else {
   $3 = ((($1)) + 76|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)>(-1);
   if ($5) {
    $6 = (___lockfile($1)|0);
    $18 = $6;
   } else {
    $18 = 0;
   }
   $7 = ((($1)) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $10 = (___toread($1)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     label = 6;
    }
   } else {
    label = 6;
   }
   if ((label|0) == 6) {
    $12 = ((($1)) + 4|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ((($1)) + 44|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ((($15)) + -8|0);
    $17 = ($13>>>0)>($16>>>0);
    if ($17) {
     $20 = $0&255;
     $21 = ((($13)) + -1|0);
     HEAP32[$12>>2] = $21;
     HEAP8[$21>>0] = $20;
     $22 = HEAP32[$1>>2]|0;
     $23 = $22 & -17;
     HEAP32[$1>>2] = $23;
     $24 = ($18|0)==(0);
     if ($24) {
      $$1 = $0;
      break;
     }
     ___unlockfile($1);
     $$1 = $0;
     break;
    }
   }
   $19 = ($18|0)==(0);
   if ($19) {
    $$1 = -1;
   } else {
    ___unlockfile($1);
    $$1 = -1;
   }
  }
 } while(0);
 return ($$1|0);
}
function _fputc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 if ($4) {
  label = 3;
 } else {
  $5 = (___lockfile($1)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 3;
  } else {
   $20 = ((($1)) + 75|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21 << 24 >> 24;
   $23 = ($22|0)==($0|0);
   if ($23) {
    label = 10;
   } else {
    $24 = ((($1)) + 20|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ((($1)) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($25>>>0)<($27>>>0);
    if ($28) {
     $29 = $0&255;
     $30 = ((($25)) + 1|0);
     HEAP32[$24>>2] = $30;
     HEAP8[$25>>0] = $29;
     $31 = $0 & 255;
     $33 = $31;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $32 = (___overflow($1,$0)|0);
    $33 = $32;
   }
   ___unlockfile($1);
   $$0 = $33;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = ((($1)) + 75|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = ($9|0)==($0|0);
   if (!($10)) {
    $11 = ((($1)) + 20|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ((($1)) + 16|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($12>>>0)<($14>>>0);
    if ($15) {
     $16 = $0&255;
     $17 = ((($12)) + 1|0);
     HEAP32[$11>>2] = $17;
     HEAP8[$12>>0] = $16;
     $18 = $0 & 255;
     $$0 = $18;
     break;
    }
   }
   $19 = (___overflow($1,$0)|0);
   $$0 = $19;
  }
 } while(0);
 return ($$0|0);
}
function ___ftello_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 128;
 $5 = ($4|0)==(0);
 if ($5) {
  $11 = 1;
 } else {
  $6 = ((($0)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($0)) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7>>>0)>($9>>>0);
  $phitmp = $10 ? 2 : 1;
  $11 = $phitmp;
 }
 $12 = (FUNCTION_TABLE_iiii[$2 & 1023]($0,0,$11)|0);
 $13 = ($12|0)<(0);
 if ($13) {
  $$0 = $12;
 } else {
  $14 = ((($0)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($0)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($0)) + 20|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($0)) + 28|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($12) - ($15))|0;
  $23 = (($22) + ($17))|0;
  $24 = (($23) + ($19))|0;
  $25 = (($24) - ($21))|0;
  $$0 = $25;
 }
 return ($$0|0);
}
function ___ftello($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $5 = (___lockfile($0)|0);
  $phitmp = ($5|0)==(0);
  $6 = (___ftello_unlocked($0)|0);
  if ($phitmp) {
   $7 = $6;
  } else {
   ___unlockfile($0);
   $7 = $6;
  }
 } else {
  $4 = (___ftello_unlocked($0)|0);
  $7 = $4;
 }
 return ($7|0);
}
function _getc($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<(0);
 if ($3) {
  label = 3;
 } else {
  $4 = (___lockfile($0)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   label = 3;
  } else {
   $15 = ((($0)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($0)) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16>>>0)<($18>>>0);
   if ($19) {
    $20 = ((($16)) + 1|0);
    HEAP32[$15>>2] = $20;
    $21 = HEAP8[$16>>0]|0;
    $22 = $21&255;
    $24 = $22;
   } else {
    $23 = (___uflow($0)|0);
    $24 = $23;
   }
   $$0 = $24;
  }
 }
 do {
  if ((label|0) == 3) {
   $6 = ((($0)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ((($0)) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($7>>>0)<($9>>>0);
   if ($10) {
    $11 = ((($7)) + 1|0);
    HEAP32[$6>>2] = $11;
    $12 = HEAP8[$7>>0]|0;
    $13 = $12&255;
    $$0 = $13;
    break;
   } else {
    $14 = (___uflow($0)|0);
    $$0 = $14;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _wmemset($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$056 = 0, $$07 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$056 = $2;$$07 = $0;
  while(1) {
   $4 = (($$056) + -1)|0;
   $5 = ((($$07)) + 4|0);
   HEAP32[$$07>>2] = $1;
   $6 = ($4|0)==(0);
   if ($6) {
    break;
   } else {
    $$056 = $4;$$07 = $5;
   }
  }
 }
 return ($0|0);
}
function _strcat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (($0) + ($2)|0);
 (_strcpy($3,$1)|0);
 return ($0|0);
}
function _wmemmove($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01417 = 0, $$019 = 0, $$118 = 0, $$in = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $0;
 $4 = $1;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = ($6>>>0)<($2>>>0);
 $8 = ($2|0)==(0);
 if ($7) {
  if (!($8)) {
   $$in = $2;
   while(1) {
    $9 = (($$in) + -1)|0;
    $10 = (($1) + ($9<<2)|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (($0) + ($9<<2)|0);
    HEAP32[$12>>2] = $11;
    $13 = ($9|0)==(0);
    if ($13) {
     break;
    } else {
     $$in = $9;
    }
   }
  }
 } else {
  if (!($8)) {
   $$01417 = $1;$$019 = $0;$$118 = $2;
   while(1) {
    $14 = (($$118) + -1)|0;
    $15 = ((($$01417)) + 4|0);
    $16 = HEAP32[$$01417>>2]|0;
    $17 = ((($$019)) + 4|0);
    HEAP32[$$019>>2] = $16;
    $18 = ($14|0)==(0);
    if ($18) {
     break;
    } else {
     $$01417 = $15;$$019 = $17;$$118 = $14;
    }
   }
  }
 }
 return ($0|0);
}
function ___ctype_toupper_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (12288|0);
}
function ___ctype_tolower_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (13828|0);
}
function ___ctype_b_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (15368|0);
}
function _srand($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -1)|0;
 $2 = 35680;
 $3 = $2;
 HEAP32[$3>>2] = $1;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 return;
}
function _rand() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 35680;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (___muldi3(($2|0),($5|0),1284865837,1481765933)|0);
 $7 = tempRet0;
 $8 = (_i64Add(($6|0),($7|0),1,0)|0);
 $9 = tempRet0;
 $10 = 35680;
 $11 = $10;
 HEAP32[$11>>2] = $8;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = (_bitshift64Lshr(($8|0),($9|0),33)|0);
 $15 = tempRet0;
 return ($14|0);
}
function _strtoull_l($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_strtoull($0,$1,$2)|0);
 $5 = tempRet0;
 tempRet0 = ($5);
 return ($4|0);
}
function _strtoll_l($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_strtoll($0,$1,$2)|0);
 $5 = tempRet0;
 tempRet0 = ($5);
 return ($4|0);
}
function _wcsnrtombs($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$04672 = 0, $$04971 = 0, $$052$$049 = 0, $$05270 = 0, $$061 = 0, $$073 = 0, $$1 = 0, $$147 = 0, $$150 = 0, $$153 = 0, $$24867 = 0, $$25166 = 0, $$254 = 0, $$268 = 0, $$3 = 0, $$35565 = 0, $$56 = 0, $$cast = 0, $$pr$pre = 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $or$cond69 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $5 = sp + 8|0;
 $6 = sp;
 $7 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $7;
 $8 = ($0|0)!=(0|0);
 $$ = $8 ? $3 : 256;
 $$56 = $8 ? $0 : $5;
 $$cast = $7;
 $9 = ($7|0)!=(0);
 $10 = ($$|0)!=(0);
 $or$cond69 = $10 & $9;
 L1: do {
  if ($or$cond69) {
   $$04672 = 0;$$04971 = $2;$$05270 = $$;$$073 = $$56;$45 = $$cast;
   while(1) {
    $11 = ($$04971>>>0)>=($$05270>>>0);
    $12 = ($$04971>>>0)>(32);
    $13 = $11 | $12;
    if (!($13)) {
     $$061 = $$073;$$147 = $$04672;$$150 = $$04971;$$254 = $$05270;$24 = $45;
     break L1;
    }
    $$052$$049 = $11 ? $$05270 : $$04971;
    $14 = (($$04971) - ($$052$$049))|0;
    $15 = (_wcsrtombs($$073,$6,$$052$$049,0)|0);
    $16 = ($15|0)==(-1);
    if ($16) {
     break;
    }
    $17 = ($$073|0)==($5|0);
    $18 = (($$073) + ($15)|0);
    $19 = $17 ? 0 : $15;
    $$153 = (($$05270) - ($19))|0;
    $$1 = $17 ? $$073 : $18;
    $20 = (($15) + ($$04672))|0;
    $21 = HEAP32[$6>>2]|0;
    $22 = ($21|0)!=(0|0);
    $23 = ($$153|0)!=(0);
    $or$cond = $23 & $22;
    if ($or$cond) {
     $$04672 = $20;$$04971 = $14;$$05270 = $$153;$$073 = $$1;$45 = $21;
    } else {
     $$061 = $$1;$$147 = $20;$$150 = $14;$$254 = $$153;$24 = $21;
     break L1;
    }
   }
   $$pr$pre = HEAP32[$6>>2]|0;
   $$061 = $$073;$$147 = -1;$$150 = $14;$$254 = 0;$24 = $$pr$pre;
  } else {
   $$061 = $$56;$$147 = 0;$$150 = $2;$$254 = $$;$24 = $$cast;
  }
 } while(0);
 $25 = ($24|0)==(0|0);
 L8: do {
  if ($25) {
   $$3 = $$147;
  } else {
   $26 = ($$254|0)!=(0);
   $27 = ($$150|0)!=(0);
   $28 = $26 & $27;
   if ($28) {
    $$24867 = $$147;$$25166 = $$150;$$268 = $$061;$$35565 = $$254;$30 = $24;
    while(1) {
     $29 = HEAP32[$30>>2]|0;
     $31 = (_wcrtomb($$268,$29,0)|0);
     $32 = (($31) + 1)|0;
     $33 = ($32>>>0)<(2);
     if ($33) {
      break;
     }
     $35 = HEAP32[$6>>2]|0;
     $36 = ((($35)) + 4|0);
     HEAP32[$6>>2] = $36;
     $37 = (($$25166) + -1)|0;
     $38 = (($$268) + ($31)|0);
     $39 = (($$35565) - ($31))|0;
     $40 = (($$24867) + 1)|0;
     $41 = ($39|0)!=(0);
     $42 = ($37|0)!=(0);
     $43 = $41 & $42;
     if ($43) {
      $$24867 = $40;$$25166 = $37;$$268 = $38;$$35565 = $39;$30 = $36;
     } else {
      $$3 = $40;
      break L8;
     }
    }
    $34 = ($31|0)==(0);
    if ($34) {
     HEAP32[$6>>2] = 0;
     $$3 = $$24867;
    } else {
     $$3 = -1;
    }
   } else {
    $$3 = $$147;
   }
  }
 } while(0);
 if ($8) {
  $44 = HEAP32[$6>>2]|0;
  HEAP32[$1>>2] = $44;
 }
 STACKTOP = sp;return ($$3|0);
}
function _mbrlen($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)!=(0|0);
 $4 = $3 ? $2 : 39160;
 $5 = (_mbrtowc(0,$0,$1,$4)|0);
 return ($5|0);
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0190$i = 0, $$$0191$i = 0, $$$4349$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$0$i18$i = 0, $$01$i$i = 0, $$0187$i = 0, $$0189$i = 0, $$0190$i = 0, $$0191$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0;
 var $$024370$i = 0, $$0286$i$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0294$i$i = 0, $$0295$i$i = 0, $$0340$i = 0, $$0342$i = 0, $$0343$i = 0, $$0345$i = 0, $$0351$i = 0, $$0356$i = 0, $$0357$$i = 0, $$0357$i = 0, $$0359$i = 0, $$0360$i = 0, $$0366$i = 0, $$1194$i = 0, $$1196$i = 0, $$124469$i = 0;
 var $$1290$i$i = 0, $$1292$i$i = 0, $$1341$i = 0, $$1346$i = 0, $$1361$i = 0, $$1368$i = 0, $$1372$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2353$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i201 = 0, $$3348$i = 0, $$3370$i = 0, $$4$lcssa$i = 0, $$413$i = 0, $$4349$lcssa$i = 0, $$434912$i = 0, $$4355$$4$i = 0;
 var $$4355$ph$i = 0, $$435511$i = 0, $$5256$i = 0, $$723947$i = 0, $$748$i = 0, $$not$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i19$i = 0, $$pre$i205 = 0, $$pre$i208 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i20$iZ2D = 0, $$pre$phi$i206Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi10$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre9$i$i = 0, $1 = 0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
 var $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0;
 var $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0;
 var $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0;
 var $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0;
 var $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0;
 var $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0;
 var $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0;
 var $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0;
 var $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0;
 var $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0;
 var $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0;
 var $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0;
 var $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0;
 var $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0;
 var $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0;
 var $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0;
 var $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0;
 var $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i204 = 0, $exitcond$i$i = 0, $not$$i$i = 0, $not$$i22$i = 0;
 var $not$7$i = 0, $or$cond$i = 0, $or$cond$i211 = 0, $or$cond1$i = 0, $or$cond1$i210 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[9791]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (39204 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($16|0)==($20|0);
    do {
     if ($21) {
      $22 = 1 << $14;
      $23 = $22 ^ -1;
      $24 = $8 & $23;
      HEAP32[9791] = $24;
     } else {
      $25 = HEAP32[(39180)>>2]|0;
      $26 = ($20>>>0)<($25>>>0);
      if ($26) {
       _abort();
       // unreachable;
      }
      $27 = ((($20)) + 12|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ($28|0)==($18|0);
      if ($29) {
       HEAP32[$27>>2] = $16;
       HEAP32[$17>>2] = $20;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $30 = $14 << 3;
    $31 = $30 | 3;
    $32 = ((($18)) + 4|0);
    HEAP32[$32>>2] = $31;
    $33 = (($18) + ($30)|0);
    $34 = ((($33)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $35 | 1;
    HEAP32[$34>>2] = $36;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $37 = HEAP32[(39172)>>2]|0;
   $38 = ($6>>>0)>($37>>>0);
   if ($38) {
    $39 = ($9|0)==(0);
    if (!($39)) {
     $40 = $9 << $7;
     $41 = 2 << $7;
     $42 = (0 - ($41))|0;
     $43 = $41 | $42;
     $44 = $40 & $43;
     $45 = (0 - ($44))|0;
     $46 = $44 & $45;
     $47 = (($46) + -1)|0;
     $48 = $47 >>> 12;
     $49 = $48 & 16;
     $50 = $47 >>> $49;
     $51 = $50 >>> 5;
     $52 = $51 & 8;
     $53 = $52 | $49;
     $54 = $50 >>> $52;
     $55 = $54 >>> 2;
     $56 = $55 & 4;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 2;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = $62 >>> 1;
     $64 = $63 & 1;
     $65 = $61 | $64;
     $66 = $62 >>> $64;
     $67 = (($65) + ($66))|0;
     $68 = $67 << 1;
     $69 = (39204 + ($68<<2)|0);
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($71)) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($69|0)==($73|0);
     do {
      if ($74) {
       $75 = 1 << $67;
       $76 = $75 ^ -1;
       $77 = $8 & $76;
       HEAP32[9791] = $77;
       $98 = $77;
      } else {
       $78 = HEAP32[(39180)>>2]|0;
       $79 = ($73>>>0)<($78>>>0);
       if ($79) {
        _abort();
        // unreachable;
       }
       $80 = ((($73)) + 12|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($81|0)==($71|0);
       if ($82) {
        HEAP32[$80>>2] = $69;
        HEAP32[$70>>2] = $73;
        $98 = $8;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $83 = $67 << 3;
     $84 = (($83) - ($6))|0;
     $85 = $6 | 3;
     $86 = ((($71)) + 4|0);
     HEAP32[$86>>2] = $85;
     $87 = (($71) + ($6)|0);
     $88 = $84 | 1;
     $89 = ((($87)) + 4|0);
     HEAP32[$89>>2] = $88;
     $90 = (($87) + ($84)|0);
     HEAP32[$90>>2] = $84;
     $91 = ($37|0)==(0);
     if (!($91)) {
      $92 = HEAP32[(39184)>>2]|0;
      $93 = $37 >>> 3;
      $94 = $93 << 1;
      $95 = (39204 + ($94<<2)|0);
      $96 = 1 << $93;
      $97 = $98 & $96;
      $99 = ($97|0)==(0);
      if ($99) {
       $100 = $98 | $96;
       HEAP32[9791] = $100;
       $$pre = ((($95)) + 8|0);
       $$0199 = $95;$$pre$phiZ2D = $$pre;
      } else {
       $101 = ((($95)) + 8|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = HEAP32[(39180)>>2]|0;
       $104 = ($102>>>0)<($103>>>0);
       if ($104) {
        _abort();
        // unreachable;
       } else {
        $$0199 = $102;$$pre$phiZ2D = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $92;
      $105 = ((($$0199)) + 12|0);
      HEAP32[$105>>2] = $92;
      $106 = ((($92)) + 8|0);
      HEAP32[$106>>2] = $$0199;
      $107 = ((($92)) + 12|0);
      HEAP32[$107>>2] = $95;
     }
     HEAP32[(39172)>>2] = $84;
     HEAP32[(39184)>>2] = $87;
     $$0 = $72;
     STACKTOP = sp;return ($$0|0);
    }
    $108 = HEAP32[(39168)>>2]|0;
    $109 = ($108|0)==(0);
    if ($109) {
     $$0197 = $6;
    } else {
     $110 = (0 - ($108))|0;
     $111 = $108 & $110;
     $112 = (($111) + -1)|0;
     $113 = $112 >>> 12;
     $114 = $113 & 16;
     $115 = $112 >>> $114;
     $116 = $115 >>> 5;
     $117 = $116 & 8;
     $118 = $117 | $114;
     $119 = $115 >>> $117;
     $120 = $119 >>> 2;
     $121 = $120 & 4;
     $122 = $118 | $121;
     $123 = $119 >>> $121;
     $124 = $123 >>> 1;
     $125 = $124 & 2;
     $126 = $122 | $125;
     $127 = $123 >>> $125;
     $128 = $127 >>> 1;
     $129 = $128 & 1;
     $130 = $126 | $129;
     $131 = $127 >>> $129;
     $132 = (($130) + ($131))|0;
     $133 = (39468 + ($132<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ((($134)) + 4|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $136 & -8;
     $138 = (($137) - ($6))|0;
     $$0189$i = $134;$$0190$i = $134;$$0191$i = $138;
     while(1) {
      $139 = ((($$0189$i)) + 16|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ($140|0)==(0|0);
      if ($141) {
       $142 = ((($$0189$i)) + 20|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ($143|0)==(0|0);
       if ($144) {
        break;
       } else {
        $146 = $143;
       }
      } else {
       $146 = $140;
      }
      $145 = ((($146)) + 4|0);
      $147 = HEAP32[$145>>2]|0;
      $148 = $147 & -8;
      $149 = (($148) - ($6))|0;
      $150 = ($149>>>0)<($$0191$i>>>0);
      $$$0191$i = $150 ? $149 : $$0191$i;
      $$$0190$i = $150 ? $146 : $$0190$i;
      $$0189$i = $146;$$0190$i = $$$0190$i;$$0191$i = $$$0191$i;
     }
     $151 = HEAP32[(39180)>>2]|0;
     $152 = ($$0190$i>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     }
     $153 = (($$0190$i) + ($6)|0);
     $154 = ($$0190$i>>>0)<($153>>>0);
     if (!($154)) {
      _abort();
      // unreachable;
     }
     $155 = ((($$0190$i)) + 24|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ((($$0190$i)) + 12|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = ($158|0)==($$0190$i|0);
     do {
      if ($159) {
       $169 = ((($$0190$i)) + 20|0);
       $170 = HEAP32[$169>>2]|0;
       $171 = ($170|0)==(0|0);
       if ($171) {
        $172 = ((($$0190$i)) + 16|0);
        $173 = HEAP32[$172>>2]|0;
        $174 = ($173|0)==(0|0);
        if ($174) {
         $$3$i = 0;
         break;
        } else {
         $$1194$i = $173;$$1196$i = $172;
        }
       } else {
        $$1194$i = $170;$$1196$i = $169;
       }
       while(1) {
        $175 = ((($$1194$i)) + 20|0);
        $176 = HEAP32[$175>>2]|0;
        $177 = ($176|0)==(0|0);
        if (!($177)) {
         $$1194$i = $176;$$1196$i = $175;
         continue;
        }
        $178 = ((($$1194$i)) + 16|0);
        $179 = HEAP32[$178>>2]|0;
        $180 = ($179|0)==(0|0);
        if ($180) {
         break;
        } else {
         $$1194$i = $179;$$1196$i = $178;
        }
       }
       $181 = ($$1196$i>>>0)<($151>>>0);
       if ($181) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$1196$i>>2] = 0;
        $$3$i = $$1194$i;
        break;
       }
      } else {
       $160 = ((($$0190$i)) + 8|0);
       $161 = HEAP32[$160>>2]|0;
       $162 = ($161>>>0)<($151>>>0);
       if ($162) {
        _abort();
        // unreachable;
       }
       $163 = ((($161)) + 12|0);
       $164 = HEAP32[$163>>2]|0;
       $165 = ($164|0)==($$0190$i|0);
       if (!($165)) {
        _abort();
        // unreachable;
       }
       $166 = ((($158)) + 8|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = ($167|0)==($$0190$i|0);
       if ($168) {
        HEAP32[$163>>2] = $158;
        HEAP32[$166>>2] = $161;
        $$3$i = $158;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $182 = ($156|0)==(0|0);
     do {
      if (!($182)) {
       $183 = ((($$0190$i)) + 28|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = (39468 + ($184<<2)|0);
       $186 = HEAP32[$185>>2]|0;
       $187 = ($$0190$i|0)==($186|0);
       if ($187) {
        HEAP32[$185>>2] = $$3$i;
        $cond$i = ($$3$i|0)==(0|0);
        if ($cond$i) {
         $188 = 1 << $184;
         $189 = $188 ^ -1;
         $190 = $108 & $189;
         HEAP32[(39168)>>2] = $190;
         break;
        }
       } else {
        $191 = HEAP32[(39180)>>2]|0;
        $192 = ($156>>>0)<($191>>>0);
        if ($192) {
         _abort();
         // unreachable;
        }
        $193 = ((($156)) + 16|0);
        $194 = HEAP32[$193>>2]|0;
        $195 = ($194|0)==($$0190$i|0);
        if ($195) {
         HEAP32[$193>>2] = $$3$i;
        } else {
         $196 = ((($156)) + 20|0);
         HEAP32[$196>>2] = $$3$i;
        }
        $197 = ($$3$i|0)==(0|0);
        if ($197) {
         break;
        }
       }
       $198 = HEAP32[(39180)>>2]|0;
       $199 = ($$3$i>>>0)<($198>>>0);
       if ($199) {
        _abort();
        // unreachable;
       }
       $200 = ((($$3$i)) + 24|0);
       HEAP32[$200>>2] = $156;
       $201 = ((($$0190$i)) + 16|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = ($202|0)==(0|0);
       do {
        if (!($203)) {
         $204 = ($202>>>0)<($198>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = ((($$3$i)) + 16|0);
          HEAP32[$205>>2] = $202;
          $206 = ((($202)) + 24|0);
          HEAP32[$206>>2] = $$3$i;
          break;
         }
        }
       } while(0);
       $207 = ((($$0190$i)) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[(39180)>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = ((($$3$i)) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = ((($208)) + 24|0);
         HEAP32[$213>>2] = $$3$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($$0191$i>>>0)<(16);
     if ($214) {
      $215 = (($$0191$i) + ($6))|0;
      $216 = $215 | 3;
      $217 = ((($$0190$i)) + 4|0);
      HEAP32[$217>>2] = $216;
      $218 = (($$0190$i) + ($215)|0);
      $219 = ((($218)) + 4|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $220 | 1;
      HEAP32[$219>>2] = $221;
     } else {
      $222 = $6 | 3;
      $223 = ((($$0190$i)) + 4|0);
      HEAP32[$223>>2] = $222;
      $224 = $$0191$i | 1;
      $225 = ((($153)) + 4|0);
      HEAP32[$225>>2] = $224;
      $226 = (($153) + ($$0191$i)|0);
      HEAP32[$226>>2] = $$0191$i;
      $227 = ($37|0)==(0);
      if (!($227)) {
       $228 = HEAP32[(39184)>>2]|0;
       $229 = $37 >>> 3;
       $230 = $229 << 1;
       $231 = (39204 + ($230<<2)|0);
       $232 = 1 << $229;
       $233 = $8 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $8 | $232;
        HEAP32[9791] = $235;
        $$pre$i = ((($231)) + 8|0);
        $$0187$i = $231;$$pre$phi$iZ2D = $$pre$i;
       } else {
        $236 = ((($231)) + 8|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(39180)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$0187$i = $237;$$pre$phi$iZ2D = $236;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $240 = ((($$0187$i)) + 12|0);
       HEAP32[$240>>2] = $228;
       $241 = ((($228)) + 8|0);
       HEAP32[$241>>2] = $$0187$i;
       $242 = ((($228)) + 12|0);
       HEAP32[$242>>2] = $231;
      }
      HEAP32[(39172)>>2] = $$0191$i;
      HEAP32[(39184)>>2] = $153;
     }
     $243 = ((($$0190$i)) + 8|0);
     $$0 = $243;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $$0197 = $6;
   }
  } else {
   $244 = ($0>>>0)>(4294967231);
   if ($244) {
    $$0197 = -1;
   } else {
    $245 = (($0) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(39168)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $$0197 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $$0356$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $$0356$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $$0356$i = $274;
      }
     }
     $275 = (39468 + ($$0356$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L123: do {
      if ($277) {
       $$2353$i = 0;$$3$i201 = 0;$$3348$i = $249;
       label = 86;
      } else {
       $278 = ($$0356$i|0)==(31);
       $279 = $$0356$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $$0340$i = 0;$$0345$i = $249;$$0351$i = $276;$$0357$i = $282;$$0360$i = 0;
       while(1) {
        $283 = ((($$0351$i)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($$0345$i>>>0);
        if ($287) {
         $288 = ($286|0)==(0);
         if ($288) {
          $$413$i = $$0351$i;$$434912$i = 0;$$435511$i = $$0351$i;
          label = 90;
          break L123;
         } else {
          $$1341$i = $$0351$i;$$1346$i = $286;
         }
        } else {
         $$1341$i = $$0340$i;$$1346$i = $$0345$i;
        }
        $289 = ((($$0351$i)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $$0357$i >>> 31;
        $292 = (((($$0351$i)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond1$i = $294 | $295;
        $$1361$i = $or$cond1$i ? $$0360$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $296&1;
        $298 = $297 ^ 1;
        $$0357$$i = $$0357$i << $298;
        if ($296) {
         $$2353$i = $$1361$i;$$3$i201 = $$1341$i;$$3348$i = $$1346$i;
         label = 86;
         break;
        } else {
         $$0340$i = $$1341$i;$$0345$i = $$1346$i;$$0351$i = $293;$$0357$i = $$0357$$i;$$0360$i = $$1361$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $299 = ($$2353$i|0)==(0|0);
      $300 = ($$3$i201|0)==(0|0);
      $or$cond$i = $299 & $300;
      if ($or$cond$i) {
       $301 = 2 << $$0356$i;
       $302 = (0 - ($301))|0;
       $303 = $301 | $302;
       $304 = $247 & $303;
       $305 = ($304|0)==(0);
       if ($305) {
        $$0197 = $246;
        break;
       }
       $306 = (0 - ($304))|0;
       $307 = $304 & $306;
       $308 = (($307) + -1)|0;
       $309 = $308 >>> 12;
       $310 = $309 & 16;
       $311 = $308 >>> $310;
       $312 = $311 >>> 5;
       $313 = $312 & 8;
       $314 = $313 | $310;
       $315 = $311 >>> $313;
       $316 = $315 >>> 2;
       $317 = $316 & 4;
       $318 = $314 | $317;
       $319 = $315 >>> $317;
       $320 = $319 >>> 1;
       $321 = $320 & 2;
       $322 = $318 | $321;
       $323 = $319 >>> $321;
       $324 = $323 >>> 1;
       $325 = $324 & 1;
       $326 = $322 | $325;
       $327 = $323 >>> $325;
       $328 = (($326) + ($327))|0;
       $329 = (39468 + ($328<<2)|0);
       $330 = HEAP32[$329>>2]|0;
       $$4355$ph$i = $330;
      } else {
       $$4355$ph$i = $$2353$i;
      }
      $331 = ($$4355$ph$i|0)==(0|0);
      if ($331) {
       $$4$lcssa$i = $$3$i201;$$4349$lcssa$i = $$3348$i;
      } else {
       $$413$i = $$3$i201;$$434912$i = $$3348$i;$$435511$i = $$4355$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $332 = ((($$435511$i)) + 4|0);
       $333 = HEAP32[$332>>2]|0;
       $334 = $333 & -8;
       $335 = (($334) - ($246))|0;
       $336 = ($335>>>0)<($$434912$i>>>0);
       $$$4349$i = $336 ? $335 : $$434912$i;
       $$4355$$4$i = $336 ? $$435511$i : $$413$i;
       $337 = ((($$435511$i)) + 16|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ($338|0)==(0|0);
       if (!($339)) {
        $$413$i = $$4355$$4$i;$$434912$i = $$$4349$i;$$435511$i = $338;
        label = 90;
        continue;
       }
       $340 = ((($$435511$i)) + 20|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = ($341|0)==(0|0);
       if ($342) {
        $$4$lcssa$i = $$4355$$4$i;$$4349$lcssa$i = $$$4349$i;
        break;
       } else {
        $$413$i = $$4355$$4$i;$$434912$i = $$$4349$i;$$435511$i = $341;
        label = 90;
       }
      }
     }
     $343 = ($$4$lcssa$i|0)==(0|0);
     if ($343) {
      $$0197 = $246;
     } else {
      $344 = HEAP32[(39172)>>2]|0;
      $345 = (($344) - ($246))|0;
      $346 = ($$4349$lcssa$i>>>0)<($345>>>0);
      if ($346) {
       $347 = HEAP32[(39180)>>2]|0;
       $348 = ($$4$lcssa$i>>>0)<($347>>>0);
       if ($348) {
        _abort();
        // unreachable;
       }
       $349 = (($$4$lcssa$i) + ($246)|0);
       $350 = ($$4$lcssa$i>>>0)<($349>>>0);
       if (!($350)) {
        _abort();
        // unreachable;
       }
       $351 = ((($$4$lcssa$i)) + 24|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = ((($$4$lcssa$i)) + 12|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ($354|0)==($$4$lcssa$i|0);
       do {
        if ($355) {
         $365 = ((($$4$lcssa$i)) + 20|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = ($366|0)==(0|0);
         if ($367) {
          $368 = ((($$4$lcssa$i)) + 16|0);
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369|0)==(0|0);
          if ($370) {
           $$3370$i = 0;
           break;
          } else {
           $$1368$i = $369;$$1372$i = $368;
          }
         } else {
          $$1368$i = $366;$$1372$i = $365;
         }
         while(1) {
          $371 = ((($$1368$i)) + 20|0);
          $372 = HEAP32[$371>>2]|0;
          $373 = ($372|0)==(0|0);
          if (!($373)) {
           $$1368$i = $372;$$1372$i = $371;
           continue;
          }
          $374 = ((($$1368$i)) + 16|0);
          $375 = HEAP32[$374>>2]|0;
          $376 = ($375|0)==(0|0);
          if ($376) {
           break;
          } else {
           $$1368$i = $375;$$1372$i = $374;
          }
         }
         $377 = ($$1372$i>>>0)<($347>>>0);
         if ($377) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$1372$i>>2] = 0;
          $$3370$i = $$1368$i;
          break;
         }
        } else {
         $356 = ((($$4$lcssa$i)) + 8|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($357>>>0)<($347>>>0);
         if ($358) {
          _abort();
          // unreachable;
         }
         $359 = ((($357)) + 12|0);
         $360 = HEAP32[$359>>2]|0;
         $361 = ($360|0)==($$4$lcssa$i|0);
         if (!($361)) {
          _abort();
          // unreachable;
         }
         $362 = ((($354)) + 8|0);
         $363 = HEAP32[$362>>2]|0;
         $364 = ($363|0)==($$4$lcssa$i|0);
         if ($364) {
          HEAP32[$359>>2] = $354;
          HEAP32[$362>>2] = $357;
          $$3370$i = $354;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $378 = ($352|0)==(0|0);
       do {
        if ($378) {
         $470 = $247;
        } else {
         $379 = ((($$4$lcssa$i)) + 28|0);
         $380 = HEAP32[$379>>2]|0;
         $381 = (39468 + ($380<<2)|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = ($$4$lcssa$i|0)==($382|0);
         if ($383) {
          HEAP32[$381>>2] = $$3370$i;
          $cond$i204 = ($$3370$i|0)==(0|0);
          if ($cond$i204) {
           $384 = 1 << $380;
           $385 = $384 ^ -1;
           $386 = $247 & $385;
           HEAP32[(39168)>>2] = $386;
           $470 = $386;
           break;
          }
         } else {
          $387 = HEAP32[(39180)>>2]|0;
          $388 = ($352>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($352)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($$4$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $$3370$i;
          } else {
           $392 = ((($352)) + 20|0);
           HEAP32[$392>>2] = $$3370$i;
          }
          $393 = ($$3370$i|0)==(0|0);
          if ($393) {
           $470 = $247;
           break;
          }
         }
         $394 = HEAP32[(39180)>>2]|0;
         $395 = ($$3370$i>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($$3370$i)) + 24|0);
         HEAP32[$396>>2] = $352;
         $397 = ((($$4$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($$3370$i)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $$3370$i;
            break;
           }
          }
         } while(0);
         $403 = ((($$4$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if ($405) {
          $470 = $247;
         } else {
          $406 = HEAP32[(39180)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($$3370$i)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $$3370$i;
           $470 = $247;
           break;
          }
         }
        }
       } while(0);
       $410 = ($$4349$lcssa$i>>>0)<(16);
       do {
        if ($410) {
         $411 = (($$4349$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $414 = (($$4$lcssa$i) + ($411)|0);
         $415 = ((($414)) + 4|0);
         $416 = HEAP32[$415>>2]|0;
         $417 = $416 | 1;
         HEAP32[$415>>2] = $417;
        } else {
         $418 = $246 | 3;
         $419 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$419>>2] = $418;
         $420 = $$4349$lcssa$i | 1;
         $421 = ((($349)) + 4|0);
         HEAP32[$421>>2] = $420;
         $422 = (($349) + ($$4349$lcssa$i)|0);
         HEAP32[$422>>2] = $$4349$lcssa$i;
         $423 = $$4349$lcssa$i >>> 3;
         $424 = ($$4349$lcssa$i>>>0)<(256);
         if ($424) {
          $425 = $423 << 1;
          $426 = (39204 + ($425<<2)|0);
          $427 = HEAP32[9791]|0;
          $428 = 1 << $423;
          $429 = $427 & $428;
          $430 = ($429|0)==(0);
          if ($430) {
           $431 = $427 | $428;
           HEAP32[9791] = $431;
           $$pre$i205 = ((($426)) + 8|0);
           $$0366$i = $426;$$pre$phi$i206Z2D = $$pre$i205;
          } else {
           $432 = ((($426)) + 8|0);
           $433 = HEAP32[$432>>2]|0;
           $434 = HEAP32[(39180)>>2]|0;
           $435 = ($433>>>0)<($434>>>0);
           if ($435) {
            _abort();
            // unreachable;
           } else {
            $$0366$i = $433;$$pre$phi$i206Z2D = $432;
           }
          }
          HEAP32[$$pre$phi$i206Z2D>>2] = $349;
          $436 = ((($$0366$i)) + 12|0);
          HEAP32[$436>>2] = $349;
          $437 = ((($349)) + 8|0);
          HEAP32[$437>>2] = $$0366$i;
          $438 = ((($349)) + 12|0);
          HEAP32[$438>>2] = $426;
          break;
         }
         $439 = $$4349$lcssa$i >>> 8;
         $440 = ($439|0)==(0);
         if ($440) {
          $$0359$i = 0;
         } else {
          $441 = ($$4349$lcssa$i>>>0)>(16777215);
          if ($441) {
           $$0359$i = 31;
          } else {
           $442 = (($439) + 1048320)|0;
           $443 = $442 >>> 16;
           $444 = $443 & 8;
           $445 = $439 << $444;
           $446 = (($445) + 520192)|0;
           $447 = $446 >>> 16;
           $448 = $447 & 4;
           $449 = $448 | $444;
           $450 = $445 << $448;
           $451 = (($450) + 245760)|0;
           $452 = $451 >>> 16;
           $453 = $452 & 2;
           $454 = $449 | $453;
           $455 = (14 - ($454))|0;
           $456 = $450 << $453;
           $457 = $456 >>> 15;
           $458 = (($455) + ($457))|0;
           $459 = $458 << 1;
           $460 = (($458) + 7)|0;
           $461 = $$4349$lcssa$i >>> $460;
           $462 = $461 & 1;
           $463 = $462 | $459;
           $$0359$i = $463;
          }
         }
         $464 = (39468 + ($$0359$i<<2)|0);
         $465 = ((($349)) + 28|0);
         HEAP32[$465>>2] = $$0359$i;
         $466 = ((($349)) + 16|0);
         $467 = ((($466)) + 4|0);
         HEAP32[$467>>2] = 0;
         HEAP32[$466>>2] = 0;
         $468 = 1 << $$0359$i;
         $469 = $470 & $468;
         $471 = ($469|0)==(0);
         if ($471) {
          $472 = $470 | $468;
          HEAP32[(39168)>>2] = $472;
          HEAP32[$464>>2] = $349;
          $473 = ((($349)) + 24|0);
          HEAP32[$473>>2] = $464;
          $474 = ((($349)) + 12|0);
          HEAP32[$474>>2] = $349;
          $475 = ((($349)) + 8|0);
          HEAP32[$475>>2] = $349;
          break;
         }
         $476 = HEAP32[$464>>2]|0;
         $477 = ($$0359$i|0)==(31);
         $478 = $$0359$i >>> 1;
         $479 = (25 - ($478))|0;
         $480 = $477 ? 0 : $479;
         $481 = $$4349$lcssa$i << $480;
         $$0342$i = $481;$$0343$i = $476;
         while(1) {
          $482 = ((($$0343$i)) + 4|0);
          $483 = HEAP32[$482>>2]|0;
          $484 = $483 & -8;
          $485 = ($484|0)==($$4349$lcssa$i|0);
          if ($485) {
           label = 148;
           break;
          }
          $486 = $$0342$i >>> 31;
          $487 = (((($$0343$i)) + 16|0) + ($486<<2)|0);
          $488 = $$0342$i << 1;
          $489 = HEAP32[$487>>2]|0;
          $490 = ($489|0)==(0|0);
          if ($490) {
           label = 145;
           break;
          } else {
           $$0342$i = $488;$$0343$i = $489;
          }
         }
         if ((label|0) == 145) {
          $491 = HEAP32[(39180)>>2]|0;
          $492 = ($487>>>0)<($491>>>0);
          if ($492) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$487>>2] = $349;
           $493 = ((($349)) + 24|0);
           HEAP32[$493>>2] = $$0343$i;
           $494 = ((($349)) + 12|0);
           HEAP32[$494>>2] = $349;
           $495 = ((($349)) + 8|0);
           HEAP32[$495>>2] = $349;
           break;
          }
         }
         else if ((label|0) == 148) {
          $496 = ((($$0343$i)) + 8|0);
          $497 = HEAP32[$496>>2]|0;
          $498 = HEAP32[(39180)>>2]|0;
          $499 = ($497>>>0)>=($498>>>0);
          $not$7$i = ($$0343$i>>>0)>=($498>>>0);
          $500 = $499 & $not$7$i;
          if ($500) {
           $501 = ((($497)) + 12|0);
           HEAP32[$501>>2] = $349;
           HEAP32[$496>>2] = $349;
           $502 = ((($349)) + 8|0);
           HEAP32[$502>>2] = $497;
           $503 = ((($349)) + 12|0);
           HEAP32[$503>>2] = $$0343$i;
           $504 = ((($349)) + 24|0);
           HEAP32[$504>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $505 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $505;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0197 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $506 = HEAP32[(39172)>>2]|0;
 $507 = ($506>>>0)<($$0197>>>0);
 if (!($507)) {
  $508 = (($506) - ($$0197))|0;
  $509 = HEAP32[(39184)>>2]|0;
  $510 = ($508>>>0)>(15);
  if ($510) {
   $511 = (($509) + ($$0197)|0);
   HEAP32[(39184)>>2] = $511;
   HEAP32[(39172)>>2] = $508;
   $512 = $508 | 1;
   $513 = ((($511)) + 4|0);
   HEAP32[$513>>2] = $512;
   $514 = (($511) + ($508)|0);
   HEAP32[$514>>2] = $508;
   $515 = $$0197 | 3;
   $516 = ((($509)) + 4|0);
   HEAP32[$516>>2] = $515;
  } else {
   HEAP32[(39172)>>2] = 0;
   HEAP32[(39184)>>2] = 0;
   $517 = $506 | 3;
   $518 = ((($509)) + 4|0);
   HEAP32[$518>>2] = $517;
   $519 = (($509) + ($506)|0);
   $520 = ((($519)) + 4|0);
   $521 = HEAP32[$520>>2]|0;
   $522 = $521 | 1;
   HEAP32[$520>>2] = $522;
  }
  $523 = ((($509)) + 8|0);
  $$0 = $523;
  STACKTOP = sp;return ($$0|0);
 }
 $524 = HEAP32[(39176)>>2]|0;
 $525 = ($524>>>0)>($$0197>>>0);
 if ($525) {
  $526 = (($524) - ($$0197))|0;
  HEAP32[(39176)>>2] = $526;
  $527 = HEAP32[(39188)>>2]|0;
  $528 = (($527) + ($$0197)|0);
  HEAP32[(39188)>>2] = $528;
  $529 = $526 | 1;
  $530 = ((($528)) + 4|0);
  HEAP32[$530>>2] = $529;
  $531 = $$0197 | 3;
  $532 = ((($527)) + 4|0);
  HEAP32[$532>>2] = $531;
  $533 = ((($527)) + 8|0);
  $$0 = $533;
  STACKTOP = sp;return ($$0|0);
 }
 $534 = HEAP32[9909]|0;
 $535 = ($534|0)==(0);
 if ($535) {
  HEAP32[(39644)>>2] = 4096;
  HEAP32[(39640)>>2] = 4096;
  HEAP32[(39648)>>2] = -1;
  HEAP32[(39652)>>2] = -1;
  HEAP32[(39656)>>2] = 0;
  HEAP32[(39608)>>2] = 0;
  $536 = $1;
  $537 = $536 & -16;
  $538 = $537 ^ 1431655768;
  HEAP32[$1>>2] = $538;
  HEAP32[9909] = $538;
  $542 = 4096;
 } else {
  $$pre$i208 = HEAP32[(39644)>>2]|0;
  $542 = $$pre$i208;
 }
 $539 = (($$0197) + 48)|0;
 $540 = (($$0197) + 47)|0;
 $541 = (($542) + ($540))|0;
 $543 = (0 - ($542))|0;
 $544 = $541 & $543;
 $545 = ($544>>>0)>($$0197>>>0);
 if (!($545)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $546 = HEAP32[(39604)>>2]|0;
 $547 = ($546|0)==(0);
 if (!($547)) {
  $548 = HEAP32[(39596)>>2]|0;
  $549 = (($548) + ($544))|0;
  $550 = ($549>>>0)<=($548>>>0);
  $551 = ($549>>>0)>($546>>>0);
  $or$cond1$i210 = $550 | $551;
  if ($or$cond1$i210) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $552 = HEAP32[(39608)>>2]|0;
 $553 = $552 & 4;
 $554 = ($553|0)==(0);
 L255: do {
  if ($554) {
   $555 = HEAP32[(39188)>>2]|0;
   $556 = ($555|0)==(0|0);
   L257: do {
    if ($556) {
     label = 172;
    } else {
     $$0$i17$i = (39612);
     while(1) {
      $557 = HEAP32[$$0$i17$i>>2]|0;
      $558 = ($557>>>0)>($555>>>0);
      if (!($558)) {
       $559 = ((($$0$i17$i)) + 4|0);
       $560 = HEAP32[$559>>2]|0;
       $561 = (($557) + ($560)|0);
       $562 = ($561>>>0)>($555>>>0);
       if ($562) {
        break;
       }
      }
      $563 = ((($$0$i17$i)) + 8|0);
      $564 = HEAP32[$563>>2]|0;
      $565 = ($564|0)==(0|0);
      if ($565) {
       label = 172;
       break L257;
      } else {
       $$0$i17$i = $564;
      }
     }
     $588 = (($541) - ($524))|0;
     $589 = $588 & $543;
     $590 = ($589>>>0)<(2147483647);
     if ($590) {
      $591 = (_sbrk(($589|0))|0);
      $592 = HEAP32[$$0$i17$i>>2]|0;
      $593 = HEAP32[$559>>2]|0;
      $594 = (($592) + ($593)|0);
      $595 = ($591|0)==($594|0);
      if ($595) {
       $596 = ($591|0)==((-1)|0);
       if (!($596)) {
        $$723947$i = $589;$$748$i = $591;
        label = 190;
        break L255;
       }
      } else {
       $$2247$ph$i = $591;$$2253$ph$i = $589;
       label = 180;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 172) {
     $566 = (_sbrk(0)|0);
     $567 = ($566|0)==((-1)|0);
     if (!($567)) {
      $568 = $566;
      $569 = HEAP32[(39640)>>2]|0;
      $570 = (($569) + -1)|0;
      $571 = $570 & $568;
      $572 = ($571|0)==(0);
      $573 = (($570) + ($568))|0;
      $574 = (0 - ($569))|0;
      $575 = $573 & $574;
      $576 = (($575) - ($568))|0;
      $577 = $572 ? 0 : $576;
      $$$i = (($577) + ($544))|0;
      $578 = HEAP32[(39596)>>2]|0;
      $579 = (($$$i) + ($578))|0;
      $580 = ($$$i>>>0)>($$0197>>>0);
      $581 = ($$$i>>>0)<(2147483647);
      $or$cond$i211 = $580 & $581;
      if ($or$cond$i211) {
       $582 = HEAP32[(39604)>>2]|0;
       $583 = ($582|0)==(0);
       if (!($583)) {
        $584 = ($579>>>0)<=($578>>>0);
        $585 = ($579>>>0)>($582>>>0);
        $or$cond2$i = $584 | $585;
        if ($or$cond2$i) {
         break;
        }
       }
       $586 = (_sbrk(($$$i|0))|0);
       $587 = ($586|0)==($566|0);
       if ($587) {
        $$723947$i = $$$i;$$748$i = $566;
        label = 190;
        break L255;
       } else {
        $$2247$ph$i = $586;$$2253$ph$i = $$$i;
        label = 180;
       }
      }
     }
    }
   } while(0);
   L274: do {
    if ((label|0) == 180) {
     $597 = (0 - ($$2253$ph$i))|0;
     $598 = ($$2247$ph$i|0)!=((-1)|0);
     $599 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $599 & $598;
     $600 = ($539>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $600 & $or$cond7$i;
     do {
      if ($or$cond10$i) {
       $601 = HEAP32[(39644)>>2]|0;
       $602 = (($540) - ($$2253$ph$i))|0;
       $603 = (($602) + ($601))|0;
       $604 = (0 - ($601))|0;
       $605 = $603 & $604;
       $606 = ($605>>>0)<(2147483647);
       if ($606) {
        $607 = (_sbrk(($605|0))|0);
        $608 = ($607|0)==((-1)|0);
        if ($608) {
         (_sbrk(($597|0))|0);
         break L274;
        } else {
         $609 = (($605) + ($$2253$ph$i))|0;
         $$5256$i = $609;
         break;
        }
       } else {
        $$5256$i = $$2253$ph$i;
       }
      } else {
       $$5256$i = $$2253$ph$i;
      }
     } while(0);
     $610 = ($$2247$ph$i|0)==((-1)|0);
     if (!($610)) {
      $$723947$i = $$5256$i;$$748$i = $$2247$ph$i;
      label = 190;
      break L255;
     }
    }
   } while(0);
   $611 = HEAP32[(39608)>>2]|0;
   $612 = $611 | 4;
   HEAP32[(39608)>>2] = $612;
   label = 187;
  } else {
   label = 187;
  }
 } while(0);
 if ((label|0) == 187) {
  $613 = ($544>>>0)<(2147483647);
  if ($613) {
   $614 = (_sbrk(($544|0))|0);
   $615 = (_sbrk(0)|0);
   $616 = ($614|0)!=((-1)|0);
   $617 = ($615|0)!=((-1)|0);
   $or$cond5$i = $616 & $617;
   $618 = ($614>>>0)<($615>>>0);
   $or$cond11$i = $618 & $or$cond5$i;
   if ($or$cond11$i) {
    $619 = $615;
    $620 = $614;
    $621 = (($619) - ($620))|0;
    $622 = (($$0197) + 40)|0;
    $$not$i = ($621>>>0)>($622>>>0);
    if ($$not$i) {
     $$723947$i = $621;$$748$i = $614;
     label = 190;
    }
   }
  }
 }
 if ((label|0) == 190) {
  $623 = HEAP32[(39596)>>2]|0;
  $624 = (($623) + ($$723947$i))|0;
  HEAP32[(39596)>>2] = $624;
  $625 = HEAP32[(39600)>>2]|0;
  $626 = ($624>>>0)>($625>>>0);
  if ($626) {
   HEAP32[(39600)>>2] = $624;
  }
  $627 = HEAP32[(39188)>>2]|0;
  $628 = ($627|0)==(0|0);
  do {
   if ($628) {
    $629 = HEAP32[(39180)>>2]|0;
    $630 = ($629|0)==(0|0);
    $631 = ($$748$i>>>0)<($629>>>0);
    $or$cond12$i = $630 | $631;
    if ($or$cond12$i) {
     HEAP32[(39180)>>2] = $$748$i;
    }
    HEAP32[(39612)>>2] = $$748$i;
    HEAP32[(39616)>>2] = $$723947$i;
    HEAP32[(39624)>>2] = 0;
    $632 = HEAP32[9909]|0;
    HEAP32[(39200)>>2] = $632;
    HEAP32[(39196)>>2] = -1;
    $$01$i$i = 0;
    while(1) {
     $633 = $$01$i$i << 1;
     $634 = (39204 + ($633<<2)|0);
     $635 = ((($634)) + 12|0);
     HEAP32[$635>>2] = $634;
     $636 = ((($634)) + 8|0);
     HEAP32[$636>>2] = $634;
     $637 = (($$01$i$i) + 1)|0;
     $exitcond$i$i = ($637|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $$01$i$i = $637;
     }
    }
    $638 = (($$723947$i) + -40)|0;
    $639 = ((($$748$i)) + 8|0);
    $640 = $639;
    $641 = $640 & 7;
    $642 = ($641|0)==(0);
    $643 = (0 - ($640))|0;
    $644 = $643 & 7;
    $645 = $642 ? 0 : $644;
    $646 = (($$748$i) + ($645)|0);
    $647 = (($638) - ($645))|0;
    HEAP32[(39188)>>2] = $646;
    HEAP32[(39176)>>2] = $647;
    $648 = $647 | 1;
    $649 = ((($646)) + 4|0);
    HEAP32[$649>>2] = $648;
    $650 = (($646) + ($647)|0);
    $651 = ((($650)) + 4|0);
    HEAP32[$651>>2] = 40;
    $652 = HEAP32[(39652)>>2]|0;
    HEAP32[(39192)>>2] = $652;
   } else {
    $$024370$i = (39612);
    while(1) {
     $653 = HEAP32[$$024370$i>>2]|0;
     $654 = ((($$024370$i)) + 4|0);
     $655 = HEAP32[$654>>2]|0;
     $656 = (($653) + ($655)|0);
     $657 = ($$748$i|0)==($656|0);
     if ($657) {
      label = 200;
      break;
     }
     $658 = ((($$024370$i)) + 8|0);
     $659 = HEAP32[$658>>2]|0;
     $660 = ($659|0)==(0|0);
     if ($660) {
      break;
     } else {
      $$024370$i = $659;
     }
    }
    if ((label|0) == 200) {
     $661 = ((($$024370$i)) + 12|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = $662 & 8;
     $664 = ($663|0)==(0);
     if ($664) {
      $665 = ($627>>>0)>=($653>>>0);
      $666 = ($627>>>0)<($$748$i>>>0);
      $or$cond50$i = $666 & $665;
      if ($or$cond50$i) {
       $667 = (($655) + ($$723947$i))|0;
       HEAP32[$654>>2] = $667;
       $668 = HEAP32[(39176)>>2]|0;
       $669 = ((($627)) + 8|0);
       $670 = $669;
       $671 = $670 & 7;
       $672 = ($671|0)==(0);
       $673 = (0 - ($670))|0;
       $674 = $673 & 7;
       $675 = $672 ? 0 : $674;
       $676 = (($627) + ($675)|0);
       $677 = (($$723947$i) - ($675))|0;
       $678 = (($677) + ($668))|0;
       HEAP32[(39188)>>2] = $676;
       HEAP32[(39176)>>2] = $678;
       $679 = $678 | 1;
       $680 = ((($676)) + 4|0);
       HEAP32[$680>>2] = $679;
       $681 = (($676) + ($678)|0);
       $682 = ((($681)) + 4|0);
       HEAP32[$682>>2] = 40;
       $683 = HEAP32[(39652)>>2]|0;
       HEAP32[(39192)>>2] = $683;
       break;
      }
     }
    }
    $684 = HEAP32[(39180)>>2]|0;
    $685 = ($$748$i>>>0)<($684>>>0);
    if ($685) {
     HEAP32[(39180)>>2] = $$748$i;
     $749 = $$748$i;
    } else {
     $749 = $684;
    }
    $686 = (($$748$i) + ($$723947$i)|0);
    $$124469$i = (39612);
    while(1) {
     $687 = HEAP32[$$124469$i>>2]|0;
     $688 = ($687|0)==($686|0);
     if ($688) {
      label = 208;
      break;
     }
     $689 = ((($$124469$i)) + 8|0);
     $690 = HEAP32[$689>>2]|0;
     $691 = ($690|0)==(0|0);
     if ($691) {
      $$0$i$i$i = (39612);
      break;
     } else {
      $$124469$i = $690;
     }
    }
    if ((label|0) == 208) {
     $692 = ((($$124469$i)) + 12|0);
     $693 = HEAP32[$692>>2]|0;
     $694 = $693 & 8;
     $695 = ($694|0)==(0);
     if ($695) {
      HEAP32[$$124469$i>>2] = $$748$i;
      $696 = ((($$124469$i)) + 4|0);
      $697 = HEAP32[$696>>2]|0;
      $698 = (($697) + ($$723947$i))|0;
      HEAP32[$696>>2] = $698;
      $699 = ((($$748$i)) + 8|0);
      $700 = $699;
      $701 = $700 & 7;
      $702 = ($701|0)==(0);
      $703 = (0 - ($700))|0;
      $704 = $703 & 7;
      $705 = $702 ? 0 : $704;
      $706 = (($$748$i) + ($705)|0);
      $707 = ((($686)) + 8|0);
      $708 = $707;
      $709 = $708 & 7;
      $710 = ($709|0)==(0);
      $711 = (0 - ($708))|0;
      $712 = $711 & 7;
      $713 = $710 ? 0 : $712;
      $714 = (($686) + ($713)|0);
      $715 = $714;
      $716 = $706;
      $717 = (($715) - ($716))|0;
      $718 = (($706) + ($$0197)|0);
      $719 = (($717) - ($$0197))|0;
      $720 = $$0197 | 3;
      $721 = ((($706)) + 4|0);
      HEAP32[$721>>2] = $720;
      $722 = ($714|0)==($627|0);
      do {
       if ($722) {
        $723 = HEAP32[(39176)>>2]|0;
        $724 = (($723) + ($719))|0;
        HEAP32[(39176)>>2] = $724;
        HEAP32[(39188)>>2] = $718;
        $725 = $724 | 1;
        $726 = ((($718)) + 4|0);
        HEAP32[$726>>2] = $725;
       } else {
        $727 = HEAP32[(39184)>>2]|0;
        $728 = ($714|0)==($727|0);
        if ($728) {
         $729 = HEAP32[(39172)>>2]|0;
         $730 = (($729) + ($719))|0;
         HEAP32[(39172)>>2] = $730;
         HEAP32[(39184)>>2] = $718;
         $731 = $730 | 1;
         $732 = ((($718)) + 4|0);
         HEAP32[$732>>2] = $731;
         $733 = (($718) + ($730)|0);
         HEAP32[$733>>2] = $730;
         break;
        }
        $734 = ((($714)) + 4|0);
        $735 = HEAP32[$734>>2]|0;
        $736 = $735 & 3;
        $737 = ($736|0)==(1);
        if ($737) {
         $738 = $735 & -8;
         $739 = $735 >>> 3;
         $740 = ($735>>>0)<(256);
         L326: do {
          if ($740) {
           $741 = ((($714)) + 8|0);
           $742 = HEAP32[$741>>2]|0;
           $743 = ((($714)) + 12|0);
           $744 = HEAP32[$743>>2]|0;
           $745 = $739 << 1;
           $746 = (39204 + ($745<<2)|0);
           $747 = ($742|0)==($746|0);
           do {
            if (!($747)) {
             $748 = ($742>>>0)<($749>>>0);
             if ($748) {
              _abort();
              // unreachable;
             }
             $750 = ((($742)) + 12|0);
             $751 = HEAP32[$750>>2]|0;
             $752 = ($751|0)==($714|0);
             if ($752) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $753 = ($744|0)==($742|0);
           if ($753) {
            $754 = 1 << $739;
            $755 = $754 ^ -1;
            $756 = HEAP32[9791]|0;
            $757 = $756 & $755;
            HEAP32[9791] = $757;
            break;
           }
           $758 = ($744|0)==($746|0);
           do {
            if ($758) {
             $$pre9$i$i = ((($744)) + 8|0);
             $$pre$phi10$i$iZ2D = $$pre9$i$i;
            } else {
             $759 = ($744>>>0)<($749>>>0);
             if ($759) {
              _abort();
              // unreachable;
             }
             $760 = ((($744)) + 8|0);
             $761 = HEAP32[$760>>2]|0;
             $762 = ($761|0)==($714|0);
             if ($762) {
              $$pre$phi10$i$iZ2D = $760;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $763 = ((($742)) + 12|0);
           HEAP32[$763>>2] = $744;
           HEAP32[$$pre$phi10$i$iZ2D>>2] = $742;
          } else {
           $764 = ((($714)) + 24|0);
           $765 = HEAP32[$764>>2]|0;
           $766 = ((($714)) + 12|0);
           $767 = HEAP32[$766>>2]|0;
           $768 = ($767|0)==($714|0);
           do {
            if ($768) {
             $778 = ((($714)) + 16|0);
             $779 = ((($778)) + 4|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==(0|0);
             if ($781) {
              $782 = HEAP32[$778>>2]|0;
              $783 = ($782|0)==(0|0);
              if ($783) {
               $$3$i$i = 0;
               break;
              } else {
               $$1290$i$i = $782;$$1292$i$i = $778;
              }
             } else {
              $$1290$i$i = $780;$$1292$i$i = $779;
             }
             while(1) {
              $784 = ((($$1290$i$i)) + 20|0);
              $785 = HEAP32[$784>>2]|0;
              $786 = ($785|0)==(0|0);
              if (!($786)) {
               $$1290$i$i = $785;$$1292$i$i = $784;
               continue;
              }
              $787 = ((($$1290$i$i)) + 16|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               break;
              } else {
               $$1290$i$i = $788;$$1292$i$i = $787;
              }
             }
             $790 = ($$1292$i$i>>>0)<($749>>>0);
             if ($790) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$$1292$i$i>>2] = 0;
              $$3$i$i = $$1290$i$i;
              break;
             }
            } else {
             $769 = ((($714)) + 8|0);
             $770 = HEAP32[$769>>2]|0;
             $771 = ($770>>>0)<($749>>>0);
             if ($771) {
              _abort();
              // unreachable;
             }
             $772 = ((($770)) + 12|0);
             $773 = HEAP32[$772>>2]|0;
             $774 = ($773|0)==($714|0);
             if (!($774)) {
              _abort();
              // unreachable;
             }
             $775 = ((($767)) + 8|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776|0)==($714|0);
             if ($777) {
              HEAP32[$772>>2] = $767;
              HEAP32[$775>>2] = $770;
              $$3$i$i = $767;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $791 = ($765|0)==(0|0);
           if ($791) {
            break;
           }
           $792 = ((($714)) + 28|0);
           $793 = HEAP32[$792>>2]|0;
           $794 = (39468 + ($793<<2)|0);
           $795 = HEAP32[$794>>2]|0;
           $796 = ($714|0)==($795|0);
           do {
            if ($796) {
             HEAP32[$794>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $797 = 1 << $793;
             $798 = $797 ^ -1;
             $799 = HEAP32[(39168)>>2]|0;
             $800 = $799 & $798;
             HEAP32[(39168)>>2] = $800;
             break L326;
            } else {
             $801 = HEAP32[(39180)>>2]|0;
             $802 = ($765>>>0)<($801>>>0);
             if ($802) {
              _abort();
              // unreachable;
             }
             $803 = ((($765)) + 16|0);
             $804 = HEAP32[$803>>2]|0;
             $805 = ($804|0)==($714|0);
             if ($805) {
              HEAP32[$803>>2] = $$3$i$i;
             } else {
              $806 = ((($765)) + 20|0);
              HEAP32[$806>>2] = $$3$i$i;
             }
             $807 = ($$3$i$i|0)==(0|0);
             if ($807) {
              break L326;
             }
            }
           } while(0);
           $808 = HEAP32[(39180)>>2]|0;
           $809 = ($$3$i$i>>>0)<($808>>>0);
           if ($809) {
            _abort();
            // unreachable;
           }
           $810 = ((($$3$i$i)) + 24|0);
           HEAP32[$810>>2] = $765;
           $811 = ((($714)) + 16|0);
           $812 = HEAP32[$811>>2]|0;
           $813 = ($812|0)==(0|0);
           do {
            if (!($813)) {
             $814 = ($812>>>0)<($808>>>0);
             if ($814) {
              _abort();
              // unreachable;
             } else {
              $815 = ((($$3$i$i)) + 16|0);
              HEAP32[$815>>2] = $812;
              $816 = ((($812)) + 24|0);
              HEAP32[$816>>2] = $$3$i$i;
              break;
             }
            }
           } while(0);
           $817 = ((($811)) + 4|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           if ($819) {
            break;
           }
           $820 = HEAP32[(39180)>>2]|0;
           $821 = ($818>>>0)<($820>>>0);
           if ($821) {
            _abort();
            // unreachable;
           } else {
            $822 = ((($$3$i$i)) + 20|0);
            HEAP32[$822>>2] = $818;
            $823 = ((($818)) + 24|0);
            HEAP32[$823>>2] = $$3$i$i;
            break;
           }
          }
         } while(0);
         $824 = (($714) + ($738)|0);
         $825 = (($738) + ($719))|0;
         $$0$i18$i = $824;$$0286$i$i = $825;
        } else {
         $$0$i18$i = $714;$$0286$i$i = $719;
        }
        $826 = ((($$0$i18$i)) + 4|0);
        $827 = HEAP32[$826>>2]|0;
        $828 = $827 & -2;
        HEAP32[$826>>2] = $828;
        $829 = $$0286$i$i | 1;
        $830 = ((($718)) + 4|0);
        HEAP32[$830>>2] = $829;
        $831 = (($718) + ($$0286$i$i)|0);
        HEAP32[$831>>2] = $$0286$i$i;
        $832 = $$0286$i$i >>> 3;
        $833 = ($$0286$i$i>>>0)<(256);
        if ($833) {
         $834 = $832 << 1;
         $835 = (39204 + ($834<<2)|0);
         $836 = HEAP32[9791]|0;
         $837 = 1 << $832;
         $838 = $836 & $837;
         $839 = ($838|0)==(0);
         do {
          if ($839) {
           $840 = $836 | $837;
           HEAP32[9791] = $840;
           $$pre$i19$i = ((($835)) + 8|0);
           $$0294$i$i = $835;$$pre$phi$i20$iZ2D = $$pre$i19$i;
          } else {
           $841 = ((($835)) + 8|0);
           $842 = HEAP32[$841>>2]|0;
           $843 = HEAP32[(39180)>>2]|0;
           $844 = ($842>>>0)<($843>>>0);
           if (!($844)) {
            $$0294$i$i = $842;$$pre$phi$i20$iZ2D = $841;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i20$iZ2D>>2] = $718;
         $845 = ((($$0294$i$i)) + 12|0);
         HEAP32[$845>>2] = $718;
         $846 = ((($718)) + 8|0);
         HEAP32[$846>>2] = $$0294$i$i;
         $847 = ((($718)) + 12|0);
         HEAP32[$847>>2] = $835;
         break;
        }
        $848 = $$0286$i$i >>> 8;
        $849 = ($848|0)==(0);
        do {
         if ($849) {
          $$0295$i$i = 0;
         } else {
          $850 = ($$0286$i$i>>>0)>(16777215);
          if ($850) {
           $$0295$i$i = 31;
           break;
          }
          $851 = (($848) + 1048320)|0;
          $852 = $851 >>> 16;
          $853 = $852 & 8;
          $854 = $848 << $853;
          $855 = (($854) + 520192)|0;
          $856 = $855 >>> 16;
          $857 = $856 & 4;
          $858 = $857 | $853;
          $859 = $854 << $857;
          $860 = (($859) + 245760)|0;
          $861 = $860 >>> 16;
          $862 = $861 & 2;
          $863 = $858 | $862;
          $864 = (14 - ($863))|0;
          $865 = $859 << $862;
          $866 = $865 >>> 15;
          $867 = (($864) + ($866))|0;
          $868 = $867 << 1;
          $869 = (($867) + 7)|0;
          $870 = $$0286$i$i >>> $869;
          $871 = $870 & 1;
          $872 = $871 | $868;
          $$0295$i$i = $872;
         }
        } while(0);
        $873 = (39468 + ($$0295$i$i<<2)|0);
        $874 = ((($718)) + 28|0);
        HEAP32[$874>>2] = $$0295$i$i;
        $875 = ((($718)) + 16|0);
        $876 = ((($875)) + 4|0);
        HEAP32[$876>>2] = 0;
        HEAP32[$875>>2] = 0;
        $877 = HEAP32[(39168)>>2]|0;
        $878 = 1 << $$0295$i$i;
        $879 = $877 & $878;
        $880 = ($879|0)==(0);
        if ($880) {
         $881 = $877 | $878;
         HEAP32[(39168)>>2] = $881;
         HEAP32[$873>>2] = $718;
         $882 = ((($718)) + 24|0);
         HEAP32[$882>>2] = $873;
         $883 = ((($718)) + 12|0);
         HEAP32[$883>>2] = $718;
         $884 = ((($718)) + 8|0);
         HEAP32[$884>>2] = $718;
         break;
        }
        $885 = HEAP32[$873>>2]|0;
        $886 = ($$0295$i$i|0)==(31);
        $887 = $$0295$i$i >>> 1;
        $888 = (25 - ($887))|0;
        $889 = $886 ? 0 : $888;
        $890 = $$0286$i$i << $889;
        $$0287$i$i = $890;$$0288$i$i = $885;
        while(1) {
         $891 = ((($$0288$i$i)) + 4|0);
         $892 = HEAP32[$891>>2]|0;
         $893 = $892 & -8;
         $894 = ($893|0)==($$0286$i$i|0);
         if ($894) {
          label = 278;
          break;
         }
         $895 = $$0287$i$i >>> 31;
         $896 = (((($$0288$i$i)) + 16|0) + ($895<<2)|0);
         $897 = $$0287$i$i << 1;
         $898 = HEAP32[$896>>2]|0;
         $899 = ($898|0)==(0|0);
         if ($899) {
          label = 275;
          break;
         } else {
          $$0287$i$i = $897;$$0288$i$i = $898;
         }
        }
        if ((label|0) == 275) {
         $900 = HEAP32[(39180)>>2]|0;
         $901 = ($896>>>0)<($900>>>0);
         if ($901) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$896>>2] = $718;
          $902 = ((($718)) + 24|0);
          HEAP32[$902>>2] = $$0288$i$i;
          $903 = ((($718)) + 12|0);
          HEAP32[$903>>2] = $718;
          $904 = ((($718)) + 8|0);
          HEAP32[$904>>2] = $718;
          break;
         }
        }
        else if ((label|0) == 278) {
         $905 = ((($$0288$i$i)) + 8|0);
         $906 = HEAP32[$905>>2]|0;
         $907 = HEAP32[(39180)>>2]|0;
         $908 = ($906>>>0)>=($907>>>0);
         $not$$i22$i = ($$0288$i$i>>>0)>=($907>>>0);
         $909 = $908 & $not$$i22$i;
         if ($909) {
          $910 = ((($906)) + 12|0);
          HEAP32[$910>>2] = $718;
          HEAP32[$905>>2] = $718;
          $911 = ((($718)) + 8|0);
          HEAP32[$911>>2] = $906;
          $912 = ((($718)) + 12|0);
          HEAP32[$912>>2] = $$0288$i$i;
          $913 = ((($718)) + 24|0);
          HEAP32[$913>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1044 = ((($706)) + 8|0);
      $$0 = $1044;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0$i$i$i = (39612);
     }
    }
    while(1) {
     $914 = HEAP32[$$0$i$i$i>>2]|0;
     $915 = ($914>>>0)>($627>>>0);
     if (!($915)) {
      $916 = ((($$0$i$i$i)) + 4|0);
      $917 = HEAP32[$916>>2]|0;
      $918 = (($914) + ($917)|0);
      $919 = ($918>>>0)>($627>>>0);
      if ($919) {
       break;
      }
     }
     $920 = ((($$0$i$i$i)) + 8|0);
     $921 = HEAP32[$920>>2]|0;
     $$0$i$i$i = $921;
    }
    $922 = ((($918)) + -47|0);
    $923 = ((($922)) + 8|0);
    $924 = $923;
    $925 = $924 & 7;
    $926 = ($925|0)==(0);
    $927 = (0 - ($924))|0;
    $928 = $927 & 7;
    $929 = $926 ? 0 : $928;
    $930 = (($922) + ($929)|0);
    $931 = ((($627)) + 16|0);
    $932 = ($930>>>0)<($931>>>0);
    $933 = $932 ? $627 : $930;
    $934 = ((($933)) + 8|0);
    $935 = ((($933)) + 24|0);
    $936 = (($$723947$i) + -40)|0;
    $937 = ((($$748$i)) + 8|0);
    $938 = $937;
    $939 = $938 & 7;
    $940 = ($939|0)==(0);
    $941 = (0 - ($938))|0;
    $942 = $941 & 7;
    $943 = $940 ? 0 : $942;
    $944 = (($$748$i) + ($943)|0);
    $945 = (($936) - ($943))|0;
    HEAP32[(39188)>>2] = $944;
    HEAP32[(39176)>>2] = $945;
    $946 = $945 | 1;
    $947 = ((($944)) + 4|0);
    HEAP32[$947>>2] = $946;
    $948 = (($944) + ($945)|0);
    $949 = ((($948)) + 4|0);
    HEAP32[$949>>2] = 40;
    $950 = HEAP32[(39652)>>2]|0;
    HEAP32[(39192)>>2] = $950;
    $951 = ((($933)) + 4|0);
    HEAP32[$951>>2] = 27;
    ;HEAP32[$934>>2]=HEAP32[(39612)>>2]|0;HEAP32[$934+4>>2]=HEAP32[(39612)+4>>2]|0;HEAP32[$934+8>>2]=HEAP32[(39612)+8>>2]|0;HEAP32[$934+12>>2]=HEAP32[(39612)+12>>2]|0;
    HEAP32[(39612)>>2] = $$748$i;
    HEAP32[(39616)>>2] = $$723947$i;
    HEAP32[(39624)>>2] = 0;
    HEAP32[(39620)>>2] = $934;
    $$0$i$i = $935;
    while(1) {
     $952 = ((($$0$i$i)) + 4|0);
     HEAP32[$952>>2] = 7;
     $953 = ((($952)) + 4|0);
     $954 = ($953>>>0)<($918>>>0);
     if ($954) {
      $$0$i$i = $952;
     } else {
      break;
     }
    }
    $955 = ($933|0)==($627|0);
    if (!($955)) {
     $956 = $933;
     $957 = $627;
     $958 = (($956) - ($957))|0;
     $959 = HEAP32[$951>>2]|0;
     $960 = $959 & -2;
     HEAP32[$951>>2] = $960;
     $961 = $958 | 1;
     $962 = ((($627)) + 4|0);
     HEAP32[$962>>2] = $961;
     HEAP32[$933>>2] = $958;
     $963 = $958 >>> 3;
     $964 = ($958>>>0)<(256);
     if ($964) {
      $965 = $963 << 1;
      $966 = (39204 + ($965<<2)|0);
      $967 = HEAP32[9791]|0;
      $968 = 1 << $963;
      $969 = $967 & $968;
      $970 = ($969|0)==(0);
      if ($970) {
       $971 = $967 | $968;
       HEAP32[9791] = $971;
       $$pre$i$i = ((($966)) + 8|0);
       $$0211$i$i = $966;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $972 = ((($966)) + 8|0);
       $973 = HEAP32[$972>>2]|0;
       $974 = HEAP32[(39180)>>2]|0;
       $975 = ($973>>>0)<($974>>>0);
       if ($975) {
        _abort();
        // unreachable;
       } else {
        $$0211$i$i = $973;$$pre$phi$i$iZ2D = $972;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $627;
      $976 = ((($$0211$i$i)) + 12|0);
      HEAP32[$976>>2] = $627;
      $977 = ((($627)) + 8|0);
      HEAP32[$977>>2] = $$0211$i$i;
      $978 = ((($627)) + 12|0);
      HEAP32[$978>>2] = $966;
      break;
     }
     $979 = $958 >>> 8;
     $980 = ($979|0)==(0);
     if ($980) {
      $$0212$i$i = 0;
     } else {
      $981 = ($958>>>0)>(16777215);
      if ($981) {
       $$0212$i$i = 31;
      } else {
       $982 = (($979) + 1048320)|0;
       $983 = $982 >>> 16;
       $984 = $983 & 8;
       $985 = $979 << $984;
       $986 = (($985) + 520192)|0;
       $987 = $986 >>> 16;
       $988 = $987 & 4;
       $989 = $988 | $984;
       $990 = $985 << $988;
       $991 = (($990) + 245760)|0;
       $992 = $991 >>> 16;
       $993 = $992 & 2;
       $994 = $989 | $993;
       $995 = (14 - ($994))|0;
       $996 = $990 << $993;
       $997 = $996 >>> 15;
       $998 = (($995) + ($997))|0;
       $999 = $998 << 1;
       $1000 = (($998) + 7)|0;
       $1001 = $958 >>> $1000;
       $1002 = $1001 & 1;
       $1003 = $1002 | $999;
       $$0212$i$i = $1003;
      }
     }
     $1004 = (39468 + ($$0212$i$i<<2)|0);
     $1005 = ((($627)) + 28|0);
     HEAP32[$1005>>2] = $$0212$i$i;
     $1006 = ((($627)) + 20|0);
     HEAP32[$1006>>2] = 0;
     HEAP32[$931>>2] = 0;
     $1007 = HEAP32[(39168)>>2]|0;
     $1008 = 1 << $$0212$i$i;
     $1009 = $1007 & $1008;
     $1010 = ($1009|0)==(0);
     if ($1010) {
      $1011 = $1007 | $1008;
      HEAP32[(39168)>>2] = $1011;
      HEAP32[$1004>>2] = $627;
      $1012 = ((($627)) + 24|0);
      HEAP32[$1012>>2] = $1004;
      $1013 = ((($627)) + 12|0);
      HEAP32[$1013>>2] = $627;
      $1014 = ((($627)) + 8|0);
      HEAP32[$1014>>2] = $627;
      break;
     }
     $1015 = HEAP32[$1004>>2]|0;
     $1016 = ($$0212$i$i|0)==(31);
     $1017 = $$0212$i$i >>> 1;
     $1018 = (25 - ($1017))|0;
     $1019 = $1016 ? 0 : $1018;
     $1020 = $958 << $1019;
     $$0206$i$i = $1020;$$0207$i$i = $1015;
     while(1) {
      $1021 = ((($$0207$i$i)) + 4|0);
      $1022 = HEAP32[$1021>>2]|0;
      $1023 = $1022 & -8;
      $1024 = ($1023|0)==($958|0);
      if ($1024) {
       label = 304;
       break;
      }
      $1025 = $$0206$i$i >>> 31;
      $1026 = (((($$0207$i$i)) + 16|0) + ($1025<<2)|0);
      $1027 = $$0206$i$i << 1;
      $1028 = HEAP32[$1026>>2]|0;
      $1029 = ($1028|0)==(0|0);
      if ($1029) {
       label = 301;
       break;
      } else {
       $$0206$i$i = $1027;$$0207$i$i = $1028;
      }
     }
     if ((label|0) == 301) {
      $1030 = HEAP32[(39180)>>2]|0;
      $1031 = ($1026>>>0)<($1030>>>0);
      if ($1031) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$1026>>2] = $627;
       $1032 = ((($627)) + 24|0);
       HEAP32[$1032>>2] = $$0207$i$i;
       $1033 = ((($627)) + 12|0);
       HEAP32[$1033>>2] = $627;
       $1034 = ((($627)) + 8|0);
       HEAP32[$1034>>2] = $627;
       break;
      }
     }
     else if ((label|0) == 304) {
      $1035 = ((($$0207$i$i)) + 8|0);
      $1036 = HEAP32[$1035>>2]|0;
      $1037 = HEAP32[(39180)>>2]|0;
      $1038 = ($1036>>>0)>=($1037>>>0);
      $not$$i$i = ($$0207$i$i>>>0)>=($1037>>>0);
      $1039 = $1038 & $not$$i$i;
      if ($1039) {
       $1040 = ((($1036)) + 12|0);
       HEAP32[$1040>>2] = $627;
       HEAP32[$1035>>2] = $627;
       $1041 = ((($627)) + 8|0);
       HEAP32[$1041>>2] = $1036;
       $1042 = ((($627)) + 12|0);
       HEAP32[$1042>>2] = $$0207$i$i;
       $1043 = ((($627)) + 24|0);
       HEAP32[$1043>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $1045 = HEAP32[(39176)>>2]|0;
  $1046 = ($1045>>>0)>($$0197>>>0);
  if ($1046) {
   $1047 = (($1045) - ($$0197))|0;
   HEAP32[(39176)>>2] = $1047;
   $1048 = HEAP32[(39188)>>2]|0;
   $1049 = (($1048) + ($$0197)|0);
   HEAP32[(39188)>>2] = $1049;
   $1050 = $1047 | 1;
   $1051 = ((($1049)) + 4|0);
   HEAP32[$1051>>2] = $1050;
   $1052 = $$0197 | 3;
   $1053 = ((($1048)) + 4|0);
   HEAP32[$1053>>2] = $1052;
   $1054 = ((($1048)) + 8|0);
   $$0 = $1054;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1055 = (___errno_location()|0);
 HEAP32[$1055>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0211$i = 0, $$0211$in$i = 0, $$0381 = 0, $$0382 = 0, $$0394 = 0, $$0401 = 0, $$1 = 0, $$1380 = 0, $$1385 = 0, $$1388 = 0, $$1396 = 0, $$1400 = 0, $$2 = 0, $$3 = 0, $$3398 = 0, $$pre = 0, $$pre$phi439Z2D = 0, $$pre$phi441Z2D = 0, $$pre$phiZ2D = 0, $$pre438 = 0;
 var $$pre440 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cond418 = 0, $cond419 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(39180)>>2]|0;
 $4 = ($2>>>0)<($3>>>0);
 if ($4) {
  _abort();
  // unreachable;
 }
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 3;
 $8 = ($7|0)==(1);
 if ($8) {
  _abort();
  // unreachable;
 }
 $9 = $6 & -8;
 $10 = (($2) + ($9)|0);
 $11 = $6 & 1;
 $12 = ($11|0)==(0);
 do {
  if ($12) {
   $13 = HEAP32[$2>>2]|0;
   $14 = ($7|0)==(0);
   if ($14) {
    return;
   }
   $15 = (0 - ($13))|0;
   $16 = (($2) + ($15)|0);
   $17 = (($13) + ($9))|0;
   $18 = ($16>>>0)<($3>>>0);
   if ($18) {
    _abort();
    // unreachable;
   }
   $19 = HEAP32[(39184)>>2]|0;
   $20 = ($16|0)==($19|0);
   if ($20) {
    $105 = ((($10)) + 4|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $106 & 3;
    $108 = ($107|0)==(3);
    if (!($108)) {
     $$1 = $16;$$1380 = $17;
     break;
    }
    HEAP32[(39172)>>2] = $17;
    $109 = $106 & -2;
    HEAP32[$105>>2] = $109;
    $110 = $17 | 1;
    $111 = ((($16)) + 4|0);
    HEAP32[$111>>2] = $110;
    $112 = (($16) + ($17)|0);
    HEAP32[$112>>2] = $17;
    return;
   }
   $21 = $13 >>> 3;
   $22 = ($13>>>0)<(256);
   if ($22) {
    $23 = ((($16)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($16)) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $21 << 1;
    $28 = (39204 + ($27<<2)|0);
    $29 = ($24|0)==($28|0);
    if (!($29)) {
     $30 = ($24>>>0)<($3>>>0);
     if ($30) {
      _abort();
      // unreachable;
     }
     $31 = ((($24)) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==($16|0);
     if (!($33)) {
      _abort();
      // unreachable;
     }
    }
    $34 = ($26|0)==($24|0);
    if ($34) {
     $35 = 1 << $21;
     $36 = $35 ^ -1;
     $37 = HEAP32[9791]|0;
     $38 = $37 & $36;
     HEAP32[9791] = $38;
     $$1 = $16;$$1380 = $17;
     break;
    }
    $39 = ($26|0)==($28|0);
    if ($39) {
     $$pre440 = ((($26)) + 8|0);
     $$pre$phi441Z2D = $$pre440;
    } else {
     $40 = ($26>>>0)<($3>>>0);
     if ($40) {
      _abort();
      // unreachable;
     }
     $41 = ((($26)) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==($16|0);
     if ($43) {
      $$pre$phi441Z2D = $41;
     } else {
      _abort();
      // unreachable;
     }
    }
    $44 = ((($24)) + 12|0);
    HEAP32[$44>>2] = $26;
    HEAP32[$$pre$phi441Z2D>>2] = $24;
    $$1 = $16;$$1380 = $17;
    break;
   }
   $45 = ((($16)) + 24|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($16)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==($16|0);
   do {
    if ($49) {
     $59 = ((($16)) + 16|0);
     $60 = ((($59)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)==(0|0);
     if ($62) {
      $63 = HEAP32[$59>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $$3 = 0;
       break;
      } else {
       $$1385 = $63;$$1388 = $59;
      }
     } else {
      $$1385 = $61;$$1388 = $60;
     }
     while(1) {
      $65 = ((($$1385)) + 20|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ($66|0)==(0|0);
      if (!($67)) {
       $$1385 = $66;$$1388 = $65;
       continue;
      }
      $68 = ((($$1385)) + 16|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($69|0)==(0|0);
      if ($70) {
       break;
      } else {
       $$1385 = $69;$$1388 = $68;
      }
     }
     $71 = ($$1388>>>0)<($3>>>0);
     if ($71) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1388>>2] = 0;
      $$3 = $$1385;
      break;
     }
    } else {
     $50 = ((($16)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51>>>0)<($3>>>0);
     if ($52) {
      _abort();
      // unreachable;
     }
     $53 = ((($51)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==($16|0);
     if (!($55)) {
      _abort();
      // unreachable;
     }
     $56 = ((($48)) + 8|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==($16|0);
     if ($58) {
      HEAP32[$53>>2] = $48;
      HEAP32[$56>>2] = $51;
      $$3 = $48;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $72 = ($46|0)==(0|0);
   if ($72) {
    $$1 = $16;$$1380 = $17;
   } else {
    $73 = ((($16)) + 28|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (39468 + ($74<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($16|0)==($76|0);
    if ($77) {
     HEAP32[$75>>2] = $$3;
     $cond418 = ($$3|0)==(0|0);
     if ($cond418) {
      $78 = 1 << $74;
      $79 = $78 ^ -1;
      $80 = HEAP32[(39168)>>2]|0;
      $81 = $80 & $79;
      HEAP32[(39168)>>2] = $81;
      $$1 = $16;$$1380 = $17;
      break;
     }
    } else {
     $82 = HEAP32[(39180)>>2]|0;
     $83 = ($46>>>0)<($82>>>0);
     if ($83) {
      _abort();
      // unreachable;
     }
     $84 = ((($46)) + 16|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = ($85|0)==($16|0);
     if ($86) {
      HEAP32[$84>>2] = $$3;
     } else {
      $87 = ((($46)) + 20|0);
      HEAP32[$87>>2] = $$3;
     }
     $88 = ($$3|0)==(0|0);
     if ($88) {
      $$1 = $16;$$1380 = $17;
      break;
     }
    }
    $89 = HEAP32[(39180)>>2]|0;
    $90 = ($$3>>>0)<($89>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($$3)) + 24|0);
    HEAP32[$91>>2] = $46;
    $92 = ((($16)) + 16|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    do {
     if (!($94)) {
      $95 = ($93>>>0)<($89>>>0);
      if ($95) {
       _abort();
       // unreachable;
      } else {
       $96 = ((($$3)) + 16|0);
       HEAP32[$96>>2] = $93;
       $97 = ((($93)) + 24|0);
       HEAP32[$97>>2] = $$3;
       break;
      }
     }
    } while(0);
    $98 = ((($92)) + 4|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ($99|0)==(0|0);
    if ($100) {
     $$1 = $16;$$1380 = $17;
    } else {
     $101 = HEAP32[(39180)>>2]|0;
     $102 = ($99>>>0)<($101>>>0);
     if ($102) {
      _abort();
      // unreachable;
     } else {
      $103 = ((($$3)) + 20|0);
      HEAP32[$103>>2] = $99;
      $104 = ((($99)) + 24|0);
      HEAP32[$104>>2] = $$3;
      $$1 = $16;$$1380 = $17;
      break;
     }
    }
   }
  } else {
   $$1 = $2;$$1380 = $9;
  }
 } while(0);
 $113 = ($$1>>>0)<($10>>>0);
 if (!($113)) {
  _abort();
  // unreachable;
 }
 $114 = ((($10)) + 4|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = $115 & 1;
 $117 = ($116|0)==(0);
 if ($117) {
  _abort();
  // unreachable;
 }
 $118 = $115 & 2;
 $119 = ($118|0)==(0);
 if ($119) {
  $120 = HEAP32[(39188)>>2]|0;
  $121 = ($10|0)==($120|0);
  if ($121) {
   $122 = HEAP32[(39176)>>2]|0;
   $123 = (($122) + ($$1380))|0;
   HEAP32[(39176)>>2] = $123;
   HEAP32[(39188)>>2] = $$1;
   $124 = $123 | 1;
   $125 = ((($$1)) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = HEAP32[(39184)>>2]|0;
   $127 = ($$1|0)==($126|0);
   if (!($127)) {
    return;
   }
   HEAP32[(39184)>>2] = 0;
   HEAP32[(39172)>>2] = 0;
   return;
  }
  $128 = HEAP32[(39184)>>2]|0;
  $129 = ($10|0)==($128|0);
  if ($129) {
   $130 = HEAP32[(39172)>>2]|0;
   $131 = (($130) + ($$1380))|0;
   HEAP32[(39172)>>2] = $131;
   HEAP32[(39184)>>2] = $$1;
   $132 = $131 | 1;
   $133 = ((($$1)) + 4|0);
   HEAP32[$133>>2] = $132;
   $134 = (($$1) + ($131)|0);
   HEAP32[$134>>2] = $131;
   return;
  }
  $135 = $115 & -8;
  $136 = (($135) + ($$1380))|0;
  $137 = $115 >>> 3;
  $138 = ($115>>>0)<(256);
  do {
   if ($138) {
    $139 = ((($10)) + 8|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = ((($10)) + 12|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = $137 << 1;
    $144 = (39204 + ($143<<2)|0);
    $145 = ($140|0)==($144|0);
    if (!($145)) {
     $146 = HEAP32[(39180)>>2]|0;
     $147 = ($140>>>0)<($146>>>0);
     if ($147) {
      _abort();
      // unreachable;
     }
     $148 = ((($140)) + 12|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = ($149|0)==($10|0);
     if (!($150)) {
      _abort();
      // unreachable;
     }
    }
    $151 = ($142|0)==($140|0);
    if ($151) {
     $152 = 1 << $137;
     $153 = $152 ^ -1;
     $154 = HEAP32[9791]|0;
     $155 = $154 & $153;
     HEAP32[9791] = $155;
     break;
    }
    $156 = ($142|0)==($144|0);
    if ($156) {
     $$pre438 = ((($142)) + 8|0);
     $$pre$phi439Z2D = $$pre438;
    } else {
     $157 = HEAP32[(39180)>>2]|0;
     $158 = ($142>>>0)<($157>>>0);
     if ($158) {
      _abort();
      // unreachable;
     }
     $159 = ((($142)) + 8|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ($160|0)==($10|0);
     if ($161) {
      $$pre$phi439Z2D = $159;
     } else {
      _abort();
      // unreachable;
     }
    }
    $162 = ((($140)) + 12|0);
    HEAP32[$162>>2] = $142;
    HEAP32[$$pre$phi439Z2D>>2] = $140;
   } else {
    $163 = ((($10)) + 24|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = ((($10)) + 12|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = ($166|0)==($10|0);
    do {
     if ($167) {
      $178 = ((($10)) + 16|0);
      $179 = ((($178)) + 4|0);
      $180 = HEAP32[$179>>2]|0;
      $181 = ($180|0)==(0|0);
      if ($181) {
       $182 = HEAP32[$178>>2]|0;
       $183 = ($182|0)==(0|0);
       if ($183) {
        $$3398 = 0;
        break;
       } else {
        $$1396 = $182;$$1400 = $178;
       }
      } else {
       $$1396 = $180;$$1400 = $179;
      }
      while(1) {
       $184 = ((($$1396)) + 20|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if (!($186)) {
        $$1396 = $185;$$1400 = $184;
        continue;
       }
       $187 = ((($$1396)) + 16|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = ($188|0)==(0|0);
       if ($189) {
        break;
       } else {
        $$1396 = $188;$$1400 = $187;
       }
      }
      $190 = HEAP32[(39180)>>2]|0;
      $191 = ($$1400>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1400>>2] = 0;
       $$3398 = $$1396;
       break;
      }
     } else {
      $168 = ((($10)) + 8|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = HEAP32[(39180)>>2]|0;
      $171 = ($169>>>0)<($170>>>0);
      if ($171) {
       _abort();
       // unreachable;
      }
      $172 = ((($169)) + 12|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($10|0);
      if (!($174)) {
       _abort();
       // unreachable;
      }
      $175 = ((($166)) + 8|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==($10|0);
      if ($177) {
       HEAP32[$172>>2] = $166;
       HEAP32[$175>>2] = $169;
       $$3398 = $166;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $192 = ($164|0)==(0|0);
    if (!($192)) {
     $193 = ((($10)) + 28|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = (39468 + ($194<<2)|0);
     $196 = HEAP32[$195>>2]|0;
     $197 = ($10|0)==($196|0);
     if ($197) {
      HEAP32[$195>>2] = $$3398;
      $cond419 = ($$3398|0)==(0|0);
      if ($cond419) {
       $198 = 1 << $194;
       $199 = $198 ^ -1;
       $200 = HEAP32[(39168)>>2]|0;
       $201 = $200 & $199;
       HEAP32[(39168)>>2] = $201;
       break;
      }
     } else {
      $202 = HEAP32[(39180)>>2]|0;
      $203 = ($164>>>0)<($202>>>0);
      if ($203) {
       _abort();
       // unreachable;
      }
      $204 = ((($164)) + 16|0);
      $205 = HEAP32[$204>>2]|0;
      $206 = ($205|0)==($10|0);
      if ($206) {
       HEAP32[$204>>2] = $$3398;
      } else {
       $207 = ((($164)) + 20|0);
       HEAP32[$207>>2] = $$3398;
      }
      $208 = ($$3398|0)==(0|0);
      if ($208) {
       break;
      }
     }
     $209 = HEAP32[(39180)>>2]|0;
     $210 = ($$3398>>>0)<($209>>>0);
     if ($210) {
      _abort();
      // unreachable;
     }
     $211 = ((($$3398)) + 24|0);
     HEAP32[$211>>2] = $164;
     $212 = ((($10)) + 16|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = ($213|0)==(0|0);
     do {
      if (!($214)) {
       $215 = ($213>>>0)<($209>>>0);
       if ($215) {
        _abort();
        // unreachable;
       } else {
        $216 = ((($$3398)) + 16|0);
        HEAP32[$216>>2] = $213;
        $217 = ((($213)) + 24|0);
        HEAP32[$217>>2] = $$3398;
        break;
       }
      }
     } while(0);
     $218 = ((($212)) + 4|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ($219|0)==(0|0);
     if (!($220)) {
      $221 = HEAP32[(39180)>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       _abort();
       // unreachable;
      } else {
       $223 = ((($$3398)) + 20|0);
       HEAP32[$223>>2] = $219;
       $224 = ((($219)) + 24|0);
       HEAP32[$224>>2] = $$3398;
       break;
      }
     }
    }
   }
  } while(0);
  $225 = $136 | 1;
  $226 = ((($$1)) + 4|0);
  HEAP32[$226>>2] = $225;
  $227 = (($$1) + ($136)|0);
  HEAP32[$227>>2] = $136;
  $228 = HEAP32[(39184)>>2]|0;
  $229 = ($$1|0)==($228|0);
  if ($229) {
   HEAP32[(39172)>>2] = $136;
   return;
  } else {
   $$2 = $136;
  }
 } else {
  $230 = $115 & -2;
  HEAP32[$114>>2] = $230;
  $231 = $$1380 | 1;
  $232 = ((($$1)) + 4|0);
  HEAP32[$232>>2] = $231;
  $233 = (($$1) + ($$1380)|0);
  HEAP32[$233>>2] = $$1380;
  $$2 = $$1380;
 }
 $234 = $$2 >>> 3;
 $235 = ($$2>>>0)<(256);
 if ($235) {
  $236 = $234 << 1;
  $237 = (39204 + ($236<<2)|0);
  $238 = HEAP32[9791]|0;
  $239 = 1 << $234;
  $240 = $238 & $239;
  $241 = ($240|0)==(0);
  if ($241) {
   $242 = $238 | $239;
   HEAP32[9791] = $242;
   $$pre = ((($237)) + 8|0);
   $$0401 = $237;$$pre$phiZ2D = $$pre;
  } else {
   $243 = ((($237)) + 8|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = HEAP32[(39180)>>2]|0;
   $246 = ($244>>>0)<($245>>>0);
   if ($246) {
    _abort();
    // unreachable;
   } else {
    $$0401 = $244;$$pre$phiZ2D = $243;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $247 = ((($$0401)) + 12|0);
  HEAP32[$247>>2] = $$1;
  $248 = ((($$1)) + 8|0);
  HEAP32[$248>>2] = $$0401;
  $249 = ((($$1)) + 12|0);
  HEAP32[$249>>2] = $237;
  return;
 }
 $250 = $$2 >>> 8;
 $251 = ($250|0)==(0);
 if ($251) {
  $$0394 = 0;
 } else {
  $252 = ($$2>>>0)>(16777215);
  if ($252) {
   $$0394 = 31;
  } else {
   $253 = (($250) + 1048320)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 8;
   $256 = $250 << $255;
   $257 = (($256) + 520192)|0;
   $258 = $257 >>> 16;
   $259 = $258 & 4;
   $260 = $259 | $255;
   $261 = $256 << $259;
   $262 = (($261) + 245760)|0;
   $263 = $262 >>> 16;
   $264 = $263 & 2;
   $265 = $260 | $264;
   $266 = (14 - ($265))|0;
   $267 = $261 << $264;
   $268 = $267 >>> 15;
   $269 = (($266) + ($268))|0;
   $270 = $269 << 1;
   $271 = (($269) + 7)|0;
   $272 = $$2 >>> $271;
   $273 = $272 & 1;
   $274 = $273 | $270;
   $$0394 = $274;
  }
 }
 $275 = (39468 + ($$0394<<2)|0);
 $276 = ((($$1)) + 28|0);
 HEAP32[$276>>2] = $$0394;
 $277 = ((($$1)) + 16|0);
 $278 = ((($$1)) + 20|0);
 HEAP32[$278>>2] = 0;
 HEAP32[$277>>2] = 0;
 $279 = HEAP32[(39168)>>2]|0;
 $280 = 1 << $$0394;
 $281 = $279 & $280;
 $282 = ($281|0)==(0);
 do {
  if ($282) {
   $283 = $279 | $280;
   HEAP32[(39168)>>2] = $283;
   HEAP32[$275>>2] = $$1;
   $284 = ((($$1)) + 24|0);
   HEAP32[$284>>2] = $275;
   $285 = ((($$1)) + 12|0);
   HEAP32[$285>>2] = $$1;
   $286 = ((($$1)) + 8|0);
   HEAP32[$286>>2] = $$1;
  } else {
   $287 = HEAP32[$275>>2]|0;
   $288 = ($$0394|0)==(31);
   $289 = $$0394 >>> 1;
   $290 = (25 - ($289))|0;
   $291 = $288 ? 0 : $290;
   $292 = $$2 << $291;
   $$0381 = $292;$$0382 = $287;
   while(1) {
    $293 = ((($$0382)) + 4|0);
    $294 = HEAP32[$293>>2]|0;
    $295 = $294 & -8;
    $296 = ($295|0)==($$2|0);
    if ($296) {
     label = 130;
     break;
    }
    $297 = $$0381 >>> 31;
    $298 = (((($$0382)) + 16|0) + ($297<<2)|0);
    $299 = $$0381 << 1;
    $300 = HEAP32[$298>>2]|0;
    $301 = ($300|0)==(0|0);
    if ($301) {
     label = 127;
     break;
    } else {
     $$0381 = $299;$$0382 = $300;
    }
   }
   if ((label|0) == 127) {
    $302 = HEAP32[(39180)>>2]|0;
    $303 = ($298>>>0)<($302>>>0);
    if ($303) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$298>>2] = $$1;
     $304 = ((($$1)) + 24|0);
     HEAP32[$304>>2] = $$0382;
     $305 = ((($$1)) + 12|0);
     HEAP32[$305>>2] = $$1;
     $306 = ((($$1)) + 8|0);
     HEAP32[$306>>2] = $$1;
     break;
    }
   }
   else if ((label|0) == 130) {
    $307 = ((($$0382)) + 8|0);
    $308 = HEAP32[$307>>2]|0;
    $309 = HEAP32[(39180)>>2]|0;
    $310 = ($308>>>0)>=($309>>>0);
    $not$ = ($$0382>>>0)>=($309>>>0);
    $311 = $310 & $not$;
    if ($311) {
     $312 = ((($308)) + 12|0);
     HEAP32[$312>>2] = $$1;
     HEAP32[$307>>2] = $$1;
     $313 = ((($$1)) + 8|0);
     HEAP32[$313>>2] = $308;
     $314 = ((($$1)) + 12|0);
     HEAP32[$314>>2] = $$0382;
     $315 = ((($$1)) + 24|0);
     HEAP32[$315>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $316 = HEAP32[(39196)>>2]|0;
 $317 = (($316) + -1)|0;
 HEAP32[(39196)>>2] = $317;
 $318 = ($317|0)==(0);
 if ($318) {
  $$0211$in$i = (39620);
 } else {
  return;
 }
 while(1) {
  $$0211$i = HEAP32[$$0211$in$i>>2]|0;
  $319 = ($$0211$i|0)==(0|0);
  $320 = ((($$0211$i)) + 8|0);
  if ($319) {
   break;
  } else {
   $$0211$in$i = $320;
  }
 }
 HEAP32[(39196)>>2] = -1;
 return;
}
function _calloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = Math_imul($1, $0)|0;
  $4 = $1 | $0;
  $5 = ($4>>>0)>(65535);
  if ($5) {
   $6 = (($3>>>0) / ($0>>>0))&-1;
   $7 = ($6|0)==($1|0);
   $$ = $7 ? $3 : -1;
   $$0 = $$;
  } else {
   $$0 = $3;
  }
 }
 $8 = (_malloc($$0)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  return ($8|0);
 }
 $10 = ((($8)) + -4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 3;
 $13 = ($12|0)==(0);
 if ($13) {
  return ($8|0);
 }
 _memset(($8|0),0,($$0|0))|0;
 return ($8|0);
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 _memcpy(($14|0),($0|0),($24|0))|0;
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1271 = 0, $$1274 = 0, $$2 = 0, $$3 = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $cond = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond3 = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = HEAP32[(39180)>>2]|0;
 $7 = $3 & 3;
 $notlhs = ($0>>>0)>=($6>>>0);
 $notrhs = ($7|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $8 = ($0>>>0)<($5>>>0);
 $or$cond3 = $or$cond$not & $8;
 if (!($or$cond3)) {
  _abort();
  // unreachable;
 }
 $9 = ((($5)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  _abort();
  // unreachable;
 }
 $13 = ($7|0)==(0);
 if ($13) {
  $14 = ($1>>>0)<(256);
  if ($14) {
   $$2 = 0;
   return ($$2|0);
  }
  $15 = (($1) + 4)|0;
  $16 = ($4>>>0)<($15>>>0);
  if (!($16)) {
   $17 = (($4) - ($1))|0;
   $18 = HEAP32[(39644)>>2]|0;
   $19 = $18 << 1;
   $20 = ($17>>>0)>($19>>>0);
   if (!($20)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $21 = ($4>>>0)<($1>>>0);
 if (!($21)) {
  $22 = (($4) - ($1))|0;
  $23 = ($22>>>0)>(15);
  if (!($23)) {
   $$2 = $0;
   return ($$2|0);
  }
  $24 = (($0) + ($1)|0);
  $25 = $3 & 1;
  $26 = $25 | $1;
  $27 = $26 | 2;
  HEAP32[$2>>2] = $27;
  $28 = ((($24)) + 4|0);
  $29 = $22 | 3;
  HEAP32[$28>>2] = $29;
  $30 = (($24) + ($22)|0);
  $31 = ((($30)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $32 | 1;
  HEAP32[$31>>2] = $33;
  _dispose_chunk($24,$22);
  $$2 = $0;
  return ($$2|0);
 }
 $34 = HEAP32[(39188)>>2]|0;
 $35 = ($5|0)==($34|0);
 if ($35) {
  $36 = HEAP32[(39176)>>2]|0;
  $37 = (($36) + ($4))|0;
  $38 = ($37>>>0)>($1>>>0);
  if (!($38)) {
   $$2 = 0;
   return ($$2|0);
  }
  $39 = (($37) - ($1))|0;
  $40 = (($0) + ($1)|0);
  $41 = $3 & 1;
  $42 = $41 | $1;
  $43 = $42 | 2;
  HEAP32[$2>>2] = $43;
  $44 = ((($40)) + 4|0);
  $45 = $39 | 1;
  HEAP32[$44>>2] = $45;
  HEAP32[(39188)>>2] = $40;
  HEAP32[(39176)>>2] = $39;
  $$2 = $0;
  return ($$2|0);
 }
 $46 = HEAP32[(39184)>>2]|0;
 $47 = ($5|0)==($46|0);
 if ($47) {
  $48 = HEAP32[(39172)>>2]|0;
  $49 = (($48) + ($4))|0;
  $50 = ($49>>>0)<($1>>>0);
  if ($50) {
   $$2 = 0;
   return ($$2|0);
  }
  $51 = (($49) - ($1))|0;
  $52 = ($51>>>0)>(15);
  if ($52) {
   $53 = (($0) + ($1)|0);
   $54 = (($53) + ($51)|0);
   $55 = $3 & 1;
   $56 = $55 | $1;
   $57 = $56 | 2;
   HEAP32[$2>>2] = $57;
   $58 = ((($53)) + 4|0);
   $59 = $51 | 1;
   HEAP32[$58>>2] = $59;
   HEAP32[$54>>2] = $51;
   $60 = ((($54)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 & -2;
   HEAP32[$60>>2] = $62;
   $storemerge = $53;$storemerge1 = $51;
  } else {
   $63 = $3 & 1;
   $64 = $63 | $49;
   $65 = $64 | 2;
   HEAP32[$2>>2] = $65;
   $66 = (($0) + ($49)|0);
   $67 = ((($66)) + 4|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $68 | 1;
   HEAP32[$67>>2] = $69;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(39172)>>2] = $storemerge1;
  HEAP32[(39184)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $70 = $10 & 2;
 $71 = ($70|0)==(0);
 if (!($71)) {
  $$2 = 0;
  return ($$2|0);
 }
 $72 = $10 & -8;
 $73 = (($72) + ($4))|0;
 $74 = ($73>>>0)<($1>>>0);
 if ($74) {
  $$2 = 0;
  return ($$2|0);
 }
 $75 = (($73) - ($1))|0;
 $76 = $10 >>> 3;
 $77 = ($10>>>0)<(256);
 do {
  if ($77) {
   $78 = ((($5)) + 8|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ((($5)) + 12|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = $76 << 1;
   $83 = (39204 + ($82<<2)|0);
   $84 = ($79|0)==($83|0);
   if (!($84)) {
    $85 = ($79>>>0)<($6>>>0);
    if ($85) {
     _abort();
     // unreachable;
    }
    $86 = ((($79)) + 12|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==($5|0);
    if (!($88)) {
     _abort();
     // unreachable;
    }
   }
   $89 = ($81|0)==($79|0);
   if ($89) {
    $90 = 1 << $76;
    $91 = $90 ^ -1;
    $92 = HEAP32[9791]|0;
    $93 = $92 & $91;
    HEAP32[9791] = $93;
    break;
   }
   $94 = ($81|0)==($83|0);
   if ($94) {
    $$pre = ((($81)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $95 = ($81>>>0)<($6>>>0);
    if ($95) {
     _abort();
     // unreachable;
    }
    $96 = ((($81)) + 8|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==($5|0);
    if ($98) {
     $$pre$phiZ2D = $96;
    } else {
     _abort();
     // unreachable;
    }
   }
   $99 = ((($79)) + 12|0);
   HEAP32[$99>>2] = $81;
   HEAP32[$$pre$phiZ2D>>2] = $79;
  } else {
   $100 = ((($5)) + 24|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ((($5)) + 12|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = ($103|0)==($5|0);
   do {
    if ($104) {
     $114 = ((($5)) + 16|0);
     $115 = ((($114)) + 4|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)==(0|0);
     if ($117) {
      $118 = HEAP32[$114>>2]|0;
      $119 = ($118|0)==(0|0);
      if ($119) {
       $$3 = 0;
       break;
      } else {
       $$1271 = $118;$$1274 = $114;
      }
     } else {
      $$1271 = $116;$$1274 = $115;
     }
     while(1) {
      $120 = ((($$1271)) + 20|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ($121|0)==(0|0);
      if (!($122)) {
       $$1271 = $121;$$1274 = $120;
       continue;
      }
      $123 = ((($$1271)) + 16|0);
      $124 = HEAP32[$123>>2]|0;
      $125 = ($124|0)==(0|0);
      if ($125) {
       break;
      } else {
       $$1271 = $124;$$1274 = $123;
      }
     }
     $126 = ($$1274>>>0)<($6>>>0);
     if ($126) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1274>>2] = 0;
      $$3 = $$1271;
      break;
     }
    } else {
     $105 = ((($5)) + 8|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($106>>>0)<($6>>>0);
     if ($107) {
      _abort();
      // unreachable;
     }
     $108 = ((($106)) + 12|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)==($5|0);
     if (!($110)) {
      _abort();
      // unreachable;
     }
     $111 = ((($103)) + 8|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)==($5|0);
     if ($113) {
      HEAP32[$108>>2] = $103;
      HEAP32[$111>>2] = $106;
      $$3 = $103;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $127 = ($101|0)==(0|0);
   if (!($127)) {
    $128 = ((($5)) + 28|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = (39468 + ($129<<2)|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = ($5|0)==($131|0);
    if ($132) {
     HEAP32[$130>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $133 = 1 << $129;
      $134 = $133 ^ -1;
      $135 = HEAP32[(39168)>>2]|0;
      $136 = $135 & $134;
      HEAP32[(39168)>>2] = $136;
      break;
     }
    } else {
     $137 = HEAP32[(39180)>>2]|0;
     $138 = ($101>>>0)<($137>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = ((($101)) + 16|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($5|0);
     if ($141) {
      HEAP32[$139>>2] = $$3;
     } else {
      $142 = ((($101)) + 20|0);
      HEAP32[$142>>2] = $$3;
     }
     $143 = ($$3|0)==(0|0);
     if ($143) {
      break;
     }
    }
    $144 = HEAP32[(39180)>>2]|0;
    $145 = ($$3>>>0)<($144>>>0);
    if ($145) {
     _abort();
     // unreachable;
    }
    $146 = ((($$3)) + 24|0);
    HEAP32[$146>>2] = $101;
    $147 = ((($5)) + 16|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = ($148|0)==(0|0);
    do {
     if (!($149)) {
      $150 = ($148>>>0)<($144>>>0);
      if ($150) {
       _abort();
       // unreachable;
      } else {
       $151 = ((($$3)) + 16|0);
       HEAP32[$151>>2] = $148;
       $152 = ((($148)) + 24|0);
       HEAP32[$152>>2] = $$3;
       break;
      }
     }
    } while(0);
    $153 = ((($147)) + 4|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = ($154|0)==(0|0);
    if (!($155)) {
     $156 = HEAP32[(39180)>>2]|0;
     $157 = ($154>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     } else {
      $158 = ((($$3)) + 20|0);
      HEAP32[$158>>2] = $154;
      $159 = ((($154)) + 24|0);
      HEAP32[$159>>2] = $$3;
      break;
     }
    }
   }
  }
 } while(0);
 $160 = ($75>>>0)<(16);
 if ($160) {
  $161 = $3 & 1;
  $162 = $73 | $161;
  $163 = $162 | 2;
  HEAP32[$2>>2] = $163;
  $164 = (($0) + ($73)|0);
  $165 = ((($164)) + 4|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = $166 | 1;
  HEAP32[$165>>2] = $167;
  $$2 = $0;
  return ($$2|0);
 } else {
  $168 = (($0) + ($1)|0);
  $169 = $3 & 1;
  $170 = $169 | $1;
  $171 = $170 | 2;
  HEAP32[$2>>2] = $171;
  $172 = ((($168)) + 4|0);
  $173 = $75 | 3;
  HEAP32[$172>>2] = $173;
  $174 = (($168) + ($75)|0);
  $175 = ((($174)) + 4|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = $176 | 1;
  HEAP32[$175>>2] = $177;
  _dispose_chunk($168,$75);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0417 = 0, $$0418 = 0, $$0429 = 0, $$0436 = 0, $$1 = 0, $$1416 = 0, $$1424 = 0, $$1427 = 0, $$1431 = 0, $$1435 = 0, $$2 = 0, $$3 = 0, $$3433 = 0, $$pre = 0, $$pre$phi22Z2D = 0, $$pre$phi24Z2D = 0, $$pre$phiZ2D = 0, $$pre21 = 0, $$pre23 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond16 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(39180)>>2]|0;
   $14 = ($11>>>0)<($13>>>0);
   if ($14) {
    _abort();
    // unreachable;
   }
   $15 = HEAP32[(39184)>>2]|0;
   $16 = ($11|0)==($15|0);
   if ($16) {
    $101 = ((($2)) + 4|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = $102 & 3;
    $104 = ($103|0)==(3);
    if (!($104)) {
     $$1 = $11;$$1416 = $12;
     break;
    }
    HEAP32[(39172)>>2] = $12;
    $105 = $102 & -2;
    HEAP32[$101>>2] = $105;
    $106 = $12 | 1;
    $107 = ((($11)) + 4|0);
    HEAP32[$107>>2] = $106;
    $108 = (($11) + ($12)|0);
    HEAP32[$108>>2] = $12;
    return;
   }
   $17 = $7 >>> 3;
   $18 = ($7>>>0)<(256);
   if ($18) {
    $19 = ((($11)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ((($11)) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $17 << 1;
    $24 = (39204 + ($23<<2)|0);
    $25 = ($20|0)==($24|0);
    if (!($25)) {
     $26 = ($20>>>0)<($13>>>0);
     if ($26) {
      _abort();
      // unreachable;
     }
     $27 = ((($20)) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)==($11|0);
     if (!($29)) {
      _abort();
      // unreachable;
     }
    }
    $30 = ($22|0)==($20|0);
    if ($30) {
     $31 = 1 << $17;
     $32 = $31 ^ -1;
     $33 = HEAP32[9791]|0;
     $34 = $33 & $32;
     HEAP32[9791] = $34;
     $$1 = $11;$$1416 = $12;
     break;
    }
    $35 = ($22|0)==($24|0);
    if ($35) {
     $$pre23 = ((($22)) + 8|0);
     $$pre$phi24Z2D = $$pre23;
    } else {
     $36 = ($22>>>0)<($13>>>0);
     if ($36) {
      _abort();
      // unreachable;
     }
     $37 = ((($22)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($38|0)==($11|0);
     if ($39) {
      $$pre$phi24Z2D = $37;
     } else {
      _abort();
      // unreachable;
     }
    }
    $40 = ((($20)) + 12|0);
    HEAP32[$40>>2] = $22;
    HEAP32[$$pre$phi24Z2D>>2] = $20;
    $$1 = $11;$$1416 = $12;
    break;
   }
   $41 = ((($11)) + 24|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($11)) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==($11|0);
   do {
    if ($45) {
     $55 = ((($11)) + 16|0);
     $56 = ((($55)) + 4|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==(0|0);
     if ($58) {
      $59 = HEAP32[$55>>2]|0;
      $60 = ($59|0)==(0|0);
      if ($60) {
       $$3 = 0;
       break;
      } else {
       $$1424 = $59;$$1427 = $55;
      }
     } else {
      $$1424 = $57;$$1427 = $56;
     }
     while(1) {
      $61 = ((($$1424)) + 20|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = ($62|0)==(0|0);
      if (!($63)) {
       $$1424 = $62;$$1427 = $61;
       continue;
      }
      $64 = ((($$1424)) + 16|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($65|0)==(0|0);
      if ($66) {
       break;
      } else {
       $$1424 = $65;$$1427 = $64;
      }
     }
     $67 = ($$1427>>>0)<($13>>>0);
     if ($67) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1427>>2] = 0;
      $$3 = $$1424;
      break;
     }
    } else {
     $46 = ((($11)) + 8|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($47>>>0)<($13>>>0);
     if ($48) {
      _abort();
      // unreachable;
     }
     $49 = ((($47)) + 12|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50|0)==($11|0);
     if (!($51)) {
      _abort();
      // unreachable;
     }
     $52 = ((($44)) + 8|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==($11|0);
     if ($54) {
      HEAP32[$49>>2] = $44;
      HEAP32[$52>>2] = $47;
      $$3 = $44;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $68 = ($42|0)==(0|0);
   if ($68) {
    $$1 = $11;$$1416 = $12;
   } else {
    $69 = ((($11)) + 28|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (39468 + ($70<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($11|0)==($72|0);
    if ($73) {
     HEAP32[$71>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $74 = 1 << $70;
      $75 = $74 ^ -1;
      $76 = HEAP32[(39168)>>2]|0;
      $77 = $76 & $75;
      HEAP32[(39168)>>2] = $77;
      $$1 = $11;$$1416 = $12;
      break;
     }
    } else {
     $78 = HEAP32[(39180)>>2]|0;
     $79 = ($42>>>0)<($78>>>0);
     if ($79) {
      _abort();
      // unreachable;
     }
     $80 = ((($42)) + 16|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = ($81|0)==($11|0);
     if ($82) {
      HEAP32[$80>>2] = $$3;
     } else {
      $83 = ((($42)) + 20|0);
      HEAP32[$83>>2] = $$3;
     }
     $84 = ($$3|0)==(0|0);
     if ($84) {
      $$1 = $11;$$1416 = $12;
      break;
     }
    }
    $85 = HEAP32[(39180)>>2]|0;
    $86 = ($$3>>>0)<($85>>>0);
    if ($86) {
     _abort();
     // unreachable;
    }
    $87 = ((($$3)) + 24|0);
    HEAP32[$87>>2] = $42;
    $88 = ((($11)) + 16|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = ($89|0)==(0|0);
    do {
     if (!($90)) {
      $91 = ($89>>>0)<($85>>>0);
      if ($91) {
       _abort();
       // unreachable;
      } else {
       $92 = ((($$3)) + 16|0);
       HEAP32[$92>>2] = $89;
       $93 = ((($89)) + 24|0);
       HEAP32[$93>>2] = $$3;
       break;
      }
     }
    } while(0);
    $94 = ((($88)) + 4|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($95|0)==(0|0);
    if ($96) {
     $$1 = $11;$$1416 = $12;
    } else {
     $97 = HEAP32[(39180)>>2]|0;
     $98 = ($95>>>0)<($97>>>0);
     if ($98) {
      _abort();
      // unreachable;
     } else {
      $99 = ((($$3)) + 20|0);
      HEAP32[$99>>2] = $95;
      $100 = ((($95)) + 24|0);
      HEAP32[$100>>2] = $$3;
      $$1 = $11;$$1416 = $12;
      break;
     }
    }
   }
  } else {
   $$1 = $0;$$1416 = $1;
  }
 } while(0);
 $109 = HEAP32[(39180)>>2]|0;
 $110 = ($2>>>0)<($109>>>0);
 if ($110) {
  _abort();
  // unreachable;
 }
 $111 = ((($2)) + 4|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 2;
 $114 = ($113|0)==(0);
 if ($114) {
  $115 = HEAP32[(39188)>>2]|0;
  $116 = ($2|0)==($115|0);
  if ($116) {
   $117 = HEAP32[(39176)>>2]|0;
   $118 = (($117) + ($$1416))|0;
   HEAP32[(39176)>>2] = $118;
   HEAP32[(39188)>>2] = $$1;
   $119 = $118 | 1;
   $120 = ((($$1)) + 4|0);
   HEAP32[$120>>2] = $119;
   $121 = HEAP32[(39184)>>2]|0;
   $122 = ($$1|0)==($121|0);
   if (!($122)) {
    return;
   }
   HEAP32[(39184)>>2] = 0;
   HEAP32[(39172)>>2] = 0;
   return;
  }
  $123 = HEAP32[(39184)>>2]|0;
  $124 = ($2|0)==($123|0);
  if ($124) {
   $125 = HEAP32[(39172)>>2]|0;
   $126 = (($125) + ($$1416))|0;
   HEAP32[(39172)>>2] = $126;
   HEAP32[(39184)>>2] = $$1;
   $127 = $126 | 1;
   $128 = ((($$1)) + 4|0);
   HEAP32[$128>>2] = $127;
   $129 = (($$1) + ($126)|0);
   HEAP32[$129>>2] = $126;
   return;
  }
  $130 = $112 & -8;
  $131 = (($130) + ($$1416))|0;
  $132 = $112 >>> 3;
  $133 = ($112>>>0)<(256);
  do {
   if ($133) {
    $134 = ((($2)) + 8|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = ((($2)) + 12|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $132 << 1;
    $139 = (39204 + ($138<<2)|0);
    $140 = ($135|0)==($139|0);
    if (!($140)) {
     $141 = ($135>>>0)<($109>>>0);
     if ($141) {
      _abort();
      // unreachable;
     }
     $142 = ((($135)) + 12|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = ($143|0)==($2|0);
     if (!($144)) {
      _abort();
      // unreachable;
     }
    }
    $145 = ($137|0)==($135|0);
    if ($145) {
     $146 = 1 << $132;
     $147 = $146 ^ -1;
     $148 = HEAP32[9791]|0;
     $149 = $148 & $147;
     HEAP32[9791] = $149;
     break;
    }
    $150 = ($137|0)==($139|0);
    if ($150) {
     $$pre21 = ((($137)) + 8|0);
     $$pre$phi22Z2D = $$pre21;
    } else {
     $151 = ($137>>>0)<($109>>>0);
     if ($151) {
      _abort();
      // unreachable;
     }
     $152 = ((($137)) + 8|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = ($153|0)==($2|0);
     if ($154) {
      $$pre$phi22Z2D = $152;
     } else {
      _abort();
      // unreachable;
     }
    }
    $155 = ((($135)) + 12|0);
    HEAP32[$155>>2] = $137;
    HEAP32[$$pre$phi22Z2D>>2] = $135;
   } else {
    $156 = ((($2)) + 24|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ((($2)) + 12|0);
    $159 = HEAP32[$158>>2]|0;
    $160 = ($159|0)==($2|0);
    do {
     if ($160) {
      $170 = ((($2)) + 16|0);
      $171 = ((($170)) + 4|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==(0|0);
      if ($173) {
       $174 = HEAP32[$170>>2]|0;
       $175 = ($174|0)==(0|0);
       if ($175) {
        $$3433 = 0;
        break;
       } else {
        $$1431 = $174;$$1435 = $170;
       }
      } else {
       $$1431 = $172;$$1435 = $171;
      }
      while(1) {
       $176 = ((($$1431)) + 20|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if (!($178)) {
        $$1431 = $177;$$1435 = $176;
        continue;
       }
       $179 = ((($$1431)) + 16|0);
       $180 = HEAP32[$179>>2]|0;
       $181 = ($180|0)==(0|0);
       if ($181) {
        break;
       } else {
        $$1431 = $180;$$1435 = $179;
       }
      }
      $182 = ($$1435>>>0)<($109>>>0);
      if ($182) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1435>>2] = 0;
       $$3433 = $$1431;
       break;
      }
     } else {
      $161 = ((($2)) + 8|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162>>>0)<($109>>>0);
      if ($163) {
       _abort();
       // unreachable;
      }
      $164 = ((($162)) + 12|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($2|0);
      if (!($166)) {
       _abort();
       // unreachable;
      }
      $167 = ((($159)) + 8|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==($2|0);
      if ($169) {
       HEAP32[$164>>2] = $159;
       HEAP32[$167>>2] = $162;
       $$3433 = $159;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $183 = ($157|0)==(0|0);
    if (!($183)) {
     $184 = ((($2)) + 28|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = (39468 + ($185<<2)|0);
     $187 = HEAP32[$186>>2]|0;
     $188 = ($2|0)==($187|0);
     if ($188) {
      HEAP32[$186>>2] = $$3433;
      $cond16 = ($$3433|0)==(0|0);
      if ($cond16) {
       $189 = 1 << $185;
       $190 = $189 ^ -1;
       $191 = HEAP32[(39168)>>2]|0;
       $192 = $191 & $190;
       HEAP32[(39168)>>2] = $192;
       break;
      }
     } else {
      $193 = HEAP32[(39180)>>2]|0;
      $194 = ($157>>>0)<($193>>>0);
      if ($194) {
       _abort();
       // unreachable;
      }
      $195 = ((($157)) + 16|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = ($196|0)==($2|0);
      if ($197) {
       HEAP32[$195>>2] = $$3433;
      } else {
       $198 = ((($157)) + 20|0);
       HEAP32[$198>>2] = $$3433;
      }
      $199 = ($$3433|0)==(0|0);
      if ($199) {
       break;
      }
     }
     $200 = HEAP32[(39180)>>2]|0;
     $201 = ($$3433>>>0)<($200>>>0);
     if ($201) {
      _abort();
      // unreachable;
     }
     $202 = ((($$3433)) + 24|0);
     HEAP32[$202>>2] = $157;
     $203 = ((($2)) + 16|0);
     $204 = HEAP32[$203>>2]|0;
     $205 = ($204|0)==(0|0);
     do {
      if (!($205)) {
       $206 = ($204>>>0)<($200>>>0);
       if ($206) {
        _abort();
        // unreachable;
       } else {
        $207 = ((($$3433)) + 16|0);
        HEAP32[$207>>2] = $204;
        $208 = ((($204)) + 24|0);
        HEAP32[$208>>2] = $$3433;
        break;
       }
      }
     } while(0);
     $209 = ((($203)) + 4|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     if (!($211)) {
      $212 = HEAP32[(39180)>>2]|0;
      $213 = ($210>>>0)<($212>>>0);
      if ($213) {
       _abort();
       // unreachable;
      } else {
       $214 = ((($$3433)) + 20|0);
       HEAP32[$214>>2] = $210;
       $215 = ((($210)) + 24|0);
       HEAP32[$215>>2] = $$3433;
       break;
      }
     }
    }
   }
  } while(0);
  $216 = $131 | 1;
  $217 = ((($$1)) + 4|0);
  HEAP32[$217>>2] = $216;
  $218 = (($$1) + ($131)|0);
  HEAP32[$218>>2] = $131;
  $219 = HEAP32[(39184)>>2]|0;
  $220 = ($$1|0)==($219|0);
  if ($220) {
   HEAP32[(39172)>>2] = $131;
   return;
  } else {
   $$2 = $131;
  }
 } else {
  $221 = $112 & -2;
  HEAP32[$111>>2] = $221;
  $222 = $$1416 | 1;
  $223 = ((($$1)) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($$1) + ($$1416)|0);
  HEAP32[$224>>2] = $$1416;
  $$2 = $$1416;
 }
 $225 = $$2 >>> 3;
 $226 = ($$2>>>0)<(256);
 if ($226) {
  $227 = $225 << 1;
  $228 = (39204 + ($227<<2)|0);
  $229 = HEAP32[9791]|0;
  $230 = 1 << $225;
  $231 = $229 & $230;
  $232 = ($231|0)==(0);
  if ($232) {
   $233 = $229 | $230;
   HEAP32[9791] = $233;
   $$pre = ((($228)) + 8|0);
   $$0436 = $228;$$pre$phiZ2D = $$pre;
  } else {
   $234 = ((($228)) + 8|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = HEAP32[(39180)>>2]|0;
   $237 = ($235>>>0)<($236>>>0);
   if ($237) {
    _abort();
    // unreachable;
   } else {
    $$0436 = $235;$$pre$phiZ2D = $234;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $238 = ((($$0436)) + 12|0);
  HEAP32[$238>>2] = $$1;
  $239 = ((($$1)) + 8|0);
  HEAP32[$239>>2] = $$0436;
  $240 = ((($$1)) + 12|0);
  HEAP32[$240>>2] = $228;
  return;
 }
 $241 = $$2 >>> 8;
 $242 = ($241|0)==(0);
 if ($242) {
  $$0429 = 0;
 } else {
  $243 = ($$2>>>0)>(16777215);
  if ($243) {
   $$0429 = 31;
  } else {
   $244 = (($241) + 1048320)|0;
   $245 = $244 >>> 16;
   $246 = $245 & 8;
   $247 = $241 << $246;
   $248 = (($247) + 520192)|0;
   $249 = $248 >>> 16;
   $250 = $249 & 4;
   $251 = $250 | $246;
   $252 = $247 << $250;
   $253 = (($252) + 245760)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 2;
   $256 = $251 | $255;
   $257 = (14 - ($256))|0;
   $258 = $252 << $255;
   $259 = $258 >>> 15;
   $260 = (($257) + ($259))|0;
   $261 = $260 << 1;
   $262 = (($260) + 7)|0;
   $263 = $$2 >>> $262;
   $264 = $263 & 1;
   $265 = $264 | $261;
   $$0429 = $265;
  }
 }
 $266 = (39468 + ($$0429<<2)|0);
 $267 = ((($$1)) + 28|0);
 HEAP32[$267>>2] = $$0429;
 $268 = ((($$1)) + 16|0);
 $269 = ((($$1)) + 20|0);
 HEAP32[$269>>2] = 0;
 HEAP32[$268>>2] = 0;
 $270 = HEAP32[(39168)>>2]|0;
 $271 = 1 << $$0429;
 $272 = $270 & $271;
 $273 = ($272|0)==(0);
 if ($273) {
  $274 = $270 | $271;
  HEAP32[(39168)>>2] = $274;
  HEAP32[$266>>2] = $$1;
  $275 = ((($$1)) + 24|0);
  HEAP32[$275>>2] = $266;
  $276 = ((($$1)) + 12|0);
  HEAP32[$276>>2] = $$1;
  $277 = ((($$1)) + 8|0);
  HEAP32[$277>>2] = $$1;
  return;
 }
 $278 = HEAP32[$266>>2]|0;
 $279 = ($$0429|0)==(31);
 $280 = $$0429 >>> 1;
 $281 = (25 - ($280))|0;
 $282 = $279 ? 0 : $281;
 $283 = $$2 << $282;
 $$0417 = $283;$$0418 = $278;
 while(1) {
  $284 = ((($$0418)) + 4|0);
  $285 = HEAP32[$284>>2]|0;
  $286 = $285 & -8;
  $287 = ($286|0)==($$2|0);
  if ($287) {
   label = 127;
   break;
  }
  $288 = $$0417 >>> 31;
  $289 = (((($$0418)) + 16|0) + ($288<<2)|0);
  $290 = $$0417 << 1;
  $291 = HEAP32[$289>>2]|0;
  $292 = ($291|0)==(0|0);
  if ($292) {
   label = 124;
   break;
  } else {
   $$0417 = $290;$$0418 = $291;
  }
 }
 if ((label|0) == 124) {
  $293 = HEAP32[(39180)>>2]|0;
  $294 = ($289>>>0)<($293>>>0);
  if ($294) {
   _abort();
   // unreachable;
  }
  HEAP32[$289>>2] = $$1;
  $295 = ((($$1)) + 24|0);
  HEAP32[$295>>2] = $$0418;
  $296 = ((($$1)) + 12|0);
  HEAP32[$296>>2] = $$1;
  $297 = ((($$1)) + 8|0);
  HEAP32[$297>>2] = $$1;
  return;
 }
 else if ((label|0) == 127) {
  $298 = ((($$0418)) + 8|0);
  $299 = HEAP32[$298>>2]|0;
  $300 = HEAP32[(39180)>>2]|0;
  $301 = ($299>>>0)>=($300>>>0);
  $not$ = ($$0418>>>0)>=($300>>>0);
  $302 = $301 & $not$;
  if (!($302)) {
   _abort();
   // unreachable;
  }
  $303 = ((($299)) + 12|0);
  HEAP32[$303>>2] = $$1;
  HEAP32[$298>>2] = $$1;
  $304 = ((($$1)) + 8|0);
  HEAP32[$304>>2] = $299;
  $305 = ((($$1)) + 12|0);
  HEAP32[$305>>2] = $$0418;
  $306 = ((($$1)) + 24|0);
  HEAP32[$306>>2] = 0;
  return;
 }
}
function __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28ios_baseD2Ev($0);
 return;
}
function __ZNSt3__28ios_baseD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (15380);
 __THREW__ = 0;
 invoke_vii(756,($0|0),0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $12 = ___cxa_find_matching_catch_3(0|0)|0;
  $13 = tempRet0;
  ___clang_call_terminate($12);
  // unreachable;
 } else {
  $3 = ((($0)) + 28|0);
  __ZNSt3__26localeD2Ev($3);
  $4 = ((($0)) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  _free($5);
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  _free($7);
  $8 = ((($0)) + 48|0);
  $9 = HEAP32[$8>>2]|0;
  _free($9);
  $10 = ((($0)) + 60|0);
  $11 = HEAP32[$10>>2]|0;
  _free($11);
  return;
 }
}
function __ZNSt3__28ios_base16__call_callbacksENS0_5eventE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 32|0);
 $5 = ((($0)) + 36|0);
 $$0 = $3;
 while(1) {
  $6 = ($$0|0)==(0);
  if ($6) {
   break;
  }
  $7 = (($$0) + -1)|0;
  $8 = HEAP32[$4>>2]|0;
  $9 = (($8) + ($7<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$5>>2]|0;
  $12 = (($11) + ($7<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_viii[$10 & 1023]($1,$0,$13);
  $$0 = $7;
 }
 return;
}
function __ZNSt3__28ios_baseD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28ios_baseD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28ios_baseD2Ev($0);
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (15396);
 $1 = ((($0)) + 4|0);
 __ZNSt3__26localeD2Ev($1);
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (15396);
 $1 = ((($0)) + 4|0);
 __ZNSt3__26localeD2Ev($1);
 __ZdlPv($0);
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = $0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 8|0);
 $11 = $10;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = -1;
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$013 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 12|0);
 $4 = ((($0)) + 16|0);
 $$0 = 0;$$013 = $1;
 while(1) {
  $5 = ($$0|0)<($2|0);
  if (!($5)) {
   break;
  }
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $9 = ((($6)) + 1|0);
   HEAP32[$3>>2] = $9;
   $10 = HEAP8[$6>>0]|0;
   $storemerge = $10;
  } else {
   $11 = HEAP32[$0>>2]|0;
   $12 = ((($11)) + 40|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (FUNCTION_TABLE_ii[$13 & 1023]($0)|0);
   $15 = ($14|0)==(-1);
   if ($15) {
    break;
   }
   $16 = $14&255;
   $storemerge = $16;
  }
  HEAP8[$$013>>0] = $storemerge;
  $17 = (($$0) + 1)|0;
  $18 = ((($$013)) + 1|0);
  $$0 = $17;$$013 = $18;
 }
 return ($$0|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 1023]($0)|0);
 $5 = ($4|0)==(-1);
 if ($5) {
  $$0 = -1;
 } else {
  $6 = ((($0)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 1|0);
  HEAP32[$6>>2] = $8;
  $9 = HEAP8[$7>>0]|0;
  $10 = $9&255;
  $$0 = $10;
 }
 return ($$0|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$021 = 0, $$pre = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 24|0);
 $4 = ((($0)) + 28|0);
 $$0 = $1;$$021 = 0;
 while(1) {
  $5 = ($$021|0)<($2|0);
  if (!($5)) {
   break;
  }
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if (!($8)) {
   $9 = HEAP32[$0>>2]|0;
   $10 = ((($9)) + 52|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = HEAP8[$$0>>0]|0;
   $13 = $12&255;
   $14 = (FUNCTION_TABLE_iii[$11 & 1023]($0,$13)|0);
   $15 = ($14|0)==(-1);
   if ($15) {
    break;
   }
   $16 = ((($$0)) + 1|0);
   $17 = (($$021) + 1)|0;
   $$0 = $16;$$021 = $17;
   continue;
  }
  $18 = $6;
  $19 = $7;
  $20 = (($19) - ($18))|0;
  $21 = (($2) - ($$021))|0;
  $22 = ($21|0)<($20|0);
  $$sroa$speculated = $22 ? $21 : $20;
  $23 = ($$sroa$speculated|0)==(0);
  if ($23) {
   $25 = $6;
  } else {
   _memcpy(($6|0),($$0|0),($$sroa$speculated|0))|0;
   $$pre = HEAP32[$3>>2]|0;
   $25 = $$pre;
  }
  $24 = (($25) + ($$sroa$speculated)|0);
  HEAP32[$3>>2] = $24;
  $26 = (($$0) + ($$sroa$speculated)|0);
  $27 = (($$sroa$speculated) + ($$021))|0;
  $$0 = $26;$$021 = $27;
 }
 return ($$021|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (15460);
 $1 = ((($0)) + 4|0);
 __ZNSt3__26localeD2Ev($1);
 return;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (15460);
 $1 = ((($0)) + 4|0);
 __ZNSt3__26localeD2Ev($1);
 __ZdlPv($0);
 return;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = $0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 8|0);
 $11 = $10;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = -1;
 return;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 return;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$013 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 12|0);
 $4 = ((($0)) + 16|0);
 $$0 = 0;$$013 = $1;
 while(1) {
  $5 = ($$0|0)<($2|0);
  if (!($5)) {
   break;
  }
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $9 = ((($6)) + 4|0);
   HEAP32[$3>>2] = $9;
   $10 = HEAP32[$6>>2]|0;
   $storemerge = $10;
  } else {
   $11 = HEAP32[$0>>2]|0;
   $12 = ((($11)) + 40|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (FUNCTION_TABLE_ii[$13 & 1023]($0)|0);
   $15 = ($14|0)==(-1);
   if ($15) {
    break;
   } else {
    $storemerge = $14;
   }
  }
  HEAP32[$$013>>2] = $storemerge;
  $16 = (($$0) + 1)|0;
  $17 = ((($$013)) + 4|0);
  $$0 = $16;$$013 = $17;
 }
 return ($$0|0);
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 1023]($0)|0);
 $5 = ($4|0)==(-1);
 if ($5) {
  $$0 = -1;
 } else {
  $6 = ((($0)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 4|0);
  HEAP32[$6>>2] = $8;
  $9 = HEAP32[$7>>2]|0;
  $$0 = $9;
 }
 return ($$0|0);
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$021 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 24|0);
 $4 = ((($0)) + 28|0);
 $$0 = $1;$$021 = 0;
 while(1) {
  $5 = ($$021|0)<($2|0);
  if (!($5)) {
   break;
  }
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $17 = $6;
   $18 = $7;
   $19 = (($18) - ($17))|0;
   $20 = $19 >> 2;
   $21 = (($2) - ($$021))|0;
   $22 = ($21|0)<($20|0);
   $$sroa$speculated = $22 ? $21 : $20;
   (__ZNSt3__211char_traitsIwE4copyEPwPKwj($6,$$0,$$sroa$speculated)|0);
   $23 = HEAP32[$3>>2]|0;
   $24 = (($23) + ($$sroa$speculated<<2)|0);
   HEAP32[$3>>2] = $24;
   $25 = (($$0) + ($$sroa$speculated<<2)|0);
   $26 = (($$sroa$speculated) + ($$021))|0;
   $$0 = $25;$$021 = $26;
   continue;
  }
  $9 = HEAP32[$0>>2]|0;
  $10 = ((($9)) + 52|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$$0>>2]|0;
  $13 = (FUNCTION_TABLE_iii[$11 & 1023]($0,$12)|0);
  $14 = ($13|0)==(-1);
  if ($14) {
   break;
  }
  $15 = ((($$0)) + 4|0);
  $16 = (($$021) + 1)|0;
  $$0 = $15;$$021 = $16;
 }
 return ($$021|0);
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__211char_traitsIwE4copyEPwPKwj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $5 = $0;
 } else {
  $4 = (_wmemcpy($0,$1,$2)|0);
  $5 = $4;
 }
 return ($5|0);
}
function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 __ZNSt3__28ios_baseD2Ev($1);
 return;
}
function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 __ZNSt3__28ios_baseD2Ev($1);
 __ZdlPv($0);
 return;
}
function __ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 $5 = ((($4)) + 8|0);
 __ZNSt3__28ios_baseD2Ev($5);
 return;
}
function __ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev($4);
 return;
}
function __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 __ZNSt3__28ios_baseD2Ev($1);
 return;
}
function __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 __ZNSt3__28ios_baseD2Ev($1);
 __ZdlPv($0);
 return;
}
function __ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 $5 = ((($4)) + 8|0);
 __ZNSt3__28ios_baseD2Ev($5);
 return;
}
function __ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev($4);
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZNSt3__28ios_baseD2Ev($1);
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZNSt3__28ios_baseD2Ev($1);
 __ZdlPv($0);
 return;
}
function __ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 $5 = ((($4)) + 4|0);
 __ZNSt3__28ios_baseD2Ev($5);
 return;
}
function __ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev($4);
 return;
}
function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZNSt3__28ios_baseD2Ev($1);
 return;
}
function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZNSt3__28ios_baseD2Ev($1);
 __ZdlPv($0);
 return;
}
function __ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 $5 = ((($4)) + 4|0);
 __ZNSt3__28ios_baseD2Ev($5);
 return;
}
function __ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev($4);
 return;
}
function __ZNSt3__28ios_base7failureD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__212system_errorD2Ev($0);
 return;
}
function __ZNSt3__28ios_base7failureD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__212system_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__219__iostream_categoryD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__219__iostream_category4nameEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (32373|0);
}
function __ZNKSt3__219__iostream_category7messageEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)!=(1);
 $4 = ($2|0)<(257);
 $or$cond = $3 & $4;
 if ($or$cond) {
  __ZNKSt3__212__do_message7messageEi($0,$1,$2);
 } else {
  ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($0,32337,35);
 }
 return;
}
function __ZNSt3__28ios_base5clearEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$index = 0, $$index2 = 0, $$sroa_idx2$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ((($0)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 $6 = $5&1;
 $$ = $6 | $1;
 $7 = ((($0)) + 16|0);
 HEAP32[$7>>2] = $$;
 $8 = $5&1;
 $9 = $8 | $1;
 $10 = ((($0)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $9 & $11;
 $13 = ($12|0)==(0);
 if ($13) {
  STACKTOP = sp;return;
 }
 $14 = (___cxa_allocate_exception(16)|0);
 (__ZNSt3__217iostream_categoryEv()|0);
 HEAP32[$2>>2] = 1;
 $$sroa_idx2$i = ((($2)) + 4|0);
 HEAP32[$$sroa_idx2$i>>2] = (39660);
 __THREW__ = 0;
 invoke_viii(757,($14|0),(32412|0),($2|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if ($16) {
  $20 = ___cxa_find_matching_catch_2()|0;
  $21 = tempRet0;
  ___cxa_free_exception(($14|0));
  $$index = $20;$$index2 = $21;
 } else {
  __THREW__ = 0;
  invoke_viii(644,($14|0),(1520|0),(331|0));
  $17 = __THREW__; __THREW__ = 0;
  $18 = ___cxa_find_matching_catch_2()|0;
  $19 = tempRet0;
  $$index = $18;$$index2 = $19;
 }
 ___resumeException($$index|0);
 // unreachable;
}
function __ZNSt3__217iostream_categoryEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[35688]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire(35688)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   HEAP32[9915] = (15704);
   (___cxa_atexit((334|0),(39660|0),(___dso_handle|0))|0);
  }
 }
 return (39660|0);
}
function __ZNSt3__28ios_base7failureC2EPKcRKNS_10error_codeE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $3 = sp;
 $4 = $2;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = $3;
 $11 = $10;
 HEAP32[$11>>2] = $6;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;
 __ZNSt3__212system_errorC2ENS_10error_codeEPKc($0,$tmpcast$byval_copy,$1);
 HEAP32[$0>>2] = (15684);
 STACKTOP = sp;return;
}
function __ZNSt3__28ios_base4initEPv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 24|0);
 HEAP32[$2>>2] = $1;
 $not$ = ($1|0)==(0|0);
 $3 = $not$&1;
 $4 = ((($0)) + 16|0);
 HEAP32[$4>>2] = $3;
 $5 = ((($0)) + 20|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 4|0);
 HEAP32[$6>>2] = 4098;
 $7 = ((($0)) + 12|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 8|0);
 HEAP32[$8>>2] = 6;
 $9 = ((($0)) + 32|0);
 $10 = ((($0)) + 28|0);
 dest=$9; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 __ZNSt3__26localeC2Ev($10);
 return;
}
function __ZNKSt3__28ios_base6getlocEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 28|0);
 __ZNSt3__26localeC2ERKS0_($1,$2);
 $3 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (15396);
 $1 = ((($0)) + 4|0);
 __ZNSt3__26localeC2Ev($1);
 $2 = ((($0)) + 8|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;
 return;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (15460);
 $1 = ((($0)) + 4|0);
 __ZNSt3__26localeC2Ev($1);
 $2 = ((($0)) + 8|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;
 return;
}
function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i = 0, $$pre$phiZ2D = 0, $$sroa$024$133 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $isascii3$i = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP8[$0>>0] = 0;
 $4 = HEAP32[$1>>2]|0;
 $5 = ((($4)) + -12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($1) + ($6)|0);
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = ((($7)) + 72|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0|0);
  if (!($13)) {
   (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($12)|0);
  }
  do {
   if (!($2)) {
    $14 = HEAP32[$1>>2]|0;
    $15 = ((($14)) + -12|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($1) + ($16)|0);
    $18 = ((($17)) + 4|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = $19 & 4096;
    $21 = ($20|0)==(0);
    if (!($21)) {
     $22 = (__ZNKSt3__28ios_base6getlocEv($17)|0);
     HEAP32[$3>>2] = $22;
     __THREW__ = 0;
     $23 = (invoke_iii(659,($3|0),(40712|0))|0);
     $24 = __THREW__; __THREW__ = 0;
     $25 = $24&1;
     if ($25) {
      $67 = ___cxa_find_matching_catch_2()|0;
      $68 = tempRet0;
      __ZNSt3__26localeD2Ev($3);
      ___resumeException($67|0);
      // unreachable;
     }
     __ZNSt3__26localeD2Ev($3);
     $26 = HEAP32[$1>>2]|0;
     $27 = ((($26)) + -12|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = (($1) + ($28)|0);
     $30 = ((($29)) + 24|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = ((($23)) + 8|0);
     $33 = $31;
     $34 = ($31|0)==(0);
     $35 = ((($33)) + 12|0);
     $36 = ((($33)) + 16|0);
     $37 = $31;
     $38 = $31;
     $39 = ((($38)) + 12|0);
     $40 = ((($38)) + 16|0);
     $41 = $31;
     $42 = $31;
     while(1) {
      if ($34) {
       $$pre$phiZ2D = 0;$$sroa$024$133 = 0;
       break;
      }
      $43 = HEAP32[$35>>2]|0;
      $44 = HEAP32[$36>>2]|0;
      $45 = ($43|0)==($44|0);
      if ($45) {
       $46 = HEAP32[$37>>2]|0;
       $47 = ((($46)) + 36|0);
       $48 = HEAP32[$47>>2]|0;
       $49 = (FUNCTION_TABLE_ii[$48 & 1023]($33)|0);
       $50 = ($49|0)==(-1);
       if ($50) {
        $$pre$phiZ2D = 0;$$sroa$024$133 = 0;
        break;
       }
      }
      $51 = HEAP32[$39>>2]|0;
      $52 = HEAP32[$40>>2]|0;
      $53 = ($51|0)==($52|0);
      if ($53) {
       $54 = HEAP32[$41>>2]|0;
       $55 = ((($54)) + 36|0);
       $56 = HEAP32[$55>>2]|0;
       $57 = (FUNCTION_TABLE_ii[$56 & 1023]($38)|0);
       $$0$i$i = $57;
      } else {
       $58 = HEAP8[$51>>0]|0;
       $59 = $58&255;
       $$0$i$i = $59;
      }
      $60 = $$0$i$i&255;
      $isascii3$i = ($60<<24>>24)>(-1);
      if (!($isascii3$i)) {
       $$pre$phiZ2D = $38;$$sroa$024$133 = $31;
       break;
      }
      $sext = $$0$i$i << 24;
      $61 = $sext >> 24;
      $62 = HEAP32[$32>>2]|0;
      $63 = (($62) + ($61<<1)|0);
      $64 = HEAP16[$63>>1]|0;
      $65 = $64 & 8192;
      $66 = ($65<<16>>16)==(0);
      if ($66) {
       $$pre$phiZ2D = $38;$$sroa$024$133 = $31;
       break;
      }
      $69 = HEAP32[$39>>2]|0;
      $70 = HEAP32[$40>>2]|0;
      $71 = ($69|0)==($70|0);
      if ($71) {
       $72 = HEAP32[$42>>2]|0;
       $73 = ((($72)) + 40|0);
       $74 = HEAP32[$73>>2]|0;
       (FUNCTION_TABLE_ii[$74 & 1023]($38)|0);
       continue;
      } else {
       $75 = ((($69)) + 1|0);
       HEAP32[$39>>2] = $75;
       continue;
      }
     }
     $76 = ($$sroa$024$133|0)==(0);
     if (!($76)) {
      $77 = ((($$pre$phiZ2D)) + 12|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = ((($$pre$phiZ2D)) + 16|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = ($78|0)==($80|0);
      if (!($81)) {
       break;
      }
      $82 = $$sroa$024$133;
      $83 = HEAP32[$82>>2]|0;
      $84 = ((($83)) + 36|0);
      $85 = HEAP32[$84>>2]|0;
      $86 = (FUNCTION_TABLE_ii[$85 & 1023]($$pre$phiZ2D)|0);
      $87 = ($86|0)==(-1);
      if (!($87)) {
       break;
      }
     }
     $88 = HEAP32[$1>>2]|0;
     $89 = ((($88)) + -12|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = (($1) + ($90)|0);
     $92 = ((($91)) + 16|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = $93 | 6;
     __ZNSt3__28ios_base5clearEj($91,$94);
    }
   }
  } while(0);
  $95 = HEAP32[$1>>2]|0;
  $96 = ((($95)) + -12|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = (($1) + ($97)|0);
  $99 = ((($98)) + 16|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = ($100|0)==(0);
  $102 = $101&1;
  HEAP8[$0>>0] = $102;
 } else {
  $103 = $9 | 4;
  __ZNSt3__28ios_base5clearEj($7,$103);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($0) + ($4)|0);
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 L1: do {
  if (!($8)) {
   __THREW__ = 0;
   invoke_vii(657,($1|0),($0|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   L3: do {
    if ($10) {
     $35 = ___cxa_find_matching_catch_3(0|0)|0;
     $36 = tempRet0;
     $$0 = $35;
    } else {
     $11 = HEAP8[$1>>0]|0;
     $12 = ($11<<24>>24)==(0);
     do {
      if (!($12)) {
       $13 = HEAP32[$0>>2]|0;
       $14 = ((($13)) + -12|0);
       $15 = HEAP32[$14>>2]|0;
       $16 = (($0) + ($15)|0);
       $17 = ((($16)) + 24|0);
       $18 = HEAP32[$17>>2]|0;
       $19 = HEAP32[$18>>2]|0;
       $20 = ((($19)) + 24|0);
       $21 = HEAP32[$20>>2]|0;
       __THREW__ = 0;
       $22 = (invoke_ii($21|0,($18|0))|0);
       $23 = __THREW__; __THREW__ = 0;
       $24 = $23&1;
       if (!($24)) {
        $25 = ($22|0)==(-1);
        if (!($25)) {
         break;
        }
        $26 = HEAP32[$0>>2]|0;
        $27 = ((($26)) + -12|0);
        $28 = HEAP32[$27>>2]|0;
        $29 = (($0) + ($28)|0);
        $30 = ((($29)) + 16|0);
        $31 = HEAP32[$30>>2]|0;
        $32 = $31 | 1;
        __THREW__ = 0;
        invoke_vii(662,($29|0),($32|0));
        $33 = __THREW__; __THREW__ = 0;
        $34 = $33&1;
        if (!($34)) {
         break;
        }
       }
       $37 = ___cxa_find_matching_catch_3(0|0)|0;
       $38 = tempRet0;
       __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($1);
       $$0 = $37;
       break L3;
      }
     } while(0);
     __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($1);
     break L1;
    }
   } while(0);
   (___cxa_begin_catch(($$0|0))|0);
   $39 = HEAP32[$0>>2]|0;
   $40 = ((($39)) + -12|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (($0) + ($41)|0);
   __THREW__ = 0;
   invoke_vi(664,($42|0));
   $43 = __THREW__; __THREW__ = 0;
   $44 = $43&1;
   if (!($44)) {
    ___cxa_end_catch();
    break;
   }
   $45 = ___cxa_find_matching_catch_2()|0;
   $46 = tempRet0;
   __THREW__ = 0;
   invoke_v(643);
   $47 = __THREW__; __THREW__ = 0;
   $48 = $47&1;
   if ($48) {
    $49 = ___cxa_find_matching_catch_3(0|0)|0;
    $50 = tempRet0;
    ___clang_call_terminate($49);
    // unreachable;
   } else {
    ___resumeException($45|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0] = 0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + -12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($1) + ($5)|0);
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = ((($6)) + 72|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($11)|0);
  }
  HEAP8[$0>>0] = 1;
 }
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + -12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($2) + ($5)|0);
 $7 = ((($6)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 do {
  if (!($9)) {
   $10 = ((($6)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0);
   if ($12) {
    $13 = ((($6)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $14 & 8192;
    $16 = ($15|0)==(0);
    if (!($16)) {
     $17 = (__ZSt18uncaught_exceptionv()|0);
     if (!($17)) {
      $18 = HEAP32[$1>>2]|0;
      $19 = HEAP32[$18>>2]|0;
      $20 = ((($19)) + -12|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($18) + ($21)|0);
      $23 = ((($22)) + 24|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = HEAP32[$24>>2]|0;
      $26 = ((($25)) + 24|0);
      $27 = HEAP32[$26>>2]|0;
      __THREW__ = 0;
      $28 = (invoke_ii($27|0,($24|0))|0);
      $29 = __THREW__; __THREW__ = 0;
      $30 = $29&1;
      if (!($30)) {
       $31 = ($28|0)==(-1);
       if (!($31)) {
        break;
       }
       $32 = HEAP32[$1>>2]|0;
       $33 = HEAP32[$32>>2]|0;
       $34 = ((($33)) + -12|0);
       $35 = HEAP32[$34>>2]|0;
       $36 = (($32) + ($35)|0);
       $37 = ((($36)) + 16|0);
       $38 = HEAP32[$37>>2]|0;
       $39 = $38 | 1;
       __THREW__ = 0;
       invoke_vii(662,($36|0),($39|0));
       $40 = __THREW__; __THREW__ = 0;
       $41 = $40&1;
       if (!($41)) {
        break;
       }
      }
      $42 = ___cxa_find_matching_catch_3(0|0)|0;
      $43 = tempRet0;
      (___cxa_begin_catch(($42|0))|0);
      __THREW__ = 0;
      invoke_v(643);
      $44 = __THREW__; __THREW__ = 0;
      $45 = $44&1;
      if ($45) {
       $46 = ___cxa_find_matching_catch_3(0|0)|0;
       $47 = tempRet0;
       ___clang_call_terminate($46);
       // unreachable;
      }
     }
    }
   }
  }
 } while(0);
 return;
}
function __ZNSt3__28ios_base33__set_badbit_and_consider_rethrowEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 | 1;
 HEAP32[$1>>2] = $3;
 $4 = ((($0)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  return;
 } else {
  ___cxa_rethrow();
  // unreachable;
 }
}
function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$1 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$pre$phi10Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy1 = sp + 20|0;
 $$byval_copy = sp + 16|0;
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $4 = sp + 24|0;
 $5 = sp + 4|0;
 $6 = sp;
 __THREW__ = 0;
 invoke_viii(706,($4|0),($0|0),0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 L1: do {
  if ($8) {
   $40 = ___cxa_find_matching_catch_3(0|0)|0;
   $41 = tempRet0;
   $$1 = $40;$$pre$phi10Z2D = $0;$$pre$phiZ2D = $0;
   label = 12;
  } else {
   $9 = HEAP8[$4>>0]|0;
   $10 = ($9<<24>>24)==(0);
   L4: do {
    if (!($10)) {
     HEAP32[$5>>2] = 0;
     $11 = HEAP32[$0>>2]|0;
     $12 = ((($11)) + -12|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = (($0) + ($13)|0);
     $15 = (__ZNKSt3__28ios_base6getlocEv($14)|0);
     HEAP32[$6>>2] = $15;
     __THREW__ = 0;
     $16 = (invoke_iii(659,($6|0),(40736|0))|0);
     $17 = __THREW__; __THREW__ = 0;
     $18 = $17&1;
     do {
      if ($18) {
       label = 8;
      } else {
       $19 = HEAP32[$0>>2]|0;
       $20 = ((($19)) + -12|0);
       $21 = HEAP32[$20>>2]|0;
       $22 = (($0) + ($21)|0);
       $23 = ((($22)) + 24|0);
       $24 = HEAP32[$23>>2]|0;
       $25 = HEAP32[$16>>2]|0;
       $26 = ((($25)) + 28|0);
       $27 = HEAP32[$26>>2]|0;
       HEAP32[$2>>2] = $24;
       HEAP32[$3>>2] = 0;
       __THREW__ = 0;
       ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;
       ;HEAP32[$$byval_copy1>>2]=HEAP32[$3>>2]|0;
       (invoke_iiiiiii($27|0,($16|0),($$byval_copy|0),($$byval_copy1|0),($22|0),($5|0),($1|0))|0);
       $28 = __THREW__; __THREW__ = 0;
       $29 = $28&1;
       if ($29) {
        label = 8;
       } else {
        __ZNSt3__26localeD2Ev($6);
        $30 = HEAP32[$0>>2]|0;
        $31 = ((($30)) + -12|0);
        $32 = HEAP32[$31>>2]|0;
        $33 = (($0) + ($32)|0);
        $34 = HEAP32[$5>>2]|0;
        $35 = ((($33)) + 16|0);
        $36 = HEAP32[$35>>2]|0;
        $37 = $36 | $34;
        __THREW__ = 0;
        invoke_vii(662,($33|0),($37|0));
        $38 = __THREW__; __THREW__ = 0;
        $39 = $38&1;
        if ($39) {
         $44 = ___cxa_find_matching_catch_3(0|0)|0;
         $45 = tempRet0;
         $$0 = $44;
         break;
        } else {
         break L4;
        }
       }
      }
     } while(0);
     if ((label|0) == 8) {
      $42 = ___cxa_find_matching_catch_3(0|0)|0;
      $43 = tempRet0;
      __ZNSt3__26localeD2Ev($6);
      $$0 = $42;
     }
     $$1 = $$0;$$pre$phi10Z2D = $0;$$pre$phiZ2D = $0;
     label = 12;
     break L1;
    }
   } while(0);
  }
 } while(0);
 do {
  if ((label|0) == 12) {
   (___cxa_begin_catch(($$1|0))|0);
   $46 = HEAP32[$$pre$phiZ2D>>2]|0;
   $47 = ((($46)) + -12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($$pre$phi10Z2D) + ($48)|0);
   __THREW__ = 0;
   invoke_vi(664,($49|0));
   $50 = __THREW__; __THREW__ = 0;
   $51 = $50&1;
   if (!($51)) {
    ___cxa_end_catch();
    break;
   }
   $52 = ___cxa_find_matching_catch_2()|0;
   $53 = tempRet0;
   __THREW__ = 0;
   invoke_v(643);
   $54 = __THREW__; __THREW__ = 0;
   $55 = $54&1;
   if ($55) {
    $56 = ___cxa_find_matching_catch_3(0|0)|0;
    $57 = tempRet0;
    ___clang_call_terminate($56);
    // unreachable;
   } else {
    ___resumeException($52|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERd($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$1 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$pre$phi10Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy1 = sp + 20|0;
 $$byval_copy = sp + 16|0;
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $4 = sp + 24|0;
 $5 = sp + 4|0;
 $6 = sp;
 __THREW__ = 0;
 invoke_viii(706,($4|0),($0|0),0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 L1: do {
  if ($8) {
   $40 = ___cxa_find_matching_catch_3(0|0)|0;
   $41 = tempRet0;
   $$1 = $40;$$pre$phi10Z2D = $0;$$pre$phiZ2D = $0;
   label = 12;
  } else {
   $9 = HEAP8[$4>>0]|0;
   $10 = ($9<<24>>24)==(0);
   L4: do {
    if (!($10)) {
     HEAP32[$5>>2] = 0;
     $11 = HEAP32[$0>>2]|0;
     $12 = ((($11)) + -12|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = (($0) + ($13)|0);
     $15 = (__ZNKSt3__28ios_base6getlocEv($14)|0);
     HEAP32[$6>>2] = $15;
     __THREW__ = 0;
     $16 = (invoke_iii(659,($6|0),(40736|0))|0);
     $17 = __THREW__; __THREW__ = 0;
     $18 = $17&1;
     do {
      if ($18) {
       label = 8;
      } else {
       $19 = HEAP32[$0>>2]|0;
       $20 = ((($19)) + -12|0);
       $21 = HEAP32[$20>>2]|0;
       $22 = (($0) + ($21)|0);
       $23 = ((($22)) + 24|0);
       $24 = HEAP32[$23>>2]|0;
       $25 = HEAP32[$16>>2]|0;
       $26 = ((($25)) + 44|0);
       $27 = HEAP32[$26>>2]|0;
       HEAP32[$2>>2] = $24;
       HEAP32[$3>>2] = 0;
       __THREW__ = 0;
       ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;
       ;HEAP32[$$byval_copy1>>2]=HEAP32[$3>>2]|0;
       (invoke_iiiiiii($27|0,($16|0),($$byval_copy|0),($$byval_copy1|0),($22|0),($5|0),($1|0))|0);
       $28 = __THREW__; __THREW__ = 0;
       $29 = $28&1;
       if ($29) {
        label = 8;
       } else {
        __ZNSt3__26localeD2Ev($6);
        $30 = HEAP32[$0>>2]|0;
        $31 = ((($30)) + -12|0);
        $32 = HEAP32[$31>>2]|0;
        $33 = (($0) + ($32)|0);
        $34 = HEAP32[$5>>2]|0;
        $35 = ((($33)) + 16|0);
        $36 = HEAP32[$35>>2]|0;
        $37 = $36 | $34;
        __THREW__ = 0;
        invoke_vii(662,($33|0),($37|0));
        $38 = __THREW__; __THREW__ = 0;
        $39 = $38&1;
        if ($39) {
         $44 = ___cxa_find_matching_catch_3(0|0)|0;
         $45 = tempRet0;
         $$0 = $44;
         break;
        } else {
         break L4;
        }
       }
      }
     } while(0);
     if ((label|0) == 8) {
      $42 = ___cxa_find_matching_catch_3(0|0)|0;
      $43 = tempRet0;
      __ZNSt3__26localeD2Ev($6);
      $$0 = $42;
     }
     $$1 = $$0;$$pre$phi10Z2D = $0;$$pre$phiZ2D = $0;
     label = 12;
     break L1;
    }
   } while(0);
  }
 } while(0);
 do {
  if ((label|0) == 12) {
   (___cxa_begin_catch(($$1|0))|0);
   $46 = HEAP32[$$pre$phiZ2D>>2]|0;
   $47 = ((($46)) + -12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($$pre$phi10Z2D) + ($48)|0);
   __THREW__ = 0;
   invoke_vi(664,($49|0));
   $50 = __THREW__; __THREW__ = 0;
   $51 = $50&1;
   if (!($51)) {
    ___cxa_end_catch();
    break;
   }
   $52 = ___cxa_find_matching_catch_2()|0;
   $53 = tempRet0;
   __THREW__ = 0;
   invoke_v(643);
   $54 = __THREW__; __THREW__ = 0;
   $55 = $54&1;
   if ($55) {
    $56 = ___cxa_find_matching_catch_3(0|0)|0;
    $57 = tempRet0;
    ___clang_call_terminate($56);
    // unreachable;
   } else {
    ___resumeException($52|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE3getEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i8 = 0, $$2 = 0, $$3 = 0, $$pre$phi10Z2D = 0, $$pre$phiZ2D = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 __THREW__ = 0;
 invoke_viii(706,($1|0),($0|0),1);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L1: do {
  if ($4) {
   $37 = ___cxa_find_matching_catch_3(0|0)|0;
   $38 = tempRet0;
   $$0 = $37;$$pre$phi10Z2D = $0;$$pre$phiZ2D = $0;
   label = 10;
  } else {
   $5 = HEAP8[$1>>0]|0;
   $6 = ($5<<24>>24)==(0);
   L4: do {
    if ($6) {
     $$3 = -1;
    } else {
     $7 = HEAP32[$0>>2]|0;
     $8 = ((($7)) + -12|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = (($0) + ($9)|0);
     $11 = ((($10)) + 24|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = ((($12)) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ((($12)) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     do {
      if ($17) {
       $18 = HEAP32[$12>>2]|0;
       $19 = ((($18)) + 40|0);
       $20 = HEAP32[$19>>2]|0;
       __THREW__ = 0;
       $21 = (invoke_ii($20|0,($12|0))|0);
       $22 = __THREW__; __THREW__ = 0;
       $23 = $22&1;
       if (!($23)) {
        $27 = ($21|0)==(-1);
        if (!($27)) {
         $$0$i8 = $21;
         break;
        }
        $28 = HEAP32[$0>>2]|0;
        $29 = ((($28)) + -12|0);
        $30 = HEAP32[$29>>2]|0;
        $31 = (($0) + ($30)|0);
        $32 = ((($31)) + 16|0);
        $33 = HEAP32[$32>>2]|0;
        $34 = $33 | 6;
        __THREW__ = 0;
        invoke_vii(662,($31|0),($34|0));
        $35 = __THREW__; __THREW__ = 0;
        $36 = $35&1;
        if (!($36)) {
         $$3 = -1;
         break L4;
        }
       }
       $39 = ___cxa_find_matching_catch_3(0|0)|0;
       $40 = tempRet0;
       $$0 = $39;$$pre$phi10Z2D = $0;$$pre$phiZ2D = $0;
       label = 10;
       break L1;
      } else {
       $24 = ((($14)) + 1|0);
       HEAP32[$13>>2] = $24;
       $25 = HEAP8[$14>>0]|0;
       $26 = $25&255;
       $$0$i8 = $26;
      }
     } while(0);
     HEAP32[$2>>2] = 1;
     $$3 = $$0$i8;
    }
   } while(0);
   $$2 = $$3;
  }
 } while(0);
 do {
  if ((label|0) == 10) {
   (___cxa_begin_catch(($$0|0))|0);
   $41 = HEAP32[$$pre$phiZ2D>>2]|0;
   $42 = ((($41)) + -12|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (($$pre$phi10Z2D) + ($43)|0);
   __THREW__ = 0;
   invoke_vi(664,($44|0));
   $45 = __THREW__; __THREW__ = 0;
   $46 = $45&1;
   if (!($46)) {
    ___cxa_end_catch();
    $$2 = -1;
    break;
   }
   $47 = ___cxa_find_matching_catch_2()|0;
   $48 = tempRet0;
   __THREW__ = 0;
   invoke_v(643);
   $49 = __THREW__; __THREW__ = 0;
   $50 = $49&1;
   if ($50) {
    $51 = ___cxa_find_matching_catch_3(0|0)|0;
    $52 = tempRet0;
    ___clang_call_terminate($51);
    // unreachable;
   } else {
    ___resumeException($47|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$2|0);
}
function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE4readEPci($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$pre$phi8Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = 0;
 __THREW__ = 0;
 invoke_viii(706,($3|0),($0|0),1);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 do {
  if ($6) {
   $31 = ___cxa_find_matching_catch_3(0|0)|0;
   $32 = tempRet0;
   $$0 = $31;$$pre$phi8Z2D = $0;$$pre$phiZ2D = $0;
   label = 8;
  } else {
   $7 = HEAP8[$3>>0]|0;
   $8 = ($7<<24>>24)==(0);
   $9 = HEAP32[$0>>2]|0;
   $10 = ((($9)) + -12|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($0) + ($11)|0);
   if ($8) {
    $41 = ((($12)) + 16|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = $42 | 4;
    __THREW__ = 0;
    invoke_vii(662,($12|0),($43|0));
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if ($45) {
     label = 7;
    } else {
     label = 12;
    }
   } else {
    $13 = ((($12)) + 24|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = HEAP32[$14>>2]|0;
    $16 = ((($15)) + 32|0);
    $17 = HEAP32[$16>>2]|0;
    __THREW__ = 0;
    $18 = (invoke_iiii($17|0,($14|0),($1|0),($2|0))|0);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     label = 7;
    } else {
     HEAP32[$4>>2] = $18;
     $21 = ($18|0)==($2|0);
     if ($21) {
      label = 12;
     } else {
      $22 = HEAP32[$0>>2]|0;
      $23 = ((($22)) + -12|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = (($0) + ($24)|0);
      $26 = ((($25)) + 16|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = $27 | 6;
      __THREW__ = 0;
      invoke_vii(662,($25|0),($28|0));
      $29 = __THREW__; __THREW__ = 0;
      $30 = $29&1;
      if ($30) {
       label = 7;
      } else {
       label = 12;
      }
     }
    }
   }
   if ((label|0) == 7) {
    $33 = ___cxa_find_matching_catch_3(0|0)|0;
    $34 = tempRet0;
    $$0 = $33;$$pre$phi8Z2D = $0;$$pre$phiZ2D = $0;
    label = 8;
    break;
   }
   else if ((label|0) == 12) {
    break;
   }
  }
 } while(0);
 do {
  if ((label|0) == 8) {
   (___cxa_begin_catch(($$0|0))|0);
   $35 = HEAP32[$$pre$phiZ2D>>2]|0;
   $36 = ((($35)) + -12|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($$pre$phi8Z2D) + ($37)|0);
   __THREW__ = 0;
   invoke_vi(664,($38|0));
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if (!($40)) {
    ___cxa_end_catch();
    break;
   }
   $46 = ___cxa_find_matching_catch_2()|0;
   $47 = tempRet0;
   __THREW__ = 0;
   invoke_v(643);
   $48 = __THREW__; __THREW__ = 0;
   $49 = $48&1;
   if ($49) {
    $50 = ___cxa_find_matching_catch_3(0|0)|0;
    $51 = tempRet0;
    ___clang_call_terminate($50);
    // unreachable;
   } else {
    ___resumeException($46|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE5tellgEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre$phi4Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp;
 $4 = $0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 __THREW__ = 0;
 invoke_viii(706,($2|0),($1|0),1);
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 L1: do {
  if ($14) {
   $28 = ___cxa_find_matching_catch_3(0|0)|0;
   $29 = tempRet0;
   $$0 = $28;$$pre$phi4Z2D = $1;$$pre$phiZ2D = $1;
   label = 8;
  } else {
   $15 = HEAP8[$2>>0]|0;
   $16 = ($15<<24>>24)==(0);
   do {
    if (!($16)) {
     $17 = HEAP32[$1>>2]|0;
     $18 = ((($17)) + -12|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = (($1) + ($19)|0);
     $21 = ((($20)) + 24|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = HEAP32[$22>>2]|0;
     $24 = ((($23)) + 16|0);
     $25 = HEAP32[$24>>2]|0;
     __THREW__ = 0;
     invoke_viiiiii($25|0,($3|0),($22|0),0,0,1,8);
     $26 = __THREW__; __THREW__ = 0;
     $27 = $26&1;
     if ($27) {
      $30 = ___cxa_find_matching_catch_3(0|0)|0;
      $31 = tempRet0;
      $$0 = $30;$$pre$phi4Z2D = $1;$$pre$phiZ2D = $1;
      label = 8;
      break L1;
     } else {
      ;HEAP32[$0>>2]=HEAP32[$3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$3+12>>2]|0;
      break;
     }
    }
   } while(0);
  }
 } while(0);
 do {
  if ((label|0) == 8) {
   (___cxa_begin_catch(($$0|0))|0);
   $32 = HEAP32[$$pre$phiZ2D>>2]|0;
   $33 = ((($32)) + -12|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($$pre$phi4Z2D) + ($34)|0);
   __THREW__ = 0;
   invoke_vi(664,($35|0));
   $36 = __THREW__; __THREW__ = 0;
   $37 = $36&1;
   if (!($37)) {
    ___cxa_end_catch();
    break;
   }
   $38 = ___cxa_find_matching_catch_2()|0;
   $39 = tempRet0;
   __THREW__ = 0;
   invoke_v(643);
   $40 = __THREW__; __THREW__ = 0;
   $41 = $40&1;
   if ($41) {
    $42 = ___cxa_find_matching_catch_3(0|0)|0;
    $43 = tempRet0;
    ___clang_call_terminate($42);
    // unreachable;
   } else {
    ___resumeException($38|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE5seekgENS_4fposI11__mbstate_tEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$2 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 16|0;
 $2 = sp + 32|0;
 $3 = sp;
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + -12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($0) + ($6)|0);
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & -3;
 __THREW__ = 0;
 invoke_vii(662,($7|0),($10|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 L1: do {
  if ($12) {
   label = 7;
  } else {
   __THREW__ = 0;
   invoke_viii(706,($2|0),($0|0),1);
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    label = 7;
   } else {
    $15 = HEAP8[$2>>0]|0;
    $16 = ($15<<24>>24)==(0);
    do {
     if (!($16)) {
      $17 = HEAP32[$0>>2]|0;
      $18 = ((($17)) + -12|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = (($0) + ($19)|0);
      $21 = ((($20)) + 24|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = HEAP32[$22>>2]|0;
      $24 = ((($23)) + 20|0);
      $25 = HEAP32[$24>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
      invoke_viiii($25|0,($3|0),($22|0),($$byval_copy|0),8);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       $51 = ___cxa_find_matching_catch_3(0|0)|0;
       $52 = tempRet0;
       $$1 = $51;
      } else {
       $28 = ((($3)) + 8|0);
       $29 = $28;
       $30 = $29;
       $31 = HEAP32[$30>>2]|0;
       $32 = (($29) + 4)|0;
       $33 = $32;
       $34 = HEAP32[$33>>2]|0;
       $35 = ($31|0)==(-1);
       $36 = ($34|0)==(-1);
       $37 = $35 & $36;
       if (!($37)) {
        break;
       }
       $38 = HEAP32[$0>>2]|0;
       $39 = ((($38)) + -12|0);
       $40 = HEAP32[$39>>2]|0;
       $41 = (($0) + ($40)|0);
       $42 = ((($41)) + 16|0);
       $43 = HEAP32[$42>>2]|0;
       $44 = $43 | 4;
       __THREW__ = 0;
       invoke_vii(662,($41|0),($44|0));
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if (!($46)) {
        break;
       }
       $49 = ___cxa_find_matching_catch_3(0|0)|0;
       $50 = tempRet0;
       $$1 = $49;
      }
      $$2 = $$1;
      label = 12;
      break L1;
     }
    } while(0);
   }
  }
 } while(0);
 if ((label|0) == 7) {
  $47 = ___cxa_find_matching_catch_3(0|0)|0;
  $48 = tempRet0;
  $$2 = $47;
  label = 12;
 }
 do {
  if ((label|0) == 12) {
   (___cxa_begin_catch(($$2|0))|0);
   $53 = HEAP32[$0>>2]|0;
   $54 = ((($53)) + -12|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (($0) + ($55)|0);
   __THREW__ = 0;
   invoke_vi(664,($56|0));
   $57 = __THREW__; __THREW__ = 0;
   $58 = $57&1;
   if (!($58)) {
    ___cxa_end_catch();
    break;
   }
   $59 = ___cxa_find_matching_catch_2()|0;
   $60 = tempRet0;
   __THREW__ = 0;
   invoke_v(643);
   $61 = __THREW__; __THREW__ = 0;
   $62 = $61&1;
   if ($62) {
    $63 = ___cxa_find_matching_catch_3(0|0)|0;
    $64 = tempRet0;
    ___clang_call_terminate($63);
    // unreachable;
   } else {
    ___resumeException($59|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE5seekgExNS_8ios_base7seekdirE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$1 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 16|0;
 $5 = sp;
 $6 = HEAP32[$0>>2]|0;
 $7 = ((($6)) + -12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($0) + ($8)|0);
 $10 = ((($9)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & -3;
 __THREW__ = 0;
 invoke_vii(662,($9|0),($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 L1: do {
  if ($14) {
   label = 7;
  } else {
   __THREW__ = 0;
   invoke_viii(706,($4|0),($0|0),1);
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   if ($16) {
    label = 7;
   } else {
    $17 = HEAP8[$4>>0]|0;
    $18 = ($17<<24>>24)==(0);
    do {
     if (!($18)) {
      $19 = HEAP32[$0>>2]|0;
      $20 = ((($19)) + -12|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($0) + ($21)|0);
      $23 = ((($22)) + 24|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = HEAP32[$24>>2]|0;
      $26 = ((($25)) + 16|0);
      $27 = HEAP32[$26>>2]|0;
      __THREW__ = 0;
      invoke_viiiiii($27|0,($5|0),($24|0),($1|0),($2|0),($3|0),8);
      $28 = __THREW__; __THREW__ = 0;
      $29 = $28&1;
      if ($29) {
       $53 = ___cxa_find_matching_catch_3(0|0)|0;
       $54 = tempRet0;
       $$1 = $53;
      } else {
       $30 = ((($5)) + 8|0);
       $31 = $30;
       $32 = $31;
       $33 = HEAP32[$32>>2]|0;
       $34 = (($31) + 4)|0;
       $35 = $34;
       $36 = HEAP32[$35>>2]|0;
       $37 = ($33|0)==(-1);
       $38 = ($36|0)==(-1);
       $39 = $37 & $38;
       if (!($39)) {
        break;
       }
       $40 = HEAP32[$0>>2]|0;
       $41 = ((($40)) + -12|0);
       $42 = HEAP32[$41>>2]|0;
       $43 = (($0) + ($42)|0);
       $44 = ((($43)) + 16|0);
       $45 = HEAP32[$44>>2]|0;
       $46 = $45 | 4;
       __THREW__ = 0;
       invoke_vii(662,($43|0),($46|0));
       $47 = __THREW__; __THREW__ = 0;
       $48 = $47&1;
       if (!($48)) {
        break;
       }
       $51 = ___cxa_find_matching_catch_3(0|0)|0;
       $52 = tempRet0;
       $$1 = $51;
      }
      $$2 = $$1;
      label = 12;
      break L1;
     }
    } while(0);
   }
  }
 } while(0);
 if ((label|0) == 7) {
  $49 = ___cxa_find_matching_catch_3(0|0)|0;
  $50 = tempRet0;
  $$2 = $49;
  label = 12;
 }
 do {
  if ((label|0) == 12) {
   (___cxa_begin_catch(($$2|0))|0);
   $55 = HEAP32[$0>>2]|0;
   $56 = ((($55)) + -12|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($0) + ($57)|0);
   __THREW__ = 0;
   invoke_vi(664,($58|0));
   $59 = __THREW__; __THREW__ = 0;
   $60 = $59&1;
   if (!($60)) {
    ___cxa_end_catch();
    break;
   }
   $61 = ___cxa_find_matching_catch_2()|0;
   $62 = tempRet0;
   __THREW__ = 0;
   invoke_v(643);
   $63 = __THREW__; __THREW__ = 0;
   $64 = $63&1;
   if ($64) {
    $65 = ___cxa_find_matching_catch_3(0|0)|0;
    $66 = tempRet0;
    ___clang_call_terminate($65);
    // unreachable;
   } else {
    ___resumeException($61|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE5flushEv($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($0) + ($4)|0);
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 L1: do {
  if (!($8)) {
   __THREW__ = 0;
   invoke_vii(758,($1|0),($0|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   L3: do {
    if ($10) {
     $35 = ___cxa_find_matching_catch_3(0|0)|0;
     $36 = tempRet0;
     $$0 = $35;
    } else {
     $11 = HEAP8[$1>>0]|0;
     $12 = ($11<<24>>24)==(0);
     do {
      if (!($12)) {
       $13 = HEAP32[$0>>2]|0;
       $14 = ((($13)) + -12|0);
       $15 = HEAP32[$14>>2]|0;
       $16 = (($0) + ($15)|0);
       $17 = ((($16)) + 24|0);
       $18 = HEAP32[$17>>2]|0;
       $19 = HEAP32[$18>>2]|0;
       $20 = ((($19)) + 24|0);
       $21 = HEAP32[$20>>2]|0;
       __THREW__ = 0;
       $22 = (invoke_ii($21|0,($18|0))|0);
       $23 = __THREW__; __THREW__ = 0;
       $24 = $23&1;
       if (!($24)) {
        $25 = ($22|0)==(-1);
        if (!($25)) {
         break;
        }
        $26 = HEAP32[$0>>2]|0;
        $27 = ((($26)) + -12|0);
        $28 = HEAP32[$27>>2]|0;
        $29 = (($0) + ($28)|0);
        $30 = ((($29)) + 16|0);
        $31 = HEAP32[$30>>2]|0;
        $32 = $31 | 1;
        __THREW__ = 0;
        invoke_vii(662,($29|0),($32|0));
        $33 = __THREW__; __THREW__ = 0;
        $34 = $33&1;
        if (!($34)) {
         break;
        }
       }
       $37 = ___cxa_find_matching_catch_3(0|0)|0;
       $38 = tempRet0;
       __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($1);
       $$0 = $37;
       break L3;
      }
     } while(0);
     __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($1);
     break L1;
    }
   } while(0);
   (___cxa_begin_catch(($$0|0))|0);
   $39 = HEAP32[$0>>2]|0;
   $40 = ((($39)) + -12|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (($0) + ($41)|0);
   __THREW__ = 0;
   invoke_vi(664,($42|0));
   $43 = __THREW__; __THREW__ = 0;
   $44 = $43&1;
   if (!($44)) {
    ___cxa_end_catch();
    break;
   }
   $45 = ___cxa_find_matching_catch_2()|0;
   $46 = tempRet0;
   __THREW__ = 0;
   invoke_v(643);
   $47 = __THREW__; __THREW__ = 0;
   $48 = $47&1;
   if ($48) {
    $49 = ___cxa_find_matching_catch_3(0|0)|0;
    $50 = tempRet0;
    ___clang_call_terminate($49);
    // unreachable;
   } else {
    ___resumeException($45|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0] = 0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + -12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($1) + ($5)|0);
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = ((($6)) + 72|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   (__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE5flushEv($11)|0);
  }
  HEAP8[$0>>0] = 1;
 }
 return;
}
function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + -12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($2) + ($5)|0);
 $7 = ((($6)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 do {
  if (!($9)) {
   $10 = ((($6)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0);
   if ($12) {
    $13 = ((($6)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $14 & 8192;
    $16 = ($15|0)==(0);
    if (!($16)) {
     $17 = (__ZSt18uncaught_exceptionv()|0);
     if (!($17)) {
      $18 = HEAP32[$1>>2]|0;
      $19 = HEAP32[$18>>2]|0;
      $20 = ((($19)) + -12|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($18) + ($21)|0);
      $23 = ((($22)) + 24|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = HEAP32[$24>>2]|0;
      $26 = ((($25)) + 24|0);
      $27 = HEAP32[$26>>2]|0;
      __THREW__ = 0;
      $28 = (invoke_ii($27|0,($24|0))|0);
      $29 = __THREW__; __THREW__ = 0;
      $30 = $29&1;
      if (!($30)) {
       $31 = ($28|0)==(-1);
       if (!($31)) {
        break;
       }
       $32 = HEAP32[$1>>2]|0;
       $33 = HEAP32[$32>>2]|0;
       $34 = ((($33)) + -12|0);
       $35 = HEAP32[$34>>2]|0;
       $36 = (($32) + ($35)|0);
       $37 = ((($36)) + 16|0);
       $38 = HEAP32[$37>>2]|0;
       $39 = $38 | 1;
       __THREW__ = 0;
       invoke_vii(662,($36|0),($39|0));
       $40 = __THREW__; __THREW__ = 0;
       $41 = $40&1;
       if (!($41)) {
        break;
       }
      }
      $42 = ___cxa_find_matching_catch_3(0|0)|0;
      $43 = tempRet0;
      (___cxa_begin_catch(($42|0))|0);
      __THREW__ = 0;
      invoke_v(643);
      $44 = __THREW__; __THREW__ = 0;
      $45 = $44&1;
      if ($45) {
       $46 = ___cxa_find_matching_catch_3(0|0)|0;
       $47 = tempRet0;
       ___clang_call_terminate($46);
       // unreachable;
      }
     }
    }
   }
  }
 } while(0);
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$1 = 0, $$byval_copy = 0, $$pre$phi18Z2D = 0, $$pre$phi20Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0;
 var $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = sp + 8|0;
 $5 = sp;
 __THREW__ = 0;
 invoke_vii(657,($4|0),($0|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 L1: do {
  if ($7) {
   $58 = ___cxa_find_matching_catch_3(0|0)|0;
   $59 = tempRet0;
   $$1 = $58;$$pre$phi18Z2D = $0;$$pre$phiZ2D = $0;
   label = 19;
  } else {
   $8 = HEAP8[$4>>0]|0;
   $9 = ($8<<24>>24)==(0);
   do {
    if (!($9)) {
     $10 = HEAP32[$0>>2]|0;
     $11 = ((($10)) + -12|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = (($0) + ($12)|0);
     $14 = (__ZNKSt3__28ios_base6getlocEv($13)|0);
     HEAP32[$5>>2] = $14;
     __THREW__ = 0;
     $15 = (invoke_iii(659,($5|0),(40768|0))|0);
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if ($17) {
      $60 = ___cxa_find_matching_catch_3(0|0)|0;
      $61 = tempRet0;
      __ZNSt3__26localeD2Ev($5);
      $$0 = $60;
     } else {
      __ZNSt3__26localeD2Ev($5);
      $18 = HEAP32[$0>>2]|0;
      $19 = ((($18)) + -12|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = (($0) + ($20)|0);
      $22 = ((($21)) + 24|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = ((($21)) + 76|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = ($25|0)==(-1);
      do {
       if ($26) {
        $27 = (__ZNKSt3__28ios_base6getlocEv($21)|0);
        HEAP32[$3>>2] = $27;
        __THREW__ = 0;
        $28 = (invoke_iii(659,($3|0),(40712|0))|0);
        $29 = __THREW__; __THREW__ = 0;
        $30 = $29&1;
        if (!($30)) {
         $31 = HEAP32[$28>>2]|0;
         $32 = ((($31)) + 28|0);
         $33 = HEAP32[$32>>2]|0;
         __THREW__ = 0;
         $34 = (invoke_iii($33|0,($28|0),32)|0);
         $35 = __THREW__; __THREW__ = 0;
         $36 = $35&1;
         if (!($36)) {
          __ZNSt3__26localeD2Ev($3);
          $39 = $34 << 24 >> 24;
          HEAP32[$24>>2] = $39;
          $$pre$phi20Z2D = $21;$41 = $39;
          label = 10;
          break;
         }
        }
        $37 = ___cxa_find_matching_catch_3(0|0)|0;
        $38 = tempRet0;
        __ZNSt3__26localeD2Ev($3);
        $eh$lpad$body$indexZ2D = $37;
       } else {
        $$pre$phi20Z2D = $21;$41 = $25;
        label = 10;
       }
      } while(0);
      if ((label|0) == 10) {
       $40 = $41&255;
       $42 = HEAP32[$15>>2]|0;
       $43 = ((($42)) + 16|0);
       $44 = HEAP32[$43>>2]|0;
       HEAP32[$2>>2] = $23;
       __THREW__ = 0;
       ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;
       $45 = (invoke_iiiiii($44|0,($15|0),($$byval_copy|0),($$pre$phi20Z2D|0),($40|0),($1|0))|0);
       $46 = __THREW__; __THREW__ = 0;
       $47 = $46&1;
       if (!($47)) {
        $48 = ($45|0)==(0|0);
        if (!($48)) {
         break;
        }
        $49 = HEAP32[$0>>2]|0;
        $50 = ((($49)) + -12|0);
        $51 = HEAP32[$50>>2]|0;
        $52 = (($0) + ($51)|0);
        $53 = ((($52)) + 16|0);
        $54 = HEAP32[$53>>2]|0;
        $55 = $54 | 5;
        __THREW__ = 0;
        invoke_vii(662,($52|0),($55|0));
        $56 = __THREW__; __THREW__ = 0;
        $57 = $56&1;
        if (!($57)) {
         break;
        }
       }
       $62 = ___cxa_find_matching_catch_3(0|0)|0;
       $63 = tempRet0;
       $eh$lpad$body$indexZ2D = $62;
      }
      $$0 = $eh$lpad$body$indexZ2D;
     }
     __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($4);
     $$1 = $$0;$$pre$phi18Z2D = $0;$$pre$phiZ2D = $0;
     label = 19;
     break L1;
    }
   } while(0);
   __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($4);
  }
 } while(0);
 do {
  if ((label|0) == 19) {
   (___cxa_begin_catch(($$1|0))|0);
   $64 = HEAP32[$$pre$phiZ2D>>2]|0;
   $65 = ((($64)) + -12|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = (($$pre$phi18Z2D) + ($66)|0);
   __THREW__ = 0;
   invoke_vi(664,($67|0));
   $68 = __THREW__; __THREW__ = 0;
   $69 = $68&1;
   if (!($69)) {
    ___cxa_end_catch();
    break;
   }
   $70 = ___cxa_find_matching_catch_2()|0;
   $71 = tempRet0;
   __THREW__ = 0;
   invoke_v(643);
   $72 = __THREW__; __THREW__ = 0;
   $73 = $72&1;
   if ($73) {
    $74 = ___cxa_find_matching_catch_3(0|0)|0;
    $75 = tempRet0;
    ___clang_call_terminate($74);
    // unreachable;
   } else {
    ___resumeException($70|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$1 = 0, $$byval_copy = 0, $$pre$phi11Z2D = 0, $$pre$phi13Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0;
 var $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = sp + 8|0;
 $5 = sp;
 __THREW__ = 0;
 invoke_vii(657,($4|0),($0|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 L1: do {
  if ($7) {
   $58 = ___cxa_find_matching_catch_3(0|0)|0;
   $59 = tempRet0;
   $$1 = $58;$$pre$phi11Z2D = $0;$$pre$phiZ2D = $0;
   label = 19;
  } else {
   $8 = HEAP8[$4>>0]|0;
   $9 = ($8<<24>>24)==(0);
   do {
    if (!($9)) {
     $10 = HEAP32[$0>>2]|0;
     $11 = ((($10)) + -12|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = (($0) + ($12)|0);
     $14 = (__ZNKSt3__28ios_base6getlocEv($13)|0);
     HEAP32[$5>>2] = $14;
     __THREW__ = 0;
     $15 = (invoke_iii(659,($5|0),(40768|0))|0);
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if ($17) {
      $60 = ___cxa_find_matching_catch_3(0|0)|0;
      $61 = tempRet0;
      __ZNSt3__26localeD2Ev($5);
      $$0 = $60;
     } else {
      __ZNSt3__26localeD2Ev($5);
      $18 = HEAP32[$0>>2]|0;
      $19 = ((($18)) + -12|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = (($0) + ($20)|0);
      $22 = ((($21)) + 24|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = ((($21)) + 76|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = ($25|0)==(-1);
      do {
       if ($26) {
        $27 = (__ZNKSt3__28ios_base6getlocEv($21)|0);
        HEAP32[$3>>2] = $27;
        __THREW__ = 0;
        $28 = (invoke_iii(659,($3|0),(40712|0))|0);
        $29 = __THREW__; __THREW__ = 0;
        $30 = $29&1;
        if (!($30)) {
         $31 = HEAP32[$28>>2]|0;
         $32 = ((($31)) + 28|0);
         $33 = HEAP32[$32>>2]|0;
         __THREW__ = 0;
         $34 = (invoke_iii($33|0,($28|0),32)|0);
         $35 = __THREW__; __THREW__ = 0;
         $36 = $35&1;
         if (!($36)) {
          __ZNSt3__26localeD2Ev($3);
          $39 = $34 << 24 >> 24;
          HEAP32[$24>>2] = $39;
          $$pre$phi13Z2D = $21;$41 = $39;
          label = 10;
          break;
         }
        }
        $37 = ___cxa_find_matching_catch_3(0|0)|0;
        $38 = tempRet0;
        __ZNSt3__26localeD2Ev($3);
        $eh$lpad$body$indexZ2D = $37;
       } else {
        $$pre$phi13Z2D = $21;$41 = $25;
        label = 10;
       }
      } while(0);
      if ((label|0) == 10) {
       $40 = $41&255;
       $42 = HEAP32[$15>>2]|0;
       $43 = ((($42)) + 24|0);
       $44 = HEAP32[$43>>2]|0;
       HEAP32[$2>>2] = $23;
       __THREW__ = 0;
       ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;
       $45 = (invoke_iiiiii($44|0,($15|0),($$byval_copy|0),($$pre$phi13Z2D|0),($40|0),($1|0))|0);
       $46 = __THREW__; __THREW__ = 0;
       $47 = $46&1;
       if (!($47)) {
        $48 = ($45|0)==(0|0);
        if (!($48)) {
         break;
        }
        $49 = HEAP32[$0>>2]|0;
        $50 = ((($49)) + -12|0);
        $51 = HEAP32[$50>>2]|0;
        $52 = (($0) + ($51)|0);
        $53 = ((($52)) + 16|0);
        $54 = HEAP32[$53>>2]|0;
        $55 = $54 | 5;
        __THREW__ = 0;
        invoke_vii(662,($52|0),($55|0));
        $56 = __THREW__; __THREW__ = 0;
        $57 = $56&1;
        if (!($57)) {
         break;
        }
       }
       $62 = ___cxa_find_matching_catch_3(0|0)|0;
       $63 = tempRet0;
       $eh$lpad$body$indexZ2D = $62;
      }
      $$0 = $eh$lpad$body$indexZ2D;
     }
     __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($4);
     $$1 = $$0;$$pre$phi11Z2D = $0;$$pre$phiZ2D = $0;
     label = 19;
     break L1;
    }
   } while(0);
   __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($4);
  }
 } while(0);
 do {
  if ((label|0) == 19) {
   (___cxa_begin_catch(($$1|0))|0);
   $64 = HEAP32[$$pre$phiZ2D>>2]|0;
   $65 = ((($64)) + -12|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = (($$pre$phi11Z2D) + ($66)|0);
   __THREW__ = 0;
   invoke_vi(664,($67|0));
   $68 = __THREW__; __THREW__ = 0;
   $69 = $68&1;
   if (!($69)) {
    ___cxa_end_catch();
    break;
   }
   $70 = ___cxa_find_matching_catch_2()|0;
   $71 = tempRet0;
   __THREW__ = 0;
   invoke_v(643);
   $72 = __THREW__; __THREW__ = 0;
   $73 = $72&1;
   if ($73) {
    $74 = ___cxa_find_matching_catch_3(0|0)|0;
    $75 = tempRet0;
    ___clang_call_terminate($74);
    // unreachable;
   } else {
    ___resumeException($70|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $$0 = 0, $$1 = 0, $$byval_copy = 0, $$pre$phi11Z2D = 0, $$pre$phi13Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0;
 var $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = sp + 8|0;
 $5 = sp;
 __THREW__ = 0;
 invoke_vii(657,($4|0),($0|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 L1: do {
  if ($7) {
   $58 = ___cxa_find_matching_catch_3(0|0)|0;
   $59 = tempRet0;
   $$1 = $58;$$pre$phi11Z2D = $0;$$pre$phiZ2D = $0;
   label = 19;
  } else {
   $8 = HEAP8[$4>>0]|0;
   $9 = ($8<<24>>24)==(0);
   do {
    if (!($9)) {
     $10 = HEAP32[$0>>2]|0;
     $11 = ((($10)) + -12|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = (($0) + ($12)|0);
     $14 = (__ZNKSt3__28ios_base6getlocEv($13)|0);
     HEAP32[$5>>2] = $14;
     __THREW__ = 0;
     $15 = (invoke_iii(659,($5|0),(40768|0))|0);
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if ($17) {
      $60 = ___cxa_find_matching_catch_3(0|0)|0;
      $61 = tempRet0;
      __ZNSt3__26localeD2Ev($5);
      $$0 = $60;
     } else {
      __ZNSt3__26localeD2Ev($5);
      $18 = HEAP32[$0>>2]|0;
      $19 = ((($18)) + -12|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = (($0) + ($20)|0);
      $22 = ((($21)) + 24|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = ((($21)) + 76|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = ($25|0)==(-1);
      do {
       if ($26) {
        $27 = (__ZNKSt3__28ios_base6getlocEv($21)|0);
        HEAP32[$3>>2] = $27;
        __THREW__ = 0;
        $28 = (invoke_iii(659,($3|0),(40712|0))|0);
        $29 = __THREW__; __THREW__ = 0;
        $30 = $29&1;
        if (!($30)) {
         $31 = HEAP32[$28>>2]|0;
         $32 = ((($31)) + 28|0);
         $33 = HEAP32[$32>>2]|0;
         __THREW__ = 0;
         $34 = (invoke_iii($33|0,($28|0),32)|0);
         $35 = __THREW__; __THREW__ = 0;
         $36 = $35&1;
         if (!($36)) {
          __ZNSt3__26localeD2Ev($3);
          $39 = $34 << 24 >> 24;
          HEAP32[$24>>2] = $39;
          $$pre$phi13Z2D = $21;$41 = $39;
          label = 10;
          break;
         }
        }
        $37 = ___cxa_find_matching_catch_3(0|0)|0;
        $38 = tempRet0;
        __ZNSt3__26localeD2Ev($3);
        $eh$lpad$body$indexZ2D = $37;
       } else {
        $$pre$phi13Z2D = $21;$41 = $25;
        label = 10;
       }
      } while(0);
      if ((label|0) == 10) {
       $40 = $41&255;
       $42 = HEAP32[$15>>2]|0;
       $43 = ((($42)) + 32|0);
       $44 = HEAP32[$43>>2]|0;
       HEAP32[$2>>2] = $23;
       __THREW__ = 0;
       ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;
       $45 = (invoke_iiiiid($44|0,($15|0),($$byval_copy|0),($$pre$phi13Z2D|0),($40|0),(+$1))|0);
       $46 = __THREW__; __THREW__ = 0;
       $47 = $46&1;
       if (!($47)) {
        $48 = ($45|0)==(0|0);
        if (!($48)) {
         break;
        }
        $49 = HEAP32[$0>>2]|0;
        $50 = ((($49)) + -12|0);
        $51 = HEAP32[$50>>2]|0;
        $52 = (($0) + ($51)|0);
        $53 = ((($52)) + 16|0);
        $54 = HEAP32[$53>>2]|0;
        $55 = $54 | 5;
        __THREW__ = 0;
        invoke_vii(662,($52|0),($55|0));
        $56 = __THREW__; __THREW__ = 0;
        $57 = $56&1;
        if (!($57)) {
         break;
        }
       }
       $62 = ___cxa_find_matching_catch_3(0|0)|0;
       $63 = tempRet0;
       $eh$lpad$body$indexZ2D = $62;
      }
      $$0 = $eh$lpad$body$indexZ2D;
     }
     __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($4);
     $$1 = $$0;$$pre$phi11Z2D = $0;$$pre$phiZ2D = $0;
     label = 19;
     break L1;
    }
   } while(0);
   __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($4);
  }
 } while(0);
 do {
  if ((label|0) == 19) {
   (___cxa_begin_catch(($$1|0))|0);
   $64 = HEAP32[$$pre$phiZ2D>>2]|0;
   $65 = ((($64)) + -12|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = (($$pre$phi11Z2D) + ($66)|0);
   __THREW__ = 0;
   invoke_vi(664,($67|0));
   $68 = __THREW__; __THREW__ = 0;
   $69 = $68&1;
   if (!($69)) {
    ___cxa_end_catch();
    break;
   }
   $70 = ___cxa_find_matching_catch_2()|0;
   $71 = tempRet0;
   __THREW__ = 0;
   invoke_v(643);
   $72 = __THREW__; __THREW__ = 0;
   $73 = $72&1;
   if ($73) {
    $74 = ___cxa_find_matching_catch_3(0|0)|0;
    $75 = tempRet0;
    ___clang_call_terminate($74);
    // unreachable;
   } else {
    ___resumeException($70|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre$phi9Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 __THREW__ = 0;
 invoke_vii(657,($2|0),($0|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L1: do {
  if ($4) {
   $39 = ___cxa_find_matching_catch_3(0|0)|0;
   $40 = tempRet0;
   $$0 = $39;$$pre$phi9Z2D = $0;$$pre$phiZ2D = $0;
   label = 12;
  } else {
   $5 = HEAP8[$2>>0]|0;
   $6 = ($5<<24>>24)==(0);
   do {
    if (!($6)) {
     $7 = HEAP32[$0>>2]|0;
     $8 = ((($7)) + -12|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = (($0) + ($9)|0);
     $11 = ((($10)) + 24|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = $12;
     $14 = ($12|0)==(0);
     if ($14) {
      label = 8;
     } else {
      $15 = ((($13)) + 24|0);
      $16 = HEAP32[$15>>2]|0;
      $17 = ((($13)) + 28|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = ($16|0)==($18|0);
      if (!($19)) {
       $20 = ((($16)) + 1|0);
       HEAP32[$15>>2] = $20;
       HEAP8[$16>>0] = $1;
       break;
      }
      $21 = $12;
      $22 = HEAP32[$21>>2]|0;
      $23 = ((($22)) + 52|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = $1&255;
      __THREW__ = 0;
      $26 = (invoke_iii($24|0,($13|0),($25|0))|0);
      $27 = __THREW__; __THREW__ = 0;
      $28 = $27&1;
      if (!($28)) {
       $29 = ($26|0)==(-1);
       if ($29) {
        label = 8;
       } else {
        break;
       }
      }
     }
     if ((label|0) == 8) {
      $30 = HEAP32[$0>>2]|0;
      $31 = ((($30)) + -12|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($0) + ($32)|0);
      $34 = ((($33)) + 16|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = $35 | 1;
      __THREW__ = 0;
      invoke_vii(662,($33|0),($36|0));
      $37 = __THREW__; __THREW__ = 0;
      $38 = $37&1;
      if (!($38)) {
       break;
      }
     }
     $41 = ___cxa_find_matching_catch_3(0|0)|0;
     $42 = tempRet0;
     __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($2);
     $$0 = $41;$$pre$phi9Z2D = $0;$$pre$phiZ2D = $0;
     label = 12;
     break L1;
    }
   } while(0);
   __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($2);
  }
 } while(0);
 do {
  if ((label|0) == 12) {
   (___cxa_begin_catch(($$0|0))|0);
   $43 = HEAP32[$$pre$phiZ2D>>2]|0;
   $44 = ((($43)) + -12|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($$pre$phi9Z2D) + ($45)|0);
   __THREW__ = 0;
   invoke_vi(664,($46|0));
   $47 = __THREW__; __THREW__ = 0;
   $48 = $47&1;
   if (!($48)) {
    ___cxa_end_catch();
    break;
   }
   $49 = ___cxa_find_matching_catch_2()|0;
   $50 = tempRet0;
   __THREW__ = 0;
   invoke_v(643);
   $51 = __THREW__; __THREW__ = 0;
   $52 = $51&1;
   if ($52) {
    $53 = ___cxa_find_matching_catch_3(0|0)|0;
    $54 = tempRet0;
    ___clang_call_terminate($53);
    // unreachable;
   } else {
    ___resumeException($49|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5writeEPKci($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$pre$phi9Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 __THREW__ = 0;
 invoke_vii(657,($3|0),($0|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 L1: do {
  if ($5) {
   $31 = ___cxa_find_matching_catch_3(0|0)|0;
   $32 = tempRet0;
   $$0 = $31;$$pre$phi9Z2D = $0;$$pre$phiZ2D = $0;
   label = 8;
  } else {
   $6 = HEAP8[$3>>0]|0;
   $7 = ($6<<24>>24)!=(0);
   $8 = ($2|0)!=(0);
   $or$cond = $8 & $7;
   do {
    if ($or$cond) {
     $9 = HEAP32[$0>>2]|0;
     $10 = ((($9)) + -12|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = (($0) + ($11)|0);
     $13 = ((($12)) + 24|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = HEAP32[$14>>2]|0;
     $16 = ((($15)) + 48|0);
     $17 = HEAP32[$16>>2]|0;
     __THREW__ = 0;
     $18 = (invoke_iiii($17|0,($14|0),($1|0),($2|0))|0);
     $19 = __THREW__; __THREW__ = 0;
     $20 = $19&1;
     if (!($20)) {
      $21 = ($18|0)==($2|0);
      if ($21) {
       break;
      }
      $22 = HEAP32[$0>>2]|0;
      $23 = ((($22)) + -12|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = (($0) + ($24)|0);
      $26 = ((($25)) + 16|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = $27 | 1;
      __THREW__ = 0;
      invoke_vii(662,($25|0),($28|0));
      $29 = __THREW__; __THREW__ = 0;
      $30 = $29&1;
      if (!($30)) {
       break;
      }
     }
     $33 = ___cxa_find_matching_catch_3(0|0)|0;
     $34 = tempRet0;
     __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($3);
     $$0 = $33;$$pre$phi9Z2D = $0;$$pre$phiZ2D = $0;
     label = 8;
     break L1;
    }
   } while(0);
   __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($3);
  }
 } while(0);
 do {
  if ((label|0) == 8) {
   (___cxa_begin_catch(($$0|0))|0);
   $35 = HEAP32[$$pre$phiZ2D>>2]|0;
   $36 = ((($35)) + -12|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($$pre$phi9Z2D) + ($37)|0);
   __THREW__ = 0;
   invoke_vi(664,($38|0));
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if (!($40)) {
    ___cxa_end_catch();
    break;
   }
   $41 = ___cxa_find_matching_catch_2()|0;
   $42 = tempRet0;
   __THREW__ = 0;
   invoke_v(643);
   $43 = __THREW__; __THREW__ = 0;
   $44 = $43&1;
   if ($44) {
    $45 = ___cxa_find_matching_catch_3(0|0)|0;
    $46 = tempRet0;
    ___clang_call_terminate($45);
    // unreachable;
   } else {
    ___resumeException($41|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($0|0);
}
function __GLOBAL__I_000101() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28ios_base4InitC2Ev(0);
 (___cxa_atexit((759|0),(44983|0),(___dso_handle|0))|0);
 return;
}
function __GLOBAL__sub_I_iostream_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__28ios_base4InitC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[2954]|0;
 __ZNSt3__210__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(40344,$1,40400);
 HEAP32[9916] = (15528);
 HEAP32[(39672)>>2] = (15548);
 HEAP32[(39668)>>2] = 0;
 __THREW__ = 0;
 invoke_vii(649,((39672)|0),(40344|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev((39672));
  ___resumeException($4|0);
  // unreachable;
 }
 HEAP32[(39744)>>2] = 0;
 HEAP32[(39748)>>2] = -1;
 __ZNSt3__210__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(40408,$1,40464);
 HEAP32[9938] = (15568);
 HEAP32[(39760)>>2] = (15588);
 HEAP32[(39756)>>2] = 0;
 __THREW__ = 0;
 invoke_vii(649,((39760)|0),(40408|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch_2()|0;
  $9 = tempRet0;
  __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev((39760));
  ___resumeException($8|0);
  // unreachable;
 }
 HEAP32[(39832)>>2] = 0;
 HEAP32[(39836)>>2] = -1;
 $10 = HEAP32[2895]|0;
 __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(40472,$10,40520);
 HEAP32[9960] = (15608);
 HEAP32[(39844)>>2] = (15628);
 __THREW__ = 0;
 invoke_vii(649,((39844)|0),(40472|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev((39844));
  ___resumeException($13|0);
  // unreachable;
 }
 HEAP32[(39916)>>2] = 0;
 HEAP32[(39920)>>2] = -1;
 __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(40528,$10,40576);
 HEAP32[9981] = (15648);
 HEAP32[(39928)>>2] = (15668);
 __THREW__ = 0;
 invoke_vii(649,((39928)|0),(40528|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if ($16) {
  $17 = ___cxa_find_matching_catch_2()|0;
  $18 = tempRet0;
  __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev((39928));
  ___resumeException($17|0);
  // unreachable;
 }
 HEAP32[(40000)>>2] = 0;
 HEAP32[(40004)>>2] = -1;
 $19 = HEAP32[2925]|0;
 __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(40584,$19,40632);
 HEAP32[10002] = (15608);
 HEAP32[(40012)>>2] = (15628);
 __THREW__ = 0;
 invoke_vii(649,((40012)|0),(40584|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch_2()|0;
  $23 = tempRet0;
  __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev((40012));
  ___resumeException($22|0);
  // unreachable;
 }
 HEAP32[(40084)>>2] = 0;
 HEAP32[(40088)>>2] = -1;
 $24 = HEAP32[10002]|0;
 $25 = ((($24)) + -12|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (40008 + ($26)|0);
 $28 = ((($27)) + 24|0);
 $29 = HEAP32[$28>>2]|0;
 HEAP32[10044] = (15608);
 HEAP32[(40180)>>2] = (15628);
 __THREW__ = 0;
 invoke_vii(649,((40180)|0),($29|0));
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 if ($31) {
  $32 = ___cxa_find_matching_catch_2()|0;
  $33 = tempRet0;
  __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev((40180));
  ___resumeException($32|0);
  // unreachable;
 }
 HEAP32[(40252)>>2] = 0;
 HEAP32[(40256)>>2] = -1;
 __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(40640,$19,40688);
 HEAP32[10023] = (15648);
 HEAP32[(40096)>>2] = (15668);
 __THREW__ = 0;
 invoke_vii(649,((40096)|0),(40640|0));
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $36 = ___cxa_find_matching_catch_2()|0;
  $37 = tempRet0;
  __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev((40096));
  ___resumeException($36|0);
  // unreachable;
 }
 HEAP32[(40168)>>2] = 0;
 HEAP32[(40172)>>2] = -1;
 $38 = HEAP32[10023]|0;
 $39 = ((($38)) + -12|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (40092 + ($40)|0);
 $42 = ((($41)) + 24|0);
 $43 = HEAP32[$42>>2]|0;
 HEAP32[10065] = (15648);
 HEAP32[(40264)>>2] = (15668);
 __THREW__ = 0;
 invoke_vii(649,((40264)|0),($43|0));
 $44 = __THREW__; __THREW__ = 0;
 $45 = $44&1;
 if ($45) {
  $46 = ___cxa_find_matching_catch_2()|0;
  $47 = tempRet0;
  __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev((40264));
  ___resumeException($46|0);
  // unreachable;
 } else {
  HEAP32[(40336)>>2] = 0;
  HEAP32[(40340)>>2] = -1;
  $48 = HEAP32[9916]|0;
  $49 = ((($48)) + -12|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (39664 + ($50)|0);
  $52 = ((($51)) + 72|0);
  HEAP32[$52>>2] = 39840;
  $53 = HEAP32[9938]|0;
  $54 = ((($53)) + -12|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (39752 + ($55)|0);
  $57 = ((($56)) + 72|0);
  HEAP32[$57>>2] = 39924;
  $58 = HEAP32[10002]|0;
  $59 = ((($58)) + -12|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (40008 + ($60)|0);
  $62 = ((($61)) + 4|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $63 | 8192;
  HEAP32[$62>>2] = $64;
  $65 = HEAP32[10023]|0;
  $66 = ((($65)) + -12|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (40092 + ($67)|0);
  $69 = ((($68)) + 4|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = $70 | 8192;
  HEAP32[$69>>2] = $71;
  $72 = HEAP32[10002]|0;
  $73 = ((($72)) + -12|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (40008 + ($74)|0);
  $76 = ((($75)) + 72|0);
  HEAP32[$76>>2] = 39840;
  $77 = HEAP32[10023]|0;
  $78 = ((($77)) + -12|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (40092 + ($79)|0);
  $81 = ((($80)) + 72|0);
  HEAP32[$81>>2] = 39924;
  return;
 }
}
function __ZNSt3__28ios_base4InitD2Ev($0) {
 $0 = $0|0;
 var $$sink$index = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 (invoke_ii(688,(39840|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  label = 6;
 } else {
  __THREW__ = 0;
  (invoke_ii(760,(39924|0))|0);
  $3 = __THREW__; __THREW__ = 0;
  $4 = $3&1;
  if ($4) {
   label = 6;
  } else {
   __THREW__ = 0;
   (invoke_ii(688,(40176|0))|0);
   $5 = __THREW__; __THREW__ = 0;
   $6 = $5&1;
   if (!($6)) {
    __THREW__ = 0;
    (invoke_ii(760,(40260|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if (!($8)) {
     return;
    }
   }
   $11 = ___cxa_find_matching_catch_3(0|0)|0;
   $12 = tempRet0;
   $$sink$index = $11;
  }
 }
 if ((label|0) == 6) {
  $9 = ___cxa_find_matching_catch_3(0|0)|0;
  $10 = tempRet0;
  $$sink$index = $9;
 }
 ___clang_call_terminate($$sink$index);
 // unreachable;
}
function __ZNSt3__210__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 4|0;
 $4 = sp;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($0);
 HEAP32[$0>>2] = (15932);
 $5 = ((($0)) + 32|0);
 HEAP32[$5>>2] = $1;
 $6 = ((($0)) + 40|0);
 HEAP32[$6>>2] = $2;
 $7 = ((($0)) + 48|0);
 HEAP32[$7>>2] = -1;
 $8 = ((($0)) + 52|0);
 HEAP8[$8>>0] = 0;
 $9 = ((($0)) + 4|0);
 __ZNSt3__26localeC2ERKS0_($3,$9);
 $10 = HEAP32[$3>>2]|0;
 HEAP32[$4>>2] = $10;
 __THREW__ = 0;
 invoke_vii(357,($0|0),($4|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  __ZNSt3__26localeD2Ev($4);
  __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0);
  ___resumeException($13|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($4);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__210__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 4|0;
 $4 = sp;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev($0);
 HEAP32[$0>>2] = (15868);
 $5 = ((($0)) + 32|0);
 HEAP32[$5>>2] = $1;
 $6 = ((($0)) + 40|0);
 HEAP32[$6>>2] = $2;
 $7 = ((($0)) + 48|0);
 HEAP32[$7>>2] = -1;
 $8 = ((($0)) + 52|0);
 HEAP8[$8>>0] = 0;
 $9 = ((($0)) + 4|0);
 __ZNSt3__26localeC2ERKS0_($3,$9);
 $10 = HEAP32[$3>>2]|0;
 HEAP32[$4>>2] = $10;
 __THREW__ = 0;
 invoke_vii(352,($0|0),($4|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  __ZNSt3__26localeD2Ev($4);
  __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($0);
  ___resumeException($13|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($4);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 4|0;
 $4 = sp;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($0);
 HEAP32[$0>>2] = (15804);
 $5 = ((($0)) + 32|0);
 HEAP32[$5>>2] = $1;
 $6 = ((($0)) + 4|0);
 __ZNSt3__26localeC2ERKS0_($3,$6);
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$4>>2] = $7;
 __THREW__ = 0;
 $8 = (invoke_iii(659,($4|0),(42504|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $19 = ___cxa_find_matching_catch_2()|0;
  $20 = tempRet0;
  __ZNSt3__26localeD2Ev($4);
  __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0);
  ___resumeException($19|0);
  // unreachable;
 } else {
  $11 = ((($0)) + 36|0);
  __ZNSt3__26localeD2Ev($4);
  HEAP32[$11>>2] = $8;
  $12 = ((($0)) + 40|0);
  HEAP32[$12>>2] = $2;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$8>>2]|0;
  $15 = ((($14)) + 28|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (FUNCTION_TABLE_ii[$16 & 1023]($8)|0);
  $18 = $17&1;
  HEAP8[$13>>0] = $18;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 4|0;
 $4 = sp;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev($0);
 HEAP32[$0>>2] = (15740);
 $5 = ((($0)) + 32|0);
 HEAP32[$5>>2] = $1;
 $6 = ((($0)) + 4|0);
 __ZNSt3__26localeC2ERKS0_($3,$6);
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$4>>2] = $7;
 __THREW__ = 0;
 $8 = (invoke_iii(659,($4|0),(42512|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $19 = ___cxa_find_matching_catch_2()|0;
  $20 = tempRet0;
  __ZNSt3__26localeD2Ev($4);
  __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($0);
  ___resumeException($19|0);
  // unreachable;
 } else {
  $11 = ((($0)) + 36|0);
  __ZNSt3__26localeD2Ev($4);
  HEAP32[$11>>2] = $8;
  $12 = ((($0)) + 40|0);
  HEAP32[$12>>2] = $2;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$8>>2]|0;
  $15 = ((($14)) + 28|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (FUNCTION_TABLE_ii[$16 & 1023]($8)|0);
  $18 = $17&1;
  HEAP8[$13>>0] = $18;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__211__stdoutbufIwED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 (FUNCTION_TABLE_ii[$4 & 1023]($0)|0);
 $5 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,42512)|0);
 $6 = ((($0)) + 36|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$5>>2]|0;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 1023]($5)|0);
 $11 = ((($0)) + 44|0);
 $12 = $10&1;
 HEAP8[$11>>0] = $12;
 return;
}
function __ZNSt3__211__stdoutbufIwE4syncEv($0) {
 $0 = $0|0;
 var $$10 = 0, $$2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = sp;
 $3 = ((($0)) + 36|0);
 $4 = ((($0)) + 40|0);
 $5 = ((($1)) + 8|0);
 $6 = $1;
 $7 = ((($0)) + 32|0);
 L1: while(1) {
  $8 = HEAP32[$3>>2]|0;
  $9 = HEAP32[$4>>2]|0;
  $10 = HEAP32[$8>>2]|0;
  $11 = ((($10)) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (FUNCTION_TABLE_iiiiii[$12 & 1023]($8,$9,$1,$5,$2)|0);
  $14 = HEAP32[$2>>2]|0;
  $15 = (($14) - ($6))|0;
  $16 = HEAP32[$7>>2]|0;
  $17 = (_fwrite($1,1,$15,$16)|0);
  $18 = ($17|0)==($15|0);
  if (!($18)) {
   $$2 = -1;
   break;
  }
  switch ($13|0) {
  case 1:  {
   break;
  }
  case 2:  {
   $$2 = -1;
   break L1;
   break;
  }
  default: {
   label = 4;
   break L1;
  }
  }
 }
 if ((label|0) == 4) {
  $19 = HEAP32[$7>>2]|0;
  $20 = (_fflush($19)|0);
  $not$ = ($20|0)!=(0);
  $$10 = $not$ << 31 >> 31;
  $$2 = $$10;
 }
 STACKTOP = sp;return ($$2|0);
}
function __ZNSt3__211__stdoutbufIwE6xsputnEPKwi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$010 = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 44|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 L1: do {
  if ($5) {
   $$0 = 0;$$011 = $1;
   while(1) {
    $9 = ($$0|0)<($2|0);
    if (!($9)) {
     $$010 = $$0;
     break L1;
    }
    $10 = HEAP32[$0>>2]|0;
    $11 = ((($10)) + 52|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = HEAP32[$$011>>2]|0;
    $14 = (FUNCTION_TABLE_iii[$12 & 1023]($0,$13)|0);
    $15 = ($14|0)==(-1);
    if ($15) {
     $$010 = $$0;
     break L1;
    }
    $16 = (($$0) + 1)|0;
    $17 = ((($$011)) + 4|0);
    $$0 = $16;$$011 = $17;
   }
  } else {
   $6 = ((($0)) + 32|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (_fwrite($1,4,$2,$7)|0);
   $$010 = $8;
  }
 } while(0);
 return ($$010|0);
}
function __ZNSt3__211__stdoutbufIwE8overflowEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i = 0, $$032 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 $6 = ($1|0)==(-1);
 do {
  if ($6) {
   label = 14;
  } else {
   HEAP32[$3>>2] = $1;
   $7 = ((($0)) + 44|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = ($8<<24>>24)==(0);
   if (!($9)) {
    $10 = ((($0)) + 32|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (_fwrite($3,4,1,$11)|0);
    $13 = ($12|0)==(1);
    if ($13) {
     label = 14;
     break;
    } else {
     $$4 = -1;
     break;
    }
   }
   HEAP32[$4>>2] = $2;
   $14 = ((($3)) + 4|0);
   $15 = ((($0)) + 36|0);
   $16 = ((($0)) + 40|0);
   $17 = ((($2)) + 8|0);
   $18 = $2;
   $19 = ((($0)) + 32|0);
   $$032 = $3;
   while(1) {
    $20 = HEAP32[$15>>2]|0;
    $21 = HEAP32[$16>>2]|0;
    $22 = HEAP32[$20>>2]|0;
    $23 = ((($22)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (FUNCTION_TABLE_iiiiiiiii[$24 & 1023]($20,$21,$$032,$14,$5,$2,$17,$4)|0);
    $26 = HEAP32[$5>>2]|0;
    $27 = ($26|0)==($$032|0);
    if ($27) {
     label = 13;
     break;
    }
    $28 = ($25|0)==(3);
    if ($28) {
     label = 7;
     break;
    }
    $32 = ($25|0)==(1);
    $33 = $25 | 1;
    $34 = ($33|0)==(1);
    if (!($34)) {
     label = 13;
     break;
    }
    $35 = HEAP32[$4>>2]|0;
    $36 = (($35) - ($18))|0;
    $37 = HEAP32[$19>>2]|0;
    $38 = (_fwrite($2,1,$36,$37)|0);
    $39 = ($38|0)==($36|0);
    if (!($39)) {
     label = 13;
     break;
    }
    $40 = HEAP32[$5>>2]|0;
    if ($32) {
     $$032 = $40;
    } else {
     label = 12;
     break;
    }
   }
   if ((label|0) == 7) {
    $29 = HEAP32[$19>>2]|0;
    $30 = (_fwrite($$032,1,1,$29)|0);
    $31 = ($30|0)==(1);
    if ($31) {
     label = 12;
    } else {
     label = 13;
    }
   }
   if ((label|0) == 12) {
    label = 14;
    break;
   }
   else if ((label|0) == 13) {
    $$4 = -1;
    break;
   }
  }
 } while(0);
 if ((label|0) == 14) {
  $$$i = $6 ? 0 : $1;
  $$4 = $$$i;
 }
 STACKTOP = sp;return ($$4|0);
}
function __ZNSt3__211__stdoutbufIcED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 (FUNCTION_TABLE_ii[$4 & 1023]($0)|0);
 $5 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,42504)|0);
 $6 = ((($0)) + 36|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$5>>2]|0;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 1023]($5)|0);
 $11 = ((($0)) + 44|0);
 $12 = $10&1;
 HEAP8[$11>>0] = $12;
 return;
}
function __ZNSt3__211__stdoutbufIcE4syncEv($0) {
 $0 = $0|0;
 var $$10 = 0, $$2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = sp;
 $3 = ((($0)) + 36|0);
 $4 = ((($0)) + 40|0);
 $5 = ((($1)) + 8|0);
 $6 = $1;
 $7 = ((($0)) + 32|0);
 L1: while(1) {
  $8 = HEAP32[$3>>2]|0;
  $9 = HEAP32[$4>>2]|0;
  $10 = HEAP32[$8>>2]|0;
  $11 = ((($10)) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (FUNCTION_TABLE_iiiiii[$12 & 1023]($8,$9,$1,$5,$2)|0);
  $14 = HEAP32[$2>>2]|0;
  $15 = (($14) - ($6))|0;
  $16 = HEAP32[$7>>2]|0;
  $17 = (_fwrite($1,1,$15,$16)|0);
  $18 = ($17|0)==($15|0);
  if (!($18)) {
   $$2 = -1;
   break;
  }
  switch ($13|0) {
  case 1:  {
   break;
  }
  case 2:  {
   $$2 = -1;
   break L1;
   break;
  }
  default: {
   label = 4;
   break L1;
  }
  }
 }
 if ((label|0) == 4) {
  $19 = HEAP32[$7>>2]|0;
  $20 = (_fflush($19)|0);
  $not$ = ($20|0)!=(0);
  $$10 = $not$ << 31 >> 31;
  $$2 = $$10;
 }
 STACKTOP = sp;return ($$2|0);
}
function __ZNSt3__211__stdoutbufIcE6xsputnEPKci($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$010 = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 44|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 L1: do {
  if ($5) {
   $$0 = 0;$$011 = $1;
   while(1) {
    $9 = ($$0|0)<($2|0);
    if (!($9)) {
     $$010 = $$0;
     break L1;
    }
    $10 = HEAP32[$0>>2]|0;
    $11 = ((($10)) + 52|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = HEAP8[$$011>>0]|0;
    $14 = $13&255;
    $15 = (FUNCTION_TABLE_iii[$12 & 1023]($0,$14)|0);
    $16 = ($15|0)==(-1);
    if ($16) {
     $$010 = $$0;
     break L1;
    }
    $17 = (($$0) + 1)|0;
    $18 = ((($$011)) + 1|0);
    $$0 = $17;$$011 = $18;
   }
  } else {
   $6 = ((($0)) + 32|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (_fwrite($1,1,$2,$7)|0);
   $$010 = $8;
  }
 } while(0);
 return ($$010|0);
}
function __ZNSt3__211__stdoutbufIcE8overflowEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i = 0, $$032 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 $6 = ($1|0)==(-1);
 do {
  if ($6) {
   label = 14;
  } else {
   $7 = $1&255;
   HEAP8[$3>>0] = $7;
   $8 = ((($0)) + 44|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = ($9<<24>>24)==(0);
   if (!($10)) {
    $11 = ((($0)) + 32|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = (_fwrite($3,1,1,$12)|0);
    $14 = ($13|0)==(1);
    if ($14) {
     label = 14;
     break;
    } else {
     $$4 = -1;
     break;
    }
   }
   HEAP32[$4>>2] = $2;
   $15 = ((($3)) + 1|0);
   $16 = ((($0)) + 36|0);
   $17 = ((($0)) + 40|0);
   $18 = ((($2)) + 8|0);
   $19 = $2;
   $20 = ((($0)) + 32|0);
   $$032 = $3;
   while(1) {
    $21 = HEAP32[$16>>2]|0;
    $22 = HEAP32[$17>>2]|0;
    $23 = HEAP32[$21>>2]|0;
    $24 = ((($23)) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (FUNCTION_TABLE_iiiiiiiii[$25 & 1023]($21,$22,$$032,$15,$5,$2,$18,$4)|0);
    $27 = HEAP32[$5>>2]|0;
    $28 = ($27|0)==($$032|0);
    if ($28) {
     label = 13;
     break;
    }
    $29 = ($26|0)==(3);
    if ($29) {
     label = 7;
     break;
    }
    $33 = ($26|0)==(1);
    $34 = $26 | 1;
    $35 = ($34|0)==(1);
    if (!($35)) {
     label = 13;
     break;
    }
    $36 = HEAP32[$4>>2]|0;
    $37 = (($36) - ($19))|0;
    $38 = HEAP32[$20>>2]|0;
    $39 = (_fwrite($2,1,$37,$38)|0);
    $40 = ($39|0)==($37|0);
    if (!($40)) {
     label = 13;
     break;
    }
    $41 = HEAP32[$5>>2]|0;
    if ($33) {
     $$032 = $41;
    } else {
     label = 12;
     break;
    }
   }
   if ((label|0) == 7) {
    $30 = HEAP32[$20>>2]|0;
    $31 = (_fwrite($$032,1,1,$30)|0);
    $32 = ($31|0)==(1);
    if ($32) {
     label = 12;
    } else {
     label = 13;
    }
   }
   if ((label|0) == 12) {
    label = 14;
    break;
   }
   else if ((label|0) == 13) {
    $$4 = -1;
    break;
   }
  }
 } while(0);
 if ((label|0) == 14) {
  $$$i = $6 ? 0 : $1;
  $$4 = $$$i;
 }
 STACKTOP = sp;return ($$4|0);
}
function __ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,42512)|0);
 $3 = ((($0)) + 36|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$2>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 1023]($2)|0);
 $8 = ((($0)) + 44|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$3>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_ii[$12 & 1023]($9)|0);
 $14 = ((($0)) + 53|0);
 $15 = $13&1;
 HEAP8[$14>>0] = $15;
 $16 = HEAP32[$8>>2]|0;
 $17 = ($16|0)>(8);
 if ($17) {
  __ZNSt3__221__throw_runtime_errorEPKc(32478);
 }
 return;
}
function __ZNSt3__210__stdinbufIwED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__210__stdinbufIwE9underflowEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__210__stdinbufIwE9__getcharEb($0,0)|0);
 return ($1|0);
}
function __ZNSt3__210__stdinbufIwE5uflowEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__210__stdinbufIwE9__getcharEb($0,1)|0);
 return ($1|0);
}
function __ZNSt3__210__stdinbufIwE9pbackfailEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 $6 = ($1|0)==(-1);
 $7 = ((($0)) + 52|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)!=(0);
 L1: do {
  if ($6) {
   if ($9) {
    $$1 = -1;
   } else {
    $10 = ((($0)) + 48|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)!=(-1);
    $13 = $12&1;
    HEAP8[$7>>0] = $13;
    $$1 = $11;
   }
  } else {
   L5: do {
    if ($9) {
     $14 = ((($0)) + 48|0);
     $15 = HEAP32[$14>>2]|0;
     HEAP32[$4>>2] = $15;
     $16 = ((($0)) + 36|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ((($0)) + 40|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($4)) + 4|0);
     $21 = ((($2)) + 8|0);
     $22 = HEAP32[$17>>2]|0;
     $23 = ((($22)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (FUNCTION_TABLE_iiiiiiiii[$24 & 1023]($17,$19,$4,$20,$5,$2,$21,$3)|0);
     switch ($25|0) {
     case 1: case 2:  {
      break;
     }
     case 3:  {
      $26 = HEAP32[$14>>2]|0;
      $27 = $26&255;
      HEAP8[$2>>0] = $27;
      $28 = ((($2)) + 1|0);
      HEAP32[$3>>2] = $28;
      label = 8;
      break;
     }
     default: {
      label = 8;
     }
     }
     L9: do {
      if ((label|0) == 8) {
       $29 = ((($0)) + 32|0);
       while(1) {
        $30 = HEAP32[$3>>2]|0;
        $31 = ($30>>>0)>($2>>>0);
        if (!($31)) {
         break;
        }
        $32 = ((($30)) + -1|0);
        HEAP32[$3>>2] = $32;
        $33 = HEAP8[$32>>0]|0;
        $34 = $33 << 24 >> 24;
        $35 = HEAP32[$29>>2]|0;
        $36 = (_ungetc($34,$35)|0);
        $37 = ($36|0)==(-1);
        if ($37) {
         break L9;
        }
       }
       $$pre$phiZ2D = $14;
       break L5;
      }
     } while(0);
     $$1 = -1;
     break L1;
    } else {
     $$pre = ((($0)) + 48|0);
     $$pre$phiZ2D = $$pre;
    }
   } while(0);
   HEAP32[$$pre$phiZ2D>>2] = $1;
   HEAP8[$7>>0] = 1;
   $$1 = $1;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZNSt3__210__stdinbufIwE9__getcharEb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$048 = 0, $$052 = 0, $$10 = 0, $$11 = 0, $$351 = 0, $$9 = 0, $$pre = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 $6 = ((($0)) + 52|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $11 = ((($0)) + 44|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)>(1);
  $$sroa$speculated = $13 ? $12 : 1;
  $14 = ((($0)) + 32|0);
  $$052 = 0;
  while(1) {
   $15 = ($$052|0)<($$sroa$speculated|0);
   if (!($15)) {
    label = 8;
    break;
   }
   $16 = HEAP32[$14>>2]|0;
   $17 = (_getc($16)|0);
   $18 = ($17|0)==(-1);
   if ($18) {
    $$10 = -1;
    break;
   }
   $19 = $17&255;
   $20 = (($2) + ($$052)|0);
   HEAP8[$20>>0] = $19;
   $21 = (($$052) + 1)|0;
   $$052 = $21;
  }
  if ((label|0) == 8) {
   $22 = ((($0)) + 53|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = ($23<<24>>24)==(0);
   do {
    if ($24) {
     $27 = ((($0)) + 40|0);
     $28 = ((($0)) + 36|0);
     $29 = ((($3)) + 4|0);
     $$048 = $$sroa$speculated;
     L11: while(1) {
      $30 = HEAP32[$27>>2]|0;
      $31 = $30;
      $32 = $31;
      $33 = HEAP32[$32>>2]|0;
      $34 = (($31) + 4)|0;
      $35 = $34;
      $36 = HEAP32[$35>>2]|0;
      $37 = HEAP32[$28>>2]|0;
      $38 = (($2) + ($$048)|0);
      $39 = HEAP32[$37>>2]|0;
      $40 = ((($39)) + 16|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = (FUNCTION_TABLE_iiiiiiiii[$41 & 1023]($37,$30,$2,$38,$4,$3,$29,$5)|0);
      switch ($42|0) {
      case 3:  {
       label = 15;
       break L11;
       break;
      }
      case 2:  {
       label = 17;
       break L11;
       break;
      }
      case 1:  {
       break;
      }
      default: {
       break L11;
      }
      }
      $43 = HEAP32[$27>>2]|0;
      $44 = $43;
      $45 = $44;
      HEAP32[$45>>2] = $33;
      $46 = (($44) + 4)|0;
      $47 = $46;
      HEAP32[$47>>2] = $36;
      $48 = ($$048|0)==(8);
      if ($48) {
       label = 17;
       break;
      }
      $49 = HEAP32[$14>>2]|0;
      $50 = (_getc($49)|0);
      $51 = ($50|0)==(-1);
      if ($51) {
       label = 17;
       break;
      }
      $52 = $50&255;
      HEAP8[$38>>0] = $52;
      $53 = (($$048) + 1)|0;
      $$048 = $53;
     }
     if ((label|0) == 15) {
      $54 = HEAP8[$2>>0]|0;
      $55 = $54 << 24 >> 24;
      HEAP32[$3>>2] = $55;
     }
     else if ((label|0) == 17) {
      $$9 = -1;
      break;
     }
     $$351 = $$048;
     label = 18;
    } else {
     $25 = HEAP8[$2>>0]|0;
     $26 = $25 << 24 >> 24;
     HEAP32[$3>>2] = $26;
     $$351 = $$sroa$speculated;
     label = 18;
    }
   } while(0);
   L21: do {
    if ((label|0) == 18) {
     if ($1) {
      $64 = HEAP32[$3>>2]|0;
      $65 = ((($0)) + 48|0);
      HEAP32[$65>>2] = $64;
      $$9 = $64;
      break;
     } else {
      $$0 = $$351;
     }
     while(1) {
      $56 = ($$0|0)>(0);
      if (!($56)) {
       break;
      }
      $57 = (($$0) + -1)|0;
      $58 = (($2) + ($57)|0);
      $59 = HEAP8[$58>>0]|0;
      $60 = $59 << 24 >> 24;
      $61 = HEAP32[$14>>2]|0;
      $62 = (_ungetc($60,$61)|0);
      $63 = ($62|0)==(-1);
      if ($63) {
       $$9 = -1;
       break L21;
      } else {
       $$0 = $57;
      }
     }
     $$pre = HEAP32[$3>>2]|0;
     $$9 = $$pre;
    }
   } while(0);
   $$10 = $$9;
  }
  $$11 = $$10;
 } else {
  $9 = ((($0)) + 48|0);
  $10 = HEAP32[$9>>2]|0;
  if ($1) {
   HEAP32[$9>>2] = -1;
   HEAP8[$6>>0] = 0;
   $$11 = $10;
  } else {
   $$11 = $10;
  }
 }
 STACKTOP = sp;return ($$11|0);
}
function __ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,42504)|0);
 $3 = ((($0)) + 36|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$2>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 1023]($2)|0);
 $8 = ((($0)) + 44|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$3>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_ii[$12 & 1023]($9)|0);
 $14 = ((($0)) + 53|0);
 $15 = $13&1;
 HEAP8[$14>>0] = $15;
 $16 = HEAP32[$8>>2]|0;
 $17 = ($16|0)>(8);
 if ($17) {
  __ZNSt3__221__throw_runtime_errorEPKc(32478);
 }
 return;
}
function __ZNSt3__210__stdinbufIcED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__210__stdinbufIcE9underflowEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__210__stdinbufIcE9__getcharEb($0,0)|0);
 return ($1|0);
}
function __ZNSt3__210__stdinbufIcE5uflowEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__210__stdinbufIcE9__getcharEb($0,1)|0);
 return ($1|0);
}
function __ZNSt3__210__stdinbufIcE9pbackfailEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 4|0;
 $4 = sp + 8|0;
 $5 = sp;
 $6 = ($1|0)==(-1);
 $7 = ((($0)) + 52|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)!=(0);
 L1: do {
  if ($6) {
   if ($9) {
    $$1 = -1;
   } else {
    $10 = ((($0)) + 48|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)!=(-1);
    $13 = $12&1;
    HEAP8[$7>>0] = $13;
    $$1 = $11;
   }
  } else {
   L5: do {
    if ($9) {
     $14 = ((($0)) + 48|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = $15&255;
     HEAP8[$4>>0] = $16;
     $17 = ((($0)) + 36|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ((($0)) + 40|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ((($4)) + 1|0);
     $22 = ((($2)) + 8|0);
     $23 = HEAP32[$18>>2]|0;
     $24 = ((($23)) + 12|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = (FUNCTION_TABLE_iiiiiiiii[$25 & 1023]($18,$20,$4,$21,$5,$2,$22,$3)|0);
     switch ($26|0) {
     case 1: case 2:  {
      break;
     }
     case 3:  {
      $27 = HEAP32[$14>>2]|0;
      $28 = $27&255;
      HEAP8[$2>>0] = $28;
      $29 = ((($2)) + 1|0);
      HEAP32[$3>>2] = $29;
      label = 8;
      break;
     }
     default: {
      label = 8;
     }
     }
     L9: do {
      if ((label|0) == 8) {
       $30 = ((($0)) + 32|0);
       while(1) {
        $31 = HEAP32[$3>>2]|0;
        $32 = ($31>>>0)>($2>>>0);
        if (!($32)) {
         break;
        }
        $33 = ((($31)) + -1|0);
        HEAP32[$3>>2] = $33;
        $34 = HEAP8[$33>>0]|0;
        $35 = $34 << 24 >> 24;
        $36 = HEAP32[$30>>2]|0;
        $37 = (_ungetc($35,$36)|0);
        $38 = ($37|0)==(-1);
        if ($38) {
         break L9;
        }
       }
       $$pre$phiZ2D = $14;
       break L5;
      }
     } while(0);
     $$1 = -1;
     break L1;
    } else {
     $$pre = ((($0)) + 48|0);
     $$pre$phiZ2D = $$pre;
    }
   } while(0);
   HEAP32[$$pre$phiZ2D>>2] = $1;
   HEAP8[$7>>0] = 1;
   $$1 = $1;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZNSt3__210__stdinbufIcE9__getcharEb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$048 = 0, $$052 = 0, $$10 = 0, $$11 = 0, $$351 = 0, $$9 = 0, $$pre = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 $6 = ((($0)) + 52|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $11 = ((($0)) + 44|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)>(1);
  $$sroa$speculated = $13 ? $12 : 1;
  $14 = ((($0)) + 32|0);
  $$052 = 0;
  while(1) {
   $15 = ($$052|0)<($$sroa$speculated|0);
   if (!($15)) {
    label = 8;
    break;
   }
   $16 = HEAP32[$14>>2]|0;
   $17 = (_getc($16)|0);
   $18 = ($17|0)==(-1);
   if ($18) {
    $$10 = -1;
    break;
   }
   $19 = $17&255;
   $20 = (($2) + ($$052)|0);
   HEAP8[$20>>0] = $19;
   $21 = (($$052) + 1)|0;
   $$052 = $21;
  }
  if ((label|0) == 8) {
   $22 = ((($0)) + 53|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = ($23<<24>>24)==(0);
   do {
    if ($24) {
     $26 = ((($0)) + 40|0);
     $27 = ((($0)) + 36|0);
     $28 = ((($3)) + 1|0);
     $$048 = $$sroa$speculated;
     L11: while(1) {
      $29 = HEAP32[$26>>2]|0;
      $30 = $29;
      $31 = $30;
      $32 = HEAP32[$31>>2]|0;
      $33 = (($30) + 4)|0;
      $34 = $33;
      $35 = HEAP32[$34>>2]|0;
      $36 = HEAP32[$27>>2]|0;
      $37 = (($2) + ($$048)|0);
      $38 = HEAP32[$36>>2]|0;
      $39 = ((($38)) + 16|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = (FUNCTION_TABLE_iiiiiiiii[$40 & 1023]($36,$29,$2,$37,$4,$3,$28,$5)|0);
      switch ($41|0) {
      case 3:  {
       label = 15;
       break L11;
       break;
      }
      case 2:  {
       label = 17;
       break L11;
       break;
      }
      case 1:  {
       break;
      }
      default: {
       break L11;
      }
      }
      $42 = HEAP32[$26>>2]|0;
      $43 = $42;
      $44 = $43;
      HEAP32[$44>>2] = $32;
      $45 = (($43) + 4)|0;
      $46 = $45;
      HEAP32[$46>>2] = $35;
      $47 = ($$048|0)==(8);
      if ($47) {
       label = 17;
       break;
      }
      $48 = HEAP32[$14>>2]|0;
      $49 = (_getc($48)|0);
      $50 = ($49|0)==(-1);
      if ($50) {
       label = 17;
       break;
      }
      $51 = $49&255;
      HEAP8[$37>>0] = $51;
      $52 = (($$048) + 1)|0;
      $$048 = $52;
     }
     if ((label|0) == 15) {
      $53 = HEAP8[$2>>0]|0;
      HEAP8[$3>>0] = $53;
     }
     else if ((label|0) == 17) {
      $$9 = -1;
      break;
     }
     $$351 = $$048;
     label = 18;
    } else {
     $25 = HEAP8[$2>>0]|0;
     HEAP8[$3>>0] = $25;
     $$351 = $$sroa$speculated;
     label = 18;
    }
   } while(0);
   L21: do {
    if ((label|0) == 18) {
     if ($1) {
      $62 = HEAP8[$3>>0]|0;
      $63 = $62&255;
      $64 = ((($0)) + 48|0);
      HEAP32[$64>>2] = $63;
      $66 = $62;
     } else {
      $$0 = $$351;
      while(1) {
       $54 = ($$0|0)>(0);
       if (!($54)) {
        break;
       }
       $55 = (($$0) + -1)|0;
       $56 = (($2) + ($55)|0);
       $57 = HEAP8[$56>>0]|0;
       $58 = $57&255;
       $59 = HEAP32[$14>>2]|0;
       $60 = (_ungetc($58,$59)|0);
       $61 = ($60|0)==(-1);
       if ($61) {
        $$9 = -1;
        break L21;
       } else {
        $$0 = $55;
       }
      }
      $$pre = HEAP8[$3>>0]|0;
      $66 = $$pre;
     }
     $65 = $66&255;
     $$9 = $65;
    }
   } while(0);
   $$10 = $$9;
  }
  $$11 = $$10;
 } else {
  $9 = ((($0)) + 48|0);
  $10 = HEAP32[$9>>2]|0;
  if ($1) {
   HEAP32[$9>>2] = -1;
   HEAP8[$6>>0] = 0;
   $$11 = $10;
  } else {
   $$11 = $10;
  }
 }
 STACKTOP = sp;return ($$11|0);
}
function __ZNSt3__27collateIcED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__27collateIcED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNSt3__26locale5facet16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ((($2)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  FUNCTION_TABLE_vi[$4 & 1023]($0);
 }
 return;
}
function __ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$011 = 0, $$012 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$011 = $3;$$012 = $1;
 while(1) {
  $5 = ($$011|0)==($4|0);
  if ($5) {
   label = 7;
   break;
  }
  $6 = ($$012|0)==($2|0);
  if ($6) {
   $$0 = -1;
   break;
  }
  $7 = HEAP8[$$012>>0]|0;
  $8 = HEAP8[$$011>>0]|0;
  $9 = ($7<<24>>24)<($8<<24>>24);
  if ($9) {
   $$0 = -1;
   break;
  }
  $10 = ($8<<24>>24)<($7<<24>>24);
  if ($10) {
   $$0 = 1;
   break;
  }
  $11 = ((($$012)) + 1|0);
  $12 = ((($$011)) + 1|0);
  $$011 = $12;$$012 = $11;
 }
 if ((label|0) == 7) {
  $13 = ($$012|0)!=($2|0);
  $14 = $13&1;
  $$0 = $14;
 }
 return ($$0|0);
}
function __ZNKSt3__27collateIcE12do_transformEPKcS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($0,$2,$3);
 return;
}
function __ZNKSt3__27collateIcE7do_hashEPKcS3_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$020 = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = 0;$$020 = $1;
 while(1) {
  $3 = ($$020|0)==($2|0);
  if ($3) {
   break;
  }
  $4 = $$0 << 4;
  $5 = HEAP8[$$020>>0]|0;
  $6 = $5 << 24 >> 24;
  $7 = (($6) + ($4))|0;
  $8 = $7 & -268435456;
  $9 = $8 >>> 24;
  $10 = $9 | $8;
  $11 = $10 ^ $7;
  $12 = ((($$020)) + 1|0);
  $$0 = $11;$$020 = $12;
 }
 return ($$0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$021 = 0, $$021$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $scevgep23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1;
 $4 = $2;
 $5 = (($4) - ($3))|0;
 $6 = ($5>>>0)>(4294967279);
 if ($6) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $7 = ($5>>>0)<(11);
 if ($7) {
  $8 = $5&255;
  $9 = ((($0)) + 11|0);
  HEAP8[$9>>0] = $8;
  $$021$ph = $0;
 } else {
  $10 = (($5) + 16)|0;
  $11 = $10 & -16;
  $12 = (__Znwj($11)|0);
  HEAP32[$0>>2] = $12;
  $13 = $11 | -2147483648;
  $14 = ((($0)) + 8|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($0)) + 4|0);
  HEAP32[$15>>2] = $5;
  $$021$ph = $12;
 }
 $16 = $2;
 $17 = (($16) - ($3))|0;
 $$0 = $1;$$021 = $$021$ph;
 while(1) {
  $18 = ($$0|0)==($2|0);
  if ($18) {
   break;
  }
  $19 = HEAP8[$$0>>0]|0;
  HEAP8[$$021>>0] = $19;
  $20 = ((($$0)) + 1|0);
  $21 = ((($$021)) + 1|0);
  $$0 = $20;$$021 = $21;
 }
 $scevgep23 = (($$021$ph) + ($17)|0);
 HEAP8[$scevgep23>>0] = 0;
 return;
}
function __ZNSt3__27collateIwED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__27collateIwED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$011 = 0, $$012 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$011 = $3;$$012 = $1;
 while(1) {
  $5 = ($$011|0)==($4|0);
  if ($5) {
   label = 7;
   break;
  }
  $6 = ($$012|0)==($2|0);
  if ($6) {
   $$0 = -1;
   break;
  }
  $7 = HEAP32[$$012>>2]|0;
  $8 = HEAP32[$$011>>2]|0;
  $9 = ($7|0)<($8|0);
  if ($9) {
   $$0 = -1;
   break;
  }
  $10 = ($8|0)<($7|0);
  if ($10) {
   $$0 = 1;
   break;
  }
  $11 = ((($$012)) + 4|0);
  $12 = ((($$011)) + 4|0);
  $$011 = $12;$$012 = $11;
 }
 if ((label|0) == 7) {
  $13 = ($$012|0)!=($2|0);
  $14 = $13&1;
  $$0 = $14;
 }
 return ($$0|0);
}
function __ZNKSt3__27collateIwE12do_transformEPKwS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($0,$2,$3);
 return;
}
function __ZNKSt3__27collateIwE7do_hashEPKwS3_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$020 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = 0;$$020 = $1;
 while(1) {
  $3 = ($$020|0)==($2|0);
  if ($3) {
   break;
  }
  $4 = $$0 << 4;
  $5 = HEAP32[$$020>>2]|0;
  $6 = (($5) + ($4))|0;
  $7 = $6 & -268435456;
  $8 = $7 >>> 24;
  $9 = $8 | $7;
  $10 = $9 ^ $6;
  $11 = ((($$020)) + 4|0);
  $$0 = $10;$$020 = $11;
 }
 return ($$0|0);
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$021 = 0, $$021$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1;
 $4 = $2;
 $5 = (($4) - ($3))|0;
 $6 = $5 >> 2;
 $7 = ($6>>>0)>(1073741807);
 if ($7) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $8 = ($6>>>0)<(2);
 do {
  if ($8) {
   $9 = $6&255;
   $10 = ((($0)) + 8|0);
   $11 = ((($10)) + 3|0);
   HEAP8[$11>>0] = $9;
   $$021$ph = $0;
  } else {
   $12 = (($6) + 4)|0;
   $13 = $12 & -4;
   $14 = ($13>>>0)>(1073741823);
   if ($14) {
    $15 = (___cxa_allocate_exception(4)|0);
    __ZNSt9bad_allocC2Ev($15);
    ___cxa_throw(($15|0),(2848|0),(617|0));
    // unreachable;
   } else {
    $16 = $13 << 2;
    $17 = (__Znwj($16)|0);
    HEAP32[$0>>2] = $17;
    $18 = $13 | -2147483648;
    $19 = ((($0)) + 8|0);
    HEAP32[$19>>2] = $18;
    $20 = ((($0)) + 4|0);
    HEAP32[$20>>2] = $6;
    $$021$ph = $17;
    break;
   }
  }
 } while(0);
 $21 = $2;
 $22 = (($21) - ($3))|0;
 $23 = $22 >>> 2;
 $$0 = $1;$$021 = $$021$ph;
 while(1) {
  $24 = ($$0|0)==($2|0);
  if ($24) {
   break;
  }
  $25 = HEAP32[$$0>>2]|0;
  HEAP32[$$021>>2] = $25;
  $26 = ((($$0)) + 4|0);
  $27 = ((($$021)) + 4|0);
  $$0 = $26;$$021 = $27;
 }
 $scevgep = (($$021$ph) + ($23<<2)|0);
 HEAP32[$scevgep>>2] = 0;
 return;
}
function __ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$2 = 0, $$232 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$ptr = 0, $$sroa$026$0 = 0, $$sroa$026$0$copyload = 0, $$sroa$026$0$copyload28 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy2 = sp + 60|0;
 $$byval_copy1 = sp + 56|0;
 $$byval_copy = sp + 52|0;
 $6 = sp + 48|0;
 $7 = sp + 44|0;
 $8 = sp + 40|0;
 $9 = sp + 36|0;
 $10 = sp + 32|0;
 $11 = sp + 8|0;
 $12 = sp;
 $13 = ((($3)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & 1;
 $16 = ($15|0)==(0);
 L1: do {
  if ($16) {
   HEAP32[$6>>2] = -1;
   $17 = HEAP32[$0>>2]|0;
   $18 = ((($17)) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = HEAP32[$1>>2]|0;
   HEAP32[$7>>2] = $20;
   $21 = HEAP32[$2>>2]|0;
   HEAP32[$8>>2] = $21;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$8>>2]|0;
   $22 = (FUNCTION_TABLE_iiiiiii[$19 & 1023]($0,$$byval_copy,$$byval_copy1,$3,$4,$6)|0);
   HEAP32[$1>>2] = $22;
   $23 = HEAP32[$6>>2]|0;
   switch ($23|0) {
   case 0:  {
    HEAP8[$5>>0] = 0;
    break;
   }
   case 1:  {
    HEAP8[$5>>0] = 1;
    break;
   }
   default: {
    HEAP8[$5>>0] = 1;
    HEAP32[$4>>2] = 4;
   }
   }
   $$sroa$026$0$copyload = HEAP32[$1>>2]|0;
   $$sroa$026$0 = $$sroa$026$0$copyload;
  } else {
   $24 = (__ZNKSt3__28ios_base6getlocEv($3)|0);
   HEAP32[$9>>2] = $24;
   __THREW__ = 0;
   $25 = (invoke_iii(659,($9|0),(40712|0))|0);
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   do {
    if ($27) {
     $51 = ___cxa_find_matching_catch_2()|0;
     $52 = tempRet0;
     (__ZNSt3__214__shared_count16__release_sharedEv($24)|0);
     $$2 = $51;$$232 = $52;
    } else {
     (__ZNSt3__214__shared_count16__release_sharedEv($24)|0);
     $28 = (__ZNKSt3__28ios_base6getlocEv($3)|0);
     HEAP32[$10>>2] = $28;
     __THREW__ = 0;
     $29 = (invoke_iii(659,($10|0),(40728|0))|0);
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     if ($31) {
      $53 = ___cxa_find_matching_catch_2()|0;
      $54 = tempRet0;
      (__ZNSt3__214__shared_count16__release_sharedEv($28)|0);
      $$2 = $53;$$232 = $54;
      break;
     }
     (__ZNSt3__214__shared_count16__release_sharedEv($28)|0);
     $32 = HEAP32[$29>>2]|0;
     $33 = ((($32)) + 24|0);
     $34 = HEAP32[$33>>2]|0;
     __THREW__ = 0;
     invoke_vii($34|0,($11|0),($29|0));
     $35 = __THREW__; __THREW__ = 0;
     $36 = $35&1;
     if ($36) {
      $37 = ___cxa_find_matching_catch_2()|0;
      $38 = tempRet0;
      $$2 = $37;$$232 = $38;
      break;
     }
     $$ptr = ((($11)) + 12|0);
     $39 = HEAP32[$29>>2]|0;
     $40 = ((($39)) + 28|0);
     $41 = HEAP32[$40>>2]|0;
     __THREW__ = 0;
     invoke_vii($41|0,($$ptr|0),($29|0));
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      $63 = ___cxa_find_matching_catch_2()|0;
      $64 = tempRet0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
      $$2 = $63;$$232 = $64;
      break;
     }
     $44 = HEAP32[$2>>2]|0;
     HEAP32[$12>>2] = $44;
     $45 = ((($11)) + 24|0);
     __THREW__ = 0;
     ;HEAP32[$$byval_copy2>>2]=HEAP32[$12>>2]|0;
     $46 = (invoke_iiiiiiii(761,($1|0),($$byval_copy2|0),($11|0),($45|0),($25|0),($4|0),1)|0);
     $47 = __THREW__; __THREW__ = 0;
     $48 = $47&1;
     if ($48) {
      $55 = ___cxa_find_matching_catch_2()|0;
      $56 = tempRet0;
      $61 = $45;
      while(1) {
       $60 = ((($61)) + -12|0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($60);
       $62 = ($60|0)==($11|0);
       if ($62) {
        break;
       } else {
        $61 = $60;
       }
      }
      $$2 = $55;$$232 = $56;
      break;
     } else {
      $49 = ($46|0)==($11|0);
      $50 = $49&1;
      HEAP8[$5>>0] = $50;
      $$sroa$026$0$copyload28 = HEAP32[$1>>2]|0;
      $58 = $45;
      while(1) {
       $57 = ((($58)) + -12|0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($57);
       $59 = ($57|0)==($11|0);
       if ($59) {
        break;
       } else {
        $58 = $57;
       }
      }
      $$sroa$026$0 = $$sroa$026$0$copyload28;
      break L1;
     }
    }
   } while(0);
   ___resumeException($$2|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$026$0|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i32 = 0, $$0$i$i58 = 0, $$022 = 0, $$025 = 0, $$123 = 0, $$2 = 0, $$224 = 0, $$227 = 0, $$3 = 0, $$328 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i37 = 0, $$pre$i3$i$i = 0, $$sink$index = 0, $$sink$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $exitcond$i$i33 = 0, $phitmp$i = 0, $phitmp$i53 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $vararg_buffer = sp;
 $6 = sp + 208|0;
 $7 = sp + 196|0;
 $8 = sp + 192|0;
 $9 = sp + 180|0;
 $10 = sp + 176|0;
 $11 = sp + 16|0;
 $12 = sp + 8|0;
 $13 = sp + 4|0;
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $14 = (($7) + ($$0$i$i<<2)|0);
  HEAP32[$14>>2] = 0;
  $15 = (($$0$i$i) + 1)|0;
  $$0$i$i = $15;
 }
 __THREW__ = 0;
 $16 = (invoke_ii(658,($3|0))|0);
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 do {
  if ($18) {
   $95 = ___cxa_find_matching_catch_2()|0;
   $96 = tempRet0;
   $$0 = $95;$$025 = $96;
   label = 35;
  } else {
   HEAP32[$8>>2] = $16;
   __THREW__ = 0;
   $19 = (invoke_iii(659,($8|0),(40712|0))|0);
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if (!($21)) {
    $22 = HEAP32[$19>>2]|0;
    $23 = ((($22)) + 32|0);
    $24 = HEAP32[$23>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($24|0,($19|0),(32626|0),((32652)|0),($6|0))|0);
    $25 = __THREW__; __THREW__ = 0;
    $26 = $25&1;
    if (!($26)) {
     (__ZNSt3__214__shared_count16__release_sharedEv($16)|0);
     ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
     $$0$i$i32 = 0;
     while(1) {
      $exitcond$i$i33 = ($$0$i$i32|0)==(3);
      if ($exitcond$i$i33) {
       break;
      }
      $27 = (($9) + ($$0$i$i32<<2)|0);
      HEAP32[$27>>2] = 0;
      $28 = (($$0$i$i32) + 1)|0;
      $$0$i$i32 = $28;
     }
     $29 = ((($9)) + 11|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = ($30<<24>>24)<(0);
     if ($31) {
      $32 = ((($9)) + 8|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = $33 & 2147483647;
      $phitmp$i = (($34) + -1)|0;
      $35 = $phitmp$i;
     } else {
      $35 = 10;
     }
     __THREW__ = 0;
     invoke_viii(666,($9|0),($35|0),0);
     $36 = __THREW__; __THREW__ = 0;
     $37 = $36&1;
     if ($37) {
      $99 = ___cxa_find_matching_catch_2()|0;
      $100 = tempRet0;
      $$2 = $99;$$227 = $100;
     } else {
      $38 = HEAP8[$29>>0]|0;
      $39 = ($38<<24>>24)<(0);
      $40 = HEAP32[$9>>2]|0;
      $41 = $39 ? $40 : $9;
      HEAP32[$10>>2] = $41;
      HEAP32[$12>>2] = $11;
      HEAP32[$13>>2] = 0;
      $42 = ((($9)) + 4|0);
      $43 = ((($9)) + 8|0);
      $$pre = HEAP32[$1>>2]|0;
      $$022 = $41;$$pre$i$i$i37 = $$pre;
      L21: while(1) {
       $44 = ($$pre$i$i$i37|0)==(0|0);
       if ($44) {
        $$pre$i$i$i = 0;
       } else {
        $45 = ((($$pre$i$i$i37)) + 12|0);
        $46 = HEAP32[$45>>2]|0;
        $47 = ((($$pre$i$i$i37)) + 16|0);
        $48 = HEAP32[$47>>2]|0;
        $49 = ($46|0)==($48|0);
        if ($49) {
         $50 = HEAP32[$$pre$i$i$i37>>2]|0;
         $51 = ((($50)) + 36|0);
         $52 = HEAP32[$51>>2]|0;
         __THREW__ = 0;
         $53 = (invoke_ii($52|0,($$pre$i$i$i37|0))|0);
         $54 = __THREW__; __THREW__ = 0;
         $55 = $54&1;
         if ($55) {
          label = 37;
          break;
         }
         $56 = ($53|0)==(-1);
         if ($56) {
          HEAP32[$1>>2] = 0;
          $$pre$i$i$i = 0;
         } else {
          $$pre$i$i$i = $$pre$i$i$i37;
         }
        } else {
         $$pre$i$i$i = $$pre$i$i$i37;
        }
       }
       $57 = ($$pre$i$i$i|0)==(0|0);
       $58 = HEAP32[$2>>2]|0;
       $59 = ($58|0)==(0|0);
       do {
        if ($59) {
         label = 25;
        } else {
         $60 = ((($58)) + 12|0);
         $61 = HEAP32[$60>>2]|0;
         $62 = ((($58)) + 16|0);
         $63 = HEAP32[$62>>2]|0;
         $64 = ($61|0)==($63|0);
         if (!($64)) {
          if ($57) {
           $178 = $58;
           break;
          } else {
           $$224 = $$022;$$pre$i3$i$i = $58;
           label = 47;
           break L21;
          }
         }
         $65 = HEAP32[$58>>2]|0;
         $66 = ((($65)) + 36|0);
         $67 = HEAP32[$66>>2]|0;
         __THREW__ = 0;
         $68 = (invoke_ii($67|0,($58|0))|0);
         $69 = __THREW__; __THREW__ = 0;
         $70 = $69&1;
         if ($70) {
          label = 37;
          break L21;
         }
         $71 = ($68|0)==(-1);
         if ($71) {
          HEAP32[$2>>2] = 0;
          label = 25;
          break;
         } else {
          if ($57) {
           $178 = $58;
           break;
          } else {
           $$224 = $$022;$$pre$i3$i$i = $58;
           label = 47;
           break L21;
          }
         }
        }
       } while(0);
       if ((label|0) == 25) {
        label = 0;
        if ($57) {
         $$224 = $$022;$$pre$i3$i$i = 0;
         label = 47;
         break;
        } else {
         $178 = 0;
        }
       }
       $72 = HEAP32[$10>>2]|0;
       $73 = HEAP8[$29>>0]|0;
       $74 = ($73<<24>>24)<(0);
       $75 = HEAP32[$42>>2]|0;
       $76 = $73&255;
       $77 = $74 ? $75 : $76;
       $78 = (($$022) + ($77)|0);
       $79 = ($72|0)==($78|0);
       if ($79) {
        $80 = $77 << 1;
        __THREW__ = 0;
        invoke_viii(666,($9|0),($80|0),0);
        $81 = __THREW__; __THREW__ = 0;
        $82 = $81&1;
        if ($82) {
         label = 39;
         break;
        }
        $83 = HEAP8[$29>>0]|0;
        $84 = ($83<<24>>24)<(0);
        if ($84) {
         $85 = HEAP32[$43>>2]|0;
         $86 = $85 & 2147483647;
         $phitmp$i53 = (($86) + -1)|0;
         $87 = $phitmp$i53;
        } else {
         $87 = 10;
        }
        __THREW__ = 0;
        invoke_viii(666,($9|0),($87|0),0);
        $88 = __THREW__; __THREW__ = 0;
        $89 = $88&1;
        if ($89) {
         label = 39;
         break;
        }
        $90 = HEAP8[$29>>0]|0;
        $91 = ($90<<24>>24)<(0);
        $92 = HEAP32[$9>>2]|0;
        $93 = $91 ? $92 : $9;
        $94 = (($93) + ($77)|0);
        HEAP32[$10>>2] = $94;
        $$123 = $93;
       } else {
        $$123 = $$022;
       }
       $107 = ((($$pre$i$i$i)) + 12|0);
       $108 = HEAP32[$107>>2]|0;
       $109 = ((($$pre$i$i$i)) + 16|0);
       $110 = HEAP32[$109>>2]|0;
       $111 = ($108|0)==($110|0);
       if ($111) {
        $112 = HEAP32[$$pre$i$i$i>>2]|0;
        $113 = ((($112)) + 36|0);
        $114 = HEAP32[$113>>2]|0;
        __THREW__ = 0;
        $115 = (invoke_ii($114|0,($$pre$i$i$i|0))|0);
        $116 = __THREW__; __THREW__ = 0;
        $117 = $116&1;
        if ($117) {
         label = 37;
         break;
        } else {
         $$0$i$i58 = $115;
        }
       } else {
        $118 = HEAP8[$108>>0]|0;
        $119 = $118&255;
        $$0$i$i58 = $119;
       }
       $120 = $$0$i$i58&255;
       $121 = (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($120,16,$$123,$10,$13,0,$7,$11,$12,$6)|0);
       $122 = ($121|0)==(0);
       if (!($122)) {
        $$224 = $$123;$$pre$i3$i$i = $178;
        label = 47;
        break;
       }
       $123 = HEAP32[$107>>2]|0;
       $124 = HEAP32[$109>>2]|0;
       $125 = ($123|0)==($124|0);
       if ($125) {
        $126 = HEAP32[$$pre$i$i$i>>2]|0;
        $127 = ((($126)) + 40|0);
        $128 = HEAP32[$127>>2]|0;
        __THREW__ = 0;
        (invoke_ii($128|0,($$pre$i$i$i|0))|0);
        $129 = __THREW__; __THREW__ = 0;
        $130 = $129&1;
        if ($130) {
         label = 37;
         break;
        } else {
         $$022 = $$123;$$pre$i$i$i37 = $$pre$i$i$i;
         continue;
        }
       } else {
        $131 = ((($123)) + 1|0);
        HEAP32[$107>>2] = $131;
        $$022 = $$123;$$pre$i$i$i37 = $$pre$i$i$i;
        continue;
       }
      }
      if ((label|0) == 37) {
       $101 = ___cxa_find_matching_catch_2()|0;
       $102 = tempRet0;
       $$sink$index = $101;$$sink$index3 = $102;
      }
      else if ((label|0) == 39) {
       $105 = ___cxa_find_matching_catch_2()|0;
       $106 = tempRet0;
       $$sink$index = $105;$$sink$index3 = $106;
      }
      else if ((label|0) == 47) {
       $132 = HEAP32[$10>>2]|0;
       $133 = $$224;
       $134 = (($132) - ($133))|0;
       __THREW__ = 0;
       invoke_viii(666,($9|0),($134|0),0);
       $135 = __THREW__; __THREW__ = 0;
       $136 = $135&1;
       L60: do {
        if (!($136)) {
         $137 = HEAP8[$29>>0]|0;
         $138 = HEAP32[$9>>2]|0;
         __THREW__ = 0;
         $139 = (invoke_i(762)|0);
         $140 = __THREW__; __THREW__ = 0;
         $141 = $140&1;
         if (!($141)) {
          $142 = ($137<<24>>24)<(0);
          $143 = $142 ? $138 : $9;
          __THREW__ = 0;
          HEAP32[$vararg_buffer>>2] = $5;
          $144 = (invoke_iiiii(763,($143|0),($139|0),(32659|0),($vararg_buffer|0))|0);
          $145 = __THREW__; __THREW__ = 0;
          $146 = $145&1;
          if (!($146)) {
           $147 = ($144|0)==(1);
           if (!($147)) {
            HEAP32[$4>>2] = 4;
           }
           $148 = ($$pre$i$i$i|0)==(0|0);
           if ($148) {
            $161 = 0;
           } else {
            $149 = ((($$pre$i$i$i)) + 12|0);
            $150 = HEAP32[$149>>2]|0;
            $151 = ((($$pre$i$i$i)) + 16|0);
            $152 = HEAP32[$151>>2]|0;
            $153 = ($150|0)==($152|0);
            if ($153) {
             $154 = HEAP32[$$pre$i$i$i>>2]|0;
             $155 = ((($154)) + 36|0);
             $156 = HEAP32[$155>>2]|0;
             __THREW__ = 0;
             $157 = (invoke_ii($156|0,($$pre$i$i$i|0))|0);
             $158 = __THREW__; __THREW__ = 0;
             $159 = $158&1;
             if ($159) {
              break;
             }
             $160 = ($157|0)==(-1);
             if ($160) {
              HEAP32[$1>>2] = 0;
              $161 = 0;
             } else {
              $161 = $$pre$i$i$i;
             }
            } else {
             $161 = $$pre$i$i$i;
            }
           }
           $162 = ($161|0)==(0|0);
           $163 = ($$pre$i3$i$i|0)==(0|0);
           L73: do {
            if ($163) {
             label = 63;
            } else {
             $164 = ((($$pre$i3$i$i)) + 12|0);
             $165 = HEAP32[$164>>2]|0;
             $166 = ((($$pre$i3$i$i)) + 16|0);
             $167 = HEAP32[$166>>2]|0;
             $168 = ($165|0)==($167|0);
             do {
              if ($168) {
               $169 = HEAP32[$$pre$i3$i$i>>2]|0;
               $170 = ((($169)) + 36|0);
               $171 = HEAP32[$170>>2]|0;
               __THREW__ = 0;
               $172 = (invoke_ii($171|0,($$pre$i3$i$i|0))|0);
               $173 = __THREW__; __THREW__ = 0;
               $174 = $173&1;
               if ($174) {
                break L60;
               }
               $175 = ($172|0)==(-1);
               if (!($175)) {
                break;
               }
               HEAP32[$2>>2] = 0;
               label = 63;
               break L73;
              }
             } while(0);
             if (!($162)) {
              label = 64;
             }
            }
           } while(0);
           if ((label|0) == 63) {
            if ($162) {
             label = 64;
            }
           }
           if ((label|0) == 64) {
            $176 = HEAP32[$4>>2]|0;
            $177 = $176 | 2;
            HEAP32[$4>>2] = $177;
           }
           $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
           STACKTOP = sp;return ($$sroa$0$0$copyload|0);
          }
         }
        }
       } while(0);
       $103 = ___cxa_find_matching_catch_2()|0;
       $104 = tempRet0;
       $$sink$index = $103;$$sink$index3 = $104;
      }
      $$2 = $$sink$index;$$227 = $$sink$index3;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
     $$3 = $$2;$$328 = $$227;
     break;
    }
   }
   $97 = ___cxa_find_matching_catch_2()|0;
   $98 = tempRet0;
   (__ZNSt3__214__shared_count16__release_sharedEv($16)|0);
   $$0 = $97;$$025 = $98;
   label = 35;
  }
 } while(0);
 if ((label|0) == 35) {
  $$3 = $$0;$$328 = $$025;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 ___resumeException($$3|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__26locale9use_facetERNS0_2idE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (__ZNSt3__26locale2id5__getEv($1)|0);
 $4 = (__ZNKSt3__26locale5__imp9use_facetEl($2,$3)|0);
 return ($4|0);
}
function __ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$0$i$add = 0, $$0$i$idx = 0, $$0$i$ptr = 0, $$0$lcssa$i = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $10 = HEAP32[$3>>2]|0;
 $11 = ($10|0)==($2|0);
 do {
  if ($11) {
   $12 = ((($9)) + 24|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = ($13<<24>>24)==($0<<24>>24);
   if (!($14)) {
    $15 = ((($9)) + 25|0);
    $16 = HEAP8[$15>>0]|0;
    $17 = ($16<<24>>24)==($0<<24>>24);
    if (!($17)) {
     label = 5;
     break;
    }
   }
   $18 = $14 ? 43 : 45;
   $19 = ((($2)) + 1|0);
   HEAP32[$3>>2] = $19;
   HEAP8[$2>>0] = $18;
   HEAP32[$4>>2] = 0;
   $$1 = 0;
  } else {
   label = 5;
  }
 } while(0);
 L6: do {
  if ((label|0) == 5) {
   $20 = ((($6)) + 11|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = ($21<<24>>24)<(0);
   $23 = ((($6)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $21&255;
   $26 = $22 ? $24 : $25;
   $27 = ($26|0)!=(0);
   $28 = ($0<<24>>24)==($5<<24>>24);
   $or$cond = $28 & $27;
   if ($or$cond) {
    $29 = HEAP32[$8>>2]|0;
    $30 = $29;
    $31 = $7;
    $32 = (($30) - ($31))|0;
    $33 = ($32|0)<(160);
    if (!($33)) {
     $$1 = 0;
     break;
    }
    $34 = HEAP32[$4>>2]|0;
    $35 = ((($29)) + 4|0);
    HEAP32[$8>>2] = $35;
    HEAP32[$29>>2] = $34;
    HEAP32[$4>>2] = 0;
    $$1 = 0;
    break;
   }
   $36 = ((($9)) + 26|0);
   $$0$i$idx = 0;
   while(1) {
    $$0$i$ptr = (($9) + ($$0$i$idx)|0);
    $37 = ($$0$i$idx|0)==(26);
    if ($37) {
     $$0$lcssa$i = $36;
     break;
    }
    $38 = HEAP8[$$0$i$ptr>>0]|0;
    $39 = ($38<<24>>24)==($0<<24>>24);
    $$0$i$add = (($$0$i$idx) + 1)|0;
    if ($39) {
     $$0$lcssa$i = $$0$i$ptr;
     break;
    } else {
     $$0$i$idx = $$0$i$add;
    }
   }
   $40 = $$0$lcssa$i;
   $41 = $9;
   $42 = (($40) - ($41))|0;
   $43 = ($42|0)>(23);
   if ($43) {
    $$1 = -1;
   } else {
    switch ($1|0) {
    case 10: case 8:  {
     $44 = ($42|0)<($1|0);
     if (!($44)) {
      $$1 = -1;
      break L6;
     }
     break;
    }
    case 16:  {
     $45 = ($42|0)<(22);
     if (!($45)) {
      if ($11) {
       $$1 = -1;
       break L6;
      }
      $46 = $10;
      $47 = $2;
      $48 = (($46) - ($47))|0;
      $49 = ($48|0)<(3);
      if (!($49)) {
       $$1 = -1;
       break L6;
      }
      $50 = ((($10)) + -1|0);
      $51 = HEAP8[$50>>0]|0;
      $52 = ($51<<24>>24)==(48);
      if (!($52)) {
       $$1 = -1;
       break L6;
      }
      HEAP32[$4>>2] = 0;
      $53 = (32626 + ($42)|0);
      $54 = HEAP8[$53>>0]|0;
      $55 = ((($10)) + 1|0);
      HEAP32[$3>>2] = $55;
      HEAP8[$10>>0] = $54;
      $$1 = 0;
      break L6;
     }
     break;
    }
    default: {
    }
    }
    $56 = (32626 + ($42)|0);
    $57 = HEAP8[$56>>0]|0;
    $58 = ((($10)) + 1|0);
    HEAP32[$3>>2] = $58;
    HEAP8[$10>>0] = $57;
    $59 = HEAP32[$4>>2]|0;
    $60 = (($59) + 1)|0;
    HEAP32[$4>>2] = $60;
    $$1 = 0;
   }
  }
 } while(0);
 return ($$1|0);
}
function __ZNSt3__26__clocEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[35696]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire(35696)|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_iiii(764,2147483647,(32662|0),(0|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     $8 = ___cxa_find_matching_catch_2()|0;
     $9 = tempRet0;
     ___resumeException($8|0);
     // unreachable;
    } else {
     HEAP32[10180] = $4;
     break;
    }
   }
  }
 } while(0);
 $7 = HEAP32[10180]|0;
 return ($7|0);
}
function __ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 $4 = (_uselocale($1)|0);
 $5 = (_vsscanf($0,$2,$3)|0);
 $6 = ($4|0)==(0|0);
 if (!($6)) {
  __THREW__ = 0;
  (invoke_ii(765,($4|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   $9 = ___cxa_find_matching_catch_3(0|0)|0;
   $10 = tempRet0;
   ___clang_call_terminate($9);
   // unreachable;
  }
 }
 STACKTOP = sp;return ($5|0);
}
function __ZNSt3__26locale2id5__getEv($0) {
 $0 = $0|0;
 var $$repack$i = 0, $$repack7$i = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $3 = sp;
 HEAP32[$3>>2] = $0;
 $$repack$i = ((($3)) + 4|0);
 HEAP32[$$repack$i>>2] = (766);
 $$repack7$i = ((($3)) + 8|0);
 HEAP32[$$repack7$i>>2] = 0;
 $4 = HEAP32[$0>>2]|0;
 $5 = ($4|0)==(-1);
 if (!($5)) {
  HEAP32[$1>>2] = $3;
  HEAP32[$2>>2] = $1;
  __ZNSt3__211__call_onceERVmPvPFvS2_E($0,$2,767);
 }
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -1)|0;
 STACKTOP = sp;return ($8|0);
}
function __ZNKSt3__26locale5__imp9use_facetEl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNKSt3__26locale5__imp9has_facetEl($0,$1)|0);
 if ($2) {
  $4 = ((($0)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + ($1<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  return ($7|0);
 } else {
  $3 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($3);
  ___cxa_throw(($3|0),(2928|0),(627|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZNKSt3__26locale5__imp9has_facetEl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$2>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)>($1>>>0);
 if ($8) {
  $9 = $5;
  $10 = (($9) + ($1<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(0|0);
  $13 = $12;
 } else {
  $13 = 0;
 }
 return ($13|0);
}
function __ZNSt3__26locale2id6__initEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[10181]|0;HEAP32[10181] = (($1+1)|0);
 $2 = (($1) + 1)|0;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $2;
 return;
}
function __ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($0) {
 $0 = $0|0;
 var $$elt$i$i$i$i = 0, $$elt1$i$i$i$i = 0, $$unpack$i$i$i$i = 0, $$unpack2$i$i$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $$elt$i$i$i$i = ((($2)) + 4|0);
 $$unpack$i$i$i$i = HEAP32[$$elt$i$i$i$i>>2]|0;
 $$elt1$i$i$i$i = ((($2)) + 8|0);
 $$unpack2$i$i$i$i = HEAP32[$$elt1$i$i$i$i>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $$unpack2$i$i$i$i >> 1;
 $5 = (($3) + ($4)|0);
 $6 = $$unpack2$i$i$i$i & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack$i$i$i$i;
  $12 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack$i$i$i$i)|0);
  $10 = HEAP32[$9>>2]|0;
  $12 = $10;
 }
 FUNCTION_TABLE_vi[$12 & 1023]($5);
 return;
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i46 = 0, $$018 = 0, $$1 = 0, $$119 = 0, $$121 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i26 = 0, $$pre$i3$i$i = 0, $$sink$index = 0, $$sink$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $exitcond$i$i = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $6 = sp + 200|0;
 $7 = sp + 199|0;
 $8 = sp + 198|0;
 $9 = sp + 184|0;
 $10 = sp + 172|0;
 $11 = sp + 168|0;
 $12 = sp + 8|0;
 $13 = sp + 4|0;
 $14 = sp;
 $15 = sp + 197|0;
 $16 = sp + 196|0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($9,$3,$6,$7,$8);
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $17 = (($10) + ($$0$i$i<<2)|0);
  HEAP32[$17>>2] = 0;
  $18 = (($$0$i$i) + 1)|0;
  $$0$i$i = $18;
 }
 $19 = ((($10)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 if ($21) {
  $22 = ((($10)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & 2147483647;
  $phitmp$i = (($24) + -1)|0;
  $25 = $phitmp$i;
 } else {
  $25 = 10;
 }
 __THREW__ = 0;
 invoke_viii(666,($10|0),($25|0),0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $85 = ___cxa_find_matching_catch_2()|0;
  $86 = tempRet0;
  $$1 = $85;$$121 = $86;
 } else {
  $28 = HEAP8[$19>>0]|0;
  $29 = ($28<<24>>24)<(0);
  $30 = HEAP32[$10>>2]|0;
  $31 = $29 ? $30 : $10;
  HEAP32[$11>>2] = $31;
  HEAP32[$13>>2] = $12;
  HEAP32[$14>>2] = 0;
  HEAP8[$15>>0] = 1;
  HEAP8[$16>>0] = 69;
  $32 = ((($10)) + 4|0);
  $33 = ((($10)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$018 = $31;$$pre$i$i$i26 = $$pre;
  L11: while(1) {
   $34 = ($$pre$i$i$i26|0)==(0|0);
   if ($34) {
    $$pre$i$i$i = 0;
   } else {
    $35 = ((($$pre$i$i$i26)) + 12|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($$pre$i$i$i26)) + 16|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($36|0)==($38|0);
    if ($39) {
     $40 = HEAP32[$$pre$i$i$i26>>2]|0;
     $41 = ((($40)) + 36|0);
     $42 = HEAP32[$41>>2]|0;
     __THREW__ = 0;
     $43 = (invoke_ii($42|0,($$pre$i$i$i26|0))|0);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      label = 28;
      break;
     }
     $46 = ($43|0)==(-1);
     if ($46) {
      HEAP32[$1>>2] = 0;
      $$pre$i$i$i = 0;
     } else {
      $$pre$i$i$i = $$pre$i$i$i26;
     }
    } else {
     $$pre$i$i$i = $$pre$i$i$i26;
    }
   }
   $47 = ($$pre$i$i$i|0)==(0|0);
   $48 = HEAP32[$2>>2]|0;
   $49 = ($48|0)==(0|0);
   do {
    if ($49) {
     label = 19;
    } else {
     $50 = ((($48)) + 12|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ((($48)) + 16|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($51|0)==($53|0);
     if (!($54)) {
      if ($47) {
       $172 = $48;
       break;
      } else {
       $$2 = $$018;$$pre$i3$i$i = $48;
       label = 38;
       break L11;
      }
     }
     $55 = HEAP32[$48>>2]|0;
     $56 = ((($55)) + 36|0);
     $57 = HEAP32[$56>>2]|0;
     __THREW__ = 0;
     $58 = (invoke_ii($57|0,($48|0))|0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 28;
      break L11;
     }
     $61 = ($58|0)==(-1);
     if ($61) {
      HEAP32[$2>>2] = 0;
      label = 19;
      break;
     } else {
      if ($47) {
       $172 = $48;
       break;
      } else {
       $$2 = $$018;$$pre$i3$i$i = $48;
       label = 38;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 19) {
    label = 0;
    if ($47) {
     $$2 = $$018;$$pre$i3$i$i = 0;
     label = 38;
     break;
    } else {
     $172 = 0;
    }
   }
   $62 = HEAP32[$11>>2]|0;
   $63 = HEAP8[$19>>0]|0;
   $64 = ($63<<24>>24)<(0);
   $65 = HEAP32[$32>>2]|0;
   $66 = $63&255;
   $67 = $64 ? $65 : $66;
   $68 = (($$018) + ($67)|0);
   $69 = ($62|0)==($68|0);
   if ($69) {
    $70 = $67 << 1;
    __THREW__ = 0;
    invoke_viii(666,($10|0),($70|0),0);
    $71 = __THREW__; __THREW__ = 0;
    $72 = $71&1;
    if ($72) {
     label = 30;
     break;
    }
    $73 = HEAP8[$19>>0]|0;
    $74 = ($73<<24>>24)<(0);
    if ($74) {
     $75 = HEAP32[$33>>2]|0;
     $76 = $75 & 2147483647;
     $phitmp$i41 = (($76) + -1)|0;
     $77 = $phitmp$i41;
    } else {
     $77 = 10;
    }
    __THREW__ = 0;
    invoke_viii(666,($10|0),($77|0),0);
    $78 = __THREW__; __THREW__ = 0;
    $79 = $78&1;
    if ($79) {
     label = 30;
     break;
    }
    $80 = HEAP8[$19>>0]|0;
    $81 = ($80<<24>>24)<(0);
    $82 = HEAP32[$10>>2]|0;
    $83 = $81 ? $82 : $10;
    $84 = (($83) + ($67)|0);
    HEAP32[$11>>2] = $84;
    $$119 = $83;
   } else {
    $$119 = $$018;
   }
   $93 = ((($$pre$i$i$i)) + 12|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = ((($$pre$i$i$i)) + 16|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = ($94|0)==($96|0);
   if ($97) {
    $98 = HEAP32[$$pre$i$i$i>>2]|0;
    $99 = ((($98)) + 36|0);
    $100 = HEAP32[$99>>2]|0;
    __THREW__ = 0;
    $101 = (invoke_ii($100|0,($$pre$i$i$i|0))|0);
    $102 = __THREW__; __THREW__ = 0;
    $103 = $102&1;
    if ($103) {
     label = 28;
     break;
    } else {
     $$0$i$i46 = $101;
    }
   } else {
    $104 = HEAP8[$94>>0]|0;
    $105 = $104&255;
    $$0$i$i46 = $105;
   }
   $106 = $$0$i$i46&255;
   $107 = HEAP8[$7>>0]|0;
   $108 = HEAP8[$8>>0]|0;
   $109 = (__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($106,$15,$16,$$119,$11,$107,$108,$9,$12,$13,$14,$6)|0);
   $110 = ($109|0)==(0);
   if (!($110)) {
    $$2 = $$119;$$pre$i3$i$i = $172;
    label = 38;
    break;
   }
   $111 = HEAP32[$93>>2]|0;
   $112 = HEAP32[$95>>2]|0;
   $113 = ($111|0)==($112|0);
   if ($113) {
    $114 = HEAP32[$$pre$i$i$i>>2]|0;
    $115 = ((($114)) + 40|0);
    $116 = HEAP32[$115>>2]|0;
    __THREW__ = 0;
    (invoke_ii($116|0,($$pre$i$i$i|0))|0);
    $117 = __THREW__; __THREW__ = 0;
    $118 = $117&1;
    if ($118) {
     label = 28;
     break;
    } else {
     $$018 = $$119;$$pre$i$i$i26 = $$pre$i$i$i;
     continue;
    }
   } else {
    $119 = ((($111)) + 1|0);
    HEAP32[$93>>2] = $119;
    $$018 = $$119;$$pre$i$i$i26 = $$pre$i$i$i;
    continue;
   }
  }
  if ((label|0) == 28) {
   $87 = ___cxa_find_matching_catch_2()|0;
   $88 = tempRet0;
   $$sink$index = $87;$$sink$index3 = $88;
  }
  else if ((label|0) == 30) {
   $91 = ___cxa_find_matching_catch_2()|0;
   $92 = tempRet0;
   $$sink$index = $91;$$sink$index3 = $92;
  }
  else if ((label|0) == 38) {
   $120 = ((($9)) + 11|0);
   $121 = HEAP8[$120>>0]|0;
   $122 = ($121<<24>>24)<(0);
   $123 = ((($9)) + 4|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = $121&255;
   $126 = $122 ? $124 : $125;
   $127 = ($126|0)==(0);
   $128 = HEAP8[$15>>0]|0;
   $129 = ($128<<24>>24)==(0);
   $or$cond = $127 | $129;
   if (!($or$cond)) {
    $130 = HEAP32[$13>>2]|0;
    $131 = $130;
    $132 = $12;
    $133 = (($131) - ($132))|0;
    $134 = ($133|0)<(160);
    if ($134) {
     $135 = HEAP32[$14>>2]|0;
     $136 = ((($130)) + 4|0);
     HEAP32[$13>>2] = $136;
     HEAP32[$130>>2] = $135;
    }
   }
   $137 = HEAP32[$11>>2]|0;
   __THREW__ = 0;
   $138 = (+invoke_diii(768,($$2|0),($137|0),($4|0)));
   $139 = __THREW__; __THREW__ = 0;
   $140 = $139&1;
   L54: do {
    if (!($140)) {
     HEAPF64[$5>>3] = $138;
     $141 = HEAP32[$13>>2]|0;
     __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($9,$12,$141,$4);
     $142 = ($$pre$i$i$i|0)==(0|0);
     if ($142) {
      $155 = 0;
     } else {
      $143 = ((($$pre$i$i$i)) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$pre$i$i$i)) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i$i$i>>2]|0;
       $149 = ((($148)) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        break;
       }
       $154 = ($151|0)==(-1);
       if ($154) {
        HEAP32[$1>>2] = 0;
        $155 = 0;
       } else {
        $155 = $$pre$i$i$i;
       }
      } else {
       $155 = $$pre$i$i$i;
      }
     }
     $156 = ($155|0)==(0|0);
     $157 = ($$pre$i3$i$i|0)==(0|0);
     do {
      if ($157) {
       label = 53;
      } else {
       $158 = ((($$pre$i3$i$i)) + 12|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ((($$pre$i3$i$i)) + 16|0);
       $161 = HEAP32[$160>>2]|0;
       $162 = ($159|0)==($161|0);
       if ($162) {
        $163 = HEAP32[$$pre$i3$i$i>>2]|0;
        $164 = ((($163)) + 36|0);
        $165 = HEAP32[$164>>2]|0;
        __THREW__ = 0;
        $166 = (invoke_ii($165|0,($$pre$i3$i$i|0))|0);
        $167 = __THREW__; __THREW__ = 0;
        $168 = $167&1;
        if ($168) {
         break L54;
        }
        $169 = ($166|0)==(-1);
        if ($169) {
         HEAP32[$2>>2] = 0;
         label = 53;
         break;
        }
       }
       if (!($156)) {
        label = 54;
       }
      }
     } while(0);
     if ((label|0) == 53) {
      if ($156) {
       label = 54;
      }
     }
     if ((label|0) == 54) {
      $170 = HEAP32[$4>>2]|0;
      $171 = $170 | 2;
      HEAP32[$4>>2] = $171;
     }
     $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
     STACKTOP = sp;return ($$sroa$0$0$copyload|0);
    }
   } while(0);
   $89 = ___cxa_find_matching_catch_2()|0;
   $90 = tempRet0;
   $$sink$index = $89;$$sink$index3 = $90;
  }
  $$1 = $$sink$index;$$121 = $$sink$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink$index = 0, $$sink$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 $6 = (__ZNKSt3__28ios_base6getlocEv($1)|0);
 HEAP32[$5>>2] = $6;
 __THREW__ = 0;
 $7 = (invoke_iii(659,($5|0),(40712|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  label = 8;
 } else {
  $10 = HEAP32[$7>>2]|0;
  $11 = ((($10)) + 32|0);
  $12 = HEAP32[$11>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($12|0,($7|0),(32626|0),((32658)|0),($2|0))|0);
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if ($14) {
   label = 8;
  } else {
   __THREW__ = 0;
   $15 = (invoke_iii(659,($5|0),(40728|0))|0);
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   if ($17) {
    label = 8;
   } else {
    $18 = HEAP32[$15>>2]|0;
    $19 = ((($18)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    __THREW__ = 0;
    $21 = (invoke_ii($20|0,($15|0))|0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if (!($23)) {
     HEAP8[$3>>0] = $21;
     $24 = HEAP32[$15>>2]|0;
     $25 = ((($24)) + 16|0);
     $26 = HEAP32[$25>>2]|0;
     __THREW__ = 0;
     $27 = (invoke_ii($26|0,($15|0))|0);
     $28 = __THREW__; __THREW__ = 0;
     $29 = $28&1;
     if (!($29)) {
      HEAP8[$4>>0] = $27;
      $30 = HEAP32[$15>>2]|0;
      $31 = ((($30)) + 20|0);
      $32 = HEAP32[$31>>2]|0;
      __THREW__ = 0;
      invoke_vii($32|0,($0|0),($15|0));
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      if (!($34)) {
       (__ZNSt3__214__shared_count16__release_sharedEv($6)|0);
       STACKTOP = sp;return;
      }
     }
    }
    $37 = ___cxa_find_matching_catch_2()|0;
    $38 = tempRet0;
    $$sink$index = $37;$$sink$index2 = $38;
   }
  }
 }
 if ((label|0) == 8) {
  $35 = ___cxa_find_matching_catch_2()|0;
  $36 = tempRet0;
  $$sink$index = $35;$$sink$index2 = $36;
 }
 (__ZNSt3__214__shared_count16__release_sharedEv($6)|0);
 ___resumeException($$sink$index|0);
 // unreachable;
}
function __ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 var $$0$i$add = 0, $$0$i$idx = 0, $$0$i$ptr = 0, $$0$lcssa$i = 0, $$2 = 0, $100 = 0, $101 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $12 = ($0<<24>>24)==($5<<24>>24);
 L1: do {
  if ($12) {
   $13 = HEAP8[$1>>0]|0;
   $14 = ($13<<24>>24)==(0);
   if ($14) {
    $$2 = -1;
   } else {
    HEAP8[$1>>0] = 0;
    $15 = HEAP32[$4>>2]|0;
    $16 = ((($15)) + 1|0);
    HEAP32[$4>>2] = $16;
    HEAP8[$15>>0] = 46;
    $17 = ((($7)) + 11|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = ($18<<24>>24)<(0);
    $20 = ((($7)) + 4|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $18&255;
    $23 = $19 ? $21 : $22;
    $24 = ($23|0)==(0);
    if ($24) {
     $$2 = 0;
    } else {
     $25 = HEAP32[$9>>2]|0;
     $26 = $25;
     $27 = $8;
     $28 = (($26) - ($27))|0;
     $29 = ($28|0)<(160);
     if ($29) {
      $30 = HEAP32[$10>>2]|0;
      $31 = ((($25)) + 4|0);
      HEAP32[$9>>2] = $31;
      HEAP32[$25>>2] = $30;
      $$2 = 0;
     } else {
      $$2 = 0;
     }
    }
   }
  } else {
   $32 = ($0<<24>>24)==($6<<24>>24);
   if ($32) {
    $33 = ((($7)) + 11|0);
    $34 = HEAP8[$33>>0]|0;
    $35 = ($34<<24>>24)<(0);
    $36 = ((($7)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $34&255;
    $39 = $35 ? $37 : $38;
    $40 = ($39|0)==(0);
    if (!($40)) {
     $41 = HEAP8[$1>>0]|0;
     $42 = ($41<<24>>24)==(0);
     if ($42) {
      $$2 = -1;
      break;
     }
     $43 = HEAP32[$9>>2]|0;
     $44 = $43;
     $45 = $8;
     $46 = (($44) - ($45))|0;
     $47 = ($46|0)<(160);
     if (!($47)) {
      $$2 = 0;
      break;
     }
     $48 = HEAP32[$10>>2]|0;
     $49 = ((($43)) + 4|0);
     HEAP32[$9>>2] = $49;
     HEAP32[$43>>2] = $48;
     HEAP32[$10>>2] = 0;
     $$2 = 0;
     break;
    }
   }
   $50 = ((($11)) + 32|0);
   $$0$i$idx = 0;
   while(1) {
    $$0$i$ptr = (($11) + ($$0$i$idx)|0);
    $51 = ($$0$i$idx|0)==(32);
    if ($51) {
     $$0$lcssa$i = $50;
     break;
    }
    $52 = HEAP8[$$0$i$ptr>>0]|0;
    $53 = ($52<<24>>24)==($0<<24>>24);
    $$0$i$add = (($$0$i$idx) + 1)|0;
    if ($53) {
     $$0$lcssa$i = $$0$i$ptr;
     break;
    } else {
     $$0$i$idx = $$0$i$add;
    }
   }
   $54 = $$0$lcssa$i;
   $55 = $11;
   $56 = (($54) - ($55))|0;
   $57 = ($56|0)>(31);
   if ($57) {
    $$2 = -1;
   } else {
    $58 = (32626 + ($56)|0);
    $59 = HEAP8[$58>>0]|0;
    switch ($56|0) {
    case 24: case 25:  {
     $60 = HEAP32[$4>>2]|0;
     $61 = ($60|0)==($3|0);
     if (!($61)) {
      $62 = ((($60)) + -1|0);
      $63 = HEAP8[$62>>0]|0;
      $64 = $63&255;
      $65 = $64 & 95;
      $66 = HEAP8[$2>>0]|0;
      $67 = $66&255;
      $68 = $67 & 127;
      $69 = ($65|0)==($68|0);
      if (!($69)) {
       $$2 = -1;
       break L1;
      }
     }
     $70 = ((($60)) + 1|0);
     HEAP32[$4>>2] = $70;
     HEAP8[$60>>0] = $59;
     $$2 = 0;
     break L1;
     break;
    }
    case 23: case 22:  {
     HEAP8[$2>>0] = 80;
     $71 = HEAP32[$4>>2]|0;
     $72 = ((($71)) + 1|0);
     HEAP32[$4>>2] = $72;
     HEAP8[$71>>0] = $59;
     $$2 = 0;
     break L1;
     break;
    }
    default: {
     $73 = $59&255;
     $74 = $73 & 95;
     $75 = HEAP8[$2>>0]|0;
     $76 = $75 << 24 >> 24;
     $77 = ($74|0)==($76|0);
     if ($77) {
      $78 = $74 | 128;
      $79 = $78&255;
      HEAP8[$2>>0] = $79;
      $80 = HEAP8[$1>>0]|0;
      $81 = ($80<<24>>24)==(0);
      if (!($81)) {
       HEAP8[$1>>0] = 0;
       $82 = ((($7)) + 11|0);
       $83 = HEAP8[$82>>0]|0;
       $84 = ($83<<24>>24)<(0);
       $85 = ((($7)) + 4|0);
       $86 = HEAP32[$85>>2]|0;
       $87 = $83&255;
       $88 = $84 ? $86 : $87;
       $89 = ($88|0)==(0);
       if (!($89)) {
        $90 = HEAP32[$9>>2]|0;
        $91 = $90;
        $92 = $8;
        $93 = (($91) - ($92))|0;
        $94 = ($93|0)<(160);
        if ($94) {
         $95 = HEAP32[$10>>2]|0;
         $96 = ((($90)) + 4|0);
         HEAP32[$9>>2] = $96;
         HEAP32[$90>>2] = $95;
        }
       }
      }
     }
     $97 = HEAP32[$4>>2]|0;
     $98 = ((($97)) + 1|0);
     HEAP32[$4>>2] = $98;
     HEAP8[$97>>0] = $59;
     $99 = ($56|0)>(21);
     if ($99) {
      $$2 = 0;
      break L1;
     }
     $100 = HEAP32[$10>>2]|0;
     $101 = (($100) + 1)|0;
     HEAP32[$10>>2] = $101;
     $$2 = 0;
     break L1;
    }
    }
   }
  }
 } while(0);
 return ($$2|0);
}
function __ZNSt3__215__num_get_floatIeEET_PKcS3_Rj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0.0, $$1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($0|0)==($1|0);
 if ($4) {
  HEAP32[$2>>2] = 4;
  $$1 = 0.0;
 } else {
  $5 = (___errno_location()|0);
  $6 = HEAP32[$5>>2]|0;
  HEAP32[$5>>2] = 0;
  $7 = (__ZNSt3__26__clocEv()|0);
  $8 = (+_strtold_l($0,$3,$7));
  $9 = HEAP32[$5>>2]|0;
  $10 = ($9|0)==(0);
  if ($10) {
   HEAP32[$5>>2] = $6;
  }
  $11 = HEAP32[$3>>2]|0;
  $12 = ($11|0)==($1|0);
  if ($12) {
   $13 = ($9|0)==(34);
   if ($13) {
    HEAP32[$2>>2] = 4;
    $$0 = $8;
   } else {
    $$0 = $8;
   }
  } else {
   HEAP32[$2>>2] = 4;
   $$0 = 0.0;
  }
  $$1 = $$0;
 }
 STACKTOP = sp;return (+$$1);
}
function __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$030 = 0, $$0$i$i = 0, $$029 = 0, $$030 = 0, $$07$i$i = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $5&255;
 $10 = $6 ? $8 : $9;
 $11 = ($10|0)==(0);
 do {
  if (!($11)) {
   $12 = ($1|0)==($2|0);
   if ($12) {
    $20 = $8;
   } else {
    $$0$i$i = $2;$$07$i$i = $1;
    while(1) {
     $13 = ((($$0$i$i)) + -4|0);
     $14 = ($$07$i$i>>>0)<($13>>>0);
     if (!($14)) {
      break;
     }
     $15 = HEAP32[$$07$i$i>>2]|0;
     $16 = HEAP32[$13>>2]|0;
     HEAP32[$$07$i$i>>2] = $16;
     HEAP32[$13>>2] = $15;
     $17 = ((($$07$i$i)) + 4|0);
     $$0$i$i = $13;$$07$i$i = $17;
    }
    $$pre = HEAP32[$7>>2]|0;
    $20 = $$pre;
   }
   $18 = HEAP32[$0>>2]|0;
   $19 = $6 ? $18 : $0;
   $21 = $6 ? $20 : $9;
   $22 = (($19) + ($21)|0);
   $23 = ((($2)) + -4|0);
   $24 = $22;
   $$029 = $1;$$030 = $19;
   while(1) {
    $25 = ($$029>>>0)<($23>>>0);
    $26 = HEAP8[$$030>>0]|0;
    $27 = ($26<<24>>24)>(0);
    $28 = ($26<<24>>24)!=(127);
    $or$cond32 = $27 & $28;
    if (!($25)) {
     break;
    }
    if ($or$cond32) {
     $29 = $26 << 24 >> 24;
     $30 = HEAP32[$$029>>2]|0;
     $31 = ($29|0)==($30|0);
     if (!($31)) {
      label = 10;
      break;
     }
    }
    $32 = $$030;
    $33 = (($24) - ($32))|0;
    $34 = ($33|0)>(1);
    $35 = ((($$030)) + 1|0);
    $$$030 = $34 ? $35 : $$030;
    $36 = ((($$029)) + 4|0);
    $$029 = $36;$$030 = $$$030;
   }
   if ((label|0) == 10) {
    HEAP32[$3>>2] = 4;
    break;
   }
   if ($or$cond32) {
    $37 = $26 << 24 >> 24;
    $38 = HEAP32[$23>>2]|0;
    $39 = (($38) + -1)|0;
    $40 = ($39>>>0)<($37>>>0);
    if (!($40)) {
     HEAP32[$3>>2] = 4;
    }
   }
  }
 } while(0);
 return;
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i46 = 0, $$018 = 0, $$1 = 0, $$119 = 0, $$121 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i26 = 0, $$pre$i3$i$i = 0, $$sink$index = 0, $$sink$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $exitcond$i$i = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $6 = sp + 200|0;
 $7 = sp + 199|0;
 $8 = sp + 198|0;
 $9 = sp + 184|0;
 $10 = sp + 172|0;
 $11 = sp + 168|0;
 $12 = sp + 8|0;
 $13 = sp + 4|0;
 $14 = sp;
 $15 = sp + 197|0;
 $16 = sp + 196|0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($9,$3,$6,$7,$8);
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $17 = (($10) + ($$0$i$i<<2)|0);
  HEAP32[$17>>2] = 0;
  $18 = (($$0$i$i) + 1)|0;
  $$0$i$i = $18;
 }
 $19 = ((($10)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 if ($21) {
  $22 = ((($10)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & 2147483647;
  $phitmp$i = (($24) + -1)|0;
  $25 = $phitmp$i;
 } else {
  $25 = 10;
 }
 __THREW__ = 0;
 invoke_viii(666,($10|0),($25|0),0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $85 = ___cxa_find_matching_catch_2()|0;
  $86 = tempRet0;
  $$1 = $85;$$121 = $86;
 } else {
  $28 = HEAP8[$19>>0]|0;
  $29 = ($28<<24>>24)<(0);
  $30 = HEAP32[$10>>2]|0;
  $31 = $29 ? $30 : $10;
  HEAP32[$11>>2] = $31;
  HEAP32[$13>>2] = $12;
  HEAP32[$14>>2] = 0;
  HEAP8[$15>>0] = 1;
  HEAP8[$16>>0] = 69;
  $32 = ((($10)) + 4|0);
  $33 = ((($10)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$018 = $31;$$pre$i$i$i26 = $$pre;
  L11: while(1) {
   $34 = ($$pre$i$i$i26|0)==(0|0);
   if ($34) {
    $$pre$i$i$i = 0;
   } else {
    $35 = ((($$pre$i$i$i26)) + 12|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($$pre$i$i$i26)) + 16|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($36|0)==($38|0);
    if ($39) {
     $40 = HEAP32[$$pre$i$i$i26>>2]|0;
     $41 = ((($40)) + 36|0);
     $42 = HEAP32[$41>>2]|0;
     __THREW__ = 0;
     $43 = (invoke_ii($42|0,($$pre$i$i$i26|0))|0);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      label = 28;
      break;
     }
     $46 = ($43|0)==(-1);
     if ($46) {
      HEAP32[$1>>2] = 0;
      $$pre$i$i$i = 0;
     } else {
      $$pre$i$i$i = $$pre$i$i$i26;
     }
    } else {
     $$pre$i$i$i = $$pre$i$i$i26;
    }
   }
   $47 = ($$pre$i$i$i|0)==(0|0);
   $48 = HEAP32[$2>>2]|0;
   $49 = ($48|0)==(0|0);
   do {
    if ($49) {
     label = 19;
    } else {
     $50 = ((($48)) + 12|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ((($48)) + 16|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($51|0)==($53|0);
     if (!($54)) {
      if ($47) {
       $172 = $48;
       break;
      } else {
       $$2 = $$018;$$pre$i3$i$i = $48;
       label = 38;
       break L11;
      }
     }
     $55 = HEAP32[$48>>2]|0;
     $56 = ((($55)) + 36|0);
     $57 = HEAP32[$56>>2]|0;
     __THREW__ = 0;
     $58 = (invoke_ii($57|0,($48|0))|0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 28;
      break L11;
     }
     $61 = ($58|0)==(-1);
     if ($61) {
      HEAP32[$2>>2] = 0;
      label = 19;
      break;
     } else {
      if ($47) {
       $172 = $48;
       break;
      } else {
       $$2 = $$018;$$pre$i3$i$i = $48;
       label = 38;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 19) {
    label = 0;
    if ($47) {
     $$2 = $$018;$$pre$i3$i$i = 0;
     label = 38;
     break;
    } else {
     $172 = 0;
    }
   }
   $62 = HEAP32[$11>>2]|0;
   $63 = HEAP8[$19>>0]|0;
   $64 = ($63<<24>>24)<(0);
   $65 = HEAP32[$32>>2]|0;
   $66 = $63&255;
   $67 = $64 ? $65 : $66;
   $68 = (($$018) + ($67)|0);
   $69 = ($62|0)==($68|0);
   if ($69) {
    $70 = $67 << 1;
    __THREW__ = 0;
    invoke_viii(666,($10|0),($70|0),0);
    $71 = __THREW__; __THREW__ = 0;
    $72 = $71&1;
    if ($72) {
     label = 30;
     break;
    }
    $73 = HEAP8[$19>>0]|0;
    $74 = ($73<<24>>24)<(0);
    if ($74) {
     $75 = HEAP32[$33>>2]|0;
     $76 = $75 & 2147483647;
     $phitmp$i41 = (($76) + -1)|0;
     $77 = $phitmp$i41;
    } else {
     $77 = 10;
    }
    __THREW__ = 0;
    invoke_viii(666,($10|0),($77|0),0);
    $78 = __THREW__; __THREW__ = 0;
    $79 = $78&1;
    if ($79) {
     label = 30;
     break;
    }
    $80 = HEAP8[$19>>0]|0;
    $81 = ($80<<24>>24)<(0);
    $82 = HEAP32[$10>>2]|0;
    $83 = $81 ? $82 : $10;
    $84 = (($83) + ($67)|0);
    HEAP32[$11>>2] = $84;
    $$119 = $83;
   } else {
    $$119 = $$018;
   }
   $93 = ((($$pre$i$i$i)) + 12|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = ((($$pre$i$i$i)) + 16|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = ($94|0)==($96|0);
   if ($97) {
    $98 = HEAP32[$$pre$i$i$i>>2]|0;
    $99 = ((($98)) + 36|0);
    $100 = HEAP32[$99>>2]|0;
    __THREW__ = 0;
    $101 = (invoke_ii($100|0,($$pre$i$i$i|0))|0);
    $102 = __THREW__; __THREW__ = 0;
    $103 = $102&1;
    if ($103) {
     label = 28;
     break;
    } else {
     $$0$i$i46 = $101;
    }
   } else {
    $104 = HEAP8[$94>>0]|0;
    $105 = $104&255;
    $$0$i$i46 = $105;
   }
   $106 = $$0$i$i46&255;
   $107 = HEAP8[$7>>0]|0;
   $108 = HEAP8[$8>>0]|0;
   $109 = (__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($106,$15,$16,$$119,$11,$107,$108,$9,$12,$13,$14,$6)|0);
   $110 = ($109|0)==(0);
   if (!($110)) {
    $$2 = $$119;$$pre$i3$i$i = $172;
    label = 38;
    break;
   }
   $111 = HEAP32[$93>>2]|0;
   $112 = HEAP32[$95>>2]|0;
   $113 = ($111|0)==($112|0);
   if ($113) {
    $114 = HEAP32[$$pre$i$i$i>>2]|0;
    $115 = ((($114)) + 40|0);
    $116 = HEAP32[$115>>2]|0;
    __THREW__ = 0;
    (invoke_ii($116|0,($$pre$i$i$i|0))|0);
    $117 = __THREW__; __THREW__ = 0;
    $118 = $117&1;
    if ($118) {
     label = 28;
     break;
    } else {
     $$018 = $$119;$$pre$i$i$i26 = $$pre$i$i$i;
     continue;
    }
   } else {
    $119 = ((($111)) + 1|0);
    HEAP32[$93>>2] = $119;
    $$018 = $$119;$$pre$i$i$i26 = $$pre$i$i$i;
    continue;
   }
  }
  if ((label|0) == 28) {
   $87 = ___cxa_find_matching_catch_2()|0;
   $88 = tempRet0;
   $$sink$index = $87;$$sink$index3 = $88;
  }
  else if ((label|0) == 30) {
   $91 = ___cxa_find_matching_catch_2()|0;
   $92 = tempRet0;
   $$sink$index = $91;$$sink$index3 = $92;
  }
  else if ((label|0) == 38) {
   $120 = ((($9)) + 11|0);
   $121 = HEAP8[$120>>0]|0;
   $122 = ($121<<24>>24)<(0);
   $123 = ((($9)) + 4|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = $121&255;
   $126 = $122 ? $124 : $125;
   $127 = ($126|0)==(0);
   $128 = HEAP8[$15>>0]|0;
   $129 = ($128<<24>>24)==(0);
   $or$cond = $127 | $129;
   if (!($or$cond)) {
    $130 = HEAP32[$13>>2]|0;
    $131 = $130;
    $132 = $12;
    $133 = (($131) - ($132))|0;
    $134 = ($133|0)<(160);
    if ($134) {
     $135 = HEAP32[$14>>2]|0;
     $136 = ((($130)) + 4|0);
     HEAP32[$13>>2] = $136;
     HEAP32[$130>>2] = $135;
    }
   }
   $137 = HEAP32[$11>>2]|0;
   __THREW__ = 0;
   $138 = (+invoke_diii(769,($$2|0),($137|0),($4|0)));
   $139 = __THREW__; __THREW__ = 0;
   $140 = $139&1;
   L54: do {
    if (!($140)) {
     HEAPF64[$5>>3] = $138;
     $141 = HEAP32[$13>>2]|0;
     __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($9,$12,$141,$4);
     $142 = ($$pre$i$i$i|0)==(0|0);
     if ($142) {
      $155 = 0;
     } else {
      $143 = ((($$pre$i$i$i)) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$pre$i$i$i)) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i$i$i>>2]|0;
       $149 = ((($148)) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        break;
       }
       $154 = ($151|0)==(-1);
       if ($154) {
        HEAP32[$1>>2] = 0;
        $155 = 0;
       } else {
        $155 = $$pre$i$i$i;
       }
      } else {
       $155 = $$pre$i$i$i;
      }
     }
     $156 = ($155|0)==(0|0);
     $157 = ($$pre$i3$i$i|0)==(0|0);
     do {
      if ($157) {
       label = 53;
      } else {
       $158 = ((($$pre$i3$i$i)) + 12|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ((($$pre$i3$i$i)) + 16|0);
       $161 = HEAP32[$160>>2]|0;
       $162 = ($159|0)==($161|0);
       if ($162) {
        $163 = HEAP32[$$pre$i3$i$i>>2]|0;
        $164 = ((($163)) + 36|0);
        $165 = HEAP32[$164>>2]|0;
        __THREW__ = 0;
        $166 = (invoke_ii($165|0,($$pre$i3$i$i|0))|0);
        $167 = __THREW__; __THREW__ = 0;
        $168 = $167&1;
        if ($168) {
         break L54;
        }
        $169 = ($166|0)==(-1);
        if ($169) {
         HEAP32[$2>>2] = 0;
         label = 53;
         break;
        }
       }
       if (!($156)) {
        label = 54;
       }
      }
     } while(0);
     if ((label|0) == 53) {
      if ($156) {
       label = 54;
      }
     }
     if ((label|0) == 54) {
      $170 = HEAP32[$4>>2]|0;
      $171 = $170 | 2;
      HEAP32[$4>>2] = $171;
     }
     $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
     STACKTOP = sp;return ($$sroa$0$0$copyload|0);
    }
   } while(0);
   $89 = ___cxa_find_matching_catch_2()|0;
   $90 = tempRet0;
   $$sink$index = $89;$$sink$index3 = $90;
  }
  $$1 = $$sink$index;$$121 = $$sink$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__215__num_get_floatIdEET_PKcS3_Rj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0.0, $$1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($0|0)==($1|0);
 if ($4) {
  HEAP32[$2>>2] = 4;
  $$1 = 0.0;
 } else {
  $5 = (___errno_location()|0);
  $6 = HEAP32[$5>>2]|0;
  HEAP32[$5>>2] = 0;
  $7 = (__ZNSt3__26__clocEv()|0);
  $8 = (+_strtold_l($0,$3,$7));
  $9 = HEAP32[$5>>2]|0;
  $10 = ($9|0)==(0);
  if ($10) {
   HEAP32[$5>>2] = $6;
  }
  $11 = HEAP32[$3>>2]|0;
  $12 = ($11|0)==($1|0);
  if ($12) {
   $13 = ($9|0)==(34);
   if ($13) {
    HEAP32[$2>>2] = 4;
    $$0 = $8;
   } else {
    $$0 = $8;
   }
  } else {
   HEAP32[$2>>2] = 4;
   $$0 = 0.0;
  }
  $$1 = $$0;
 }
 STACKTOP = sp;return (+$$1);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i46 = 0, $$018 = 0, $$1 = 0, $$119 = 0, $$121 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i26 = 0, $$pre$i3$i$i = 0, $$sink$index = 0, $$sink$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $exitcond$i$i = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $6 = sp + 200|0;
 $7 = sp + 199|0;
 $8 = sp + 198|0;
 $9 = sp + 184|0;
 $10 = sp + 172|0;
 $11 = sp + 168|0;
 $12 = sp + 8|0;
 $13 = sp + 4|0;
 $14 = sp;
 $15 = sp + 197|0;
 $16 = sp + 196|0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($9,$3,$6,$7,$8);
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $17 = (($10) + ($$0$i$i<<2)|0);
  HEAP32[$17>>2] = 0;
  $18 = (($$0$i$i) + 1)|0;
  $$0$i$i = $18;
 }
 $19 = ((($10)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 if ($21) {
  $22 = ((($10)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & 2147483647;
  $phitmp$i = (($24) + -1)|0;
  $25 = $phitmp$i;
 } else {
  $25 = 10;
 }
 __THREW__ = 0;
 invoke_viii(666,($10|0),($25|0),0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $85 = ___cxa_find_matching_catch_2()|0;
  $86 = tempRet0;
  $$1 = $85;$$121 = $86;
 } else {
  $28 = HEAP8[$19>>0]|0;
  $29 = ($28<<24>>24)<(0);
  $30 = HEAP32[$10>>2]|0;
  $31 = $29 ? $30 : $10;
  HEAP32[$11>>2] = $31;
  HEAP32[$13>>2] = $12;
  HEAP32[$14>>2] = 0;
  HEAP8[$15>>0] = 1;
  HEAP8[$16>>0] = 69;
  $32 = ((($10)) + 4|0);
  $33 = ((($10)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$018 = $31;$$pre$i$i$i26 = $$pre;
  L11: while(1) {
   $34 = ($$pre$i$i$i26|0)==(0|0);
   if ($34) {
    $$pre$i$i$i = 0;
   } else {
    $35 = ((($$pre$i$i$i26)) + 12|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($$pre$i$i$i26)) + 16|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($36|0)==($38|0);
    if ($39) {
     $40 = HEAP32[$$pre$i$i$i26>>2]|0;
     $41 = ((($40)) + 36|0);
     $42 = HEAP32[$41>>2]|0;
     __THREW__ = 0;
     $43 = (invoke_ii($42|0,($$pre$i$i$i26|0))|0);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      label = 28;
      break;
     }
     $46 = ($43|0)==(-1);
     if ($46) {
      HEAP32[$1>>2] = 0;
      $$pre$i$i$i = 0;
     } else {
      $$pre$i$i$i = $$pre$i$i$i26;
     }
    } else {
     $$pre$i$i$i = $$pre$i$i$i26;
    }
   }
   $47 = ($$pre$i$i$i|0)==(0|0);
   $48 = HEAP32[$2>>2]|0;
   $49 = ($48|0)==(0|0);
   do {
    if ($49) {
     label = 19;
    } else {
     $50 = ((($48)) + 12|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ((($48)) + 16|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($51|0)==($53|0);
     if (!($54)) {
      if ($47) {
       $172 = $48;
       break;
      } else {
       $$2 = $$018;$$pre$i3$i$i = $48;
       label = 38;
       break L11;
      }
     }
     $55 = HEAP32[$48>>2]|0;
     $56 = ((($55)) + 36|0);
     $57 = HEAP32[$56>>2]|0;
     __THREW__ = 0;
     $58 = (invoke_ii($57|0,($48|0))|0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 28;
      break L11;
     }
     $61 = ($58|0)==(-1);
     if ($61) {
      HEAP32[$2>>2] = 0;
      label = 19;
      break;
     } else {
      if ($47) {
       $172 = $48;
       break;
      } else {
       $$2 = $$018;$$pre$i3$i$i = $48;
       label = 38;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 19) {
    label = 0;
    if ($47) {
     $$2 = $$018;$$pre$i3$i$i = 0;
     label = 38;
     break;
    } else {
     $172 = 0;
    }
   }
   $62 = HEAP32[$11>>2]|0;
   $63 = HEAP8[$19>>0]|0;
   $64 = ($63<<24>>24)<(0);
   $65 = HEAP32[$32>>2]|0;
   $66 = $63&255;
   $67 = $64 ? $65 : $66;
   $68 = (($$018) + ($67)|0);
   $69 = ($62|0)==($68|0);
   if ($69) {
    $70 = $67 << 1;
    __THREW__ = 0;
    invoke_viii(666,($10|0),($70|0),0);
    $71 = __THREW__; __THREW__ = 0;
    $72 = $71&1;
    if ($72) {
     label = 30;
     break;
    }
    $73 = HEAP8[$19>>0]|0;
    $74 = ($73<<24>>24)<(0);
    if ($74) {
     $75 = HEAP32[$33>>2]|0;
     $76 = $75 & 2147483647;
     $phitmp$i41 = (($76) + -1)|0;
     $77 = $phitmp$i41;
    } else {
     $77 = 10;
    }
    __THREW__ = 0;
    invoke_viii(666,($10|0),($77|0),0);
    $78 = __THREW__; __THREW__ = 0;
    $79 = $78&1;
    if ($79) {
     label = 30;
     break;
    }
    $80 = HEAP8[$19>>0]|0;
    $81 = ($80<<24>>24)<(0);
    $82 = HEAP32[$10>>2]|0;
    $83 = $81 ? $82 : $10;
    $84 = (($83) + ($67)|0);
    HEAP32[$11>>2] = $84;
    $$119 = $83;
   } else {
    $$119 = $$018;
   }
   $93 = ((($$pre$i$i$i)) + 12|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = ((($$pre$i$i$i)) + 16|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = ($94|0)==($96|0);
   if ($97) {
    $98 = HEAP32[$$pre$i$i$i>>2]|0;
    $99 = ((($98)) + 36|0);
    $100 = HEAP32[$99>>2]|0;
    __THREW__ = 0;
    $101 = (invoke_ii($100|0,($$pre$i$i$i|0))|0);
    $102 = __THREW__; __THREW__ = 0;
    $103 = $102&1;
    if ($103) {
     label = 28;
     break;
    } else {
     $$0$i$i46 = $101;
    }
   } else {
    $104 = HEAP8[$94>>0]|0;
    $105 = $104&255;
    $$0$i$i46 = $105;
   }
   $106 = $$0$i$i46&255;
   $107 = HEAP8[$7>>0]|0;
   $108 = HEAP8[$8>>0]|0;
   $109 = (__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($106,$15,$16,$$119,$11,$107,$108,$9,$12,$13,$14,$6)|0);
   $110 = ($109|0)==(0);
   if (!($110)) {
    $$2 = $$119;$$pre$i3$i$i = $172;
    label = 38;
    break;
   }
   $111 = HEAP32[$93>>2]|0;
   $112 = HEAP32[$95>>2]|0;
   $113 = ($111|0)==($112|0);
   if ($113) {
    $114 = HEAP32[$$pre$i$i$i>>2]|0;
    $115 = ((($114)) + 40|0);
    $116 = HEAP32[$115>>2]|0;
    __THREW__ = 0;
    (invoke_ii($116|0,($$pre$i$i$i|0))|0);
    $117 = __THREW__; __THREW__ = 0;
    $118 = $117&1;
    if ($118) {
     label = 28;
     break;
    } else {
     $$018 = $$119;$$pre$i$i$i26 = $$pre$i$i$i;
     continue;
    }
   } else {
    $119 = ((($111)) + 1|0);
    HEAP32[$93>>2] = $119;
    $$018 = $$119;$$pre$i$i$i26 = $$pre$i$i$i;
    continue;
   }
  }
  if ((label|0) == 28) {
   $87 = ___cxa_find_matching_catch_2()|0;
   $88 = tempRet0;
   $$sink$index = $87;$$sink$index3 = $88;
  }
  else if ((label|0) == 30) {
   $91 = ___cxa_find_matching_catch_2()|0;
   $92 = tempRet0;
   $$sink$index = $91;$$sink$index3 = $92;
  }
  else if ((label|0) == 38) {
   $120 = ((($9)) + 11|0);
   $121 = HEAP8[$120>>0]|0;
   $122 = ($121<<24>>24)<(0);
   $123 = ((($9)) + 4|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = $121&255;
   $126 = $122 ? $124 : $125;
   $127 = ($126|0)==(0);
   $128 = HEAP8[$15>>0]|0;
   $129 = ($128<<24>>24)==(0);
   $or$cond = $127 | $129;
   if (!($or$cond)) {
    $130 = HEAP32[$13>>2]|0;
    $131 = $130;
    $132 = $12;
    $133 = (($131) - ($132))|0;
    $134 = ($133|0)<(160);
    if ($134) {
     $135 = HEAP32[$14>>2]|0;
     $136 = ((($130)) + 4|0);
     HEAP32[$13>>2] = $136;
     HEAP32[$130>>2] = $135;
    }
   }
   $137 = HEAP32[$11>>2]|0;
   __THREW__ = 0;
   $138 = (+invoke_diii(770,($$2|0),($137|0),($4|0)));
   $139 = __THREW__; __THREW__ = 0;
   $140 = $139&1;
   L54: do {
    if (!($140)) {
     HEAPF32[$5>>2] = $138;
     $141 = HEAP32[$13>>2]|0;
     __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($9,$12,$141,$4);
     $142 = ($$pre$i$i$i|0)==(0|0);
     if ($142) {
      $155 = 0;
     } else {
      $143 = ((($$pre$i$i$i)) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$pre$i$i$i)) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i$i$i>>2]|0;
       $149 = ((($148)) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        break;
       }
       $154 = ($151|0)==(-1);
       if ($154) {
        HEAP32[$1>>2] = 0;
        $155 = 0;
       } else {
        $155 = $$pre$i$i$i;
       }
      } else {
       $155 = $$pre$i$i$i;
      }
     }
     $156 = ($155|0)==(0|0);
     $157 = ($$pre$i3$i$i|0)==(0|0);
     do {
      if ($157) {
       label = 53;
      } else {
       $158 = ((($$pre$i3$i$i)) + 12|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ((($$pre$i3$i$i)) + 16|0);
       $161 = HEAP32[$160>>2]|0;
       $162 = ($159|0)==($161|0);
       if ($162) {
        $163 = HEAP32[$$pre$i3$i$i>>2]|0;
        $164 = ((($163)) + 36|0);
        $165 = HEAP32[$164>>2]|0;
        __THREW__ = 0;
        $166 = (invoke_ii($165|0,($$pre$i3$i$i|0))|0);
        $167 = __THREW__; __THREW__ = 0;
        $168 = $167&1;
        if ($168) {
         break L54;
        }
        $169 = ($166|0)==(-1);
        if ($169) {
         HEAP32[$2>>2] = 0;
         label = 53;
         break;
        }
       }
       if (!($156)) {
        label = 54;
       }
      }
     } while(0);
     if ((label|0) == 53) {
      if ($156) {
       label = 54;
      }
     }
     if ((label|0) == 54) {
      $170 = HEAP32[$4>>2]|0;
      $171 = $170 | 2;
      HEAP32[$4>>2] = $171;
     }
     $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
     STACKTOP = sp;return ($$sroa$0$0$copyload|0);
    }
   } while(0);
   $89 = ___cxa_find_matching_catch_2()|0;
   $90 = tempRet0;
   $$sink$index = $89;$$sink$index3 = $90;
  }
  $$1 = $$sink$index;$$121 = $$sink$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__215__num_get_floatIfEET_PKcS3_Rj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0.0, $$1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($0|0)==($1|0);
 if ($4) {
  HEAP32[$2>>2] = 4;
  $$1 = 0.0;
 } else {
  $5 = (___errno_location()|0);
  $6 = HEAP32[$5>>2]|0;
  HEAP32[$5>>2] = 0;
  $7 = (__ZNSt3__26__clocEv()|0);
  $8 = (+_strtold_l($0,$3,$7));
  $9 = HEAP32[$5>>2]|0;
  $10 = ($9|0)==(0);
  if ($10) {
   HEAP32[$5>>2] = $6;
  }
  $11 = HEAP32[$3>>2]|0;
  $12 = ($11|0)==($1|0);
  if ($12) {
   $13 = ($9|0)==(34);
   if ($13) {
    HEAP32[$2>>2] = 4;
   }
   $14 = $8;
   $$0 = $14;
  } else {
   HEAP32[$2>>2] = 4;
   $$0 = 0.0;
  }
  $$1 = $$0;
 }
 STACKTOP = sp;return (+$$1);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i51 = 0, $$024 = 0, $$1 = 0, $$125 = 0, $$127 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i31 = 0, $$pre$i3$i$i = 0, $$sink$index = 0, $$sink$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i46 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $6 = sp + 198|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 if ($19) {
  $20 = ((($9)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __THREW__ = 0;
 invoke_viii(666,($9|0),($23|0),0);
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $83 = ___cxa_find_matching_catch_2()|0;
  $84 = tempRet0;
  $$1 = $83;$$127 = $84;
 } else {
  $26 = HEAP8[$17>>0]|0;
  $27 = ($26<<24>>24)<(0);
  $28 = HEAP32[$9>>2]|0;
  $29 = $27 ? $28 : $9;
  HEAP32[$10>>2] = $29;
  HEAP32[$12>>2] = $11;
  HEAP32[$13>>2] = 0;
  $30 = ((($9)) + 4|0);
  $31 = ((($9)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$024 = $29;$$pre$i$i$i31 = $$pre;
  L11: while(1) {
   $32 = ($$pre$i$i$i31|0)==(0|0);
   if ($32) {
    $$pre$i$i$i = 0;
   } else {
    $33 = ((($$pre$i$i$i31)) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ((($$pre$i$i$i31)) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($34|0)==($36|0);
    if ($37) {
     $38 = HEAP32[$$pre$i$i$i31>>2]|0;
     $39 = ((($38)) + 36|0);
     $40 = HEAP32[$39>>2]|0;
     __THREW__ = 0;
     $41 = (invoke_ii($40|0,($$pre$i$i$i31|0))|0);
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      label = 28;
      break;
     }
     $44 = ($41|0)==(-1);
     if ($44) {
      HEAP32[$1>>2] = 0;
      $$pre$i$i$i = 0;
     } else {
      $$pre$i$i$i = $$pre$i$i$i31;
     }
    } else {
     $$pre$i$i$i = $$pre$i$i$i31;
    }
   }
   $45 = ($$pre$i$i$i|0)==(0|0);
   $46 = HEAP32[$2>>2]|0;
   $47 = ($46|0)==(0|0);
   do {
    if ($47) {
     label = 19;
    } else {
     $48 = ((($46)) + 12|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ((($46)) + 16|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($49|0)==($51|0);
     if (!($52)) {
      if ($45) {
       $172 = $46;
       break;
      } else {
       $$2 = $$024;$$pre$i3$i$i = $46;
       label = 38;
       break L11;
      }
     }
     $53 = HEAP32[$46>>2]|0;
     $54 = ((($53)) + 36|0);
     $55 = HEAP32[$54>>2]|0;
     __THREW__ = 0;
     $56 = (invoke_ii($55|0,($46|0))|0);
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if ($58) {
      label = 28;
      break L11;
     }
     $59 = ($56|0)==(-1);
     if ($59) {
      HEAP32[$2>>2] = 0;
      label = 19;
      break;
     } else {
      if ($45) {
       $172 = $46;
       break;
      } else {
       $$2 = $$024;$$pre$i3$i$i = $46;
       label = 38;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 19) {
    label = 0;
    if ($45) {
     $$2 = $$024;$$pre$i3$i$i = 0;
     label = 38;
     break;
    } else {
     $172 = 0;
    }
   }
   $60 = HEAP32[$10>>2]|0;
   $61 = HEAP8[$17>>0]|0;
   $62 = ($61<<24>>24)<(0);
   $63 = HEAP32[$30>>2]|0;
   $64 = $61&255;
   $65 = $62 ? $63 : $64;
   $66 = (($$024) + ($65)|0);
   $67 = ($60|0)==($66|0);
   if ($67) {
    $68 = $65 << 1;
    __THREW__ = 0;
    invoke_viii(666,($9|0),($68|0),0);
    $69 = __THREW__; __THREW__ = 0;
    $70 = $69&1;
    if ($70) {
     label = 30;
     break;
    }
    $71 = HEAP8[$17>>0]|0;
    $72 = ($71<<24>>24)<(0);
    if ($72) {
     $73 = HEAP32[$31>>2]|0;
     $74 = $73 & 2147483647;
     $phitmp$i46 = (($74) + -1)|0;
     $75 = $phitmp$i46;
    } else {
     $75 = 10;
    }
    __THREW__ = 0;
    invoke_viii(666,($9|0),($75|0),0);
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if ($77) {
     label = 30;
     break;
    }
    $78 = HEAP8[$17>>0]|0;
    $79 = ($78<<24>>24)<(0);
    $80 = HEAP32[$9>>2]|0;
    $81 = $79 ? $80 : $9;
    $82 = (($81) + ($65)|0);
    HEAP32[$10>>2] = $82;
    $$125 = $81;
   } else {
    $$125 = $$024;
   }
   $91 = ((($$pre$i$i$i)) + 12|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = ((($$pre$i$i$i)) + 16|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = ($92|0)==($94|0);
   if ($95) {
    $96 = HEAP32[$$pre$i$i$i>>2]|0;
    $97 = ((($96)) + 36|0);
    $98 = HEAP32[$97>>2]|0;
    __THREW__ = 0;
    $99 = (invoke_ii($98|0,($$pre$i$i$i|0))|0);
    $100 = __THREW__; __THREW__ = 0;
    $101 = $100&1;
    if ($101) {
     label = 28;
     break;
    } else {
     $$0$i$i51 = $99;
    }
   } else {
    $102 = HEAP8[$92>>0]|0;
    $103 = $102&255;
    $$0$i$i51 = $103;
   }
   $104 = $$0$i$i51&255;
   $105 = HEAP8[$7>>0]|0;
   $106 = (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($104,$14,$$125,$10,$13,$105,$8,$11,$12,$6)|0);
   $107 = ($106|0)==(0);
   if (!($107)) {
    $$2 = $$125;$$pre$i3$i$i = $172;
    label = 38;
    break;
   }
   $108 = HEAP32[$91>>2]|0;
   $109 = HEAP32[$93>>2]|0;
   $110 = ($108|0)==($109|0);
   if ($110) {
    $111 = HEAP32[$$pre$i$i$i>>2]|0;
    $112 = ((($111)) + 40|0);
    $113 = HEAP32[$112>>2]|0;
    __THREW__ = 0;
    (invoke_ii($113|0,($$pre$i$i$i|0))|0);
    $114 = __THREW__; __THREW__ = 0;
    $115 = $114&1;
    if ($115) {
     label = 28;
     break;
    } else {
     $$024 = $$125;$$pre$i$i$i31 = $$pre$i$i$i;
     continue;
    }
   } else {
    $116 = ((($108)) + 1|0);
    HEAP32[$91>>2] = $116;
    $$024 = $$125;$$pre$i$i$i31 = $$pre$i$i$i;
    continue;
   }
  }
  if ((label|0) == 28) {
   $85 = ___cxa_find_matching_catch_2()|0;
   $86 = tempRet0;
   $$sink$index = $85;$$sink$index3 = $86;
  }
  else if ((label|0) == 30) {
   $89 = ___cxa_find_matching_catch_2()|0;
   $90 = tempRet0;
   $$sink$index = $89;$$sink$index3 = $90;
  }
  else if ((label|0) == 38) {
   $117 = ((($8)) + 11|0);
   $118 = HEAP8[$117>>0]|0;
   $119 = ($118<<24>>24)<(0);
   $120 = ((($8)) + 4|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = $118&255;
   $123 = $119 ? $121 : $122;
   $124 = ($123|0)==(0);
   if (!($124)) {
    $125 = HEAP32[$12>>2]|0;
    $126 = $125;
    $127 = $11;
    $128 = (($126) - ($127))|0;
    $129 = ($128|0)<(160);
    if ($129) {
     $130 = HEAP32[$13>>2]|0;
     $131 = ((($125)) + 4|0);
     HEAP32[$12>>2] = $131;
     HEAP32[$125>>2] = $130;
    }
   }
   $132 = HEAP32[$10>>2]|0;
   __THREW__ = 0;
   $133 = (invoke_iiiii(771,($$2|0),($132|0),($4|0),($14|0))|0);
   $134 = tempRet0;
   $135 = __THREW__; __THREW__ = 0;
   $136 = $135&1;
   L54: do {
    if (!($136)) {
     $137 = $5;
     $138 = $137;
     HEAP32[$138>>2] = $133;
     $139 = (($137) + 4)|0;
     $140 = $139;
     HEAP32[$140>>2] = $134;
     $141 = HEAP32[$12>>2]|0;
     __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$141,$4);
     $142 = ($$pre$i$i$i|0)==(0|0);
     if ($142) {
      $155 = 0;
     } else {
      $143 = ((($$pre$i$i$i)) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$pre$i$i$i)) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i$i$i>>2]|0;
       $149 = ((($148)) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        break;
       }
       $154 = ($151|0)==(-1);
       if ($154) {
        HEAP32[$1>>2] = 0;
        $155 = 0;
       } else {
        $155 = $$pre$i$i$i;
       }
      } else {
       $155 = $$pre$i$i$i;
      }
     }
     $156 = ($155|0)==(0|0);
     $157 = ($$pre$i3$i$i|0)==(0|0);
     do {
      if ($157) {
       label = 53;
      } else {
       $158 = ((($$pre$i3$i$i)) + 12|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ((($$pre$i3$i$i)) + 16|0);
       $161 = HEAP32[$160>>2]|0;
       $162 = ($159|0)==($161|0);
       if ($162) {
        $163 = HEAP32[$$pre$i3$i$i>>2]|0;
        $164 = ((($163)) + 36|0);
        $165 = HEAP32[$164>>2]|0;
        __THREW__ = 0;
        $166 = (invoke_ii($165|0,($$pre$i3$i$i|0))|0);
        $167 = __THREW__; __THREW__ = 0;
        $168 = $167&1;
        if ($168) {
         break L54;
        }
        $169 = ($166|0)==(-1);
        if ($169) {
         HEAP32[$2>>2] = 0;
         label = 53;
         break;
        }
       }
       if (!($156)) {
        label = 54;
       }
      }
     } while(0);
     if ((label|0) == 53) {
      if ($156) {
       label = 54;
      }
     }
     if ((label|0) == 54) {
      $170 = HEAP32[$4>>2]|0;
      $171 = $170 | 2;
      HEAP32[$4>>2] = $171;
     }
     $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
     STACKTOP = sp;return ($$sroa$0$0$copyload|0);
    }
   } while(0);
   $87 = ___cxa_find_matching_catch_2()|0;
   $88 = tempRet0;
   $$sink$index = $87;$$sink$index3 = $88;
  }
  $$1 = $$sink$index;$$127 = $$sink$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 74;
 $trunc = $3&255;
 $trunc$clear = $trunc & 127;
 switch ($trunc$clear<<24>>24) {
 case 64:  {
  $$0 = 8;
  break;
 }
 case 8:  {
  $$0 = 16;
  break;
 }
 case 0:  {
  $$0 = 0;
  break;
 }
 default: {
  $$0 = 10;
 }
 }
 return ($$0|0);
}
function __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink$index = 0, $$sink$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = (__ZNKSt3__28ios_base6getlocEv($1)|0);
 HEAP32[$4>>2] = $5;
 __THREW__ = 0;
 $6 = (invoke_iii(659,($4|0),(40712|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  label = 7;
 } else {
  $9 = HEAP32[$6>>2]|0;
  $10 = ((($9)) + 32|0);
  $11 = HEAP32[$10>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($11|0,($6|0),(32626|0),((32652)|0),($2|0))|0);
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if ($13) {
   label = 7;
  } else {
   __THREW__ = 0;
   $14 = (invoke_iii(659,($4|0),(40728|0))|0);
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   if ($16) {
    label = 7;
   } else {
    $17 = HEAP32[$14>>2]|0;
    $18 = ((($17)) + 16|0);
    $19 = HEAP32[$18>>2]|0;
    __THREW__ = 0;
    $20 = (invoke_ii($19|0,($14|0))|0);
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if (!($22)) {
     HEAP8[$3>>0] = $20;
     $23 = HEAP32[$14>>2]|0;
     $24 = ((($23)) + 20|0);
     $25 = HEAP32[$24>>2]|0;
     __THREW__ = 0;
     invoke_vii($25|0,($0|0),($14|0));
     $26 = __THREW__; __THREW__ = 0;
     $27 = $26&1;
     if (!($27)) {
      (__ZNSt3__214__shared_count16__release_sharedEv($5)|0);
      STACKTOP = sp;return;
     }
    }
    $30 = ___cxa_find_matching_catch_2()|0;
    $31 = tempRet0;
    $$sink$index = $30;$$sink$index2 = $31;
   }
  }
 }
 if ((label|0) == 7) {
  $28 = ___cxa_find_matching_catch_2()|0;
  $29 = tempRet0;
  $$sink$index = $28;$$sink$index2 = $29;
 }
 (__ZNSt3__214__shared_count16__release_sharedEv($5)|0);
 ___resumeException($$sink$index|0);
 // unreachable;
}
function __ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($0|0)==($1|0);
 do {
  if ($5) {
   HEAP32[$2>>2] = 4;
   $18 = 0;$19 = 0;
  } else {
   $6 = HEAP8[$0>>0]|0;
   $7 = ($6<<24>>24)==(45);
   if ($7) {
    HEAP32[$2>>2] = 4;
    $18 = 0;$19 = 0;
    break;
   }
   $8 = (___errno_location()|0);
   $9 = HEAP32[$8>>2]|0;
   HEAP32[$8>>2] = 0;
   $10 = (__ZNSt3__26__clocEv()|0);
   $11 = (_strtoull_l($0,$4,$3,$10)|0);
   $12 = tempRet0;
   $13 = HEAP32[$8>>2]|0;
   $14 = ($13|0)==(0);
   if ($14) {
    HEAP32[$8>>2] = $9;
   }
   $15 = HEAP32[$4>>2]|0;
   $16 = ($15|0)==($1|0);
   if ($16) {
    $17 = ($13|0)==(34);
    if ($17) {
     HEAP32[$2>>2] = 4;
     $20 = -1;$21 = -1;
    } else {
     $20 = $11;$21 = $12;
    }
   } else {
    HEAP32[$2>>2] = 4;
    $20 = 0;$21 = 0;
   }
   $18 = $21;$19 = $20;
  }
 } while(0);
 tempRet0 = ($18);
 STACKTOP = sp;return ($19|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i51 = 0, $$024 = 0, $$1 = 0, $$125 = 0, $$127 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i31 = 0, $$pre$i3$i$i = 0, $$sink$index = 0, $$sink$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i46 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $6 = sp + 198|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 if ($19) {
  $20 = ((($9)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __THREW__ = 0;
 invoke_viii(666,($9|0),($23|0),0);
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $83 = ___cxa_find_matching_catch_2()|0;
  $84 = tempRet0;
  $$1 = $83;$$127 = $84;
 } else {
  $26 = HEAP8[$17>>0]|0;
  $27 = ($26<<24>>24)<(0);
  $28 = HEAP32[$9>>2]|0;
  $29 = $27 ? $28 : $9;
  HEAP32[$10>>2] = $29;
  HEAP32[$12>>2] = $11;
  HEAP32[$13>>2] = 0;
  $30 = ((($9)) + 4|0);
  $31 = ((($9)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$024 = $29;$$pre$i$i$i31 = $$pre;
  L11: while(1) {
   $32 = ($$pre$i$i$i31|0)==(0|0);
   if ($32) {
    $$pre$i$i$i = 0;
   } else {
    $33 = ((($$pre$i$i$i31)) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ((($$pre$i$i$i31)) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($34|0)==($36|0);
    if ($37) {
     $38 = HEAP32[$$pre$i$i$i31>>2]|0;
     $39 = ((($38)) + 36|0);
     $40 = HEAP32[$39>>2]|0;
     __THREW__ = 0;
     $41 = (invoke_ii($40|0,($$pre$i$i$i31|0))|0);
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      label = 28;
      break;
     }
     $44 = ($41|0)==(-1);
     if ($44) {
      HEAP32[$1>>2] = 0;
      $$pre$i$i$i = 0;
     } else {
      $$pre$i$i$i = $$pre$i$i$i31;
     }
    } else {
     $$pre$i$i$i = $$pre$i$i$i31;
    }
   }
   $45 = ($$pre$i$i$i|0)==(0|0);
   $46 = HEAP32[$2>>2]|0;
   $47 = ($46|0)==(0|0);
   do {
    if ($47) {
     label = 19;
    } else {
     $48 = ((($46)) + 12|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ((($46)) + 16|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($49|0)==($51|0);
     if (!($52)) {
      if ($45) {
       $167 = $46;
       break;
      } else {
       $$2 = $$024;$$pre$i3$i$i = $46;
       label = 38;
       break L11;
      }
     }
     $53 = HEAP32[$46>>2]|0;
     $54 = ((($53)) + 36|0);
     $55 = HEAP32[$54>>2]|0;
     __THREW__ = 0;
     $56 = (invoke_ii($55|0,($46|0))|0);
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if ($58) {
      label = 28;
      break L11;
     }
     $59 = ($56|0)==(-1);
     if ($59) {
      HEAP32[$2>>2] = 0;
      label = 19;
      break;
     } else {
      if ($45) {
       $167 = $46;
       break;
      } else {
       $$2 = $$024;$$pre$i3$i$i = $46;
       label = 38;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 19) {
    label = 0;
    if ($45) {
     $$2 = $$024;$$pre$i3$i$i = 0;
     label = 38;
     break;
    } else {
     $167 = 0;
    }
   }
   $60 = HEAP32[$10>>2]|0;
   $61 = HEAP8[$17>>0]|0;
   $62 = ($61<<24>>24)<(0);
   $63 = HEAP32[$30>>2]|0;
   $64 = $61&255;
   $65 = $62 ? $63 : $64;
   $66 = (($$024) + ($65)|0);
   $67 = ($60|0)==($66|0);
   if ($67) {
    $68 = $65 << 1;
    __THREW__ = 0;
    invoke_viii(666,($9|0),($68|0),0);
    $69 = __THREW__; __THREW__ = 0;
    $70 = $69&1;
    if ($70) {
     label = 30;
     break;
    }
    $71 = HEAP8[$17>>0]|0;
    $72 = ($71<<24>>24)<(0);
    if ($72) {
     $73 = HEAP32[$31>>2]|0;
     $74 = $73 & 2147483647;
     $phitmp$i46 = (($74) + -1)|0;
     $75 = $phitmp$i46;
    } else {
     $75 = 10;
    }
    __THREW__ = 0;
    invoke_viii(666,($9|0),($75|0),0);
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if ($77) {
     label = 30;
     break;
    }
    $78 = HEAP8[$17>>0]|0;
    $79 = ($78<<24>>24)<(0);
    $80 = HEAP32[$9>>2]|0;
    $81 = $79 ? $80 : $9;
    $82 = (($81) + ($65)|0);
    HEAP32[$10>>2] = $82;
    $$125 = $81;
   } else {
    $$125 = $$024;
   }
   $91 = ((($$pre$i$i$i)) + 12|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = ((($$pre$i$i$i)) + 16|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = ($92|0)==($94|0);
   if ($95) {
    $96 = HEAP32[$$pre$i$i$i>>2]|0;
    $97 = ((($96)) + 36|0);
    $98 = HEAP32[$97>>2]|0;
    __THREW__ = 0;
    $99 = (invoke_ii($98|0,($$pre$i$i$i|0))|0);
    $100 = __THREW__; __THREW__ = 0;
    $101 = $100&1;
    if ($101) {
     label = 28;
     break;
    } else {
     $$0$i$i51 = $99;
    }
   } else {
    $102 = HEAP8[$92>>0]|0;
    $103 = $102&255;
    $$0$i$i51 = $103;
   }
   $104 = $$0$i$i51&255;
   $105 = HEAP8[$7>>0]|0;
   $106 = (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($104,$14,$$125,$10,$13,$105,$8,$11,$12,$6)|0);
   $107 = ($106|0)==(0);
   if (!($107)) {
    $$2 = $$125;$$pre$i3$i$i = $167;
    label = 38;
    break;
   }
   $108 = HEAP32[$91>>2]|0;
   $109 = HEAP32[$93>>2]|0;
   $110 = ($108|0)==($109|0);
   if ($110) {
    $111 = HEAP32[$$pre$i$i$i>>2]|0;
    $112 = ((($111)) + 40|0);
    $113 = HEAP32[$112>>2]|0;
    __THREW__ = 0;
    (invoke_ii($113|0,($$pre$i$i$i|0))|0);
    $114 = __THREW__; __THREW__ = 0;
    $115 = $114&1;
    if ($115) {
     label = 28;
     break;
    } else {
     $$024 = $$125;$$pre$i$i$i31 = $$pre$i$i$i;
     continue;
    }
   } else {
    $116 = ((($108)) + 1|0);
    HEAP32[$91>>2] = $116;
    $$024 = $$125;$$pre$i$i$i31 = $$pre$i$i$i;
    continue;
   }
  }
  if ((label|0) == 28) {
   $85 = ___cxa_find_matching_catch_2()|0;
   $86 = tempRet0;
   $$sink$index = $85;$$sink$index3 = $86;
  }
  else if ((label|0) == 30) {
   $89 = ___cxa_find_matching_catch_2()|0;
   $90 = tempRet0;
   $$sink$index = $89;$$sink$index3 = $90;
  }
  else if ((label|0) == 38) {
   $117 = ((($8)) + 11|0);
   $118 = HEAP8[$117>>0]|0;
   $119 = ($118<<24>>24)<(0);
   $120 = ((($8)) + 4|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = $118&255;
   $123 = $119 ? $121 : $122;
   $124 = ($123|0)==(0);
   if (!($124)) {
    $125 = HEAP32[$12>>2]|0;
    $126 = $125;
    $127 = $11;
    $128 = (($126) - ($127))|0;
    $129 = ($128|0)<(160);
    if ($129) {
     $130 = HEAP32[$13>>2]|0;
     $131 = ((($125)) + 4|0);
     HEAP32[$12>>2] = $131;
     HEAP32[$125>>2] = $130;
    }
   }
   $132 = HEAP32[$10>>2]|0;
   __THREW__ = 0;
   $133 = (invoke_iiiii(772,($$2|0),($132|0),($4|0),($14|0))|0);
   $134 = __THREW__; __THREW__ = 0;
   $135 = $134&1;
   L54: do {
    if (!($135)) {
     HEAP32[$5>>2] = $133;
     $136 = HEAP32[$12>>2]|0;
     __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$136,$4);
     $137 = ($$pre$i$i$i|0)==(0|0);
     if ($137) {
      $150 = 0;
     } else {
      $138 = ((($$pre$i$i$i)) + 12|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ((($$pre$i$i$i)) + 16|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = ($139|0)==($141|0);
      if ($142) {
       $143 = HEAP32[$$pre$i$i$i>>2]|0;
       $144 = ((($143)) + 36|0);
       $145 = HEAP32[$144>>2]|0;
       __THREW__ = 0;
       $146 = (invoke_ii($145|0,($$pre$i$i$i|0))|0);
       $147 = __THREW__; __THREW__ = 0;
       $148 = $147&1;
       if ($148) {
        break;
       }
       $149 = ($146|0)==(-1);
       if ($149) {
        HEAP32[$1>>2] = 0;
        $150 = 0;
       } else {
        $150 = $$pre$i$i$i;
       }
      } else {
       $150 = $$pre$i$i$i;
      }
     }
     $151 = ($150|0)==(0|0);
     $152 = ($$pre$i3$i$i|0)==(0|0);
     do {
      if ($152) {
       label = 53;
      } else {
       $153 = ((($$pre$i3$i$i)) + 12|0);
       $154 = HEAP32[$153>>2]|0;
       $155 = ((($$pre$i3$i$i)) + 16|0);
       $156 = HEAP32[$155>>2]|0;
       $157 = ($154|0)==($156|0);
       if ($157) {
        $158 = HEAP32[$$pre$i3$i$i>>2]|0;
        $159 = ((($158)) + 36|0);
        $160 = HEAP32[$159>>2]|0;
        __THREW__ = 0;
        $161 = (invoke_ii($160|0,($$pre$i3$i$i|0))|0);
        $162 = __THREW__; __THREW__ = 0;
        $163 = $162&1;
        if ($163) {
         break L54;
        }
        $164 = ($161|0)==(-1);
        if ($164) {
         HEAP32[$2>>2] = 0;
         label = 53;
         break;
        }
       }
       if (!($151)) {
        label = 54;
       }
      }
     } while(0);
     if ((label|0) == 53) {
      if ($151) {
       label = 54;
      }
     }
     if ((label|0) == 54) {
      $165 = HEAP32[$4>>2]|0;
      $166 = $165 | 2;
      HEAP32[$4>>2] = $166;
     }
     $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
     STACKTOP = sp;return ($$sroa$0$0$copyload|0);
    }
   } while(0);
   $87 = ___cxa_find_matching_catch_2()|0;
   $88 = tempRet0;
   $$sink$index = $87;$$sink$index3 = $88;
  }
  $$1 = $$sink$index;$$127 = $$sink$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($0|0)==($1|0);
 do {
  if ($5) {
   HEAP32[$2>>2] = 4;
   $$1 = 0;
  } else {
   $6 = HEAP8[$0>>0]|0;
   $7 = ($6<<24>>24)==(45);
   if ($7) {
    HEAP32[$2>>2] = 4;
    $$1 = 0;
    break;
   }
   $8 = (___errno_location()|0);
   $9 = HEAP32[$8>>2]|0;
   HEAP32[$8>>2] = 0;
   $10 = (__ZNSt3__26__clocEv()|0);
   $11 = (_strtoull_l($0,$4,$3,$10)|0);
   $12 = tempRet0;
   $13 = HEAP32[$8>>2]|0;
   $14 = ($13|0)==(0);
   if ($14) {
    HEAP32[$8>>2] = $9;
   }
   $15 = HEAP32[$4>>2]|0;
   $16 = ($15|0)==($1|0);
   do {
    if ($16) {
     $17 = ($13|0)==(34);
     $18 = ($12>>>0)>(0);
     $19 = ($11>>>0)>(4294967295);
     $20 = ($12|0)==(0);
     $21 = $20 & $19;
     $22 = $18 | $21;
     $or$cond = $22 | $17;
     if ($or$cond) {
      HEAP32[$2>>2] = 4;
      $$0 = -1;
      break;
     } else {
      $$0 = $11;
      break;
     }
    } else {
     HEAP32[$2>>2] = 4;
     $$0 = 0;
    }
   } while(0);
   $$1 = $$0;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i51 = 0, $$024 = 0, $$1 = 0, $$125 = 0, $$127 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i31 = 0, $$pre$i3$i$i = 0, $$sink$index = 0, $$sink$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i46 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $6 = sp + 198|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 if ($19) {
  $20 = ((($9)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __THREW__ = 0;
 invoke_viii(666,($9|0),($23|0),0);
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $83 = ___cxa_find_matching_catch_2()|0;
  $84 = tempRet0;
  $$1 = $83;$$127 = $84;
 } else {
  $26 = HEAP8[$17>>0]|0;
  $27 = ($26<<24>>24)<(0);
  $28 = HEAP32[$9>>2]|0;
  $29 = $27 ? $28 : $9;
  HEAP32[$10>>2] = $29;
  HEAP32[$12>>2] = $11;
  HEAP32[$13>>2] = 0;
  $30 = ((($9)) + 4|0);
  $31 = ((($9)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$024 = $29;$$pre$i$i$i31 = $$pre;
  L11: while(1) {
   $32 = ($$pre$i$i$i31|0)==(0|0);
   if ($32) {
    $$pre$i$i$i = 0;
   } else {
    $33 = ((($$pre$i$i$i31)) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ((($$pre$i$i$i31)) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($34|0)==($36|0);
    if ($37) {
     $38 = HEAP32[$$pre$i$i$i31>>2]|0;
     $39 = ((($38)) + 36|0);
     $40 = HEAP32[$39>>2]|0;
     __THREW__ = 0;
     $41 = (invoke_ii($40|0,($$pre$i$i$i31|0))|0);
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      label = 28;
      break;
     }
     $44 = ($41|0)==(-1);
     if ($44) {
      HEAP32[$1>>2] = 0;
      $$pre$i$i$i = 0;
     } else {
      $$pre$i$i$i = $$pre$i$i$i31;
     }
    } else {
     $$pre$i$i$i = $$pre$i$i$i31;
    }
   }
   $45 = ($$pre$i$i$i|0)==(0|0);
   $46 = HEAP32[$2>>2]|0;
   $47 = ($46|0)==(0|0);
   do {
    if ($47) {
     label = 19;
    } else {
     $48 = ((($46)) + 12|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ((($46)) + 16|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($49|0)==($51|0);
     if (!($52)) {
      if ($45) {
       $167 = $46;
       break;
      } else {
       $$2 = $$024;$$pre$i3$i$i = $46;
       label = 38;
       break L11;
      }
     }
     $53 = HEAP32[$46>>2]|0;
     $54 = ((($53)) + 36|0);
     $55 = HEAP32[$54>>2]|0;
     __THREW__ = 0;
     $56 = (invoke_ii($55|0,($46|0))|0);
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if ($58) {
      label = 28;
      break L11;
     }
     $59 = ($56|0)==(-1);
     if ($59) {
      HEAP32[$2>>2] = 0;
      label = 19;
      break;
     } else {
      if ($45) {
       $167 = $46;
       break;
      } else {
       $$2 = $$024;$$pre$i3$i$i = $46;
       label = 38;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 19) {
    label = 0;
    if ($45) {
     $$2 = $$024;$$pre$i3$i$i = 0;
     label = 38;
     break;
    } else {
     $167 = 0;
    }
   }
   $60 = HEAP32[$10>>2]|0;
   $61 = HEAP8[$17>>0]|0;
   $62 = ($61<<24>>24)<(0);
   $63 = HEAP32[$30>>2]|0;
   $64 = $61&255;
   $65 = $62 ? $63 : $64;
   $66 = (($$024) + ($65)|0);
   $67 = ($60|0)==($66|0);
   if ($67) {
    $68 = $65 << 1;
    __THREW__ = 0;
    invoke_viii(666,($9|0),($68|0),0);
    $69 = __THREW__; __THREW__ = 0;
    $70 = $69&1;
    if ($70) {
     label = 30;
     break;
    }
    $71 = HEAP8[$17>>0]|0;
    $72 = ($71<<24>>24)<(0);
    if ($72) {
     $73 = HEAP32[$31>>2]|0;
     $74 = $73 & 2147483647;
     $phitmp$i46 = (($74) + -1)|0;
     $75 = $phitmp$i46;
    } else {
     $75 = 10;
    }
    __THREW__ = 0;
    invoke_viii(666,($9|0),($75|0),0);
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if ($77) {
     label = 30;
     break;
    }
    $78 = HEAP8[$17>>0]|0;
    $79 = ($78<<24>>24)<(0);
    $80 = HEAP32[$9>>2]|0;
    $81 = $79 ? $80 : $9;
    $82 = (($81) + ($65)|0);
    HEAP32[$10>>2] = $82;
    $$125 = $81;
   } else {
    $$125 = $$024;
   }
   $91 = ((($$pre$i$i$i)) + 12|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = ((($$pre$i$i$i)) + 16|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = ($92|0)==($94|0);
   if ($95) {
    $96 = HEAP32[$$pre$i$i$i>>2]|0;
    $97 = ((($96)) + 36|0);
    $98 = HEAP32[$97>>2]|0;
    __THREW__ = 0;
    $99 = (invoke_ii($98|0,($$pre$i$i$i|0))|0);
    $100 = __THREW__; __THREW__ = 0;
    $101 = $100&1;
    if ($101) {
     label = 28;
     break;
    } else {
     $$0$i$i51 = $99;
    }
   } else {
    $102 = HEAP8[$92>>0]|0;
    $103 = $102&255;
    $$0$i$i51 = $103;
   }
   $104 = $$0$i$i51&255;
   $105 = HEAP8[$7>>0]|0;
   $106 = (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($104,$14,$$125,$10,$13,$105,$8,$11,$12,$6)|0);
   $107 = ($106|0)==(0);
   if (!($107)) {
    $$2 = $$125;$$pre$i3$i$i = $167;
    label = 38;
    break;
   }
   $108 = HEAP32[$91>>2]|0;
   $109 = HEAP32[$93>>2]|0;
   $110 = ($108|0)==($109|0);
   if ($110) {
    $111 = HEAP32[$$pre$i$i$i>>2]|0;
    $112 = ((($111)) + 40|0);
    $113 = HEAP32[$112>>2]|0;
    __THREW__ = 0;
    (invoke_ii($113|0,($$pre$i$i$i|0))|0);
    $114 = __THREW__; __THREW__ = 0;
    $115 = $114&1;
    if ($115) {
     label = 28;
     break;
    } else {
     $$024 = $$125;$$pre$i$i$i31 = $$pre$i$i$i;
     continue;
    }
   } else {
    $116 = ((($108)) + 1|0);
    HEAP32[$91>>2] = $116;
    $$024 = $$125;$$pre$i$i$i31 = $$pre$i$i$i;
    continue;
   }
  }
  if ((label|0) == 28) {
   $85 = ___cxa_find_matching_catch_2()|0;
   $86 = tempRet0;
   $$sink$index = $85;$$sink$index3 = $86;
  }
  else if ((label|0) == 30) {
   $89 = ___cxa_find_matching_catch_2()|0;
   $90 = tempRet0;
   $$sink$index = $89;$$sink$index3 = $90;
  }
  else if ((label|0) == 38) {
   $117 = ((($8)) + 11|0);
   $118 = HEAP8[$117>>0]|0;
   $119 = ($118<<24>>24)<(0);
   $120 = ((($8)) + 4|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = $118&255;
   $123 = $119 ? $121 : $122;
   $124 = ($123|0)==(0);
   if (!($124)) {
    $125 = HEAP32[$12>>2]|0;
    $126 = $125;
    $127 = $11;
    $128 = (($126) - ($127))|0;
    $129 = ($128|0)<(160);
    if ($129) {
     $130 = HEAP32[$13>>2]|0;
     $131 = ((($125)) + 4|0);
     HEAP32[$12>>2] = $131;
     HEAP32[$125>>2] = $130;
    }
   }
   $132 = HEAP32[$10>>2]|0;
   __THREW__ = 0;
   $133 = (invoke_iiiii(773,($$2|0),($132|0),($4|0),($14|0))|0);
   $134 = __THREW__; __THREW__ = 0;
   $135 = $134&1;
   L54: do {
    if (!($135)) {
     HEAP32[$5>>2] = $133;
     $136 = HEAP32[$12>>2]|0;
     __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$136,$4);
     $137 = ($$pre$i$i$i|0)==(0|0);
     if ($137) {
      $150 = 0;
     } else {
      $138 = ((($$pre$i$i$i)) + 12|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ((($$pre$i$i$i)) + 16|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = ($139|0)==($141|0);
      if ($142) {
       $143 = HEAP32[$$pre$i$i$i>>2]|0;
       $144 = ((($143)) + 36|0);
       $145 = HEAP32[$144>>2]|0;
       __THREW__ = 0;
       $146 = (invoke_ii($145|0,($$pre$i$i$i|0))|0);
       $147 = __THREW__; __THREW__ = 0;
       $148 = $147&1;
       if ($148) {
        break;
       }
       $149 = ($146|0)==(-1);
       if ($149) {
        HEAP32[$1>>2] = 0;
        $150 = 0;
       } else {
        $150 = $$pre$i$i$i;
       }
      } else {
       $150 = $$pre$i$i$i;
      }
     }
     $151 = ($150|0)==(0|0);
     $152 = ($$pre$i3$i$i|0)==(0|0);
     do {
      if ($152) {
       label = 53;
      } else {
       $153 = ((($$pre$i3$i$i)) + 12|0);
       $154 = HEAP32[$153>>2]|0;
       $155 = ((($$pre$i3$i$i)) + 16|0);
       $156 = HEAP32[$155>>2]|0;
       $157 = ($154|0)==($156|0);
       if ($157) {
        $158 = HEAP32[$$pre$i3$i$i>>2]|0;
        $159 = ((($158)) + 36|0);
        $160 = HEAP32[$159>>2]|0;
        __THREW__ = 0;
        $161 = (invoke_ii($160|0,($$pre$i3$i$i|0))|0);
        $162 = __THREW__; __THREW__ = 0;
        $163 = $162&1;
        if ($163) {
         break L54;
        }
        $164 = ($161|0)==(-1);
        if ($164) {
         HEAP32[$2>>2] = 0;
         label = 53;
         break;
        }
       }
       if (!($151)) {
        label = 54;
       }
      }
     } while(0);
     if ((label|0) == 53) {
      if ($151) {
       label = 54;
      }
     }
     if ((label|0) == 54) {
      $165 = HEAP32[$4>>2]|0;
      $166 = $165 | 2;
      HEAP32[$4>>2] = $166;
     }
     $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
     STACKTOP = sp;return ($$sroa$0$0$copyload|0);
    }
   } while(0);
   $87 = ___cxa_find_matching_catch_2()|0;
   $88 = tempRet0;
   $$sink$index = $87;$$sink$index3 = $88;
  }
  $$1 = $$sink$index;$$127 = $$sink$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($0|0)==($1|0);
 do {
  if ($5) {
   HEAP32[$2>>2] = 4;
   $$1 = 0;
  } else {
   $6 = HEAP8[$0>>0]|0;
   $7 = ($6<<24>>24)==(45);
   if ($7) {
    HEAP32[$2>>2] = 4;
    $$1 = 0;
    break;
   }
   $8 = (___errno_location()|0);
   $9 = HEAP32[$8>>2]|0;
   HEAP32[$8>>2] = 0;
   $10 = (__ZNSt3__26__clocEv()|0);
   $11 = (_strtoull_l($0,$4,$3,$10)|0);
   $12 = tempRet0;
   $13 = HEAP32[$8>>2]|0;
   $14 = ($13|0)==(0);
   if ($14) {
    HEAP32[$8>>2] = $9;
   }
   $15 = HEAP32[$4>>2]|0;
   $16 = ($15|0)==($1|0);
   do {
    if ($16) {
     $17 = ($13|0)==(34);
     $18 = ($12>>>0)>(0);
     $19 = ($11>>>0)>(4294967295);
     $20 = ($12|0)==(0);
     $21 = $20 & $19;
     $22 = $18 | $21;
     $or$cond = $22 | $17;
     if ($or$cond) {
      HEAP32[$2>>2] = 4;
      $$0 = -1;
      break;
     } else {
      $$0 = $11;
      break;
     }
    } else {
     HEAP32[$2>>2] = 4;
     $$0 = 0;
    }
   } while(0);
   $$1 = $$0;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i51 = 0, $$024 = 0, $$1 = 0, $$125 = 0, $$127 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i31 = 0, $$pre$i3$i$i = 0, $$sink$index = 0, $$sink$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i46 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $6 = sp + 198|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 if ($19) {
  $20 = ((($9)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __THREW__ = 0;
 invoke_viii(666,($9|0),($23|0),0);
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $83 = ___cxa_find_matching_catch_2()|0;
  $84 = tempRet0;
  $$1 = $83;$$127 = $84;
 } else {
  $26 = HEAP8[$17>>0]|0;
  $27 = ($26<<24>>24)<(0);
  $28 = HEAP32[$9>>2]|0;
  $29 = $27 ? $28 : $9;
  HEAP32[$10>>2] = $29;
  HEAP32[$12>>2] = $11;
  HEAP32[$13>>2] = 0;
  $30 = ((($9)) + 4|0);
  $31 = ((($9)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$024 = $29;$$pre$i$i$i31 = $$pre;
  L11: while(1) {
   $32 = ($$pre$i$i$i31|0)==(0|0);
   if ($32) {
    $$pre$i$i$i = 0;
   } else {
    $33 = ((($$pre$i$i$i31)) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ((($$pre$i$i$i31)) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($34|0)==($36|0);
    if ($37) {
     $38 = HEAP32[$$pre$i$i$i31>>2]|0;
     $39 = ((($38)) + 36|0);
     $40 = HEAP32[$39>>2]|0;
     __THREW__ = 0;
     $41 = (invoke_ii($40|0,($$pre$i$i$i31|0))|0);
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      label = 28;
      break;
     }
     $44 = ($41|0)==(-1);
     if ($44) {
      HEAP32[$1>>2] = 0;
      $$pre$i$i$i = 0;
     } else {
      $$pre$i$i$i = $$pre$i$i$i31;
     }
    } else {
     $$pre$i$i$i = $$pre$i$i$i31;
    }
   }
   $45 = ($$pre$i$i$i|0)==(0|0);
   $46 = HEAP32[$2>>2]|0;
   $47 = ($46|0)==(0|0);
   do {
    if ($47) {
     label = 19;
    } else {
     $48 = ((($46)) + 12|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ((($46)) + 16|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($49|0)==($51|0);
     if (!($52)) {
      if ($45) {
       $167 = $46;
       break;
      } else {
       $$2 = $$024;$$pre$i3$i$i = $46;
       label = 38;
       break L11;
      }
     }
     $53 = HEAP32[$46>>2]|0;
     $54 = ((($53)) + 36|0);
     $55 = HEAP32[$54>>2]|0;
     __THREW__ = 0;
     $56 = (invoke_ii($55|0,($46|0))|0);
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if ($58) {
      label = 28;
      break L11;
     }
     $59 = ($56|0)==(-1);
     if ($59) {
      HEAP32[$2>>2] = 0;
      label = 19;
      break;
     } else {
      if ($45) {
       $167 = $46;
       break;
      } else {
       $$2 = $$024;$$pre$i3$i$i = $46;
       label = 38;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 19) {
    label = 0;
    if ($45) {
     $$2 = $$024;$$pre$i3$i$i = 0;
     label = 38;
     break;
    } else {
     $167 = 0;
    }
   }
   $60 = HEAP32[$10>>2]|0;
   $61 = HEAP8[$17>>0]|0;
   $62 = ($61<<24>>24)<(0);
   $63 = HEAP32[$30>>2]|0;
   $64 = $61&255;
   $65 = $62 ? $63 : $64;
   $66 = (($$024) + ($65)|0);
   $67 = ($60|0)==($66|0);
   if ($67) {
    $68 = $65 << 1;
    __THREW__ = 0;
    invoke_viii(666,($9|0),($68|0),0);
    $69 = __THREW__; __THREW__ = 0;
    $70 = $69&1;
    if ($70) {
     label = 30;
     break;
    }
    $71 = HEAP8[$17>>0]|0;
    $72 = ($71<<24>>24)<(0);
    if ($72) {
     $73 = HEAP32[$31>>2]|0;
     $74 = $73 & 2147483647;
     $phitmp$i46 = (($74) + -1)|0;
     $75 = $phitmp$i46;
    } else {
     $75 = 10;
    }
    __THREW__ = 0;
    invoke_viii(666,($9|0),($75|0),0);
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if ($77) {
     label = 30;
     break;
    }
    $78 = HEAP8[$17>>0]|0;
    $79 = ($78<<24>>24)<(0);
    $80 = HEAP32[$9>>2]|0;
    $81 = $79 ? $80 : $9;
    $82 = (($81) + ($65)|0);
    HEAP32[$10>>2] = $82;
    $$125 = $81;
   } else {
    $$125 = $$024;
   }
   $91 = ((($$pre$i$i$i)) + 12|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = ((($$pre$i$i$i)) + 16|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = ($92|0)==($94|0);
   if ($95) {
    $96 = HEAP32[$$pre$i$i$i>>2]|0;
    $97 = ((($96)) + 36|0);
    $98 = HEAP32[$97>>2]|0;
    __THREW__ = 0;
    $99 = (invoke_ii($98|0,($$pre$i$i$i|0))|0);
    $100 = __THREW__; __THREW__ = 0;
    $101 = $100&1;
    if ($101) {
     label = 28;
     break;
    } else {
     $$0$i$i51 = $99;
    }
   } else {
    $102 = HEAP8[$92>>0]|0;
    $103 = $102&255;
    $$0$i$i51 = $103;
   }
   $104 = $$0$i$i51&255;
   $105 = HEAP8[$7>>0]|0;
   $106 = (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($104,$14,$$125,$10,$13,$105,$8,$11,$12,$6)|0);
   $107 = ($106|0)==(0);
   if (!($107)) {
    $$2 = $$125;$$pre$i3$i$i = $167;
    label = 38;
    break;
   }
   $108 = HEAP32[$91>>2]|0;
   $109 = HEAP32[$93>>2]|0;
   $110 = ($108|0)==($109|0);
   if ($110) {
    $111 = HEAP32[$$pre$i$i$i>>2]|0;
    $112 = ((($111)) + 40|0);
    $113 = HEAP32[$112>>2]|0;
    __THREW__ = 0;
    (invoke_ii($113|0,($$pre$i$i$i|0))|0);
    $114 = __THREW__; __THREW__ = 0;
    $115 = $114&1;
    if ($115) {
     label = 28;
     break;
    } else {
     $$024 = $$125;$$pre$i$i$i31 = $$pre$i$i$i;
     continue;
    }
   } else {
    $116 = ((($108)) + 1|0);
    HEAP32[$91>>2] = $116;
    $$024 = $$125;$$pre$i$i$i31 = $$pre$i$i$i;
    continue;
   }
  }
  if ((label|0) == 28) {
   $85 = ___cxa_find_matching_catch_2()|0;
   $86 = tempRet0;
   $$sink$index = $85;$$sink$index3 = $86;
  }
  else if ((label|0) == 30) {
   $89 = ___cxa_find_matching_catch_2()|0;
   $90 = tempRet0;
   $$sink$index = $89;$$sink$index3 = $90;
  }
  else if ((label|0) == 38) {
   $117 = ((($8)) + 11|0);
   $118 = HEAP8[$117>>0]|0;
   $119 = ($118<<24>>24)<(0);
   $120 = ((($8)) + 4|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = $118&255;
   $123 = $119 ? $121 : $122;
   $124 = ($123|0)==(0);
   if (!($124)) {
    $125 = HEAP32[$12>>2]|0;
    $126 = $125;
    $127 = $11;
    $128 = (($126) - ($127))|0;
    $129 = ($128|0)<(160);
    if ($129) {
     $130 = HEAP32[$13>>2]|0;
     $131 = ((($125)) + 4|0);
     HEAP32[$12>>2] = $131;
     HEAP32[$125>>2] = $130;
    }
   }
   $132 = HEAP32[$10>>2]|0;
   __THREW__ = 0;
   $133 = (invoke_iiiii(774,($$2|0),($132|0),($4|0),($14|0))|0);
   $134 = __THREW__; __THREW__ = 0;
   $135 = $134&1;
   L54: do {
    if (!($135)) {
     HEAP16[$5>>1] = $133;
     $136 = HEAP32[$12>>2]|0;
     __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$136,$4);
     $137 = ($$pre$i$i$i|0)==(0|0);
     if ($137) {
      $150 = 0;
     } else {
      $138 = ((($$pre$i$i$i)) + 12|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ((($$pre$i$i$i)) + 16|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = ($139|0)==($141|0);
      if ($142) {
       $143 = HEAP32[$$pre$i$i$i>>2]|0;
       $144 = ((($143)) + 36|0);
       $145 = HEAP32[$144>>2]|0;
       __THREW__ = 0;
       $146 = (invoke_ii($145|0,($$pre$i$i$i|0))|0);
       $147 = __THREW__; __THREW__ = 0;
       $148 = $147&1;
       if ($148) {
        break;
       }
       $149 = ($146|0)==(-1);
       if ($149) {
        HEAP32[$1>>2] = 0;
        $150 = 0;
       } else {
        $150 = $$pre$i$i$i;
       }
      } else {
       $150 = $$pre$i$i$i;
      }
     }
     $151 = ($150|0)==(0|0);
     $152 = ($$pre$i3$i$i|0)==(0|0);
     do {
      if ($152) {
       label = 53;
      } else {
       $153 = ((($$pre$i3$i$i)) + 12|0);
       $154 = HEAP32[$153>>2]|0;
       $155 = ((($$pre$i3$i$i)) + 16|0);
       $156 = HEAP32[$155>>2]|0;
       $157 = ($154|0)==($156|0);
       if ($157) {
        $158 = HEAP32[$$pre$i3$i$i>>2]|0;
        $159 = ((($158)) + 36|0);
        $160 = HEAP32[$159>>2]|0;
        __THREW__ = 0;
        $161 = (invoke_ii($160|0,($$pre$i3$i$i|0))|0);
        $162 = __THREW__; __THREW__ = 0;
        $163 = $162&1;
        if ($163) {
         break L54;
        }
        $164 = ($161|0)==(-1);
        if ($164) {
         HEAP32[$2>>2] = 0;
         label = 53;
         break;
        }
       }
       if (!($151)) {
        label = 54;
       }
      }
     } while(0);
     if ((label|0) == 53) {
      if ($151) {
       label = 54;
      }
     }
     if ((label|0) == 54) {
      $165 = HEAP32[$4>>2]|0;
      $166 = $165 | 2;
      HEAP32[$4>>2] = $166;
     }
     $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
     STACKTOP = sp;return ($$sroa$0$0$copyload|0);
    }
   } while(0);
   $87 = ___cxa_find_matching_catch_2()|0;
   $88 = tempRet0;
   $$sink$index = $87;$$sink$index3 = $88;
  }
  $$1 = $$sink$index;$$127 = $$sink$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($0|0)==($1|0);
 do {
  if ($5) {
   HEAP32[$2>>2] = 4;
   $$1 = 0;
  } else {
   $6 = HEAP8[$0>>0]|0;
   $7 = ($6<<24>>24)==(45);
   if ($7) {
    HEAP32[$2>>2] = 4;
    $$1 = 0;
    break;
   }
   $8 = (___errno_location()|0);
   $9 = HEAP32[$8>>2]|0;
   HEAP32[$8>>2] = 0;
   $10 = (__ZNSt3__26__clocEv()|0);
   $11 = (_strtoull_l($0,$4,$3,$10)|0);
   $12 = tempRet0;
   $13 = HEAP32[$8>>2]|0;
   $14 = ($13|0)==(0);
   if ($14) {
    HEAP32[$8>>2] = $9;
   }
   $15 = HEAP32[$4>>2]|0;
   $16 = ($15|0)==($1|0);
   do {
    if ($16) {
     $17 = ($13|0)==(34);
     $18 = ($12>>>0)>(0);
     $19 = ($11>>>0)>(65535);
     $20 = ($12|0)==(0);
     $21 = $20 & $19;
     $22 = $18 | $21;
     $or$cond = $22 | $17;
     if ($or$cond) {
      HEAP32[$2>>2] = 4;
      $$0 = -1;
      break;
     } else {
      $23 = $11&65535;
      $$0 = $23;
      break;
     }
    } else {
     HEAP32[$2>>2] = 4;
     $$0 = 0;
    }
   } while(0);
   $$1 = $$0;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i51 = 0, $$024 = 0, $$1 = 0, $$125 = 0, $$127 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i31 = 0, $$pre$i3$i$i = 0, $$sink$index = 0, $$sink$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i46 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $6 = sp + 198|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 if ($19) {
  $20 = ((($9)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __THREW__ = 0;
 invoke_viii(666,($9|0),($23|0),0);
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $83 = ___cxa_find_matching_catch_2()|0;
  $84 = tempRet0;
  $$1 = $83;$$127 = $84;
 } else {
  $26 = HEAP8[$17>>0]|0;
  $27 = ($26<<24>>24)<(0);
  $28 = HEAP32[$9>>2]|0;
  $29 = $27 ? $28 : $9;
  HEAP32[$10>>2] = $29;
  HEAP32[$12>>2] = $11;
  HEAP32[$13>>2] = 0;
  $30 = ((($9)) + 4|0);
  $31 = ((($9)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$024 = $29;$$pre$i$i$i31 = $$pre;
  L11: while(1) {
   $32 = ($$pre$i$i$i31|0)==(0|0);
   if ($32) {
    $$pre$i$i$i = 0;
   } else {
    $33 = ((($$pre$i$i$i31)) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ((($$pre$i$i$i31)) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($34|0)==($36|0);
    if ($37) {
     $38 = HEAP32[$$pre$i$i$i31>>2]|0;
     $39 = ((($38)) + 36|0);
     $40 = HEAP32[$39>>2]|0;
     __THREW__ = 0;
     $41 = (invoke_ii($40|0,($$pre$i$i$i31|0))|0);
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      label = 28;
      break;
     }
     $44 = ($41|0)==(-1);
     if ($44) {
      HEAP32[$1>>2] = 0;
      $$pre$i$i$i = 0;
     } else {
      $$pre$i$i$i = $$pre$i$i$i31;
     }
    } else {
     $$pre$i$i$i = $$pre$i$i$i31;
    }
   }
   $45 = ($$pre$i$i$i|0)==(0|0);
   $46 = HEAP32[$2>>2]|0;
   $47 = ($46|0)==(0|0);
   do {
    if ($47) {
     label = 19;
    } else {
     $48 = ((($46)) + 12|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ((($46)) + 16|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($49|0)==($51|0);
     if (!($52)) {
      if ($45) {
       $172 = $46;
       break;
      } else {
       $$2 = $$024;$$pre$i3$i$i = $46;
       label = 38;
       break L11;
      }
     }
     $53 = HEAP32[$46>>2]|0;
     $54 = ((($53)) + 36|0);
     $55 = HEAP32[$54>>2]|0;
     __THREW__ = 0;
     $56 = (invoke_ii($55|0,($46|0))|0);
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if ($58) {
      label = 28;
      break L11;
     }
     $59 = ($56|0)==(-1);
     if ($59) {
      HEAP32[$2>>2] = 0;
      label = 19;
      break;
     } else {
      if ($45) {
       $172 = $46;
       break;
      } else {
       $$2 = $$024;$$pre$i3$i$i = $46;
       label = 38;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 19) {
    label = 0;
    if ($45) {
     $$2 = $$024;$$pre$i3$i$i = 0;
     label = 38;
     break;
    } else {
     $172 = 0;
    }
   }
   $60 = HEAP32[$10>>2]|0;
   $61 = HEAP8[$17>>0]|0;
   $62 = ($61<<24>>24)<(0);
   $63 = HEAP32[$30>>2]|0;
   $64 = $61&255;
   $65 = $62 ? $63 : $64;
   $66 = (($$024) + ($65)|0);
   $67 = ($60|0)==($66|0);
   if ($67) {
    $68 = $65 << 1;
    __THREW__ = 0;
    invoke_viii(666,($9|0),($68|0),0);
    $69 = __THREW__; __THREW__ = 0;
    $70 = $69&1;
    if ($70) {
     label = 30;
     break;
    }
    $71 = HEAP8[$17>>0]|0;
    $72 = ($71<<24>>24)<(0);
    if ($72) {
     $73 = HEAP32[$31>>2]|0;
     $74 = $73 & 2147483647;
     $phitmp$i46 = (($74) + -1)|0;
     $75 = $phitmp$i46;
    } else {
     $75 = 10;
    }
    __THREW__ = 0;
    invoke_viii(666,($9|0),($75|0),0);
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if ($77) {
     label = 30;
     break;
    }
    $78 = HEAP8[$17>>0]|0;
    $79 = ($78<<24>>24)<(0);
    $80 = HEAP32[$9>>2]|0;
    $81 = $79 ? $80 : $9;
    $82 = (($81) + ($65)|0);
    HEAP32[$10>>2] = $82;
    $$125 = $81;
   } else {
    $$125 = $$024;
   }
   $91 = ((($$pre$i$i$i)) + 12|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = ((($$pre$i$i$i)) + 16|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = ($92|0)==($94|0);
   if ($95) {
    $96 = HEAP32[$$pre$i$i$i>>2]|0;
    $97 = ((($96)) + 36|0);
    $98 = HEAP32[$97>>2]|0;
    __THREW__ = 0;
    $99 = (invoke_ii($98|0,($$pre$i$i$i|0))|0);
    $100 = __THREW__; __THREW__ = 0;
    $101 = $100&1;
    if ($101) {
     label = 28;
     break;
    } else {
     $$0$i$i51 = $99;
    }
   } else {
    $102 = HEAP8[$92>>0]|0;
    $103 = $102&255;
    $$0$i$i51 = $103;
   }
   $104 = $$0$i$i51&255;
   $105 = HEAP8[$7>>0]|0;
   $106 = (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($104,$14,$$125,$10,$13,$105,$8,$11,$12,$6)|0);
   $107 = ($106|0)==(0);
   if (!($107)) {
    $$2 = $$125;$$pre$i3$i$i = $172;
    label = 38;
    break;
   }
   $108 = HEAP32[$91>>2]|0;
   $109 = HEAP32[$93>>2]|0;
   $110 = ($108|0)==($109|0);
   if ($110) {
    $111 = HEAP32[$$pre$i$i$i>>2]|0;
    $112 = ((($111)) + 40|0);
    $113 = HEAP32[$112>>2]|0;
    __THREW__ = 0;
    (invoke_ii($113|0,($$pre$i$i$i|0))|0);
    $114 = __THREW__; __THREW__ = 0;
    $115 = $114&1;
    if ($115) {
     label = 28;
     break;
    } else {
     $$024 = $$125;$$pre$i$i$i31 = $$pre$i$i$i;
     continue;
    }
   } else {
    $116 = ((($108)) + 1|0);
    HEAP32[$91>>2] = $116;
    $$024 = $$125;$$pre$i$i$i31 = $$pre$i$i$i;
    continue;
   }
  }
  if ((label|0) == 28) {
   $85 = ___cxa_find_matching_catch_2()|0;
   $86 = tempRet0;
   $$sink$index = $85;$$sink$index3 = $86;
  }
  else if ((label|0) == 30) {
   $89 = ___cxa_find_matching_catch_2()|0;
   $90 = tempRet0;
   $$sink$index = $89;$$sink$index3 = $90;
  }
  else if ((label|0) == 38) {
   $117 = ((($8)) + 11|0);
   $118 = HEAP8[$117>>0]|0;
   $119 = ($118<<24>>24)<(0);
   $120 = ((($8)) + 4|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = $118&255;
   $123 = $119 ? $121 : $122;
   $124 = ($123|0)==(0);
   if (!($124)) {
    $125 = HEAP32[$12>>2]|0;
    $126 = $125;
    $127 = $11;
    $128 = (($126) - ($127))|0;
    $129 = ($128|0)<(160);
    if ($129) {
     $130 = HEAP32[$13>>2]|0;
     $131 = ((($125)) + 4|0);
     HEAP32[$12>>2] = $131;
     HEAP32[$125>>2] = $130;
    }
   }
   $132 = HEAP32[$10>>2]|0;
   __THREW__ = 0;
   $133 = (invoke_iiiii(775,($$2|0),($132|0),($4|0),($14|0))|0);
   $134 = tempRet0;
   $135 = __THREW__; __THREW__ = 0;
   $136 = $135&1;
   L54: do {
    if (!($136)) {
     $137 = $5;
     $138 = $137;
     HEAP32[$138>>2] = $133;
     $139 = (($137) + 4)|0;
     $140 = $139;
     HEAP32[$140>>2] = $134;
     $141 = HEAP32[$12>>2]|0;
     __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$141,$4);
     $142 = ($$pre$i$i$i|0)==(0|0);
     if ($142) {
      $155 = 0;
     } else {
      $143 = ((($$pre$i$i$i)) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$pre$i$i$i)) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i$i$i>>2]|0;
       $149 = ((($148)) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        break;
       }
       $154 = ($151|0)==(-1);
       if ($154) {
        HEAP32[$1>>2] = 0;
        $155 = 0;
       } else {
        $155 = $$pre$i$i$i;
       }
      } else {
       $155 = $$pre$i$i$i;
      }
     }
     $156 = ($155|0)==(0|0);
     $157 = ($$pre$i3$i$i|0)==(0|0);
     do {
      if ($157) {
       label = 53;
      } else {
       $158 = ((($$pre$i3$i$i)) + 12|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ((($$pre$i3$i$i)) + 16|0);
       $161 = HEAP32[$160>>2]|0;
       $162 = ($159|0)==($161|0);
       if ($162) {
        $163 = HEAP32[$$pre$i3$i$i>>2]|0;
        $164 = ((($163)) + 36|0);
        $165 = HEAP32[$164>>2]|0;
        __THREW__ = 0;
        $166 = (invoke_ii($165|0,($$pre$i3$i$i|0))|0);
        $167 = __THREW__; __THREW__ = 0;
        $168 = $167&1;
        if ($168) {
         break L54;
        }
        $169 = ($166|0)==(-1);
        if ($169) {
         HEAP32[$2>>2] = 0;
         label = 53;
         break;
        }
       }
       if (!($156)) {
        label = 54;
       }
      }
     } while(0);
     if ((label|0) == 53) {
      if ($156) {
       label = 54;
      }
     }
     if ((label|0) == 54) {
      $170 = HEAP32[$4>>2]|0;
      $171 = $170 | 2;
      HEAP32[$4>>2] = $171;
     }
     $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
     STACKTOP = sp;return ($$sroa$0$0$copyload|0);
    }
   } while(0);
   $87 = ___cxa_find_matching_catch_2()|0;
   $88 = tempRet0;
   $$sink$index = $87;$$sink$index3 = $88;
  }
  $$1 = $$sink$index;$$127 = $$sink$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($0|0)==($1|0);
 if ($5) {
  HEAP32[$2>>2] = 4;
  $23 = 0;$24 = 0;
 } else {
  $6 = (___errno_location()|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = 0;
  $8 = (__ZNSt3__26__clocEv()|0);
  $9 = (_strtoll_l($0,$4,$3,$8)|0);
  $10 = tempRet0;
  $11 = HEAP32[$6>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   HEAP32[$6>>2] = $7;
  }
  $13 = HEAP32[$4>>2]|0;
  $14 = ($13|0)==($1|0);
  if ($14) {
   $15 = ($11|0)==(34);
   if ($15) {
    HEAP32[$2>>2] = 4;
    $16 = ($10|0)>(0);
    $17 = ($9>>>0)>(0);
    $18 = ($10|0)==(0);
    $19 = $18 & $17;
    $20 = $16 | $19;
    $21 = $20 ? -1 : 0;
    $22 = $20 ? 2147483647 : -2147483648;
    $25 = $21;$26 = $22;
   } else {
    $25 = $9;$26 = $10;
   }
  } else {
   HEAP32[$2>>2] = 4;
   $25 = 0;$26 = 0;
  }
  $23 = $26;$24 = $25;
 }
 tempRet0 = ($23);
 STACKTOP = sp;return ($24|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i51 = 0, $$024 = 0, $$1 = 0, $$125 = 0, $$127 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i31 = 0, $$pre$i3$i$i = 0, $$sink$index = 0, $$sink$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i46 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $6 = sp + 198|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 if ($19) {
  $20 = ((($9)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __THREW__ = 0;
 invoke_viii(666,($9|0),($23|0),0);
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $83 = ___cxa_find_matching_catch_2()|0;
  $84 = tempRet0;
  $$1 = $83;$$127 = $84;
 } else {
  $26 = HEAP8[$17>>0]|0;
  $27 = ($26<<24>>24)<(0);
  $28 = HEAP32[$9>>2]|0;
  $29 = $27 ? $28 : $9;
  HEAP32[$10>>2] = $29;
  HEAP32[$12>>2] = $11;
  HEAP32[$13>>2] = 0;
  $30 = ((($9)) + 4|0);
  $31 = ((($9)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$024 = $29;$$pre$i$i$i31 = $$pre;
  L11: while(1) {
   $32 = ($$pre$i$i$i31|0)==(0|0);
   if ($32) {
    $$pre$i$i$i = 0;
   } else {
    $33 = ((($$pre$i$i$i31)) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ((($$pre$i$i$i31)) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($34|0)==($36|0);
    if ($37) {
     $38 = HEAP32[$$pre$i$i$i31>>2]|0;
     $39 = ((($38)) + 36|0);
     $40 = HEAP32[$39>>2]|0;
     __THREW__ = 0;
     $41 = (invoke_ii($40|0,($$pre$i$i$i31|0))|0);
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      label = 28;
      break;
     }
     $44 = ($41|0)==(-1);
     if ($44) {
      HEAP32[$1>>2] = 0;
      $$pre$i$i$i = 0;
     } else {
      $$pre$i$i$i = $$pre$i$i$i31;
     }
    } else {
     $$pre$i$i$i = $$pre$i$i$i31;
    }
   }
   $45 = ($$pre$i$i$i|0)==(0|0);
   $46 = HEAP32[$2>>2]|0;
   $47 = ($46|0)==(0|0);
   do {
    if ($47) {
     label = 19;
    } else {
     $48 = ((($46)) + 12|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ((($46)) + 16|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($49|0)==($51|0);
     if (!($52)) {
      if ($45) {
       $167 = $46;
       break;
      } else {
       $$2 = $$024;$$pre$i3$i$i = $46;
       label = 38;
       break L11;
      }
     }
     $53 = HEAP32[$46>>2]|0;
     $54 = ((($53)) + 36|0);
     $55 = HEAP32[$54>>2]|0;
     __THREW__ = 0;
     $56 = (invoke_ii($55|0,($46|0))|0);
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if ($58) {
      label = 28;
      break L11;
     }
     $59 = ($56|0)==(-1);
     if ($59) {
      HEAP32[$2>>2] = 0;
      label = 19;
      break;
     } else {
      if ($45) {
       $167 = $46;
       break;
      } else {
       $$2 = $$024;$$pre$i3$i$i = $46;
       label = 38;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 19) {
    label = 0;
    if ($45) {
     $$2 = $$024;$$pre$i3$i$i = 0;
     label = 38;
     break;
    } else {
     $167 = 0;
    }
   }
   $60 = HEAP32[$10>>2]|0;
   $61 = HEAP8[$17>>0]|0;
   $62 = ($61<<24>>24)<(0);
   $63 = HEAP32[$30>>2]|0;
   $64 = $61&255;
   $65 = $62 ? $63 : $64;
   $66 = (($$024) + ($65)|0);
   $67 = ($60|0)==($66|0);
   if ($67) {
    $68 = $65 << 1;
    __THREW__ = 0;
    invoke_viii(666,($9|0),($68|0),0);
    $69 = __THREW__; __THREW__ = 0;
    $70 = $69&1;
    if ($70) {
     label = 30;
     break;
    }
    $71 = HEAP8[$17>>0]|0;
    $72 = ($71<<24>>24)<(0);
    if ($72) {
     $73 = HEAP32[$31>>2]|0;
     $74 = $73 & 2147483647;
     $phitmp$i46 = (($74) + -1)|0;
     $75 = $phitmp$i46;
    } else {
     $75 = 10;
    }
    __THREW__ = 0;
    invoke_viii(666,($9|0),($75|0),0);
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if ($77) {
     label = 30;
     break;
    }
    $78 = HEAP8[$17>>0]|0;
    $79 = ($78<<24>>24)<(0);
    $80 = HEAP32[$9>>2]|0;
    $81 = $79 ? $80 : $9;
    $82 = (($81) + ($65)|0);
    HEAP32[$10>>2] = $82;
    $$125 = $81;
   } else {
    $$125 = $$024;
   }
   $91 = ((($$pre$i$i$i)) + 12|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = ((($$pre$i$i$i)) + 16|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = ($92|0)==($94|0);
   if ($95) {
    $96 = HEAP32[$$pre$i$i$i>>2]|0;
    $97 = ((($96)) + 36|0);
    $98 = HEAP32[$97>>2]|0;
    __THREW__ = 0;
    $99 = (invoke_ii($98|0,($$pre$i$i$i|0))|0);
    $100 = __THREW__; __THREW__ = 0;
    $101 = $100&1;
    if ($101) {
     label = 28;
     break;
    } else {
     $$0$i$i51 = $99;
    }
   } else {
    $102 = HEAP8[$92>>0]|0;
    $103 = $102&255;
    $$0$i$i51 = $103;
   }
   $104 = $$0$i$i51&255;
   $105 = HEAP8[$7>>0]|0;
   $106 = (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($104,$14,$$125,$10,$13,$105,$8,$11,$12,$6)|0);
   $107 = ($106|0)==(0);
   if (!($107)) {
    $$2 = $$125;$$pre$i3$i$i = $167;
    label = 38;
    break;
   }
   $108 = HEAP32[$91>>2]|0;
   $109 = HEAP32[$93>>2]|0;
   $110 = ($108|0)==($109|0);
   if ($110) {
    $111 = HEAP32[$$pre$i$i$i>>2]|0;
    $112 = ((($111)) + 40|0);
    $113 = HEAP32[$112>>2]|0;
    __THREW__ = 0;
    (invoke_ii($113|0,($$pre$i$i$i|0))|0);
    $114 = __THREW__; __THREW__ = 0;
    $115 = $114&1;
    if ($115) {
     label = 28;
     break;
    } else {
     $$024 = $$125;$$pre$i$i$i31 = $$pre$i$i$i;
     continue;
    }
   } else {
    $116 = ((($108)) + 1|0);
    HEAP32[$91>>2] = $116;
    $$024 = $$125;$$pre$i$i$i31 = $$pre$i$i$i;
    continue;
   }
  }
  if ((label|0) == 28) {
   $85 = ___cxa_find_matching_catch_2()|0;
   $86 = tempRet0;
   $$sink$index = $85;$$sink$index3 = $86;
  }
  else if ((label|0) == 30) {
   $89 = ___cxa_find_matching_catch_2()|0;
   $90 = tempRet0;
   $$sink$index = $89;$$sink$index3 = $90;
  }
  else if ((label|0) == 38) {
   $117 = ((($8)) + 11|0);
   $118 = HEAP8[$117>>0]|0;
   $119 = ($118<<24>>24)<(0);
   $120 = ((($8)) + 4|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = $118&255;
   $123 = $119 ? $121 : $122;
   $124 = ($123|0)==(0);
   if (!($124)) {
    $125 = HEAP32[$12>>2]|0;
    $126 = $125;
    $127 = $11;
    $128 = (($126) - ($127))|0;
    $129 = ($128|0)<(160);
    if ($129) {
     $130 = HEAP32[$13>>2]|0;
     $131 = ((($125)) + 4|0);
     HEAP32[$12>>2] = $131;
     HEAP32[$125>>2] = $130;
    }
   }
   $132 = HEAP32[$10>>2]|0;
   __THREW__ = 0;
   $133 = (invoke_iiiii(776,($$2|0),($132|0),($4|0),($14|0))|0);
   $134 = __THREW__; __THREW__ = 0;
   $135 = $134&1;
   L54: do {
    if (!($135)) {
     HEAP32[$5>>2] = $133;
     $136 = HEAP32[$12>>2]|0;
     __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$136,$4);
     $137 = ($$pre$i$i$i|0)==(0|0);
     if ($137) {
      $150 = 0;
     } else {
      $138 = ((($$pre$i$i$i)) + 12|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ((($$pre$i$i$i)) + 16|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = ($139|0)==($141|0);
      if ($142) {
       $143 = HEAP32[$$pre$i$i$i>>2]|0;
       $144 = ((($143)) + 36|0);
       $145 = HEAP32[$144>>2]|0;
       __THREW__ = 0;
       $146 = (invoke_ii($145|0,($$pre$i$i$i|0))|0);
       $147 = __THREW__; __THREW__ = 0;
       $148 = $147&1;
       if ($148) {
        break;
       }
       $149 = ($146|0)==(-1);
       if ($149) {
        HEAP32[$1>>2] = 0;
        $150 = 0;
       } else {
        $150 = $$pre$i$i$i;
       }
      } else {
       $150 = $$pre$i$i$i;
      }
     }
     $151 = ($150|0)==(0|0);
     $152 = ($$pre$i3$i$i|0)==(0|0);
     do {
      if ($152) {
       label = 53;
      } else {
       $153 = ((($$pre$i3$i$i)) + 12|0);
       $154 = HEAP32[$153>>2]|0;
       $155 = ((($$pre$i3$i$i)) + 16|0);
       $156 = HEAP32[$155>>2]|0;
       $157 = ($154|0)==($156|0);
       if ($157) {
        $158 = HEAP32[$$pre$i3$i$i>>2]|0;
        $159 = ((($158)) + 36|0);
        $160 = HEAP32[$159>>2]|0;
        __THREW__ = 0;
        $161 = (invoke_ii($160|0,($$pre$i3$i$i|0))|0);
        $162 = __THREW__; __THREW__ = 0;
        $163 = $162&1;
        if ($163) {
         break L54;
        }
        $164 = ($161|0)==(-1);
        if ($164) {
         HEAP32[$2>>2] = 0;
         label = 53;
         break;
        }
       }
       if (!($151)) {
        label = 54;
       }
      }
     } while(0);
     if ((label|0) == 53) {
      if ($151) {
       label = 54;
      }
     }
     if ((label|0) == 54) {
      $165 = HEAP32[$4>>2]|0;
      $166 = $165 | 2;
      HEAP32[$4>>2] = $166;
     }
     $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
     STACKTOP = sp;return ($$sroa$0$0$copyload|0);
    }
   } while(0);
   $87 = ___cxa_find_matching_catch_2()|0;
   $88 = tempRet0;
   $$sink$index = $87;$$sink$index3 = $88;
  }
  $$1 = $$sink$index;$$127 = $$sink$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($0|0)==($1|0);
 if ($5) {
  HEAP32[$2>>2] = 4;
  $$1 = 0;
 } else {
  $6 = (___errno_location()|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = 0;
  $8 = (__ZNSt3__26__clocEv()|0);
  $9 = (_strtoll_l($0,$4,$3,$8)|0);
  $10 = tempRet0;
  $11 = HEAP32[$6>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   HEAP32[$6>>2] = $7;
  }
  $13 = HEAP32[$4>>2]|0;
  $14 = ($13|0)==($1|0);
  L7: do {
   if ($14) {
    $15 = ($11|0)==(34);
    do {
     if ($15) {
      HEAP32[$2>>2] = 4;
      $26 = ($10|0)>(0);
      $27 = ($9>>>0)>(0);
      $28 = ($10|0)==(0);
      $29 = $28 & $27;
      $30 = $26 | $29;
      if ($30) {
       $$0 = 2147483647;
       break L7;
      }
     } else {
      $16 = ($10|0)<(-1);
      $17 = ($9>>>0)<(2147483648);
      $18 = ($10|0)==(-1);
      $19 = $18 & $17;
      $20 = $16 | $19;
      if ($20) {
       HEAP32[$2>>2] = 4;
       break;
      }
      $21 = ($10|0)>(0);
      $22 = ($9>>>0)>(2147483647);
      $23 = ($10|0)==(0);
      $24 = $23 & $22;
      $25 = $21 | $24;
      if ($25) {
       HEAP32[$2>>2] = 4;
       $$0 = 2147483647;
       break L7;
      } else {
       $$0 = $9;
       break L7;
      }
     }
    } while(0);
    $$0 = -2147483648;
   } else {
    HEAP32[$2>>2] = 4;
    $$0 = 0;
   }
  } while(0);
  $$1 = $$0;
 }
 STACKTOP = sp;return ($$1|0);
}
function __ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0$i$i = 0, $$0100 = 0, $$0101 = 0, $$0102 = 0, $$0103 = 0, $$0106 = 0, $$0110 = 0, $$0126 = 0, $$0127 = 0, $$0127181 = 0, $$097 = 0, $$098 = 0, $$099$off0 = 0, $$1104 = 0, $$1107 = 0, $$1111 = 0, $$2$off0 = 0, $$2105 = 0, $$2108 = 0;
 var $$2112 = 0, $$3 = 0, $$3109 = 0, $$3113 = 0, $$5 = 0, $$5115 = 0, $$6 = 0, $$7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i133 = 0, $$pre$i3$i$i137 = 0, $$sink$sink$sink$sink$sink$index = 0, $$sink$sink$sink$sink$sink$index5 = 0, $$sink$sink$sink$sink$sink189$index = 0, $$sink$sink$sink$sink$sink189$index14 = 0, $$sroa$0150$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $7 = sp;
 $8 = $3;
 $9 = $2;
 $10 = (($8) - ($9))|0;
 $11 = (($10|0) / 12)&-1;
 $12 = ($11>>>0)>(100);
 do {
  if ($12) {
   $13 = (_malloc($11)|0);
   $14 = ($13|0)==(0|0);
   if ($14) {
    __THREW__ = 0;
    invoke_v(777);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if ($16) {
     $17 = ___cxa_find_matching_catch_2()|0;
     $18 = tempRet0;
     $$sink$sink$sink$sink$sink189$index = $17;$$sink$sink$sink$sink$sink189$index14 = $18;
     break;
    }
   }
   $19 = $13;
   $$0126 = $13;$$sroa$0150$0 = $19;
   label = 6;
  } else {
   $$0126 = $7;$$sroa$0150$0 = 0;
   label = 6;
  }
 } while(0);
 if ((label|0) == 6) {
  $$0102 = $2;$$0103 = $$0126;$$0106 = 0;$$0110 = $11;
  while(1) {
   $20 = ($$0102|0)==($3|0);
   if ($20) {
    break;
   }
   $21 = ((($$0102)) + 11|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = ($22<<24>>24)<(0);
   if ($23) {
    $24 = ((($$0102)) + 4|0);
    $25 = HEAP32[$24>>2]|0;
    $27 = $25;
   } else {
    $26 = $22&255;
    $27 = $26;
   }
   $28 = ($27|0)==(0);
   if ($28) {
    HEAP8[$$0103>>0] = 2;
    $29 = (($$0110) + -1)|0;
    $30 = (($$0106) + 1)|0;
    $$1107 = $30;$$1111 = $29;
   } else {
    HEAP8[$$0103>>0] = 1;
    $$1107 = $$0106;$$1111 = $$0110;
   }
   $31 = ((($$0102)) + 12|0);
   $32 = ((($$0103)) + 1|0);
   $$0102 = $31;$$0103 = $32;$$0106 = $$1107;$$0110 = $$1111;
  }
  $$0101 = 0;$$2108 = $$0106;$$2112 = $$0110;
  L21: while(1) {
   $33 = HEAP32[$0>>2]|0;
   $34 = ($33|0)==(0|0);
   do {
    if ($34) {
     $47 = 0;
    } else {
     $35 = ((($33)) + 12|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ((($33)) + 16|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($36|0)==($38|0);
     if ($39) {
      $40 = HEAP32[$33>>2]|0;
      $41 = ((($40)) + 36|0);
      $42 = HEAP32[$41>>2]|0;
      __THREW__ = 0;
      $43 = (invoke_ii($42|0,($33|0))|0);
      $44 = __THREW__; __THREW__ = 0;
      $45 = $44&1;
      if ($45) {
       label = 39;
       break L21;
      }
      $46 = ($43|0)==(-1);
      if ($46) {
       HEAP32[$0>>2] = 0;
       $47 = 0;
       break;
      } else {
       $$pre$i$i$i = HEAP32[$0>>2]|0;
       $47 = $$pre$i$i$i;
       break;
      }
     } else {
      $47 = $33;
     }
    }
   } while(0);
   $48 = ($47|0)==(0|0);
   $49 = HEAP32[$1>>2]|0;
   $50 = ($49|0)==(0|0);
   if ($50) {
    $$pre$i3$i$i137 = 0;
   } else {
    $51 = ((($49)) + 12|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ((($49)) + 16|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ($52|0)==($54|0);
    if ($55) {
     $56 = HEAP32[$49>>2]|0;
     $57 = ((($56)) + 36|0);
     $58 = HEAP32[$57>>2]|0;
     __THREW__ = 0;
     $59 = (invoke_ii($58|0,($49|0))|0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 39;
      break;
     }
     $62 = ($59|0)==(-1);
     if ($62) {
      HEAP32[$1>>2] = 0;
      $$pre$i3$i$i137 = 0;
     } else {
      $$pre$i3$i$i137 = $49;
     }
    } else {
     $$pre$i3$i$i137 = $49;
    }
   }
   $63 = ($$pre$i3$i$i137|0)==(0|0);
   $tmp$i$i = $48 ^ $63;
   $64 = ($$2112|0)!=(0);
   $65 = $64 & $tmp$i$i;
   $66 = HEAP32[$0>>2]|0;
   if (!($65)) {
    label = 28;
    break;
   }
   $96 = ((($66)) + 12|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = ((($66)) + 16|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = ($97|0)==($99|0);
   if ($100) {
    $101 = HEAP32[$66>>2]|0;
    $102 = ((($101)) + 36|0);
    $103 = HEAP32[$102>>2]|0;
    __THREW__ = 0;
    $104 = (invoke_ii($103|0,($66|0))|0);
    $105 = __THREW__; __THREW__ = 0;
    $106 = $105&1;
    if ($106) {
     label = 39;
     break;
    } else {
     $$0$i$i = $104;
    }
   } else {
    $107 = HEAP8[$97>>0]|0;
    $108 = $107&255;
    $$0$i$i = $108;
   }
   $109 = $$0$i$i&255;
   if ($6) {
    $$0100 = $109;
   } else {
    $110 = HEAP32[$4>>2]|0;
    $111 = ((($110)) + 12|0);
    $112 = HEAP32[$111>>2]|0;
    __THREW__ = 0;
    $113 = (invoke_iii($112|0,($4|0),($109|0))|0);
    $114 = __THREW__; __THREW__ = 0;
    $115 = $114&1;
    if ($115) {
     label = 45;
     break;
    } else {
     $$0100 = $113;
    }
   }
   $118 = (($$0101) + 1)|0;
   $$098 = $2;$$099$off0 = 0;$$1104 = $$0126;$$3109 = $$2108;$$3113 = $$2112;
   while(1) {
    $119 = ($$098|0)==($3|0);
    if ($119) {
     break;
    }
    $120 = HEAP8[$$1104>>0]|0;
    $121 = ($120<<24>>24)==(1);
    do {
     if ($121) {
      $122 = ((($$098)) + 11|0);
      $123 = HEAP8[$122>>0]|0;
      $124 = ($123<<24>>24)<(0);
      if ($124) {
       $125 = HEAP32[$$098>>2]|0;
       $127 = $125;
      } else {
       $127 = $$098;
      }
      $126 = (($127) + ($$0101)|0);
      $128 = HEAP8[$126>>0]|0;
      if ($6) {
       $$097 = $128;
      } else {
       $129 = HEAP32[$4>>2]|0;
       $130 = ((($129)) + 12|0);
       $131 = HEAP32[$130>>2]|0;
       __THREW__ = 0;
       $132 = (invoke_iii($131|0,($4|0),($128|0))|0);
       $133 = __THREW__; __THREW__ = 0;
       $134 = $133&1;
       if ($134) {
        label = 55;
        break L21;
       } else {
        $$097 = $132;
       }
      }
      $137 = ($$0100<<24>>24)==($$097<<24>>24);
      if (!($137)) {
       HEAP8[$$1104>>0] = 0;
       $147 = (($$3113) + -1)|0;
       $$2$off0 = $$099$off0;$$5 = $$3109;$$5115 = $147;
       break;
      }
      $138 = HEAP8[$122>>0]|0;
      $139 = ($138<<24>>24)<(0);
      if ($139) {
       $140 = ((($$098)) + 4|0);
       $141 = HEAP32[$140>>2]|0;
       $143 = $141;
      } else {
       $142 = $138&255;
       $143 = $142;
      }
      $144 = ($143|0)==($118|0);
      if ($144) {
       $145 = (($$3113) + -1)|0;
       $146 = (($$3109) + 1)|0;
       HEAP8[$$1104>>0] = 2;
       $$2$off0 = 1;$$5 = $146;$$5115 = $145;
      } else {
       $$2$off0 = 1;$$5 = $$3109;$$5115 = $$3113;
      }
     } else {
      $$2$off0 = $$099$off0;$$5 = $$3109;$$5115 = $$3113;
     }
    } while(0);
    $148 = ((($$098)) + 12|0);
    $149 = ((($$1104)) + 1|0);
    $$098 = $148;$$099$off0 = $$2$off0;$$1104 = $149;$$3109 = $$5;$$3113 = $$5115;
   }
   if (!($$099$off0)) {
    $$0101 = $118;$$2108 = $$3109;$$2112 = $$3113;
    continue;
   }
   $150 = HEAP32[$0>>2]|0;
   $151 = ((($150)) + 12|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = ((($150)) + 16|0);
   $154 = HEAP32[$153>>2]|0;
   $155 = ($152|0)==($154|0);
   if ($155) {
    $156 = HEAP32[$150>>2]|0;
    $157 = ((($156)) + 40|0);
    $158 = HEAP32[$157>>2]|0;
    __THREW__ = 0;
    (invoke_ii($158|0,($150|0))|0);
    $159 = __THREW__; __THREW__ = 0;
    $160 = $159&1;
    if ($160) {
     label = 69;
     break;
    }
   } else {
    $161 = ((($152)) + 1|0);
    HEAP32[$151>>2] = $161;
   }
   $162 = (($$3109) + ($$3113))|0;
   $163 = ($162>>>0)>(1);
   if ($163) {
    $$0 = $2;$$2105 = $$0126;$$6 = $$3109;
   } else {
    $$0101 = $118;$$2108 = $$3109;$$2112 = $$3113;
    continue;
   }
   while(1) {
    $164 = ($$0|0)==($3|0);
    if ($164) {
     $$0101 = $118;$$2108 = $$6;$$2112 = $$3113;
     continue L21;
    }
    $167 = HEAP8[$$2105>>0]|0;
    $168 = ($167<<24>>24)==(2);
    if ($168) {
     $169 = ((($$0)) + 11|0);
     $170 = HEAP8[$169>>0]|0;
     $171 = ($170<<24>>24)<(0);
     if ($171) {
      $172 = ((($$0)) + 4|0);
      $173 = HEAP32[$172>>2]|0;
      $175 = $173;
     } else {
      $174 = $170&255;
      $175 = $174;
     }
     $176 = ($175|0)==($118|0);
     if ($176) {
      $$7 = $$6;
     } else {
      $177 = (($$6) + -1)|0;
      HEAP8[$$2105>>0] = 0;
      $$7 = $177;
     }
    } else {
     $$7 = $$6;
    }
    $178 = ((($$0)) + 12|0);
    $179 = ((($$2105)) + 1|0);
    $$0 = $178;$$2105 = $179;$$6 = $$7;
   }
  }
  if ((label|0) == 28) {
   $67 = ($66|0)==(0|0);
   do {
    if ($67) {
     $80 = 0;
     label = 34;
    } else {
     $68 = ((($66)) + 12|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ((($66)) + 16|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ($69|0)==($71|0);
     if ($72) {
      $73 = HEAP32[$66>>2]|0;
      $74 = ((($73)) + 36|0);
      $75 = HEAP32[$74>>2]|0;
      __THREW__ = 0;
      $76 = (invoke_ii($75|0,($66|0))|0);
      $77 = __THREW__; __THREW__ = 0;
      $78 = $77&1;
      if (!($78)) {
       $79 = ($76|0)==(-1);
       if ($79) {
        HEAP32[$0>>2] = 0;
        $80 = 0;
        label = 34;
        break;
       } else {
        $$pre$i$i$i133 = HEAP32[$0>>2]|0;
        $80 = $$pre$i$i$i133;
        label = 34;
        break;
       }
      }
     } else {
      $80 = $66;
      label = 34;
     }
    }
   } while(0);
   L96: do {
    if ((label|0) == 34) {
     $81 = ($80|0)==(0|0);
     do {
      if ($63) {
       label = 78;
      } else {
       $82 = ((($$pre$i3$i$i137)) + 12|0);
       $83 = HEAP32[$82>>2]|0;
       $84 = ((($$pre$i3$i$i137)) + 16|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = ($83|0)==($85|0);
       if ($86) {
        $87 = HEAP32[$$pre$i3$i$i137>>2]|0;
        $88 = ((($87)) + 36|0);
        $89 = HEAP32[$88>>2]|0;
        __THREW__ = 0;
        $90 = (invoke_ii($89|0,($$pre$i3$i$i137|0))|0);
        $91 = __THREW__; __THREW__ = 0;
        $92 = $91&1;
        if ($92) {
         break L96;
        }
        $93 = ($90|0)==(-1);
        if ($93) {
         HEAP32[$1>>2] = 0;
         label = 78;
         break;
        }
       }
       if ($81) {
        $$0127 = $2;$$3 = $$0126;
       } else {
        label = 79;
       }
      }
     } while(0);
     if ((label|0) == 78) {
      if ($81) {
       label = 79;
      } else {
       $$0127 = $2;$$3 = $$0126;
      }
     }
     if ((label|0) == 79) {
      $180 = HEAP32[$5>>2]|0;
      $181 = $180 | 2;
      HEAP32[$5>>2] = $181;
      $$0127 = $2;$$3 = $$0126;
     }
     while(1) {
      $184 = ($$0127|0)==($3|0);
      if ($184) {
       label = 84;
       break;
      }
      $185 = HEAP8[$$3>>0]|0;
      $186 = ($185<<24>>24)==(2);
      if ($186) {
       $$0127181 = $$0127;
       break;
      }
      $187 = ((($$0127)) + 12|0);
      $188 = ((($$3)) + 1|0);
      $$0127 = $187;$$3 = $188;
     }
     if ((label|0) == 84) {
      $189 = HEAP32[$5>>2]|0;
      $190 = $189 | 4;
      HEAP32[$5>>2] = $190;
      $$0127181 = $3;
     }
     $191 = ($$sroa$0150$0|0)==(0);
     if (!($191)) {
      $192 = $$sroa$0150$0;
      _free($192);
     }
     STACKTOP = sp;return ($$0127181|0);
    }
   } while(0);
   $182 = ___cxa_find_matching_catch_2()|0;
   $183 = tempRet0;
   $$sink$sink$sink$sink$sink$index = $182;$$sink$sink$sink$sink$sink$index5 = $183;
  }
  else if ((label|0) == 39) {
   $94 = ___cxa_find_matching_catch_2()|0;
   $95 = tempRet0;
   $$sink$sink$sink$sink$sink$index = $94;$$sink$sink$sink$sink$sink$index5 = $95;
  }
  else if ((label|0) == 45) {
   $116 = ___cxa_find_matching_catch_2()|0;
   $117 = tempRet0;
   $$sink$sink$sink$sink$sink$index = $116;$$sink$sink$sink$sink$sink$index5 = $117;
  }
  else if ((label|0) == 55) {
   $135 = ___cxa_find_matching_catch_2()|0;
   $136 = tempRet0;
   $$sink$sink$sink$sink$sink$index = $135;$$sink$sink$sink$sink$sink$index5 = $136;
  }
  else if ((label|0) == 69) {
   $165 = ___cxa_find_matching_catch_2()|0;
   $166 = tempRet0;
   $$sink$sink$sink$sink$sink$index = $165;$$sink$sink$sink$sink$sink$index5 = $166;
  }
  $193 = ($$sroa$0150$0|0)==(0);
  if ($193) {
   $$sink$sink$sink$sink$sink189$index = $$sink$sink$sink$sink$sink$index;$$sink$sink$sink$sink$sink189$index14 = $$sink$sink$sink$sink$sink$index5;
  } else {
   $194 = $$sroa$0150$0;
   _free($194);
   $$sink$sink$sink$sink$sink189$index = $$sink$sink$sink$sink$sink$index;$$sink$sink$sink$sink$sink189$index14 = $$sink$sink$sink$sink$sink$index5;
  }
 }
 ___resumeException($$sink$sink$sink$sink$sink189$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$2 = 0, $$232 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$ptr = 0, $$sroa$026$0 = 0, $$sroa$026$0$copyload = 0, $$sroa$026$0$copyload28 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy2 = sp + 60|0;
 $$byval_copy1 = sp + 56|0;
 $$byval_copy = sp + 52|0;
 $6 = sp + 48|0;
 $7 = sp + 44|0;
 $8 = sp + 40|0;
 $9 = sp + 36|0;
 $10 = sp + 32|0;
 $11 = sp + 8|0;
 $12 = sp;
 $13 = ((($3)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & 1;
 $16 = ($15|0)==(0);
 L1: do {
  if ($16) {
   HEAP32[$6>>2] = -1;
   $17 = HEAP32[$0>>2]|0;
   $18 = ((($17)) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = HEAP32[$1>>2]|0;
   HEAP32[$7>>2] = $20;
   $21 = HEAP32[$2>>2]|0;
   HEAP32[$8>>2] = $21;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$8>>2]|0;
   $22 = (FUNCTION_TABLE_iiiiiii[$19 & 1023]($0,$$byval_copy,$$byval_copy1,$3,$4,$6)|0);
   HEAP32[$1>>2] = $22;
   $23 = HEAP32[$6>>2]|0;
   switch ($23|0) {
   case 0:  {
    HEAP8[$5>>0] = 0;
    break;
   }
   case 1:  {
    HEAP8[$5>>0] = 1;
    break;
   }
   default: {
    HEAP8[$5>>0] = 1;
    HEAP32[$4>>2] = 4;
   }
   }
   $$sroa$026$0$copyload = HEAP32[$1>>2]|0;
   $$sroa$026$0 = $$sroa$026$0$copyload;
  } else {
   $24 = (__ZNKSt3__28ios_base6getlocEv($3)|0);
   HEAP32[$9>>2] = $24;
   __THREW__ = 0;
   $25 = (invoke_iii(659,($9|0),(40744|0))|0);
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   do {
    if ($27) {
     $51 = ___cxa_find_matching_catch_2()|0;
     $52 = tempRet0;
     (__ZNSt3__214__shared_count16__release_sharedEv($24)|0);
     $$2 = $51;$$232 = $52;
    } else {
     (__ZNSt3__214__shared_count16__release_sharedEv($24)|0);
     $28 = (__ZNKSt3__28ios_base6getlocEv($3)|0);
     HEAP32[$10>>2] = $28;
     __THREW__ = 0;
     $29 = (invoke_iii(659,($10|0),(40752|0))|0);
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     if ($31) {
      $53 = ___cxa_find_matching_catch_2()|0;
      $54 = tempRet0;
      (__ZNSt3__214__shared_count16__release_sharedEv($28)|0);
      $$2 = $53;$$232 = $54;
      break;
     }
     (__ZNSt3__214__shared_count16__release_sharedEv($28)|0);
     $32 = HEAP32[$29>>2]|0;
     $33 = ((($32)) + 24|0);
     $34 = HEAP32[$33>>2]|0;
     __THREW__ = 0;
     invoke_vii($34|0,($11|0),($29|0));
     $35 = __THREW__; __THREW__ = 0;
     $36 = $35&1;
     if ($36) {
      $37 = ___cxa_find_matching_catch_2()|0;
      $38 = tempRet0;
      $$2 = $37;$$232 = $38;
      break;
     }
     $$ptr = ((($11)) + 12|0);
     $39 = HEAP32[$29>>2]|0;
     $40 = ((($39)) + 28|0);
     $41 = HEAP32[$40>>2]|0;
     __THREW__ = 0;
     invoke_vii($41|0,($$ptr|0),($29|0));
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      $63 = ___cxa_find_matching_catch_2()|0;
      $64 = tempRet0;
      __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
      $$2 = $63;$$232 = $64;
      break;
     }
     $44 = HEAP32[$2>>2]|0;
     HEAP32[$12>>2] = $44;
     $45 = ((($11)) + 24|0);
     __THREW__ = 0;
     ;HEAP32[$$byval_copy2>>2]=HEAP32[$12>>2]|0;
     $46 = (invoke_iiiiiiii(778,($1|0),($$byval_copy2|0),($11|0),($45|0),($25|0),($4|0),1)|0);
     $47 = __THREW__; __THREW__ = 0;
     $48 = $47&1;
     if ($48) {
      $55 = ___cxa_find_matching_catch_2()|0;
      $56 = tempRet0;
      $61 = $45;
      while(1) {
       $60 = ((($61)) + -12|0);
       __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($60);
       $62 = ($60|0)==($11|0);
       if ($62) {
        break;
       } else {
        $61 = $60;
       }
      }
      $$2 = $55;$$232 = $56;
      break;
     } else {
      $49 = ($46|0)==($11|0);
      $50 = $49&1;
      HEAP8[$5>>0] = $50;
      $$sroa$026$0$copyload28 = HEAP32[$1>>2]|0;
      $58 = $45;
      while(1) {
       $57 = ((($58)) + -12|0);
       __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($57);
       $59 = ($57|0)==($11|0);
       if ($59) {
        break;
       } else {
        $58 = $57;
       }
      }
      $$sroa$026$0 = $$sroa$026$0$copyload28;
      break L1;
     }
    }
   } while(0);
   ___resumeException($$2|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$026$0|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i39 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i45 = 0, $$0$i$i35 = 0, $$0$i$i65 = 0, $$025 = 0, $$028 = 0, $$126 = 0, $$2 = 0, $$227 = 0, $$230 = 0, $$3 = 0, $$331 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i41 = 0, $$pre$i4$i$i = 0;
 var $$sink$index = 0, $$sink$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $exitcond$i$i36 = 0, $phitmp$i = 0;
 var $phitmp$i60 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $vararg_buffer = sp;
 $6 = sp + 208|0;
 $7 = sp + 196|0;
 $8 = sp + 192|0;
 $9 = sp + 180|0;
 $10 = sp + 176|0;
 $11 = sp + 16|0;
 $12 = sp + 8|0;
 $13 = sp + 4|0;
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $14 = (($7) + ($$0$i$i<<2)|0);
  HEAP32[$14>>2] = 0;
  $15 = (($$0$i$i) + 1)|0;
  $$0$i$i = $15;
 }
 __THREW__ = 0;
 $16 = (invoke_ii(658,($3|0))|0);
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 do {
  if ($18) {
   $96 = ___cxa_find_matching_catch_2()|0;
   $97 = tempRet0;
   $$0 = $96;$$028 = $97;
   label = 36;
  } else {
   HEAP32[$8>>2] = $16;
   __THREW__ = 0;
   $19 = (invoke_iii(659,($8|0),(40744|0))|0);
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if (!($21)) {
    $22 = HEAP32[$19>>2]|0;
    $23 = ((($22)) + 48|0);
    $24 = HEAP32[$23>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($24|0,($19|0),(32626|0),((32652)|0),($6|0))|0);
    $25 = __THREW__; __THREW__ = 0;
    $26 = $25&1;
    if (!($26)) {
     (__ZNSt3__214__shared_count16__release_sharedEv($16)|0);
     ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
     $$0$i$i35 = 0;
     while(1) {
      $exitcond$i$i36 = ($$0$i$i35|0)==(3);
      if ($exitcond$i$i36) {
       break;
      }
      $27 = (($9) + ($$0$i$i35<<2)|0);
      HEAP32[$27>>2] = 0;
      $28 = (($$0$i$i35) + 1)|0;
      $$0$i$i35 = $28;
     }
     $29 = ((($9)) + 11|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = ($30<<24>>24)<(0);
     if ($31) {
      $32 = ((($9)) + 8|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = $33 & 2147483647;
      $phitmp$i = (($34) + -1)|0;
      $35 = $phitmp$i;
     } else {
      $35 = 10;
     }
     __THREW__ = 0;
     invoke_viii(666,($9|0),($35|0),0);
     $36 = __THREW__; __THREW__ = 0;
     $37 = $36&1;
     if ($37) {
      $100 = ___cxa_find_matching_catch_2()|0;
      $101 = tempRet0;
      $$2 = $100;$$230 = $101;
     } else {
      $38 = HEAP8[$29>>0]|0;
      $39 = ($38<<24>>24)<(0);
      $40 = HEAP32[$9>>2]|0;
      $41 = $39 ? $40 : $9;
      HEAP32[$10>>2] = $41;
      HEAP32[$12>>2] = $11;
      HEAP32[$13>>2] = 0;
      $42 = ((($9)) + 4|0);
      $43 = ((($9)) + 8|0);
      $$pre = HEAP32[$1>>2]|0;
      $$025 = $41;$$pre$i$i$i41 = $$pre;
      L21: while(1) {
       $44 = ($$pre$i$i$i41|0)==(0|0);
       if ($44) {
        $$pre$i$i$i = 0;$177 = 1;
       } else {
        $45 = ((($$pre$i$i$i41)) + 12|0);
        $46 = HEAP32[$45>>2]|0;
        $47 = ((($$pre$i$i$i41)) + 16|0);
        $48 = HEAP32[$47>>2]|0;
        $49 = ($46|0)==($48|0);
        if ($49) {
         $50 = HEAP32[$$pre$i$i$i41>>2]|0;
         $51 = ((($50)) + 36|0);
         $52 = HEAP32[$51>>2]|0;
         __THREW__ = 0;
         $53 = (invoke_ii($52|0,($$pre$i$i$i41|0))|0);
         $54 = __THREW__; __THREW__ = 0;
         $55 = $54&1;
         if ($55) {
          label = 38;
          break;
         } else {
          $$0$i$i$i$i39 = $53;
         }
        } else {
         $56 = HEAP32[$46>>2]|0;
         $$0$i$i$i$i39 = $56;
        }
        $57 = ($$0$i$i$i$i39|0)==(-1);
        if ($57) {
         HEAP32[$1>>2] = 0;
         $$pre$i$i$i = 0;$177 = 1;
        } else {
         $$pre$i$i$i = $$pre$i$i$i41;$177 = 0;
        }
       }
       $58 = HEAP32[$2>>2]|0;
       $59 = ($58|0)==(0|0);
       do {
        if ($59) {
         label = 26;
        } else {
         $60 = ((($58)) + 12|0);
         $61 = HEAP32[$60>>2]|0;
         $62 = ((($58)) + 16|0);
         $63 = HEAP32[$62>>2]|0;
         $64 = ($61|0)==($63|0);
         if ($64) {
          $65 = HEAP32[$58>>2]|0;
          $66 = ((($65)) + 36|0);
          $67 = HEAP32[$66>>2]|0;
          __THREW__ = 0;
          $68 = (invoke_ii($67|0,($58|0))|0);
          $69 = __THREW__; __THREW__ = 0;
          $70 = $69&1;
          if ($70) {
           label = 38;
           break L21;
          } else {
           $$0$i$i2$i$i45 = $68;
          }
         } else {
          $71 = HEAP32[$61>>2]|0;
          $$0$i$i2$i$i45 = $71;
         }
         $72 = ($$0$i$i2$i$i45|0)==(-1);
         if ($72) {
          HEAP32[$2>>2] = 0;
          label = 26;
          break;
         } else {
          if ($177) {
           $178 = $58;
           break;
          } else {
           $$227 = $$025;$$pre$i4$i$i = $58;
           label = 48;
           break L21;
          }
         }
        }
       } while(0);
       if ((label|0) == 26) {
        label = 0;
        if ($177) {
         $$227 = $$025;$$pre$i4$i$i = 0;
         label = 48;
         break;
        } else {
         $178 = 0;
        }
       }
       $73 = HEAP32[$10>>2]|0;
       $74 = HEAP8[$29>>0]|0;
       $75 = ($74<<24>>24)<(0);
       $76 = HEAP32[$42>>2]|0;
       $77 = $74&255;
       $78 = $75 ? $76 : $77;
       $79 = (($$025) + ($78)|0);
       $80 = ($73|0)==($79|0);
       if ($80) {
        $81 = $78 << 1;
        __THREW__ = 0;
        invoke_viii(666,($9|0),($81|0),0);
        $82 = __THREW__; __THREW__ = 0;
        $83 = $82&1;
        if ($83) {
         label = 40;
         break;
        }
        $84 = HEAP8[$29>>0]|0;
        $85 = ($84<<24>>24)<(0);
        if ($85) {
         $86 = HEAP32[$43>>2]|0;
         $87 = $86 & 2147483647;
         $phitmp$i60 = (($87) + -1)|0;
         $88 = $phitmp$i60;
        } else {
         $88 = 10;
        }
        __THREW__ = 0;
        invoke_viii(666,($9|0),($88|0),0);
        $89 = __THREW__; __THREW__ = 0;
        $90 = $89&1;
        if ($90) {
         label = 40;
         break;
        }
        $91 = HEAP8[$29>>0]|0;
        $92 = ($91<<24>>24)<(0);
        $93 = HEAP32[$9>>2]|0;
        $94 = $92 ? $93 : $9;
        $95 = (($94) + ($78)|0);
        HEAP32[$10>>2] = $95;
        $$126 = $94;
       } else {
        $$126 = $$025;
       }
       $108 = ((($$pre$i$i$i)) + 12|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = ((($$pre$i$i$i)) + 16|0);
       $111 = HEAP32[$110>>2]|0;
       $112 = ($109|0)==($111|0);
       if ($112) {
        $113 = HEAP32[$$pre$i$i$i>>2]|0;
        $114 = ((($113)) + 36|0);
        $115 = HEAP32[$114>>2]|0;
        __THREW__ = 0;
        $116 = (invoke_ii($115|0,($$pre$i$i$i|0))|0);
        $117 = __THREW__; __THREW__ = 0;
        $118 = $117&1;
        if ($118) {
         label = 38;
         break;
        } else {
         $$0$i$i65 = $116;
        }
       } else {
        $119 = HEAP32[$109>>2]|0;
        $$0$i$i65 = $119;
       }
       $120 = (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i65,16,$$126,$10,$13,0,$7,$11,$12,$6)|0);
       $121 = ($120|0)==(0);
       if (!($121)) {
        $$227 = $$126;$$pre$i4$i$i = $178;
        label = 48;
        break;
       }
       $122 = HEAP32[$108>>2]|0;
       $123 = HEAP32[$110>>2]|0;
       $124 = ($122|0)==($123|0);
       if ($124) {
        $125 = HEAP32[$$pre$i$i$i>>2]|0;
        $126 = ((($125)) + 40|0);
        $127 = HEAP32[$126>>2]|0;
        __THREW__ = 0;
        (invoke_ii($127|0,($$pre$i$i$i|0))|0);
        $128 = __THREW__; __THREW__ = 0;
        $129 = $128&1;
        if ($129) {
         label = 38;
         break;
        } else {
         $$025 = $$126;$$pre$i$i$i41 = $$pre$i$i$i;
         continue;
        }
       } else {
        $130 = ((($122)) + 4|0);
        HEAP32[$108>>2] = $130;
        $$025 = $$126;$$pre$i$i$i41 = $$pre$i$i$i;
        continue;
       }
      }
      if ((label|0) == 38) {
       $102 = ___cxa_find_matching_catch_2()|0;
       $103 = tempRet0;
       $$sink$index = $102;$$sink$index3 = $103;
      }
      else if ((label|0) == 40) {
       $106 = ___cxa_find_matching_catch_2()|0;
       $107 = tempRet0;
       $$sink$index = $106;$$sink$index3 = $107;
      }
      else if ((label|0) == 48) {
       $131 = HEAP32[$10>>2]|0;
       $132 = $$227;
       $133 = (($131) - ($132))|0;
       __THREW__ = 0;
       invoke_viii(666,($9|0),($133|0),0);
       $134 = __THREW__; __THREW__ = 0;
       $135 = $134&1;
       L62: do {
        if (!($135)) {
         $136 = HEAP8[$29>>0]|0;
         $137 = HEAP32[$9>>2]|0;
         __THREW__ = 0;
         $138 = (invoke_i(762)|0);
         $139 = __THREW__; __THREW__ = 0;
         $140 = $139&1;
         if (!($140)) {
          $141 = ($136<<24>>24)<(0);
          $142 = $141 ? $137 : $9;
          __THREW__ = 0;
          HEAP32[$vararg_buffer>>2] = $5;
          $143 = (invoke_iiiii(763,($142|0),($138|0),(32659|0),($vararg_buffer|0))|0);
          $144 = __THREW__; __THREW__ = 0;
          $145 = $144&1;
          if (!($145)) {
           $146 = ($143|0)==(1);
           if (!($146)) {
            HEAP32[$4>>2] = 4;
           }
           $147 = ($$pre$i$i$i|0)==(0|0);
           if ($147) {
            $179 = 1;
           } else {
            $148 = ((($$pre$i$i$i)) + 12|0);
            $149 = HEAP32[$148>>2]|0;
            $150 = ((($$pre$i$i$i)) + 16|0);
            $151 = HEAP32[$150>>2]|0;
            $152 = ($149|0)==($151|0);
            if ($152) {
             $153 = HEAP32[$$pre$i$i$i>>2]|0;
             $154 = ((($153)) + 36|0);
             $155 = HEAP32[$154>>2]|0;
             __THREW__ = 0;
             $156 = (invoke_ii($155|0,($$pre$i$i$i|0))|0);
             $157 = __THREW__; __THREW__ = 0;
             $158 = $157&1;
             if ($158) {
              break;
             } else {
              $$0$i$i$i$i = $156;
             }
            } else {
             $159 = HEAP32[$149>>2]|0;
             $$0$i$i$i$i = $159;
            }
            $160 = ($$0$i$i$i$i|0)==(-1);
            if ($160) {
             HEAP32[$1>>2] = 0;
             $179 = 1;
            } else {
             $179 = 0;
            }
           }
           $161 = ($$pre$i4$i$i|0)==(0|0);
           do {
            if ($161) {
             label = 65;
            } else {
             $162 = ((($$pre$i4$i$i)) + 12|0);
             $163 = HEAP32[$162>>2]|0;
             $164 = ((($$pre$i4$i$i)) + 16|0);
             $165 = HEAP32[$164>>2]|0;
             $166 = ($163|0)==($165|0);
             if ($166) {
              $167 = HEAP32[$$pre$i4$i$i>>2]|0;
              $168 = ((($167)) + 36|0);
              $169 = HEAP32[$168>>2]|0;
              __THREW__ = 0;
              $170 = (invoke_ii($169|0,($$pre$i4$i$i|0))|0);
              $171 = __THREW__; __THREW__ = 0;
              $172 = $171&1;
              if ($172) {
               break L62;
              } else {
               $$0$i$i2$i$i = $170;
              }
             } else {
              $173 = HEAP32[$163>>2]|0;
              $$0$i$i2$i$i = $173;
             }
             $174 = ($$0$i$i2$i$i|0)==(-1);
             if ($174) {
              HEAP32[$2>>2] = 0;
              label = 65;
              break;
             } else {
              if ($179) {
               break;
              } else {
               label = 67;
               break;
              }
             }
            }
           } while(0);
           if ((label|0) == 65) {
            if ($179) {
             label = 67;
            }
           }
           if ((label|0) == 67) {
            $175 = HEAP32[$4>>2]|0;
            $176 = $175 | 2;
            HEAP32[$4>>2] = $176;
           }
           $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
           STACKTOP = sp;return ($$sroa$0$0$copyload|0);
          }
         }
        }
       } while(0);
       $104 = ___cxa_find_matching_catch_2()|0;
       $105 = tempRet0;
       $$sink$index = $104;$$sink$index3 = $105;
      }
      $$2 = $$sink$index;$$230 = $$sink$index3;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
     $$3 = $$2;$$331 = $$230;
     break;
    }
   }
   $98 = ___cxa_find_matching_catch_2()|0;
   $99 = tempRet0;
   (__ZNSt3__214__shared_count16__release_sharedEv($16)|0);
   $$0 = $98;$$028 = $99;
   label = 36;
  }
 } while(0);
 if ((label|0) == 36) {
  $$3 = $$0;$$331 = $$028;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 ___resumeException($$3|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$0$i$add = 0, $$0$i$idx = 0, $$0$i$ptr = 0, $$0$lcssa$i = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $10 = HEAP32[$3>>2]|0;
 $11 = ($10|0)==($2|0);
 do {
  if ($11) {
   $12 = ((($9)) + 96|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==($0|0);
   if (!($14)) {
    $15 = ((($9)) + 100|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==($0|0);
    if (!($17)) {
     label = 5;
     break;
    }
   }
   $18 = $14 ? 43 : 45;
   $19 = ((($2)) + 1|0);
   HEAP32[$3>>2] = $19;
   HEAP8[$2>>0] = $18;
   HEAP32[$4>>2] = 0;
   $$1 = 0;
  } else {
   label = 5;
  }
 } while(0);
 L6: do {
  if ((label|0) == 5) {
   $20 = ((($6)) + 11|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = ($21<<24>>24)<(0);
   $23 = ((($6)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $21&255;
   $26 = $22 ? $24 : $25;
   $27 = ($26|0)!=(0);
   $28 = ($0|0)==($5|0);
   $or$cond = $28 & $27;
   if ($or$cond) {
    $29 = HEAP32[$8>>2]|0;
    $30 = $29;
    $31 = $7;
    $32 = (($30) - ($31))|0;
    $33 = ($32|0)<(160);
    if (!($33)) {
     $$1 = 0;
     break;
    }
    $34 = HEAP32[$4>>2]|0;
    $35 = ((($29)) + 4|0);
    HEAP32[$8>>2] = $35;
    HEAP32[$29>>2] = $34;
    HEAP32[$4>>2] = 0;
    $$1 = 0;
    break;
   }
   $36 = ((($9)) + 104|0);
   $$0$i$idx = 0;
   while(1) {
    $$0$i$ptr = (($9) + ($$0$i$idx<<2)|0);
    $37 = ($$0$i$idx|0)==(26);
    if ($37) {
     $$0$lcssa$i = $36;
     break;
    }
    $38 = HEAP32[$$0$i$ptr>>2]|0;
    $39 = ($38|0)==($0|0);
    $$0$i$add = (($$0$i$idx) + 1)|0;
    if ($39) {
     $$0$lcssa$i = $$0$i$ptr;
     break;
    } else {
     $$0$i$idx = $$0$i$add;
    }
   }
   $40 = $$0$lcssa$i;
   $41 = $9;
   $42 = (($40) - ($41))|0;
   $43 = $42 >> 2;
   $44 = ($42|0)>(92);
   if ($44) {
    $$1 = -1;
   } else {
    switch ($1|0) {
    case 10: case 8:  {
     $45 = ($43|0)<($1|0);
     if (!($45)) {
      $$1 = -1;
      break L6;
     }
     break;
    }
    case 16:  {
     $46 = ($42|0)<(88);
     if (!($46)) {
      if ($11) {
       $$1 = -1;
       break L6;
      }
      $47 = $10;
      $48 = $2;
      $49 = (($47) - ($48))|0;
      $50 = ($49|0)<(3);
      if (!($50)) {
       $$1 = -1;
       break L6;
      }
      $51 = ((($10)) + -1|0);
      $52 = HEAP8[$51>>0]|0;
      $53 = ($52<<24>>24)==(48);
      if (!($53)) {
       $$1 = -1;
       break L6;
      }
      HEAP32[$4>>2] = 0;
      $54 = (32626 + ($43)|0);
      $55 = HEAP8[$54>>0]|0;
      $56 = ((($10)) + 1|0);
      HEAP32[$3>>2] = $56;
      HEAP8[$10>>0] = $55;
      $$1 = 0;
      break L6;
     }
     break;
    }
    default: {
    }
    }
    $57 = (32626 + ($43)|0);
    $58 = HEAP8[$57>>0]|0;
    $59 = ((($10)) + 1|0);
    HEAP32[$3>>2] = $59;
    HEAP8[$10>>0] = $58;
    $60 = HEAP32[$4>>2]|0;
    $61 = (($60) + 1)|0;
    HEAP32[$4>>2] = $61;
    $$1 = 0;
   }
  }
 } while(0);
 return ($$1|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i25 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i31 = 0, $$0$i$i50 = 0, $$018 = 0, $$1 = 0, $$119 = 0, $$121 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i27 = 0, $$pre$i4$i$i = 0, $$sink$index = 0, $$sink$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0.0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i45 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $6 = sp + 208|0;
 $7 = sp + 200|0;
 $8 = sp + 196|0;
 $9 = sp + 184|0;
 $10 = sp + 172|0;
 $11 = sp + 168|0;
 $12 = sp + 8|0;
 $13 = sp + 4|0;
 $14 = sp;
 $15 = sp + 337|0;
 $16 = sp + 336|0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($9,$3,$6,$7,$8);
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $17 = (($10) + ($$0$i$i<<2)|0);
  HEAP32[$17>>2] = 0;
  $18 = (($$0$i$i) + 1)|0;
  $$0$i$i = $18;
 }
 $19 = ((($10)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 if ($21) {
  $22 = ((($10)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & 2147483647;
  $phitmp$i = (($24) + -1)|0;
  $25 = $phitmp$i;
 } else {
  $25 = 10;
 }
 __THREW__ = 0;
 invoke_viii(666,($10|0),($25|0),0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $86 = ___cxa_find_matching_catch_2()|0;
  $87 = tempRet0;
  $$1 = $86;$$121 = $87;
 } else {
  $28 = HEAP8[$19>>0]|0;
  $29 = ($28<<24>>24)<(0);
  $30 = HEAP32[$10>>2]|0;
  $31 = $29 ? $30 : $10;
  HEAP32[$11>>2] = $31;
  HEAP32[$13>>2] = $12;
  HEAP32[$14>>2] = 0;
  HEAP8[$15>>0] = 1;
  HEAP8[$16>>0] = 69;
  $32 = ((($10)) + 4|0);
  $33 = ((($10)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$018 = $31;$$pre$i$i$i27 = $$pre;
  L11: while(1) {
   $34 = ($$pre$i$i$i27|0)==(0|0);
   if ($34) {
    $$pre$i$i$i = 0;$171 = 1;
   } else {
    $35 = ((($$pre$i$i$i27)) + 12|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($$pre$i$i$i27)) + 16|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($36|0)==($38|0);
    if ($39) {
     $40 = HEAP32[$$pre$i$i$i27>>2]|0;
     $41 = ((($40)) + 36|0);
     $42 = HEAP32[$41>>2]|0;
     __THREW__ = 0;
     $43 = (invoke_ii($42|0,($$pre$i$i$i27|0))|0);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      label = 29;
      break;
     } else {
      $$0$i$i$i$i25 = $43;
     }
    } else {
     $46 = HEAP32[$36>>2]|0;
     $$0$i$i$i$i25 = $46;
    }
    $47 = ($$0$i$i$i$i25|0)==(-1);
    if ($47) {
     HEAP32[$1>>2] = 0;
     $$pre$i$i$i = 0;$171 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i27;$171 = 0;
    }
   }
   $48 = HEAP32[$2>>2]|0;
   $49 = ($48|0)==(0|0);
   do {
    if ($49) {
     label = 20;
    } else {
     $50 = ((($48)) + 12|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ((($48)) + 16|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($51|0)==($53|0);
     if ($54) {
      $55 = HEAP32[$48>>2]|0;
      $56 = ((($55)) + 36|0);
      $57 = HEAP32[$56>>2]|0;
      __THREW__ = 0;
      $58 = (invoke_ii($57|0,($48|0))|0);
      $59 = __THREW__; __THREW__ = 0;
      $60 = $59&1;
      if ($60) {
       label = 29;
       break L11;
      } else {
       $$0$i$i2$i$i31 = $58;
      }
     } else {
      $61 = HEAP32[$51>>2]|0;
      $$0$i$i2$i$i31 = $61;
     }
     $62 = ($$0$i$i2$i$i31|0)==(-1);
     if ($62) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($171) {
       $172 = $48;
       break;
      } else {
       $$2 = $$018;$$pre$i4$i$i = $48;
       label = 39;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($171) {
     $$2 = $$018;$$pre$i4$i$i = 0;
     label = 39;
     break;
    } else {
     $172 = 0;
    }
   }
   $63 = HEAP32[$11>>2]|0;
   $64 = HEAP8[$19>>0]|0;
   $65 = ($64<<24>>24)<(0);
   $66 = HEAP32[$32>>2]|0;
   $67 = $64&255;
   $68 = $65 ? $66 : $67;
   $69 = (($$018) + ($68)|0);
   $70 = ($63|0)==($69|0);
   if ($70) {
    $71 = $68 << 1;
    __THREW__ = 0;
    invoke_viii(666,($10|0),($71|0),0);
    $72 = __THREW__; __THREW__ = 0;
    $73 = $72&1;
    if ($73) {
     label = 31;
     break;
    }
    $74 = HEAP8[$19>>0]|0;
    $75 = ($74<<24>>24)<(0);
    if ($75) {
     $76 = HEAP32[$33>>2]|0;
     $77 = $76 & 2147483647;
     $phitmp$i45 = (($77) + -1)|0;
     $78 = $phitmp$i45;
    } else {
     $78 = 10;
    }
    __THREW__ = 0;
    invoke_viii(666,($10|0),($78|0),0);
    $79 = __THREW__; __THREW__ = 0;
    $80 = $79&1;
    if ($80) {
     label = 31;
     break;
    }
    $81 = HEAP8[$19>>0]|0;
    $82 = ($81<<24>>24)<(0);
    $83 = HEAP32[$10>>2]|0;
    $84 = $82 ? $83 : $10;
    $85 = (($84) + ($68)|0);
    HEAP32[$11>>2] = $85;
    $$119 = $84;
   } else {
    $$119 = $$018;
   }
   $94 = ((($$pre$i$i$i)) + 12|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = ((($$pre$i$i$i)) + 16|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = ($95|0)==($97|0);
   if ($98) {
    $99 = HEAP32[$$pre$i$i$i>>2]|0;
    $100 = ((($99)) + 36|0);
    $101 = HEAP32[$100>>2]|0;
    __THREW__ = 0;
    $102 = (invoke_ii($101|0,($$pre$i$i$i|0))|0);
    $103 = __THREW__; __THREW__ = 0;
    $104 = $103&1;
    if ($104) {
     label = 29;
     break;
    } else {
     $$0$i$i50 = $102;
    }
   } else {
    $105 = HEAP32[$95>>2]|0;
    $$0$i$i50 = $105;
   }
   $106 = HEAP32[$7>>2]|0;
   $107 = HEAP32[$8>>2]|0;
   $108 = (__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i50,$15,$16,$$119,$11,$106,$107,$9,$12,$13,$14,$6)|0);
   $109 = ($108|0)==(0);
   if (!($109)) {
    $$2 = $$119;$$pre$i4$i$i = $172;
    label = 39;
    break;
   }
   $110 = HEAP32[$94>>2]|0;
   $111 = HEAP32[$96>>2]|0;
   $112 = ($110|0)==($111|0);
   if ($112) {
    $113 = HEAP32[$$pre$i$i$i>>2]|0;
    $114 = ((($113)) + 40|0);
    $115 = HEAP32[$114>>2]|0;
    __THREW__ = 0;
    (invoke_ii($115|0,($$pre$i$i$i|0))|0);
    $116 = __THREW__; __THREW__ = 0;
    $117 = $116&1;
    if ($117) {
     label = 29;
     break;
    } else {
     $$018 = $$119;$$pre$i$i$i27 = $$pre$i$i$i;
     continue;
    }
   } else {
    $118 = ((($110)) + 4|0);
    HEAP32[$94>>2] = $118;
    $$018 = $$119;$$pre$i$i$i27 = $$pre$i$i$i;
    continue;
   }
  }
  if ((label|0) == 29) {
   $88 = ___cxa_find_matching_catch_2()|0;
   $89 = tempRet0;
   $$sink$index = $88;$$sink$index3 = $89;
  }
  else if ((label|0) == 31) {
   $92 = ___cxa_find_matching_catch_2()|0;
   $93 = tempRet0;
   $$sink$index = $92;$$sink$index3 = $93;
  }
  else if ((label|0) == 39) {
   $119 = ((($9)) + 11|0);
   $120 = HEAP8[$119>>0]|0;
   $121 = ($120<<24>>24)<(0);
   $122 = ((($9)) + 4|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = $120&255;
   $125 = $121 ? $123 : $124;
   $126 = ($125|0)==(0);
   $127 = HEAP8[$15>>0]|0;
   $128 = ($127<<24>>24)==(0);
   $or$cond = $126 | $128;
   if (!($or$cond)) {
    $129 = HEAP32[$13>>2]|0;
    $130 = $129;
    $131 = $12;
    $132 = (($130) - ($131))|0;
    $133 = ($132|0)<(160);
    if ($133) {
     $134 = HEAP32[$14>>2]|0;
     $135 = ((($129)) + 4|0);
     HEAP32[$13>>2] = $135;
     HEAP32[$129>>2] = $134;
    }
   }
   $136 = HEAP32[$11>>2]|0;
   __THREW__ = 0;
   $137 = (+invoke_diii(768,($$2|0),($136|0),($4|0)));
   $138 = __THREW__; __THREW__ = 0;
   $139 = $138&1;
   L56: do {
    if (!($139)) {
     HEAPF64[$5>>3] = $137;
     $140 = HEAP32[$13>>2]|0;
     __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($9,$12,$140,$4);
     $141 = ($$pre$i$i$i|0)==(0|0);
     if ($141) {
      $173 = 1;
     } else {
      $142 = ((($$pre$i$i$i)) + 12|0);
      $143 = HEAP32[$142>>2]|0;
      $144 = ((($$pre$i$i$i)) + 16|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = ($143|0)==($145|0);
      if ($146) {
       $147 = HEAP32[$$pre$i$i$i>>2]|0;
       $148 = ((($147)) + 36|0);
       $149 = HEAP32[$148>>2]|0;
       __THREW__ = 0;
       $150 = (invoke_ii($149|0,($$pre$i$i$i|0))|0);
       $151 = __THREW__; __THREW__ = 0;
       $152 = $151&1;
       if ($152) {
        break;
       } else {
        $$0$i$i$i$i = $150;
       }
      } else {
       $153 = HEAP32[$143>>2]|0;
       $$0$i$i$i$i = $153;
      }
      $154 = ($$0$i$i$i$i|0)==(-1);
      if ($154) {
       HEAP32[$1>>2] = 0;
       $173 = 1;
      } else {
       $173 = 0;
      }
     }
     $155 = ($$pre$i4$i$i|0)==(0|0);
     do {
      if ($155) {
       label = 55;
      } else {
       $156 = ((($$pre$i4$i$i)) + 12|0);
       $157 = HEAP32[$156>>2]|0;
       $158 = ((($$pre$i4$i$i)) + 16|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($157|0)==($159|0);
       if ($160) {
        $161 = HEAP32[$$pre$i4$i$i>>2]|0;
        $162 = ((($161)) + 36|0);
        $163 = HEAP32[$162>>2]|0;
        __THREW__ = 0;
        $164 = (invoke_ii($163|0,($$pre$i4$i$i|0))|0);
        $165 = __THREW__; __THREW__ = 0;
        $166 = $165&1;
        if ($166) {
         break L56;
        } else {
         $$0$i$i2$i$i = $164;
        }
       } else {
        $167 = HEAP32[$157>>2]|0;
        $$0$i$i2$i$i = $167;
       }
       $168 = ($$0$i$i2$i$i|0)==(-1);
       if ($168) {
        HEAP32[$2>>2] = 0;
        label = 55;
        break;
       } else {
        if ($173) {
         break;
        } else {
         label = 57;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 55) {
      if ($173) {
       label = 57;
      }
     }
     if ((label|0) == 57) {
      $169 = HEAP32[$4>>2]|0;
      $170 = $169 | 2;
      HEAP32[$4>>2] = $170;
     }
     $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
     STACKTOP = sp;return ($$sroa$0$0$copyload|0);
    }
   } while(0);
   $90 = ___cxa_find_matching_catch_2()|0;
   $91 = tempRet0;
   $$sink$index = $90;$$sink$index3 = $91;
  }
  $$1 = $$sink$index;$$121 = $$sink$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink$index = 0, $$sink$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 $6 = (__ZNKSt3__28ios_base6getlocEv($1)|0);
 HEAP32[$5>>2] = $6;
 __THREW__ = 0;
 $7 = (invoke_iii(659,($5|0),(40744|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  label = 8;
 } else {
  $10 = HEAP32[$7>>2]|0;
  $11 = ((($10)) + 48|0);
  $12 = HEAP32[$11>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($12|0,($7|0),(32626|0),((32658)|0),($2|0))|0);
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if ($14) {
   label = 8;
  } else {
   __THREW__ = 0;
   $15 = (invoke_iii(659,($5|0),(40752|0))|0);
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   if ($17) {
    label = 8;
   } else {
    $18 = HEAP32[$15>>2]|0;
    $19 = ((($18)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    __THREW__ = 0;
    $21 = (invoke_ii($20|0,($15|0))|0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if (!($23)) {
     HEAP32[$3>>2] = $21;
     $24 = HEAP32[$15>>2]|0;
     $25 = ((($24)) + 16|0);
     $26 = HEAP32[$25>>2]|0;
     __THREW__ = 0;
     $27 = (invoke_ii($26|0,($15|0))|0);
     $28 = __THREW__; __THREW__ = 0;
     $29 = $28&1;
     if (!($29)) {
      HEAP32[$4>>2] = $27;
      $30 = HEAP32[$15>>2]|0;
      $31 = ((($30)) + 20|0);
      $32 = HEAP32[$31>>2]|0;
      __THREW__ = 0;
      invoke_vii($32|0,($0|0),($15|0));
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      if (!($34)) {
       (__ZNSt3__214__shared_count16__release_sharedEv($6)|0);
       STACKTOP = sp;return;
      }
     }
    }
    $37 = ___cxa_find_matching_catch_2()|0;
    $38 = tempRet0;
    $$sink$index = $37;$$sink$index2 = $38;
   }
  }
 }
 if ((label|0) == 8) {
  $35 = ___cxa_find_matching_catch_2()|0;
  $36 = tempRet0;
  $$sink$index = $35;$$sink$index2 = $36;
 }
 (__ZNSt3__214__shared_count16__release_sharedEv($6)|0);
 ___resumeException($$sink$index|0);
 // unreachable;
}
function __ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 var $$0$i$add = 0, $$0$i$idx = 0, $$0$i$ptr = 0, $$0$lcssa$i = 0, $$2 = 0, $100 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $12 = ($0|0)==($5|0);
 L1: do {
  if ($12) {
   $13 = HEAP8[$1>>0]|0;
   $14 = ($13<<24>>24)==(0);
   if ($14) {
    $$2 = -1;
   } else {
    HEAP8[$1>>0] = 0;
    $15 = HEAP32[$4>>2]|0;
    $16 = ((($15)) + 1|0);
    HEAP32[$4>>2] = $16;
    HEAP8[$15>>0] = 46;
    $17 = ((($7)) + 11|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = ($18<<24>>24)<(0);
    $20 = ((($7)) + 4|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $18&255;
    $23 = $19 ? $21 : $22;
    $24 = ($23|0)==(0);
    if ($24) {
     $$2 = 0;
    } else {
     $25 = HEAP32[$9>>2]|0;
     $26 = $25;
     $27 = $8;
     $28 = (($26) - ($27))|0;
     $29 = ($28|0)<(160);
     if ($29) {
      $30 = HEAP32[$10>>2]|0;
      $31 = ((($25)) + 4|0);
      HEAP32[$9>>2] = $31;
      HEAP32[$25>>2] = $30;
      $$2 = 0;
     } else {
      $$2 = 0;
     }
    }
   }
  } else {
   $32 = ($0|0)==($6|0);
   if ($32) {
    $33 = ((($7)) + 11|0);
    $34 = HEAP8[$33>>0]|0;
    $35 = ($34<<24>>24)<(0);
    $36 = ((($7)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $34&255;
    $39 = $35 ? $37 : $38;
    $40 = ($39|0)==(0);
    if (!($40)) {
     $41 = HEAP8[$1>>0]|0;
     $42 = ($41<<24>>24)==(0);
     if ($42) {
      $$2 = -1;
      break;
     }
     $43 = HEAP32[$9>>2]|0;
     $44 = $43;
     $45 = $8;
     $46 = (($44) - ($45))|0;
     $47 = ($46|0)<(160);
     if (!($47)) {
      $$2 = 0;
      break;
     }
     $48 = HEAP32[$10>>2]|0;
     $49 = ((($43)) + 4|0);
     HEAP32[$9>>2] = $49;
     HEAP32[$43>>2] = $48;
     HEAP32[$10>>2] = 0;
     $$2 = 0;
     break;
    }
   }
   $50 = ((($11)) + 128|0);
   $$0$i$idx = 0;
   while(1) {
    $$0$i$ptr = (($11) + ($$0$i$idx<<2)|0);
    $51 = ($$0$i$idx|0)==(32);
    if ($51) {
     $$0$lcssa$i = $50;
     break;
    }
    $52 = HEAP32[$$0$i$ptr>>2]|0;
    $53 = ($52|0)==($0|0);
    $$0$i$add = (($$0$i$idx) + 1)|0;
    if ($53) {
     $$0$lcssa$i = $$0$i$ptr;
     break;
    } else {
     $$0$i$idx = $$0$i$add;
    }
   }
   $54 = $$0$lcssa$i;
   $55 = $11;
   $56 = (($54) - ($55))|0;
   $57 = $56 >> 2;
   $58 = ($56|0)>(124);
   if ($58) {
    $$2 = -1;
   } else {
    $59 = (32626 + ($57)|0);
    $60 = HEAP8[$59>>0]|0;
    switch ($57|0) {
    case 24: case 25:  {
     $61 = HEAP32[$4>>2]|0;
     $62 = ($61|0)==($3|0);
     if (!($62)) {
      $63 = ((($61)) + -1|0);
      $64 = HEAP8[$63>>0]|0;
      $65 = $64&255;
      $66 = $65 & 95;
      $67 = HEAP8[$2>>0]|0;
      $68 = $67&255;
      $69 = $68 & 127;
      $70 = ($66|0)==($69|0);
      if (!($70)) {
       $$2 = -1;
       break L1;
      }
     }
     $71 = ((($61)) + 1|0);
     HEAP32[$4>>2] = $71;
     HEAP8[$61>>0] = $60;
     $$2 = 0;
     break L1;
     break;
    }
    case 23: case 22:  {
     HEAP8[$2>>0] = 80;
     break;
    }
    default: {
     $72 = $60&255;
     $73 = $72 & 95;
     $74 = HEAP8[$2>>0]|0;
     $75 = $74 << 24 >> 24;
     $76 = ($73|0)==($75|0);
     if ($76) {
      $77 = $73 | 128;
      $78 = $77&255;
      HEAP8[$2>>0] = $78;
      $79 = HEAP8[$1>>0]|0;
      $80 = ($79<<24>>24)==(0);
      if (!($80)) {
       HEAP8[$1>>0] = 0;
       $81 = ((($7)) + 11|0);
       $82 = HEAP8[$81>>0]|0;
       $83 = ($82<<24>>24)<(0);
       $84 = ((($7)) + 4|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = $82&255;
       $87 = $83 ? $85 : $86;
       $88 = ($87|0)==(0);
       if (!($88)) {
        $89 = HEAP32[$9>>2]|0;
        $90 = $89;
        $91 = $8;
        $92 = (($90) - ($91))|0;
        $93 = ($92|0)<(160);
        if ($93) {
         $94 = HEAP32[$10>>2]|0;
         $95 = ((($89)) + 4|0);
         HEAP32[$9>>2] = $95;
         HEAP32[$89>>2] = $94;
        }
       }
      }
     }
    }
    }
    $96 = HEAP32[$4>>2]|0;
    $97 = ((($96)) + 1|0);
    HEAP32[$4>>2] = $97;
    HEAP8[$96>>0] = $60;
    $98 = ($56|0)>(84);
    if ($98) {
     $$2 = 0;
    } else {
     $99 = HEAP32[$10>>2]|0;
     $100 = (($99) + 1)|0;
     HEAP32[$10>>2] = $100;
     $$2 = 0;
    }
   }
  }
 } while(0);
 return ($$2|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i25 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i31 = 0, $$0$i$i50 = 0, $$018 = 0, $$1 = 0, $$119 = 0, $$121 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i27 = 0, $$pre$i4$i$i = 0, $$sink$index = 0, $$sink$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0.0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i45 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $6 = sp + 208|0;
 $7 = sp + 200|0;
 $8 = sp + 196|0;
 $9 = sp + 184|0;
 $10 = sp + 172|0;
 $11 = sp + 168|0;
 $12 = sp + 8|0;
 $13 = sp + 4|0;
 $14 = sp;
 $15 = sp + 337|0;
 $16 = sp + 336|0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($9,$3,$6,$7,$8);
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $17 = (($10) + ($$0$i$i<<2)|0);
  HEAP32[$17>>2] = 0;
  $18 = (($$0$i$i) + 1)|0;
  $$0$i$i = $18;
 }
 $19 = ((($10)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 if ($21) {
  $22 = ((($10)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & 2147483647;
  $phitmp$i = (($24) + -1)|0;
  $25 = $phitmp$i;
 } else {
  $25 = 10;
 }
 __THREW__ = 0;
 invoke_viii(666,($10|0),($25|0),0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $86 = ___cxa_find_matching_catch_2()|0;
  $87 = tempRet0;
  $$1 = $86;$$121 = $87;
 } else {
  $28 = HEAP8[$19>>0]|0;
  $29 = ($28<<24>>24)<(0);
  $30 = HEAP32[$10>>2]|0;
  $31 = $29 ? $30 : $10;
  HEAP32[$11>>2] = $31;
  HEAP32[$13>>2] = $12;
  HEAP32[$14>>2] = 0;
  HEAP8[$15>>0] = 1;
  HEAP8[$16>>0] = 69;
  $32 = ((($10)) + 4|0);
  $33 = ((($10)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$018 = $31;$$pre$i$i$i27 = $$pre;
  L11: while(1) {
   $34 = ($$pre$i$i$i27|0)==(0|0);
   if ($34) {
    $$pre$i$i$i = 0;$171 = 1;
   } else {
    $35 = ((($$pre$i$i$i27)) + 12|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($$pre$i$i$i27)) + 16|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($36|0)==($38|0);
    if ($39) {
     $40 = HEAP32[$$pre$i$i$i27>>2]|0;
     $41 = ((($40)) + 36|0);
     $42 = HEAP32[$41>>2]|0;
     __THREW__ = 0;
     $43 = (invoke_ii($42|0,($$pre$i$i$i27|0))|0);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      label = 29;
      break;
     } else {
      $$0$i$i$i$i25 = $43;
     }
    } else {
     $46 = HEAP32[$36>>2]|0;
     $$0$i$i$i$i25 = $46;
    }
    $47 = ($$0$i$i$i$i25|0)==(-1);
    if ($47) {
     HEAP32[$1>>2] = 0;
     $$pre$i$i$i = 0;$171 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i27;$171 = 0;
    }
   }
   $48 = HEAP32[$2>>2]|0;
   $49 = ($48|0)==(0|0);
   do {
    if ($49) {
     label = 20;
    } else {
     $50 = ((($48)) + 12|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ((($48)) + 16|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($51|0)==($53|0);
     if ($54) {
      $55 = HEAP32[$48>>2]|0;
      $56 = ((($55)) + 36|0);
      $57 = HEAP32[$56>>2]|0;
      __THREW__ = 0;
      $58 = (invoke_ii($57|0,($48|0))|0);
      $59 = __THREW__; __THREW__ = 0;
      $60 = $59&1;
      if ($60) {
       label = 29;
       break L11;
      } else {
       $$0$i$i2$i$i31 = $58;
      }
     } else {
      $61 = HEAP32[$51>>2]|0;
      $$0$i$i2$i$i31 = $61;
     }
     $62 = ($$0$i$i2$i$i31|0)==(-1);
     if ($62) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($171) {
       $172 = $48;
       break;
      } else {
       $$2 = $$018;$$pre$i4$i$i = $48;
       label = 39;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($171) {
     $$2 = $$018;$$pre$i4$i$i = 0;
     label = 39;
     break;
    } else {
     $172 = 0;
    }
   }
   $63 = HEAP32[$11>>2]|0;
   $64 = HEAP8[$19>>0]|0;
   $65 = ($64<<24>>24)<(0);
   $66 = HEAP32[$32>>2]|0;
   $67 = $64&255;
   $68 = $65 ? $66 : $67;
   $69 = (($$018) + ($68)|0);
   $70 = ($63|0)==($69|0);
   if ($70) {
    $71 = $68 << 1;
    __THREW__ = 0;
    invoke_viii(666,($10|0),($71|0),0);
    $72 = __THREW__; __THREW__ = 0;
    $73 = $72&1;
    if ($73) {
     label = 31;
     break;
    }
    $74 = HEAP8[$19>>0]|0;
    $75 = ($74<<24>>24)<(0);
    if ($75) {
     $76 = HEAP32[$33>>2]|0;
     $77 = $76 & 2147483647;
     $phitmp$i45 = (($77) + -1)|0;
     $78 = $phitmp$i45;
    } else {
     $78 = 10;
    }
    __THREW__ = 0;
    invoke_viii(666,($10|0),($78|0),0);
    $79 = __THREW__; __THREW__ = 0;
    $80 = $79&1;
    if ($80) {
     label = 31;
     break;
    }
    $81 = HEAP8[$19>>0]|0;
    $82 = ($81<<24>>24)<(0);
    $83 = HEAP32[$10>>2]|0;
    $84 = $82 ? $83 : $10;
    $85 = (($84) + ($68)|0);
    HEAP32[$11>>2] = $85;
    $$119 = $84;
   } else {
    $$119 = $$018;
   }
   $94 = ((($$pre$i$i$i)) + 12|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = ((($$pre$i$i$i)) + 16|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = ($95|0)==($97|0);
   if ($98) {
    $99 = HEAP32[$$pre$i$i$i>>2]|0;
    $100 = ((($99)) + 36|0);
    $101 = HEAP32[$100>>2]|0;
    __THREW__ = 0;
    $102 = (invoke_ii($101|0,($$pre$i$i$i|0))|0);
    $103 = __THREW__; __THREW__ = 0;
    $104 = $103&1;
    if ($104) {
     label = 29;
     break;
    } else {
     $$0$i$i50 = $102;
    }
   } else {
    $105 = HEAP32[$95>>2]|0;
    $$0$i$i50 = $105;
   }
   $106 = HEAP32[$7>>2]|0;
   $107 = HEAP32[$8>>2]|0;
   $108 = (__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i50,$15,$16,$$119,$11,$106,$107,$9,$12,$13,$14,$6)|0);
   $109 = ($108|0)==(0);
   if (!($109)) {
    $$2 = $$119;$$pre$i4$i$i = $172;
    label = 39;
    break;
   }
   $110 = HEAP32[$94>>2]|0;
   $111 = HEAP32[$96>>2]|0;
   $112 = ($110|0)==($111|0);
   if ($112) {
    $113 = HEAP32[$$pre$i$i$i>>2]|0;
    $114 = ((($113)) + 40|0);
    $115 = HEAP32[$114>>2]|0;
    __THREW__ = 0;
    (invoke_ii($115|0,($$pre$i$i$i|0))|0);
    $116 = __THREW__; __THREW__ = 0;
    $117 = $116&1;
    if ($117) {
     label = 29;
     break;
    } else {
     $$018 = $$119;$$pre$i$i$i27 = $$pre$i$i$i;
     continue;
    }
   } else {
    $118 = ((($110)) + 4|0);
    HEAP32[$94>>2] = $118;
    $$018 = $$119;$$pre$i$i$i27 = $$pre$i$i$i;
    continue;
   }
  }
  if ((label|0) == 29) {
   $88 = ___cxa_find_matching_catch_2()|0;
   $89 = tempRet0;
   $$sink$index = $88;$$sink$index3 = $89;
  }
  else if ((label|0) == 31) {
   $92 = ___cxa_find_matching_catch_2()|0;
   $93 = tempRet0;
   $$sink$index = $92;$$sink$index3 = $93;
  }
  else if ((label|0) == 39) {
   $119 = ((($9)) + 11|0);
   $120 = HEAP8[$119>>0]|0;
   $121 = ($120<<24>>24)<(0);
   $122 = ((($9)) + 4|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = $120&255;
   $125 = $121 ? $123 : $124;
   $126 = ($125|0)==(0);
   $127 = HEAP8[$15>>0]|0;
   $128 = ($127<<24>>24)==(0);
   $or$cond = $126 | $128;
   if (!($or$cond)) {
    $129 = HEAP32[$13>>2]|0;
    $130 = $129;
    $131 = $12;
    $132 = (($130) - ($131))|0;
    $133 = ($132|0)<(160);
    if ($133) {
     $134 = HEAP32[$14>>2]|0;
     $135 = ((($129)) + 4|0);
     HEAP32[$13>>2] = $135;
     HEAP32[$129>>2] = $134;
    }
   }
   $136 = HEAP32[$11>>2]|0;
   __THREW__ = 0;
   $137 = (+invoke_diii(769,($$2|0),($136|0),($4|0)));
   $138 = __THREW__; __THREW__ = 0;
   $139 = $138&1;
   L56: do {
    if (!($139)) {
     HEAPF64[$5>>3] = $137;
     $140 = HEAP32[$13>>2]|0;
     __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($9,$12,$140,$4);
     $141 = ($$pre$i$i$i|0)==(0|0);
     if ($141) {
      $173 = 1;
     } else {
      $142 = ((($$pre$i$i$i)) + 12|0);
      $143 = HEAP32[$142>>2]|0;
      $144 = ((($$pre$i$i$i)) + 16|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = ($143|0)==($145|0);
      if ($146) {
       $147 = HEAP32[$$pre$i$i$i>>2]|0;
       $148 = ((($147)) + 36|0);
       $149 = HEAP32[$148>>2]|0;
       __THREW__ = 0;
       $150 = (invoke_ii($149|0,($$pre$i$i$i|0))|0);
       $151 = __THREW__; __THREW__ = 0;
       $152 = $151&1;
       if ($152) {
        break;
       } else {
        $$0$i$i$i$i = $150;
       }
      } else {
       $153 = HEAP32[$143>>2]|0;
       $$0$i$i$i$i = $153;
      }
      $154 = ($$0$i$i$i$i|0)==(-1);
      if ($154) {
       HEAP32[$1>>2] = 0;
       $173 = 1;
      } else {
       $173 = 0;
      }
     }
     $155 = ($$pre$i4$i$i|0)==(0|0);
     do {
      if ($155) {
       label = 55;
      } else {
       $156 = ((($$pre$i4$i$i)) + 12|0);
       $157 = HEAP32[$156>>2]|0;
       $158 = ((($$pre$i4$i$i)) + 16|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($157|0)==($159|0);
       if ($160) {
        $161 = HEAP32[$$pre$i4$i$i>>2]|0;
        $162 = ((($161)) + 36|0);
        $163 = HEAP32[$162>>2]|0;
        __THREW__ = 0;
        $164 = (invoke_ii($163|0,($$pre$i4$i$i|0))|0);
        $165 = __THREW__; __THREW__ = 0;
        $166 = $165&1;
        if ($166) {
         break L56;
        } else {
         $$0$i$i2$i$i = $164;
        }
       } else {
        $167 = HEAP32[$157>>2]|0;
        $$0$i$i2$i$i = $167;
       }
       $168 = ($$0$i$i2$i$i|0)==(-1);
       if ($168) {
        HEAP32[$2>>2] = 0;
        label = 55;
        break;
       } else {
        if ($173) {
         break;
        } else {
         label = 57;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 55) {
      if ($173) {
       label = 57;
      }
     }
     if ((label|0) == 57) {
      $169 = HEAP32[$4>>2]|0;
      $170 = $169 | 2;
      HEAP32[$4>>2] = $170;
     }
     $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
     STACKTOP = sp;return ($$sroa$0$0$copyload|0);
    }
   } while(0);
   $90 = ___cxa_find_matching_catch_2()|0;
   $91 = tempRet0;
   $$sink$index = $90;$$sink$index3 = $91;
  }
  $$1 = $$sink$index;$$121 = $$sink$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i25 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i31 = 0, $$0$i$i50 = 0, $$018 = 0, $$1 = 0, $$119 = 0, $$121 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i27 = 0, $$pre$i4$i$i = 0, $$sink$index = 0, $$sink$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0.0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i45 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $6 = sp + 208|0;
 $7 = sp + 200|0;
 $8 = sp + 196|0;
 $9 = sp + 184|0;
 $10 = sp + 172|0;
 $11 = sp + 168|0;
 $12 = sp + 8|0;
 $13 = sp + 4|0;
 $14 = sp;
 $15 = sp + 337|0;
 $16 = sp + 336|0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($9,$3,$6,$7,$8);
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $17 = (($10) + ($$0$i$i<<2)|0);
  HEAP32[$17>>2] = 0;
  $18 = (($$0$i$i) + 1)|0;
  $$0$i$i = $18;
 }
 $19 = ((($10)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 if ($21) {
  $22 = ((($10)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & 2147483647;
  $phitmp$i = (($24) + -1)|0;
  $25 = $phitmp$i;
 } else {
  $25 = 10;
 }
 __THREW__ = 0;
 invoke_viii(666,($10|0),($25|0),0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $86 = ___cxa_find_matching_catch_2()|0;
  $87 = tempRet0;
  $$1 = $86;$$121 = $87;
 } else {
  $28 = HEAP8[$19>>0]|0;
  $29 = ($28<<24>>24)<(0);
  $30 = HEAP32[$10>>2]|0;
  $31 = $29 ? $30 : $10;
  HEAP32[$11>>2] = $31;
  HEAP32[$13>>2] = $12;
  HEAP32[$14>>2] = 0;
  HEAP8[$15>>0] = 1;
  HEAP8[$16>>0] = 69;
  $32 = ((($10)) + 4|0);
  $33 = ((($10)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$018 = $31;$$pre$i$i$i27 = $$pre;
  L11: while(1) {
   $34 = ($$pre$i$i$i27|0)==(0|0);
   if ($34) {
    $$pre$i$i$i = 0;$171 = 1;
   } else {
    $35 = ((($$pre$i$i$i27)) + 12|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($$pre$i$i$i27)) + 16|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($36|0)==($38|0);
    if ($39) {
     $40 = HEAP32[$$pre$i$i$i27>>2]|0;
     $41 = ((($40)) + 36|0);
     $42 = HEAP32[$41>>2]|0;
     __THREW__ = 0;
     $43 = (invoke_ii($42|0,($$pre$i$i$i27|0))|0);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      label = 29;
      break;
     } else {
      $$0$i$i$i$i25 = $43;
     }
    } else {
     $46 = HEAP32[$36>>2]|0;
     $$0$i$i$i$i25 = $46;
    }
    $47 = ($$0$i$i$i$i25|0)==(-1);
    if ($47) {
     HEAP32[$1>>2] = 0;
     $$pre$i$i$i = 0;$171 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i27;$171 = 0;
    }
   }
   $48 = HEAP32[$2>>2]|0;
   $49 = ($48|0)==(0|0);
   do {
    if ($49) {
     label = 20;
    } else {
     $50 = ((($48)) + 12|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ((($48)) + 16|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($51|0)==($53|0);
     if ($54) {
      $55 = HEAP32[$48>>2]|0;
      $56 = ((($55)) + 36|0);
      $57 = HEAP32[$56>>2]|0;
      __THREW__ = 0;
      $58 = (invoke_ii($57|0,($48|0))|0);
      $59 = __THREW__; __THREW__ = 0;
      $60 = $59&1;
      if ($60) {
       label = 29;
       break L11;
      } else {
       $$0$i$i2$i$i31 = $58;
      }
     } else {
      $61 = HEAP32[$51>>2]|0;
      $$0$i$i2$i$i31 = $61;
     }
     $62 = ($$0$i$i2$i$i31|0)==(-1);
     if ($62) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($171) {
       $172 = $48;
       break;
      } else {
       $$2 = $$018;$$pre$i4$i$i = $48;
       label = 39;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($171) {
     $$2 = $$018;$$pre$i4$i$i = 0;
     label = 39;
     break;
    } else {
     $172 = 0;
    }
   }
   $63 = HEAP32[$11>>2]|0;
   $64 = HEAP8[$19>>0]|0;
   $65 = ($64<<24>>24)<(0);
   $66 = HEAP32[$32>>2]|0;
   $67 = $64&255;
   $68 = $65 ? $66 : $67;
   $69 = (($$018) + ($68)|0);
   $70 = ($63|0)==($69|0);
   if ($70) {
    $71 = $68 << 1;
    __THREW__ = 0;
    invoke_viii(666,($10|0),($71|0),0);
    $72 = __THREW__; __THREW__ = 0;
    $73 = $72&1;
    if ($73) {
     label = 31;
     break;
    }
    $74 = HEAP8[$19>>0]|0;
    $75 = ($74<<24>>24)<(0);
    if ($75) {
     $76 = HEAP32[$33>>2]|0;
     $77 = $76 & 2147483647;
     $phitmp$i45 = (($77) + -1)|0;
     $78 = $phitmp$i45;
    } else {
     $78 = 10;
    }
    __THREW__ = 0;
    invoke_viii(666,($10|0),($78|0),0);
    $79 = __THREW__; __THREW__ = 0;
    $80 = $79&1;
    if ($80) {
     label = 31;
     break;
    }
    $81 = HEAP8[$19>>0]|0;
    $82 = ($81<<24>>24)<(0);
    $83 = HEAP32[$10>>2]|0;
    $84 = $82 ? $83 : $10;
    $85 = (($84) + ($68)|0);
    HEAP32[$11>>2] = $85;
    $$119 = $84;
   } else {
    $$119 = $$018;
   }
   $94 = ((($$pre$i$i$i)) + 12|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = ((($$pre$i$i$i)) + 16|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = ($95|0)==($97|0);
   if ($98) {
    $99 = HEAP32[$$pre$i$i$i>>2]|0;
    $100 = ((($99)) + 36|0);
    $101 = HEAP32[$100>>2]|0;
    __THREW__ = 0;
    $102 = (invoke_ii($101|0,($$pre$i$i$i|0))|0);
    $103 = __THREW__; __THREW__ = 0;
    $104 = $103&1;
    if ($104) {
     label = 29;
     break;
    } else {
     $$0$i$i50 = $102;
    }
   } else {
    $105 = HEAP32[$95>>2]|0;
    $$0$i$i50 = $105;
   }
   $106 = HEAP32[$7>>2]|0;
   $107 = HEAP32[$8>>2]|0;
   $108 = (__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i50,$15,$16,$$119,$11,$106,$107,$9,$12,$13,$14,$6)|0);
   $109 = ($108|0)==(0);
   if (!($109)) {
    $$2 = $$119;$$pre$i4$i$i = $172;
    label = 39;
    break;
   }
   $110 = HEAP32[$94>>2]|0;
   $111 = HEAP32[$96>>2]|0;
   $112 = ($110|0)==($111|0);
   if ($112) {
    $113 = HEAP32[$$pre$i$i$i>>2]|0;
    $114 = ((($113)) + 40|0);
    $115 = HEAP32[$114>>2]|0;
    __THREW__ = 0;
    (invoke_ii($115|0,($$pre$i$i$i|0))|0);
    $116 = __THREW__; __THREW__ = 0;
    $117 = $116&1;
    if ($117) {
     label = 29;
     break;
    } else {
     $$018 = $$119;$$pre$i$i$i27 = $$pre$i$i$i;
     continue;
    }
   } else {
    $118 = ((($110)) + 4|0);
    HEAP32[$94>>2] = $118;
    $$018 = $$119;$$pre$i$i$i27 = $$pre$i$i$i;
    continue;
   }
  }
  if ((label|0) == 29) {
   $88 = ___cxa_find_matching_catch_2()|0;
   $89 = tempRet0;
   $$sink$index = $88;$$sink$index3 = $89;
  }
  else if ((label|0) == 31) {
   $92 = ___cxa_find_matching_catch_2()|0;
   $93 = tempRet0;
   $$sink$index = $92;$$sink$index3 = $93;
  }
  else if ((label|0) == 39) {
   $119 = ((($9)) + 11|0);
   $120 = HEAP8[$119>>0]|0;
   $121 = ($120<<24>>24)<(0);
   $122 = ((($9)) + 4|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = $120&255;
   $125 = $121 ? $123 : $124;
   $126 = ($125|0)==(0);
   $127 = HEAP8[$15>>0]|0;
   $128 = ($127<<24>>24)==(0);
   $or$cond = $126 | $128;
   if (!($or$cond)) {
    $129 = HEAP32[$13>>2]|0;
    $130 = $129;
    $131 = $12;
    $132 = (($130) - ($131))|0;
    $133 = ($132|0)<(160);
    if ($133) {
     $134 = HEAP32[$14>>2]|0;
     $135 = ((($129)) + 4|0);
     HEAP32[$13>>2] = $135;
     HEAP32[$129>>2] = $134;
    }
   }
   $136 = HEAP32[$11>>2]|0;
   __THREW__ = 0;
   $137 = (+invoke_diii(770,($$2|0),($136|0),($4|0)));
   $138 = __THREW__; __THREW__ = 0;
   $139 = $138&1;
   L56: do {
    if (!($139)) {
     HEAPF32[$5>>2] = $137;
     $140 = HEAP32[$13>>2]|0;
     __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($9,$12,$140,$4);
     $141 = ($$pre$i$i$i|0)==(0|0);
     if ($141) {
      $173 = 1;
     } else {
      $142 = ((($$pre$i$i$i)) + 12|0);
      $143 = HEAP32[$142>>2]|0;
      $144 = ((($$pre$i$i$i)) + 16|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = ($143|0)==($145|0);
      if ($146) {
       $147 = HEAP32[$$pre$i$i$i>>2]|0;
       $148 = ((($147)) + 36|0);
       $149 = HEAP32[$148>>2]|0;
       __THREW__ = 0;
       $150 = (invoke_ii($149|0,($$pre$i$i$i|0))|0);
       $151 = __THREW__; __THREW__ = 0;
       $152 = $151&1;
       if ($152) {
        break;
       } else {
        $$0$i$i$i$i = $150;
       }
      } else {
       $153 = HEAP32[$143>>2]|0;
       $$0$i$i$i$i = $153;
      }
      $154 = ($$0$i$i$i$i|0)==(-1);
      if ($154) {
       HEAP32[$1>>2] = 0;
       $173 = 1;
      } else {
       $173 = 0;
      }
     }
     $155 = ($$pre$i4$i$i|0)==(0|0);
     do {
      if ($155) {
       label = 55;
      } else {
       $156 = ((($$pre$i4$i$i)) + 12|0);
       $157 = HEAP32[$156>>2]|0;
       $158 = ((($$pre$i4$i$i)) + 16|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($157|0)==($159|0);
       if ($160) {
        $161 = HEAP32[$$pre$i4$i$i>>2]|0;
        $162 = ((($161)) + 36|0);
        $163 = HEAP32[$162>>2]|0;
        __THREW__ = 0;
        $164 = (invoke_ii($163|0,($$pre$i4$i$i|0))|0);
        $165 = __THREW__; __THREW__ = 0;
        $166 = $165&1;
        if ($166) {
         break L56;
        } else {
         $$0$i$i2$i$i = $164;
        }
       } else {
        $167 = HEAP32[$157>>2]|0;
        $$0$i$i2$i$i = $167;
       }
       $168 = ($$0$i$i2$i$i|0)==(-1);
       if ($168) {
        HEAP32[$2>>2] = 0;
        label = 55;
        break;
       } else {
        if ($173) {
         break;
        } else {
         label = 57;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 55) {
      if ($173) {
       label = 57;
      }
     }
     if ((label|0) == 57) {
      $169 = HEAP32[$4>>2]|0;
      $170 = $169 | 2;
      HEAP32[$4>>2] = $170;
     }
     $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
     STACKTOP = sp;return ($$sroa$0$0$copyload|0);
    }
   } while(0);
   $90 = ___cxa_find_matching_catch_2()|0;
   $91 = tempRet0;
   $$sink$index = $90;$$sink$index3 = $91;
  }
  $$1 = $$sink$index;$$121 = $$sink$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i30 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i36 = 0, $$0$i$i55 = 0, $$024 = 0, $$1 = 0, $$125 = 0, $$127 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i32 = 0, $$pre$i4$i$i = 0, $$sink$index = 0, $$sink$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i50 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $6 = sp + 200|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 if ($19) {
  $20 = ((($9)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __THREW__ = 0;
 invoke_viii(666,($9|0),($23|0),0);
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $84 = ___cxa_find_matching_catch_2()|0;
  $85 = tempRet0;
  $$1 = $84;$$127 = $85;
 } else {
  $26 = HEAP8[$17>>0]|0;
  $27 = ($26<<24>>24)<(0);
  $28 = HEAP32[$9>>2]|0;
  $29 = $27 ? $28 : $9;
  HEAP32[$10>>2] = $29;
  HEAP32[$12>>2] = $11;
  HEAP32[$13>>2] = 0;
  $30 = ((($9)) + 4|0);
  $31 = ((($9)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$024 = $29;$$pre$i$i$i32 = $$pre;
  L11: while(1) {
   $32 = ($$pre$i$i$i32|0)==(0|0);
   if ($32) {
    $$pre$i$i$i = 0;$171 = 1;
   } else {
    $33 = ((($$pre$i$i$i32)) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ((($$pre$i$i$i32)) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($34|0)==($36|0);
    if ($37) {
     $38 = HEAP32[$$pre$i$i$i32>>2]|0;
     $39 = ((($38)) + 36|0);
     $40 = HEAP32[$39>>2]|0;
     __THREW__ = 0;
     $41 = (invoke_ii($40|0,($$pre$i$i$i32|0))|0);
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      label = 29;
      break;
     } else {
      $$0$i$i$i$i30 = $41;
     }
    } else {
     $44 = HEAP32[$34>>2]|0;
     $$0$i$i$i$i30 = $44;
    }
    $45 = ($$0$i$i$i$i30|0)==(-1);
    if ($45) {
     HEAP32[$1>>2] = 0;
     $$pre$i$i$i = 0;$171 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i32;$171 = 0;
    }
   }
   $46 = HEAP32[$2>>2]|0;
   $47 = ($46|0)==(0|0);
   do {
    if ($47) {
     label = 20;
    } else {
     $48 = ((($46)) + 12|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ((($46)) + 16|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($49|0)==($51|0);
     if ($52) {
      $53 = HEAP32[$46>>2]|0;
      $54 = ((($53)) + 36|0);
      $55 = HEAP32[$54>>2]|0;
      __THREW__ = 0;
      $56 = (invoke_ii($55|0,($46|0))|0);
      $57 = __THREW__; __THREW__ = 0;
      $58 = $57&1;
      if ($58) {
       label = 29;
       break L11;
      } else {
       $$0$i$i2$i$i36 = $56;
      }
     } else {
      $59 = HEAP32[$49>>2]|0;
      $$0$i$i2$i$i36 = $59;
     }
     $60 = ($$0$i$i2$i$i36|0)==(-1);
     if ($60) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($171) {
       $172 = $46;
       break;
      } else {
       $$2 = $$024;$$pre$i4$i$i = $46;
       label = 39;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($171) {
     $$2 = $$024;$$pre$i4$i$i = 0;
     label = 39;
     break;
    } else {
     $172 = 0;
    }
   }
   $61 = HEAP32[$10>>2]|0;
   $62 = HEAP8[$17>>0]|0;
   $63 = ($62<<24>>24)<(0);
   $64 = HEAP32[$30>>2]|0;
   $65 = $62&255;
   $66 = $63 ? $64 : $65;
   $67 = (($$024) + ($66)|0);
   $68 = ($61|0)==($67|0);
   if ($68) {
    $69 = $66 << 1;
    __THREW__ = 0;
    invoke_viii(666,($9|0),($69|0),0);
    $70 = __THREW__; __THREW__ = 0;
    $71 = $70&1;
    if ($71) {
     label = 31;
     break;
    }
    $72 = HEAP8[$17>>0]|0;
    $73 = ($72<<24>>24)<(0);
    if ($73) {
     $74 = HEAP32[$31>>2]|0;
     $75 = $74 & 2147483647;
     $phitmp$i50 = (($75) + -1)|0;
     $76 = $phitmp$i50;
    } else {
     $76 = 10;
    }
    __THREW__ = 0;
    invoke_viii(666,($9|0),($76|0),0);
    $77 = __THREW__; __THREW__ = 0;
    $78 = $77&1;
    if ($78) {
     label = 31;
     break;
    }
    $79 = HEAP8[$17>>0]|0;
    $80 = ($79<<24>>24)<(0);
    $81 = HEAP32[$9>>2]|0;
    $82 = $80 ? $81 : $9;
    $83 = (($82) + ($66)|0);
    HEAP32[$10>>2] = $83;
    $$125 = $82;
   } else {
    $$125 = $$024;
   }
   $92 = ((($$pre$i$i$i)) + 12|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ((($$pre$i$i$i)) + 16|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = ($93|0)==($95|0);
   if ($96) {
    $97 = HEAP32[$$pre$i$i$i>>2]|0;
    $98 = ((($97)) + 36|0);
    $99 = HEAP32[$98>>2]|0;
    __THREW__ = 0;
    $100 = (invoke_ii($99|0,($$pre$i$i$i|0))|0);
    $101 = __THREW__; __THREW__ = 0;
    $102 = $101&1;
    if ($102) {
     label = 29;
     break;
    } else {
     $$0$i$i55 = $100;
    }
   } else {
    $103 = HEAP32[$93>>2]|0;
    $$0$i$i55 = $103;
   }
   $104 = HEAP32[$7>>2]|0;
   $105 = (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i55,$14,$$125,$10,$13,$104,$8,$11,$12,$6)|0);
   $106 = ($105|0)==(0);
   if (!($106)) {
    $$2 = $$125;$$pre$i4$i$i = $172;
    label = 39;
    break;
   }
   $107 = HEAP32[$92>>2]|0;
   $108 = HEAP32[$94>>2]|0;
   $109 = ($107|0)==($108|0);
   if ($109) {
    $110 = HEAP32[$$pre$i$i$i>>2]|0;
    $111 = ((($110)) + 40|0);
    $112 = HEAP32[$111>>2]|0;
    __THREW__ = 0;
    (invoke_ii($112|0,($$pre$i$i$i|0))|0);
    $113 = __THREW__; __THREW__ = 0;
    $114 = $113&1;
    if ($114) {
     label = 29;
     break;
    } else {
     $$024 = $$125;$$pre$i$i$i32 = $$pre$i$i$i;
     continue;
    }
   } else {
    $115 = ((($107)) + 4|0);
    HEAP32[$92>>2] = $115;
    $$024 = $$125;$$pre$i$i$i32 = $$pre$i$i$i;
    continue;
   }
  }
  if ((label|0) == 29) {
   $86 = ___cxa_find_matching_catch_2()|0;
   $87 = tempRet0;
   $$sink$index = $86;$$sink$index3 = $87;
  }
  else if ((label|0) == 31) {
   $90 = ___cxa_find_matching_catch_2()|0;
   $91 = tempRet0;
   $$sink$index = $90;$$sink$index3 = $91;
  }
  else if ((label|0) == 39) {
   $116 = ((($8)) + 11|0);
   $117 = HEAP8[$116>>0]|0;
   $118 = ($117<<24>>24)<(0);
   $119 = ((($8)) + 4|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = $117&255;
   $122 = $118 ? $120 : $121;
   $123 = ($122|0)==(0);
   if (!($123)) {
    $124 = HEAP32[$12>>2]|0;
    $125 = $124;
    $126 = $11;
    $127 = (($125) - ($126))|0;
    $128 = ($127|0)<(160);
    if ($128) {
     $129 = HEAP32[$13>>2]|0;
     $130 = ((($124)) + 4|0);
     HEAP32[$12>>2] = $130;
     HEAP32[$124>>2] = $129;
    }
   }
   $131 = HEAP32[$10>>2]|0;
   __THREW__ = 0;
   $132 = (invoke_iiiii(771,($$2|0),($131|0),($4|0),($14|0))|0);
   $133 = tempRet0;
   $134 = __THREW__; __THREW__ = 0;
   $135 = $134&1;
   L56: do {
    if (!($135)) {
     $136 = $5;
     $137 = $136;
     HEAP32[$137>>2] = $132;
     $138 = (($136) + 4)|0;
     $139 = $138;
     HEAP32[$139>>2] = $133;
     $140 = HEAP32[$12>>2]|0;
     __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$140,$4);
     $141 = ($$pre$i$i$i|0)==(0|0);
     if ($141) {
      $173 = 1;
     } else {
      $142 = ((($$pre$i$i$i)) + 12|0);
      $143 = HEAP32[$142>>2]|0;
      $144 = ((($$pre$i$i$i)) + 16|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = ($143|0)==($145|0);
      if ($146) {
       $147 = HEAP32[$$pre$i$i$i>>2]|0;
       $148 = ((($147)) + 36|0);
       $149 = HEAP32[$148>>2]|0;
       __THREW__ = 0;
       $150 = (invoke_ii($149|0,($$pre$i$i$i|0))|0);
       $151 = __THREW__; __THREW__ = 0;
       $152 = $151&1;
       if ($152) {
        break;
       } else {
        $$0$i$i$i$i = $150;
       }
      } else {
       $153 = HEAP32[$143>>2]|0;
       $$0$i$i$i$i = $153;
      }
      $154 = ($$0$i$i$i$i|0)==(-1);
      if ($154) {
       HEAP32[$1>>2] = 0;
       $173 = 1;
      } else {
       $173 = 0;
      }
     }
     $155 = ($$pre$i4$i$i|0)==(0|0);
     do {
      if ($155) {
       label = 55;
      } else {
       $156 = ((($$pre$i4$i$i)) + 12|0);
       $157 = HEAP32[$156>>2]|0;
       $158 = ((($$pre$i4$i$i)) + 16|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($157|0)==($159|0);
       if ($160) {
        $161 = HEAP32[$$pre$i4$i$i>>2]|0;
        $162 = ((($161)) + 36|0);
        $163 = HEAP32[$162>>2]|0;
        __THREW__ = 0;
        $164 = (invoke_ii($163|0,($$pre$i4$i$i|0))|0);
        $165 = __THREW__; __THREW__ = 0;
        $166 = $165&1;
        if ($166) {
         break L56;
        } else {
         $$0$i$i2$i$i = $164;
        }
       } else {
        $167 = HEAP32[$157>>2]|0;
        $$0$i$i2$i$i = $167;
       }
       $168 = ($$0$i$i2$i$i|0)==(-1);
       if ($168) {
        HEAP32[$2>>2] = 0;
        label = 55;
        break;
       } else {
        if ($173) {
         break;
        } else {
         label = 57;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 55) {
      if ($173) {
       label = 57;
      }
     }
     if ((label|0) == 57) {
      $169 = HEAP32[$4>>2]|0;
      $170 = $169 | 2;
      HEAP32[$4>>2] = $170;
     }
     $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
     STACKTOP = sp;return ($$sroa$0$0$copyload|0);
    }
   } while(0);
   $88 = ___cxa_find_matching_catch_2()|0;
   $89 = tempRet0;
   $$sink$index = $88;$$sink$index3 = $89;
  }
  $$1 = $$sink$index;$$127 = $$sink$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink$index = 0, $$sink$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = (__ZNKSt3__28ios_base6getlocEv($1)|0);
 HEAP32[$4>>2] = $5;
 __THREW__ = 0;
 $6 = (invoke_iii(659,($4|0),(40744|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  label = 7;
 } else {
  $9 = HEAP32[$6>>2]|0;
  $10 = ((($9)) + 48|0);
  $11 = HEAP32[$10>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($11|0,($6|0),(32626|0),((32652)|0),($2|0))|0);
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if ($13) {
   label = 7;
  } else {
   __THREW__ = 0;
   $14 = (invoke_iii(659,($4|0),(40752|0))|0);
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   if ($16) {
    label = 7;
   } else {
    $17 = HEAP32[$14>>2]|0;
    $18 = ((($17)) + 16|0);
    $19 = HEAP32[$18>>2]|0;
    __THREW__ = 0;
    $20 = (invoke_ii($19|0,($14|0))|0);
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if (!($22)) {
     HEAP32[$3>>2] = $20;
     $23 = HEAP32[$14>>2]|0;
     $24 = ((($23)) + 20|0);
     $25 = HEAP32[$24>>2]|0;
     __THREW__ = 0;
     invoke_vii($25|0,($0|0),($14|0));
     $26 = __THREW__; __THREW__ = 0;
     $27 = $26&1;
     if (!($27)) {
      (__ZNSt3__214__shared_count16__release_sharedEv($5)|0);
      STACKTOP = sp;return;
     }
    }
    $30 = ___cxa_find_matching_catch_2()|0;
    $31 = tempRet0;
    $$sink$index = $30;$$sink$index2 = $31;
   }
  }
 }
 if ((label|0) == 7) {
  $28 = ___cxa_find_matching_catch_2()|0;
  $29 = tempRet0;
  $$sink$index = $28;$$sink$index2 = $29;
 }
 (__ZNSt3__214__shared_count16__release_sharedEv($5)|0);
 ___resumeException($$sink$index|0);
 // unreachable;
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i30 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i36 = 0, $$0$i$i55 = 0, $$024 = 0, $$1 = 0, $$125 = 0, $$127 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i32 = 0, $$pre$i4$i$i = 0, $$sink$index = 0, $$sink$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i50 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $6 = sp + 200|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 if ($19) {
  $20 = ((($9)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __THREW__ = 0;
 invoke_viii(666,($9|0),($23|0),0);
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $84 = ___cxa_find_matching_catch_2()|0;
  $85 = tempRet0;
  $$1 = $84;$$127 = $85;
 } else {
  $26 = HEAP8[$17>>0]|0;
  $27 = ($26<<24>>24)<(0);
  $28 = HEAP32[$9>>2]|0;
  $29 = $27 ? $28 : $9;
  HEAP32[$10>>2] = $29;
  HEAP32[$12>>2] = $11;
  HEAP32[$13>>2] = 0;
  $30 = ((($9)) + 4|0);
  $31 = ((($9)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$024 = $29;$$pre$i$i$i32 = $$pre;
  L11: while(1) {
   $32 = ($$pre$i$i$i32|0)==(0|0);
   if ($32) {
    $$pre$i$i$i = 0;$166 = 1;
   } else {
    $33 = ((($$pre$i$i$i32)) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ((($$pre$i$i$i32)) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($34|0)==($36|0);
    if ($37) {
     $38 = HEAP32[$$pre$i$i$i32>>2]|0;
     $39 = ((($38)) + 36|0);
     $40 = HEAP32[$39>>2]|0;
     __THREW__ = 0;
     $41 = (invoke_ii($40|0,($$pre$i$i$i32|0))|0);
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      label = 29;
      break;
     } else {
      $$0$i$i$i$i30 = $41;
     }
    } else {
     $44 = HEAP32[$34>>2]|0;
     $$0$i$i$i$i30 = $44;
    }
    $45 = ($$0$i$i$i$i30|0)==(-1);
    if ($45) {
     HEAP32[$1>>2] = 0;
     $$pre$i$i$i = 0;$166 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i32;$166 = 0;
    }
   }
   $46 = HEAP32[$2>>2]|0;
   $47 = ($46|0)==(0|0);
   do {
    if ($47) {
     label = 20;
    } else {
     $48 = ((($46)) + 12|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ((($46)) + 16|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($49|0)==($51|0);
     if ($52) {
      $53 = HEAP32[$46>>2]|0;
      $54 = ((($53)) + 36|0);
      $55 = HEAP32[$54>>2]|0;
      __THREW__ = 0;
      $56 = (invoke_ii($55|0,($46|0))|0);
      $57 = __THREW__; __THREW__ = 0;
      $58 = $57&1;
      if ($58) {
       label = 29;
       break L11;
      } else {
       $$0$i$i2$i$i36 = $56;
      }
     } else {
      $59 = HEAP32[$49>>2]|0;
      $$0$i$i2$i$i36 = $59;
     }
     $60 = ($$0$i$i2$i$i36|0)==(-1);
     if ($60) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($166) {
       $167 = $46;
       break;
      } else {
       $$2 = $$024;$$pre$i4$i$i = $46;
       label = 39;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($166) {
     $$2 = $$024;$$pre$i4$i$i = 0;
     label = 39;
     break;
    } else {
     $167 = 0;
    }
   }
   $61 = HEAP32[$10>>2]|0;
   $62 = HEAP8[$17>>0]|0;
   $63 = ($62<<24>>24)<(0);
   $64 = HEAP32[$30>>2]|0;
   $65 = $62&255;
   $66 = $63 ? $64 : $65;
   $67 = (($$024) + ($66)|0);
   $68 = ($61|0)==($67|0);
   if ($68) {
    $69 = $66 << 1;
    __THREW__ = 0;
    invoke_viii(666,($9|0),($69|0),0);
    $70 = __THREW__; __THREW__ = 0;
    $71 = $70&1;
    if ($71) {
     label = 31;
     break;
    }
    $72 = HEAP8[$17>>0]|0;
    $73 = ($72<<24>>24)<(0);
    if ($73) {
     $74 = HEAP32[$31>>2]|0;
     $75 = $74 & 2147483647;
     $phitmp$i50 = (($75) + -1)|0;
     $76 = $phitmp$i50;
    } else {
     $76 = 10;
    }
    __THREW__ = 0;
    invoke_viii(666,($9|0),($76|0),0);
    $77 = __THREW__; __THREW__ = 0;
    $78 = $77&1;
    if ($78) {
     label = 31;
     break;
    }
    $79 = HEAP8[$17>>0]|0;
    $80 = ($79<<24>>24)<(0);
    $81 = HEAP32[$9>>2]|0;
    $82 = $80 ? $81 : $9;
    $83 = (($82) + ($66)|0);
    HEAP32[$10>>2] = $83;
    $$125 = $82;
   } else {
    $$125 = $$024;
   }
   $92 = ((($$pre$i$i$i)) + 12|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ((($$pre$i$i$i)) + 16|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = ($93|0)==($95|0);
   if ($96) {
    $97 = HEAP32[$$pre$i$i$i>>2]|0;
    $98 = ((($97)) + 36|0);
    $99 = HEAP32[$98>>2]|0;
    __THREW__ = 0;
    $100 = (invoke_ii($99|0,($$pre$i$i$i|0))|0);
    $101 = __THREW__; __THREW__ = 0;
    $102 = $101&1;
    if ($102) {
     label = 29;
     break;
    } else {
     $$0$i$i55 = $100;
    }
   } else {
    $103 = HEAP32[$93>>2]|0;
    $$0$i$i55 = $103;
   }
   $104 = HEAP32[$7>>2]|0;
   $105 = (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i55,$14,$$125,$10,$13,$104,$8,$11,$12,$6)|0);
   $106 = ($105|0)==(0);
   if (!($106)) {
    $$2 = $$125;$$pre$i4$i$i = $167;
    label = 39;
    break;
   }
   $107 = HEAP32[$92>>2]|0;
   $108 = HEAP32[$94>>2]|0;
   $109 = ($107|0)==($108|0);
   if ($109) {
    $110 = HEAP32[$$pre$i$i$i>>2]|0;
    $111 = ((($110)) + 40|0);
    $112 = HEAP32[$111>>2]|0;
    __THREW__ = 0;
    (invoke_ii($112|0,($$pre$i$i$i|0))|0);
    $113 = __THREW__; __THREW__ = 0;
    $114 = $113&1;
    if ($114) {
     label = 29;
     break;
    } else {
     $$024 = $$125;$$pre$i$i$i32 = $$pre$i$i$i;
     continue;
    }
   } else {
    $115 = ((($107)) + 4|0);
    HEAP32[$92>>2] = $115;
    $$024 = $$125;$$pre$i$i$i32 = $$pre$i$i$i;
    continue;
   }
  }
  if ((label|0) == 29) {
   $86 = ___cxa_find_matching_catch_2()|0;
   $87 = tempRet0;
   $$sink$index = $86;$$sink$index3 = $87;
  }
  else if ((label|0) == 31) {
   $90 = ___cxa_find_matching_catch_2()|0;
   $91 = tempRet0;
   $$sink$index = $90;$$sink$index3 = $91;
  }
  else if ((label|0) == 39) {
   $116 = ((($8)) + 11|0);
   $117 = HEAP8[$116>>0]|0;
   $118 = ($117<<24>>24)<(0);
   $119 = ((($8)) + 4|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = $117&255;
   $122 = $118 ? $120 : $121;
   $123 = ($122|0)==(0);
   if (!($123)) {
    $124 = HEAP32[$12>>2]|0;
    $125 = $124;
    $126 = $11;
    $127 = (($125) - ($126))|0;
    $128 = ($127|0)<(160);
    if ($128) {
     $129 = HEAP32[$13>>2]|0;
     $130 = ((($124)) + 4|0);
     HEAP32[$12>>2] = $130;
     HEAP32[$124>>2] = $129;
    }
   }
   $131 = HEAP32[$10>>2]|0;
   __THREW__ = 0;
   $132 = (invoke_iiiii(772,($$2|0),($131|0),($4|0),($14|0))|0);
   $133 = __THREW__; __THREW__ = 0;
   $134 = $133&1;
   L56: do {
    if (!($134)) {
     HEAP32[$5>>2] = $132;
     $135 = HEAP32[$12>>2]|0;
     __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$135,$4);
     $136 = ($$pre$i$i$i|0)==(0|0);
     if ($136) {
      $168 = 1;
     } else {
      $137 = ((($$pre$i$i$i)) + 12|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ((($$pre$i$i$i)) + 16|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ($138|0)==($140|0);
      if ($141) {
       $142 = HEAP32[$$pre$i$i$i>>2]|0;
       $143 = ((($142)) + 36|0);
       $144 = HEAP32[$143>>2]|0;
       __THREW__ = 0;
       $145 = (invoke_ii($144|0,($$pre$i$i$i|0))|0);
       $146 = __THREW__; __THREW__ = 0;
       $147 = $146&1;
       if ($147) {
        break;
       } else {
        $$0$i$i$i$i = $145;
       }
      } else {
       $148 = HEAP32[$138>>2]|0;
       $$0$i$i$i$i = $148;
      }
      $149 = ($$0$i$i$i$i|0)==(-1);
      if ($149) {
       HEAP32[$1>>2] = 0;
       $168 = 1;
      } else {
       $168 = 0;
      }
     }
     $150 = ($$pre$i4$i$i|0)==(0|0);
     do {
      if ($150) {
       label = 55;
      } else {
       $151 = ((($$pre$i4$i$i)) + 12|0);
       $152 = HEAP32[$151>>2]|0;
       $153 = ((($$pre$i4$i$i)) + 16|0);
       $154 = HEAP32[$153>>2]|0;
       $155 = ($152|0)==($154|0);
       if ($155) {
        $156 = HEAP32[$$pre$i4$i$i>>2]|0;
        $157 = ((($156)) + 36|0);
        $158 = HEAP32[$157>>2]|0;
        __THREW__ = 0;
        $159 = (invoke_ii($158|0,($$pre$i4$i$i|0))|0);
        $160 = __THREW__; __THREW__ = 0;
        $161 = $160&1;
        if ($161) {
         break L56;
        } else {
         $$0$i$i2$i$i = $159;
        }
       } else {
        $162 = HEAP32[$152>>2]|0;
        $$0$i$i2$i$i = $162;
       }
       $163 = ($$0$i$i2$i$i|0)==(-1);
       if ($163) {
        HEAP32[$2>>2] = 0;
        label = 55;
        break;
       } else {
        if ($168) {
         break;
        } else {
         label = 57;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 55) {
      if ($168) {
       label = 57;
      }
     }
     if ((label|0) == 57) {
      $164 = HEAP32[$4>>2]|0;
      $165 = $164 | 2;
      HEAP32[$4>>2] = $165;
     }
     $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
     STACKTOP = sp;return ($$sroa$0$0$copyload|0);
    }
   } while(0);
   $88 = ___cxa_find_matching_catch_2()|0;
   $89 = tempRet0;
   $$sink$index = $88;$$sink$index3 = $89;
  }
  $$1 = $$sink$index;$$127 = $$sink$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i30 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i36 = 0, $$0$i$i55 = 0, $$024 = 0, $$1 = 0, $$125 = 0, $$127 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i32 = 0, $$pre$i4$i$i = 0, $$sink$index = 0, $$sink$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i50 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $6 = sp + 200|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 if ($19) {
  $20 = ((($9)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __THREW__ = 0;
 invoke_viii(666,($9|0),($23|0),0);
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $84 = ___cxa_find_matching_catch_2()|0;
  $85 = tempRet0;
  $$1 = $84;$$127 = $85;
 } else {
  $26 = HEAP8[$17>>0]|0;
  $27 = ($26<<24>>24)<(0);
  $28 = HEAP32[$9>>2]|0;
  $29 = $27 ? $28 : $9;
  HEAP32[$10>>2] = $29;
  HEAP32[$12>>2] = $11;
  HEAP32[$13>>2] = 0;
  $30 = ((($9)) + 4|0);
  $31 = ((($9)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$024 = $29;$$pre$i$i$i32 = $$pre;
  L11: while(1) {
   $32 = ($$pre$i$i$i32|0)==(0|0);
   if ($32) {
    $$pre$i$i$i = 0;$166 = 1;
   } else {
    $33 = ((($$pre$i$i$i32)) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ((($$pre$i$i$i32)) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($34|0)==($36|0);
    if ($37) {
     $38 = HEAP32[$$pre$i$i$i32>>2]|0;
     $39 = ((($38)) + 36|0);
     $40 = HEAP32[$39>>2]|0;
     __THREW__ = 0;
     $41 = (invoke_ii($40|0,($$pre$i$i$i32|0))|0);
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      label = 29;
      break;
     } else {
      $$0$i$i$i$i30 = $41;
     }
    } else {
     $44 = HEAP32[$34>>2]|0;
     $$0$i$i$i$i30 = $44;
    }
    $45 = ($$0$i$i$i$i30|0)==(-1);
    if ($45) {
     HEAP32[$1>>2] = 0;
     $$pre$i$i$i = 0;$166 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i32;$166 = 0;
    }
   }
   $46 = HEAP32[$2>>2]|0;
   $47 = ($46|0)==(0|0);
   do {
    if ($47) {
     label = 20;
    } else {
     $48 = ((($46)) + 12|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ((($46)) + 16|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($49|0)==($51|0);
     if ($52) {
      $53 = HEAP32[$46>>2]|0;
      $54 = ((($53)) + 36|0);
      $55 = HEAP32[$54>>2]|0;
      __THREW__ = 0;
      $56 = (invoke_ii($55|0,($46|0))|0);
      $57 = __THREW__; __THREW__ = 0;
      $58 = $57&1;
      if ($58) {
       label = 29;
       break L11;
      } else {
       $$0$i$i2$i$i36 = $56;
      }
     } else {
      $59 = HEAP32[$49>>2]|0;
      $$0$i$i2$i$i36 = $59;
     }
     $60 = ($$0$i$i2$i$i36|0)==(-1);
     if ($60) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($166) {
       $167 = $46;
       break;
      } else {
       $$2 = $$024;$$pre$i4$i$i = $46;
       label = 39;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($166) {
     $$2 = $$024;$$pre$i4$i$i = 0;
     label = 39;
     break;
    } else {
     $167 = 0;
    }
   }
   $61 = HEAP32[$10>>2]|0;
   $62 = HEAP8[$17>>0]|0;
   $63 = ($62<<24>>24)<(0);
   $64 = HEAP32[$30>>2]|0;
   $65 = $62&255;
   $66 = $63 ? $64 : $65;
   $67 = (($$024) + ($66)|0);
   $68 = ($61|0)==($67|0);
   if ($68) {
    $69 = $66 << 1;
    __THREW__ = 0;
    invoke_viii(666,($9|0),($69|0),0);
    $70 = __THREW__; __THREW__ = 0;
    $71 = $70&1;
    if ($71) {
     label = 31;
     break;
    }
    $72 = HEAP8[$17>>0]|0;
    $73 = ($72<<24>>24)<(0);
    if ($73) {
     $74 = HEAP32[$31>>2]|0;
     $75 = $74 & 2147483647;
     $phitmp$i50 = (($75) + -1)|0;
     $76 = $phitmp$i50;
    } else {
     $76 = 10;
    }
    __THREW__ = 0;
    invoke_viii(666,($9|0),($76|0),0);
    $77 = __THREW__; __THREW__ = 0;
    $78 = $77&1;
    if ($78) {
     label = 31;
     break;
    }
    $79 = HEAP8[$17>>0]|0;
    $80 = ($79<<24>>24)<(0);
    $81 = HEAP32[$9>>2]|0;
    $82 = $80 ? $81 : $9;
    $83 = (($82) + ($66)|0);
    HEAP32[$10>>2] = $83;
    $$125 = $82;
   } else {
    $$125 = $$024;
   }
   $92 = ((($$pre$i$i$i)) + 12|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ((($$pre$i$i$i)) + 16|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = ($93|0)==($95|0);
   if ($96) {
    $97 = HEAP32[$$pre$i$i$i>>2]|0;
    $98 = ((($97)) + 36|0);
    $99 = HEAP32[$98>>2]|0;
    __THREW__ = 0;
    $100 = (invoke_ii($99|0,($$pre$i$i$i|0))|0);
    $101 = __THREW__; __THREW__ = 0;
    $102 = $101&1;
    if ($102) {
     label = 29;
     break;
    } else {
     $$0$i$i55 = $100;
    }
   } else {
    $103 = HEAP32[$93>>2]|0;
    $$0$i$i55 = $103;
   }
   $104 = HEAP32[$7>>2]|0;
   $105 = (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i55,$14,$$125,$10,$13,$104,$8,$11,$12,$6)|0);
   $106 = ($105|0)==(0);
   if (!($106)) {
    $$2 = $$125;$$pre$i4$i$i = $167;
    label = 39;
    break;
   }
   $107 = HEAP32[$92>>2]|0;
   $108 = HEAP32[$94>>2]|0;
   $109 = ($107|0)==($108|0);
   if ($109) {
    $110 = HEAP32[$$pre$i$i$i>>2]|0;
    $111 = ((($110)) + 40|0);
    $112 = HEAP32[$111>>2]|0;
    __THREW__ = 0;
    (invoke_ii($112|0,($$pre$i$i$i|0))|0);
    $113 = __THREW__; __THREW__ = 0;
    $114 = $113&1;
    if ($114) {
     label = 29;
     break;
    } else {
     $$024 = $$125;$$pre$i$i$i32 = $$pre$i$i$i;
     continue;
    }
   } else {
    $115 = ((($107)) + 4|0);
    HEAP32[$92>>2] = $115;
    $$024 = $$125;$$pre$i$i$i32 = $$pre$i$i$i;
    continue;
   }
  }
  if ((label|0) == 29) {
   $86 = ___cxa_find_matching_catch_2()|0;
   $87 = tempRet0;
   $$sink$index = $86;$$sink$index3 = $87;
  }
  else if ((label|0) == 31) {
   $90 = ___cxa_find_matching_catch_2()|0;
   $91 = tempRet0;
   $$sink$index = $90;$$sink$index3 = $91;
  }
  else if ((label|0) == 39) {
   $116 = ((($8)) + 11|0);
   $117 = HEAP8[$116>>0]|0;
   $118 = ($117<<24>>24)<(0);
   $119 = ((($8)) + 4|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = $117&255;
   $122 = $118 ? $120 : $121;
   $123 = ($122|0)==(0);
   if (!($123)) {
    $124 = HEAP32[$12>>2]|0;
    $125 = $124;
    $126 = $11;
    $127 = (($125) - ($126))|0;
    $128 = ($127|0)<(160);
    if ($128) {
     $129 = HEAP32[$13>>2]|0;
     $130 = ((($124)) + 4|0);
     HEAP32[$12>>2] = $130;
     HEAP32[$124>>2] = $129;
    }
   }
   $131 = HEAP32[$10>>2]|0;
   __THREW__ = 0;
   $132 = (invoke_iiiii(773,($$2|0),($131|0),($4|0),($14|0))|0);
   $133 = __THREW__; __THREW__ = 0;
   $134 = $133&1;
   L56: do {
    if (!($134)) {
     HEAP32[$5>>2] = $132;
     $135 = HEAP32[$12>>2]|0;
     __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$135,$4);
     $136 = ($$pre$i$i$i|0)==(0|0);
     if ($136) {
      $168 = 1;
     } else {
      $137 = ((($$pre$i$i$i)) + 12|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ((($$pre$i$i$i)) + 16|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ($138|0)==($140|0);
      if ($141) {
       $142 = HEAP32[$$pre$i$i$i>>2]|0;
       $143 = ((($142)) + 36|0);
       $144 = HEAP32[$143>>2]|0;
       __THREW__ = 0;
       $145 = (invoke_ii($144|0,($$pre$i$i$i|0))|0);
       $146 = __THREW__; __THREW__ = 0;
       $147 = $146&1;
       if ($147) {
        break;
       } else {
        $$0$i$i$i$i = $145;
       }
      } else {
       $148 = HEAP32[$138>>2]|0;
       $$0$i$i$i$i = $148;
      }
      $149 = ($$0$i$i$i$i|0)==(-1);
      if ($149) {
       HEAP32[$1>>2] = 0;
       $168 = 1;
      } else {
       $168 = 0;
      }
     }
     $150 = ($$pre$i4$i$i|0)==(0|0);
     do {
      if ($150) {
       label = 55;
      } else {
       $151 = ((($$pre$i4$i$i)) + 12|0);
       $152 = HEAP32[$151>>2]|0;
       $153 = ((($$pre$i4$i$i)) + 16|0);
       $154 = HEAP32[$153>>2]|0;
       $155 = ($152|0)==($154|0);
       if ($155) {
        $156 = HEAP32[$$pre$i4$i$i>>2]|0;
        $157 = ((($156)) + 36|0);
        $158 = HEAP32[$157>>2]|0;
        __THREW__ = 0;
        $159 = (invoke_ii($158|0,($$pre$i4$i$i|0))|0);
        $160 = __THREW__; __THREW__ = 0;
        $161 = $160&1;
        if ($161) {
         break L56;
        } else {
         $$0$i$i2$i$i = $159;
        }
       } else {
        $162 = HEAP32[$152>>2]|0;
        $$0$i$i2$i$i = $162;
       }
       $163 = ($$0$i$i2$i$i|0)==(-1);
       if ($163) {
        HEAP32[$2>>2] = 0;
        label = 55;
        break;
       } else {
        if ($168) {
         break;
        } else {
         label = 57;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 55) {
      if ($168) {
       label = 57;
      }
     }
     if ((label|0) == 57) {
      $164 = HEAP32[$4>>2]|0;
      $165 = $164 | 2;
      HEAP32[$4>>2] = $165;
     }
     $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
     STACKTOP = sp;return ($$sroa$0$0$copyload|0);
    }
   } while(0);
   $88 = ___cxa_find_matching_catch_2()|0;
   $89 = tempRet0;
   $$sink$index = $88;$$sink$index3 = $89;
  }
  $$1 = $$sink$index;$$127 = $$sink$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i30 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i36 = 0, $$0$i$i55 = 0, $$024 = 0, $$1 = 0, $$125 = 0, $$127 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i32 = 0, $$pre$i4$i$i = 0, $$sink$index = 0, $$sink$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i50 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $6 = sp + 200|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 if ($19) {
  $20 = ((($9)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __THREW__ = 0;
 invoke_viii(666,($9|0),($23|0),0);
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $84 = ___cxa_find_matching_catch_2()|0;
  $85 = tempRet0;
  $$1 = $84;$$127 = $85;
 } else {
  $26 = HEAP8[$17>>0]|0;
  $27 = ($26<<24>>24)<(0);
  $28 = HEAP32[$9>>2]|0;
  $29 = $27 ? $28 : $9;
  HEAP32[$10>>2] = $29;
  HEAP32[$12>>2] = $11;
  HEAP32[$13>>2] = 0;
  $30 = ((($9)) + 4|0);
  $31 = ((($9)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$024 = $29;$$pre$i$i$i32 = $$pre;
  L11: while(1) {
   $32 = ($$pre$i$i$i32|0)==(0|0);
   if ($32) {
    $$pre$i$i$i = 0;$166 = 1;
   } else {
    $33 = ((($$pre$i$i$i32)) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ((($$pre$i$i$i32)) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($34|0)==($36|0);
    if ($37) {
     $38 = HEAP32[$$pre$i$i$i32>>2]|0;
     $39 = ((($38)) + 36|0);
     $40 = HEAP32[$39>>2]|0;
     __THREW__ = 0;
     $41 = (invoke_ii($40|0,($$pre$i$i$i32|0))|0);
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      label = 29;
      break;
     } else {
      $$0$i$i$i$i30 = $41;
     }
    } else {
     $44 = HEAP32[$34>>2]|0;
     $$0$i$i$i$i30 = $44;
    }
    $45 = ($$0$i$i$i$i30|0)==(-1);
    if ($45) {
     HEAP32[$1>>2] = 0;
     $$pre$i$i$i = 0;$166 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i32;$166 = 0;
    }
   }
   $46 = HEAP32[$2>>2]|0;
   $47 = ($46|0)==(0|0);
   do {
    if ($47) {
     label = 20;
    } else {
     $48 = ((($46)) + 12|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ((($46)) + 16|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($49|0)==($51|0);
     if ($52) {
      $53 = HEAP32[$46>>2]|0;
      $54 = ((($53)) + 36|0);
      $55 = HEAP32[$54>>2]|0;
      __THREW__ = 0;
      $56 = (invoke_ii($55|0,($46|0))|0);
      $57 = __THREW__; __THREW__ = 0;
      $58 = $57&1;
      if ($58) {
       label = 29;
       break L11;
      } else {
       $$0$i$i2$i$i36 = $56;
      }
     } else {
      $59 = HEAP32[$49>>2]|0;
      $$0$i$i2$i$i36 = $59;
     }
     $60 = ($$0$i$i2$i$i36|0)==(-1);
     if ($60) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($166) {
       $167 = $46;
       break;
      } else {
       $$2 = $$024;$$pre$i4$i$i = $46;
       label = 39;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($166) {
     $$2 = $$024;$$pre$i4$i$i = 0;
     label = 39;
     break;
    } else {
     $167 = 0;
    }
   }
   $61 = HEAP32[$10>>2]|0;
   $62 = HEAP8[$17>>0]|0;
   $63 = ($62<<24>>24)<(0);
   $64 = HEAP32[$30>>2]|0;
   $65 = $62&255;
   $66 = $63 ? $64 : $65;
   $67 = (($$024) + ($66)|0);
   $68 = ($61|0)==($67|0);
   if ($68) {
    $69 = $66 << 1;
    __THREW__ = 0;
    invoke_viii(666,($9|0),($69|0),0);
    $70 = __THREW__; __THREW__ = 0;
    $71 = $70&1;
    if ($71) {
     label = 31;
     break;
    }
    $72 = HEAP8[$17>>0]|0;
    $73 = ($72<<24>>24)<(0);
    if ($73) {
     $74 = HEAP32[$31>>2]|0;
     $75 = $74 & 2147483647;
     $phitmp$i50 = (($75) + -1)|0;
     $76 = $phitmp$i50;
    } else {
     $76 = 10;
    }
    __THREW__ = 0;
    invoke_viii(666,($9|0),($76|0),0);
    $77 = __THREW__; __THREW__ = 0;
    $78 = $77&1;
    if ($78) {
     label = 31;
     break;
    }
    $79 = HEAP8[$17>>0]|0;
    $80 = ($79<<24>>24)<(0);
    $81 = HEAP32[$9>>2]|0;
    $82 = $80 ? $81 : $9;
    $83 = (($82) + ($66)|0);
    HEAP32[$10>>2] = $83;
    $$125 = $82;
   } else {
    $$125 = $$024;
   }
   $92 = ((($$pre$i$i$i)) + 12|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ((($$pre$i$i$i)) + 16|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = ($93|0)==($95|0);
   if ($96) {
    $97 = HEAP32[$$pre$i$i$i>>2]|0;
    $98 = ((($97)) + 36|0);
    $99 = HEAP32[$98>>2]|0;
    __THREW__ = 0;
    $100 = (invoke_ii($99|0,($$pre$i$i$i|0))|0);
    $101 = __THREW__; __THREW__ = 0;
    $102 = $101&1;
    if ($102) {
     label = 29;
     break;
    } else {
     $$0$i$i55 = $100;
    }
   } else {
    $103 = HEAP32[$93>>2]|0;
    $$0$i$i55 = $103;
   }
   $104 = HEAP32[$7>>2]|0;
   $105 = (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i55,$14,$$125,$10,$13,$104,$8,$11,$12,$6)|0);
   $106 = ($105|0)==(0);
   if (!($106)) {
    $$2 = $$125;$$pre$i4$i$i = $167;
    label = 39;
    break;
   }
   $107 = HEAP32[$92>>2]|0;
   $108 = HEAP32[$94>>2]|0;
   $109 = ($107|0)==($108|0);
   if ($109) {
    $110 = HEAP32[$$pre$i$i$i>>2]|0;
    $111 = ((($110)) + 40|0);
    $112 = HEAP32[$111>>2]|0;
    __THREW__ = 0;
    (invoke_ii($112|0,($$pre$i$i$i|0))|0);
    $113 = __THREW__; __THREW__ = 0;
    $114 = $113&1;
    if ($114) {
     label = 29;
     break;
    } else {
     $$024 = $$125;$$pre$i$i$i32 = $$pre$i$i$i;
     continue;
    }
   } else {
    $115 = ((($107)) + 4|0);
    HEAP32[$92>>2] = $115;
    $$024 = $$125;$$pre$i$i$i32 = $$pre$i$i$i;
    continue;
   }
  }
  if ((label|0) == 29) {
   $86 = ___cxa_find_matching_catch_2()|0;
   $87 = tempRet0;
   $$sink$index = $86;$$sink$index3 = $87;
  }
  else if ((label|0) == 31) {
   $90 = ___cxa_find_matching_catch_2()|0;
   $91 = tempRet0;
   $$sink$index = $90;$$sink$index3 = $91;
  }
  else if ((label|0) == 39) {
   $116 = ((($8)) + 11|0);
   $117 = HEAP8[$116>>0]|0;
   $118 = ($117<<24>>24)<(0);
   $119 = ((($8)) + 4|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = $117&255;
   $122 = $118 ? $120 : $121;
   $123 = ($122|0)==(0);
   if (!($123)) {
    $124 = HEAP32[$12>>2]|0;
    $125 = $124;
    $126 = $11;
    $127 = (($125) - ($126))|0;
    $128 = ($127|0)<(160);
    if ($128) {
     $129 = HEAP32[$13>>2]|0;
     $130 = ((($124)) + 4|0);
     HEAP32[$12>>2] = $130;
     HEAP32[$124>>2] = $129;
    }
   }
   $131 = HEAP32[$10>>2]|0;
   __THREW__ = 0;
   $132 = (invoke_iiiii(774,($$2|0),($131|0),($4|0),($14|0))|0);
   $133 = __THREW__; __THREW__ = 0;
   $134 = $133&1;
   L56: do {
    if (!($134)) {
     HEAP16[$5>>1] = $132;
     $135 = HEAP32[$12>>2]|0;
     __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$135,$4);
     $136 = ($$pre$i$i$i|0)==(0|0);
     if ($136) {
      $168 = 1;
     } else {
      $137 = ((($$pre$i$i$i)) + 12|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ((($$pre$i$i$i)) + 16|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ($138|0)==($140|0);
      if ($141) {
       $142 = HEAP32[$$pre$i$i$i>>2]|0;
       $143 = ((($142)) + 36|0);
       $144 = HEAP32[$143>>2]|0;
       __THREW__ = 0;
       $145 = (invoke_ii($144|0,($$pre$i$i$i|0))|0);
       $146 = __THREW__; __THREW__ = 0;
       $147 = $146&1;
       if ($147) {
        break;
       } else {
        $$0$i$i$i$i = $145;
       }
      } else {
       $148 = HEAP32[$138>>2]|0;
       $$0$i$i$i$i = $148;
      }
      $149 = ($$0$i$i$i$i|0)==(-1);
      if ($149) {
       HEAP32[$1>>2] = 0;
       $168 = 1;
      } else {
       $168 = 0;
      }
     }
     $150 = ($$pre$i4$i$i|0)==(0|0);
     do {
      if ($150) {
       label = 55;
      } else {
       $151 = ((($$pre$i4$i$i)) + 12|0);
       $152 = HEAP32[$151>>2]|0;
       $153 = ((($$pre$i4$i$i)) + 16|0);
       $154 = HEAP32[$153>>2]|0;
       $155 = ($152|0)==($154|0);
       if ($155) {
        $156 = HEAP32[$$pre$i4$i$i>>2]|0;
        $157 = ((($156)) + 36|0);
        $158 = HEAP32[$157>>2]|0;
        __THREW__ = 0;
        $159 = (invoke_ii($158|0,($$pre$i4$i$i|0))|0);
        $160 = __THREW__; __THREW__ = 0;
        $161 = $160&1;
        if ($161) {
         break L56;
        } else {
         $$0$i$i2$i$i = $159;
        }
       } else {
        $162 = HEAP32[$152>>2]|0;
        $$0$i$i2$i$i = $162;
       }
       $163 = ($$0$i$i2$i$i|0)==(-1);
       if ($163) {
        HEAP32[$2>>2] = 0;
        label = 55;
        break;
       } else {
        if ($168) {
         break;
        } else {
         label = 57;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 55) {
      if ($168) {
       label = 57;
      }
     }
     if ((label|0) == 57) {
      $164 = HEAP32[$4>>2]|0;
      $165 = $164 | 2;
      HEAP32[$4>>2] = $165;
     }
     $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
     STACKTOP = sp;return ($$sroa$0$0$copyload|0);
    }
   } while(0);
   $88 = ___cxa_find_matching_catch_2()|0;
   $89 = tempRet0;
   $$sink$index = $88;$$sink$index3 = $89;
  }
  $$1 = $$sink$index;$$127 = $$sink$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i30 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i36 = 0, $$0$i$i55 = 0, $$024 = 0, $$1 = 0, $$125 = 0, $$127 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i32 = 0, $$pre$i4$i$i = 0, $$sink$index = 0, $$sink$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i50 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $6 = sp + 200|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 if ($19) {
  $20 = ((($9)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __THREW__ = 0;
 invoke_viii(666,($9|0),($23|0),0);
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $84 = ___cxa_find_matching_catch_2()|0;
  $85 = tempRet0;
  $$1 = $84;$$127 = $85;
 } else {
  $26 = HEAP8[$17>>0]|0;
  $27 = ($26<<24>>24)<(0);
  $28 = HEAP32[$9>>2]|0;
  $29 = $27 ? $28 : $9;
  HEAP32[$10>>2] = $29;
  HEAP32[$12>>2] = $11;
  HEAP32[$13>>2] = 0;
  $30 = ((($9)) + 4|0);
  $31 = ((($9)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$024 = $29;$$pre$i$i$i32 = $$pre;
  L11: while(1) {
   $32 = ($$pre$i$i$i32|0)==(0|0);
   if ($32) {
    $$pre$i$i$i = 0;$171 = 1;
   } else {
    $33 = ((($$pre$i$i$i32)) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ((($$pre$i$i$i32)) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($34|0)==($36|0);
    if ($37) {
     $38 = HEAP32[$$pre$i$i$i32>>2]|0;
     $39 = ((($38)) + 36|0);
     $40 = HEAP32[$39>>2]|0;
     __THREW__ = 0;
     $41 = (invoke_ii($40|0,($$pre$i$i$i32|0))|0);
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      label = 29;
      break;
     } else {
      $$0$i$i$i$i30 = $41;
     }
    } else {
     $44 = HEAP32[$34>>2]|0;
     $$0$i$i$i$i30 = $44;
    }
    $45 = ($$0$i$i$i$i30|0)==(-1);
    if ($45) {
     HEAP32[$1>>2] = 0;
     $$pre$i$i$i = 0;$171 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i32;$171 = 0;
    }
   }
   $46 = HEAP32[$2>>2]|0;
   $47 = ($46|0)==(0|0);
   do {
    if ($47) {
     label = 20;
    } else {
     $48 = ((($46)) + 12|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ((($46)) + 16|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($49|0)==($51|0);
     if ($52) {
      $53 = HEAP32[$46>>2]|0;
      $54 = ((($53)) + 36|0);
      $55 = HEAP32[$54>>2]|0;
      __THREW__ = 0;
      $56 = (invoke_ii($55|0,($46|0))|0);
      $57 = __THREW__; __THREW__ = 0;
      $58 = $57&1;
      if ($58) {
       label = 29;
       break L11;
      } else {
       $$0$i$i2$i$i36 = $56;
      }
     } else {
      $59 = HEAP32[$49>>2]|0;
      $$0$i$i2$i$i36 = $59;
     }
     $60 = ($$0$i$i2$i$i36|0)==(-1);
     if ($60) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($171) {
       $172 = $46;
       break;
      } else {
       $$2 = $$024;$$pre$i4$i$i = $46;
       label = 39;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($171) {
     $$2 = $$024;$$pre$i4$i$i = 0;
     label = 39;
     break;
    } else {
     $172 = 0;
    }
   }
   $61 = HEAP32[$10>>2]|0;
   $62 = HEAP8[$17>>0]|0;
   $63 = ($62<<24>>24)<(0);
   $64 = HEAP32[$30>>2]|0;
   $65 = $62&255;
   $66 = $63 ? $64 : $65;
   $67 = (($$024) + ($66)|0);
   $68 = ($61|0)==($67|0);
   if ($68) {
    $69 = $66 << 1;
    __THREW__ = 0;
    invoke_viii(666,($9|0),($69|0),0);
    $70 = __THREW__; __THREW__ = 0;
    $71 = $70&1;
    if ($71) {
     label = 31;
     break;
    }
    $72 = HEAP8[$17>>0]|0;
    $73 = ($72<<24>>24)<(0);
    if ($73) {
     $74 = HEAP32[$31>>2]|0;
     $75 = $74 & 2147483647;
     $phitmp$i50 = (($75) + -1)|0;
     $76 = $phitmp$i50;
    } else {
     $76 = 10;
    }
    __THREW__ = 0;
    invoke_viii(666,($9|0),($76|0),0);
    $77 = __THREW__; __THREW__ = 0;
    $78 = $77&1;
    if ($78) {
     label = 31;
     break;
    }
    $79 = HEAP8[$17>>0]|0;
    $80 = ($79<<24>>24)<(0);
    $81 = HEAP32[$9>>2]|0;
    $82 = $80 ? $81 : $9;
    $83 = (($82) + ($66)|0);
    HEAP32[$10>>2] = $83;
    $$125 = $82;
   } else {
    $$125 = $$024;
   }
   $92 = ((($$pre$i$i$i)) + 12|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ((($$pre$i$i$i)) + 16|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = ($93|0)==($95|0);
   if ($96) {
    $97 = HEAP32[$$pre$i$i$i>>2]|0;
    $98 = ((($97)) + 36|0);
    $99 = HEAP32[$98>>2]|0;
    __THREW__ = 0;
    $100 = (invoke_ii($99|0,($$pre$i$i$i|0))|0);
    $101 = __THREW__; __THREW__ = 0;
    $102 = $101&1;
    if ($102) {
     label = 29;
     break;
    } else {
     $$0$i$i55 = $100;
    }
   } else {
    $103 = HEAP32[$93>>2]|0;
    $$0$i$i55 = $103;
   }
   $104 = HEAP32[$7>>2]|0;
   $105 = (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i55,$14,$$125,$10,$13,$104,$8,$11,$12,$6)|0);
   $106 = ($105|0)==(0);
   if (!($106)) {
    $$2 = $$125;$$pre$i4$i$i = $172;
    label = 39;
    break;
   }
   $107 = HEAP32[$92>>2]|0;
   $108 = HEAP32[$94>>2]|0;
   $109 = ($107|0)==($108|0);
   if ($109) {
    $110 = HEAP32[$$pre$i$i$i>>2]|0;
    $111 = ((($110)) + 40|0);
    $112 = HEAP32[$111>>2]|0;
    __THREW__ = 0;
    (invoke_ii($112|0,($$pre$i$i$i|0))|0);
    $113 = __THREW__; __THREW__ = 0;
    $114 = $113&1;
    if ($114) {
     label = 29;
     break;
    } else {
     $$024 = $$125;$$pre$i$i$i32 = $$pre$i$i$i;
     continue;
    }
   } else {
    $115 = ((($107)) + 4|0);
    HEAP32[$92>>2] = $115;
    $$024 = $$125;$$pre$i$i$i32 = $$pre$i$i$i;
    continue;
   }
  }
  if ((label|0) == 29) {
   $86 = ___cxa_find_matching_catch_2()|0;
   $87 = tempRet0;
   $$sink$index = $86;$$sink$index3 = $87;
  }
  else if ((label|0) == 31) {
   $90 = ___cxa_find_matching_catch_2()|0;
   $91 = tempRet0;
   $$sink$index = $90;$$sink$index3 = $91;
  }
  else if ((label|0) == 39) {
   $116 = ((($8)) + 11|0);
   $117 = HEAP8[$116>>0]|0;
   $118 = ($117<<24>>24)<(0);
   $119 = ((($8)) + 4|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = $117&255;
   $122 = $118 ? $120 : $121;
   $123 = ($122|0)==(0);
   if (!($123)) {
    $124 = HEAP32[$12>>2]|0;
    $125 = $124;
    $126 = $11;
    $127 = (($125) - ($126))|0;
    $128 = ($127|0)<(160);
    if ($128) {
     $129 = HEAP32[$13>>2]|0;
     $130 = ((($124)) + 4|0);
     HEAP32[$12>>2] = $130;
     HEAP32[$124>>2] = $129;
    }
   }
   $131 = HEAP32[$10>>2]|0;
   __THREW__ = 0;
   $132 = (invoke_iiiii(775,($$2|0),($131|0),($4|0),($14|0))|0);
   $133 = tempRet0;
   $134 = __THREW__; __THREW__ = 0;
   $135 = $134&1;
   L56: do {
    if (!($135)) {
     $136 = $5;
     $137 = $136;
     HEAP32[$137>>2] = $132;
     $138 = (($136) + 4)|0;
     $139 = $138;
     HEAP32[$139>>2] = $133;
     $140 = HEAP32[$12>>2]|0;
     __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$140,$4);
     $141 = ($$pre$i$i$i|0)==(0|0);
     if ($141) {
      $173 = 1;
     } else {
      $142 = ((($$pre$i$i$i)) + 12|0);
      $143 = HEAP32[$142>>2]|0;
      $144 = ((($$pre$i$i$i)) + 16|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = ($143|0)==($145|0);
      if ($146) {
       $147 = HEAP32[$$pre$i$i$i>>2]|0;
       $148 = ((($147)) + 36|0);
       $149 = HEAP32[$148>>2]|0;
       __THREW__ = 0;
       $150 = (invoke_ii($149|0,($$pre$i$i$i|0))|0);
       $151 = __THREW__; __THREW__ = 0;
       $152 = $151&1;
       if ($152) {
        break;
       } else {
        $$0$i$i$i$i = $150;
       }
      } else {
       $153 = HEAP32[$143>>2]|0;
       $$0$i$i$i$i = $153;
      }
      $154 = ($$0$i$i$i$i|0)==(-1);
      if ($154) {
       HEAP32[$1>>2] = 0;
       $173 = 1;
      } else {
       $173 = 0;
      }
     }
     $155 = ($$pre$i4$i$i|0)==(0|0);
     do {
      if ($155) {
       label = 55;
      } else {
       $156 = ((($$pre$i4$i$i)) + 12|0);
       $157 = HEAP32[$156>>2]|0;
       $158 = ((($$pre$i4$i$i)) + 16|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($157|0)==($159|0);
       if ($160) {
        $161 = HEAP32[$$pre$i4$i$i>>2]|0;
        $162 = ((($161)) + 36|0);
        $163 = HEAP32[$162>>2]|0;
        __THREW__ = 0;
        $164 = (invoke_ii($163|0,($$pre$i4$i$i|0))|0);
        $165 = __THREW__; __THREW__ = 0;
        $166 = $165&1;
        if ($166) {
         break L56;
        } else {
         $$0$i$i2$i$i = $164;
        }
       } else {
        $167 = HEAP32[$157>>2]|0;
        $$0$i$i2$i$i = $167;
       }
       $168 = ($$0$i$i2$i$i|0)==(-1);
       if ($168) {
        HEAP32[$2>>2] = 0;
        label = 55;
        break;
       } else {
        if ($173) {
         break;
        } else {
         label = 57;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 55) {
      if ($173) {
       label = 57;
      }
     }
     if ((label|0) == 57) {
      $169 = HEAP32[$4>>2]|0;
      $170 = $169 | 2;
      HEAP32[$4>>2] = $170;
     }
     $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
     STACKTOP = sp;return ($$sroa$0$0$copyload|0);
    }
   } while(0);
   $88 = ___cxa_find_matching_catch_2()|0;
   $89 = tempRet0;
   $$sink$index = $88;$$sink$index3 = $89;
  }
  $$1 = $$sink$index;$$127 = $$sink$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i30 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i36 = 0, $$0$i$i55 = 0, $$024 = 0, $$1 = 0, $$125 = 0, $$127 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i32 = 0, $$pre$i4$i$i = 0, $$sink$index = 0, $$sink$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i50 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $6 = sp + 200|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 if ($19) {
  $20 = ((($9)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __THREW__ = 0;
 invoke_viii(666,($9|0),($23|0),0);
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $84 = ___cxa_find_matching_catch_2()|0;
  $85 = tempRet0;
  $$1 = $84;$$127 = $85;
 } else {
  $26 = HEAP8[$17>>0]|0;
  $27 = ($26<<24>>24)<(0);
  $28 = HEAP32[$9>>2]|0;
  $29 = $27 ? $28 : $9;
  HEAP32[$10>>2] = $29;
  HEAP32[$12>>2] = $11;
  HEAP32[$13>>2] = 0;
  $30 = ((($9)) + 4|0);
  $31 = ((($9)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$024 = $29;$$pre$i$i$i32 = $$pre;
  L11: while(1) {
   $32 = ($$pre$i$i$i32|0)==(0|0);
   if ($32) {
    $$pre$i$i$i = 0;$166 = 1;
   } else {
    $33 = ((($$pre$i$i$i32)) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ((($$pre$i$i$i32)) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($34|0)==($36|0);
    if ($37) {
     $38 = HEAP32[$$pre$i$i$i32>>2]|0;
     $39 = ((($38)) + 36|0);
     $40 = HEAP32[$39>>2]|0;
     __THREW__ = 0;
     $41 = (invoke_ii($40|0,($$pre$i$i$i32|0))|0);
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      label = 29;
      break;
     } else {
      $$0$i$i$i$i30 = $41;
     }
    } else {
     $44 = HEAP32[$34>>2]|0;
     $$0$i$i$i$i30 = $44;
    }
    $45 = ($$0$i$i$i$i30|0)==(-1);
    if ($45) {
     HEAP32[$1>>2] = 0;
     $$pre$i$i$i = 0;$166 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i32;$166 = 0;
    }
   }
   $46 = HEAP32[$2>>2]|0;
   $47 = ($46|0)==(0|0);
   do {
    if ($47) {
     label = 20;
    } else {
     $48 = ((($46)) + 12|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ((($46)) + 16|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($49|0)==($51|0);
     if ($52) {
      $53 = HEAP32[$46>>2]|0;
      $54 = ((($53)) + 36|0);
      $55 = HEAP32[$54>>2]|0;
      __THREW__ = 0;
      $56 = (invoke_ii($55|0,($46|0))|0);
      $57 = __THREW__; __THREW__ = 0;
      $58 = $57&1;
      if ($58) {
       label = 29;
       break L11;
      } else {
       $$0$i$i2$i$i36 = $56;
      }
     } else {
      $59 = HEAP32[$49>>2]|0;
      $$0$i$i2$i$i36 = $59;
     }
     $60 = ($$0$i$i2$i$i36|0)==(-1);
     if ($60) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($166) {
       $167 = $46;
       break;
      } else {
       $$2 = $$024;$$pre$i4$i$i = $46;
       label = 39;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($166) {
     $$2 = $$024;$$pre$i4$i$i = 0;
     label = 39;
     break;
    } else {
     $167 = 0;
    }
   }
   $61 = HEAP32[$10>>2]|0;
   $62 = HEAP8[$17>>0]|0;
   $63 = ($62<<24>>24)<(0);
   $64 = HEAP32[$30>>2]|0;
   $65 = $62&255;
   $66 = $63 ? $64 : $65;
   $67 = (($$024) + ($66)|0);
   $68 = ($61|0)==($67|0);
   if ($68) {
    $69 = $66 << 1;
    __THREW__ = 0;
    invoke_viii(666,($9|0),($69|0),0);
    $70 = __THREW__; __THREW__ = 0;
    $71 = $70&1;
    if ($71) {
     label = 31;
     break;
    }
    $72 = HEAP8[$17>>0]|0;
    $73 = ($72<<24>>24)<(0);
    if ($73) {
     $74 = HEAP32[$31>>2]|0;
     $75 = $74 & 2147483647;
     $phitmp$i50 = (($75) + -1)|0;
     $76 = $phitmp$i50;
    } else {
     $76 = 10;
    }
    __THREW__ = 0;
    invoke_viii(666,($9|0),($76|0),0);
    $77 = __THREW__; __THREW__ = 0;
    $78 = $77&1;
    if ($78) {
     label = 31;
     break;
    }
    $79 = HEAP8[$17>>0]|0;
    $80 = ($79<<24>>24)<(0);
    $81 = HEAP32[$9>>2]|0;
    $82 = $80 ? $81 : $9;
    $83 = (($82) + ($66)|0);
    HEAP32[$10>>2] = $83;
    $$125 = $82;
   } else {
    $$125 = $$024;
   }
   $92 = ((($$pre$i$i$i)) + 12|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ((($$pre$i$i$i)) + 16|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = ($93|0)==($95|0);
   if ($96) {
    $97 = HEAP32[$$pre$i$i$i>>2]|0;
    $98 = ((($97)) + 36|0);
    $99 = HEAP32[$98>>2]|0;
    __THREW__ = 0;
    $100 = (invoke_ii($99|0,($$pre$i$i$i|0))|0);
    $101 = __THREW__; __THREW__ = 0;
    $102 = $101&1;
    if ($102) {
     label = 29;
     break;
    } else {
     $$0$i$i55 = $100;
    }
   } else {
    $103 = HEAP32[$93>>2]|0;
    $$0$i$i55 = $103;
   }
   $104 = HEAP32[$7>>2]|0;
   $105 = (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i55,$14,$$125,$10,$13,$104,$8,$11,$12,$6)|0);
   $106 = ($105|0)==(0);
   if (!($106)) {
    $$2 = $$125;$$pre$i4$i$i = $167;
    label = 39;
    break;
   }
   $107 = HEAP32[$92>>2]|0;
   $108 = HEAP32[$94>>2]|0;
   $109 = ($107|0)==($108|0);
   if ($109) {
    $110 = HEAP32[$$pre$i$i$i>>2]|0;
    $111 = ((($110)) + 40|0);
    $112 = HEAP32[$111>>2]|0;
    __THREW__ = 0;
    (invoke_ii($112|0,($$pre$i$i$i|0))|0);
    $113 = __THREW__; __THREW__ = 0;
    $114 = $113&1;
    if ($114) {
     label = 29;
     break;
    } else {
     $$024 = $$125;$$pre$i$i$i32 = $$pre$i$i$i;
     continue;
    }
   } else {
    $115 = ((($107)) + 4|0);
    HEAP32[$92>>2] = $115;
    $$024 = $$125;$$pre$i$i$i32 = $$pre$i$i$i;
    continue;
   }
  }
  if ((label|0) == 29) {
   $86 = ___cxa_find_matching_catch_2()|0;
   $87 = tempRet0;
   $$sink$index = $86;$$sink$index3 = $87;
  }
  else if ((label|0) == 31) {
   $90 = ___cxa_find_matching_catch_2()|0;
   $91 = tempRet0;
   $$sink$index = $90;$$sink$index3 = $91;
  }
  else if ((label|0) == 39) {
   $116 = ((($8)) + 11|0);
   $117 = HEAP8[$116>>0]|0;
   $118 = ($117<<24>>24)<(0);
   $119 = ((($8)) + 4|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = $117&255;
   $122 = $118 ? $120 : $121;
   $123 = ($122|0)==(0);
   if (!($123)) {
    $124 = HEAP32[$12>>2]|0;
    $125 = $124;
    $126 = $11;
    $127 = (($125) - ($126))|0;
    $128 = ($127|0)<(160);
    if ($128) {
     $129 = HEAP32[$13>>2]|0;
     $130 = ((($124)) + 4|0);
     HEAP32[$12>>2] = $130;
     HEAP32[$124>>2] = $129;
    }
   }
   $131 = HEAP32[$10>>2]|0;
   __THREW__ = 0;
   $132 = (invoke_iiiii(776,($$2|0),($131|0),($4|0),($14|0))|0);
   $133 = __THREW__; __THREW__ = 0;
   $134 = $133&1;
   L56: do {
    if (!($134)) {
     HEAP32[$5>>2] = $132;
     $135 = HEAP32[$12>>2]|0;
     __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$135,$4);
     $136 = ($$pre$i$i$i|0)==(0|0);
     if ($136) {
      $168 = 1;
     } else {
      $137 = ((($$pre$i$i$i)) + 12|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ((($$pre$i$i$i)) + 16|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ($138|0)==($140|0);
      if ($141) {
       $142 = HEAP32[$$pre$i$i$i>>2]|0;
       $143 = ((($142)) + 36|0);
       $144 = HEAP32[$143>>2]|0;
       __THREW__ = 0;
       $145 = (invoke_ii($144|0,($$pre$i$i$i|0))|0);
       $146 = __THREW__; __THREW__ = 0;
       $147 = $146&1;
       if ($147) {
        break;
       } else {
        $$0$i$i$i$i = $145;
       }
      } else {
       $148 = HEAP32[$138>>2]|0;
       $$0$i$i$i$i = $148;
      }
      $149 = ($$0$i$i$i$i|0)==(-1);
      if ($149) {
       HEAP32[$1>>2] = 0;
       $168 = 1;
      } else {
       $168 = 0;
      }
     }
     $150 = ($$pre$i4$i$i|0)==(0|0);
     do {
      if ($150) {
       label = 55;
      } else {
       $151 = ((($$pre$i4$i$i)) + 12|0);
       $152 = HEAP32[$151>>2]|0;
       $153 = ((($$pre$i4$i$i)) + 16|0);
       $154 = HEAP32[$153>>2]|0;
       $155 = ($152|0)==($154|0);
       if ($155) {
        $156 = HEAP32[$$pre$i4$i$i>>2]|0;
        $157 = ((($156)) + 36|0);
        $158 = HEAP32[$157>>2]|0;
        __THREW__ = 0;
        $159 = (invoke_ii($158|0,($$pre$i4$i$i|0))|0);
        $160 = __THREW__; __THREW__ = 0;
        $161 = $160&1;
        if ($161) {
         break L56;
        } else {
         $$0$i$i2$i$i = $159;
        }
       } else {
        $162 = HEAP32[$152>>2]|0;
        $$0$i$i2$i$i = $162;
       }
       $163 = ($$0$i$i2$i$i|0)==(-1);
       if ($163) {
        HEAP32[$2>>2] = 0;
        label = 55;
        break;
       } else {
        if ($168) {
         break;
        } else {
         label = 57;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 55) {
      if ($168) {
       label = 57;
      }
     }
     if ((label|0) == 57) {
      $164 = HEAP32[$4>>2]|0;
      $165 = $164 | 2;
      HEAP32[$4>>2] = $165;
     }
     $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
     STACKTOP = sp;return ($$sroa$0$0$copyload|0);
    }
   } while(0);
   $88 = ___cxa_find_matching_catch_2()|0;
   $89 = tempRet0;
   $$sink$index = $88;$$sink$index3 = $89;
  }
  $$1 = $$sink$index;$$127 = $$sink$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i138 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i144 = 0, $$0103 = 0, $$0104 = 0, $$0105$off0 = 0, $$0106 = 0, $$0107 = 0, $$0108 = 0, $$0109 = 0, $$0112 = 0, $$0116 = 0, $$0132 = 0, $$0133 = 0, $$0133191 = 0, $$1110 = 0, $$1113 = 0;
 var $$1117 = 0, $$2$off0 = 0, $$2111 = 0, $$2114 = 0, $$2118 = 0, $$3 = 0, $$3115 = 0, $$3119 = 0, $$5 = 0, $$5121 = 0, $$6 = 0, $$7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i140 = 0, $$pre$i4$i$i146 = 0, $$sink$sink$sink$sink$sink$index = 0, $$sink$sink$sink$sink$sink$index5 = 0, $$sink$sink$sink$sink$sink199$index = 0, $$sink$sink$sink$sink$sink199$index14 = 0, $$sroa$0160$0 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i141 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $7 = sp;
 $8 = $3;
 $9 = $2;
 $10 = (($8) - ($9))|0;
 $11 = (($10|0) / 12)&-1;
 $12 = ($11>>>0)>(100);
 do {
  if ($12) {
   $13 = (_malloc($11)|0);
   $14 = ($13|0)==(0|0);
   if ($14) {
    __THREW__ = 0;
    invoke_v(777);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if ($16) {
     $17 = ___cxa_find_matching_catch_2()|0;
     $18 = tempRet0;
     $$sink$sink$sink$sink$sink199$index = $17;$$sink$sink$sink$sink$sink199$index14 = $18;
     break;
    }
   }
   $19 = $13;
   $$0132 = $13;$$sroa$0160$0 = $19;
   label = 6;
  } else {
   $$0132 = $7;$$sroa$0160$0 = 0;
   label = 6;
  }
 } while(0);
 if ((label|0) == 6) {
  $$0108 = $2;$$0109 = $$0132;$$0112 = 0;$$0116 = $11;
  while(1) {
   $20 = ($$0108|0)==($3|0);
   if ($20) {
    break;
   }
   $21 = ((($$0108)) + 8|0);
   $22 = ((($21)) + 3|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = ($23<<24>>24)<(0);
   if ($24) {
    $25 = ((($$0108)) + 4|0);
    $26 = HEAP32[$25>>2]|0;
    $28 = $26;
   } else {
    $27 = $23&255;
    $28 = $27;
   }
   $29 = ($28|0)==(0);
   if ($29) {
    HEAP8[$$0109>>0] = 2;
    $30 = (($$0116) + -1)|0;
    $31 = (($$0112) + 1)|0;
    $$1113 = $31;$$1117 = $30;
   } else {
    HEAP8[$$0109>>0] = 1;
    $$1113 = $$0112;$$1117 = $$0116;
   }
   $32 = ((($$0108)) + 12|0);
   $33 = ((($$0109)) + 1|0);
   $$0108 = $32;$$0109 = $33;$$0112 = $$1113;$$0116 = $$1117;
  }
  $$0107 = 0;$$2114 = $$0112;$$2118 = $$0116;
  L21: while(1) {
   $34 = HEAP32[$0>>2]|0;
   $35 = ($34|0)==(0|0);
   do {
    if ($35) {
     $65 = 1;
    } else {
     $36 = ((($34)) + 12|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ((($34)) + 16|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($37|0)==($39|0);
     if ($40) {
      $41 = HEAP32[$34>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($34|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 43;
       break L21;
      } else {
       $$0$i$i$i$i = $44;
      }
     } else {
      $47 = HEAP32[$37>>2]|0;
      $$0$i$i$i$i = $47;
     }
     $48 = ($$0$i$i$i$i|0)==(-1);
     if ($48) {
      HEAP32[$0>>2] = 0;
      $65 = 1;
      break;
     } else {
      $$pre$i$i$i = HEAP32[$0>>2]|0;
      $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
      $65 = $phitmp$i$i$i;
      break;
     }
    }
   } while(0);
   $49 = HEAP32[$1>>2]|0;
   $50 = ($49|0)==(0|0);
   if ($50) {
    $$pre$i4$i$i146 = 0;$64 = 1;
   } else {
    $51 = ((($49)) + 12|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ((($49)) + 16|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ($52|0)==($54|0);
    if ($55) {
     $56 = HEAP32[$49>>2]|0;
     $57 = ((($56)) + 36|0);
     $58 = HEAP32[$57>>2]|0;
     __THREW__ = 0;
     $59 = (invoke_ii($58|0,($49|0))|0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 43;
      break;
     } else {
      $$0$i$i2$i$i = $59;
     }
    } else {
     $62 = HEAP32[$52>>2]|0;
     $$0$i$i2$i$i = $62;
    }
    $63 = ($$0$i$i2$i$i|0)==(-1);
    if ($63) {
     HEAP32[$1>>2] = 0;
     $$pre$i4$i$i146 = 0;$64 = 1;
    } else {
     $$pre$i4$i$i146 = $49;$64 = 0;
    }
   }
   $tmp$i$i = $65 ^ $64;
   $66 = ($$2118|0)!=(0);
   $67 = $66 & $tmp$i$i;
   $68 = HEAP32[$0>>2]|0;
   if (!($67)) {
    label = 30;
    break;
   }
   $99 = ((($68)) + 12|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ((($68)) + 16|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = ($100|0)==($102|0);
   if ($103) {
    $104 = HEAP32[$68>>2]|0;
    $105 = ((($104)) + 36|0);
    $106 = HEAP32[$105>>2]|0;
    __THREW__ = 0;
    $107 = (invoke_ii($106|0,($68|0))|0);
    $108 = __THREW__; __THREW__ = 0;
    $109 = $108&1;
    if ($109) {
     label = 43;
     break;
    } else {
     $$0$i$i = $107;
    }
   } else {
    $110 = HEAP32[$100>>2]|0;
    $$0$i$i = $110;
   }
   if ($6) {
    $$0106 = $$0$i$i;
   } else {
    $111 = HEAP32[$4>>2]|0;
    $112 = ((($111)) + 28|0);
    $113 = HEAP32[$112>>2]|0;
    __THREW__ = 0;
    $114 = (invoke_iii($113|0,($4|0),($$0$i$i|0))|0);
    $115 = __THREW__; __THREW__ = 0;
    $116 = $115&1;
    if ($116) {
     label = 49;
     break;
    } else {
     $$0106 = $114;
    }
   }
   $119 = (($$0107) + 1)|0;
   $$0104 = $2;$$0105$off0 = 0;$$1110 = $$0132;$$3115 = $$2114;$$3119 = $$2118;
   while(1) {
    $120 = ($$0104|0)==($3|0);
    if ($120) {
     break;
    }
    $121 = HEAP8[$$1110>>0]|0;
    $122 = ($121<<24>>24)==(1);
    do {
     if ($122) {
      $123 = ((($$0104)) + 8|0);
      $124 = ((($123)) + 3|0);
      $125 = HEAP8[$124>>0]|0;
      $126 = ($125<<24>>24)<(0);
      if ($126) {
       $127 = HEAP32[$$0104>>2]|0;
       $129 = $127;
      } else {
       $129 = $$0104;
      }
      $128 = (($129) + ($$0107<<2)|0);
      $130 = HEAP32[$128>>2]|0;
      if ($6) {
       $$0103 = $130;
      } else {
       $131 = HEAP32[$4>>2]|0;
       $132 = ((($131)) + 28|0);
       $133 = HEAP32[$132>>2]|0;
       __THREW__ = 0;
       $134 = (invoke_iii($133|0,($4|0),($130|0))|0);
       $135 = __THREW__; __THREW__ = 0;
       $136 = $135&1;
       if ($136) {
        label = 59;
        break L21;
       } else {
        $$0103 = $134;
       }
      }
      $139 = ($$0106|0)==($$0103|0);
      if (!($139)) {
       HEAP8[$$1110>>0] = 0;
       $149 = (($$3119) + -1)|0;
       $$2$off0 = $$0105$off0;$$5 = $$3115;$$5121 = $149;
       break;
      }
      $140 = HEAP8[$124>>0]|0;
      $141 = ($140<<24>>24)<(0);
      if ($141) {
       $142 = ((($$0104)) + 4|0);
       $143 = HEAP32[$142>>2]|0;
       $145 = $143;
      } else {
       $144 = $140&255;
       $145 = $144;
      }
      $146 = ($145|0)==($119|0);
      if ($146) {
       $147 = (($$3119) + -1)|0;
       $148 = (($$3115) + 1)|0;
       HEAP8[$$1110>>0] = 2;
       $$2$off0 = 1;$$5 = $148;$$5121 = $147;
      } else {
       $$2$off0 = 1;$$5 = $$3115;$$5121 = $$3119;
      }
     } else {
      $$2$off0 = $$0105$off0;$$5 = $$3115;$$5121 = $$3119;
     }
    } while(0);
    $150 = ((($$0104)) + 12|0);
    $151 = ((($$1110)) + 1|0);
    $$0104 = $150;$$0105$off0 = $$2$off0;$$1110 = $151;$$3115 = $$5;$$3119 = $$5121;
   }
   if (!($$0105$off0)) {
    $$0107 = $119;$$2114 = $$3115;$$2118 = $$3119;
    continue;
   }
   $152 = HEAP32[$0>>2]|0;
   $153 = ((($152)) + 12|0);
   $154 = HEAP32[$153>>2]|0;
   $155 = ((($152)) + 16|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = ($154|0)==($156|0);
   if ($157) {
    $158 = HEAP32[$152>>2]|0;
    $159 = ((($158)) + 40|0);
    $160 = HEAP32[$159>>2]|0;
    __THREW__ = 0;
    (invoke_ii($160|0,($152|0))|0);
    $161 = __THREW__; __THREW__ = 0;
    $162 = $161&1;
    if ($162) {
     label = 73;
     break;
    }
   } else {
    $163 = ((($154)) + 4|0);
    HEAP32[$153>>2] = $163;
   }
   $164 = (($$3115) + ($$3119))|0;
   $165 = ($164>>>0)>(1);
   if ($165) {
    $$0 = $2;$$2111 = $$0132;$$6 = $$3115;
   } else {
    $$0107 = $119;$$2114 = $$3115;$$2118 = $$3119;
    continue;
   }
   while(1) {
    $166 = ($$0|0)==($3|0);
    if ($166) {
     $$0107 = $119;$$2114 = $$6;$$2118 = $$3119;
     continue L21;
    }
    $169 = HEAP8[$$2111>>0]|0;
    $170 = ($169<<24>>24)==(2);
    if ($170) {
     $171 = ((($$0)) + 8|0);
     $172 = ((($171)) + 3|0);
     $173 = HEAP8[$172>>0]|0;
     $174 = ($173<<24>>24)<(0);
     if ($174) {
      $175 = ((($$0)) + 4|0);
      $176 = HEAP32[$175>>2]|0;
      $178 = $176;
     } else {
      $177 = $173&255;
      $178 = $177;
     }
     $179 = ($178|0)==($119|0);
     if ($179) {
      $$7 = $$6;
     } else {
      $180 = (($$6) + -1)|0;
      HEAP8[$$2111>>0] = 0;
      $$7 = $180;
     }
    } else {
     $$7 = $$6;
    }
    $181 = ((($$0)) + 12|0);
    $182 = ((($$2111)) + 1|0);
    $$0 = $181;$$2111 = $182;$$6 = $$7;
   }
  }
  if ((label|0) == 30) {
   $69 = ($68|0)==(0|0);
   do {
    if ($69) {
     $198 = 1;
     label = 37;
    } else {
     $70 = ((($68)) + 12|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($68)) + 16|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($71|0)==($73|0);
     if ($74) {
      $75 = HEAP32[$68>>2]|0;
      $76 = ((($75)) + 36|0);
      $77 = HEAP32[$76>>2]|0;
      __THREW__ = 0;
      $78 = (invoke_ii($77|0,($68|0))|0);
      $79 = __THREW__; __THREW__ = 0;
      $80 = $79&1;
      if ($80) {
       break;
      } else {
       $$0$i$i$i$i138 = $78;
      }
     } else {
      $81 = HEAP32[$71>>2]|0;
      $$0$i$i$i$i138 = $81;
     }
     $82 = ($$0$i$i$i$i138|0)==(-1);
     if ($82) {
      HEAP32[$0>>2] = 0;
      $198 = 1;
      label = 37;
      break;
     } else {
      $$pre$i$i$i140 = HEAP32[$0>>2]|0;
      $phitmp$i$i$i141 = ($$pre$i$i$i140|0)==(0|0);
      $198 = $phitmp$i$i$i141;
      label = 37;
      break;
     }
    }
   } while(0);
   L102: do {
    if ((label|0) == 37) {
     $83 = ($$pre$i4$i$i146|0)==(0|0);
     do {
      if ($83) {
       label = 81;
      } else {
       $84 = ((($$pre$i4$i$i146)) + 12|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = ((($$pre$i4$i$i146)) + 16|0);
       $87 = HEAP32[$86>>2]|0;
       $88 = ($85|0)==($87|0);
       if ($88) {
        $89 = HEAP32[$$pre$i4$i$i146>>2]|0;
        $90 = ((($89)) + 36|0);
        $91 = HEAP32[$90>>2]|0;
        __THREW__ = 0;
        $92 = (invoke_ii($91|0,($$pre$i4$i$i146|0))|0);
        $93 = __THREW__; __THREW__ = 0;
        $94 = $93&1;
        if ($94) {
         break L102;
        } else {
         $$0$i$i2$i$i144 = $92;
        }
       } else {
        $95 = HEAP32[$85>>2]|0;
        $$0$i$i2$i$i144 = $95;
       }
       $96 = ($$0$i$i2$i$i144|0)==(-1);
       if ($96) {
        HEAP32[$1>>2] = 0;
        label = 81;
        break;
       } else {
        if ($198) {
         $$0133 = $2;$$3 = $$0132;
         break;
        } else {
         label = 83;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 81) {
      if ($198) {
       label = 83;
      } else {
       $$0133 = $2;$$3 = $$0132;
      }
     }
     if ((label|0) == 83) {
      $183 = HEAP32[$5>>2]|0;
      $184 = $183 | 2;
      HEAP32[$5>>2] = $184;
      $$0133 = $2;$$3 = $$0132;
     }
     while(1) {
      $187 = ($$0133|0)==($3|0);
      if ($187) {
       label = 88;
       break;
      }
      $188 = HEAP8[$$3>>0]|0;
      $189 = ($188<<24>>24)==(2);
      if ($189) {
       $$0133191 = $$0133;
       break;
      }
      $190 = ((($$0133)) + 12|0);
      $191 = ((($$3)) + 1|0);
      $$0133 = $190;$$3 = $191;
     }
     if ((label|0) == 88) {
      $192 = HEAP32[$5>>2]|0;
      $193 = $192 | 4;
      HEAP32[$5>>2] = $193;
      $$0133191 = $3;
     }
     $194 = ($$sroa$0160$0|0)==(0);
     if (!($194)) {
      $195 = $$sroa$0160$0;
      _free($195);
     }
     STACKTOP = sp;return ($$0133191|0);
    }
   } while(0);
   $185 = ___cxa_find_matching_catch_2()|0;
   $186 = tempRet0;
   $$sink$sink$sink$sink$sink$index = $185;$$sink$sink$sink$sink$sink$index5 = $186;
  }
  else if ((label|0) == 43) {
   $97 = ___cxa_find_matching_catch_2()|0;
   $98 = tempRet0;
   $$sink$sink$sink$sink$sink$index = $97;$$sink$sink$sink$sink$sink$index5 = $98;
  }
  else if ((label|0) == 49) {
   $117 = ___cxa_find_matching_catch_2()|0;
   $118 = tempRet0;
   $$sink$sink$sink$sink$sink$index = $117;$$sink$sink$sink$sink$sink$index5 = $118;
  }
  else if ((label|0) == 59) {
   $137 = ___cxa_find_matching_catch_2()|0;
   $138 = tempRet0;
   $$sink$sink$sink$sink$sink$index = $137;$$sink$sink$sink$sink$sink$index5 = $138;
  }
  else if ((label|0) == 73) {
   $167 = ___cxa_find_matching_catch_2()|0;
   $168 = tempRet0;
   $$sink$sink$sink$sink$sink$index = $167;$$sink$sink$sink$sink$sink$index5 = $168;
  }
  $196 = ($$sroa$0160$0|0)==(0);
  if ($196) {
   $$sink$sink$sink$sink$sink199$index = $$sink$sink$sink$sink$sink$index;$$sink$sink$sink$sink$sink199$index14 = $$sink$sink$sink$sink$sink$index5;
  } else {
   $197 = $$sroa$0160$0;
   _free($197);
   $$sink$sink$sink$sink$sink199$index = $$sink$sink$sink$sink$sink$index;$$sink$sink$sink$sink$sink199$index14 = $$sink$sink$sink$sink$sink$index5;
  }
 }
 ___resumeException($$sink$sink$sink$sink$sink199$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$011 = 0, $$byval_copy = 0, $$pr = 0, $$pr$pre = 0, $$sroa$0$0 = 0, $$sroa$0$0$copyload = 0, $$sroa$014$0 = 0, $$sroa$014$0$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 20|0;
 $5 = sp + 16|0;
 $6 = sp + 12|0;
 $7 = sp;
 $8 = ((($2)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 1;
 $11 = ($10|0)==(0);
 L1: do {
  if ($11) {
   $12 = HEAP32[$0>>2]|0;
   $13 = ((($12)) + 24|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = HEAP32[$1>>2]|0;
   HEAP32[$5>>2] = $15;
   $16 = $4&1;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$5>>2]|0;
   $17 = (FUNCTION_TABLE_iiiiii[$14 & 1023]($0,$$byval_copy,$2,$3,$16)|0);
   $$sroa$0$0 = $17;
  } else {
   $18 = (__ZNKSt3__28ios_base6getlocEv($2)|0);
   HEAP32[$6>>2] = $18;
   __THREW__ = 0;
   $19 = (invoke_iii(659,($6|0),(40728|0))|0);
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   do {
    if ($21) {
     $41 = ___cxa_find_matching_catch_2()|0;
     $42 = tempRet0;
     (__ZNSt3__214__shared_count16__release_sharedEv($18)|0);
     $$0 = $42;$$011 = $41;
    } else {
     (__ZNSt3__214__shared_count16__release_sharedEv($18)|0);
     $22 = HEAP32[$19>>2]|0;
     if ($4) {
      $23 = ((($22)) + 24|0);
      $24 = HEAP32[$23>>2]|0;
      FUNCTION_TABLE_vii[$24 & 1023]($7,$19);
     } else {
      $25 = ((($22)) + 28|0);
      $26 = HEAP32[$25>>2]|0;
      FUNCTION_TABLE_vii[$26 & 1023]($7,$19);
     }
     $27 = ((($7)) + 11|0);
     $28 = HEAP8[$27>>0]|0;
     $29 = ($28<<24>>24)<(0);
     if ($29) {
      $30 = HEAP32[$7>>2]|0;
      $$pr = $28;$$sroa$014$0$ph = $30;
      label = 9;
     } else {
      $$sroa$014$0 = $7;$31 = $28;
     }
     L13: while(1) {
      if ((label|0) == 9) {
       label = 0;
       $$sroa$014$0 = $$sroa$014$0$ph;$31 = $$pr;
      }
      $32 = ($31<<24>>24)<(0);
      $33 = HEAP32[$7>>2]|0;
      $34 = ((($7)) + 4|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = $31&255;
      $37 = $32 ? $33 : $7;
      $38 = $32 ? $35 : $36;
      $39 = (($37) + ($38)|0);
      $40 = ($$sroa$014$0|0)==($39|0);
      if ($40) {
       label = 11;
       break;
      }
      $43 = HEAP8[$$sroa$014$0>>0]|0;
      $44 = HEAP32[$1>>2]|0;
      $45 = ($44|0)==(0|0);
      do {
       if (!($45)) {
        $46 = ((($44)) + 24|0);
        $47 = HEAP32[$46>>2]|0;
        $48 = ((($44)) + 28|0);
        $49 = HEAP32[$48>>2]|0;
        $50 = ($47|0)==($49|0);
        if (!($50)) {
         $51 = ((($47)) + 1|0);
         HEAP32[$46>>2] = $51;
         HEAP8[$47>>0] = $43;
         break;
        }
        $52 = HEAP32[$44>>2]|0;
        $53 = ((($52)) + 52|0);
        $54 = HEAP32[$53>>2]|0;
        $55 = $43&255;
        __THREW__ = 0;
        $56 = (invoke_iii($54|0,($44|0),($55|0))|0);
        $57 = __THREW__; __THREW__ = 0;
        $58 = $57&1;
        if ($58) {
         label = 20;
         break L13;
        }
        $59 = ($56|0)==(-1);
        if ($59) {
         HEAP32[$1>>2] = 0;
        }
       }
      } while(0);
      $60 = ((($$sroa$014$0)) + 1|0);
      $$pr$pre = HEAP8[$27>>0]|0;
      $$pr = $$pr$pre;$$sroa$014$0$ph = $60;
      label = 9;
     }
     if ((label|0) == 11) {
      $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
      $$sroa$0$0 = $$sroa$0$0$copyload;
      break L1;
     }
     else if ((label|0) == 20) {
      $61 = ___cxa_find_matching_catch_2()|0;
      $62 = tempRet0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
      $$0 = $62;$$011 = $61;
      break;
     }
    }
   } while(0);
   ___resumeException($$011|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$0$0|0);
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $5 = sp + 60|0;
 $6 = sp + 47|0;
 $7 = sp + 24|0;
 $8 = sp + 16|0;
 $9 = sp + 12|0;
 $10 = sp + 8|0;
 $11 = sp + 4|0;
 ;HEAP8[$5>>0]=HEAP8[32880>>0]|0;HEAP8[$5+1>>0]=HEAP8[32880+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[32880+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[32880+3>>0]|0;HEAP8[$5+4>>0]=HEAP8[32880+4>>0]|0;HEAP8[$5+5>>0]=HEAP8[32880+5>>0]|0;
 $12 = ((($5)) + 1|0);
 $13 = ((($2)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($12,32886,1,$14);
 $15 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $4;
 $16 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,13,$15,$5,$vararg_buffer)|0);
 $17 = (($6) + ($16)|0);
 $18 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($6,$17,$2)|0);
 $19 = (__ZNKSt3__28ios_base6getlocEv($2)|0);
 HEAP32[$10>>2] = $19;
 __THREW__ = 0;
 invoke_viiiiiii(779,($6|0),($18|0),($17|0),($7|0),($8|0),($9|0),($10|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $27 = ___cxa_find_matching_catch_2()|0;
  $28 = tempRet0;
  $29 = HEAP32[$10>>2]|0;
  (__ZNSt3__214__shared_count16__release_sharedEv($29)|0);
  ___resumeException($27|0);
  // unreachable;
 } else {
  $22 = HEAP32[$10>>2]|0;
  (__ZNSt3__214__shared_count16__release_sharedEv($22)|0);
  $23 = HEAP32[$1>>2]|0;
  HEAP32[$11>>2] = $23;
  $24 = HEAP32[$8>>2]|0;
  $25 = HEAP32[$9>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$11>>2]|0;
  $26 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$7,$24,$25,$2,$3)|0);
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $6 = sp;
 $7 = sp + 79|0;
 $8 = sp + 36|0;
 $9 = sp + 28|0;
 $10 = sp + 24|0;
 $11 = sp + 20|0;
 $12 = sp + 16|0;
 $13 = $6;
 $14 = $13;
 HEAP32[$14>>2] = 37;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = 0;
 $17 = ((($6)) + 1|0);
 $18 = ((($2)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($17,32877,1,$19);
 $20 = (__ZNSt3__26__clocEv()|0);
 $21 = $vararg_buffer;
 $22 = $21;
 HEAP32[$22>>2] = $4;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $5;
 $25 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($7,23,$20,$6,$vararg_buffer)|0);
 $26 = (($7) + ($25)|0);
 $27 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($7,$26,$2)|0);
 $28 = (__ZNKSt3__28ios_base6getlocEv($2)|0);
 HEAP32[$11>>2] = $28;
 __THREW__ = 0;
 invoke_viiiiiii(779,($7|0),($27|0),($26|0),($8|0),($9|0),($10|0),($11|0));
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 if ($30) {
  $36 = ___cxa_find_matching_catch_2()|0;
  $37 = tempRet0;
  $38 = HEAP32[$11>>2]|0;
  (__ZNSt3__214__shared_count16__release_sharedEv($38)|0);
  ___resumeException($36|0);
  // unreachable;
 } else {
  $31 = HEAP32[$11>>2]|0;
  (__ZNSt3__214__shared_count16__release_sharedEv($31)|0);
  $32 = HEAP32[$1>>2]|0;
  HEAP32[$12>>2] = $32;
  $33 = HEAP32[$9>>2]|0;
  $34 = HEAP32[$10>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
  $35 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$8,$33,$34,$2,$3)|0);
  STACKTOP = sp;return ($35|0);
 }
 return (0)|0;
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $5 = sp + 60|0;
 $6 = sp + 48|0;
 $7 = sp + 24|0;
 $8 = sp + 16|0;
 $9 = sp + 12|0;
 $10 = sp + 8|0;
 $11 = sp + 4|0;
 ;HEAP8[$5>>0]=HEAP8[32880>>0]|0;HEAP8[$5+1>>0]=HEAP8[32880+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[32880+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[32880+3>>0]|0;HEAP8[$5+4>>0]=HEAP8[32880+4>>0]|0;HEAP8[$5+5>>0]=HEAP8[32880+5>>0]|0;
 $12 = ((($5)) + 1|0);
 $13 = ((($2)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($12,32886,0,$14);
 $15 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $4;
 $16 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,12,$15,$5,$vararg_buffer)|0);
 $17 = (($6) + ($16)|0);
 $18 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($6,$17,$2)|0);
 $19 = (__ZNKSt3__28ios_base6getlocEv($2)|0);
 HEAP32[$10>>2] = $19;
 __THREW__ = 0;
 invoke_viiiiiii(779,($6|0),($18|0),($17|0),($7|0),($8|0),($9|0),($10|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $27 = ___cxa_find_matching_catch_2()|0;
  $28 = tempRet0;
  $29 = HEAP32[$10>>2]|0;
  (__ZNSt3__214__shared_count16__release_sharedEv($29)|0);
  ___resumeException($27|0);
  // unreachable;
 } else {
  $22 = HEAP32[$10>>2]|0;
  (__ZNSt3__214__shared_count16__release_sharedEv($22)|0);
  $23 = HEAP32[$1>>2]|0;
  HEAP32[$11>>2] = $23;
  $24 = HEAP32[$8>>2]|0;
  $25 = HEAP32[$9>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$11>>2]|0;
  $26 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$7,$24,$25,$2,$3)|0);
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $6 = sp;
 $7 = sp + 79|0;
 $8 = sp + 36|0;
 $9 = sp + 28|0;
 $10 = sp + 24|0;
 $11 = sp + 20|0;
 $12 = sp + 16|0;
 $13 = $6;
 $14 = $13;
 HEAP32[$14>>2] = 37;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = 0;
 $17 = ((($6)) + 1|0);
 $18 = ((($2)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($17,32877,0,$19);
 $20 = (__ZNSt3__26__clocEv()|0);
 $21 = $vararg_buffer;
 $22 = $21;
 HEAP32[$22>>2] = $4;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $5;
 $25 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($7,23,$20,$6,$vararg_buffer)|0);
 $26 = (($7) + ($25)|0);
 $27 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($7,$26,$2)|0);
 $28 = (__ZNKSt3__28ios_base6getlocEv($2)|0);
 HEAP32[$11>>2] = $28;
 __THREW__ = 0;
 invoke_viiiiiii(779,($7|0),($27|0),($26|0),($8|0),($9|0),($10|0),($11|0));
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 if ($30) {
  $36 = ___cxa_find_matching_catch_2()|0;
  $37 = tempRet0;
  $38 = HEAP32[$11>>2]|0;
  (__ZNSt3__214__shared_count16__release_sharedEv($38)|0);
  ___resumeException($36|0);
  // unreachable;
 } else {
  $31 = HEAP32[$11>>2]|0;
  (__ZNSt3__214__shared_count16__release_sharedEv($31)|0);
  $32 = HEAP32[$1>>2]|0;
  HEAP32[$12>>2] = $32;
  $33 = HEAP32[$9>>2]|0;
  $34 = HEAP32[$10>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
  $35 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$8,$33,$34,$2,$3)|0);
  STACKTOP = sp;return ($35|0);
 }
 return (0)|0;
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $$0 = 0, $$046 = 0, $$047 = 0, $$050 = 0, $$1 = 0, $$148 = 0, $$151 = 0, $$2 = 0, $$24989 = 0, $$25288 = 0, $$45491 = 0, $$492 = 0, $$byval_copy = 0, $$pre = 0, $$pre81 = 0, $$pre82 = 0, $$pre82$pre = 0, $$pre8284 = 0, $$sroa$060$0 = 0, $$sroa$071$0 = 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $$byval_copy = sp + 76|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $5 = sp;
 $6 = sp + 138|0;
 $7 = sp + 72|0;
 $8 = sp + 80|0;
 $9 = sp + 68|0;
 $10 = sp + 64|0;
 $11 = sp + 60|0;
 $12 = sp + 56|0;
 $13 = $5;
 $14 = $13;
 HEAP32[$14>>2] = 37;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = 0;
 $17 = ((($5)) + 1|0);
 $18 = ((($2)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (__ZNSt3__214__num_put_base14__format_floatEPcPKcj($17,44984,$19)|0);
 HEAP32[$7>>2] = $6;
 $21 = (__ZNSt3__26__clocEv()|0);
 if ($20) {
  $22 = ((($2)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  HEAP32[$vararg_buffer>>2] = $23;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $4;
  $24 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,30,$21,$5,$vararg_buffer)|0);
  $$0 = $24;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $4;
  $25 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,30,$21,$5,$vararg_buffer2)|0);
  $$0 = $25;
 }
 $26 = ($$0|0)>(29);
 do {
  if ($26) {
   if ($20) {
    __THREW__ = 0;
    $27 = (invoke_i(762)|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if (!($29)) {
     $30 = ((($2)) + 8|0);
     $31 = HEAP32[$30>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $31;
     $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
     HEAPF64[$vararg_ptr8>>3] = $4;
     $32 = (invoke_iiiii(780,($7|0),($27|0),($5|0),($vararg_buffer5|0))|0);
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if (!($34)) {
      $$1 = $32;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $37 = (invoke_i(762)|0);
    $38 = __THREW__; __THREW__ = 0;
    $39 = $38&1;
    if (!($39)) {
     __THREW__ = 0;
     HEAPF64[$vararg_buffer9>>3] = $4;
     $40 = (invoke_iiiii(780,($7|0),($37|0),($5|0),($vararg_buffer9|0))|0);
     $41 = __THREW__; __THREW__ = 0;
     $42 = $41&1;
     if (!($42)) {
      $$1 = $40;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $43 = HEAP32[$7>>2]|0;
    $44 = ($43|0)==(0|0);
    if (!($44)) {
     $45 = $43;
     $$2 = $$1;$$pre8284 = $43;$$sroa$071$0 = $45;
     label = 16;
     break;
    }
    __THREW__ = 0;
    invoke_v(777);
    $46 = __THREW__; __THREW__ = 0;
    $47 = $46&1;
    if (!($47)) {
     $$pre = HEAP32[$7>>2]|0;
     $48 = $$pre;
     $$2 = $$1;$$pre8284 = $48;$$sroa$071$0 = $$pre;
     label = 16;
     break;
    }
   }
   $35 = ___cxa_find_matching_catch_2()|0;
   $36 = tempRet0;
   $$45491 = $36;$$492 = $35;
  } else {
   $$pre81 = HEAP32[$7>>2]|0;
   $$2 = $$0;$$pre8284 = $$pre81;$$sroa$071$0 = 0;
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $49 = (($$pre8284) + ($$2)|0);
  $50 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($$pre8284,$49,$2)|0);
  $51 = ($$pre8284|0)==($6|0);
  L22: do {
   if ($51) {
    $$046 = $8;$$sroa$060$0 = 0;$63 = $6;
    label = 22;
   } else {
    $52 = $$2 << 1;
    $53 = (_malloc($52)|0);
    $54 = ($53|0)==(0|0);
    do {
     if ($54) {
      __THREW__ = 0;
      invoke_v(777);
      $55 = __THREW__; __THREW__ = 0;
      $56 = $55&1;
      if ($56) {
       $57 = ___cxa_find_matching_catch_2()|0;
       $58 = tempRet0;
       $$24989 = $57;$$25288 = $58;
       break L22;
      } else {
       $$pre82$pre = HEAP32[$7>>2]|0;
       $$pre82 = $$pre82$pre;
       break;
      }
     } else {
      $$pre82 = $$pre8284;
     }
    } while(0);
    $59 = $53;
    $$046 = $53;$$sroa$060$0 = $59;$63 = $$pre82;
    label = 22;
   }
  } while(0);
  if ((label|0) == 22) {
   __THREW__ = 0;
   $60 = (invoke_ii(658,($2|0))|0);
   $61 = __THREW__; __THREW__ = 0;
   $62 = $61&1;
   do {
    if ($62) {
     $77 = ___cxa_find_matching_catch_2()|0;
     $78 = tempRet0;
     $$047 = $77;$$050 = $78;
     label = 32;
    } else {
     HEAP32[$11>>2] = $60;
     __THREW__ = 0;
     invoke_viiiiiii(781,($63|0),($50|0),($49|0),($$046|0),($9|0),($10|0),($11|0));
     $64 = __THREW__; __THREW__ = 0;
     $65 = $64&1;
     if ($65) {
      $79 = ___cxa_find_matching_catch_2()|0;
      $80 = tempRet0;
      $81 = HEAP32[$11>>2]|0;
      (__ZNSt3__214__shared_count16__release_sharedEv($81)|0);
      $$047 = $79;$$050 = $80;
      label = 32;
      break;
     }
     $66 = HEAP32[$11>>2]|0;
     (__ZNSt3__214__shared_count16__release_sharedEv($66)|0);
     $67 = HEAP32[$1>>2]|0;
     HEAP32[$12>>2] = $67;
     $68 = HEAP32[$9>>2]|0;
     $69 = HEAP32[$10>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
     $70 = (invoke_iiiiiii(661,($$byval_copy|0),($$046|0),($68|0),($69|0),($2|0),($3|0))|0);
     $71 = __THREW__; __THREW__ = 0;
     $72 = $71&1;
     if ($72) {
      $82 = ___cxa_find_matching_catch_2()|0;
      $83 = tempRet0;
      $$148 = $82;$$151 = $83;
      break;
     }
     HEAP32[$1>>2] = $70;
     $73 = ($$sroa$060$0|0)==(0);
     if (!($73)) {
      $74 = $$sroa$060$0;
      _free($74);
     }
     $75 = ($$sroa$071$0|0)==(0);
     if (!($75)) {
      $76 = $$sroa$071$0;
      _free($76);
     }
     STACKTOP = sp;return ($70|0);
    }
   } while(0);
   if ((label|0) == 32) {
    $$148 = $$047;$$151 = $$050;
   }
   $84 = ($$sroa$060$0|0)==(0);
   if ($84) {
    $$24989 = $$148;$$25288 = $$151;
   } else {
    $85 = $$sroa$060$0;
    _free($85);
    $$24989 = $$148;$$25288 = $$151;
   }
  }
  $86 = ($$sroa$071$0|0)==(0);
  if ($86) {
   $$45491 = $$25288;$$492 = $$24989;
  } else {
   $87 = $$sroa$071$0;
   _free($87);
   $$45491 = $$25288;$$492 = $$24989;
  }
 }
 ___resumeException($$492|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $$0 = 0, $$046 = 0, $$047 = 0, $$050 = 0, $$1 = 0, $$148 = 0, $$151 = 0, $$2 = 0, $$24989 = 0, $$25288 = 0, $$45491 = 0, $$492 = 0, $$byval_copy = 0, $$pre = 0, $$pre81 = 0, $$pre82 = 0, $$pre82$pre = 0, $$pre8284 = 0, $$sroa$060$0 = 0, $$sroa$071$0 = 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $$byval_copy = sp + 76|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $5 = sp;
 $6 = sp + 138|0;
 $7 = sp + 72|0;
 $8 = sp + 80|0;
 $9 = sp + 68|0;
 $10 = sp + 64|0;
 $11 = sp + 60|0;
 $12 = sp + 56|0;
 $13 = $5;
 $14 = $13;
 HEAP32[$14>>2] = 37;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = 0;
 $17 = ((($5)) + 1|0);
 $18 = ((($2)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (__ZNSt3__214__num_put_base14__format_floatEPcPKcj($17,32875,$19)|0);
 HEAP32[$7>>2] = $6;
 $21 = (__ZNSt3__26__clocEv()|0);
 if ($20) {
  $22 = ((($2)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  HEAP32[$vararg_buffer>>2] = $23;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $4;
  $24 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,30,$21,$5,$vararg_buffer)|0);
  $$0 = $24;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $4;
  $25 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,30,$21,$5,$vararg_buffer2)|0);
  $$0 = $25;
 }
 $26 = ($$0|0)>(29);
 do {
  if ($26) {
   if ($20) {
    __THREW__ = 0;
    $27 = (invoke_i(762)|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if (!($29)) {
     $30 = ((($2)) + 8|0);
     $31 = HEAP32[$30>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $31;
     $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
     HEAPF64[$vararg_ptr8>>3] = $4;
     $32 = (invoke_iiiii(780,($7|0),($27|0),($5|0),($vararg_buffer5|0))|0);
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if (!($34)) {
      $$1 = $32;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $37 = (invoke_i(762)|0);
    $38 = __THREW__; __THREW__ = 0;
    $39 = $38&1;
    if (!($39)) {
     __THREW__ = 0;
     HEAPF64[$vararg_buffer9>>3] = $4;
     $40 = (invoke_iiiii(780,($7|0),($37|0),($5|0),($vararg_buffer9|0))|0);
     $41 = __THREW__; __THREW__ = 0;
     $42 = $41&1;
     if (!($42)) {
      $$1 = $40;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $43 = HEAP32[$7>>2]|0;
    $44 = ($43|0)==(0|0);
    if (!($44)) {
     $45 = $43;
     $$2 = $$1;$$pre8284 = $43;$$sroa$071$0 = $45;
     label = 16;
     break;
    }
    __THREW__ = 0;
    invoke_v(777);
    $46 = __THREW__; __THREW__ = 0;
    $47 = $46&1;
    if (!($47)) {
     $$pre = HEAP32[$7>>2]|0;
     $48 = $$pre;
     $$2 = $$1;$$pre8284 = $48;$$sroa$071$0 = $$pre;
     label = 16;
     break;
    }
   }
   $35 = ___cxa_find_matching_catch_2()|0;
   $36 = tempRet0;
   $$45491 = $36;$$492 = $35;
  } else {
   $$pre81 = HEAP32[$7>>2]|0;
   $$2 = $$0;$$pre8284 = $$pre81;$$sroa$071$0 = 0;
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $49 = (($$pre8284) + ($$2)|0);
  $50 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($$pre8284,$49,$2)|0);
  $51 = ($$pre8284|0)==($6|0);
  L22: do {
   if ($51) {
    $$046 = $8;$$sroa$060$0 = 0;$63 = $6;
    label = 22;
   } else {
    $52 = $$2 << 1;
    $53 = (_malloc($52)|0);
    $54 = ($53|0)==(0|0);
    do {
     if ($54) {
      __THREW__ = 0;
      invoke_v(777);
      $55 = __THREW__; __THREW__ = 0;
      $56 = $55&1;
      if ($56) {
       $57 = ___cxa_find_matching_catch_2()|0;
       $58 = tempRet0;
       $$24989 = $57;$$25288 = $58;
       break L22;
      } else {
       $$pre82$pre = HEAP32[$7>>2]|0;
       $$pre82 = $$pre82$pre;
       break;
      }
     } else {
      $$pre82 = $$pre8284;
     }
    } while(0);
    $59 = $53;
    $$046 = $53;$$sroa$060$0 = $59;$63 = $$pre82;
    label = 22;
   }
  } while(0);
  if ((label|0) == 22) {
   __THREW__ = 0;
   $60 = (invoke_ii(658,($2|0))|0);
   $61 = __THREW__; __THREW__ = 0;
   $62 = $61&1;
   do {
    if ($62) {
     $77 = ___cxa_find_matching_catch_2()|0;
     $78 = tempRet0;
     $$047 = $77;$$050 = $78;
     label = 32;
    } else {
     HEAP32[$11>>2] = $60;
     __THREW__ = 0;
     invoke_viiiiiii(781,($63|0),($50|0),($49|0),($$046|0),($9|0),($10|0),($11|0));
     $64 = __THREW__; __THREW__ = 0;
     $65 = $64&1;
     if ($65) {
      $79 = ___cxa_find_matching_catch_2()|0;
      $80 = tempRet0;
      $81 = HEAP32[$11>>2]|0;
      (__ZNSt3__214__shared_count16__release_sharedEv($81)|0);
      $$047 = $79;$$050 = $80;
      label = 32;
      break;
     }
     $66 = HEAP32[$11>>2]|0;
     (__ZNSt3__214__shared_count16__release_sharedEv($66)|0);
     $67 = HEAP32[$1>>2]|0;
     HEAP32[$12>>2] = $67;
     $68 = HEAP32[$9>>2]|0;
     $69 = HEAP32[$10>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
     $70 = (invoke_iiiiiii(661,($$byval_copy|0),($$046|0),($68|0),($69|0),($2|0),($3|0))|0);
     $71 = __THREW__; __THREW__ = 0;
     $72 = $71&1;
     if ($72) {
      $82 = ___cxa_find_matching_catch_2()|0;
      $83 = tempRet0;
      $$148 = $82;$$151 = $83;
      break;
     }
     HEAP32[$1>>2] = $70;
     $73 = ($$sroa$060$0|0)==(0);
     if (!($73)) {
      $74 = $$sroa$060$0;
      _free($74);
     }
     $75 = ($$sroa$071$0|0)==(0);
     if (!($75)) {
      $76 = $$sroa$071$0;
      _free($76);
     }
     STACKTOP = sp;return ($70|0);
    }
   } while(0);
   if ((label|0) == 32) {
    $$148 = $$047;$$151 = $$050;
   }
   $84 = ($$sroa$060$0|0)==(0);
   if ($84) {
    $$24989 = $$148;$$25288 = $$151;
   } else {
    $85 = $$sroa$060$0;
    _free($85);
    $$24989 = $$148;$$25288 = $$151;
   }
  }
  $86 = ($$sroa$071$0|0)==(0);
  if ($86) {
   $$45491 = $$25288;$$492 = $$24989;
  } else {
   $87 = $$sroa$071$0;
   _free($87);
   $$45491 = $$25288;$$492 = $$24989;
  }
 }
 ___resumeException($$492|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $$byval_copy = sp + 12|0;
 $vararg_buffer = sp;
 $5 = sp + 76|0;
 $6 = sp + 56|0;
 $7 = sp + 16|0;
 $8 = sp + 8|0;
 $9 = sp + 4|0;
 ;HEAP8[$5>>0]=HEAP8[32869>>0]|0;HEAP8[$5+1>>0]=HEAP8[32869+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[32869+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[32869+3>>0]|0;HEAP8[$5+4>>0]=HEAP8[32869+4>>0]|0;HEAP8[$5+5>>0]=HEAP8[32869+5>>0]|0;
 $10 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $4;
 $11 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,20,$10,$5,$vararg_buffer)|0);
 $12 = (($6) + ($11)|0);
 $13 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($6,$12,$2)|0);
 $14 = (__ZNKSt3__28ios_base6getlocEv($2)|0);
 HEAP32[$8>>2] = $14;
 __THREW__ = 0;
 $15 = (invoke_iii(659,($8|0),(40712|0))|0);
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $29 = ___cxa_find_matching_catch_2()|0;
  $30 = tempRet0;
  (__ZNSt3__214__shared_count16__release_sharedEv($14)|0);
  ___resumeException($29|0);
  // unreachable;
 } else {
  (__ZNSt3__214__shared_count16__release_sharedEv($14)|0);
  $18 = HEAP32[$15>>2]|0;
  $19 = ((($18)) + 32|0);
  $20 = HEAP32[$19>>2]|0;
  (FUNCTION_TABLE_iiiii[$20 & 1023]($15,$6,$12,$7)|0);
  $21 = (($7) + ($11)|0);
  $22 = ($13|0)==($12|0);
  $23 = $6;
  $24 = $13;
  $25 = (($24) - ($23))|0;
  $26 = (($7) + ($25)|0);
  $$0 = $22 ? $21 : $26;
  $27 = HEAP32[$1>>2]|0;
  HEAP32[$9>>2] = $27;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$9>>2]|0;
  $28 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$7,$$0,$21,$2,$3)|0);
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function __ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($0,$1,$2,$3,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $varargs = $varargs|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 HEAP32[$4>>2] = $varargs;
 $5 = (_uselocale($2)|0);
 $6 = (_vsnprintf($0,$1,$3,$4)|0);
 $7 = ($5|0)==(0|0);
 if (!($7)) {
  __THREW__ = 0;
  (invoke_ii(765,($5|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if ($9) {
   $10 = ___cxa_find_matching_catch_3(0|0)|0;
   $11 = tempRet0;
   ___clang_call_terminate($10);
   // unreachable;
  }
 }
 STACKTOP = sp;return ($6|0);
}
function __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 176;
 $trunc = $5&255;
 L1: do {
  switch ($trunc<<24>>24) {
  case 16:  {
   $6 = HEAP8[$0>>0]|0;
   switch ($6<<24>>24) {
   case 43: case 45:  {
    $7 = ((($0)) + 1|0);
    $$0 = $7;
    break L1;
    break;
   }
   default: {
   }
   }
   $8 = $1;
   $9 = $0;
   $10 = (($8) - ($9))|0;
   $11 = ($10|0)>(1);
   $12 = ($6<<24>>24)==(48);
   $or$cond = $11 & $12;
   if ($or$cond) {
    $13 = ((($0)) + 1|0);
    $14 = HEAP8[$13>>0]|0;
    switch ($14<<24>>24) {
    case 88: case 120:  {
     break;
    }
    default: {
     label = 7;
     break L1;
    }
    }
    $15 = ((($0)) + 2|0);
    $$0 = $15;
   } else {
    label = 7;
   }
   break;
  }
  case 32:  {
   $$0 = $1;
   break;
  }
  default: {
   label = 7;
  }
  }
 } while(0);
 if ((label|0) == 7) {
  $$0 = $0;
 }
 return ($$0|0);
}
function __ZNSt3__214__num_put_base14__format_floatEPcPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$022 = 0, $$023$off0$ph = 0, $$1 = 0, $$2 = 0, $$2$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2 & 2048;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = $0;
 } else {
  $5 = ((($0)) + 1|0);
  HEAP8[$0>>0] = 43;
  $$0 = $5;
 }
 $6 = $2 & 1024;
 $7 = ($6|0)==(0);
 if ($7) {
  $$1 = $$0;
 } else {
  $8 = ((($$0)) + 1|0);
  HEAP8[$$0>>0] = 35;
  $$1 = $8;
 }
 $9 = $2 & 260;
 $10 = $2 >>> 14;
 $11 = ($9|0)==(260);
 if ($11) {
  $$023$off0$ph = 0;$$2$ph = $$1;
 } else {
  $12 = ((($$1)) + 1|0);
  HEAP8[$$1>>0] = 46;
  $13 = ((($$1)) + 2|0);
  HEAP8[$12>>0] = 42;
  $$023$off0$ph = 1;$$2$ph = $13;
 }
 $$022 = $1;$$2 = $$2$ph;
 while(1) {
  $14 = HEAP8[$$022>>0]|0;
  $15 = ($14<<24>>24)==(0);
  if ($15) {
   break;
  }
  $16 = ((($$022)) + 1|0);
  $17 = ((($$2)) + 1|0);
  HEAP8[$$2>>0] = $14;
  $$022 = $16;$$2 = $17;
 }
 $trunc = $9&65535;
 $trunc$clear = $trunc & 511;
 L14: do {
  switch ($trunc$clear<<16>>16) {
  case 4:  {
   $18 = $10 & 1;
   $19 = ($18|0)==(0);
   if ($19) {
    HEAP8[$$2>>0] = 102;
    break L14;
   } else {
    HEAP8[$$2>>0] = 70;
    break L14;
   }
   break;
  }
  case 256:  {
   $20 = $10 & 1;
   $21 = ($20|0)==(0);
   if ($21) {
    HEAP8[$$2>>0] = 101;
    break L14;
   } else {
    HEAP8[$$2>>0] = 69;
    break L14;
   }
   break;
  }
  default: {
   $22 = $10 & 1;
   $23 = ($22|0)!=(0);
   if ($11) {
    if ($23) {
     HEAP8[$$2>>0] = 65;
     break L14;
    } else {
     HEAP8[$$2>>0] = 97;
     break L14;
    }
   } else {
    if ($23) {
     HEAP8[$$2>>0] = 71;
     break L14;
    } else {
     HEAP8[$$2>>0] = 103;
     break L14;
    }
   }
  }
  }
 } while(0);
 return ($$023$off0$ph|0);
}
function __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 $4 = (_uselocale($1)|0);
 __THREW__ = 0;
 $5 = (invoke_iiii(782,($0|0),($2|0),($3|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  $15 = ($4|0)==(0|0);
  if (!($15)) {
   __THREW__ = 0;
   (invoke_ii(765,($4|0))|0);
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   if ($17) {
    $18 = ___cxa_find_matching_catch_3(0|0)|0;
    $19 = tempRet0;
    ___clang_call_terminate($18);
    // unreachable;
   }
  }
  ___resumeException($13|0);
  // unreachable;
 } else {
  $8 = ($4|0)==(0|0);
  if (!($8)) {
   __THREW__ = 0;
   (invoke_ii(765,($4|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $11 = ___cxa_find_matching_catch_3(0|0)|0;
    $12 = tempRet0;
    ___clang_call_terminate($11);
    // unreachable;
   }
  }
  STACKTOP = sp;return ($5|0);
 }
 return (0)|0;
}
function __ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$$0108 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i127 = 0, $$0108 = 0, $$0109 = 0, $$0111 = 0, $$0113 = 0, $$07$i$i = 0, $$07$i$i126 = 0, $$1 = 0, $$1110 = 0, $$1112 = 0, $$1114 = 0, $$2 = 0, $$2115 = 0, $$3 = 0, $$pre$phiZ2D = 0, $$sink$sink$sink$index = 0, $$sink$sink$sink$index6 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $7 = sp;
 $8 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,40712)|0);
 $9 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,40728)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 FUNCTION_TABLE_vii[$12 & 1023]($7,$9);
 HEAP32[$5>>2] = $3;
 $13 = HEAP8[$0>>0]|0;
 L1: do {
  switch ($13<<24>>24) {
  case 43: case 45:  {
   $14 = HEAP32[$8>>2]|0;
   $15 = ((($14)) + 28|0);
   $16 = HEAP32[$15>>2]|0;
   __THREW__ = 0;
   $17 = (invoke_iii($16|0,($8|0),($13|0))|0);
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   if ($19) {
    $23 = ___cxa_find_matching_catch_2()|0;
    $24 = tempRet0;
    $$sink$sink$sink$index = $23;$$sink$sink$sink$index6 = $24;
    break L1;
   } else {
    $20 = ((($0)) + 1|0);
    $21 = HEAP32[$5>>2]|0;
    $22 = ((($21)) + 1|0);
    HEAP32[$5>>2] = $22;
    HEAP8[$21>>0] = $17;
    $$0111 = $20;
    label = 5;
    break L1;
   }
   break;
  }
  default: {
   $$0111 = $0;
   label = 5;
  }
  }
 } while(0);
 L6: do {
  if ((label|0) == 5) {
   $25 = $2;
   $26 = $$0111;
   $27 = (($25) - ($26))|0;
   $28 = ($27|0)>(1);
   L8: do {
    if ($28) {
     $29 = HEAP8[$$0111>>0]|0;
     $30 = ($29<<24>>24)==(48);
     if ($30) {
      $31 = ((($$0111)) + 1|0);
      $32 = HEAP8[$31>>0]|0;
      switch ($32<<24>>24) {
      case 88: case 120:  {
       break;
      }
      default: {
       $$1114 = $$0111;
       label = 20;
       break L8;
      }
      }
      $33 = HEAP32[$8>>2]|0;
      $34 = ((($33)) + 28|0);
      $35 = HEAP32[$34>>2]|0;
      __THREW__ = 0;
      $36 = (invoke_iii($35|0,($8|0),48)|0);
      $37 = __THREW__; __THREW__ = 0;
      $38 = $37&1;
      if (!($38)) {
       $39 = HEAP32[$5>>2]|0;
       $40 = ((($39)) + 1|0);
       HEAP32[$5>>2] = $40;
       HEAP8[$39>>0] = $36;
       $41 = ((($$0111)) + 2|0);
       $42 = HEAP8[$31>>0]|0;
       $43 = HEAP32[$8>>2]|0;
       $44 = ((($43)) + 28|0);
       $45 = HEAP32[$44>>2]|0;
       __THREW__ = 0;
       $46 = (invoke_iii($45|0,($8|0),($42|0))|0);
       $47 = __THREW__; __THREW__ = 0;
       $48 = $47&1;
       if (!($48)) {
        $49 = HEAP32[$5>>2]|0;
        $50 = ((($49)) + 1|0);
        HEAP32[$5>>2] = $50;
        HEAP8[$49>>0] = $46;
        $$0113 = $41;
        while(1) {
         $51 = ($$0113>>>0)<($2>>>0);
         if (!($51)) {
          $$1112 = $41;$$2115 = $$0113;
          label = 25;
          break L8;
         }
         $52 = HEAP8[$$0113>>0]|0;
         __THREW__ = 0;
         $53 = (invoke_i(762)|0);
         $54 = __THREW__; __THREW__ = 0;
         $55 = $54&1;
         if ($55) {
          break;
         }
         $56 = $52 << 24 >> 24;
         __THREW__ = 0;
         $57 = (invoke_iii(783,($56|0),($53|0))|0);
         $58 = __THREW__; __THREW__ = 0;
         $59 = $58&1;
         if ($59) {
          break;
         }
         $60 = ($57|0)==(0);
         if ($60) {
          $$1112 = $41;$$2115 = $$0113;
          label = 25;
          break L8;
         }
         $69 = ((($$0113)) + 1|0);
         $$0113 = $69;
        }
        $65 = ___cxa_find_matching_catch_2()|0;
        $66 = tempRet0;
        $$sink$sink$sink$index = $65;$$sink$sink$sink$index6 = $66;
        break L6;
       }
      }
     } else {
      $$1114 = $$0111;
      label = 20;
     }
    } else {
     $$1114 = $$0111;
     label = 20;
    }
   } while(0);
   L21: do {
    if ((label|0) == 20) {
     while(1) {
      label = 0;
      $70 = ($$1114>>>0)<($2>>>0);
      if (!($70)) {
       $$1112 = $$0111;$$2115 = $$1114;
       label = 25;
       break L21;
      }
      $71 = HEAP8[$$1114>>0]|0;
      __THREW__ = 0;
      $72 = (invoke_i(762)|0);
      $73 = __THREW__; __THREW__ = 0;
      $74 = $73&1;
      if ($74) {
       break;
      }
      $75 = $71 << 24 >> 24;
      __THREW__ = 0;
      $76 = (invoke_iii(784,($75|0),($72|0))|0);
      $77 = __THREW__; __THREW__ = 0;
      $78 = $77&1;
      if ($78) {
       break;
      }
      $79 = ($76|0)==(0);
      if ($79) {
       $$1112 = $$0111;$$2115 = $$1114;
       label = 25;
       break L21;
      }
      $80 = ((($$1114)) + 1|0);
      $$1114 = $80;
      label = 20;
     }
     $63 = ___cxa_find_matching_catch_2()|0;
     $64 = tempRet0;
     $$sink$sink$sink$index = $63;$$sink$sink$sink$index6 = $64;
     break L6;
    }
   } while(0);
   L29: do {
    if ((label|0) == 25) {
     $81 = ((($7)) + 11|0);
     $82 = HEAP8[$81>>0]|0;
     $83 = ($82<<24>>24)<(0);
     $84 = ((($7)) + 4|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = $82&255;
     $87 = $83 ? $85 : $86;
     $88 = ($87|0)==(0);
     L31: do {
      if ($88) {
       $89 = HEAP32[$5>>2]|0;
       $90 = HEAP32[$8>>2]|0;
       $91 = ((($90)) + 32|0);
       $92 = HEAP32[$91>>2]|0;
       __THREW__ = 0;
       (invoke_iiiii($92|0,($8|0),($$1112|0),($$2115|0),($89|0))|0);
       $93 = __THREW__; __THREW__ = 0;
       $94 = $93&1;
       if ($94) {
        break L29;
       }
       $95 = $$2115;
       $96 = $$1112;
       $97 = (($95) - ($96))|0;
       $98 = HEAP32[$5>>2]|0;
       $99 = (($98) + ($97)|0);
       HEAP32[$5>>2] = $99;
       $$pre$phiZ2D = $8;
      } else {
       $100 = ($$1112|0)==($$2115|0);
       L35: do {
        if (!($100)) {
         $$0$i$i = $$2115;$$07$i$i = $$1112;
         while(1) {
          $101 = ((($$0$i$i)) + -1|0);
          $102 = ($$07$i$i>>>0)<($101>>>0);
          if (!($102)) {
           break L35;
          }
          $103 = HEAP8[$$07$i$i>>0]|0;
          $104 = HEAP8[$101>>0]|0;
          HEAP8[$$07$i$i>>0] = $104;
          HEAP8[$101>>0] = $103;
          $105 = ((($$07$i$i)) + 1|0);
          $$0$i$i = $101;$$07$i$i = $105;
         }
        }
       } while(0);
       $106 = HEAP32[$9>>2]|0;
       $107 = ((($106)) + 16|0);
       $108 = HEAP32[$107>>2]|0;
       __THREW__ = 0;
       $109 = (invoke_ii($108|0,($9|0))|0);
       $110 = __THREW__; __THREW__ = 0;
       $111 = $110&1;
       if ($111) {
        break L29;
       }
       $$0 = $$1112;$$0108 = 0;$$0109 = 0;
       while(1) {
        $112 = ($$0>>>0)<($$2115>>>0);
        if (!($112)) {
         break;
        }
        $124 = HEAP8[$81>>0]|0;
        $125 = ($124<<24>>24)<(0);
        $126 = HEAP32[$7>>2]|0;
        $127 = $125 ? $126 : $7;
        $128 = (($127) + ($$0108)|0);
        $129 = HEAP8[$128>>0]|0;
        $130 = ($129<<24>>24)>(0);
        $131 = $129 << 24 >> 24;
        $132 = ($$0109|0)==($131|0);
        $or$cond = $130 & $132;
        if ($or$cond) {
         $133 = HEAP32[$5>>2]|0;
         $134 = ((($133)) + 1|0);
         HEAP32[$5>>2] = $134;
         HEAP8[$133>>0] = $109;
         $135 = HEAP8[$81>>0]|0;
         $136 = ($135<<24>>24)<(0);
         $137 = HEAP32[$84>>2]|0;
         $138 = $135&255;
         $139 = $136 ? $137 : $138;
         $140 = (($139) + -1)|0;
         $141 = ($$0108>>>0)<($140>>>0);
         $142 = $141&1;
         $$$0108 = (($142) + ($$0108))|0;
         $$1 = $$$0108;$$1110 = 0;
        } else {
         $$1 = $$0108;$$1110 = $$0109;
        }
        $145 = HEAP8[$$0>>0]|0;
        $146 = HEAP32[$8>>2]|0;
        $147 = ((($146)) + 28|0);
        $148 = HEAP32[$147>>2]|0;
        __THREW__ = 0;
        $149 = (invoke_iii($148|0,($8|0),($145|0))|0);
        $150 = __THREW__; __THREW__ = 0;
        $151 = $150&1;
        if ($151) {
         label = 40;
         break;
        }
        $152 = HEAP32[$5>>2]|0;
        $153 = ((($152)) + 1|0);
        HEAP32[$5>>2] = $153;
        HEAP8[$152>>0] = $149;
        $154 = (($$1110) + 1)|0;
        $155 = ((($$0)) + 1|0);
        $$0 = $155;$$0108 = $$1;$$0109 = $154;
       }
       if ((label|0) == 40) {
        $143 = ___cxa_find_matching_catch_2()|0;
        $144 = tempRet0;
        $$sink$sink$sink$index = $143;$$sink$sink$sink$index6 = $144;
        break L6;
       }
       $113 = $$1112;
       $114 = $0;
       $115 = (($113) - ($114))|0;
       $116 = (($3) + ($115)|0);
       $117 = HEAP32[$5>>2]|0;
       $118 = ($116|0)==($117|0);
       if ($118) {
        $$pre$phiZ2D = $8;
       } else {
        $$0$i$i127 = $117;$$07$i$i126 = $116;
        while(1) {
         $119 = ((($$0$i$i127)) + -1|0);
         $120 = ($$07$i$i126>>>0)<($119>>>0);
         if (!($120)) {
          $$pre$phiZ2D = $8;
          break L31;
         }
         $121 = HEAP8[$$07$i$i126>>0]|0;
         $122 = HEAP8[$119>>0]|0;
         HEAP8[$$07$i$i126>>0] = $122;
         HEAP8[$119>>0] = $121;
         $123 = ((($$07$i$i126)) + 1|0);
         $$0$i$i127 = $119;$$07$i$i126 = $123;
        }
       }
      }
     } while(0);
     $$2 = $$2115;
     while(1) {
      $156 = ($$2>>>0)<($2>>>0);
      if (!($156)) {
       $$3 = $$2;
       break;
      }
      $157 = HEAP8[$$2>>0]|0;
      $158 = ($157<<24>>24)==(46);
      if ($158) {
       label = 45;
       break;
      }
      $168 = HEAP32[$$pre$phiZ2D>>2]|0;
      $169 = ((($168)) + 28|0);
      $170 = HEAP32[$169>>2]|0;
      __THREW__ = 0;
      $171 = (invoke_iii($170|0,($8|0),($157|0))|0);
      $172 = __THREW__; __THREW__ = 0;
      $173 = $172&1;
      if ($173) {
       label = 15;
       break;
      }
      $174 = HEAP32[$5>>2]|0;
      $175 = ((($174)) + 1|0);
      HEAP32[$5>>2] = $175;
      HEAP8[$174>>0] = $171;
      $176 = ((($$2)) + 1|0);
      $$2 = $176;
     }
     if ((label|0) == 15) {
      $61 = ___cxa_find_matching_catch_2()|0;
      $62 = tempRet0;
      $$sink$sink$sink$index = $61;$$sink$sink$sink$index6 = $62;
      break L6;
     }
     if ((label|0) == 45) {
      $159 = HEAP32[$9>>2]|0;
      $160 = ((($159)) + 12|0);
      $161 = HEAP32[$160>>2]|0;
      __THREW__ = 0;
      $162 = (invoke_ii($161|0,($9|0))|0);
      $163 = __THREW__; __THREW__ = 0;
      $164 = $163&1;
      if ($164) {
       break;
      }
      $165 = HEAP32[$5>>2]|0;
      $166 = ((($165)) + 1|0);
      HEAP32[$5>>2] = $166;
      HEAP8[$165>>0] = $162;
      $167 = ((($$2)) + 1|0);
      $$3 = $167;
     }
     $177 = HEAP32[$5>>2]|0;
     $178 = HEAP32[$8>>2]|0;
     $179 = ((($178)) + 32|0);
     $180 = HEAP32[$179>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($180|0,($8|0),($$3|0),($2|0),($177|0))|0);
     $181 = __THREW__; __THREW__ = 0;
     $182 = $181&1;
     if (!($182)) {
      $183 = $$3;
      $184 = (($25) - ($183))|0;
      $185 = HEAP32[$5>>2]|0;
      $186 = (($185) + ($184)|0);
      HEAP32[$5>>2] = $186;
      $187 = ($1|0)==($2|0);
      $188 = $1;
      $189 = $0;
      $190 = (($188) - ($189))|0;
      $191 = (($3) + ($190)|0);
      $storemerge = $187 ? $186 : $191;
      HEAP32[$4>>2] = $storemerge;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
      STACKTOP = sp;return;
     }
    }
   } while(0);
   $67 = ___cxa_find_matching_catch_2()|0;
   $68 = tempRet0;
   $$sink$sink$sink$index = $67;$$sink$sink$sink$index6 = $68;
  }
 } while(0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 ___resumeException($$sink$sink$sink$index|0);
 // unreachable;
}
function __ZNSt3__214__num_put_base12__format_intEPcPKcbj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$013 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $3 & 2048;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = $0;
 } else {
  $6 = ((($0)) + 1|0);
  HEAP8[$0>>0] = 43;
  $$0 = $6;
 }
 $7 = $3 & 512;
 $8 = ($7|0)==(0);
 if ($8) {
  $$013 = $1;$$1 = $$0;
 } else {
  $9 = ((($$0)) + 1|0);
  HEAP8[$$0>>0] = 35;
  $$013 = $1;$$1 = $9;
 }
 while(1) {
  $10 = HEAP8[$$013>>0]|0;
  $11 = ($10<<24>>24)==(0);
  if ($11) {
   break;
  }
  $12 = ((($$013)) + 1|0);
  $13 = ((($$1)) + 1|0);
  HEAP8[$$1>>0] = $10;
  $$013 = $12;$$1 = $13;
 }
 $14 = $3 & 74;
 $trunc = $14&255;
 $trunc$clear = $trunc & 127;
 L10: do {
  switch ($trunc$clear<<24>>24) {
  case 64:  {
   HEAP8[$$1>>0] = 111;
   break;
  }
  case 8:  {
   $15 = $3 & 16384;
   $16 = ($15|0)==(0);
   if ($16) {
    HEAP8[$$1>>0] = 120;
    break L10;
   } else {
    HEAP8[$$1>>0] = 88;
    break L10;
   }
   break;
  }
  default: {
   if ($2) {
    HEAP8[$$1>>0] = 100;
    break L10;
   } else {
    HEAP8[$$1>>0] = 117;
    break L10;
   }
  }
  }
 } while(0);
 return;
}
function __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$$078 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i93 = 0, $$07$i$i = 0, $$07$i$i92 = 0, $$078 = 0, $$079 = 0, $$083 = 0, $$1 = 0, $$180 = 0, $$184 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink$sink$sink$index = 0, $$sink$sink$sink$index3 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $7 = sp;
 $8 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,40712)|0);
 $9 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,40728)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 FUNCTION_TABLE_vii[$12 & 1023]($7,$9);
 $13 = ((($7)) + 11|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)<(0);
 $16 = ((($7)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $14&255;
 $19 = $15 ? $17 : $18;
 $20 = ($19|0)==(0);
 L1: do {
  if ($20) {
   $21 = HEAP32[$8>>2]|0;
   $22 = ((($21)) + 32|0);
   $23 = HEAP32[$22>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($23|0,($8|0),($0|0),($2|0),($3|0))|0);
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if ($25) {
    $30 = ___cxa_find_matching_catch_2()|0;
    $31 = tempRet0;
    $$sink$sink$sink$index = $30;$$sink$sink$sink$index3 = $31;
    label = 31;
    break;
   } else {
    $26 = $2;
    $27 = $0;
    $28 = (($26) - ($27))|0;
    $29 = (($3) + ($28)|0);
    HEAP32[$5>>2] = $29;
    $$pre$phiZ2D = $27;$130 = $29;
    label = 30;
    break;
   }
  } else {
   HEAP32[$5>>2] = $3;
   $32 = HEAP8[$0>>0]|0;
   switch ($32<<24>>24) {
   case 43: case 45:  {
    $33 = HEAP32[$8>>2]|0;
    $34 = ((($33)) + 28|0);
    $35 = HEAP32[$34>>2]|0;
    __THREW__ = 0;
    $36 = (invoke_iii($35|0,($8|0),($32|0))|0);
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if (!($38)) {
     $39 = ((($0)) + 1|0);
     $40 = HEAP32[$5>>2]|0;
     $41 = ((($40)) + 1|0);
     HEAP32[$5>>2] = $41;
     HEAP8[$40>>0] = $36;
     $$083 = $39;
     label = 9;
    }
    break;
   }
   default: {
    $$083 = $0;
    label = 9;
   }
   }
   L10: do {
    if ((label|0) == 9) {
     $44 = $2;
     $45 = $$083;
     $46 = (($44) - ($45))|0;
     $47 = ($46|0)>(1);
     L12: do {
      if ($47) {
       $48 = HEAP8[$$083>>0]|0;
       $49 = ($48<<24>>24)==(48);
       if ($49) {
        $50 = ((($$083)) + 1|0);
        $51 = HEAP8[$50>>0]|0;
        switch ($51<<24>>24) {
        case 88: case 120:  {
         break;
        }
        default: {
         $$184 = $$083;
         break L12;
        }
        }
        $52 = HEAP32[$8>>2]|0;
        $53 = ((($52)) + 28|0);
        $54 = HEAP32[$53>>2]|0;
        __THREW__ = 0;
        $55 = (invoke_iii($54|0,($8|0),48)|0);
        $56 = __THREW__; __THREW__ = 0;
        $57 = $56&1;
        if ($57) {
         break L10;
        }
        $58 = HEAP32[$5>>2]|0;
        $59 = ((($58)) + 1|0);
        HEAP32[$5>>2] = $59;
        HEAP8[$58>>0] = $55;
        $60 = HEAP8[$50>>0]|0;
        $61 = HEAP32[$8>>2]|0;
        $62 = ((($61)) + 28|0);
        $63 = HEAP32[$62>>2]|0;
        __THREW__ = 0;
        $64 = (invoke_iii($63|0,($8|0),($60|0))|0);
        $65 = __THREW__; __THREW__ = 0;
        $66 = $65&1;
        if ($66) {
         break L10;
        }
        $67 = ((($$083)) + 2|0);
        $68 = HEAP32[$5>>2]|0;
        $69 = ((($68)) + 1|0);
        HEAP32[$5>>2] = $69;
        HEAP8[$68>>0] = $64;
        $$184 = $67;
       } else {
        $$184 = $$083;
       }
      } else {
       $$184 = $$083;
      }
     } while(0);
     $70 = ($$184|0)==($2|0);
     L19: do {
      if (!($70)) {
       $$0$i$i = $2;$$07$i$i = $$184;
       while(1) {
        $71 = ((($$0$i$i)) + -1|0);
        $72 = ($$07$i$i>>>0)<($71>>>0);
        if (!($72)) {
         break L19;
        }
        $73 = HEAP8[$$07$i$i>>0]|0;
        $74 = HEAP8[$71>>0]|0;
        HEAP8[$$07$i$i>>0] = $74;
        HEAP8[$71>>0] = $73;
        $75 = ((($$07$i$i)) + 1|0);
        $$0$i$i = $71;$$07$i$i = $75;
       }
      }
     } while(0);
     $76 = HEAP32[$9>>2]|0;
     $77 = ((($76)) + 16|0);
     $78 = HEAP32[$77>>2]|0;
     __THREW__ = 0;
     $79 = (invoke_ii($78|0,($9|0))|0);
     $80 = __THREW__; __THREW__ = 0;
     $81 = $80&1;
     if (!($81)) {
      $$0 = $$184;$$078 = 0;$$079 = 0;
      while(1) {
       $82 = ($$0>>>0)<($2>>>0);
       if (!($82)) {
        break;
       }
       $94 = HEAP8[$13>>0]|0;
       $95 = ($94<<24>>24)<(0);
       $96 = HEAP32[$7>>2]|0;
       $97 = $95 ? $96 : $7;
       $98 = (($97) + ($$078)|0);
       $99 = HEAP8[$98>>0]|0;
       $100 = ($99<<24>>24)!=(0);
       $101 = $99 << 24 >> 24;
       $102 = ($$079|0)==($101|0);
       $or$cond = $100 & $102;
       if ($or$cond) {
        $103 = HEAP32[$5>>2]|0;
        $104 = ((($103)) + 1|0);
        HEAP32[$5>>2] = $104;
        HEAP8[$103>>0] = $79;
        $105 = HEAP8[$13>>0]|0;
        $106 = ($105<<24>>24)<(0);
        $107 = HEAP32[$16>>2]|0;
        $108 = $105&255;
        $109 = $106 ? $107 : $108;
        $110 = (($109) + -1)|0;
        $111 = ($$078>>>0)<($110>>>0);
        $112 = $111&1;
        $$$078 = (($112) + ($$078))|0;
        $$1 = $$$078;$$180 = 0;
       } else {
        $$1 = $$078;$$180 = $$079;
       }
       $115 = HEAP8[$$0>>0]|0;
       $116 = HEAP32[$8>>2]|0;
       $117 = ((($116)) + 28|0);
       $118 = HEAP32[$117>>2]|0;
       __THREW__ = 0;
       $119 = (invoke_iii($118|0,($8|0),($115|0))|0);
       $120 = __THREW__; __THREW__ = 0;
       $121 = $120&1;
       if ($121) {
        label = 26;
        break;
       }
       $122 = HEAP32[$5>>2]|0;
       $123 = ((($122)) + 1|0);
       HEAP32[$5>>2] = $123;
       HEAP8[$122>>0] = $119;
       $124 = (($$180) + 1)|0;
       $125 = ((($$0)) + 1|0);
       $$0 = $125;$$078 = $$1;$$079 = $124;
      }
      if ((label|0) == 26) {
       $113 = ___cxa_find_matching_catch_2()|0;
       $114 = tempRet0;
       $$sink$sink$sink$index = $113;$$sink$sink$sink$index3 = $114;
       label = 31;
       break L1;
      }
      $83 = $$184;
      $84 = $0;
      $85 = (($83) - ($84))|0;
      $86 = (($3) + ($85)|0);
      $87 = HEAP32[$5>>2]|0;
      $88 = ($86|0)==($87|0);
      if ($88) {
       $$pre$phiZ2D = $84;$130 = $86;
       label = 30;
       break L1;
      } else {
       $$0$i$i93 = $87;$$07$i$i92 = $86;
      }
      while(1) {
       $89 = ((($$0$i$i93)) + -1|0);
       $90 = ($$07$i$i92>>>0)<($89>>>0);
       if (!($90)) {
        break;
       }
       $91 = HEAP8[$$07$i$i92>>0]|0;
       $92 = HEAP8[$89>>0]|0;
       HEAP8[$$07$i$i92>>0] = $92;
       HEAP8[$89>>0] = $91;
       $93 = ((($$07$i$i92)) + 1|0);
       $$0$i$i93 = $89;$$07$i$i92 = $93;
      }
      $$pre = HEAP32[$5>>2]|0;
      $$pre$phiZ2D = $84;$130 = $$pre;
      label = 30;
      break L1;
     }
    }
   } while(0);
   $42 = ___cxa_find_matching_catch_2()|0;
   $43 = tempRet0;
   $$sink$sink$sink$index = $42;$$sink$sink$sink$index3 = $43;
   label = 31;
  }
 } while(0);
 if ((label|0) == 30) {
  $126 = ($1|0)==($2|0);
  $127 = $1;
  $128 = (($127) - ($$pre$phiZ2D))|0;
  $129 = (($3) + ($128)|0);
  $storemerge = $126 ? $130 : $129;
  HEAP32[$4>>2] = $storemerge;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 31) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
  ___resumeException($$sink$sink$sink$index|0);
  // unreachable;
 }
}
function __ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0$i$i = 0, $$011 = 0, $$byval_copy = 0, $$pre = 0, $$pre19 = 0, $$sroa$0$0 = 0, $$sroa$0$0$copyload = 0, $$sroa$014$0 = 0, $$sroa$014$0$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 20|0;
 $5 = sp + 16|0;
 $6 = sp + 12|0;
 $7 = sp;
 $8 = ((($2)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 1;
 $11 = ($10|0)==(0);
 L1: do {
  if ($11) {
   $12 = HEAP32[$0>>2]|0;
   $13 = ((($12)) + 24|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = HEAP32[$1>>2]|0;
   HEAP32[$5>>2] = $15;
   $16 = $4&1;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$5>>2]|0;
   $17 = (FUNCTION_TABLE_iiiiii[$14 & 1023]($0,$$byval_copy,$2,$3,$16)|0);
   $$sroa$0$0 = $17;
  } else {
   $18 = (__ZNKSt3__28ios_base6getlocEv($2)|0);
   HEAP32[$6>>2] = $18;
   __THREW__ = 0;
   $19 = (invoke_iii(659,($6|0),(40752|0))|0);
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   do {
    if ($21) {
     $42 = ___cxa_find_matching_catch_2()|0;
     $43 = tempRet0;
     (__ZNSt3__214__shared_count16__release_sharedEv($18)|0);
     $$0 = $43;$$011 = $42;
    } else {
     (__ZNSt3__214__shared_count16__release_sharedEv($18)|0);
     $22 = HEAP32[$19>>2]|0;
     if ($4) {
      $23 = ((($22)) + 24|0);
      $24 = HEAP32[$23>>2]|0;
      FUNCTION_TABLE_vii[$24 & 1023]($7,$19);
     } else {
      $25 = ((($22)) + 28|0);
      $26 = HEAP32[$25>>2]|0;
      FUNCTION_TABLE_vii[$26 & 1023]($7,$19);
     }
     $27 = ((($7)) + 8|0);
     $28 = ((($27)) + 3|0);
     $29 = HEAP8[$28>>0]|0;
     $30 = ($29<<24>>24)<(0);
     $31 = HEAP32[$7>>2]|0;
     $$sroa$014$0$ph = $30 ? $31 : $7;
     $32 = ((($7)) + 4|0);
     $$sroa$014$0 = $$sroa$014$0$ph;$33 = $29;$37 = $31;
     while(1) {
      $34 = ($33<<24>>24)<(0);
      $35 = HEAP32[$32>>2]|0;
      $36 = $33&255;
      $38 = $34 ? $37 : $7;
      $39 = $34 ? $35 : $36;
      $40 = (($38) + ($39<<2)|0);
      $41 = ($$sroa$014$0|0)==($40|0);
      if ($41) {
       label = 9;
       break;
      }
      $44 = HEAP32[$$sroa$014$0>>2]|0;
      $45 = HEAP32[$1>>2]|0;
      $46 = ($45|0)==(0|0);
      if (!($46)) {
       $47 = ((($45)) + 24|0);
       $48 = HEAP32[$47>>2]|0;
       $49 = ((($45)) + 28|0);
       $50 = HEAP32[$49>>2]|0;
       $51 = ($48|0)==($50|0);
       if ($51) {
        $52 = HEAP32[$45>>2]|0;
        $53 = ((($52)) + 52|0);
        $54 = HEAP32[$53>>2]|0;
        __THREW__ = 0;
        $55 = (invoke_iii($54|0,($45|0),($44|0))|0);
        $56 = __THREW__; __THREW__ = 0;
        $57 = $56&1;
        if ($57) {
         label = 18;
         break;
        } else {
         $$0$i$i = $55;
        }
       } else {
        $58 = ((($48)) + 4|0);
        HEAP32[$47>>2] = $58;
        HEAP32[$48>>2] = $44;
        $$0$i$i = $44;
       }
       $59 = ($$0$i$i|0)==(-1);
       if ($59) {
        HEAP32[$1>>2] = 0;
       }
      }
      $60 = ((($$sroa$014$0)) + 4|0);
      $$pre = HEAP8[$28>>0]|0;
      $$pre19 = HEAP32[$7>>2]|0;
      $$sroa$014$0 = $60;$33 = $$pre;$37 = $$pre19;
     }
     if ((label|0) == 9) {
      $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
      __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($7);
      $$sroa$0$0 = $$sroa$0$0$copyload;
      break L1;
     }
     else if ((label|0) == 18) {
      $61 = ___cxa_find_matching_catch_2()|0;
      $62 = tempRet0;
      __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($7);
      $$0 = $62;$$011 = $61;
      break;
     }
    }
   } while(0);
   ___resumeException($$011|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$0$0|0);
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $$byval_copy = sp + 112|0;
 $vararg_buffer = sp;
 $5 = sp + 130|0;
 $6 = sp + 116|0;
 $7 = sp + 20|0;
 $8 = sp + 16|0;
 $9 = sp + 12|0;
 $10 = sp + 8|0;
 $11 = sp + 4|0;
 ;HEAP8[$5>>0]=HEAP8[32880>>0]|0;HEAP8[$5+1>>0]=HEAP8[32880+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[32880+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[32880+3>>0]|0;HEAP8[$5+4>>0]=HEAP8[32880+4>>0]|0;HEAP8[$5+5>>0]=HEAP8[32880+5>>0]|0;
 $12 = ((($5)) + 1|0);
 $13 = ((($2)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($12,32886,1,$14);
 $15 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $4;
 $16 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,13,$15,$5,$vararg_buffer)|0);
 $17 = (($6) + ($16)|0);
 $18 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($6,$17,$2)|0);
 $19 = (__ZNKSt3__28ios_base6getlocEv($2)|0);
 HEAP32[$10>>2] = $19;
 __THREW__ = 0;
 invoke_viiiiiii(785,($6|0),($18|0),($17|0),($7|0),($8|0),($9|0),($10|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $27 = ___cxa_find_matching_catch_2()|0;
  $28 = tempRet0;
  $29 = HEAP32[$10>>2]|0;
  (__ZNSt3__214__shared_count16__release_sharedEv($29)|0);
  ___resumeException($27|0);
  // unreachable;
 } else {
  $22 = HEAP32[$10>>2]|0;
  (__ZNSt3__214__shared_count16__release_sharedEv($22)|0);
  $23 = HEAP32[$1>>2]|0;
  HEAP32[$11>>2] = $23;
  $24 = HEAP32[$8>>2]|0;
  $25 = HEAP32[$9>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$11>>2]|0;
  $26 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$7,$24,$25,$2,$3)|0);
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $$byval_copy = sp + 204|0;
 $vararg_buffer = sp + 8|0;
 $6 = sp;
 $7 = sp + 208|0;
 $8 = sp + 32|0;
 $9 = sp + 28|0;
 $10 = sp + 24|0;
 $11 = sp + 20|0;
 $12 = sp + 16|0;
 $13 = $6;
 $14 = $13;
 HEAP32[$14>>2] = 37;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = 0;
 $17 = ((($6)) + 1|0);
 $18 = ((($2)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($17,32877,1,$19);
 $20 = (__ZNSt3__26__clocEv()|0);
 $21 = $vararg_buffer;
 $22 = $21;
 HEAP32[$22>>2] = $4;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $5;
 $25 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($7,23,$20,$6,$vararg_buffer)|0);
 $26 = (($7) + ($25)|0);
 $27 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($7,$26,$2)|0);
 $28 = (__ZNKSt3__28ios_base6getlocEv($2)|0);
 HEAP32[$11>>2] = $28;
 __THREW__ = 0;
 invoke_viiiiiii(785,($7|0),($27|0),($26|0),($8|0),($9|0),($10|0),($11|0));
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 if ($30) {
  $36 = ___cxa_find_matching_catch_2()|0;
  $37 = tempRet0;
  $38 = HEAP32[$11>>2]|0;
  (__ZNSt3__214__shared_count16__release_sharedEv($38)|0);
  ___resumeException($36|0);
  // unreachable;
 } else {
  $31 = HEAP32[$11>>2]|0;
  (__ZNSt3__214__shared_count16__release_sharedEv($31)|0);
  $32 = HEAP32[$1>>2]|0;
  HEAP32[$12>>2] = $32;
  $33 = HEAP32[$9>>2]|0;
  $34 = HEAP32[$10>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
  $35 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$8,$33,$34,$2,$3)|0);
  STACKTOP = sp;return ($35|0);
 }
 return (0)|0;
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $$byval_copy = sp + 104|0;
 $vararg_buffer = sp;
 $5 = sp + 120|0;
 $6 = sp + 108|0;
 $7 = sp + 20|0;
 $8 = sp + 16|0;
 $9 = sp + 12|0;
 $10 = sp + 8|0;
 $11 = sp + 4|0;
 ;HEAP8[$5>>0]=HEAP8[32880>>0]|0;HEAP8[$5+1>>0]=HEAP8[32880+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[32880+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[32880+3>>0]|0;HEAP8[$5+4>>0]=HEAP8[32880+4>>0]|0;HEAP8[$5+5>>0]=HEAP8[32880+5>>0]|0;
 $12 = ((($5)) + 1|0);
 $13 = ((($2)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($12,32886,0,$14);
 $15 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $4;
 $16 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,12,$15,$5,$vararg_buffer)|0);
 $17 = (($6) + ($16)|0);
 $18 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($6,$17,$2)|0);
 $19 = (__ZNKSt3__28ios_base6getlocEv($2)|0);
 HEAP32[$10>>2] = $19;
 __THREW__ = 0;
 invoke_viiiiiii(785,($6|0),($18|0),($17|0),($7|0),($8|0),($9|0),($10|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $27 = ___cxa_find_matching_catch_2()|0;
  $28 = tempRet0;
  $29 = HEAP32[$10>>2]|0;
  (__ZNSt3__214__shared_count16__release_sharedEv($29)|0);
  ___resumeException($27|0);
  // unreachable;
 } else {
  $22 = HEAP32[$10>>2]|0;
  (__ZNSt3__214__shared_count16__release_sharedEv($22)|0);
  $23 = HEAP32[$1>>2]|0;
  HEAP32[$11>>2] = $23;
  $24 = HEAP32[$8>>2]|0;
  $25 = HEAP32[$9>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$11>>2]|0;
  $26 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$7,$24,$25,$2,$3)|0);
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $$byval_copy = sp + 204|0;
 $vararg_buffer = sp + 8|0;
 $6 = sp;
 $7 = sp + 208|0;
 $8 = sp + 32|0;
 $9 = sp + 28|0;
 $10 = sp + 24|0;
 $11 = sp + 20|0;
 $12 = sp + 16|0;
 $13 = $6;
 $14 = $13;
 HEAP32[$14>>2] = 37;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = 0;
 $17 = ((($6)) + 1|0);
 $18 = ((($2)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($17,32877,0,$19);
 $20 = (__ZNSt3__26__clocEv()|0);
 $21 = $vararg_buffer;
 $22 = $21;
 HEAP32[$22>>2] = $4;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $5;
 $25 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($7,23,$20,$6,$vararg_buffer)|0);
 $26 = (($7) + ($25)|0);
 $27 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($7,$26,$2)|0);
 $28 = (__ZNKSt3__28ios_base6getlocEv($2)|0);
 HEAP32[$11>>2] = $28;
 __THREW__ = 0;
 invoke_viiiiiii(785,($7|0),($27|0),($26|0),($8|0),($9|0),($10|0),($11|0));
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 if ($30) {
  $36 = ___cxa_find_matching_catch_2()|0;
  $37 = tempRet0;
  $38 = HEAP32[$11>>2]|0;
  (__ZNSt3__214__shared_count16__release_sharedEv($38)|0);
  ___resumeException($36|0);
  // unreachable;
 } else {
  $31 = HEAP32[$11>>2]|0;
  (__ZNSt3__214__shared_count16__release_sharedEv($31)|0);
  $32 = HEAP32[$1>>2]|0;
  HEAP32[$12>>2] = $32;
  $33 = HEAP32[$9>>2]|0;
  $34 = HEAP32[$10>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
  $35 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$8,$33,$34,$2,$3)|0);
  STACKTOP = sp;return ($35|0);
 }
 return (0)|0;
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $$0 = 0, $$046 = 0, $$047 = 0, $$050 = 0, $$1 = 0, $$148 = 0, $$151 = 0, $$2 = 0, $$24987 = 0, $$25286 = 0, $$45489 = 0, $$490 = 0, $$byval_copy = 0, $$pre = 0, $$pre79 = 0, $$pre80 = 0, $$pre80$pre = 0, $$pre8082 = 0, $$sroa$058$0 = 0, $$sroa$069$0 = 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $$byval_copy = sp + 304|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $5 = sp;
 $6 = sp + 308|0;
 $7 = sp + 300|0;
 $8 = sp + 72|0;
 $9 = sp + 68|0;
 $10 = sp + 64|0;
 $11 = sp + 60|0;
 $12 = sp + 56|0;
 $13 = $5;
 $14 = $13;
 HEAP32[$14>>2] = 37;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = 0;
 $17 = ((($5)) + 1|0);
 $18 = ((($2)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (__ZNSt3__214__num_put_base14__format_floatEPcPKcj($17,44984,$19)|0);
 HEAP32[$7>>2] = $6;
 $21 = (__ZNSt3__26__clocEv()|0);
 if ($20) {
  $22 = ((($2)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  HEAP32[$vararg_buffer>>2] = $23;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $4;
  $24 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,30,$21,$5,$vararg_buffer)|0);
  $$0 = $24;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $4;
  $25 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,30,$21,$5,$vararg_buffer2)|0);
  $$0 = $25;
 }
 $26 = ($$0|0)>(29);
 do {
  if ($26) {
   if ($20) {
    __THREW__ = 0;
    $27 = (invoke_i(762)|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if (!($29)) {
     $30 = ((($2)) + 8|0);
     $31 = HEAP32[$30>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $31;
     $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
     HEAPF64[$vararg_ptr8>>3] = $4;
     $32 = (invoke_iiiii(780,($7|0),($27|0),($5|0),($vararg_buffer5|0))|0);
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if (!($34)) {
      $$1 = $32;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $37 = (invoke_i(762)|0);
    $38 = __THREW__; __THREW__ = 0;
    $39 = $38&1;
    if (!($39)) {
     __THREW__ = 0;
     HEAPF64[$vararg_buffer9>>3] = $4;
     $40 = (invoke_iiiii(780,($7|0),($37|0),($5|0),($vararg_buffer9|0))|0);
     $41 = __THREW__; __THREW__ = 0;
     $42 = $41&1;
     if (!($42)) {
      $$1 = $40;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $43 = HEAP32[$7>>2]|0;
    $44 = ($43|0)==(0|0);
    if (!($44)) {
     $45 = $43;
     $$2 = $$1;$$pre8082 = $43;$$sroa$069$0 = $45;
     label = 16;
     break;
    }
    __THREW__ = 0;
    invoke_v(777);
    $46 = __THREW__; __THREW__ = 0;
    $47 = $46&1;
    if (!($47)) {
     $$pre = HEAP32[$7>>2]|0;
     $48 = $$pre;
     $$2 = $$1;$$pre8082 = $48;$$sroa$069$0 = $$pre;
     label = 16;
     break;
    }
   }
   $35 = ___cxa_find_matching_catch_2()|0;
   $36 = tempRet0;
   $$45489 = $36;$$490 = $35;
  } else {
   $$pre79 = HEAP32[$7>>2]|0;
   $$2 = $$0;$$pre8082 = $$pre79;$$sroa$069$0 = 0;
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $49 = (($$pre8082) + ($$2)|0);
  $50 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($$pre8082,$49,$2)|0);
  $51 = ($$pre8082|0)==($6|0);
  L22: do {
   if ($51) {
    $$046 = $8;$$sroa$058$0 = 0;$63 = $6;
    label = 22;
   } else {
    $52 = $$2 << 3;
    $53 = (_malloc($52)|0);
    $54 = ($53|0)==(0|0);
    do {
     if ($54) {
      __THREW__ = 0;
      invoke_v(777);
      $55 = __THREW__; __THREW__ = 0;
      $56 = $55&1;
      if ($56) {
       $57 = ___cxa_find_matching_catch_2()|0;
       $58 = tempRet0;
       $$24987 = $57;$$25286 = $58;
       break L22;
      } else {
       $$pre80$pre = HEAP32[$7>>2]|0;
       $$pre80 = $$pre80$pre;
       break;
      }
     } else {
      $$pre80 = $$pre8082;
     }
    } while(0);
    $59 = $53;
    $$046 = $53;$$sroa$058$0 = $59;$63 = $$pre80;
    label = 22;
   }
  } while(0);
  if ((label|0) == 22) {
   __THREW__ = 0;
   $60 = (invoke_ii(658,($2|0))|0);
   $61 = __THREW__; __THREW__ = 0;
   $62 = $61&1;
   do {
    if ($62) {
     $77 = ___cxa_find_matching_catch_2()|0;
     $78 = tempRet0;
     $$047 = $77;$$050 = $78;
     label = 32;
    } else {
     HEAP32[$11>>2] = $60;
     __THREW__ = 0;
     invoke_viiiiiii(786,($63|0),($50|0),($49|0),($$046|0),($9|0),($10|0),($11|0));
     $64 = __THREW__; __THREW__ = 0;
     $65 = $64&1;
     if ($65) {
      $79 = ___cxa_find_matching_catch_2()|0;
      $80 = tempRet0;
      $81 = HEAP32[$11>>2]|0;
      (__ZNSt3__214__shared_count16__release_sharedEv($81)|0);
      $$047 = $79;$$050 = $80;
      label = 32;
      break;
     }
     $66 = HEAP32[$11>>2]|0;
     (__ZNSt3__214__shared_count16__release_sharedEv($66)|0);
     $67 = HEAP32[$1>>2]|0;
     HEAP32[$12>>2] = $67;
     $68 = HEAP32[$9>>2]|0;
     $69 = HEAP32[$10>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
     $70 = (invoke_iiiiiii(787,($$byval_copy|0),($$046|0),($68|0),($69|0),($2|0),($3|0))|0);
     $71 = __THREW__; __THREW__ = 0;
     $72 = $71&1;
     if ($72) {
      $82 = ___cxa_find_matching_catch_2()|0;
      $83 = tempRet0;
      $$148 = $82;$$151 = $83;
      break;
     }
     HEAP32[$1>>2] = $70;
     $73 = ($$sroa$058$0|0)==(0);
     if (!($73)) {
      $74 = $$sroa$058$0;
      _free($74);
     }
     $75 = ($$sroa$069$0|0)==(0);
     if (!($75)) {
      $76 = $$sroa$069$0;
      _free($76);
     }
     STACKTOP = sp;return ($70|0);
    }
   } while(0);
   if ((label|0) == 32) {
    $$148 = $$047;$$151 = $$050;
   }
   $84 = ($$sroa$058$0|0)==(0);
   if ($84) {
    $$24987 = $$148;$$25286 = $$151;
   } else {
    $85 = $$sroa$058$0;
    _free($85);
    $$24987 = $$148;$$25286 = $$151;
   }
  }
  $86 = ($$sroa$069$0|0)==(0);
  if ($86) {
   $$45489 = $$25286;$$490 = $$24987;
  } else {
   $87 = $$sroa$069$0;
   _free($87);
   $$45489 = $$25286;$$490 = $$24987;
  }
 }
 ___resumeException($$490|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $$0 = 0, $$046 = 0, $$047 = 0, $$050 = 0, $$1 = 0, $$148 = 0, $$151 = 0, $$2 = 0, $$24987 = 0, $$25286 = 0, $$45489 = 0, $$490 = 0, $$byval_copy = 0, $$pre = 0, $$pre79 = 0, $$pre80 = 0, $$pre80$pre = 0, $$pre8082 = 0, $$sroa$058$0 = 0, $$sroa$069$0 = 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $$byval_copy = sp + 304|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $5 = sp;
 $6 = sp + 308|0;
 $7 = sp + 300|0;
 $8 = sp + 72|0;
 $9 = sp + 68|0;
 $10 = sp + 64|0;
 $11 = sp + 60|0;
 $12 = sp + 56|0;
 $13 = $5;
 $14 = $13;
 HEAP32[$14>>2] = 37;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = 0;
 $17 = ((($5)) + 1|0);
 $18 = ((($2)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (__ZNSt3__214__num_put_base14__format_floatEPcPKcj($17,32875,$19)|0);
 HEAP32[$7>>2] = $6;
 $21 = (__ZNSt3__26__clocEv()|0);
 if ($20) {
  $22 = ((($2)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  HEAP32[$vararg_buffer>>2] = $23;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $4;
  $24 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,30,$21,$5,$vararg_buffer)|0);
  $$0 = $24;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $4;
  $25 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,30,$21,$5,$vararg_buffer2)|0);
  $$0 = $25;
 }
 $26 = ($$0|0)>(29);
 do {
  if ($26) {
   if ($20) {
    __THREW__ = 0;
    $27 = (invoke_i(762)|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if (!($29)) {
     $30 = ((($2)) + 8|0);
     $31 = HEAP32[$30>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $31;
     $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
     HEAPF64[$vararg_ptr8>>3] = $4;
     $32 = (invoke_iiiii(780,($7|0),($27|0),($5|0),($vararg_buffer5|0))|0);
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if (!($34)) {
      $$1 = $32;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $37 = (invoke_i(762)|0);
    $38 = __THREW__; __THREW__ = 0;
    $39 = $38&1;
    if (!($39)) {
     __THREW__ = 0;
     HEAPF64[$vararg_buffer9>>3] = $4;
     $40 = (invoke_iiiii(780,($7|0),($37|0),($5|0),($vararg_buffer9|0))|0);
     $41 = __THREW__; __THREW__ = 0;
     $42 = $41&1;
     if (!($42)) {
      $$1 = $40;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $43 = HEAP32[$7>>2]|0;
    $44 = ($43|0)==(0|0);
    if (!($44)) {
     $45 = $43;
     $$2 = $$1;$$pre8082 = $43;$$sroa$069$0 = $45;
     label = 16;
     break;
    }
    __THREW__ = 0;
    invoke_v(777);
    $46 = __THREW__; __THREW__ = 0;
    $47 = $46&1;
    if (!($47)) {
     $$pre = HEAP32[$7>>2]|0;
     $48 = $$pre;
     $$2 = $$1;$$pre8082 = $48;$$sroa$069$0 = $$pre;
     label = 16;
     break;
    }
   }
   $35 = ___cxa_find_matching_catch_2()|0;
   $36 = tempRet0;
   $$45489 = $36;$$490 = $35;
  } else {
   $$pre79 = HEAP32[$7>>2]|0;
   $$2 = $$0;$$pre8082 = $$pre79;$$sroa$069$0 = 0;
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $49 = (($$pre8082) + ($$2)|0);
  $50 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($$pre8082,$49,$2)|0);
  $51 = ($$pre8082|0)==($6|0);
  L22: do {
   if ($51) {
    $$046 = $8;$$sroa$058$0 = 0;$63 = $6;
    label = 22;
   } else {
    $52 = $$2 << 3;
    $53 = (_malloc($52)|0);
    $54 = ($53|0)==(0|0);
    do {
     if ($54) {
      __THREW__ = 0;
      invoke_v(777);
      $55 = __THREW__; __THREW__ = 0;
      $56 = $55&1;
      if ($56) {
       $57 = ___cxa_find_matching_catch_2()|0;
       $58 = tempRet0;
       $$24987 = $57;$$25286 = $58;
       break L22;
      } else {
       $$pre80$pre = HEAP32[$7>>2]|0;
       $$pre80 = $$pre80$pre;
       break;
      }
     } else {
      $$pre80 = $$pre8082;
     }
    } while(0);
    $59 = $53;
    $$046 = $53;$$sroa$058$0 = $59;$63 = $$pre80;
    label = 22;
   }
  } while(0);
  if ((label|0) == 22) {
   __THREW__ = 0;
   $60 = (invoke_ii(658,($2|0))|0);
   $61 = __THREW__; __THREW__ = 0;
   $62 = $61&1;
   do {
    if ($62) {
     $77 = ___cxa_find_matching_catch_2()|0;
     $78 = tempRet0;
     $$047 = $77;$$050 = $78;
     label = 32;
    } else {
     HEAP32[$11>>2] = $60;
     __THREW__ = 0;
     invoke_viiiiiii(786,($63|0),($50|0),($49|0),($$046|0),($9|0),($10|0),($11|0));
     $64 = __THREW__; __THREW__ = 0;
     $65 = $64&1;
     if ($65) {
      $79 = ___cxa_find_matching_catch_2()|0;
      $80 = tempRet0;
      $81 = HEAP32[$11>>2]|0;
      (__ZNSt3__214__shared_count16__release_sharedEv($81)|0);
      $$047 = $79;$$050 = $80;
      label = 32;
      break;
     }
     $66 = HEAP32[$11>>2]|0;
     (__ZNSt3__214__shared_count16__release_sharedEv($66)|0);
     $67 = HEAP32[$1>>2]|0;
     HEAP32[$12>>2] = $67;
     $68 = HEAP32[$9>>2]|0;
     $69 = HEAP32[$10>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
     $70 = (invoke_iiiiiii(787,($$byval_copy|0),($$046|0),($68|0),($69|0),($2|0),($3|0))|0);
     $71 = __THREW__; __THREW__ = 0;
     $72 = $71&1;
     if ($72) {
      $82 = ___cxa_find_matching_catch_2()|0;
      $83 = tempRet0;
      $$148 = $82;$$151 = $83;
      break;
     }
     HEAP32[$1>>2] = $70;
     $73 = ($$sroa$058$0|0)==(0);
     if (!($73)) {
      $74 = $$sroa$058$0;
      _free($74);
     }
     $75 = ($$sroa$069$0|0)==(0);
     if (!($75)) {
      $76 = $$sroa$069$0;
      _free($76);
     }
     STACKTOP = sp;return ($70|0);
    }
   } while(0);
   if ((label|0) == 32) {
    $$148 = $$047;$$151 = $$050;
   }
   $84 = ($$sroa$058$0|0)==(0);
   if ($84) {
    $$24987 = $$148;$$25286 = $$151;
   } else {
    $85 = $$sroa$058$0;
    _free($85);
    $$24987 = $$148;$$25286 = $$151;
   }
  }
  $86 = ($$sroa$069$0|0)==(0);
  if ($86) {
   $$45489 = $$25286;$$490 = $$24987;
  } else {
   $87 = $$sroa$069$0;
   _free($87);
   $$45489 = $$25286;$$490 = $$24987;
  }
 }
 ___resumeException($$490|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $$byval_copy = sp + 160|0;
 $vararg_buffer = sp;
 $5 = sp + 184|0;
 $6 = sp + 164|0;
 $7 = sp + 12|0;
 $8 = sp + 8|0;
 $9 = sp + 4|0;
 ;HEAP8[$5>>0]=HEAP8[32869>>0]|0;HEAP8[$5+1>>0]=HEAP8[32869+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[32869+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[32869+3>>0]|0;HEAP8[$5+4>>0]=HEAP8[32869+4>>0]|0;HEAP8[$5+5>>0]=HEAP8[32869+5>>0]|0;
 $10 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $4;
 $11 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,20,$10,$5,$vararg_buffer)|0);
 $12 = (($6) + ($11)|0);
 $13 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($6,$12,$2)|0);
 $14 = (__ZNKSt3__28ios_base6getlocEv($2)|0);
 HEAP32[$8>>2] = $14;
 __THREW__ = 0;
 $15 = (invoke_iii(659,($8|0),(40744|0))|0);
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $29 = ___cxa_find_matching_catch_2()|0;
  $30 = tempRet0;
  (__ZNSt3__214__shared_count16__release_sharedEv($14)|0);
  ___resumeException($29|0);
  // unreachable;
 } else {
  (__ZNSt3__214__shared_count16__release_sharedEv($14)|0);
  $18 = HEAP32[$15>>2]|0;
  $19 = ((($18)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  (FUNCTION_TABLE_iiiii[$20 & 1023]($15,$6,$12,$7)|0);
  $21 = (($7) + ($11<<2)|0);
  $22 = ($13|0)==($12|0);
  $23 = $6;
  $24 = $13;
  $25 = (($24) - ($23))|0;
  $26 = (($7) + ($25<<2)|0);
  $$0 = $22 ? $21 : $26;
  $27 = HEAP32[$1>>2]|0;
  HEAP32[$9>>2] = $27;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$9>>2]|0;
  $28 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$7,$$0,$21,$2,$3)|0);
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$sroa$0$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp;
 $7 = HEAP32[$0>>2]|0;
 $8 = ($7|0)==(0|0);
 L1: do {
  if ($8) {
   $$sroa$0$2 = 0;
  } else {
   $9 = $3;
   $10 = $1;
   $11 = (($9) - ($10))|0;
   $12 = $11 >> 2;
   $13 = ((($4)) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)>($12|0);
   $16 = (($14) - ($12))|0;
   $$0 = $15 ? $16 : 0;
   $17 = $2;
   $18 = (($17) - ($10))|0;
   $19 = $18 >> 2;
   $20 = ($18|0)>(0);
   if ($20) {
    $21 = HEAP32[$7>>2]|0;
    $22 = ((($21)) + 48|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_iiii[$23 & 1023]($7,$1,$19)|0);
    $25 = ($24|0)==($19|0);
    if (!($25)) {
     HEAP32[$0>>2] = 0;
     $$sroa$0$2 = 0;
     break;
    }
   }
   $26 = ($$0|0)>(0);
   do {
    if ($26) {
     ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
     __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($6,$$0,$5);
     $27 = ((($6)) + 8|0);
     $28 = ((($27)) + 3|0);
     $29 = HEAP8[$28>>0]|0;
     $30 = ($29<<24>>24)<(0);
     $31 = HEAP32[$6>>2]|0;
     $32 = $30 ? $31 : $6;
     $33 = HEAP32[$7>>2]|0;
     $34 = ((($33)) + 48|0);
     $35 = HEAP32[$34>>2]|0;
     __THREW__ = 0;
     $36 = (invoke_iiii($35|0,($7|0),($32|0),($$0|0))|0);
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     if ($38) {
      $40 = ___cxa_find_matching_catch_2()|0;
      $41 = tempRet0;
      __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($6);
      ___resumeException($40|0);
      // unreachable;
     }
     $39 = ($36|0)==($$0|0);
     if ($39) {
      __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($6);
      break;
     } else {
      HEAP32[$0>>2] = 0;
      __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($6);
      $$sroa$0$2 = 0;
      break L1;
     }
    }
   } while(0);
   $42 = (($9) - ($17))|0;
   $43 = $42 >> 2;
   $44 = ($42|0)>(0);
   if ($44) {
    $45 = HEAP32[$7>>2]|0;
    $46 = ((($45)) + 48|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (FUNCTION_TABLE_iiii[$47 & 1023]($7,$2,$43)|0);
    $49 = ($48|0)==($43|0);
    if (!($49)) {
     HEAP32[$0>>2] = 0;
     $$sroa$0$2 = 0;
     break;
    }
   }
   HEAP32[$13>>2] = 0;
   $$sroa$0$2 = $7;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$0$2|0);
}
function __ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$$0111 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i130 = 0, $$0111 = 0, $$0112 = 0, $$0114 = 0, $$0116 = 0, $$07$i$i = 0, $$07$i$i129 = 0, $$1 = 0, $$1113 = 0, $$1115 = 0, $$1117 = 0, $$2 = 0, $$2118 = 0, $$3 = 0, $$pre$phiZ2D = 0, $$sink$sink$sink$index = 0, $$sink$sink$sink$index6 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $7 = sp;
 $8 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,40744)|0);
 $9 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,40752)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 FUNCTION_TABLE_vii[$12 & 1023]($7,$9);
 HEAP32[$5>>2] = $3;
 $13 = HEAP8[$0>>0]|0;
 L1: do {
  switch ($13<<24>>24) {
  case 43: case 45:  {
   $14 = HEAP32[$8>>2]|0;
   $15 = ((($14)) + 44|0);
   $16 = HEAP32[$15>>2]|0;
   __THREW__ = 0;
   $17 = (invoke_iii($16|0,($8|0),($13|0))|0);
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   if ($19) {
    $23 = ___cxa_find_matching_catch_2()|0;
    $24 = tempRet0;
    $$sink$sink$sink$index = $23;$$sink$sink$sink$index6 = $24;
    break L1;
   } else {
    $20 = ((($0)) + 1|0);
    $21 = HEAP32[$5>>2]|0;
    $22 = ((($21)) + 4|0);
    HEAP32[$5>>2] = $22;
    HEAP32[$21>>2] = $17;
    $$0114 = $20;
    label = 5;
    break L1;
   }
   break;
  }
  default: {
   $$0114 = $0;
   label = 5;
  }
  }
 } while(0);
 L6: do {
  if ((label|0) == 5) {
   $25 = $2;
   $26 = $$0114;
   $27 = (($25) - ($26))|0;
   $28 = ($27|0)>(1);
   L8: do {
    if ($28) {
     $29 = HEAP8[$$0114>>0]|0;
     $30 = ($29<<24>>24)==(48);
     if ($30) {
      $31 = ((($$0114)) + 1|0);
      $32 = HEAP8[$31>>0]|0;
      switch ($32<<24>>24) {
      case 88: case 120:  {
       break;
      }
      default: {
       $$1117 = $$0114;
       label = 20;
       break L8;
      }
      }
      $33 = HEAP32[$8>>2]|0;
      $34 = ((($33)) + 44|0);
      $35 = HEAP32[$34>>2]|0;
      __THREW__ = 0;
      $36 = (invoke_iii($35|0,($8|0),48)|0);
      $37 = __THREW__; __THREW__ = 0;
      $38 = $37&1;
      if (!($38)) {
       $39 = HEAP32[$5>>2]|0;
       $40 = ((($39)) + 4|0);
       HEAP32[$5>>2] = $40;
       HEAP32[$39>>2] = $36;
       $41 = ((($$0114)) + 2|0);
       $42 = HEAP8[$31>>0]|0;
       $43 = HEAP32[$8>>2]|0;
       $44 = ((($43)) + 44|0);
       $45 = HEAP32[$44>>2]|0;
       __THREW__ = 0;
       $46 = (invoke_iii($45|0,($8|0),($42|0))|0);
       $47 = __THREW__; __THREW__ = 0;
       $48 = $47&1;
       if (!($48)) {
        $49 = HEAP32[$5>>2]|0;
        $50 = ((($49)) + 4|0);
        HEAP32[$5>>2] = $50;
        HEAP32[$49>>2] = $46;
        $$0116 = $41;
        while(1) {
         $51 = ($$0116>>>0)<($2>>>0);
         if (!($51)) {
          $$1115 = $41;$$2118 = $$0116;
          label = 25;
          break L8;
         }
         $52 = HEAP8[$$0116>>0]|0;
         __THREW__ = 0;
         $53 = (invoke_i(762)|0);
         $54 = __THREW__; __THREW__ = 0;
         $55 = $54&1;
         if ($55) {
          break;
         }
         $56 = $52 << 24 >> 24;
         __THREW__ = 0;
         $57 = (invoke_iii(783,($56|0),($53|0))|0);
         $58 = __THREW__; __THREW__ = 0;
         $59 = $58&1;
         if ($59) {
          break;
         }
         $60 = ($57|0)==(0);
         if ($60) {
          $$1115 = $41;$$2118 = $$0116;
          label = 25;
          break L8;
         }
         $69 = ((($$0116)) + 1|0);
         $$0116 = $69;
        }
        $65 = ___cxa_find_matching_catch_2()|0;
        $66 = tempRet0;
        $$sink$sink$sink$index = $65;$$sink$sink$sink$index6 = $66;
        break L6;
       }
      }
     } else {
      $$1117 = $$0114;
      label = 20;
     }
    } else {
     $$1117 = $$0114;
     label = 20;
    }
   } while(0);
   L21: do {
    if ((label|0) == 20) {
     while(1) {
      label = 0;
      $70 = ($$1117>>>0)<($2>>>0);
      if (!($70)) {
       $$1115 = $$0114;$$2118 = $$1117;
       label = 25;
       break L21;
      }
      $71 = HEAP8[$$1117>>0]|0;
      __THREW__ = 0;
      $72 = (invoke_i(762)|0);
      $73 = __THREW__; __THREW__ = 0;
      $74 = $73&1;
      if ($74) {
       break;
      }
      $75 = $71 << 24 >> 24;
      __THREW__ = 0;
      $76 = (invoke_iii(784,($75|0),($72|0))|0);
      $77 = __THREW__; __THREW__ = 0;
      $78 = $77&1;
      if ($78) {
       break;
      }
      $79 = ($76|0)==(0);
      if ($79) {
       $$1115 = $$0114;$$2118 = $$1117;
       label = 25;
       break L21;
      }
      $80 = ((($$1117)) + 1|0);
      $$1117 = $80;
      label = 20;
     }
     $63 = ___cxa_find_matching_catch_2()|0;
     $64 = tempRet0;
     $$sink$sink$sink$index = $63;$$sink$sink$sink$index6 = $64;
     break L6;
    }
   } while(0);
   L29: do {
    if ((label|0) == 25) {
     $81 = ((($7)) + 11|0);
     $82 = HEAP8[$81>>0]|0;
     $83 = ($82<<24>>24)<(0);
     $84 = ((($7)) + 4|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = $82&255;
     $87 = $83 ? $85 : $86;
     $88 = ($87|0)==(0);
     L31: do {
      if ($88) {
       $89 = HEAP32[$5>>2]|0;
       $90 = HEAP32[$8>>2]|0;
       $91 = ((($90)) + 48|0);
       $92 = HEAP32[$91>>2]|0;
       __THREW__ = 0;
       (invoke_iiiii($92|0,($8|0),($$1115|0),($$2118|0),($89|0))|0);
       $93 = __THREW__; __THREW__ = 0;
       $94 = $93&1;
       if ($94) {
        break L29;
       }
       $95 = $$2118;
       $96 = $$1115;
       $97 = (($95) - ($96))|0;
       $98 = HEAP32[$5>>2]|0;
       $99 = (($98) + ($97<<2)|0);
       HEAP32[$5>>2] = $99;
       $$pre$phiZ2D = $8;$190 = $99;
      } else {
       $100 = ($$1115|0)==($$2118|0);
       L35: do {
        if (!($100)) {
         $$0$i$i = $$2118;$$07$i$i = $$1115;
         while(1) {
          $101 = ((($$0$i$i)) + -1|0);
          $102 = ($$07$i$i>>>0)<($101>>>0);
          if (!($102)) {
           break L35;
          }
          $103 = HEAP8[$$07$i$i>>0]|0;
          $104 = HEAP8[$101>>0]|0;
          HEAP8[$$07$i$i>>0] = $104;
          HEAP8[$101>>0] = $103;
          $105 = ((($$07$i$i)) + 1|0);
          $$0$i$i = $101;$$07$i$i = $105;
         }
        }
       } while(0);
       $106 = HEAP32[$9>>2]|0;
       $107 = ((($106)) + 16|0);
       $108 = HEAP32[$107>>2]|0;
       __THREW__ = 0;
       $109 = (invoke_ii($108|0,($9|0))|0);
       $110 = __THREW__; __THREW__ = 0;
       $111 = $110&1;
       if ($111) {
        break L29;
       }
       $$0 = $$1115;$$0111 = 0;$$0112 = 0;
       while(1) {
        $112 = ($$0>>>0)<($$2118>>>0);
        if (!($112)) {
         break;
        }
        $124 = HEAP8[$81>>0]|0;
        $125 = ($124<<24>>24)<(0);
        $126 = HEAP32[$7>>2]|0;
        $127 = $125 ? $126 : $7;
        $128 = (($127) + ($$0111)|0);
        $129 = HEAP8[$128>>0]|0;
        $130 = ($129<<24>>24)>(0);
        $131 = $129 << 24 >> 24;
        $132 = ($$0112|0)==($131|0);
        $or$cond = $130 & $132;
        if ($or$cond) {
         $133 = HEAP32[$5>>2]|0;
         $134 = ((($133)) + 4|0);
         HEAP32[$5>>2] = $134;
         HEAP32[$133>>2] = $109;
         $135 = HEAP32[$84>>2]|0;
         $136 = $124&255;
         $137 = $125 ? $135 : $136;
         $138 = (($137) + -1)|0;
         $139 = ($$0111>>>0)<($138>>>0);
         $140 = $139&1;
         $$$0111 = (($140) + ($$0111))|0;
         $$1 = $$$0111;$$1113 = 0;
        } else {
         $$1 = $$0111;$$1113 = $$0112;
        }
        $143 = HEAP8[$$0>>0]|0;
        $144 = HEAP32[$8>>2]|0;
        $145 = ((($144)) + 44|0);
        $146 = HEAP32[$145>>2]|0;
        __THREW__ = 0;
        $147 = (invoke_iii($146|0,($8|0),($143|0))|0);
        $148 = __THREW__; __THREW__ = 0;
        $149 = $148&1;
        if ($149) {
         label = 40;
         break;
        }
        $150 = HEAP32[$5>>2]|0;
        $151 = ((($150)) + 4|0);
        HEAP32[$5>>2] = $151;
        HEAP32[$150>>2] = $147;
        $152 = (($$1113) + 1)|0;
        $153 = ((($$0)) + 1|0);
        $$0 = $153;$$0111 = $$1;$$0112 = $152;
       }
       if ((label|0) == 40) {
        $141 = ___cxa_find_matching_catch_2()|0;
        $142 = tempRet0;
        $$sink$sink$sink$index = $141;$$sink$sink$sink$index6 = $142;
        break L6;
       }
       $113 = $$1115;
       $114 = $0;
       $115 = (($113) - ($114))|0;
       $116 = (($3) + ($115<<2)|0);
       $117 = HEAP32[$5>>2]|0;
       $118 = ($116|0)==($117|0);
       if ($118) {
        $$pre$phiZ2D = $8;$190 = $116;
       } else {
        $$0$i$i130 = $117;$$07$i$i129 = $116;
        while(1) {
         $119 = ((($$0$i$i130)) + -4|0);
         $120 = ($$07$i$i129>>>0)<($119>>>0);
         if (!($120)) {
          $$pre$phiZ2D = $8;$190 = $117;
          break L31;
         }
         $121 = HEAP32[$$07$i$i129>>2]|0;
         $122 = HEAP32[$119>>2]|0;
         HEAP32[$$07$i$i129>>2] = $122;
         HEAP32[$119>>2] = $121;
         $123 = ((($$07$i$i129)) + 4|0);
         $$0$i$i130 = $119;$$07$i$i129 = $123;
        }
       }
      }
     } while(0);
     $$2 = $$2118;$191 = $190;
     while(1) {
      $154 = ($$2>>>0)<($2>>>0);
      if (!($154)) {
       $$3 = $$2;$178 = $191;
       break;
      }
      $155 = HEAP8[$$2>>0]|0;
      $156 = ($155<<24>>24)==(46);
      if ($156) {
       label = 45;
       break;
      }
      $166 = HEAP32[$$pre$phiZ2D>>2]|0;
      $167 = ((($166)) + 44|0);
      $168 = HEAP32[$167>>2]|0;
      __THREW__ = 0;
      $169 = (invoke_iii($168|0,($8|0),($155|0))|0);
      $170 = __THREW__; __THREW__ = 0;
      $171 = $170&1;
      if ($171) {
       label = 15;
       break;
      }
      $172 = HEAP32[$5>>2]|0;
      $173 = ((($172)) + 4|0);
      HEAP32[$5>>2] = $173;
      HEAP32[$172>>2] = $169;
      $174 = ((($$2)) + 1|0);
      $$2 = $174;$191 = $173;
     }
     if ((label|0) == 15) {
      $61 = ___cxa_find_matching_catch_2()|0;
      $62 = tempRet0;
      $$sink$sink$sink$index = $61;$$sink$sink$sink$index6 = $62;
      break L6;
     }
     if ((label|0) == 45) {
      $157 = HEAP32[$9>>2]|0;
      $158 = ((($157)) + 12|0);
      $159 = HEAP32[$158>>2]|0;
      __THREW__ = 0;
      $160 = (invoke_ii($159|0,($9|0))|0);
      $161 = __THREW__; __THREW__ = 0;
      $162 = $161&1;
      if ($162) {
       break;
      }
      $163 = HEAP32[$5>>2]|0;
      $164 = ((($163)) + 4|0);
      HEAP32[$5>>2] = $164;
      HEAP32[$163>>2] = $160;
      $165 = ((($$2)) + 1|0);
      $$3 = $165;$178 = $164;
     }
     $175 = HEAP32[$8>>2]|0;
     $176 = ((($175)) + 48|0);
     $177 = HEAP32[$176>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($177|0,($8|0),($$3|0),($2|0),($178|0))|0);
     $179 = __THREW__; __THREW__ = 0;
     $180 = $179&1;
     if (!($180)) {
      $181 = $$3;
      $182 = (($25) - ($181))|0;
      $183 = HEAP32[$5>>2]|0;
      $184 = (($183) + ($182<<2)|0);
      HEAP32[$5>>2] = $184;
      $185 = ($1|0)==($2|0);
      $186 = $1;
      $187 = $0;
      $188 = (($186) - ($187))|0;
      $189 = (($3) + ($188<<2)|0);
      $storemerge = $185 ? $184 : $189;
      HEAP32[$4>>2] = $storemerge;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
      STACKTOP = sp;return;
     }
    }
   } while(0);
   $67 = ___cxa_find_matching_catch_2()|0;
   $68 = tempRet0;
   $$sink$sink$sink$index = $67;$$sink$sink$sink$index6 = $68;
  }
 } while(0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 ___resumeException($$sink$sink$sink$index|0);
 // unreachable;
}
function __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$$081 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i96 = 0, $$07$i$i = 0, $$07$i$i95 = 0, $$081 = 0, $$082 = 0, $$086 = 0, $$1 = 0, $$183 = 0, $$187 = 0, $$pre$phiZ2D = 0, $$sink$sink$sink$index = 0, $$sink$sink$sink$index3 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $storemerge = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $7 = sp;
 $8 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,40744)|0);
 $9 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,40752)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 FUNCTION_TABLE_vii[$12 & 1023]($7,$9);
 $13 = ((($7)) + 11|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)<(0);
 $16 = ((($7)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $14&255;
 $19 = $15 ? $17 : $18;
 $20 = ($19|0)==(0);
 L1: do {
  if ($20) {
   $21 = HEAP32[$8>>2]|0;
   $22 = ((($21)) + 48|0);
   $23 = HEAP32[$22>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($23|0,($8|0),($0|0),($2|0),($3|0))|0);
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if ($25) {
    $30 = ___cxa_find_matching_catch_2()|0;
    $31 = tempRet0;
    $$sink$sink$sink$index = $30;$$sink$sink$sink$index3 = $31;
    label = 30;
    break;
   } else {
    $26 = $2;
    $27 = $0;
    $28 = (($26) - ($27))|0;
    $29 = (($3) + ($28<<2)|0);
    HEAP32[$5>>2] = $29;
    $$pre$phiZ2D = $27;$128 = $29;
    label = 29;
    break;
   }
  } else {
   HEAP32[$5>>2] = $3;
   $32 = HEAP8[$0>>0]|0;
   switch ($32<<24>>24) {
   case 43: case 45:  {
    $33 = HEAP32[$8>>2]|0;
    $34 = ((($33)) + 44|0);
    $35 = HEAP32[$34>>2]|0;
    __THREW__ = 0;
    $36 = (invoke_iii($35|0,($8|0),($32|0))|0);
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if (!($38)) {
     $39 = ((($0)) + 1|0);
     $40 = HEAP32[$5>>2]|0;
     $41 = ((($40)) + 4|0);
     HEAP32[$5>>2] = $41;
     HEAP32[$40>>2] = $36;
     $$086 = $39;
     label = 9;
    }
    break;
   }
   default: {
    $$086 = $0;
    label = 9;
   }
   }
   L10: do {
    if ((label|0) == 9) {
     $44 = $2;
     $45 = $$086;
     $46 = (($44) - ($45))|0;
     $47 = ($46|0)>(1);
     L12: do {
      if ($47) {
       $48 = HEAP8[$$086>>0]|0;
       $49 = ($48<<24>>24)==(48);
       if ($49) {
        $50 = ((($$086)) + 1|0);
        $51 = HEAP8[$50>>0]|0;
        switch ($51<<24>>24) {
        case 88: case 120:  {
         break;
        }
        default: {
         $$187 = $$086;
         break L12;
        }
        }
        $52 = HEAP32[$8>>2]|0;
        $53 = ((($52)) + 44|0);
        $54 = HEAP32[$53>>2]|0;
        __THREW__ = 0;
        $55 = (invoke_iii($54|0,($8|0),48)|0);
        $56 = __THREW__; __THREW__ = 0;
        $57 = $56&1;
        if ($57) {
         break L10;
        }
        $58 = HEAP32[$5>>2]|0;
        $59 = ((($58)) + 4|0);
        HEAP32[$5>>2] = $59;
        HEAP32[$58>>2] = $55;
        $60 = HEAP8[$50>>0]|0;
        $61 = HEAP32[$8>>2]|0;
        $62 = ((($61)) + 44|0);
        $63 = HEAP32[$62>>2]|0;
        __THREW__ = 0;
        $64 = (invoke_iii($63|0,($8|0),($60|0))|0);
        $65 = __THREW__; __THREW__ = 0;
        $66 = $65&1;
        if ($66) {
         break L10;
        }
        $67 = ((($$086)) + 2|0);
        $68 = HEAP32[$5>>2]|0;
        $69 = ((($68)) + 4|0);
        HEAP32[$5>>2] = $69;
        HEAP32[$68>>2] = $64;
        $$187 = $67;
       } else {
        $$187 = $$086;
       }
      } else {
       $$187 = $$086;
      }
     } while(0);
     $70 = ($$187|0)==($2|0);
     L19: do {
      if (!($70)) {
       $$0$i$i = $2;$$07$i$i = $$187;
       while(1) {
        $71 = ((($$0$i$i)) + -1|0);
        $72 = ($$07$i$i>>>0)<($71>>>0);
        if (!($72)) {
         break L19;
        }
        $73 = HEAP8[$$07$i$i>>0]|0;
        $74 = HEAP8[$71>>0]|0;
        HEAP8[$$07$i$i>>0] = $74;
        HEAP8[$71>>0] = $73;
        $75 = ((($$07$i$i)) + 1|0);
        $$0$i$i = $71;$$07$i$i = $75;
       }
      }
     } while(0);
     $76 = HEAP32[$9>>2]|0;
     $77 = ((($76)) + 16|0);
     $78 = HEAP32[$77>>2]|0;
     __THREW__ = 0;
     $79 = (invoke_ii($78|0,($9|0))|0);
     $80 = __THREW__; __THREW__ = 0;
     $81 = $80&1;
     if (!($81)) {
      $$0 = $$187;$$081 = 0;$$082 = 0;
      while(1) {
       $82 = ($$0>>>0)<($2>>>0);
       if (!($82)) {
        break;
       }
       $94 = HEAP8[$13>>0]|0;
       $95 = ($94<<24>>24)<(0);
       $96 = HEAP32[$7>>2]|0;
       $97 = $95 ? $96 : $7;
       $98 = (($97) + ($$081)|0);
       $99 = HEAP8[$98>>0]|0;
       $100 = ($99<<24>>24)!=(0);
       $101 = $99 << 24 >> 24;
       $102 = ($$082|0)==($101|0);
       $or$cond = $100 & $102;
       if ($or$cond) {
        $103 = HEAP32[$5>>2]|0;
        $104 = ((($103)) + 4|0);
        HEAP32[$5>>2] = $104;
        HEAP32[$103>>2] = $79;
        $105 = HEAP32[$16>>2]|0;
        $106 = $94&255;
        $107 = $95 ? $105 : $106;
        $108 = (($107) + -1)|0;
        $109 = ($$081>>>0)<($108>>>0);
        $110 = $109&1;
        $$$081 = (($110) + ($$081))|0;
        $$1 = $$$081;$$183 = 0;
       } else {
        $$1 = $$081;$$183 = $$082;
       }
       $113 = HEAP8[$$0>>0]|0;
       $114 = HEAP32[$8>>2]|0;
       $115 = ((($114)) + 44|0);
       $116 = HEAP32[$115>>2]|0;
       __THREW__ = 0;
       $117 = (invoke_iii($116|0,($8|0),($113|0))|0);
       $118 = __THREW__; __THREW__ = 0;
       $119 = $118&1;
       if ($119) {
        label = 26;
        break;
       }
       $120 = HEAP32[$5>>2]|0;
       $121 = ((($120)) + 4|0);
       HEAP32[$5>>2] = $121;
       HEAP32[$120>>2] = $117;
       $122 = (($$183) + 1)|0;
       $123 = ((($$0)) + 1|0);
       $$0 = $123;$$081 = $$1;$$082 = $122;
      }
      if ((label|0) == 26) {
       $111 = ___cxa_find_matching_catch_2()|0;
       $112 = tempRet0;
       $$sink$sink$sink$index = $111;$$sink$sink$sink$index3 = $112;
       label = 30;
       break L1;
      }
      $83 = $$187;
      $84 = $0;
      $85 = (($83) - ($84))|0;
      $86 = (($3) + ($85<<2)|0);
      $87 = HEAP32[$5>>2]|0;
      $88 = ($86|0)==($87|0);
      if ($88) {
       $$pre$phiZ2D = $84;$128 = $86;
       label = 29;
       break L1;
      } else {
       $$0$i$i96 = $87;$$07$i$i95 = $86;
      }
      while(1) {
       $89 = ((($$0$i$i96)) + -4|0);
       $90 = ($$07$i$i95>>>0)<($89>>>0);
       if (!($90)) {
        $$pre$phiZ2D = $84;$128 = $87;
        label = 29;
        break L1;
       }
       $91 = HEAP32[$$07$i$i95>>2]|0;
       $92 = HEAP32[$89>>2]|0;
       HEAP32[$$07$i$i95>>2] = $92;
       HEAP32[$89>>2] = $91;
       $93 = ((($$07$i$i95)) + 4|0);
       $$0$i$i96 = $89;$$07$i$i95 = $93;
      }
     }
    }
   } while(0);
   $42 = ___cxa_find_matching_catch_2()|0;
   $43 = tempRet0;
   $$sink$sink$sink$index = $42;$$sink$sink$sink$index3 = $43;
   label = 30;
  }
 } while(0);
 if ((label|0) == 29) {
  $124 = ($1|0)==($2|0);
  $125 = $1;
  $126 = (($125) - ($$pre$phiZ2D))|0;
  $127 = (($3) + ($126<<2)|0);
  $storemerge = $124 ? $128 : $127;
  HEAP32[$4>>2] = $storemerge;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 30) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
  ___resumeException($$sink$sink$sink$index|0);
  // unreachable;
 }
}
function __ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy,$$byval_copy1,$3,$4,$5,33405,(33413))|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_ii[$11 & 1023]($8)|0);
 $13 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $13;
 $14 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $14;
 $15 = ((($12)) + 11|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)<(0);
 $18 = HEAP32[$12>>2]|0;
 $19 = $17 ? $18 : $12;
 $20 = ((($12)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $16&255;
 $23 = $17 ? $21 : $22;
 $24 = (($19) + ($23)|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $25 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy,$$byval_copy1,$3,$4,$5,$19,$24)|0);
 STACKTOP = sp;return ($25|0);
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$sroa$0$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = (__ZNKSt3__28ios_base6getlocEv($3)|0);
 HEAP32[$6>>2] = $8;
 __THREW__ = 0;
 $9 = (invoke_iii(659,($6|0),(40712|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  (__ZNSt3__214__shared_count16__release_sharedEv($8)|0);
  ___resumeException($14|0);
  // unreachable;
 } else {
  (__ZNSt3__214__shared_count16__release_sharedEv($8)|0);
  $12 = ((($5)) + 24|0);
  $13 = HEAP32[$2>>2]|0;
  HEAP32[$7>>2] = $13;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;
  __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($0,$12,$1,$$byval_copy,$4,$9);
  $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($$sroa$0$0$copyload|0);
 }
 return (0)|0;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$sroa$0$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = (__ZNKSt3__28ios_base6getlocEv($3)|0);
 HEAP32[$6>>2] = $8;
 __THREW__ = 0;
 $9 = (invoke_iii(659,($6|0),(40712|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  (__ZNSt3__214__shared_count16__release_sharedEv($8)|0);
  ___resumeException($14|0);
  // unreachable;
 } else {
  (__ZNSt3__214__shared_count16__release_sharedEv($8)|0);
  $12 = ((($5)) + 16|0);
  $13 = HEAP32[$2>>2]|0;
  HEAP32[$7>>2] = $13;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;
  __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($0,$12,$1,$$byval_copy,$4,$9);
  $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($$sroa$0$0$copyload|0);
 }
 return (0)|0;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$sroa$0$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = (__ZNKSt3__28ios_base6getlocEv($3)|0);
 HEAP32[$6>>2] = $8;
 __THREW__ = 0;
 $9 = (invoke_iii(659,($6|0),(40712|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  (__ZNSt3__214__shared_count16__release_sharedEv($8)|0);
  ___resumeException($14|0);
  // unreachable;
 } else {
  (__ZNSt3__214__shared_count16__release_sharedEv($8)|0);
  $12 = ((($5)) + 20|0);
  $13 = HEAP32[$2>>2]|0;
  HEAP32[$7>>2] = $13;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;
  __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($0,$12,$1,$$byval_copy,$4,$9);
  $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($$sroa$0$0$copyload|0);
 }
 return (0)|0;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0;
 var $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $$sroa$097$0 = 0, $$sroa$097$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $$byval_copy30 = sp + 248|0;
 $$byval_copy29 = sp + 244|0;
 $$byval_copy28 = sp + 240|0;
 $$byval_copy27 = sp + 236|0;
 $$byval_copy26 = sp + 232|0;
 $$byval_copy25 = sp + 228|0;
 $$byval_copy24 = sp + 224|0;
 $$byval_copy23 = sp + 220|0;
 $$byval_copy22 = sp + 216|0;
 $$byval_copy21 = sp + 212|0;
 $$byval_copy20 = sp + 208|0;
 $$byval_copy19 = sp + 204|0;
 $$byval_copy18 = sp + 200|0;
 $$byval_copy17 = sp + 196|0;
 $$byval_copy16 = sp + 192|0;
 $$byval_copy15 = sp + 188|0;
 $$byval_copy14 = sp + 184|0;
 $$byval_copy13 = sp + 180|0;
 $$byval_copy12 = sp + 176|0;
 $$byval_copy11 = sp + 172|0;
 $$byval_copy10 = sp + 168|0;
 $$byval_copy9 = sp + 164|0;
 $$byval_copy8 = sp + 160|0;
 $$byval_copy7 = sp + 156|0;
 $$byval_copy6 = sp + 152|0;
 $$byval_copy5 = sp + 148|0;
 $$byval_copy4 = sp + 144|0;
 $$byval_copy3 = sp + 140|0;
 $$byval_copy2 = sp + 136|0;
 $$byval_copy1 = sp + 132|0;
 $$byval_copy = sp + 128|0;
 $8 = sp + 124|0;
 $9 = sp + 120|0;
 $10 = sp + 116|0;
 $11 = sp + 112|0;
 $12 = sp + 108|0;
 $13 = sp + 104|0;
 $14 = sp + 100|0;
 $15 = sp + 96|0;
 $16 = sp + 92|0;
 $17 = sp + 88|0;
 $18 = sp + 84|0;
 $19 = sp + 80|0;
 $20 = sp + 76|0;
 $21 = sp + 72|0;
 $22 = sp + 68|0;
 $23 = sp + 64|0;
 $24 = sp + 60|0;
 $25 = sp + 56|0;
 $26 = sp + 52|0;
 $27 = sp + 48|0;
 $28 = sp + 44|0;
 $29 = sp + 40|0;
 $30 = sp + 36|0;
 $31 = sp + 32|0;
 $32 = sp + 28|0;
 $33 = sp + 24|0;
 $34 = sp + 20|0;
 $35 = sp + 16|0;
 $36 = sp + 12|0;
 $37 = sp + 8|0;
 $38 = sp + 4|0;
 $39 = sp;
 HEAP32[$4>>2] = 0;
 $40 = (__ZNKSt3__28ios_base6getlocEv($3)|0);
 HEAP32[$8>>2] = $40;
 __THREW__ = 0;
 $41 = (invoke_iii(659,($8|0),(40712|0))|0);
 $42 = __THREW__; __THREW__ = 0;
 $43 = $42&1;
 if ($43) {
  $45 = ___cxa_find_matching_catch_2()|0;
  $46 = tempRet0;
  (__ZNSt3__214__shared_count16__release_sharedEv($40)|0);
  ___resumeException($45|0);
  // unreachable;
 }
 (__ZNSt3__214__shared_count16__release_sharedEv($40)|0);
 $44 = $6 << 24 >> 24;
 do {
  switch ($44|0) {
  case 65: case 97:  {
   $47 = ((($5)) + 24|0);
   $48 = HEAP32[$2>>2]|0;
   HEAP32[$9>>2] = $48;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$9>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($0,$47,$1,$$byval_copy,$4,$41);
   label = 28;
   break;
  }
  case 104: case 66: case 98:  {
   $49 = ((($5)) + 16|0);
   $50 = HEAP32[$2>>2]|0;
   HEAP32[$10>>2] = $50;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$10>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($0,$49,$1,$$byval_copy1,$4,$41);
   label = 28;
   break;
  }
  case 99:  {
   $51 = ((($0)) + 8|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ((($52)) + 12|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (FUNCTION_TABLE_ii[$54 & 1023]($51)|0);
   $56 = HEAP32[$1>>2]|0;
   HEAP32[$11>>2] = $56;
   $57 = HEAP32[$2>>2]|0;
   HEAP32[$12>>2] = $57;
   $58 = ((($55)) + 11|0);
   $59 = HEAP8[$58>>0]|0;
   $60 = ($59<<24>>24)<(0);
   $61 = HEAP32[$55>>2]|0;
   $62 = $60 ? $61 : $55;
   $63 = ((($55)) + 4|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = $59&255;
   $66 = $60 ? $64 : $65;
   $67 = (($62) + ($66)|0);
   ;HEAP32[$$byval_copy2>>2]=HEAP32[$11>>2]|0;
   ;HEAP32[$$byval_copy3>>2]=HEAP32[$12>>2]|0;
   $68 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy2,$$byval_copy3,$3,$4,$5,$62,$67)|0);
   HEAP32[$1>>2] = $68;
   label = 28;
   break;
  }
  case 101: case 100:  {
   $69 = ((($5)) + 12|0);
   $70 = HEAP32[$2>>2]|0;
   HEAP32[$13>>2] = $70;
   ;HEAP32[$$byval_copy4>>2]=HEAP32[$13>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($0,$69,$1,$$byval_copy4,$4,$41);
   label = 28;
   break;
  }
  case 68:  {
   $71 = HEAP32[$1>>2]|0;
   HEAP32[$14>>2] = $71;
   $72 = HEAP32[$2>>2]|0;
   HEAP32[$15>>2] = $72;
   ;HEAP32[$$byval_copy5>>2]=HEAP32[$14>>2]|0;
   ;HEAP32[$$byval_copy6>>2]=HEAP32[$15>>2]|0;
   $73 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy5,$$byval_copy6,$3,$4,$5,33365,(33373))|0);
   HEAP32[$1>>2] = $73;
   label = 28;
   break;
  }
  case 70:  {
   $74 = HEAP32[$1>>2]|0;
   HEAP32[$16>>2] = $74;
   $75 = HEAP32[$2>>2]|0;
   HEAP32[$17>>2] = $75;
   ;HEAP32[$$byval_copy7>>2]=HEAP32[$16>>2]|0;
   ;HEAP32[$$byval_copy8>>2]=HEAP32[$17>>2]|0;
   $76 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy7,$$byval_copy8,$3,$4,$5,33373,(33381))|0);
   HEAP32[$1>>2] = $76;
   label = 28;
   break;
  }
  case 72:  {
   $77 = ((($5)) + 8|0);
   $78 = HEAP32[$2>>2]|0;
   HEAP32[$18>>2] = $78;
   ;HEAP32[$$byval_copy9>>2]=HEAP32[$18>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($0,$77,$1,$$byval_copy9,$4,$41);
   label = 28;
   break;
  }
  case 73:  {
   $79 = ((($5)) + 8|0);
   $80 = HEAP32[$2>>2]|0;
   HEAP32[$19>>2] = $80;
   ;HEAP32[$$byval_copy10>>2]=HEAP32[$19>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($0,$79,$1,$$byval_copy10,$4,$41);
   label = 28;
   break;
  }
  case 106:  {
   $81 = ((($5)) + 28|0);
   $82 = HEAP32[$2>>2]|0;
   HEAP32[$20>>2] = $82;
   ;HEAP32[$$byval_copy11>>2]=HEAP32[$20>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($0,$81,$1,$$byval_copy11,$4,$41);
   label = 28;
   break;
  }
  case 109:  {
   $83 = ((($5)) + 16|0);
   $84 = HEAP32[$2>>2]|0;
   HEAP32[$21>>2] = $84;
   ;HEAP32[$$byval_copy12>>2]=HEAP32[$21>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($0,$83,$1,$$byval_copy12,$4,$41);
   label = 28;
   break;
  }
  case 77:  {
   $85 = ((($5)) + 4|0);
   $86 = HEAP32[$2>>2]|0;
   HEAP32[$22>>2] = $86;
   ;HEAP32[$$byval_copy13>>2]=HEAP32[$22>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($0,$85,$1,$$byval_copy13,$4,$41);
   label = 28;
   break;
  }
  case 116: case 110:  {
   $87 = HEAP32[$2>>2]|0;
   HEAP32[$23>>2] = $87;
   ;HEAP32[$$byval_copy14>>2]=HEAP32[$23>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($0,$1,$$byval_copy14,$4,$41);
   label = 28;
   break;
  }
  case 112:  {
   $88 = ((($5)) + 8|0);
   $89 = HEAP32[$2>>2]|0;
   HEAP32[$24>>2] = $89;
   ;HEAP32[$$byval_copy15>>2]=HEAP32[$24>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($0,$88,$1,$$byval_copy15,$4,$41);
   label = 28;
   break;
  }
  case 114:  {
   $90 = HEAP32[$1>>2]|0;
   HEAP32[$25>>2] = $90;
   $91 = HEAP32[$2>>2]|0;
   HEAP32[$26>>2] = $91;
   ;HEAP32[$$byval_copy16>>2]=HEAP32[$25>>2]|0;
   ;HEAP32[$$byval_copy17>>2]=HEAP32[$26>>2]|0;
   $92 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy16,$$byval_copy17,$3,$4,$5,33381,(33392))|0);
   HEAP32[$1>>2] = $92;
   label = 28;
   break;
  }
  case 82:  {
   $93 = HEAP32[$1>>2]|0;
   HEAP32[$27>>2] = $93;
   $94 = HEAP32[$2>>2]|0;
   HEAP32[$28>>2] = $94;
   ;HEAP32[$$byval_copy18>>2]=HEAP32[$27>>2]|0;
   ;HEAP32[$$byval_copy19>>2]=HEAP32[$28>>2]|0;
   $95 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy18,$$byval_copy19,$3,$4,$5,33392,(33397))|0);
   HEAP32[$1>>2] = $95;
   label = 28;
   break;
  }
  case 83:  {
   $96 = HEAP32[$2>>2]|0;
   HEAP32[$29>>2] = $96;
   ;HEAP32[$$byval_copy20>>2]=HEAP32[$29>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($0,$5,$1,$$byval_copy20,$4,$41);
   label = 28;
   break;
  }
  case 84:  {
   $97 = HEAP32[$1>>2]|0;
   HEAP32[$30>>2] = $97;
   $98 = HEAP32[$2>>2]|0;
   HEAP32[$31>>2] = $98;
   ;HEAP32[$$byval_copy21>>2]=HEAP32[$30>>2]|0;
   ;HEAP32[$$byval_copy22>>2]=HEAP32[$31>>2]|0;
   $99 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy21,$$byval_copy22,$3,$4,$5,33397,(33405))|0);
   HEAP32[$1>>2] = $99;
   label = 28;
   break;
  }
  case 119:  {
   $100 = ((($5)) + 24|0);
   $101 = HEAP32[$2>>2]|0;
   HEAP32[$32>>2] = $101;
   ;HEAP32[$$byval_copy23>>2]=HEAP32[$32>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($0,$100,$1,$$byval_copy23,$4,$41);
   label = 28;
   break;
  }
  case 120:  {
   $102 = HEAP32[$0>>2]|0;
   $103 = ((($102)) + 20|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = HEAP32[$1>>2]|0;
   HEAP32[$33>>2] = $105;
   $106 = HEAP32[$2>>2]|0;
   HEAP32[$34>>2] = $106;
   ;HEAP32[$$byval_copy24>>2]=HEAP32[$33>>2]|0;
   ;HEAP32[$$byval_copy25>>2]=HEAP32[$34>>2]|0;
   $107 = (FUNCTION_TABLE_iiiiiii[$104 & 1023]($0,$$byval_copy24,$$byval_copy25,$3,$4,$5)|0);
   $$sroa$097$0 = $107;
   break;
  }
  case 88:  {
   $108 = ((($0)) + 8|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = ((($109)) + 24|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = (FUNCTION_TABLE_ii[$111 & 1023]($108)|0);
   $113 = HEAP32[$1>>2]|0;
   HEAP32[$35>>2] = $113;
   $114 = HEAP32[$2>>2]|0;
   HEAP32[$36>>2] = $114;
   $115 = ((($112)) + 11|0);
   $116 = HEAP8[$115>>0]|0;
   $117 = ($116<<24>>24)<(0);
   $118 = HEAP32[$112>>2]|0;
   $119 = $117 ? $118 : $112;
   $120 = ((($112)) + 4|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = $116&255;
   $123 = $117 ? $121 : $122;
   $124 = (($119) + ($123)|0);
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$35>>2]|0;
   ;HEAP32[$$byval_copy27>>2]=HEAP32[$36>>2]|0;
   $125 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy26,$$byval_copy27,$3,$4,$5,$119,$124)|0);
   HEAP32[$1>>2] = $125;
   label = 28;
   break;
  }
  case 121:  {
   $126 = ((($5)) + 20|0);
   $127 = HEAP32[$2>>2]|0;
   HEAP32[$37>>2] = $127;
   ;HEAP32[$$byval_copy28>>2]=HEAP32[$37>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($0,$126,$1,$$byval_copy28,$4,$41);
   label = 28;
   break;
  }
  case 89:  {
   $128 = ((($5)) + 20|0);
   $129 = HEAP32[$2>>2]|0;
   HEAP32[$38>>2] = $129;
   ;HEAP32[$$byval_copy29>>2]=HEAP32[$38>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($0,$128,$1,$$byval_copy29,$4,$41);
   label = 28;
   break;
  }
  case 37:  {
   $130 = HEAP32[$2>>2]|0;
   HEAP32[$39>>2] = $130;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$39>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($0,$1,$$byval_copy30,$4,$41);
   label = 28;
   break;
  }
  default: {
   $131 = HEAP32[$4>>2]|0;
   $132 = $131 | 4;
   HEAP32[$4>>2] = $132;
   label = 28;
  }
  }
 } while(0);
 if ((label|0) == 28) {
  $$sroa$097$0$copyload = HEAP32[$1>>2]|0;
  $$sroa$097$0 = $$sroa$097$0$copyload;
 }
 STACKTOP = sp;return ($$sroa$097$0|0);
}
function __ZNKSt3__220__time_get_c_storageIcE7__weeksEv($0) {
 $0 = $0|0;
 var $$0$i$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[35768]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $3 = (___cxa_guard_acquire(35768)|0);
   $4 = ($3|0)==(0);
   if (!($4)) {
    $5 = HEAP8[35776]|0;
    $6 = ($5<<24>>24)==(0);
    if ($6) {
     $7 = (___cxa_guard_acquire(35776)|0);
     $8 = ($7|0)==(0);
     if (!($8)) {
      $9 = 41416;
      while(1) {
       ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
       $$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $10 = (($9) + ($$0$i$i$i<<2)|0);
        HEAP32[$10>>2] = 0;
        $11 = (($$0$i$i$i) + 1)|0;
        $$0$i$i$i = $11;
       }
       $12 = ((($9)) + 12|0);
       $13 = ($12|0)==((41584)|0);
       if ($13) {
        break;
       } else {
        $9 = $12;
       }
      }
      (___cxa_atexit((788|0),(0|0),(___dso_handle|0))|0);
     }
    }
    __THREW__ = 0;
    (invoke_iii(742,(41416|0),(33280|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if (!($15)) {
     __THREW__ = 0;
     (invoke_iii(742,((41428)|0),(33287|0))|0);
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if (!($17)) {
      __THREW__ = 0;
      (invoke_iii(742,((41440)|0),(33294|0))|0);
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if (!($19)) {
       __THREW__ = 0;
       (invoke_iii(742,((41452)|0),(33302|0))|0);
       $20 = __THREW__; __THREW__ = 0;
       $21 = $20&1;
       if (!($21)) {
        __THREW__ = 0;
        (invoke_iii(742,((41464)|0),(33312|0))|0);
        $22 = __THREW__; __THREW__ = 0;
        $23 = $22&1;
        if (!($23)) {
         __THREW__ = 0;
         (invoke_iii(742,((41476)|0),(33321|0))|0);
         $24 = __THREW__; __THREW__ = 0;
         $25 = $24&1;
         if (!($25)) {
          __THREW__ = 0;
          (invoke_iii(742,((41488)|0),(33328|0))|0);
          $26 = __THREW__; __THREW__ = 0;
          $27 = $26&1;
          if (!($27)) {
           __THREW__ = 0;
           (invoke_iii(742,((41500)|0),(33337|0))|0);
           $28 = __THREW__; __THREW__ = 0;
           $29 = $28&1;
           if (!($29)) {
            __THREW__ = 0;
            (invoke_iii(742,((41512)|0),(33341|0))|0);
            $30 = __THREW__; __THREW__ = 0;
            $31 = $30&1;
            if (!($31)) {
             __THREW__ = 0;
             (invoke_iii(742,((41524)|0),(33345|0))|0);
             $32 = __THREW__; __THREW__ = 0;
             $33 = $32&1;
             if (!($33)) {
              __THREW__ = 0;
              (invoke_iii(742,((41536)|0),(33349|0))|0);
              $34 = __THREW__; __THREW__ = 0;
              $35 = $34&1;
              if (!($35)) {
               __THREW__ = 0;
               (invoke_iii(742,((41548)|0),(33353|0))|0);
               $36 = __THREW__; __THREW__ = 0;
               $37 = $36&1;
               if (!($37)) {
                __THREW__ = 0;
                (invoke_iii(742,((41560)|0),(33357|0))|0);
                $38 = __THREW__; __THREW__ = 0;
                $39 = $38&1;
                if (!($39)) {
                 __THREW__ = 0;
                 (invoke_iii(742,((41572)|0),(33361|0))|0);
                 $40 = __THREW__; __THREW__ = 0;
                 $41 = $40&1;
                 if (!($41)) {
                  HEAP32[10396] = 41416;
                  break;
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
    $43 = ___cxa_find_matching_catch_2()|0;
    $44 = tempRet0;
    ___resumeException($43|0);
    // unreachable;
   }
  }
 } while(0);
 $42 = HEAP32[10396]|0;
 return ($42|0);
}
function __ZNKSt3__220__time_get_c_storageIcE8__monthsEv($0) {
 $0 = $0|0;
 var $$0$i$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[35752]|0;
 $2 = ($1<<24>>24)==(0);
 L1: do {
  if ($2) {
   $3 = (___cxa_guard_acquire(35752)|0);
   $4 = ($3|0)==(0);
   if (!($4)) {
    $5 = HEAP8[35760]|0;
    $6 = ($5<<24>>24)==(0);
    if ($6) {
     $7 = (___cxa_guard_acquire(35760)|0);
     $8 = ($7|0)==(0);
     if (!($8)) {
      $9 = 41124;
      while(1) {
       ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
       $$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $10 = (($9) + ($$0$i$i$i<<2)|0);
        HEAP32[$10>>2] = 0;
        $11 = (($$0$i$i$i) + 1)|0;
        $$0$i$i$i = $11;
       }
       $12 = ((($9)) + 12|0);
       $13 = ($12|0)==((41412)|0);
       if ($13) {
        break;
       } else {
        $9 = $12;
       }
      }
      (___cxa_atexit((789|0),(0|0),(___dso_handle|0))|0);
     }
    }
    __THREW__ = 0;
    (invoke_iii(742,(41124|0),(33150|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    do {
     if (!($15)) {
      __THREW__ = 0;
      (invoke_iii(742,((41136)|0),(33158|0))|0);
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if (!($17)) {
       __THREW__ = 0;
       (invoke_iii(742,((41148)|0),(33167|0))|0);
       $18 = __THREW__; __THREW__ = 0;
       $19 = $18&1;
       if (!($19)) {
        __THREW__ = 0;
        (invoke_iii(742,((41160)|0),(33173|0))|0);
        $20 = __THREW__; __THREW__ = 0;
        $21 = $20&1;
        if (!($21)) {
         __THREW__ = 0;
         (invoke_iii(742,((41172)|0),(33179|0))|0);
         $22 = __THREW__; __THREW__ = 0;
         $23 = $22&1;
         if (!($23)) {
          __THREW__ = 0;
          (invoke_iii(742,((41184)|0),(33183|0))|0);
          $24 = __THREW__; __THREW__ = 0;
          $25 = $24&1;
          if (!($25)) {
           __THREW__ = 0;
           (invoke_iii(742,((41196)|0),(33188|0))|0);
           $26 = __THREW__; __THREW__ = 0;
           $27 = $26&1;
           if (!($27)) {
            __THREW__ = 0;
            (invoke_iii(742,((41208)|0),(33193|0))|0);
            $28 = __THREW__; __THREW__ = 0;
            $29 = $28&1;
            if (!($29)) {
             __THREW__ = 0;
             (invoke_iii(742,((41220)|0),(33200|0))|0);
             $30 = __THREW__; __THREW__ = 0;
             $31 = $30&1;
             if (!($31)) {
              __THREW__ = 0;
              (invoke_iii(742,((41232)|0),(33210|0))|0);
              $32 = __THREW__; __THREW__ = 0;
              $33 = $32&1;
              if (!($33)) {
               __THREW__ = 0;
               (invoke_iii(742,((41244)|0),(33218|0))|0);
               $34 = __THREW__; __THREW__ = 0;
               $35 = $34&1;
               if (!($35)) {
                __THREW__ = 0;
                (invoke_iii(742,((41256)|0),(33227|0))|0);
                $36 = __THREW__; __THREW__ = 0;
                $37 = $36&1;
                if (!($37)) {
                 __THREW__ = 0;
                 (invoke_iii(742,((41268)|0),(33236|0))|0);
                 $38 = __THREW__; __THREW__ = 0;
                 $39 = $38&1;
                 if (!($39)) {
                  __THREW__ = 0;
                  (invoke_iii(742,((41280)|0),(33240|0))|0);
                  $40 = __THREW__; __THREW__ = 0;
                  $41 = $40&1;
                  if (!($41)) {
                   __THREW__ = 0;
                   (invoke_iii(742,((41292)|0),(33244|0))|0);
                   $42 = __THREW__; __THREW__ = 0;
                   $43 = $42&1;
                   if (!($43)) {
                    __THREW__ = 0;
                    (invoke_iii(742,((41304)|0),(33248|0))|0);
                    $44 = __THREW__; __THREW__ = 0;
                    $45 = $44&1;
                    if ($45) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(742,((41316)|0),(33179|0))|0);
                    $46 = __THREW__; __THREW__ = 0;
                    $47 = $46&1;
                    if ($47) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(742,((41328)|0),(33252|0))|0);
                    $48 = __THREW__; __THREW__ = 0;
                    $49 = $48&1;
                    if ($49) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(742,((41340)|0),(33256|0))|0);
                    $50 = __THREW__; __THREW__ = 0;
                    $51 = $50&1;
                    if ($51) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(742,((41352)|0),(33260|0))|0);
                    $52 = __THREW__; __THREW__ = 0;
                    $53 = $52&1;
                    if ($53) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(742,((41364)|0),(33264|0))|0);
                    $54 = __THREW__; __THREW__ = 0;
                    $55 = $54&1;
                    if ($55) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(742,((41376)|0),(33268|0))|0);
                    $56 = __THREW__; __THREW__ = 0;
                    $57 = $56&1;
                    if ($57) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(742,((41388)|0),(33272|0))|0);
                    $58 = __THREW__; __THREW__ = 0;
                    $59 = $58&1;
                    if ($59) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(742,((41400)|0),(33276|0))|0);
                    $60 = __THREW__; __THREW__ = 0;
                    $61 = $60&1;
                    if ($61) {
                     break;
                    }
                    HEAP32[10353] = 41124;
                    break L1;
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    } while(0);
    $63 = ___cxa_find_matching_catch_2()|0;
    $64 = tempRet0;
    ___resumeException($63|0);
    // unreachable;
   }
  }
 } while(0);
 $62 = HEAP32[10353]|0;
 return ($62|0);
}
function __ZNKSt3__220__time_get_c_storageIcE7__am_pmEv($0) {
 $0 = $0|0;
 var $$0$i$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[35736]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $3 = (___cxa_guard_acquire(35736)|0);
   $4 = ($3|0)==(0);
   if (!($4)) {
    $5 = HEAP8[35744]|0;
    $6 = ($5<<24>>24)==(0);
    if ($6) {
     $7 = (___cxa_guard_acquire(35744)|0);
     $8 = ($7|0)==(0);
     if (!($8)) {
      $9 = 40832;
      while(1) {
       ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
       $$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $10 = (($9) + ($$0$i$i$i<<2)|0);
        HEAP32[$10>>2] = 0;
        $11 = (($$0$i$i$i) + 1)|0;
        $$0$i$i$i = $11;
       }
       $12 = ((($9)) + 12|0);
       $13 = ($12|0)==((41120)|0);
       if ($13) {
        break;
       } else {
        $9 = $12;
       }
      }
      (___cxa_atexit((790|0),(0|0),(___dso_handle|0))|0);
     }
    }
    __THREW__ = 0;
    (invoke_iii(742,(40832|0),(33144|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if (!($15)) {
     __THREW__ = 0;
     (invoke_iii(742,((40844)|0),(33147|0))|0);
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if (!($17)) {
      HEAP32[10280] = 40832;
      break;
     }
    }
    $19 = ___cxa_find_matching_catch_2()|0;
    $20 = tempRet0;
    ___resumeException($19|0);
    // unreachable;
   }
  }
 } while(0);
 $18 = HEAP32[10280]|0;
 return ($18|0);
}
function __ZNKSt3__220__time_get_c_storageIcE3__cEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[35728]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $3 = (___cxa_guard_acquire(35728)|0);
   $4 = ($3|0)==(0);
   if (!($4)) {
    ;HEAP32[40820>>2]=0|0;HEAP32[40820+4>>2]=0|0;HEAP32[40820+8>>2]=0|0;
    __THREW__ = 0;
    invoke_viii(646,(40820|0),(33123|0),20);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     $7 = ___cxa_find_matching_catch_2()|0;
     $8 = tempRet0;
     ___resumeException($7|0);
     // unreachable;
    } else {
     (___cxa_atexit((637|0),(40820|0),(___dso_handle|0))|0);
     break;
    }
   }
  }
 } while(0);
 return (40820|0);
}
function __ZNKSt3__220__time_get_c_storageIcE3__rEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[35720]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $3 = (___cxa_guard_acquire(35720)|0);
   $4 = ($3|0)==(0);
   if (!($4)) {
    ;HEAP32[40808>>2]=0|0;HEAP32[40808+4>>2]=0|0;HEAP32[40808+8>>2]=0|0;
    __THREW__ = 0;
    invoke_viii(646,(40808|0),(33111|0),11);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     $7 = ___cxa_find_matching_catch_2()|0;
     $8 = tempRet0;
     ___resumeException($7|0);
     // unreachable;
    } else {
     (___cxa_atexit((637|0),(40808|0),(___dso_handle|0))|0);
     break;
    }
   }
  }
 } while(0);
 return (40808|0);
}
function __ZNKSt3__220__time_get_c_storageIcE3__xEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[35712]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $3 = (___cxa_guard_acquire(35712)|0);
   $4 = ($3|0)==(0);
   if (!($4)) {
    ;HEAP32[40796>>2]=0|0;HEAP32[40796+4>>2]=0|0;HEAP32[40796+8>>2]=0|0;
    __THREW__ = 0;
    invoke_viii(646,(40796|0),(33102|0),8);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     $7 = ___cxa_find_matching_catch_2()|0;
     $8 = tempRet0;
     ___resumeException($7|0);
     // unreachable;
    } else {
     (___cxa_atexit((637|0),(40796|0),(___dso_handle|0))|0);
     break;
    }
   }
  }
 } while(0);
 return (40796|0);
}
function __ZNKSt3__220__time_get_c_storageIcE3__XEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[35704]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $3 = (___cxa_guard_acquire(35704)|0);
   $4 = ($3|0)==(0);
   if (!($4)) {
    ;HEAP32[40784>>2]=0|0;HEAP32[40784+4>>2]=0|0;HEAP32[40784+8>>2]=0|0;
    __THREW__ = 0;
    invoke_viii(646,(40784|0),(33093|0),8);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     $7 = ___cxa_find_matching_catch_2()|0;
     $8 = tempRet0;
     ___resumeException($7|0);
     // unreachable;
    } else {
     (___cxa_atexit((637|0),(40784|0),(___dso_handle|0))|0);
     break;
    }
   }
  }
 } while(0);
 return (40784|0);
}
function ___cxx_global_array_dtor_117($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (41120);
 while(1) {
  $1 = ((($2)) + -12|0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
  $3 = ($1|0)==(40832|0);
  if ($3) {
   break;
  } else {
   $2 = $1;
  }
 }
 return;
}
function ___cxx_global_array_dtor_69($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (41412);
 while(1) {
  $1 = ((($2)) + -12|0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
  $3 = ($1|0)==(41124|0);
  if ($3) {
   break;
  } else {
   $2 = $1;
  }
 }
 return;
}
function ___cxx_global_array_dtor($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (41584);
 while(1) {
  $1 = ((($2)) + -12|0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
  $3 = ($1|0)==(41416|0);
  if ($3) {
   break;
  } else {
   $2 = $1;
  }
 }
 return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 1023]($7)|0);
 $11 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $11;
 $12 = ((($10)) + 168|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $13 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($2,$$byval_copy,$10,$12,$5,$4,0)|0);
 $14 = $13;
 $15 = $10;
 $16 = (($14) - ($15))|0;
 $17 = ($16|0)<(168);
 if ($17) {
  $18 = (($16|0) / 12)&-1;
  $19 = (($18|0) % 7)&-1;
  HEAP32[$1>>2] = $19;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $12 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $12;
 $13 = ((($11)) + 288|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $14 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($2,$$byval_copy,$11,$13,$5,$4,0)|0);
 $15 = $14;
 $16 = $11;
 $17 = (($15) - ($16))|0;
 $18 = ($17|0)<(288);
 if ($18) {
  $19 = (($17|0) / 12)&-1;
  $20 = (($19|0) % 12)&-1;
  HEAP32[$1>>2] = $20;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0$i$i = 0, $$0$i$i75 = 0, $$0$ph = 0, $$0$ph$be = 0, $$0$pn = 0, $$051 = 0, $$052 = 0, $$3 = 0, $$3$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$pre = 0, $$pre$i$i$i57 = 0, $$pre$i$i$i66 = 0, $$pre$i3$i$i70 = 0, $$pre$i3$i$i7090 = 0, $$pre$i3$i$i7091 = 0, $$pre$pre = 0, $$sroa$049$0$copyload = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $isascii3$i = 0, $isascii3$i54 = 0, $isascii3$i73 = 0, $or$cond = 0, $sext = 0, $tmp$i$i72 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy1 = sp + 16|0;
 $$byval_copy = sp + 12|0;
 $8 = sp + 8|0;
 $9 = sp + 4|0;
 $10 = sp;
 $11 = (__ZNKSt3__28ios_base6getlocEv($3)|0);
 HEAP32[$8>>2] = $11;
 __THREW__ = 0;
 $12 = (invoke_iii(659,($8|0),(40712|0))|0);
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $47 = ___cxa_find_matching_catch_2()|0;
  $48 = tempRet0;
  (__ZNSt3__214__shared_count16__release_sharedEv($11)|0);
  ___resumeException($47|0);
  // unreachable;
 }
 (__ZNSt3__214__shared_count16__release_sharedEv($11)|0);
 HEAP32[$4>>2] = 0;
 $15 = ((($12)) + 8|0);
 $$0$ph = $6;$$pre = 0;
 L4: while(1) {
  $16 = ($$0$ph|0)!=($7|0);
  $17 = $$pre;
  while(1) {
   $18 = ($17|0)==(0);
   $or$cond = $16 & $18;
   $19 = HEAP32[$1>>2]|0;
   if (!($or$cond)) {
    $$pre$i$i$i57 = $19;
    break L4;
   }
   $20 = ($19|0)==(0|0);
   $21 = $19;
   if ($20) {
    $32 = 0;$72 = $21;
   } else {
    $22 = ((($19)) + 12|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($19)) + 16|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($23|0)==($25|0);
    if ($26) {
     $27 = HEAP32[$19>>2]|0;
     $28 = ((($27)) + 36|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = (FUNCTION_TABLE_ii[$29 & 1023]($19)|0);
     $31 = ($30|0)==(-1);
     if ($31) {
      HEAP32[$1>>2] = 0;
      $32 = 0;$72 = 0;
     } else {
      $32 = $19;$72 = $21;
     }
    } else {
     $32 = $19;$72 = $21;
    }
   }
   $33 = ($32|0)==(0|0);
   $34 = HEAP32[$2>>2]|0;
   $35 = ($34|0)==(0|0);
   $36 = $34;
   do {
    if ($35) {
     $198 = $36;
     label = 14;
    } else {
     $37 = ((($34)) + 12|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ((($34)) + 16|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($38|0)==($40|0);
     if ($41) {
      $42 = HEAP32[$34>>2]|0;
      $43 = ((($42)) + 36|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = (FUNCTION_TABLE_ii[$44 & 1023]($34)|0);
      $46 = ($45|0)==(-1);
      if ($46) {
       HEAP32[$2>>2] = 0;
       $198 = 0;
       label = 14;
       break;
      }
     }
     if ($33) {
      $199 = $34;$73 = $36;
     } else {
      label = 15;
      break L4;
     }
    }
   } while(0);
   if ((label|0) == 14) {
    label = 0;
    if ($33) {
     label = 15;
     break L4;
    } else {
     $199 = 0;$73 = $198;
    }
   }
   $49 = HEAP8[$$0$ph>>0]|0;
   $50 = HEAP32[$12>>2]|0;
   $51 = ((($50)) + 36|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (FUNCTION_TABLE_iiii[$52 & 1023]($12,$49,0)|0);
   $54 = ($53<<24>>24)==(37);
   if ($54) {
    label = 18;
    break;
   }
   $77 = HEAP8[$$0$ph>>0]|0;
   $isascii3$i = ($77<<24>>24)>(-1);
   if ($isascii3$i) {
    $78 = $77 << 24 >> 24;
    $79 = HEAP32[$15>>2]|0;
    $80 = (($79) + ($78<<1)|0);
    $81 = HEAP16[$80>>1]|0;
    $82 = $81 & 8192;
    $83 = ($82<<16>>16)==(0);
    if (!($83)) {
     $$0$pn = $$0$ph;
     label = 27;
     break;
    }
   }
   $142 = ((($32)) + 12|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = ((($32)) + 16|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = ($143|0)==($145|0);
   if ($146) {
    $147 = HEAP32[$32>>2]|0;
    $148 = ((($147)) + 36|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = (FUNCTION_TABLE_ii[$149 & 1023]($32)|0);
    $$0$i$i75 = $150;
   } else {
    $151 = HEAP8[$143>>0]|0;
    $152 = $151&255;
    $$0$i$i75 = $152;
   }
   $153 = $$0$i$i75&255;
   $154 = HEAP32[$12>>2]|0;
   $155 = ((($154)) + 12|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = (FUNCTION_TABLE_iii[$156 & 1023]($12,$153)|0);
   $158 = HEAP8[$$0$ph>>0]|0;
   $159 = HEAP32[$12>>2]|0;
   $160 = ((($159)) + 12|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = (FUNCTION_TABLE_iii[$161 & 1023]($12,$158)|0);
   $163 = ($157<<24>>24)==($162<<24>>24);
   if ($163) {
    label = 54;
    break;
   }
   HEAP32[$4>>2] = 4;
   $17 = 4;
  }
  L32: do {
   if ((label|0) == 18) {
    label = 0;
    $55 = ((($$0$ph)) + 1|0);
    $56 = ($55|0)==($7|0);
    if ($56) {
     label = 19;
     break L4;
    }
    $57 = HEAP8[$55>>0]|0;
    $58 = HEAP32[$12>>2]|0;
    $59 = ((($58)) + 36|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (FUNCTION_TABLE_iiii[$60 & 1023]($12,$57,0)|0);
    switch ($61<<24>>24) {
    case 48: case 69:  {
     $62 = ((($$0$ph)) + 2|0);
     $63 = ($62|0)==($7|0);
     if ($63) {
      label = 24;
      break L4;
     }
     $64 = HEAP8[$62>>0]|0;
     $65 = HEAP32[$12>>2]|0;
     $66 = ((($65)) + 36|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = (FUNCTION_TABLE_iiii[$67 & 1023]($12,$64,0)|0);
     $$051 = $61;$$052 = $68;$76 = $55;
     break;
    }
    default: {
     $$051 = 0;$$052 = $61;$76 = $$0$ph;
    }
    }
    $69 = HEAP32[$0>>2]|0;
    $70 = ((($69)) + 36|0);
    $71 = HEAP32[$70>>2]|0;
    HEAP32[$9>>2] = $72;
    HEAP32[$10>>2] = $73;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$9>>2]|0;
    ;HEAP32[$$byval_copy1>>2]=HEAP32[$10>>2]|0;
    $74 = (FUNCTION_TABLE_iiiiiiiii[$71 & 1023]($0,$$byval_copy,$$byval_copy1,$3,$4,$5,$$052,$$051)|0);
    HEAP32[$1>>2] = $74;
    $75 = ((($76)) + 2|0);
    $$0$ph$be = $75;
   }
   else if ((label|0) == 27) {
    while(1) {
     label = 0;
     $$3 = ((($$0$pn)) + 1|0);
     $84 = ($$3|0)==($7|0);
     if ($84) {
      $$3$lcssa = $7;
      break;
     }
     $85 = HEAP8[$$3>>0]|0;
     $isascii3$i54 = ($85<<24>>24)>(-1);
     if (!($isascii3$i54)) {
      $$3$lcssa = $$3;
      break;
     }
     $86 = $85 << 24 >> 24;
     $87 = (($79) + ($86<<1)|0);
     $88 = HEAP16[$87>>1]|0;
     $89 = $88 & 8192;
     $90 = ($89<<16>>16)==(0);
     if ($90) {
      $$3$lcssa = $$3;
      break;
     } else {
      $$0$pn = $$3;
      label = 27;
     }
    }
    $$pre$i$i$i66 = $32;$$pre$i3$i$i70 = $199;$104 = $199;
    while(1) {
     $91 = ($$pre$i$i$i66|0)==(0|0);
     if ($91) {
      $102 = 0;
     } else {
      $92 = ((($$pre$i$i$i66)) + 12|0);
      $93 = HEAP32[$92>>2]|0;
      $94 = ((($$pre$i$i$i66)) + 16|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = ($93|0)==($95|0);
      if ($96) {
       $97 = HEAP32[$$pre$i$i$i66>>2]|0;
       $98 = ((($97)) + 36|0);
       $99 = HEAP32[$98>>2]|0;
       $100 = (FUNCTION_TABLE_ii[$99 & 1023]($$pre$i$i$i66)|0);
       $101 = ($100|0)==(-1);
       if ($101) {
        HEAP32[$1>>2] = 0;
        $102 = 0;
       } else {
        $102 = $$pre$i$i$i66;
       }
      } else {
       $102 = $$pre$i$i$i66;
      }
     }
     $103 = ($102|0)==(0|0);
     $105 = ($104|0)==(0|0);
     do {
      if ($105) {
       $$pre$i3$i$i7091 = $$pre$i3$i$i70;
       label = 40;
      } else {
       $106 = ((($104)) + 12|0);
       $107 = HEAP32[$106>>2]|0;
       $108 = ((($104)) + 16|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = ($107|0)==($109|0);
       if (!($110)) {
        if ($103) {
         $$pre$i3$i$i7090 = $$pre$i3$i$i70;$200 = $104;
         break;
        } else {
         $$0$ph$be = $$3$lcssa;
         break L32;
        }
       }
       $111 = HEAP32[$104>>2]|0;
       $112 = ((($111)) + 36|0);
       $113 = HEAP32[$112>>2]|0;
       $114 = (FUNCTION_TABLE_ii[$113 & 1023]($104)|0);
       $115 = ($114|0)==(-1);
       if ($115) {
        HEAP32[$2>>2] = 0;
        $$pre$i3$i$i7091 = 0;
        label = 40;
        break;
       } else {
        $116 = ($$pre$i3$i$i70|0)==(0|0);
        $tmp$i$i72 = $103 ^ $116;
        if ($tmp$i$i72) {
         $$pre$i3$i$i7090 = $$pre$i3$i$i70;$200 = $$pre$i3$i$i70;
         break;
        } else {
         $$0$ph$be = $$3$lcssa;
         break L32;
        }
       }
      }
     } while(0);
     if ((label|0) == 40) {
      label = 0;
      if ($103) {
       $$0$ph$be = $$3$lcssa;
       break L32;
      } else {
       $$pre$i3$i$i7090 = $$pre$i3$i$i7091;$200 = 0;
      }
     }
     $117 = ((($102)) + 12|0);
     $118 = HEAP32[$117>>2]|0;
     $119 = ((($102)) + 16|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = ($118|0)==($120|0);
     if ($121) {
      $122 = HEAP32[$102>>2]|0;
      $123 = ((($122)) + 36|0);
      $124 = HEAP32[$123>>2]|0;
      $125 = (FUNCTION_TABLE_ii[$124 & 1023]($102)|0);
      $$0$i$i = $125;
     } else {
      $126 = HEAP8[$118>>0]|0;
      $127 = $126&255;
      $$0$i$i = $127;
     }
     $128 = $$0$i$i&255;
     $isascii3$i73 = ($128<<24>>24)>(-1);
     if (!($isascii3$i73)) {
      $$0$ph$be = $$3$lcssa;
      break L32;
     }
     $sext = $$0$i$i << 24;
     $129 = $sext >> 24;
     $130 = HEAP32[$15>>2]|0;
     $131 = (($130) + ($129<<1)|0);
     $132 = HEAP16[$131>>1]|0;
     $133 = $132 & 8192;
     $134 = ($133<<16>>16)==(0);
     if ($134) {
      $$0$ph$be = $$3$lcssa;
      break L32;
     }
     $135 = HEAP32[$117>>2]|0;
     $136 = HEAP32[$119>>2]|0;
     $137 = ($135|0)==($136|0);
     if ($137) {
      $138 = HEAP32[$102>>2]|0;
      $139 = ((($138)) + 40|0);
      $140 = HEAP32[$139>>2]|0;
      (FUNCTION_TABLE_ii[$140 & 1023]($102)|0);
      $$pre$i$i$i66 = $102;$$pre$i3$i$i70 = $$pre$i3$i$i7090;$104 = $200;
      continue;
     } else {
      $141 = ((($135)) + 1|0);
      HEAP32[$117>>2] = $141;
      $$pre$i$i$i66 = $102;$$pre$i3$i$i70 = $$pre$i3$i$i7090;$104 = $200;
      continue;
     }
    }
   }
   else if ((label|0) == 54) {
    label = 0;
    $164 = HEAP32[$142>>2]|0;
    $165 = HEAP32[$144>>2]|0;
    $166 = ($164|0)==($165|0);
    if ($166) {
     $167 = HEAP32[$32>>2]|0;
     $168 = ((($167)) + 40|0);
     $169 = HEAP32[$168>>2]|0;
     (FUNCTION_TABLE_ii[$169 & 1023]($32)|0);
    } else {
     $170 = ((($164)) + 1|0);
     HEAP32[$142>>2] = $170;
    }
    $171 = ((($$0$ph)) + 1|0);
    $$0$ph$be = $171;
   }
  } while(0);
  $$pre$pre = HEAP32[$4>>2]|0;
  $$0$ph = $$0$ph$be;$$pre = $$pre$pre;
 }
 if ((label|0) == 15) {
  HEAP32[$4>>2] = 4;
  $$pre$i$i$i57 = $32;
 }
 else if ((label|0) == 19) {
  HEAP32[$4>>2] = 4;
  $$pre$i$i$i57 = $32;
 }
 else if ((label|0) == 24) {
  HEAP32[$4>>2] = 4;
  $$pre$i$i$i57 = $32;
 }
 $172 = ($$pre$i$i$i57|0)==(0|0);
 if ($172) {
  $$sroa$049$0$copyload = 0;
 } else {
  $173 = ((($$pre$i$i$i57)) + 12|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = ((($$pre$i$i$i57)) + 16|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = ($174|0)==($176|0);
  if ($177) {
   $178 = HEAP32[$$pre$i$i$i57>>2]|0;
   $179 = ((($178)) + 36|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = (FUNCTION_TABLE_ii[$180 & 1023]($$pre$i$i$i57)|0);
   $182 = ($181|0)==(-1);
   if ($182) {
    HEAP32[$1>>2] = 0;
    $$sroa$049$0$copyload = 0;
   } else {
    $$sroa$049$0$copyload = $$pre$i$i$i57;
   }
  } else {
   $$sroa$049$0$copyload = $$pre$i$i$i57;
  }
 }
 $183 = ($$sroa$049$0$copyload|0)==(0|0);
 $184 = HEAP32[$2>>2]|0;
 $185 = ($184|0)==(0|0);
 do {
  if ($185) {
   label = 69;
  } else {
   $186 = ((($184)) + 12|0);
   $187 = HEAP32[$186>>2]|0;
   $188 = ((($184)) + 16|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = ($187|0)==($189|0);
   if ($190) {
    $191 = HEAP32[$184>>2]|0;
    $192 = ((($191)) + 36|0);
    $193 = HEAP32[$192>>2]|0;
    $194 = (FUNCTION_TABLE_ii[$193 & 1023]($184)|0);
    $195 = ($194|0)==(-1);
    if ($195) {
     HEAP32[$2>>2] = 0;
     label = 69;
     break;
    }
   }
   if (!($183)) {
    label = 70;
   }
  }
 } while(0);
 if ((label|0) == 69) {
  if ($183) {
   label = 70;
  }
 }
 if ((label|0) == 70) {
  $196 = HEAP32[$4>>2]|0;
  $197 = $196 | 2;
  HEAP32[$4>>2] = $197;
 }
 STACKTOP = sp;return ($$sroa$049$0$copyload|0);
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $$off = (($8) + -1)|0;
 $12 = ($$off>>>0)<(31);
 $13 = $12 & $11;
 if ($13) {
  HEAP32[$1>>2] = $8;
 } else {
  $14 = $9 | 4;
  HEAP32[$4>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(24);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $$off = (($8) + -1)|0;
 $12 = ($$off>>>0)<(12);
 $13 = $12 & $11;
 if ($13) {
  HEAP32[$1>>2] = $8;
 } else {
  $14 = $9 | 4;
  HEAP32[$4>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,3)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(366);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(13);
 $or$cond = $12 & $11;
 if ($or$cond) {
  $13 = (($8) + -1)|0;
  HEAP32[$1>>2] = $13;
 } else {
  $14 = $9 | 4;
  HEAP32[$4>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(60);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i8 = 0, $$pre$i3$i$i12 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $isascii3$i = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($4)) + 8|0);
 L1: while(1) {
  $6 = HEAP32[$1>>2]|0;
  $7 = ($6|0)==(0|0);
  do {
   if ($7) {
    $18 = 0;
   } else {
    $8 = ((($6)) + 12|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ((($6)) + 16|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($9|0)==($11|0);
    if ($12) {
     $13 = HEAP32[$6>>2]|0;
     $14 = ((($13)) + 36|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = (FUNCTION_TABLE_ii[$15 & 1023]($6)|0);
     $17 = ($16|0)==(-1);
     if ($17) {
      HEAP32[$1>>2] = 0;
      $18 = 0;
      break;
     } else {
      $$pre$i$i$i = HEAP32[$1>>2]|0;
      $18 = $$pre$i$i$i;
      break;
     }
    } else {
     $18 = $6;
    }
   }
  } while(0);
  $19 = ($18|0)==(0|0);
  $20 = HEAP32[$2>>2]|0;
  $21 = ($20|0)==(0|0);
  do {
   if ($21) {
    label = 12;
   } else {
    $22 = ((($20)) + 12|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($20)) + 16|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($23|0)==($25|0);
    if (!($26)) {
     if ($19) {
      $88 = $20;
      break;
     } else {
      $$pre$i3$i$i12 = $20;
      break L1;
     }
    }
    $27 = HEAP32[$20>>2]|0;
    $28 = ((($27)) + 36|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (FUNCTION_TABLE_ii[$29 & 1023]($20)|0);
    $31 = ($30|0)==(-1);
    if ($31) {
     HEAP32[$2>>2] = 0;
     label = 12;
     break;
    } else {
     if ($19) {
      $88 = $20;
      break;
     } else {
      $$pre$i3$i$i12 = $20;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 12) {
   label = 0;
   if ($19) {
    $$pre$i3$i$i12 = 0;
    break;
   } else {
    $88 = 0;
   }
  }
  $32 = HEAP32[$1>>2]|0;
  $33 = ((($32)) + 12|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ((($32)) + 16|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($34|0)==($36|0);
  if ($37) {
   $38 = HEAP32[$32>>2]|0;
   $39 = ((($38)) + 36|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (FUNCTION_TABLE_ii[$40 & 1023]($32)|0);
   $$0$i$i = $41;
  } else {
   $42 = HEAP8[$34>>0]|0;
   $43 = $42&255;
   $$0$i$i = $43;
  }
  $44 = $$0$i$i&255;
  $isascii3$i = ($44<<24>>24)>(-1);
  if (!($isascii3$i)) {
   $$pre$i3$i$i12 = $88;
   break;
  }
  $sext = $$0$i$i << 24;
  $45 = $sext >> 24;
  $46 = HEAP32[$5>>2]|0;
  $47 = (($46) + ($45<<1)|0);
  $48 = HEAP16[$47>>1]|0;
  $49 = $48 & 8192;
  $50 = ($49<<16>>16)==(0);
  if ($50) {
   $$pre$i3$i$i12 = $88;
   break;
  }
  $51 = HEAP32[$1>>2]|0;
  $52 = ((($51)) + 12|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ((($51)) + 16|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($53|0)==($55|0);
  if ($56) {
   $57 = HEAP32[$51>>2]|0;
   $58 = ((($57)) + 40|0);
   $59 = HEAP32[$58>>2]|0;
   (FUNCTION_TABLE_ii[$59 & 1023]($51)|0);
   continue;
  } else {
   $60 = ((($53)) + 1|0);
   HEAP32[$52>>2] = $60;
   continue;
  }
 }
 $61 = HEAP32[$1>>2]|0;
 $62 = ($61|0)==(0|0);
 do {
  if ($62) {
   $73 = 0;
  } else {
   $63 = ((($61)) + 12|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ((($61)) + 16|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ($64|0)==($66|0);
   if ($67) {
    $68 = HEAP32[$61>>2]|0;
    $69 = ((($68)) + 36|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (FUNCTION_TABLE_ii[$70 & 1023]($61)|0);
    $72 = ($71|0)==(-1);
    if ($72) {
     HEAP32[$1>>2] = 0;
     $73 = 0;
     break;
    } else {
     $$pre$i$i$i8 = HEAP32[$1>>2]|0;
     $73 = $$pre$i$i$i8;
     break;
    }
   } else {
    $73 = $61;
   }
  }
 } while(0);
 $74 = ($73|0)==(0|0);
 $75 = ($$pre$i3$i$i12|0)==(0|0);
 do {
  if ($75) {
   label = 32;
  } else {
   $76 = ((($$pre$i3$i$i12)) + 12|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ((($$pre$i3$i$i12)) + 16|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ($77|0)==($79|0);
   if ($80) {
    $81 = HEAP32[$$pre$i3$i$i12>>2]|0;
    $82 = ((($81)) + 36|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = (FUNCTION_TABLE_ii[$83 & 1023]($$pre$i3$i$i12)|0);
    $85 = ($84|0)==(-1);
    if ($85) {
     HEAP32[$2>>2] = 0;
     label = 32;
     break;
    }
   }
   if (!($74)) {
    label = 33;
   }
  }
 } while(0);
 if ((label|0) == 32) {
  if ($74) {
   label = 33;
  }
 }
 if ((label|0) == 33) {
  $86 = HEAP32[$3>>2]|0;
  $87 = $86 | 2;
  HEAP32[$3>>2] = $87;
 }
 return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond20 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $12 = ((($11)) + 11|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = ($13<<24>>24)<(0);
 if ($14) {
  $15 = ((($11)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $27 = $16;
 } else {
  $17 = $13&255;
  $27 = $17;
 }
 $18 = ((($11)) + 12|0);
 $19 = ((($18)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 if ($21) {
  $22 = ((($11)) + 16|0);
  $23 = HEAP32[$22>>2]|0;
  $26 = $23;
 } else {
  $24 = $20&255;
  $26 = $24;
 }
 $25 = (0 - ($26))|0;
 $28 = ($27|0)==($25|0);
 do {
  if ($28) {
   $29 = HEAP32[$4>>2]|0;
   $30 = $29 | 4;
   HEAP32[$4>>2] = $30;
  } else {
   $31 = HEAP32[$3>>2]|0;
   HEAP32[$6>>2] = $31;
   $32 = ((($11)) + 24|0);
   ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
   $33 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($2,$$byval_copy,$11,$32,$5,$4,0)|0);
   $34 = $33;
   $35 = $11;
   $36 = (($34) - ($35))|0;
   $37 = ($36|0)==(0);
   $38 = HEAP32[$1>>2]|0;
   $39 = ($38|0)==(12);
   $or$cond = $39 & $37;
   if ($or$cond) {
    HEAP32[$1>>2] = 0;
    break;
   }
   $40 = ($36|0)==(12);
   $41 = ($38|0)<(12);
   $or$cond20 = $41 & $40;
   if ($or$cond20) {
    $42 = (($38) + 12)|0;
    HEAP32[$1>>2] = $42;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(61);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,1)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(7);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$0 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,4)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = ($8|0)<(69);
  if ($12) {
   $13 = (($8) + 2000)|0;
   $$0 = $13;
  } else {
   $14 = ($8|0)<(100);
   $15 = (($8) + 1900)|0;
   $$ = $14 ? $15 : $8;
   $$0 = $$;
  }
  $16 = (($$0) + -1900)|0;
  HEAP32[$1>>2] = $16;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,4)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = (($8) + -1900)|0;
  HEAP32[$1>>2] = $12;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i9 = 0, $$pre$i3$i$i1318 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP32[$1>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   $17 = 0;
  } else {
   $7 = ((($5)) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($5)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($8|0)==($10|0);
   if ($11) {
    $12 = HEAP32[$5>>2]|0;
    $13 = ((($12)) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (FUNCTION_TABLE_ii[$14 & 1023]($5)|0);
    $16 = ($15|0)==(-1);
    if ($16) {
     HEAP32[$1>>2] = 0;
     $17 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$1>>2]|0;
     $17 = $$pre$i$i$i;
     break;
    }
   } else {
    $17 = $5;
   }
  }
 } while(0);
 $18 = ($17|0)==(0|0);
 $19 = HEAP32[$2>>2]|0;
 $20 = ($19|0)==(0|0);
 do {
  if ($20) {
   label = 11;
  } else {
   $21 = ((($19)) + 12|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($19)) + 16|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($22|0)==($24|0);
   if ($25) {
    $26 = HEAP32[$19>>2]|0;
    $27 = ((($26)) + 36|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (FUNCTION_TABLE_ii[$28 & 1023]($19)|0);
    $30 = ($29|0)==(-1);
    if ($30) {
     HEAP32[$2>>2] = 0;
     label = 11;
     break;
    }
   }
   if ($18) {
    $$pre$i3$i$i1318 = $19;
    label = 13;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  if ($18) {
   label = 12;
  } else {
   $$pre$i3$i$i1318 = 0;
   label = 13;
  }
 }
 L16: do {
  if ((label|0) == 12) {
   $31 = HEAP32[$3>>2]|0;
   $32 = $31 | 6;
   HEAP32[$3>>2] = $32;
  }
  else if ((label|0) == 13) {
   $33 = HEAP32[$1>>2]|0;
   $34 = ((($33)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ((($33)) + 16|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($35|0)==($37|0);
   if ($38) {
    $39 = HEAP32[$33>>2]|0;
    $40 = ((($39)) + 36|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (FUNCTION_TABLE_ii[$41 & 1023]($33)|0);
    $$0$i$i = $42;
   } else {
    $43 = HEAP8[$35>>0]|0;
    $44 = $43&255;
    $$0$i$i = $44;
   }
   $45 = $$0$i$i&255;
   $46 = HEAP32[$4>>2]|0;
   $47 = ((($46)) + 36|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (FUNCTION_TABLE_iiii[$48 & 1023]($4,$45,0)|0);
   $50 = ($49<<24>>24)==(37);
   if (!($50)) {
    $51 = HEAP32[$3>>2]|0;
    $52 = $51 | 4;
    HEAP32[$3>>2] = $52;
    break;
   }
   $53 = HEAP32[$1>>2]|0;
   $54 = ((($53)) + 12|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ((($53)) + 16|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ($55|0)==($57|0);
   if ($58) {
    $60 = HEAP32[$53>>2]|0;
    $61 = ((($60)) + 40|0);
    $62 = HEAP32[$61>>2]|0;
    (FUNCTION_TABLE_ii[$62 & 1023]($53)|0);
    $$pre = HEAP32[$1>>2]|0;
    $63 = ($$pre|0)==(0|0);
    if ($63) {
     $75 = 0;
    } else {
     $65 = $$pre;
     label = 21;
    }
   } else {
    $59 = ((($55)) + 1|0);
    HEAP32[$54>>2] = $59;
    $65 = $53;
    label = 21;
   }
   do {
    if ((label|0) == 21) {
     $64 = ((($65)) + 12|0);
     $66 = HEAP32[$64>>2]|0;
     $67 = ((($65)) + 16|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ($66|0)==($68|0);
     if ($69) {
      $70 = HEAP32[$65>>2]|0;
      $71 = ((($70)) + 36|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = (FUNCTION_TABLE_ii[$72 & 1023]($65)|0);
      $74 = ($73|0)==(-1);
      if ($74) {
       HEAP32[$1>>2] = 0;
       $75 = 0;
       break;
      } else {
       $$pre$i$i$i9 = HEAP32[$1>>2]|0;
       $75 = $$pre$i$i$i9;
       break;
      }
     } else {
      $75 = $65;
     }
    }
   } while(0);
   $76 = ($75|0)==(0|0);
   $77 = ($$pre$i3$i$i1318|0)==(0|0);
   do {
    if ($77) {
     label = 30;
    } else {
     $78 = ((($$pre$i3$i$i1318)) + 12|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ((($$pre$i3$i$i1318)) + 16|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = ($79|0)==($81|0);
     if ($82) {
      $83 = HEAP32[$$pre$i3$i$i1318>>2]|0;
      $84 = ((($83)) + 36|0);
      $85 = HEAP32[$84>>2]|0;
      $86 = (FUNCTION_TABLE_ii[$85 & 1023]($$pre$i3$i$i1318)|0);
      $87 = ($86|0)==(-1);
      if ($87) {
       HEAP32[$2>>2] = 0;
       label = 30;
       break;
      }
     }
     if ($76) {
      break L16;
     }
    }
   } while(0);
   if ((label|0) == 30) {
    if (!($76)) {
     break;
    }
   }
   $88 = HEAP32[$3>>2]|0;
   $89 = $88 | 2;
   HEAP32[$3>>2] = $89;
  }
 } while(0);
 return;
}
function __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i33 = 0, $$0$in = 0, $$023 = 0, $$023$in = 0, $$2 = 0, $$pre$i$i$i = 0, $$pre$i$i$i26 = 0, $$pre$i$i$i39 = 0, $$pre$i3$i$i30 = 0, $$pre$i3$i$i43 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $isascii3$i = 0, $isascii3$i35 = 0, $sext = 0, $sext47 = 0, $tmp$i$i32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP32[$0>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   $17 = 0;
  } else {
   $7 = ((($5)) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($5)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($8|0)==($10|0);
   if ($11) {
    $12 = HEAP32[$5>>2]|0;
    $13 = ((($12)) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (FUNCTION_TABLE_ii[$14 & 1023]($5)|0);
    $16 = ($15|0)==(-1);
    if ($16) {
     HEAP32[$0>>2] = 0;
     $17 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$0>>2]|0;
     $17 = $$pre$i$i$i;
     break;
    }
   } else {
    $17 = $5;
   }
  }
 } while(0);
 $18 = ($17|0)==(0|0);
 $19 = HEAP32[$1>>2]|0;
 $20 = ($19|0)==(0|0);
 do {
  if ($20) {
   label = 11;
  } else {
   $21 = ((($19)) + 12|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($19)) + 16|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($22|0)==($24|0);
   if ($25) {
    $26 = HEAP32[$19>>2]|0;
    $27 = ((($26)) + 36|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (FUNCTION_TABLE_ii[$28 & 1023]($19)|0);
    $30 = ($29|0)==(-1);
    if ($30) {
     HEAP32[$1>>2] = 0;
     label = 11;
     break;
    }
   }
   if ($18) {
    $162 = $19;
    label = 13;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  if ($18) {
   label = 12;
  } else {
   $162 = 0;
   label = 13;
  }
 }
 L16: do {
  if ((label|0) == 12) {
   $31 = HEAP32[$2>>2]|0;
   $32 = $31 | 6;
   HEAP32[$2>>2] = $32;
   $$2 = 0;
  }
  else if ((label|0) == 13) {
   $33 = HEAP32[$0>>2]|0;
   $34 = ((($33)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ((($33)) + 16|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($35|0)==($37|0);
   if ($38) {
    $39 = HEAP32[$33>>2]|0;
    $40 = ((($39)) + 36|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (FUNCTION_TABLE_ii[$41 & 1023]($33)|0);
    $$0$i$i = $42;
   } else {
    $43 = HEAP8[$35>>0]|0;
    $44 = $43&255;
    $$0$i$i = $44;
   }
   $45 = $$0$i$i&255;
   $isascii3$i = ($45<<24>>24)>(-1);
   if ($isascii3$i) {
    $sext = $$0$i$i << 24;
    $46 = $sext >> 24;
    $47 = ((($3)) + 8|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = (($48) + ($46<<1)|0);
    $50 = HEAP16[$49>>1]|0;
    $51 = $50 & 2048;
    $52 = ($51<<16>>16)==(0);
    if (!($52)) {
     $55 = HEAP32[$3>>2]|0;
     $56 = ((($55)) + 36|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = (FUNCTION_TABLE_iiii[$57 & 1023]($3,$45,0)|0);
     $59 = $58 << 24 >> 24;
     $60 = HEAP32[$0>>2]|0;
     $61 = ((($60)) + 12|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = ((($60)) + 16|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ($62|0)==($64|0);
     if ($65) {
      $66 = HEAP32[$60>>2]|0;
      $67 = ((($66)) + 40|0);
      $68 = HEAP32[$67>>2]|0;
      (FUNCTION_TABLE_ii[$68 & 1023]($60)|0);
      $$0$in = $59;$$023$in = $4;$$pre$i3$i$i30 = $162;$84 = $162;
     } else {
      $69 = ((($62)) + 1|0);
      HEAP32[$61>>2] = $69;
      $$0$in = $59;$$023$in = $4;$$pre$i3$i$i30 = $162;$84 = $162;
     }
     while(1) {
      $$0 = (($$0$in) + -48)|0;
      $$023 = (($$023$in) + -1)|0;
      $70 = HEAP32[$0>>2]|0;
      $71 = ($70|0)==(0|0);
      do {
       if ($71) {
        $82 = 0;
       } else {
        $72 = ((($70)) + 12|0);
        $73 = HEAP32[$72>>2]|0;
        $74 = ((($70)) + 16|0);
        $75 = HEAP32[$74>>2]|0;
        $76 = ($73|0)==($75|0);
        if ($76) {
         $77 = HEAP32[$70>>2]|0;
         $78 = ((($77)) + 36|0);
         $79 = HEAP32[$78>>2]|0;
         $80 = (FUNCTION_TABLE_ii[$79 & 1023]($70)|0);
         $81 = ($80|0)==(-1);
         if ($81) {
          HEAP32[$0>>2] = 0;
          $82 = 0;
          break;
         } else {
          $$pre$i$i$i26 = HEAP32[$0>>2]|0;
          $82 = $$pre$i$i$i26;
          break;
         }
        } else {
         $82 = $70;
        }
       }
      } while(0);
      $83 = ($82|0)==(0|0);
      $85 = ($84|0)==(0|0);
      if ($85) {
       $$pre$i3$i$i43 = $$pre$i3$i$i30;$96 = 0;
      } else {
       $86 = ((($84)) + 12|0);
       $87 = HEAP32[$86>>2]|0;
       $88 = ((($84)) + 16|0);
       $89 = HEAP32[$88>>2]|0;
       $90 = ($87|0)==($89|0);
       if ($90) {
        $91 = HEAP32[$84>>2]|0;
        $92 = ((($91)) + 36|0);
        $93 = HEAP32[$92>>2]|0;
        $94 = (FUNCTION_TABLE_ii[$93 & 1023]($84)|0);
        $95 = ($94|0)==(-1);
        if ($95) {
         HEAP32[$1>>2] = 0;
         $$pre$i3$i$i43 = 0;$96 = 0;
        } else {
         $$pre$i3$i$i43 = $$pre$i3$i$i30;$96 = $$pre$i3$i$i30;
        }
       } else {
        $$pre$i3$i$i43 = $$pre$i3$i$i30;$96 = $84;
       }
      }
      $97 = ($96|0)==(0|0);
      $tmp$i$i32 = $83 ^ $97;
      $98 = ($$023$in|0)>(1);
      $99 = $98 & $tmp$i$i32;
      $100 = HEAP32[$0>>2]|0;
      if (!($99)) {
       break;
      }
      $101 = ((($100)) + 12|0);
      $102 = HEAP32[$101>>2]|0;
      $103 = ((($100)) + 16|0);
      $104 = HEAP32[$103>>2]|0;
      $105 = ($102|0)==($104|0);
      if ($105) {
       $106 = HEAP32[$100>>2]|0;
       $107 = ((($106)) + 36|0);
       $108 = HEAP32[$107>>2]|0;
       $109 = (FUNCTION_TABLE_ii[$108 & 1023]($100)|0);
       $$0$i$i33 = $109;
      } else {
       $110 = HEAP8[$102>>0]|0;
       $111 = $110&255;
       $$0$i$i33 = $111;
      }
      $112 = $$0$i$i33&255;
      $isascii3$i35 = ($112<<24>>24)>(-1);
      if (!($isascii3$i35)) {
       $$2 = $$0;
       break L16;
      }
      $sext47 = $$0$i$i33 << 24;
      $113 = $sext47 >> 24;
      $114 = HEAP32[$47>>2]|0;
      $115 = (($114) + ($113<<1)|0);
      $116 = HEAP16[$115>>1]|0;
      $117 = $116 & 2048;
      $118 = ($117<<16>>16)==(0);
      if ($118) {
       $$2 = $$0;
       break L16;
      }
      $119 = ($$0*10)|0;
      $120 = HEAP32[$3>>2]|0;
      $121 = ((($120)) + 36|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = (FUNCTION_TABLE_iiii[$122 & 1023]($3,$112,0)|0);
      $124 = $123 << 24 >> 24;
      $125 = (($124) + ($119))|0;
      $126 = HEAP32[$0>>2]|0;
      $127 = ((($126)) + 12|0);
      $128 = HEAP32[$127>>2]|0;
      $129 = ((($126)) + 16|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = ($128|0)==($130|0);
      if ($131) {
       $132 = HEAP32[$126>>2]|0;
       $133 = ((($132)) + 40|0);
       $134 = HEAP32[$133>>2]|0;
       (FUNCTION_TABLE_ii[$134 & 1023]($126)|0);
       $$0$in = $125;$$023$in = $$023;$$pre$i3$i$i30 = $$pre$i3$i$i43;$84 = $96;
       continue;
      } else {
       $135 = ((($128)) + 1|0);
       HEAP32[$127>>2] = $135;
       $$0$in = $125;$$023$in = $$023;$$pre$i3$i$i30 = $$pre$i3$i$i43;$84 = $96;
       continue;
      }
     }
     $136 = ($100|0)==(0|0);
     do {
      if ($136) {
       $147 = 0;
      } else {
       $137 = ((($100)) + 12|0);
       $138 = HEAP32[$137>>2]|0;
       $139 = ((($100)) + 16|0);
       $140 = HEAP32[$139>>2]|0;
       $141 = ($138|0)==($140|0);
       if ($141) {
        $142 = HEAP32[$100>>2]|0;
        $143 = ((($142)) + 36|0);
        $144 = HEAP32[$143>>2]|0;
        $145 = (FUNCTION_TABLE_ii[$144 & 1023]($100)|0);
        $146 = ($145|0)==(-1);
        if ($146) {
         HEAP32[$0>>2] = 0;
         $147 = 0;
         break;
        } else {
         $$pre$i$i$i39 = HEAP32[$0>>2]|0;
         $147 = $$pre$i$i$i39;
         break;
        }
       } else {
        $147 = $100;
       }
      }
     } while(0);
     $148 = ($147|0)==(0|0);
     $149 = ($$pre$i3$i$i43|0)==(0|0);
     do {
      if ($149) {
       label = 50;
      } else {
       $150 = ((($$pre$i3$i$i43)) + 12|0);
       $151 = HEAP32[$150>>2]|0;
       $152 = ((($$pre$i3$i$i43)) + 16|0);
       $153 = HEAP32[$152>>2]|0;
       $154 = ($151|0)==($153|0);
       if ($154) {
        $155 = HEAP32[$$pre$i3$i$i43>>2]|0;
        $156 = ((($155)) + 36|0);
        $157 = HEAP32[$156>>2]|0;
        $158 = (FUNCTION_TABLE_ii[$157 & 1023]($$pre$i3$i$i43)|0);
        $159 = ($158|0)==(-1);
        if ($159) {
         HEAP32[$1>>2] = 0;
         label = 50;
         break;
        }
       }
       if ($148) {
        $$2 = $$0;
        break L16;
       }
      }
     } while(0);
     if ((label|0) == 50) {
      if (!($148)) {
       $$2 = $$0;
       break;
      }
     }
     $160 = HEAP32[$2>>2]|0;
     $161 = $160 | 2;
     HEAP32[$2>>2] = $161;
     $$2 = $$0;
     break;
    }
   }
   $53 = HEAP32[$2>>2]|0;
   $54 = $53 | 4;
   HEAP32[$2>>2] = $54;
   $$2 = 0;
  }
 } while(0);
 return ($$2|0);
}
function __ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy,$$byval_copy1,$3,$4,$5,17700,(17732))|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_ii[$11 & 1023]($8)|0);
 $13 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $13;
 $14 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $14;
 $15 = ((($12)) + 8|0);
 $16 = ((($15)) + 3|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = ($17<<24>>24)<(0);
 $19 = HEAP32[$12>>2]|0;
 $20 = $18 ? $19 : $12;
 $21 = ((($12)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $17&255;
 $24 = $18 ? $22 : $23;
 $25 = (($20) + ($24<<2)|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $26 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy,$$byval_copy1,$3,$4,$5,$20,$25)|0);
 STACKTOP = sp;return ($26|0);
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$sroa$0$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = (__ZNKSt3__28ios_base6getlocEv($3)|0);
 HEAP32[$6>>2] = $8;
 __THREW__ = 0;
 $9 = (invoke_iii(659,($6|0),(40744|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  (__ZNSt3__214__shared_count16__release_sharedEv($8)|0);
  ___resumeException($14|0);
  // unreachable;
 } else {
  (__ZNSt3__214__shared_count16__release_sharedEv($8)|0);
  $12 = ((($5)) + 24|0);
  $13 = HEAP32[$2>>2]|0;
  HEAP32[$7>>2] = $13;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;
  __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($0,$12,$1,$$byval_copy,$4,$9);
  $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($$sroa$0$0$copyload|0);
 }
 return (0)|0;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$sroa$0$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = (__ZNKSt3__28ios_base6getlocEv($3)|0);
 HEAP32[$6>>2] = $8;
 __THREW__ = 0;
 $9 = (invoke_iii(659,($6|0),(40744|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  (__ZNSt3__214__shared_count16__release_sharedEv($8)|0);
  ___resumeException($14|0);
  // unreachable;
 } else {
  (__ZNSt3__214__shared_count16__release_sharedEv($8)|0);
  $12 = ((($5)) + 16|0);
  $13 = HEAP32[$2>>2]|0;
  HEAP32[$7>>2] = $13;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;
  __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($0,$12,$1,$$byval_copy,$4,$9);
  $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($$sroa$0$0$copyload|0);
 }
 return (0)|0;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$sroa$0$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = (__ZNKSt3__28ios_base6getlocEv($3)|0);
 HEAP32[$6>>2] = $8;
 __THREW__ = 0;
 $9 = (invoke_iii(659,($6|0),(40744|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  (__ZNSt3__214__shared_count16__release_sharedEv($8)|0);
  ___resumeException($14|0);
  // unreachable;
 } else {
  (__ZNSt3__214__shared_count16__release_sharedEv($8)|0);
  $12 = ((($5)) + 20|0);
  $13 = HEAP32[$2>>2]|0;
  HEAP32[$7>>2] = $13;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;
  __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($0,$12,$1,$$byval_copy,$4,$9);
  $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($$sroa$0$0$copyload|0);
 }
 return (0)|0;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0;
 var $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $$sroa$097$0 = 0, $$sroa$097$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $$byval_copy30 = sp + 248|0;
 $$byval_copy29 = sp + 244|0;
 $$byval_copy28 = sp + 240|0;
 $$byval_copy27 = sp + 236|0;
 $$byval_copy26 = sp + 232|0;
 $$byval_copy25 = sp + 228|0;
 $$byval_copy24 = sp + 224|0;
 $$byval_copy23 = sp + 220|0;
 $$byval_copy22 = sp + 216|0;
 $$byval_copy21 = sp + 212|0;
 $$byval_copy20 = sp + 208|0;
 $$byval_copy19 = sp + 204|0;
 $$byval_copy18 = sp + 200|0;
 $$byval_copy17 = sp + 196|0;
 $$byval_copy16 = sp + 192|0;
 $$byval_copy15 = sp + 188|0;
 $$byval_copy14 = sp + 184|0;
 $$byval_copy13 = sp + 180|0;
 $$byval_copy12 = sp + 176|0;
 $$byval_copy11 = sp + 172|0;
 $$byval_copy10 = sp + 168|0;
 $$byval_copy9 = sp + 164|0;
 $$byval_copy8 = sp + 160|0;
 $$byval_copy7 = sp + 156|0;
 $$byval_copy6 = sp + 152|0;
 $$byval_copy5 = sp + 148|0;
 $$byval_copy4 = sp + 144|0;
 $$byval_copy3 = sp + 140|0;
 $$byval_copy2 = sp + 136|0;
 $$byval_copy1 = sp + 132|0;
 $$byval_copy = sp + 128|0;
 $8 = sp + 124|0;
 $9 = sp + 120|0;
 $10 = sp + 116|0;
 $11 = sp + 112|0;
 $12 = sp + 108|0;
 $13 = sp + 104|0;
 $14 = sp + 100|0;
 $15 = sp + 96|0;
 $16 = sp + 92|0;
 $17 = sp + 88|0;
 $18 = sp + 84|0;
 $19 = sp + 80|0;
 $20 = sp + 76|0;
 $21 = sp + 72|0;
 $22 = sp + 68|0;
 $23 = sp + 64|0;
 $24 = sp + 60|0;
 $25 = sp + 56|0;
 $26 = sp + 52|0;
 $27 = sp + 48|0;
 $28 = sp + 44|0;
 $29 = sp + 40|0;
 $30 = sp + 36|0;
 $31 = sp + 32|0;
 $32 = sp + 28|0;
 $33 = sp + 24|0;
 $34 = sp + 20|0;
 $35 = sp + 16|0;
 $36 = sp + 12|0;
 $37 = sp + 8|0;
 $38 = sp + 4|0;
 $39 = sp;
 HEAP32[$4>>2] = 0;
 $40 = (__ZNKSt3__28ios_base6getlocEv($3)|0);
 HEAP32[$8>>2] = $40;
 __THREW__ = 0;
 $41 = (invoke_iii(659,($8|0),(40744|0))|0);
 $42 = __THREW__; __THREW__ = 0;
 $43 = $42&1;
 if ($43) {
  $45 = ___cxa_find_matching_catch_2()|0;
  $46 = tempRet0;
  (__ZNSt3__214__shared_count16__release_sharedEv($40)|0);
  ___resumeException($45|0);
  // unreachable;
 }
 (__ZNSt3__214__shared_count16__release_sharedEv($40)|0);
 $44 = $6 << 24 >> 24;
 do {
  switch ($44|0) {
  case 65: case 97:  {
   $47 = ((($5)) + 24|0);
   $48 = HEAP32[$2>>2]|0;
   HEAP32[$9>>2] = $48;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$9>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($0,$47,$1,$$byval_copy,$4,$41);
   label = 28;
   break;
  }
  case 104: case 66: case 98:  {
   $49 = ((($5)) + 16|0);
   $50 = HEAP32[$2>>2]|0;
   HEAP32[$10>>2] = $50;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$10>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($0,$49,$1,$$byval_copy1,$4,$41);
   label = 28;
   break;
  }
  case 99:  {
   $51 = ((($0)) + 8|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ((($52)) + 12|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (FUNCTION_TABLE_ii[$54 & 1023]($51)|0);
   $56 = HEAP32[$1>>2]|0;
   HEAP32[$11>>2] = $56;
   $57 = HEAP32[$2>>2]|0;
   HEAP32[$12>>2] = $57;
   $58 = ((($55)) + 8|0);
   $59 = ((($58)) + 3|0);
   $60 = HEAP8[$59>>0]|0;
   $61 = ($60<<24>>24)<(0);
   $62 = HEAP32[$55>>2]|0;
   $63 = $61 ? $62 : $55;
   $64 = ((($55)) + 4|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $60&255;
   $67 = $61 ? $65 : $66;
   $68 = (($63) + ($67<<2)|0);
   ;HEAP32[$$byval_copy2>>2]=HEAP32[$11>>2]|0;
   ;HEAP32[$$byval_copy3>>2]=HEAP32[$12>>2]|0;
   $69 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy2,$$byval_copy3,$3,$4,$5,$63,$68)|0);
   HEAP32[$1>>2] = $69;
   label = 28;
   break;
  }
  case 101: case 100:  {
   $70 = ((($5)) + 12|0);
   $71 = HEAP32[$2>>2]|0;
   HEAP32[$13>>2] = $71;
   ;HEAP32[$$byval_copy4>>2]=HEAP32[$13>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($0,$70,$1,$$byval_copy4,$4,$41);
   label = 28;
   break;
  }
  case 68:  {
   $72 = HEAP32[$1>>2]|0;
   HEAP32[$14>>2] = $72;
   $73 = HEAP32[$2>>2]|0;
   HEAP32[$15>>2] = $73;
   ;HEAP32[$$byval_copy5>>2]=HEAP32[$14>>2]|0;
   ;HEAP32[$$byval_copy6>>2]=HEAP32[$15>>2]|0;
   $74 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy5,$$byval_copy6,$3,$4,$5,17540,(17572))|0);
   HEAP32[$1>>2] = $74;
   label = 28;
   break;
  }
  case 70:  {
   $75 = HEAP32[$1>>2]|0;
   HEAP32[$16>>2] = $75;
   $76 = HEAP32[$2>>2]|0;
   HEAP32[$17>>2] = $76;
   ;HEAP32[$$byval_copy7>>2]=HEAP32[$16>>2]|0;
   ;HEAP32[$$byval_copy8>>2]=HEAP32[$17>>2]|0;
   $77 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy7,$$byval_copy8,$3,$4,$5,17572,(17604))|0);
   HEAP32[$1>>2] = $77;
   label = 28;
   break;
  }
  case 72:  {
   $78 = ((($5)) + 8|0);
   $79 = HEAP32[$2>>2]|0;
   HEAP32[$18>>2] = $79;
   ;HEAP32[$$byval_copy9>>2]=HEAP32[$18>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($0,$78,$1,$$byval_copy9,$4,$41);
   label = 28;
   break;
  }
  case 73:  {
   $80 = ((($5)) + 8|0);
   $81 = HEAP32[$2>>2]|0;
   HEAP32[$19>>2] = $81;
   ;HEAP32[$$byval_copy10>>2]=HEAP32[$19>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($0,$80,$1,$$byval_copy10,$4,$41);
   label = 28;
   break;
  }
  case 106:  {
   $82 = ((($5)) + 28|0);
   $83 = HEAP32[$2>>2]|0;
   HEAP32[$20>>2] = $83;
   ;HEAP32[$$byval_copy11>>2]=HEAP32[$20>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($0,$82,$1,$$byval_copy11,$4,$41);
   label = 28;
   break;
  }
  case 109:  {
   $84 = ((($5)) + 16|0);
   $85 = HEAP32[$2>>2]|0;
   HEAP32[$21>>2] = $85;
   ;HEAP32[$$byval_copy12>>2]=HEAP32[$21>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($0,$84,$1,$$byval_copy12,$4,$41);
   label = 28;
   break;
  }
  case 77:  {
   $86 = ((($5)) + 4|0);
   $87 = HEAP32[$2>>2]|0;
   HEAP32[$22>>2] = $87;
   ;HEAP32[$$byval_copy13>>2]=HEAP32[$22>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($0,$86,$1,$$byval_copy13,$4,$41);
   label = 28;
   break;
  }
  case 116: case 110:  {
   $88 = HEAP32[$2>>2]|0;
   HEAP32[$23>>2] = $88;
   ;HEAP32[$$byval_copy14>>2]=HEAP32[$23>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($0,$1,$$byval_copy14,$4,$41);
   label = 28;
   break;
  }
  case 112:  {
   $89 = ((($5)) + 8|0);
   $90 = HEAP32[$2>>2]|0;
   HEAP32[$24>>2] = $90;
   ;HEAP32[$$byval_copy15>>2]=HEAP32[$24>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($0,$89,$1,$$byval_copy15,$4,$41);
   label = 28;
   break;
  }
  case 114:  {
   $91 = HEAP32[$1>>2]|0;
   HEAP32[$25>>2] = $91;
   $92 = HEAP32[$2>>2]|0;
   HEAP32[$26>>2] = $92;
   ;HEAP32[$$byval_copy16>>2]=HEAP32[$25>>2]|0;
   ;HEAP32[$$byval_copy17>>2]=HEAP32[$26>>2]|0;
   $93 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy16,$$byval_copy17,$3,$4,$5,17604,(17648))|0);
   HEAP32[$1>>2] = $93;
   label = 28;
   break;
  }
  case 82:  {
   $94 = HEAP32[$1>>2]|0;
   HEAP32[$27>>2] = $94;
   $95 = HEAP32[$2>>2]|0;
   HEAP32[$28>>2] = $95;
   ;HEAP32[$$byval_copy18>>2]=HEAP32[$27>>2]|0;
   ;HEAP32[$$byval_copy19>>2]=HEAP32[$28>>2]|0;
   $96 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy18,$$byval_copy19,$3,$4,$5,17648,(17668))|0);
   HEAP32[$1>>2] = $96;
   label = 28;
   break;
  }
  case 83:  {
   $97 = HEAP32[$2>>2]|0;
   HEAP32[$29>>2] = $97;
   ;HEAP32[$$byval_copy20>>2]=HEAP32[$29>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($0,$5,$1,$$byval_copy20,$4,$41);
   label = 28;
   break;
  }
  case 84:  {
   $98 = HEAP32[$1>>2]|0;
   HEAP32[$30>>2] = $98;
   $99 = HEAP32[$2>>2]|0;
   HEAP32[$31>>2] = $99;
   ;HEAP32[$$byval_copy21>>2]=HEAP32[$30>>2]|0;
   ;HEAP32[$$byval_copy22>>2]=HEAP32[$31>>2]|0;
   $100 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy21,$$byval_copy22,$3,$4,$5,17668,(17700))|0);
   HEAP32[$1>>2] = $100;
   label = 28;
   break;
  }
  case 119:  {
   $101 = ((($5)) + 24|0);
   $102 = HEAP32[$2>>2]|0;
   HEAP32[$32>>2] = $102;
   ;HEAP32[$$byval_copy23>>2]=HEAP32[$32>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($0,$101,$1,$$byval_copy23,$4,$41);
   label = 28;
   break;
  }
  case 120:  {
   $103 = HEAP32[$0>>2]|0;
   $104 = ((($103)) + 20|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = HEAP32[$1>>2]|0;
   HEAP32[$33>>2] = $106;
   $107 = HEAP32[$2>>2]|0;
   HEAP32[$34>>2] = $107;
   ;HEAP32[$$byval_copy24>>2]=HEAP32[$33>>2]|0;
   ;HEAP32[$$byval_copy25>>2]=HEAP32[$34>>2]|0;
   $108 = (FUNCTION_TABLE_iiiiiii[$105 & 1023]($0,$$byval_copy24,$$byval_copy25,$3,$4,$5)|0);
   $$sroa$097$0 = $108;
   break;
  }
  case 88:  {
   $109 = ((($0)) + 8|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = ((($110)) + 24|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = (FUNCTION_TABLE_ii[$112 & 1023]($109)|0);
   $114 = HEAP32[$1>>2]|0;
   HEAP32[$35>>2] = $114;
   $115 = HEAP32[$2>>2]|0;
   HEAP32[$36>>2] = $115;
   $116 = ((($113)) + 8|0);
   $117 = ((($116)) + 3|0);
   $118 = HEAP8[$117>>0]|0;
   $119 = ($118<<24>>24)<(0);
   $120 = HEAP32[$113>>2]|0;
   $121 = $119 ? $120 : $113;
   $122 = ((($113)) + 4|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = $118&255;
   $125 = $119 ? $123 : $124;
   $126 = (($121) + ($125<<2)|0);
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$35>>2]|0;
   ;HEAP32[$$byval_copy27>>2]=HEAP32[$36>>2]|0;
   $127 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy26,$$byval_copy27,$3,$4,$5,$121,$126)|0);
   HEAP32[$1>>2] = $127;
   label = 28;
   break;
  }
  case 121:  {
   $128 = ((($5)) + 20|0);
   $129 = HEAP32[$2>>2]|0;
   HEAP32[$37>>2] = $129;
   ;HEAP32[$$byval_copy28>>2]=HEAP32[$37>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($0,$128,$1,$$byval_copy28,$4,$41);
   label = 28;
   break;
  }
  case 89:  {
   $130 = ((($5)) + 20|0);
   $131 = HEAP32[$2>>2]|0;
   HEAP32[$38>>2] = $131;
   ;HEAP32[$$byval_copy29>>2]=HEAP32[$38>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($0,$130,$1,$$byval_copy29,$4,$41);
   label = 28;
   break;
  }
  case 37:  {
   $132 = HEAP32[$2>>2]|0;
   HEAP32[$39>>2] = $132;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$39>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($0,$1,$$byval_copy30,$4,$41);
   label = 28;
   break;
  }
  default: {
   $133 = HEAP32[$4>>2]|0;
   $134 = $133 | 4;
   HEAP32[$4>>2] = $134;
   label = 28;
  }
  }
 } while(0);
 if ((label|0) == 28) {
  $$sroa$097$0$copyload = HEAP32[$1>>2]|0;
  $$sroa$097$0 = $$sroa$097$0$copyload;
 }
 STACKTOP = sp;return ($$sroa$097$0|0);
}
function __ZNKSt3__220__time_get_c_storageIwE7__weeksEv($0) {
 $0 = $0|0;
 var $$0$i$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[35848]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $3 = (___cxa_guard_acquire(35848)|0);
   $4 = ($3|0)==(0);
   if (!($4)) {
    $5 = HEAP8[35856]|0;
    $6 = ($5<<24>>24)==(0);
    if ($6) {
     $7 = (___cxa_guard_acquire(35856)|0);
     $8 = ($7|0)==(0);
     if (!($8)) {
      $9 = 42228;
      while(1) {
       ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
       $$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $10 = (($9) + ($$0$i$i$i<<2)|0);
        HEAP32[$10>>2] = 0;
        $11 = (($$0$i$i$i) + 1)|0;
        $$0$i$i$i = $11;
       }
       $12 = ((($9)) + 12|0);
       $13 = ($12|0)==((42396)|0);
       if ($13) {
        break;
       } else {
        $9 = $12;
       }
      }
      (___cxa_atexit((791|0),(0|0),(___dso_handle|0))|0);
     }
    }
    __THREW__ = 0;
    (invoke_iii(792,(42228|0),(17200|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if (!($15)) {
     __THREW__ = 0;
     (invoke_iii(792,((42240)|0),(17228|0))|0);
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if (!($17)) {
      __THREW__ = 0;
      (invoke_iii(792,((42252)|0),(17256|0))|0);
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if (!($19)) {
       __THREW__ = 0;
       (invoke_iii(792,((42264)|0),(17288|0))|0);
       $20 = __THREW__; __THREW__ = 0;
       $21 = $20&1;
       if (!($21)) {
        __THREW__ = 0;
        (invoke_iii(792,((42276)|0),(17328|0))|0);
        $22 = __THREW__; __THREW__ = 0;
        $23 = $22&1;
        if (!($23)) {
         __THREW__ = 0;
         (invoke_iii(792,((42288)|0),(17364|0))|0);
         $24 = __THREW__; __THREW__ = 0;
         $25 = $24&1;
         if (!($25)) {
          __THREW__ = 0;
          (invoke_iii(792,((42300)|0),(17392|0))|0);
          $26 = __THREW__; __THREW__ = 0;
          $27 = $26&1;
          if (!($27)) {
           __THREW__ = 0;
           (invoke_iii(792,((42312)|0),(17428|0))|0);
           $28 = __THREW__; __THREW__ = 0;
           $29 = $28&1;
           if (!($29)) {
            __THREW__ = 0;
            (invoke_iii(792,((42324)|0),(17444|0))|0);
            $30 = __THREW__; __THREW__ = 0;
            $31 = $30&1;
            if (!($31)) {
             __THREW__ = 0;
             (invoke_iii(792,((42336)|0),(17460|0))|0);
             $32 = __THREW__; __THREW__ = 0;
             $33 = $32&1;
             if (!($33)) {
              __THREW__ = 0;
              (invoke_iii(792,((42348)|0),(17476|0))|0);
              $34 = __THREW__; __THREW__ = 0;
              $35 = $34&1;
              if (!($35)) {
               __THREW__ = 0;
               (invoke_iii(792,((42360)|0),(17492|0))|0);
               $36 = __THREW__; __THREW__ = 0;
               $37 = $36&1;
               if (!($37)) {
                __THREW__ = 0;
                (invoke_iii(792,((42372)|0),(17508|0))|0);
                $38 = __THREW__; __THREW__ = 0;
                $39 = $38&1;
                if (!($39)) {
                 __THREW__ = 0;
                 (invoke_iii(792,((42384)|0),(17524|0))|0);
                 $40 = __THREW__; __THREW__ = 0;
                 $41 = $40&1;
                 if (!($41)) {
                  HEAP32[10599] = 42228;
                  break;
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
    $43 = ___cxa_find_matching_catch_2()|0;
    $44 = tempRet0;
    ___resumeException($43|0);
    // unreachable;
   }
  }
 } while(0);
 $42 = HEAP32[10599]|0;
 return ($42|0);
}
function __ZNKSt3__220__time_get_c_storageIwE8__monthsEv($0) {
 $0 = $0|0;
 var $$0$i$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[35832]|0;
 $2 = ($1<<24>>24)==(0);
 L1: do {
  if ($2) {
   $3 = (___cxa_guard_acquire(35832)|0);
   $4 = ($3|0)==(0);
   if (!($4)) {
    $5 = HEAP8[35840]|0;
    $6 = ($5<<24>>24)==(0);
    if ($6) {
     $7 = (___cxa_guard_acquire(35840)|0);
     $8 = ($7|0)==(0);
     if (!($8)) {
      $9 = 41936;
      while(1) {
       ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
       $$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $10 = (($9) + ($$0$i$i$i<<2)|0);
        HEAP32[$10>>2] = 0;
        $11 = (($$0$i$i$i) + 1)|0;
        $$0$i$i$i = $11;
       }
       $12 = ((($9)) + 12|0);
       $13 = ($12|0)==((42224)|0);
       if ($13) {
        break;
       } else {
        $9 = $12;
       }
      }
      (___cxa_atexit((793|0),(0|0),(___dso_handle|0))|0);
     }
    }
    __THREW__ = 0;
    (invoke_iii(792,(41936|0),(16680|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    do {
     if (!($15)) {
      __THREW__ = 0;
      (invoke_iii(792,((41948)|0),(16712|0))|0);
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if (!($17)) {
       __THREW__ = 0;
       (invoke_iii(792,((41960)|0),(16748|0))|0);
       $18 = __THREW__; __THREW__ = 0;
       $19 = $18&1;
       if (!($19)) {
        __THREW__ = 0;
        (invoke_iii(792,((41972)|0),(16772|0))|0);
        $20 = __THREW__; __THREW__ = 0;
        $21 = $20&1;
        if (!($21)) {
         __THREW__ = 0;
         (invoke_iii(792,((41984)|0),(16796|0))|0);
         $22 = __THREW__; __THREW__ = 0;
         $23 = $22&1;
         if (!($23)) {
          __THREW__ = 0;
          (invoke_iii(792,((41996)|0),(16812|0))|0);
          $24 = __THREW__; __THREW__ = 0;
          $25 = $24&1;
          if (!($25)) {
           __THREW__ = 0;
           (invoke_iii(792,((42008)|0),(16832|0))|0);
           $26 = __THREW__; __THREW__ = 0;
           $27 = $26&1;
           if (!($27)) {
            __THREW__ = 0;
            (invoke_iii(792,((42020)|0),(16852|0))|0);
            $28 = __THREW__; __THREW__ = 0;
            $29 = $28&1;
            if (!($29)) {
             __THREW__ = 0;
             (invoke_iii(792,((42032)|0),(16880|0))|0);
             $30 = __THREW__; __THREW__ = 0;
             $31 = $30&1;
             if (!($31)) {
              __THREW__ = 0;
              (invoke_iii(792,((42044)|0),(16920|0))|0);
              $32 = __THREW__; __THREW__ = 0;
              $33 = $32&1;
              if (!($33)) {
               __THREW__ = 0;
               (invoke_iii(792,((42056)|0),(16952|0))|0);
               $34 = __THREW__; __THREW__ = 0;
               $35 = $34&1;
               if (!($35)) {
                __THREW__ = 0;
                (invoke_iii(792,((42068)|0),(16988|0))|0);
                $36 = __THREW__; __THREW__ = 0;
                $37 = $36&1;
                if (!($37)) {
                 __THREW__ = 0;
                 (invoke_iii(792,((42080)|0),(17024|0))|0);
                 $38 = __THREW__; __THREW__ = 0;
                 $39 = $38&1;
                 if (!($39)) {
                  __THREW__ = 0;
                  (invoke_iii(792,((42092)|0),(17040|0))|0);
                  $40 = __THREW__; __THREW__ = 0;
                  $41 = $40&1;
                  if (!($41)) {
                   __THREW__ = 0;
                   (invoke_iii(792,((42104)|0),(17056|0))|0);
                   $42 = __THREW__; __THREW__ = 0;
                   $43 = $42&1;
                   if (!($43)) {
                    __THREW__ = 0;
                    (invoke_iii(792,((42116)|0),(17072|0))|0);
                    $44 = __THREW__; __THREW__ = 0;
                    $45 = $44&1;
                    if ($45) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(792,((42128)|0),(16796|0))|0);
                    $46 = __THREW__; __THREW__ = 0;
                    $47 = $46&1;
                    if ($47) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(792,((42140)|0),(17088|0))|0);
                    $48 = __THREW__; __THREW__ = 0;
                    $49 = $48&1;
                    if ($49) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(792,((42152)|0),(17104|0))|0);
                    $50 = __THREW__; __THREW__ = 0;
                    $51 = $50&1;
                    if ($51) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(792,((42164)|0),(17120|0))|0);
                    $52 = __THREW__; __THREW__ = 0;
                    $53 = $52&1;
                    if ($53) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(792,((42176)|0),(17136|0))|0);
                    $54 = __THREW__; __THREW__ = 0;
                    $55 = $54&1;
                    if ($55) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(792,((42188)|0),(17152|0))|0);
                    $56 = __THREW__; __THREW__ = 0;
                    $57 = $56&1;
                    if ($57) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(792,((42200)|0),(17168|0))|0);
                    $58 = __THREW__; __THREW__ = 0;
                    $59 = $58&1;
                    if ($59) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(792,((42212)|0),(17184|0))|0);
                    $60 = __THREW__; __THREW__ = 0;
                    $61 = $60&1;
                    if ($61) {
                     break;
                    }
                    HEAP32[10556] = 41936;
                    break L1;
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    } while(0);
    $63 = ___cxa_find_matching_catch_2()|0;
    $64 = tempRet0;
    ___resumeException($63|0);
    // unreachable;
   }
  }
 } while(0);
 $62 = HEAP32[10556]|0;
 return ($62|0);
}
function __ZNKSt3__220__time_get_c_storageIwE7__am_pmEv($0) {
 $0 = $0|0;
 var $$0$i$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[35816]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $3 = (___cxa_guard_acquire(35816)|0);
   $4 = ($3|0)==(0);
   if (!($4)) {
    $5 = HEAP8[35824]|0;
    $6 = ($5<<24>>24)==(0);
    if ($6) {
     $7 = (___cxa_guard_acquire(35824)|0);
     $8 = ($7|0)==(0);
     if (!($8)) {
      $9 = 41644;
      while(1) {
       ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
       $$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $10 = (($9) + ($$0$i$i$i<<2)|0);
        HEAP32[$10>>2] = 0;
        $11 = (($$0$i$i$i) + 1)|0;
        $$0$i$i$i = $11;
       }
       $12 = ((($9)) + 12|0);
       $13 = ($12|0)==((41932)|0);
       if ($13) {
        break;
       } else {
        $9 = $12;
       }
      }
      (___cxa_atexit((794|0),(0|0),(___dso_handle|0))|0);
     }
    }
    __THREW__ = 0;
    (invoke_iii(792,(41644|0),(16656|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if (!($15)) {
     __THREW__ = 0;
     (invoke_iii(792,((41656)|0),(16668|0))|0);
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if (!($17)) {
      HEAP32[10483] = 41644;
      break;
     }
    }
    $19 = ___cxa_find_matching_catch_2()|0;
    $20 = tempRet0;
    ___resumeException($19|0);
    // unreachable;
   }
  }
 } while(0);
 $18 = HEAP32[10483]|0;
 return ($18|0);
}
function __ZNKSt3__220__time_get_c_storageIwE3__cEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[35808]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $3 = (___cxa_guard_acquire(35808)|0);
   $4 = ($3|0)==(0);
   if (!($4)) {
    ;HEAP32[41632>>2]=0|0;HEAP32[41632+4>>2]=0|0;HEAP32[41632+8>>2]=0|0;
    __THREW__ = 0;
    $5 = (invoke_ii(795,(16572|0))|0);
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if (!($7)) {
     __THREW__ = 0;
     invoke_viii(796,(41632|0),(16572|0),($5|0));
     $8 = __THREW__; __THREW__ = 0;
     $9 = $8&1;
     if (!($9)) {
      (___cxa_atexit((797|0),(41632|0),(___dso_handle|0))|0);
      break;
     }
    }
    $10 = ___cxa_find_matching_catch_2()|0;
    $11 = tempRet0;
    ___resumeException($10|0);
    // unreachable;
   }
  }
 } while(0);
 return (41632|0);
}
function __ZNKSt3__220__time_get_c_storageIwE3__rEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[35800]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $3 = (___cxa_guard_acquire(35800)|0);
   $4 = ($3|0)==(0);
   if (!($4)) {
    ;HEAP32[41620>>2]=0|0;HEAP32[41620+4>>2]=0|0;HEAP32[41620+8>>2]=0|0;
    __THREW__ = 0;
    $5 = (invoke_ii(795,(16524|0))|0);
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if (!($7)) {
     __THREW__ = 0;
     invoke_viii(796,(41620|0),(16524|0),($5|0));
     $8 = __THREW__; __THREW__ = 0;
     $9 = $8&1;
     if (!($9)) {
      (___cxa_atexit((797|0),(41620|0),(___dso_handle|0))|0);
      break;
     }
    }
    $10 = ___cxa_find_matching_catch_2()|0;
    $11 = tempRet0;
    ___resumeException($10|0);
    // unreachable;
   }
  }
 } while(0);
 return (41620|0);
}
function __ZNKSt3__220__time_get_c_storageIwE3__xEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[35792]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $3 = (___cxa_guard_acquire(35792)|0);
   $4 = ($3|0)==(0);
   if (!($4)) {
    ;HEAP32[41608>>2]=0|0;HEAP32[41608+4>>2]=0|0;HEAP32[41608+8>>2]=0|0;
    __THREW__ = 0;
    $5 = (invoke_ii(795,(16488|0))|0);
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if (!($7)) {
     __THREW__ = 0;
     invoke_viii(796,(41608|0),(16488|0),($5|0));
     $8 = __THREW__; __THREW__ = 0;
     $9 = $8&1;
     if (!($9)) {
      (___cxa_atexit((797|0),(41608|0),(___dso_handle|0))|0);
      break;
     }
    }
    $10 = ___cxa_find_matching_catch_2()|0;
    $11 = tempRet0;
    ___resumeException($10|0);
    // unreachable;
   }
  }
 } while(0);
 return (41608|0);
}
function __ZNKSt3__220__time_get_c_storageIwE3__XEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[35784]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $3 = (___cxa_guard_acquire(35784)|0);
   $4 = ($3|0)==(0);
   if (!($4)) {
    ;HEAP32[41596>>2]=0|0;HEAP32[41596+4>>2]=0|0;HEAP32[41596+8>>2]=0|0;
    __THREW__ = 0;
    $5 = (invoke_ii(795,(16452|0))|0);
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if (!($7)) {
     __THREW__ = 0;
     invoke_viii(796,(41596|0),(16452|0),($5|0));
     $8 = __THREW__; __THREW__ = 0;
     $9 = $8&1;
     if (!($9)) {
      (___cxa_atexit((797|0),(41596|0),(___dso_handle|0))|0);
      break;
     }
    }
    $10 = ___cxa_find_matching_catch_2()|0;
    $11 = tempRet0;
    ___resumeException($10|0);
    // unreachable;
   }
  }
 } while(0);
 return (41596|0);
}
function ___cxx_global_array_dtor_120($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (41932);
 while(1) {
  $1 = ((($2)) + -12|0);
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($1);
  $3 = ($1|0)==(41644|0);
  if ($3) {
   break;
  } else {
   $2 = $1;
  }
 }
 return;
}
function ___cxx_global_array_dtor_93($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (42224);
 while(1) {
  $1 = ((($2)) + -12|0);
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($1);
  $3 = ($1|0)==(41936|0);
  if ($3) {
   break;
  } else {
   $2 = $1;
  }
 }
 return;
}
function ___cxx_global_array_dtor_54($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (42396);
 while(1) {
  $1 = ((($2)) + -12|0);
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($1);
  $3 = ($1|0)==(42228|0);
  if ($3) {
   break;
  } else {
   $2 = $1;
  }
 }
 return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 1023]($7)|0);
 $11 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $11;
 $12 = ((($10)) + 168|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $13 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($2,$$byval_copy,$10,$12,$5,$4,0)|0);
 $14 = $13;
 $15 = $10;
 $16 = (($14) - ($15))|0;
 $17 = ($16|0)<(168);
 if ($17) {
  $18 = (($16|0) / 12)&-1;
  $19 = (($18|0) % 7)&-1;
  HEAP32[$1>>2] = $19;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $12 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $12;
 $13 = ((($11)) + 288|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $14 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($2,$$byval_copy,$11,$13,$5,$4,0)|0);
 $15 = $14;
 $16 = $11;
 $17 = (($15) - ($16))|0;
 $18 = ($17|0)<(288);
 if ($18) {
  $19 = (($17|0) / 12)&-1;
  $20 = (($19|0) % 12)&-1;
  HEAP32[$1>>2] = $20;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i54 = 0, $$0$i$i$i$i69 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i60 = 0, $$0$i$i2$i$i75 = 0, $$0$i$i66 = 0, $$0$ph = 0, $$0$ph$be = 0, $$0$pn = 0, $$051 = 0, $$052 = 0, $$3 = 0, $$3$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$ph = 0, $$pre = 0, $$pre$i$i$i56 = 0;
 var $$pre$i$i$i71 = 0, $$pre$i4$i$i62 = 0, $$pre$i4$i$i6295 = 0, $$pre$i4$i$i6296 = 0, $$pre$pre = 0, $$sroa$049$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $phitmp$i5$i$i63 = 0, $tmp$i$i65 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy1 = sp + 16|0;
 $$byval_copy = sp + 12|0;
 $8 = sp + 8|0;
 $9 = sp + 4|0;
 $10 = sp;
 $11 = (__ZNKSt3__28ios_base6getlocEv($3)|0);
 HEAP32[$8>>2] = $11;
 __THREW__ = 0;
 $12 = (invoke_iii(659,($8|0),(40744|0))|0);
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $46 = ___cxa_find_matching_catch_2()|0;
  $47 = tempRet0;
  (__ZNSt3__214__shared_count16__release_sharedEv($11)|0);
  ___resumeException($46|0);
  // unreachable;
 }
 (__ZNSt3__214__shared_count16__release_sharedEv($11)|0);
 HEAP32[$4>>2] = 0;
 $$0$ph = $6;$$pre = 0;
 L4: while(1) {
  $15 = ($$0$ph|0)!=($7|0);
  $16 = $$pre;
  while(1) {
   $17 = ($16|0)==(0);
   $or$cond = $15 & $17;
   $18 = HEAP32[$1>>2]|0;
   if (!($or$cond)) {
    $$pre$i$i$i71 = $18;
    break L4;
   }
   $19 = ($18|0)==(0|0);
   $20 = $18;
   if ($19) {
    $136 = 0;$191 = 1;$71 = $20;
   } else {
    $21 = ((($18)) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($18)) + 16|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($22|0)==($24|0);
    if ($25) {
     $26 = HEAP32[$18>>2]|0;
     $27 = ((($26)) + 36|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = (FUNCTION_TABLE_ii[$28 & 1023]($18)|0);
     $$0$i$i$i$i = $29;
    } else {
     $30 = HEAP32[$22>>2]|0;
     $$0$i$i$i$i = $30;
    }
    $31 = ($$0$i$i$i$i|0)==(-1);
    if ($31) {
     HEAP32[$1>>2] = 0;
     $136 = 0;$191 = 1;$71 = 0;
    } else {
     $136 = $18;$191 = 0;$71 = $20;
    }
   }
   $32 = HEAP32[$2>>2]|0;
   $33 = ($32|0)==(0|0);
   $34 = $32;
   do {
    if ($33) {
     $$ph = $34;
     label = 17;
    } else {
     $35 = ((($32)) + 12|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ((($32)) + 16|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($36|0)==($38|0);
     if ($39) {
      $40 = HEAP32[$32>>2]|0;
      $41 = ((($40)) + 36|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = (FUNCTION_TABLE_ii[$42 & 1023]($32)|0);
      $$0$i$i2$i$i = $43;
     } else {
      $44 = HEAP32[$36>>2]|0;
      $$0$i$i2$i$i = $44;
     }
     $45 = ($$0$i$i2$i$i|0)==(-1);
     if ($45) {
      HEAP32[$2>>2] = 0;
      $$ph = 0;
      label = 17;
      break;
     } else {
      if ($191) {
       $192 = $32;$72 = $34;
       break;
      } else {
       label = 19;
       break L4;
      }
     }
    }
   } while(0);
   if ((label|0) == 17) {
    label = 0;
    if ($191) {
     label = 19;
     break L4;
    } else {
     $192 = 0;$72 = $$ph;
    }
   }
   $48 = HEAP32[$$0$ph>>2]|0;
   $49 = HEAP32[$12>>2]|0;
   $50 = ((($49)) + 52|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (FUNCTION_TABLE_iiii[$51 & 1023]($12,$48,0)|0);
   $53 = ($52<<24>>24)==(37);
   if ($53) {
    label = 22;
    break;
   }
   $76 = HEAP32[$$0$ph>>2]|0;
   $77 = HEAP32[$12>>2]|0;
   $78 = ((($77)) + 12|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = (FUNCTION_TABLE_iiii[$79 & 1023]($12,8192,$76)|0);
   if ($80) {
    $$0$pn = $$0$ph;
    label = 30;
    break;
   }
   $135 = ((($136)) + 12|0);
   $137 = HEAP32[$135>>2]|0;
   $138 = ((($136)) + 16|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = ($137|0)==($139|0);
   if ($140) {
    $141 = HEAP32[$136>>2]|0;
    $142 = ((($141)) + 36|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = (FUNCTION_TABLE_ii[$143 & 1023]($136)|0);
    $$0$i$i66 = $144;
   } else {
    $145 = HEAP32[$137>>2]|0;
    $$0$i$i66 = $145;
   }
   $146 = HEAP32[$12>>2]|0;
   $147 = ((($146)) + 28|0);
   $148 = HEAP32[$147>>2]|0;
   $149 = (FUNCTION_TABLE_iii[$148 & 1023]($12,$$0$i$i66)|0);
   $150 = HEAP32[$$0$ph>>2]|0;
   $151 = HEAP32[$12>>2]|0;
   $152 = ((($151)) + 28|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = (FUNCTION_TABLE_iii[$153 & 1023]($12,$150)|0);
   $155 = ($149|0)==($154|0);
   if ($155) {
    label = 58;
    break;
   }
   HEAP32[$4>>2] = 4;
   $16 = 4;
  }
  L36: do {
   if ((label|0) == 22) {
    label = 0;
    $54 = ((($$0$ph)) + 4|0);
    $55 = ($54|0)==($7|0);
    if ($55) {
     label = 23;
     break L4;
    }
    $56 = HEAP32[$54>>2]|0;
    $57 = HEAP32[$12>>2]|0;
    $58 = ((($57)) + 52|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (FUNCTION_TABLE_iiii[$59 & 1023]($12,$56,0)|0);
    switch ($60<<24>>24) {
    case 48: case 69:  {
     $61 = ((($$0$ph)) + 8|0);
     $62 = ($61|0)==($7|0);
     if ($62) {
      label = 28;
      break L4;
     }
     $63 = HEAP32[$61>>2]|0;
     $64 = HEAP32[$12>>2]|0;
     $65 = ((($64)) + 52|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = (FUNCTION_TABLE_iiii[$66 & 1023]($12,$63,0)|0);
     $$051 = $60;$$052 = $67;$75 = $54;
     break;
    }
    default: {
     $$051 = 0;$$052 = $60;$75 = $$0$ph;
    }
    }
    $68 = HEAP32[$0>>2]|0;
    $69 = ((($68)) + 36|0);
    $70 = HEAP32[$69>>2]|0;
    HEAP32[$9>>2] = $71;
    HEAP32[$10>>2] = $72;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$9>>2]|0;
    ;HEAP32[$$byval_copy1>>2]=HEAP32[$10>>2]|0;
    $73 = (FUNCTION_TABLE_iiiiiiiii[$70 & 1023]($0,$$byval_copy,$$byval_copy1,$3,$4,$5,$$052,$$051)|0);
    HEAP32[$1>>2] = $73;
    $74 = ((($75)) + 8|0);
    $$0$ph$be = $74;
   }
   else if ((label|0) == 30) {
    while(1) {
     label = 0;
     $$3 = ((($$0$pn)) + 4|0);
     $81 = ($$3|0)==($7|0);
     if ($81) {
      $$3$lcssa = $7;
      break;
     }
     $82 = HEAP32[$$3>>2]|0;
     $83 = HEAP32[$12>>2]|0;
     $84 = ((($83)) + 12|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = (FUNCTION_TABLE_iiii[$85 & 1023]($12,8192,$82)|0);
     if ($86) {
      $$0$pn = $$3;
      label = 30;
     } else {
      $$3$lcssa = $$3;
      break;
     }
    }
    $$pre$i$i$i56 = $136;$$pre$i4$i$i62 = $192;$99 = $192;
    while(1) {
     $87 = ($$pre$i$i$i56|0)==(0|0);
     if ($87) {
      $112 = 1;$114 = 0;
     } else {
      $88 = ((($$pre$i$i$i56)) + 12|0);
      $89 = HEAP32[$88>>2]|0;
      $90 = ((($$pre$i$i$i56)) + 16|0);
      $91 = HEAP32[$90>>2]|0;
      $92 = ($89|0)==($91|0);
      if ($92) {
       $93 = HEAP32[$$pre$i$i$i56>>2]|0;
       $94 = ((($93)) + 36|0);
       $95 = HEAP32[$94>>2]|0;
       $96 = (FUNCTION_TABLE_ii[$95 & 1023]($$pre$i$i$i56)|0);
       $$0$i$i$i$i54 = $96;
      } else {
       $97 = HEAP32[$89>>2]|0;
       $$0$i$i$i$i54 = $97;
      }
      $98 = ($$0$i$i$i$i54|0)==(-1);
      if ($98) {
       HEAP32[$1>>2] = 0;
       $112 = 1;$114 = 0;
      } else {
       $112 = 0;$114 = $$pre$i$i$i56;
      }
     }
     $100 = ($99|0)==(0|0);
     do {
      if ($100) {
       $$pre$i4$i$i6296 = $$pre$i4$i$i62;
       label = 45;
      } else {
       $101 = ((($99)) + 12|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = ((($99)) + 16|0);
       $104 = HEAP32[$103>>2]|0;
       $105 = ($102|0)==($104|0);
       if ($105) {
        $106 = HEAP32[$99>>2]|0;
        $107 = ((($106)) + 36|0);
        $108 = HEAP32[$107>>2]|0;
        $109 = (FUNCTION_TABLE_ii[$108 & 1023]($99)|0);
        $$0$i$i2$i$i60 = $109;
       } else {
        $110 = HEAP32[$102>>2]|0;
        $$0$i$i2$i$i60 = $110;
       }
       $111 = ($$0$i$i2$i$i60|0)==(-1);
       if ($111) {
        HEAP32[$2>>2] = 0;
        $$pre$i4$i$i6296 = 0;
        label = 45;
        break;
       } else {
        $phitmp$i5$i$i63 = ($$pre$i4$i$i62|0)==(0|0);
        $tmp$i$i65 = $112 ^ $phitmp$i5$i$i63;
        if ($tmp$i$i65) {
         $$pre$i4$i$i6295 = $$pre$i4$i$i62;$193 = $$pre$i4$i$i62;
         break;
        } else {
         $$0$ph$be = $$3$lcssa;
         break L36;
        }
       }
      }
     } while(0);
     if ((label|0) == 45) {
      label = 0;
      if ($112) {
       $$0$ph$be = $$3$lcssa;
       break L36;
      } else {
       $$pre$i4$i$i6295 = $$pre$i4$i$i6296;$193 = 0;
      }
     }
     $113 = ((($114)) + 12|0);
     $115 = HEAP32[$113>>2]|0;
     $116 = ((($114)) + 16|0);
     $117 = HEAP32[$116>>2]|0;
     $118 = ($115|0)==($117|0);
     if ($118) {
      $119 = HEAP32[$114>>2]|0;
      $120 = ((($119)) + 36|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = (FUNCTION_TABLE_ii[$121 & 1023]($114)|0);
      $$0$i$i = $122;
     } else {
      $123 = HEAP32[$115>>2]|0;
      $$0$i$i = $123;
     }
     $124 = HEAP32[$12>>2]|0;
     $125 = ((($124)) + 12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = (FUNCTION_TABLE_iiii[$126 & 1023]($12,8192,$$0$i$i)|0);
     if (!($127)) {
      $$0$ph$be = $$3$lcssa;
      break L36;
     }
     $128 = HEAP32[$113>>2]|0;
     $129 = HEAP32[$116>>2]|0;
     $130 = ($128|0)==($129|0);
     if ($130) {
      $131 = HEAP32[$114>>2]|0;
      $132 = ((($131)) + 40|0);
      $133 = HEAP32[$132>>2]|0;
      (FUNCTION_TABLE_ii[$133 & 1023]($114)|0);
      $$pre$i$i$i56 = $114;$$pre$i4$i$i62 = $$pre$i4$i$i6295;$99 = $193;
      continue;
     } else {
      $134 = ((($128)) + 4|0);
      HEAP32[$113>>2] = $134;
      $$pre$i$i$i56 = $114;$$pre$i4$i$i62 = $$pre$i4$i$i6295;$99 = $193;
      continue;
     }
    }
   }
   else if ((label|0) == 58) {
    label = 0;
    $156 = HEAP32[$135>>2]|0;
    $157 = HEAP32[$138>>2]|0;
    $158 = ($156|0)==($157|0);
    if ($158) {
     $159 = HEAP32[$136>>2]|0;
     $160 = ((($159)) + 40|0);
     $161 = HEAP32[$160>>2]|0;
     (FUNCTION_TABLE_ii[$161 & 1023]($136)|0);
    } else {
     $162 = ((($156)) + 4|0);
     HEAP32[$135>>2] = $162;
    }
    $163 = ((($$0$ph)) + 4|0);
    $$0$ph$be = $163;
   }
  } while(0);
  $$pre$pre = HEAP32[$4>>2]|0;
  $$0$ph = $$0$ph$be;$$pre = $$pre$pre;
 }
 if ((label|0) == 19) {
  HEAP32[$4>>2] = 4;
  $$pre$i$i$i71 = $136;
 }
 else if ((label|0) == 23) {
  HEAP32[$4>>2] = 4;
  $$pre$i$i$i71 = $136;
 }
 else if ((label|0) == 28) {
  HEAP32[$4>>2] = 4;
  $$pre$i$i$i71 = $136;
 }
 $164 = ($$pre$i$i$i71|0)==(0|0);
 if ($164) {
  $$sroa$049$0$copyload = 0;$194 = 1;
 } else {
  $165 = ((($$pre$i$i$i71)) + 12|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = ((($$pre$i$i$i71)) + 16|0);
  $168 = HEAP32[$167>>2]|0;
  $169 = ($166|0)==($168|0);
  if ($169) {
   $170 = HEAP32[$$pre$i$i$i71>>2]|0;
   $171 = ((($170)) + 36|0);
   $172 = HEAP32[$171>>2]|0;
   $173 = (FUNCTION_TABLE_ii[$172 & 1023]($$pre$i$i$i71)|0);
   $$0$i$i$i$i69 = $173;
  } else {
   $174 = HEAP32[$166>>2]|0;
   $$0$i$i$i$i69 = $174;
  }
  $175 = ($$0$i$i$i$i69|0)==(-1);
  if ($175) {
   HEAP32[$1>>2] = 0;
   $$sroa$049$0$copyload = 0;$194 = 1;
  } else {
   $$sroa$049$0$copyload = $$pre$i$i$i71;$194 = 0;
  }
 }
 $176 = HEAP32[$2>>2]|0;
 $177 = ($176|0)==(0|0);
 do {
  if ($177) {
   label = 76;
  } else {
   $178 = ((($176)) + 12|0);
   $179 = HEAP32[$178>>2]|0;
   $180 = ((($176)) + 16|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = ($179|0)==($181|0);
   if ($182) {
    $183 = HEAP32[$176>>2]|0;
    $184 = ((($183)) + 36|0);
    $185 = HEAP32[$184>>2]|0;
    $186 = (FUNCTION_TABLE_ii[$185 & 1023]($176)|0);
    $$0$i$i2$i$i75 = $186;
   } else {
    $187 = HEAP32[$179>>2]|0;
    $$0$i$i2$i$i75 = $187;
   }
   $188 = ($$0$i$i2$i$i75|0)==(-1);
   if ($188) {
    HEAP32[$2>>2] = 0;
    label = 76;
    break;
   } else {
    if ($194) {
     break;
    } else {
     label = 78;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 76) {
  if ($194) {
   label = 78;
  }
 }
 if ((label|0) == 78) {
  $189 = HEAP32[$4>>2]|0;
  $190 = $189 | 2;
  HEAP32[$4>>2] = $190;
 }
 STACKTOP = sp;return ($$sroa$049$0$copyload|0);
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $$off = (($8) + -1)|0;
 $12 = ($$off>>>0)<(31);
 $13 = $12 & $11;
 if ($13) {
  HEAP32[$1>>2] = $8;
 } else {
  $14 = $9 | 4;
  HEAP32[$4>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(24);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $$off = (($8) + -1)|0;
 $12 = ($$off>>>0)<(12);
 $13 = $12 & $11;
 if ($13) {
  HEAP32[$1>>2] = $8;
 } else {
  $14 = $9 | 4;
  HEAP32[$4>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,3)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(366);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(13);
 $or$cond = $12 & $11;
 if ($or$cond) {
  $13 = (($8) + -1)|0;
  HEAP32[$1>>2] = $13;
 } else {
  $14 = $9 | 4;
  HEAP32[$4>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(60);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i7 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i13 = 0, $$pre$i$i$i = 0, $$pre$i$i$i9 = 0, $$pre$i4$i$i15 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1: while(1) {
  $5 = HEAP32[$1>>2]|0;
  $6 = ($5|0)==(0|0);
  do {
   if ($6) {
    $83 = 1;
   } else {
    $7 = ((($5)) + 12|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ((($5)) + 16|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($8|0)==($10|0);
    if ($11) {
     $12 = HEAP32[$5>>2]|0;
     $13 = ((($12)) + 36|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (FUNCTION_TABLE_ii[$14 & 1023]($5)|0);
     $$0$i$i$i$i = $15;
    } else {
     $16 = HEAP32[$8>>2]|0;
     $$0$i$i$i$i = $16;
    }
    $17 = ($$0$i$i$i$i|0)==(-1);
    if ($17) {
     HEAP32[$1>>2] = 0;
     $83 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$1>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $83 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $18 = HEAP32[$2>>2]|0;
  $19 = ($18|0)==(0|0);
  do {
   if ($19) {
    label = 15;
   } else {
    $20 = ((($18)) + 12|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ((($18)) + 16|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($21|0)==($23|0);
    if ($24) {
     $25 = HEAP32[$18>>2]|0;
     $26 = ((($25)) + 36|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_ii[$27 & 1023]($18)|0);
     $$0$i$i2$i$i = $28;
    } else {
     $29 = HEAP32[$21>>2]|0;
     $$0$i$i2$i$i = $29;
    }
    $30 = ($$0$i$i2$i$i|0)==(-1);
    if ($30) {
     HEAP32[$2>>2] = 0;
     label = 15;
     break;
    } else {
     if ($83) {
      $84 = $18;
      break;
     } else {
      $$pre$i4$i$i15 = $18;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   if ($83) {
    $$pre$i4$i$i15 = 0;
    break;
   } else {
    $84 = 0;
   }
  }
  $31 = HEAP32[$1>>2]|0;
  $32 = ((($31)) + 12|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ((($31)) + 16|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($33|0)==($35|0);
  if ($36) {
   $37 = HEAP32[$31>>2]|0;
   $38 = ((($37)) + 36|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (FUNCTION_TABLE_ii[$39 & 1023]($31)|0);
   $$0$i$i = $40;
  } else {
   $41 = HEAP32[$33>>2]|0;
   $$0$i$i = $41;
  }
  $42 = HEAP32[$4>>2]|0;
  $43 = ((($42)) + 12|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (FUNCTION_TABLE_iiii[$44 & 1023]($4,8192,$$0$i$i)|0);
  if (!($45)) {
   $$pre$i4$i$i15 = $84;
   break;
  }
  $46 = HEAP32[$1>>2]|0;
  $47 = ((($46)) + 12|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ((($46)) + 16|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($48|0)==($50|0);
  if ($51) {
   $52 = HEAP32[$46>>2]|0;
   $53 = ((($52)) + 40|0);
   $54 = HEAP32[$53>>2]|0;
   (FUNCTION_TABLE_ii[$54 & 1023]($46)|0);
   continue;
  } else {
   $55 = ((($48)) + 4|0);
   HEAP32[$47>>2] = $55;
   continue;
  }
 }
 $56 = HEAP32[$1>>2]|0;
 $57 = ($56|0)==(0|0);
 do {
  if ($57) {
   $85 = 1;
  } else {
   $58 = ((($56)) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ((($56)) + 16|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($59|0)==($61|0);
   if ($62) {
    $63 = HEAP32[$56>>2]|0;
    $64 = ((($63)) + 36|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (FUNCTION_TABLE_ii[$65 & 1023]($56)|0);
    $$0$i$i$i$i7 = $66;
   } else {
    $67 = HEAP32[$59>>2]|0;
    $$0$i$i$i$i7 = $67;
   }
   $68 = ($$0$i$i$i$i7|0)==(-1);
   if ($68) {
    HEAP32[$1>>2] = 0;
    $85 = 1;
    break;
   } else {
    $$pre$i$i$i9 = HEAP32[$1>>2]|0;
    $phitmp$i$i$i10 = ($$pre$i$i$i9|0)==(0|0);
    $85 = $phitmp$i$i$i10;
    break;
   }
  }
 } while(0);
 $69 = ($$pre$i4$i$i15|0)==(0|0);
 do {
  if ($69) {
   label = 37;
  } else {
   $70 = ((($$pre$i4$i$i15)) + 12|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = ((($$pre$i4$i$i15)) + 16|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = ($71|0)==($73|0);
   if ($74) {
    $75 = HEAP32[$$pre$i4$i$i15>>2]|0;
    $76 = ((($75)) + 36|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = (FUNCTION_TABLE_ii[$77 & 1023]($$pre$i4$i$i15)|0);
    $$0$i$i2$i$i13 = $78;
   } else {
    $79 = HEAP32[$71>>2]|0;
    $$0$i$i2$i$i13 = $79;
   }
   $80 = ($$0$i$i2$i$i13|0)==(-1);
   if ($80) {
    HEAP32[$2>>2] = 0;
    label = 37;
    break;
   } else {
    if ($85) {
     break;
    } else {
     label = 39;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 37) {
  if ($85) {
   label = 39;
  }
 }
 if ((label|0) == 39) {
  $81 = HEAP32[$3>>2]|0;
  $82 = $81 | 2;
  HEAP32[$3>>2] = $82;
 }
 return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $12 = ((($11)) + 8|0);
 $13 = ((($12)) + 3|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)<(0);
 if ($15) {
  $16 = ((($11)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $28 = $17;
 } else {
  $18 = $14&255;
  $28 = $18;
 }
 $19 = ((($11)) + 20|0);
 $20 = ((($19)) + 3|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = ($21<<24>>24)<(0);
 if ($22) {
  $23 = ((($11)) + 16|0);
  $24 = HEAP32[$23>>2]|0;
  $27 = $24;
 } else {
  $25 = $21&255;
  $27 = $25;
 }
 $26 = (0 - ($27))|0;
 $29 = ($28|0)==($26|0);
 do {
  if ($29) {
   $30 = HEAP32[$4>>2]|0;
   $31 = $30 | 4;
   HEAP32[$4>>2] = $31;
  } else {
   $32 = HEAP32[$3>>2]|0;
   HEAP32[$6>>2] = $32;
   $33 = ((($11)) + 24|0);
   ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
   $34 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($2,$$byval_copy,$11,$33,$5,$4,0)|0);
   $35 = $34;
   $36 = $11;
   $37 = (($35) - ($36))|0;
   $38 = ($37|0)==(0);
   $39 = HEAP32[$1>>2]|0;
   $40 = ($39|0)==(12);
   $or$cond = $40 & $38;
   if ($or$cond) {
    HEAP32[$1>>2] = 0;
    break;
   }
   $41 = ($37|0)==(12);
   $42 = ($39|0)<(12);
   $or$cond20 = $42 & $41;
   if ($or$cond20) {
    $43 = (($39) + 12)|0;
    HEAP32[$1>>2] = $43;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(61);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,1)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(7);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$0 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,4)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = ($8|0)<(69);
  if ($12) {
   $13 = (($8) + 2000)|0;
   $$0 = $13;
  } else {
   $14 = ($8|0)<(100);
   $15 = (($8) + 1900)|0;
   $$ = $14 ? $15 : $8;
   $$0 = $$;
  }
  $16 = (($$0) + -1900)|0;
  HEAP32[$1>>2] = $16;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,4)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = (($8) + -1900)|0;
  HEAP32[$1>>2] = $12;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i8 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i14 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i10 = 0, $$pre$i4$i$i1622 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP32[$1>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   $88 = 1;
  } else {
   $7 = ((($5)) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($5)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($8|0)==($10|0);
   if ($11) {
    $12 = HEAP32[$5>>2]|0;
    $13 = ((($12)) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (FUNCTION_TABLE_ii[$14 & 1023]($5)|0);
    $$0$i$i$i$i = $15;
   } else {
    $16 = HEAP32[$8>>2]|0;
    $$0$i$i$i$i = $16;
   }
   $17 = ($$0$i$i$i$i|0)==(-1);
   if ($17) {
    HEAP32[$1>>2] = 0;
    $88 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$1>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $88 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $18 = HEAP32[$2>>2]|0;
 $19 = ($18|0)==(0|0);
 do {
  if ($19) {
   label = 14;
  } else {
   $20 = ((($18)) + 12|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ((($18)) + 16|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($21|0)==($23|0);
   if ($24) {
    $25 = HEAP32[$18>>2]|0;
    $26 = ((($25)) + 36|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (FUNCTION_TABLE_ii[$27 & 1023]($18)|0);
    $$0$i$i2$i$i = $28;
   } else {
    $29 = HEAP32[$21>>2]|0;
    $$0$i$i2$i$i = $29;
   }
   $30 = ($$0$i$i2$i$i|0)==(-1);
   if ($30) {
    HEAP32[$2>>2] = 0;
    label = 14;
    break;
   } else {
    if ($88) {
     $$pre$i4$i$i1622 = $18;
     label = 17;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($88) {
   label = 16;
  } else {
   $$pre$i4$i$i1622 = 0;
   label = 17;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $31 = HEAP32[$3>>2]|0;
   $32 = $31 | 6;
   HEAP32[$3>>2] = $32;
  }
  else if ((label|0) == 17) {
   $33 = HEAP32[$1>>2]|0;
   $34 = ((($33)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ((($33)) + 16|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($35|0)==($37|0);
   if ($38) {
    $39 = HEAP32[$33>>2]|0;
    $40 = ((($39)) + 36|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (FUNCTION_TABLE_ii[$41 & 1023]($33)|0);
    $$0$i$i = $42;
   } else {
    $43 = HEAP32[$35>>2]|0;
    $$0$i$i = $43;
   }
   $44 = HEAP32[$4>>2]|0;
   $45 = ((($44)) + 52|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (FUNCTION_TABLE_iiii[$46 & 1023]($4,$$0$i$i,0)|0);
   $48 = ($47<<24>>24)==(37);
   if (!($48)) {
    $49 = HEAP32[$3>>2]|0;
    $50 = $49 | 4;
    HEAP32[$3>>2] = $50;
    break;
   }
   $51 = HEAP32[$1>>2]|0;
   $52 = ((($51)) + 12|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ((($51)) + 16|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ($53|0)==($55|0);
   if ($56) {
    $58 = HEAP32[$51>>2]|0;
    $59 = ((($58)) + 40|0);
    $60 = HEAP32[$59>>2]|0;
    (FUNCTION_TABLE_ii[$60 & 1023]($51)|0);
    $$pre = HEAP32[$1>>2]|0;
    $61 = ($$pre|0)==(0|0);
    if ($61) {
     $89 = 1;
    } else {
     $63 = $$pre;
     label = 25;
    }
   } else {
    $57 = ((($53)) + 4|0);
    HEAP32[$52>>2] = $57;
    $63 = $51;
    label = 25;
   }
   do {
    if ((label|0) == 25) {
     $62 = ((($63)) + 12|0);
     $64 = HEAP32[$62>>2]|0;
     $65 = ((($63)) + 16|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = ($64|0)==($66|0);
     if ($67) {
      $68 = HEAP32[$63>>2]|0;
      $69 = ((($68)) + 36|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = (FUNCTION_TABLE_ii[$70 & 1023]($63)|0);
      $$0$i$i$i$i8 = $71;
     } else {
      $72 = HEAP32[$64>>2]|0;
      $$0$i$i$i$i8 = $72;
     }
     $73 = ($$0$i$i$i$i8|0)==(-1);
     if ($73) {
      HEAP32[$1>>2] = 0;
      $89 = 1;
      break;
     } else {
      $$pre$i$i$i10 = HEAP32[$1>>2]|0;
      $phitmp$i$i$i11 = ($$pre$i$i$i10|0)==(0|0);
      $89 = $phitmp$i$i$i11;
      break;
     }
    }
   } while(0);
   $74 = ($$pre$i4$i$i1622|0)==(0|0);
   do {
    if ($74) {
     label = 37;
    } else {
     $75 = ((($$pre$i4$i$i1622)) + 12|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = ((($$pre$i4$i$i1622)) + 16|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = ($76|0)==($78|0);
     if ($79) {
      $80 = HEAP32[$$pre$i4$i$i1622>>2]|0;
      $81 = ((($80)) + 36|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = (FUNCTION_TABLE_ii[$82 & 1023]($$pre$i4$i$i1622)|0);
      $$0$i$i2$i$i14 = $83;
     } else {
      $84 = HEAP32[$76>>2]|0;
      $$0$i$i2$i$i14 = $84;
     }
     $85 = ($$0$i$i2$i$i14|0)==(-1);
     if ($85) {
      HEAP32[$2>>2] = 0;
      label = 37;
      break;
     } else {
      if ($89) {
       break L22;
      } else {
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 37) {
    if (!($89)) {
     break;
    }
   }
   $86 = HEAP32[$3>>2]|0;
   $87 = $86 | 2;
   HEAP32[$3>>2] = $87;
  }
 } while(0);
 return;
}
function __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i27 = 0, $$0$i$i$i$i42 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i33 = 0, $$0$i$i2$i$i48 = 0, $$0$i$i39 = 0, $$0$in = 0, $$025 = 0, $$025$in = 0, $$2 = 0, $$pre$i$i$i = 0, $$pre$i$i$i29 = 0, $$pre$i$i$i44 = 0, $$pre$i4$i$i35 = 0, $$pre$i4$i$i50 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i30 = 0, $phitmp$i$i$i45 = 0, $phitmp$i5$i$i36 = 0, $tmp$i$i38 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP32[$0>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   $153 = 1;
  } else {
   $7 = ((($5)) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($5)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($8|0)==($10|0);
   if ($11) {
    $12 = HEAP32[$5>>2]|0;
    $13 = ((($12)) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (FUNCTION_TABLE_ii[$14 & 1023]($5)|0);
    $$0$i$i$i$i = $15;
   } else {
    $16 = HEAP32[$8>>2]|0;
    $$0$i$i$i$i = $16;
   }
   $17 = ($$0$i$i$i$i|0)==(-1);
   if ($17) {
    HEAP32[$0>>2] = 0;
    $153 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$0>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $153 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $18 = HEAP32[$1>>2]|0;
 $19 = ($18|0)==(0|0);
 do {
  if ($19) {
   label = 14;
  } else {
   $20 = ((($18)) + 12|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ((($18)) + 16|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($21|0)==($23|0);
   if ($24) {
    $25 = HEAP32[$18>>2]|0;
    $26 = ((($25)) + 36|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (FUNCTION_TABLE_ii[$27 & 1023]($18)|0);
    $$0$i$i2$i$i = $28;
   } else {
    $29 = HEAP32[$21>>2]|0;
    $$0$i$i2$i$i = $29;
   }
   $30 = ($$0$i$i2$i$i|0)==(-1);
   if ($30) {
    HEAP32[$1>>2] = 0;
    label = 14;
    break;
   } else {
    if ($153) {
     $154 = $18;
     label = 17;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($153) {
   label = 16;
  } else {
   $154 = 0;
   label = 17;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $31 = HEAP32[$2>>2]|0;
   $32 = $31 | 6;
   HEAP32[$2>>2] = $32;
   $$2 = 0;
  }
  else if ((label|0) == 17) {
   $33 = HEAP32[$0>>2]|0;
   $34 = ((($33)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ((($33)) + 16|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($35|0)==($37|0);
   if ($38) {
    $39 = HEAP32[$33>>2]|0;
    $40 = ((($39)) + 36|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (FUNCTION_TABLE_ii[$41 & 1023]($33)|0);
    $$0$i$i = $42;
   } else {
    $43 = HEAP32[$35>>2]|0;
    $$0$i$i = $43;
   }
   $44 = HEAP32[$3>>2]|0;
   $45 = ((($44)) + 12|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (FUNCTION_TABLE_iiii[$46 & 1023]($3,2048,$$0$i$i)|0);
   if (!($47)) {
    $48 = HEAP32[$2>>2]|0;
    $49 = $48 | 4;
    HEAP32[$2>>2] = $49;
    $$2 = 0;
    break;
   }
   $50 = HEAP32[$3>>2]|0;
   $51 = ((($50)) + 52|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (FUNCTION_TABLE_iiii[$52 & 1023]($3,$$0$i$i,0)|0);
   $54 = $53 << 24 >> 24;
   $55 = HEAP32[$0>>2]|0;
   $56 = ((($55)) + 12|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ((($55)) + 16|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ($57|0)==($59|0);
   if ($60) {
    $61 = HEAP32[$55>>2]|0;
    $62 = ((($61)) + 40|0);
    $63 = HEAP32[$62>>2]|0;
    (FUNCTION_TABLE_ii[$63 & 1023]($55)|0);
    $$0$in = $54;$$025$in = $4;$$pre$i4$i$i35 = $154;$78 = $154;
   } else {
    $64 = ((($57)) + 4|0);
    HEAP32[$56>>2] = $64;
    $$0$in = $54;$$025$in = $4;$$pre$i4$i$i35 = $154;$78 = $154;
   }
   while(1) {
    $$0 = (($$0$in) + -48)|0;
    $$025 = (($$025$in) + -1)|0;
    $65 = HEAP32[$0>>2]|0;
    $66 = ($65|0)==(0|0);
    do {
     if ($66) {
      $92 = 1;
     } else {
      $67 = ((($65)) + 12|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = ((($65)) + 16|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = ($68|0)==($70|0);
      if ($71) {
       $72 = HEAP32[$65>>2]|0;
       $73 = ((($72)) + 36|0);
       $74 = HEAP32[$73>>2]|0;
       $75 = (FUNCTION_TABLE_ii[$74 & 1023]($65)|0);
       $$0$i$i$i$i27 = $75;
      } else {
       $76 = HEAP32[$68>>2]|0;
       $$0$i$i$i$i27 = $76;
      }
      $77 = ($$0$i$i$i$i27|0)==(-1);
      if ($77) {
       HEAP32[$0>>2] = 0;
       $92 = 1;
       break;
      } else {
       $$pre$i$i$i29 = HEAP32[$0>>2]|0;
       $phitmp$i$i$i30 = ($$pre$i$i$i29|0)==(0|0);
       $92 = $phitmp$i$i$i30;
       break;
      }
     }
    } while(0);
    $79 = ($78|0)==(0|0);
    do {
     if ($79) {
      $$pre$i4$i$i50 = $$pre$i4$i$i35;$155 = 0;$91 = 1;
     } else {
      $80 = ((($78)) + 12|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = ((($78)) + 16|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = ($81|0)==($83|0);
      if ($84) {
       $85 = HEAP32[$78>>2]|0;
       $86 = ((($85)) + 36|0);
       $87 = HEAP32[$86>>2]|0;
       $88 = (FUNCTION_TABLE_ii[$87 & 1023]($78)|0);
       $$0$i$i2$i$i33 = $88;
      } else {
       $89 = HEAP32[$81>>2]|0;
       $$0$i$i2$i$i33 = $89;
      }
      $90 = ($$0$i$i2$i$i33|0)==(-1);
      if ($90) {
       HEAP32[$1>>2] = 0;
       $$pre$i4$i$i50 = 0;$155 = 0;$91 = 1;
       break;
      } else {
       $phitmp$i5$i$i36 = ($$pre$i4$i$i35|0)==(0|0);
       $$pre$i4$i$i50 = $$pre$i4$i$i35;$155 = $$pre$i4$i$i35;$91 = $phitmp$i5$i$i36;
       break;
      }
     }
    } while(0);
    $tmp$i$i38 = $92 ^ $91;
    $93 = ($$025$in|0)>(1);
    $94 = $93 & $tmp$i$i38;
    $95 = HEAP32[$0>>2]|0;
    if (!($94)) {
     break;
    }
    $96 = ((($95)) + 12|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ((($95)) + 16|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ($97|0)==($99|0);
    if ($100) {
     $101 = HEAP32[$95>>2]|0;
     $102 = ((($101)) + 36|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = (FUNCTION_TABLE_ii[$103 & 1023]($95)|0);
     $$0$i$i39 = $104;
    } else {
     $105 = HEAP32[$97>>2]|0;
     $$0$i$i39 = $105;
    }
    $106 = HEAP32[$3>>2]|0;
    $107 = ((($106)) + 12|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = (FUNCTION_TABLE_iiii[$108 & 1023]($3,2048,$$0$i$i39)|0);
    if (!($109)) {
     $$2 = $$0;
     break L22;
    }
    $110 = ($$0*10)|0;
    $111 = HEAP32[$3>>2]|0;
    $112 = ((($111)) + 52|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = (FUNCTION_TABLE_iiii[$113 & 1023]($3,$$0$i$i39,0)|0);
    $115 = $114 << 24 >> 24;
    $116 = (($115) + ($110))|0;
    $117 = HEAP32[$0>>2]|0;
    $118 = ((($117)) + 12|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = ((($117)) + 16|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = ($119|0)==($121|0);
    if ($122) {
     $123 = HEAP32[$117>>2]|0;
     $124 = ((($123)) + 40|0);
     $125 = HEAP32[$124>>2]|0;
     (FUNCTION_TABLE_ii[$125 & 1023]($117)|0);
     $$0$in = $116;$$025$in = $$025;$$pre$i4$i$i35 = $$pre$i4$i$i50;$78 = $155;
     continue;
    } else {
     $126 = ((($119)) + 4|0);
     HEAP32[$118>>2] = $126;
     $$0$in = $116;$$025$in = $$025;$$pre$i4$i$i35 = $$pre$i4$i$i50;$78 = $155;
     continue;
    }
   }
   $127 = ($95|0)==(0|0);
   do {
    if ($127) {
     $156 = 1;
    } else {
     $128 = ((($95)) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ((($95)) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$95>>2]|0;
      $134 = ((($133)) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      $136 = (FUNCTION_TABLE_ii[$135 & 1023]($95)|0);
      $$0$i$i$i$i42 = $136;
     } else {
      $137 = HEAP32[$129>>2]|0;
      $$0$i$i$i$i42 = $137;
     }
     $138 = ($$0$i$i$i$i42|0)==(-1);
     if ($138) {
      HEAP32[$0>>2] = 0;
      $156 = 1;
      break;
     } else {
      $$pre$i$i$i44 = HEAP32[$0>>2]|0;
      $phitmp$i$i$i45 = ($$pre$i$i$i44|0)==(0|0);
      $156 = $phitmp$i$i$i45;
      break;
     }
    }
   } while(0);
   $139 = ($$pre$i4$i$i50|0)==(0|0);
   do {
    if ($139) {
     label = 60;
    } else {
     $140 = ((($$pre$i4$i$i50)) + 12|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ((($$pre$i4$i$i50)) + 16|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = ($141|0)==($143|0);
     if ($144) {
      $145 = HEAP32[$$pre$i4$i$i50>>2]|0;
      $146 = ((($145)) + 36|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = (FUNCTION_TABLE_ii[$147 & 1023]($$pre$i4$i$i50)|0);
      $$0$i$i2$i$i48 = $148;
     } else {
      $149 = HEAP32[$141>>2]|0;
      $$0$i$i2$i$i48 = $149;
     }
     $150 = ($$0$i$i2$i$i48|0)==(-1);
     if ($150) {
      HEAP32[$1>>2] = 0;
      label = 60;
      break;
     } else {
      if ($156) {
       $$2 = $$0;
       break L22;
      } else {
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 60) {
    if (!($156)) {
     $$2 = $$0;
     break;
    }
   }
   $151 = HEAP32[$2>>2]|0;
   $152 = $151 | 2;
   HEAP32[$2>>2] = $152;
   $$2 = $$0;
  }
 } while(0);
 return ($$2|0);
}
function __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 __ZNSt3__210__time_putD2Ev($1);
 return;
}
function __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 __ZNSt3__210__time_putD2Ev($1);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$$sroa$04$0$i = 0, $$0$i$i = 0, $$sroa$04$0$i = 0, $$sroa$04$1$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $7 = sp + 4|0;
 $8 = sp;
 $9 = ((($7)) + 100|0);
 HEAP32[$8>>2] = $9;
 $10 = ((($0)) + 8|0);
 __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc($10,$7,$8,$4,$5,$6);
 $11 = HEAP32[$8>>2]|0;
 $12 = HEAP32[$1>>2]|0;
 $$0$i$i = $7;$$sroa$04$0$i = $12;
 while(1) {
  $13 = ($$0$i$i|0)==($11|0);
  if ($13) {
   break;
  }
  $14 = HEAP8[$$0$i$i>>0]|0;
  $15 = ($$sroa$04$0$i|0)==(0|0);
  do {
   if ($15) {
    $$sroa$04$1$i = 0;
   } else {
    $16 = ((($$sroa$04$0$i)) + 24|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ((($$sroa$04$0$i)) + 28|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($17|0)==($19|0);
    if ($20) {
     $22 = HEAP32[$$sroa$04$0$i>>2]|0;
     $23 = ((($22)) + 52|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = $14&255;
     $26 = (FUNCTION_TABLE_iii[$24 & 1023]($$sroa$04$0$i,$25)|0);
     $27 = ($26|0)==(-1);
     $$$sroa$04$0$i = $27 ? 0 : $$sroa$04$0$i;
     $$sroa$04$1$i = $$$sroa$04$0$i;
     break;
    } else {
     $21 = ((($17)) + 1|0);
     HEAP32[$16>>2] = $21;
     HEAP8[$17>>0] = $14;
     $$sroa$04$1$i = $$sroa$04$0$i;
     break;
    }
   }
  } while(0);
  $28 = ((($$0$i$i)) + 1|0);
  $$0$i$i = $28;$$sroa$04$0$i = $$sroa$04$1$i;
 }
 STACKTOP = sp;return ($$sroa$04$0$i|0);
}
function __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp;
 HEAP8[$6>>0] = 37;
 $7 = ((($6)) + 1|0);
 HEAP8[$7>>0] = $4;
 $8 = ((($6)) + 2|0);
 HEAP8[$8>>0] = $5;
 $9 = ((($6)) + 3|0);
 HEAP8[$9>>0] = 0;
 $10 = ($5<<24>>24)==(0);
 if (!($10)) {
  HEAP8[$7>>0] = $5;
  HEAP8[$8>>0] = $4;
 }
 $11 = HEAP32[$2>>2]|0;
 $12 = $1;
 $13 = (($11) - ($12))|0;
 $14 = HEAP32[$0>>2]|0;
 $15 = (_strftime_l(($1|0),($13|0),($6|0),($3|0),($14|0))|0);
 $16 = (($1) + ($15)|0);
 HEAP32[$2>>2] = $16;
 STACKTOP = sp;return;
}
function __ZNSt3__210__time_putD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 $2 = (invoke_i(762)|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if (!($4)) {
   $5 = ($1|0)==($2|0);
   if (!($5)) {
    $6 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi(798,($6|0));
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     break;
    }
   }
   return;
  }
 } while(0);
 $9 = ___cxa_find_matching_catch_3(0|0)|0;
 $10 = tempRet0;
 ___clang_call_terminate($9);
 // unreachable;
}
function __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 __ZNSt3__210__time_putD2Ev($1);
 return;
}
function __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 __ZNSt3__210__time_putD2Ev($1);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$$sroa$04$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$sroa$04$0$i = 0, $$sroa$04$1$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(416|0);
 $7 = sp + 8|0;
 $8 = sp;
 $9 = ((($7)) + 400|0);
 HEAP32[$8>>2] = $9;
 $10 = ((($0)) + 8|0);
 __ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc($10,$7,$8,$4,$5,$6);
 $11 = HEAP32[$8>>2]|0;
 $12 = HEAP32[$1>>2]|0;
 $$0$i$i = $7;$$sroa$04$0$i = $12;
 while(1) {
  $13 = ($$0$i$i|0)==($11|0);
  if ($13) {
   break;
  }
  $14 = HEAP32[$$0$i$i>>2]|0;
  $15 = ($$sroa$04$0$i|0)==(0|0);
  if ($15) {
   $$sroa$04$1$i = 0;
  } else {
   $16 = ((($$sroa$04$0$i)) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($$sroa$04$0$i)) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$$sroa$04$0$i>>2]|0;
    $22 = ((($21)) + 52|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_iii[$23 & 1023]($$sroa$04$0$i,$14)|0);
    $$0$i$i$i$i = $24;
   } else {
    $25 = ((($17)) + 4|0);
    HEAP32[$16>>2] = $25;
    HEAP32[$17>>2] = $14;
    $$0$i$i$i$i = $14;
   }
   $26 = ($$0$i$i$i$i|0)==(-1);
   $$$sroa$04$0$i = $26 ? 0 : $$sroa$04$0$i;
   $$sroa$04$1$i = $$$sroa$04$0$i;
  }
  $27 = ((($$0$i$i)) + 4|0);
  $$0$i$i = $27;$$sroa$04$0$i = $$sroa$04$1$i;
 }
 STACKTOP = sp;return ($$sroa$04$0$i|0);
}
function __ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $6 = sp + 16|0;
 $7 = sp + 12|0;
 $8 = sp;
 $9 = sp + 8|0;
 $10 = ((($6)) + 100|0);
 HEAP32[$7>>2] = $10;
 __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc($0,$6,$7,$3,$4,$5);
 $11 = $8;
 $12 = $11;
 HEAP32[$12>>2] = 0;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = 0;
 HEAP32[$9>>2] = $6;
 $15 = HEAP32[$2>>2]|0;
 $16 = $1;
 $17 = (($15) - ($16))|0;
 $18 = $17 >> 2;
 $19 = HEAP32[$0>>2]|0;
 $20 = (_uselocale($19)|0);
 __THREW__ = 0;
 $21 = (invoke_iiiii(799,($1|0),($9|0),($18|0),($8|0))|0);
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if ($23) {
  $29 = ___cxa_find_matching_catch_2()|0;
  $30 = tempRet0;
  $31 = ($20|0)==(0|0);
  if (!($31)) {
   __THREW__ = 0;
   (invoke_ii(765,($20|0))|0);
   $32 = __THREW__; __THREW__ = 0;
   $33 = $32&1;
   if ($33) {
    $34 = ___cxa_find_matching_catch_3(0|0)|0;
    $35 = tempRet0;
    ___clang_call_terminate($34);
    // unreachable;
   }
  }
  ___resumeException($29|0);
  // unreachable;
 }
 $24 = ($20|0)==(0|0);
 if (!($24)) {
  __THREW__ = 0;
  (invoke_ii(765,($20|0))|0);
  $25 = __THREW__; __THREW__ = 0;
  $26 = $25&1;
  if ($26) {
   $27 = ___cxa_find_matching_catch_3(0|0)|0;
   $28 = tempRet0;
   ___clang_call_terminate($27);
   // unreachable;
  }
 }
 $36 = ($21|0)==(-1);
 if ($36) {
  __ZNSt3__221__throw_runtime_errorEPKc(33728);
  // unreachable;
 } else {
  $37 = (($1) + ($21<<2)|0);
  HEAP32[$2>>2] = $37;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__221__throw_runtime_errorEPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(800,($1|0),($0|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  ___cxa_free_exception(($1|0));
  ___resumeException($4|0);
  // unreachable;
 } else {
  ___cxa_throw(($1|0),(2880|0),(623|0));
  // unreachable;
 }
}
function __ZNSt3__210moneypunctIcLb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__210moneypunctIcLb0EED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__210moneypunctIcLb0EE11do_groupingEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($0,1,45);
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__210moneypunctIcLb1EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__210moneypunctIcLb1EED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__210moneypunctIcLb1EE11do_groupingEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($0,1,45);
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__210moneypunctIwLb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__210moneypunctIwLb0EED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__210moneypunctIwLb0EE11do_groupingEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($0,1,45);
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__210moneypunctIwLb1EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__210moneypunctIwLb1EED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__210moneypunctIwLb1EE11do_groupingEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($0,1,45);
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$031 = 0, $$032 = 0, $$035 = 0, $$1 = 0, $$133 = 0, $$136 = 0, $$2 = 0, $$234 = 0, $$237 = 0, $$33859 = 0, $$33860 = 0, $$361 = 0, $$362 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre63 = 0;
 var $$sroa$0$0$copyload = 0, $$sroa$044$0 = 0, $$sroa$044$1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $7 = sp + 140|0;
 $8 = sp + 16|0;
 $9 = sp + 12|0;
 $10 = sp + 8|0;
 $11 = sp + 138|0;
 $12 = sp + 4|0;
 $13 = sp + 128|0;
 $14 = sp + 28|0;
 $15 = $7;
 HEAP32[$8>>2] = $15;
 $16 = ((($8)) + 4|0);
 HEAP32[$16>>2] = (801);
 $17 = ((($7)) + 100|0);
 __THREW__ = 0;
 $18 = (invoke_ii(658,($4|0))|0);
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $45 = ___cxa_find_matching_catch_2()|0;
  $46 = tempRet0;
  HEAP32[$8>>2] = 0;
  $$33859 = $46;$$361 = $45;$124 = 801;$125 = $7;
  label = 52;
 } else {
  HEAP32[$10>>2] = $18;
  __THREW__ = 0;
  $21 = (invoke_iii(659,($10|0),(40712|0))|0);
  $22 = __THREW__; __THREW__ = 0;
  $23 = $22&1;
  if ($23) {
   $47 = ___cxa_find_matching_catch_2()|0;
   $48 = tempRet0;
   $$234 = $47;$$237 = $48;
  } else {
   HEAP8[$11>>0] = 0;
   $24 = HEAP32[$2>>2]|0;
   HEAP32[$12>>2] = $24;
   $25 = ((($4)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
   $27 = (invoke_iiiiiiiiiiii(802,($1|0),($$byval_copy|0),($3|0),($10|0),($26|0),($5|0),($11|0),($21|0),($8|0),($9|0),($17|0))|0);
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   L7: do {
    if ($29) {
     label = 11;
    } else {
     L9: do {
      if ($27) {
       $30 = HEAP32[$21>>2]|0;
       $31 = ((($30)) + 32|0);
       $32 = HEAP32[$31>>2]|0;
       __THREW__ = 0;
       (invoke_iiiii($32|0,($21|0),(33951|0),((33961)|0),($13|0))|0);
       $33 = __THREW__; __THREW__ = 0;
       $34 = $33&1;
       if ($34) {
        $51 = ___cxa_find_matching_catch_2()|0;
        $52 = tempRet0;
        $$032 = $51;$$035 = $52;
       } else {
        $35 = HEAP32[$9>>2]|0;
        $36 = HEAP32[$8>>2]|0;
        $37 = (($35) - ($36))|0;
        $38 = ($37|0)>(98);
        if ($38) {
         $39 = (($37) + 2)|0;
         $40 = (_malloc($39)|0);
         $41 = $40;
         $42 = ($40|0)==(0|0);
         if ($42) {
          __THREW__ = 0;
          invoke_v(777);
          $43 = __THREW__; __THREW__ = 0;
          $44 = $43&1;
          if ($44) {
           $$sroa$044$0 = $41;
          } else {
           $$031 = 0;$$sroa$044$1 = $41;
           label = 16;
          }
         } else {
          $$031 = $40;$$sroa$044$1 = $41;
          label = 16;
         }
        } else {
         $$031 = $14;$$sroa$044$1 = 0;
         label = 16;
        }
        do {
         if ((label|0) == 16) {
          $57 = HEAP8[$11>>0]|0;
          $58 = ($57<<24>>24)==(0);
          if ($58) {
           $$1 = $$031;
          } else {
           $59 = ((($$031)) + 1|0);
           HEAP8[$$031>>0] = 45;
           $$1 = $59;
          }
          $60 = HEAP32[$8>>2]|0;
          $61 = ((($13)) + 10|0);
          $62 = $13;
          $$0 = $60;$$2 = $$1;
          while(1) {
           $63 = HEAP32[$9>>2]|0;
           $64 = ($$0>>>0)<($63>>>0);
           if (!($64)) {
            break;
           }
           $67 = HEAP8[$$0>>0]|0;
           $$0$i = $13;
           while(1) {
            $68 = ($$0$i|0)==($61|0);
            if ($68) {
             $$0$lcssa$i = $61;
             break;
            }
            $69 = HEAP8[$$0$i>>0]|0;
            $70 = ($69<<24>>24)==($67<<24>>24);
            if ($70) {
             $$0$lcssa$i = $$0$i;
             break;
            }
            $71 = ((($$0$i)) + 1|0);
            $$0$i = $71;
           }
           $72 = $$0$lcssa$i;
           $73 = (($72) - ($62))|0;
           $74 = (33951 + ($73)|0);
           $75 = HEAP8[$74>>0]|0;
           HEAP8[$$2>>0] = $75;
           $76 = ((($$0)) + 1|0);
           $77 = ((($$2)) + 1|0);
           $$0 = $76;$$2 = $77;
          }
          HEAP8[$$2>>0] = 0;
          HEAP32[$vararg_buffer>>2] = $6;
          $65 = (_sscanf($14,33962,$vararg_buffer)|0);
          $66 = ($65|0)==(1);
          if (!($66)) {
           __THREW__ = 0;
           invoke_vi(803,(33966|0));
           $78 = __THREW__; __THREW__ = 0;
           $79 = $78&1;
           if ($79) {
            $$sroa$044$0 = $$sroa$044$1;
            break;
           }
          }
          $80 = ($$sroa$044$1|0)==(0);
          if (!($80)) {
           $81 = $$sroa$044$1;
           _free($81);
          }
          break L9;
         }
        } while(0);
        $53 = ___cxa_find_matching_catch_2()|0;
        $54 = tempRet0;
        $55 = ($$sroa$044$0|0)==(0);
        if (!($55)) {
         $56 = $$sroa$044$0;
         _free($56);
        }
        $$032 = $53;$$035 = $54;
       }
       $$133 = $$032;$$136 = $$035;
       break L7;
      }
     } while(0);
     $82 = HEAP32[$1>>2]|0;
     $83 = ($82|0)==(0|0);
     do {
      if ($83) {
       $96 = 0;
      } else {
       $84 = ((($82)) + 12|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = ((($82)) + 16|0);
       $87 = HEAP32[$86>>2]|0;
       $88 = ($85|0)==($87|0);
       if ($88) {
        $89 = HEAP32[$82>>2]|0;
        $90 = ((($89)) + 36|0);
        $91 = HEAP32[$90>>2]|0;
        __THREW__ = 0;
        $92 = (invoke_ii($91|0,($82|0))|0);
        $93 = __THREW__; __THREW__ = 0;
        $94 = $93&1;
        if ($94) {
         label = 11;
         break L7;
        }
        $95 = ($92|0)==(-1);
        if ($95) {
         HEAP32[$1>>2] = 0;
         $96 = 0;
         break;
        } else {
         $$pre$i$i$i = HEAP32[$1>>2]|0;
         $96 = $$pre$i$i$i;
         break;
        }
       } else {
        $96 = $82;
       }
      }
     } while(0);
     $97 = ($96|0)==(0|0);
     $98 = HEAP32[$2>>2]|0;
     $99 = ($98|0)==(0|0);
     do {
      if ($99) {
       label = 43;
      } else {
       $100 = ((($98)) + 12|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = ((($98)) + 16|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = ($101|0)==($103|0);
       if ($104) {
        $105 = HEAP32[$98>>2]|0;
        $106 = ((($105)) + 36|0);
        $107 = HEAP32[$106>>2]|0;
        __THREW__ = 0;
        $108 = (invoke_ii($107|0,($98|0))|0);
        $109 = __THREW__; __THREW__ = 0;
        $110 = $109&1;
        if ($110) {
         label = 11;
         break L7;
        }
        $111 = ($108|0)==(-1);
        if ($111) {
         HEAP32[$2>>2] = 0;
         label = 43;
         break;
        }
       }
       if (!($97)) {
        label = 44;
       }
      }
     } while(0);
     if ((label|0) == 43) {
      if ($97) {
       label = 44;
      }
     }
     if ((label|0) == 44) {
      $112 = HEAP32[$5>>2]|0;
      $113 = $112 | 2;
      HEAP32[$5>>2] = $113;
     }
     $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
     $114 = HEAP32[$10>>2]|0;
     (__ZNSt3__214__shared_count16__release_sharedEv($114)|0);
     $115 = HEAP32[$8>>2]|0;
     HEAP32[$8>>2] = 0;
     $116 = ($115|0)==(0|0);
     if (!($116)) {
      $117 = HEAP32[$16>>2]|0;
      __THREW__ = 0;
      invoke_vi($117|0,($115|0));
      $118 = __THREW__; __THREW__ = 0;
      $119 = $118&1;
      if ($119) {
       $120 = ___cxa_find_matching_catch_3(0|0)|0;
       $121 = tempRet0;
       ___clang_call_terminate($120);
       // unreachable;
      }
     }
     STACKTOP = sp;return ($$sroa$0$0$copyload|0);
    }
   } while(0);
   if ((label|0) == 11) {
    $49 = ___cxa_find_matching_catch_2()|0;
    $50 = tempRet0;
    $$133 = $49;$$136 = $50;
   }
   $$234 = $$133;$$237 = $$136;
  }
  $122 = HEAP32[$10>>2]|0;
  (__ZNSt3__214__shared_count16__release_sharedEv($122)|0);
  $$pre = HEAP32[$8>>2]|0;
  HEAP32[$8>>2] = 0;
  $123 = ($$pre|0)==(0|0);
  if ($123) {
   $$33860 = $$237;$$362 = $$234;
  } else {
   $$pre63 = HEAP32[$16>>2]|0;
   $$33859 = $$237;$$361 = $$234;$124 = $$pre63;$125 = $$pre;
   label = 52;
  }
 }
 if ((label|0) == 52) {
  __THREW__ = 0;
  invoke_vi($124|0,($125|0));
  $126 = __THREW__; __THREW__ = 0;
  $127 = $126&1;
  if ($127) {
   $128 = ___cxa_find_matching_catch_3(0|0)|0;
   $129 = tempRet0;
   ___clang_call_terminate($128);
   // unreachable;
  } else {
   $$33860 = $$33859;$$362 = $$361;
  }
 }
 ___resumeException($$362|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$1 = 0, $$132 = 0, $$23342 = 0, $$23343 = 0, $$244 = 0, $$245 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $$sink$index = 0, $$sink$index2 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $$byval_copy = sp + 24|0;
 $7 = sp + 32|0;
 $8 = sp + 16|0;
 $9 = sp + 8|0;
 $10 = sp + 4|0;
 $11 = sp + 28|0;
 $12 = sp;
 $13 = $7;
 HEAP32[$8>>2] = $13;
 $14 = ((($8)) + 4|0);
 HEAP32[$14>>2] = (801);
 $15 = ((($7)) + 100|0);
 __THREW__ = 0;
 $16 = (invoke_ii(658,($4|0))|0);
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if ($18) {
  $44 = ___cxa_find_matching_catch_2()|0;
  $45 = tempRet0;
  HEAP32[$8>>2] = 0;
  $$23342 = $45;$$244 = $44;$110 = $7;
  label = 41;
 } else {
  HEAP32[$10>>2] = $16;
  __THREW__ = 0;
  $19 = (invoke_iii(659,($10|0),(40712|0))|0);
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if ($21) {
   $46 = ___cxa_find_matching_catch_2()|0;
   $47 = tempRet0;
   $$1 = $46;$$132 = $47;
  } else {
   HEAP8[$11>>0] = 0;
   $22 = HEAP32[$2>>2]|0;
   HEAP32[$12>>2] = $22;
   $23 = ((($4)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $22;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
   $26 = (invoke_iiiiiiiiiiii(802,($1|0),($$byval_copy|0),($3|0),($10|0),($24|0),($5|0),($11|0),($19|0),($8|0),($9|0),($15|0))|0);
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   L7: do {
    if ($28) {
     label = 13;
    } else {
     if ($26) {
      $29 = ((($6)) + 11|0);
      $30 = HEAP8[$29>>0]|0;
      $31 = ($30<<24>>24)<(0);
      if ($31) {
       $32 = HEAP32[$6>>2]|0;
       HEAP8[$32>>0] = 0;
       $33 = ((($6)) + 4|0);
       HEAP32[$33>>2] = 0;
      } else {
       HEAP8[$6>>0] = 0;
       HEAP8[$29>>0] = 0;
      }
      $34 = HEAP8[$11>>0]|0;
      $35 = ($34<<24>>24)==(0);
      if (!($35)) {
       $36 = HEAP32[$19>>2]|0;
       $37 = ((($36)) + 28|0);
       $38 = HEAP32[$37>>2]|0;
       __THREW__ = 0;
       $39 = (invoke_iii($38|0,($19|0),45)|0);
       $40 = __THREW__; __THREW__ = 0;
       $41 = $40&1;
       if ($41) {
        label = 13;
        break;
       }
       __THREW__ = 0;
       invoke_vii(665,($6|0),($39|0));
       $42 = __THREW__; __THREW__ = 0;
       $43 = $42&1;
       if ($43) {
        label = 13;
        break;
       }
      }
      $50 = HEAP32[$19>>2]|0;
      $51 = ((($50)) + 28|0);
      $52 = HEAP32[$51>>2]|0;
      __THREW__ = 0;
      $53 = (invoke_iii($52|0,($19|0),48)|0);
      $54 = __THREW__; __THREW__ = 0;
      $55 = $54&1;
      if ($55) {
       label = 13;
       break;
      }
      $56 = HEAP32[$8>>2]|0;
      $57 = HEAP32[$9>>2]|0;
      $58 = ((($57)) + -1|0);
      $$0 = $56;
      while(1) {
       $59 = ($$0>>>0)<($58>>>0);
       if (!($59)) {
        break;
       }
       $60 = HEAP8[$$0>>0]|0;
       $61 = ($60<<24>>24)==($53<<24>>24);
       if (!($61)) {
        break;
       }
       $62 = ((($$0)) + 1|0);
       $$0 = $62;
      }
      __THREW__ = 0;
      (invoke_iiii(804,($6|0),($$0|0),($57|0))|0);
      $63 = __THREW__; __THREW__ = 0;
      $64 = $63&1;
      if ($64) {
       $65 = ___cxa_find_matching_catch_2()|0;
       $66 = tempRet0;
       $$sink$index = $65;$$sink$index2 = $66;
       break;
      }
     }
     $67 = HEAP32[$1>>2]|0;
     $68 = ($67|0)==(0|0);
     do {
      if ($68) {
       $81 = 0;
      } else {
       $69 = ((($67)) + 12|0);
       $70 = HEAP32[$69>>2]|0;
       $71 = ((($67)) + 16|0);
       $72 = HEAP32[$71>>2]|0;
       $73 = ($70|0)==($72|0);
       if ($73) {
        $74 = HEAP32[$67>>2]|0;
        $75 = ((($74)) + 36|0);
        $76 = HEAP32[$75>>2]|0;
        __THREW__ = 0;
        $77 = (invoke_ii($76|0,($67|0))|0);
        $78 = __THREW__; __THREW__ = 0;
        $79 = $78&1;
        if ($79) {
         label = 13;
         break L7;
        }
        $80 = ($77|0)==(-1);
        if ($80) {
         HEAP32[$1>>2] = 0;
         $81 = 0;
         break;
        } else {
         $$pre$i$i$i = HEAP32[$1>>2]|0;
         $81 = $$pre$i$i$i;
         break;
        }
       } else {
        $81 = $67;
       }
      }
     } while(0);
     $82 = ($81|0)==(0|0);
     $83 = ($22|0)==(0);
     do {
      if ($83) {
       label = 33;
      } else {
       $84 = ((($25)) + 12|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = ((($25)) + 16|0);
       $87 = HEAP32[$86>>2]|0;
       $88 = ($85|0)==($87|0);
       if ($88) {
        $89 = $22;
        $90 = HEAP32[$89>>2]|0;
        $91 = ((($90)) + 36|0);
        $92 = HEAP32[$91>>2]|0;
        __THREW__ = 0;
        $93 = (invoke_ii($92|0,($25|0))|0);
        $94 = __THREW__; __THREW__ = 0;
        $95 = $94&1;
        if ($95) {
         label = 13;
         break L7;
        }
        $96 = ($93|0)==(-1);
        if ($96) {
         HEAP32[$2>>2] = 0;
         label = 33;
         break;
        }
       }
       if (!($82)) {
        label = 34;
       }
      }
     } while(0);
     if ((label|0) == 33) {
      if ($82) {
       label = 34;
      }
     }
     if ((label|0) == 34) {
      $97 = HEAP32[$5>>2]|0;
      $98 = $97 | 2;
      HEAP32[$5>>2] = $98;
     }
     $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
     $99 = HEAP32[$10>>2]|0;
     (__ZNSt3__214__shared_count16__release_sharedEv($99)|0);
     $100 = HEAP32[$8>>2]|0;
     HEAP32[$8>>2] = 0;
     $101 = ($100|0)==(0|0);
     if (!($101)) {
      $102 = HEAP32[$14>>2]|0;
      __THREW__ = 0;
      invoke_vi($102|0,($100|0));
      $103 = __THREW__; __THREW__ = 0;
      $104 = $103&1;
      if ($104) {
       $105 = ___cxa_find_matching_catch_3(0|0)|0;
       $106 = tempRet0;
       ___clang_call_terminate($105);
       // unreachable;
      }
     }
     STACKTOP = sp;return ($$sroa$0$0$copyload|0);
    }
   } while(0);
   if ((label|0) == 13) {
    $48 = ___cxa_find_matching_catch_2()|0;
    $49 = tempRet0;
    $$sink$index = $48;$$sink$index2 = $49;
   }
   $$1 = $$sink$index;$$132 = $$sink$index2;
  }
  $107 = HEAP32[$10>>2]|0;
  (__ZNSt3__214__shared_count16__release_sharedEv($107)|0);
  $$pre = HEAP32[$8>>2]|0;
  HEAP32[$8>>2] = 0;
  $108 = ($$pre|0)==(0|0);
  if ($108) {
   $$23343 = $$132;$$245 = $$1;
  } else {
   $$23342 = $$132;$$244 = $$1;$110 = $$pre;
   label = 41;
  }
 }
 if ((label|0) == 41) {
  $109 = HEAP32[$14>>2]|0;
  __THREW__ = 0;
  invoke_vi($109|0,($110|0));
  $111 = __THREW__; __THREW__ = 0;
  $112 = $111&1;
  if ($112) {
   $113 = ___cxa_find_matching_catch_3(0|0)|0;
   $114 = tempRet0;
   ___clang_call_terminate($113);
   // unreachable;
  } else {
   $$23343 = $$23342;$$245 = $$244;
  }
 }
 ___resumeException($$245|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__212__do_nothingEPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$$0149 = 0, $$$0149159 = 0, $$$0149160 = 0, $$$0149161 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i168 = 0, $$0$i$i171 = 0, $$0$i$i174 = 0, $$0$i$i177 = 0, $$0$i$i180 = 0, $$0$i$i194 = 0, $$0$i$i197 = 0, $$0$i$i210 = 0, $$0$i$i217 = 0, $$0$i$i223 = 0, $$0$i$i230 = 0, $$0$i$i246 = 0, $$0$i$i254 = 0, $$0$i$i257 = 0;
 var $$0$i$i275 = 0, $$0$i$i284 = 0, $$0$i$i294 = 0, $$0$i$i311 = 0, $$0132 = 0, $$0149 = 0, $$0158 = 0, $$10 = 0, $$1150 = 0, $$2134$ph = 0, $$5142 = 0, $$5148 = 0, $$lcssa = 0, $$phi$trans$insert = 0, $$phi$trans$insert478 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i185 = 0, $$pre$i$i$i200 = 0, $$pre$i$i$i235 = 0;
 var $$pre$i$i$i262 = 0, $$pre$i$i$i298 = 0, $$pre$i$i$i317 = 0, $$pre$i3$i$i204 = 0, $$pre$i3$i$i204486 = 0, $$pre$i3$i$i204488 = 0, $$pre$i3$i$i239 = 0, $$pre$i3$i$i239468$ph = 0, $$pre$i3$i$i239468491 = 0, $$pre$i3$i$i266 = 0, $$pre$i3$i$i302 = 0, $$pre$i3$i$i302460 = 0, $$pre$i3$i$i302462 = 0, $$pre$i3$i$i321 = 0, $$pre$i3$i$i321472 = 0, $$pre$i3$i$i321473 = 0, $$pre465 = 0, $$pre467 = 0, $$pre470 = 0, $$pre471 = 0;
 var $$pre475 = 0, $$pre476 = 0, $$pre477 = 0, $$pre479 = 0, $$pre480 = 0, $$pre481 = 0, $$pre482 = 0, $$pre483 = 0, $$pre484 = 0, $$pre485 = 0, $$sink$index = 0, $$sink$index9 = 0, $$sink410 = 0, $$sroa$0341$0 = 0, $$sroa$0362$0 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
 var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
 var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
 var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0;
 var $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0;
 var $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0;
 var $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0;
 var $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0;
 var $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0;
 var $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0;
 var $796 = 0, $797 = 0, $798 = 0, $799 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0;
 var $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0;
 var $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0;
 var $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0;
 var $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $cond166 = 0;
 var $exitcond$i$i = 0, $exitcond$i$i169 = 0, $exitcond$i$i172 = 0, $exitcond$i$i175 = 0, $exitcond$i$i178 = 0, $isascii3$i = 0, $isascii3$i213 = 0, $isascii3$i228 = 0, $isascii3$i292 = 0, $isascii3$i314 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond163 = 0, $sext = 0, $sext411 = 0, $sext412 = 0, $sext413 = 0;
 var $switch = 0, $tmp$i$i206 = 0, $tmp$i$i241 = 0, $tmp$i$i304 = 0, $tmp$i$i323 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $11 = sp + 488|0;
 $12 = sp + 88|0;
 $13 = sp + 80|0;
 $14 = sp + 72|0;
 $15 = sp + 68|0;
 $16 = sp + 496|0;
 $17 = sp + 493|0;
 $18 = sp + 492|0;
 $19 = sp + 56|0;
 $20 = sp + 44|0;
 $21 = sp + 32|0;
 $22 = sp + 20|0;
 $23 = sp + 8|0;
 $24 = sp + 4|0;
 $25 = sp;
 HEAP32[$11>>2] = $10;
 $26 = $12;
 HEAP32[$13>>2] = $26;
 $27 = ((($13)) + 4|0);
 HEAP32[$27>>2] = (801);
 HEAP32[$14>>2] = $12;
 $28 = ((($12)) + 400|0);
 HEAP32[$15>>2] = $28;
 ;HEAP32[$19>>2]=0|0;HEAP32[$19+4>>2]=0|0;HEAP32[$19+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $29 = (($19) + ($$0$i$i<<2)|0);
  HEAP32[$29>>2] = 0;
  $30 = (($$0$i$i) + 1)|0;
  $$0$i$i = $30;
 }
 ;HEAP32[$20>>2]=0|0;HEAP32[$20+4>>2]=0|0;HEAP32[$20+8>>2]=0|0;
 $$0$i$i168 = 0;
 while(1) {
  $exitcond$i$i169 = ($$0$i$i168|0)==(3);
  if ($exitcond$i$i169) {
   break;
  }
  $31 = (($20) + ($$0$i$i168<<2)|0);
  HEAP32[$31>>2] = 0;
  $32 = (($$0$i$i168) + 1)|0;
  $$0$i$i168 = $32;
 }
 ;HEAP32[$21>>2]=0|0;HEAP32[$21+4>>2]=0|0;HEAP32[$21+8>>2]=0|0;
 $$0$i$i171 = 0;
 while(1) {
  $exitcond$i$i172 = ($$0$i$i171|0)==(3);
  if ($exitcond$i$i172) {
   break;
  }
  $33 = (($21) + ($$0$i$i171<<2)|0);
  HEAP32[$33>>2] = 0;
  $34 = (($$0$i$i171) + 1)|0;
  $$0$i$i171 = $34;
 }
 ;HEAP32[$22>>2]=0|0;HEAP32[$22+4>>2]=0|0;HEAP32[$22+8>>2]=0|0;
 $$0$i$i174 = 0;
 while(1) {
  $exitcond$i$i175 = ($$0$i$i174|0)==(3);
  if ($exitcond$i$i175) {
   break;
  }
  $35 = (($22) + ($$0$i$i174<<2)|0);
  HEAP32[$35>>2] = 0;
  $36 = (($$0$i$i174) + 1)|0;
  $$0$i$i174 = $36;
 }
 ;HEAP32[$23>>2]=0|0;HEAP32[$23+4>>2]=0|0;HEAP32[$23+8>>2]=0|0;
 $$0$i$i177 = 0;
 while(1) {
  $exitcond$i$i178 = ($$0$i$i177|0)==(3);
  if ($exitcond$i$i178) {
   break;
  }
  $37 = (($23) + ($$0$i$i177<<2)|0);
  HEAP32[$37>>2] = 0;
  $38 = (($$0$i$i177) + 1)|0;
  $$0$i$i177 = $38;
 }
 __THREW__ = 0;
 invoke_viiiiiiiiii(805,($2|0),($3|0),($16|0),($17|0),($18|0),($19|0),($20|0),($21|0),($22|0),($24|0));
 $39 = __THREW__; __THREW__ = 0;
 $40 = $39&1;
 L21: do {
  if ($40) {
   $87 = ___cxa_find_matching_catch_2()|0;
   $88 = tempRet0;
   $$5142 = $87;$$5148 = $88;
  } else {
   $41 = HEAP32[$8>>2]|0;
   HEAP32[$9>>2] = $41;
   $42 = ((($7)) + 8|0);
   $43 = ((($21)) + 11|0);
   $44 = ((($21)) + 4|0);
   $45 = ((($22)) + 11|0);
   $46 = ((($22)) + 4|0);
   $47 = $4 & 512;
   $48 = ($47|0)!=(0);
   $49 = ((($20)) + 11|0);
   $50 = ((($20)) + 4|0);
   $51 = ((($23)) + 11|0);
   $52 = ((($23)) + 4|0);
   $53 = ((($16)) + 3|0);
   $54 = ((($19)) + 11|0);
   $55 = ((($19)) + 4|0);
   $$0149 = 0;$$0158 = 0;
   L24: while(1) {
    $56 = ($$0158>>>0)<(4);
    if (!($56)) {
     label = 254;
     break;
    }
    $57 = HEAP32[$0>>2]|0;
    $58 = ($57|0)==(0|0);
    do {
     if ($58) {
      $71 = 0;
     } else {
      $59 = ((($57)) + 12|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ((($57)) + 16|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = ($60|0)==($62|0);
      if ($63) {
       $64 = HEAP32[$57>>2]|0;
       $65 = ((($64)) + 36|0);
       $66 = HEAP32[$65>>2]|0;
       __THREW__ = 0;
       $67 = (invoke_ii($66|0,($57|0))|0);
       $68 = __THREW__; __THREW__ = 0;
       $69 = $68&1;
       if ($69) {
        label = 35;
        break L24;
       }
       $70 = ($67|0)==(-1);
       if ($70) {
        HEAP32[$0>>2] = 0;
        $71 = 0;
        break;
       } else {
        $$pre$i$i$i185 = HEAP32[$0>>2]|0;
        $71 = $$pre$i$i$i185;
        break;
       }
      } else {
       $71 = $57;
      }
     }
    } while(0);
    $72 = ($71|0)==(0|0);
    $73 = HEAP32[$1>>2]|0;
    $74 = ($73|0)==(0|0);
    do {
     if ($74) {
      label = 31;
     } else {
      $75 = ((($73)) + 12|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = ((($73)) + 16|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = ($76|0)==($78|0);
      if (!($79)) {
       if ($72) {
        $868 = $73;
        break;
       } else {
        label = 254;
        break L24;
       }
      }
      $80 = HEAP32[$73>>2]|0;
      $81 = ((($80)) + 36|0);
      $82 = HEAP32[$81>>2]|0;
      __THREW__ = 0;
      $83 = (invoke_ii($82|0,($73|0))|0);
      $84 = __THREW__; __THREW__ = 0;
      $85 = $84&1;
      if ($85) {
       label = 35;
       break L24;
      }
      $86 = ($83|0)==(-1);
      if ($86) {
       HEAP32[$1>>2] = 0;
       label = 31;
       break;
      } else {
       if ($72) {
        $868 = $73;
        break;
       } else {
        label = 254;
        break L24;
       }
      }
     }
    } while(0);
    if ((label|0) == 31) {
     label = 0;
     if ($72) {
      label = 254;
      break;
     } else {
      $868 = 0;
     }
    }
    $93 = (($16) + ($$0158)|0);
    $94 = HEAP8[$93>>0]|0;
    $95 = $94 << 24 >> 24;
    L47: do {
     switch ($95|0) {
     case 1:  {
      $cond166 = ($$0158|0)==(3);
      if ($cond166) {
       $$1150 = $$0149;
      } else {
       $96 = HEAP32[$0>>2]|0;
       $97 = ((($96)) + 12|0);
       $98 = HEAP32[$97>>2]|0;
       $99 = ((($96)) + 16|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = ($98|0)==($100|0);
       if ($101) {
        $102 = HEAP32[$96>>2]|0;
        $103 = ((($102)) + 36|0);
        $104 = HEAP32[$103>>2]|0;
        __THREW__ = 0;
        $105 = (invoke_ii($104|0,($96|0))|0);
        $106 = __THREW__; __THREW__ = 0;
        $107 = $106&1;
        if ($107) {
         label = 35;
         break L24;
        } else {
         $$0$i$i194 = $105;
        }
       } else {
        $108 = HEAP8[$98>>0]|0;
        $109 = $108&255;
        $$0$i$i194 = $109;
       }
       $110 = $$0$i$i194&255;
       $isascii3$i = ($110<<24>>24)>(-1);
       if (!($isascii3$i)) {
        label = 48;
        break L24;
       }
       $sext413 = $$0$i$i194 << 24;
       $111 = $sext413 >> 24;
       $112 = HEAP32[$42>>2]|0;
       $113 = (($112) + ($111<<1)|0);
       $114 = HEAP16[$113>>1]|0;
       $115 = $114 & 8192;
       $116 = ($115<<16>>16)==(0);
       if ($116) {
        label = 48;
        break L24;
       }
       $117 = HEAP32[$0>>2]|0;
       $118 = ((($117)) + 12|0);
       $119 = HEAP32[$118>>2]|0;
       $120 = ((($117)) + 16|0);
       $121 = HEAP32[$120>>2]|0;
       $122 = ($119|0)==($121|0);
       if ($122) {
        $123 = HEAP32[$117>>2]|0;
        $124 = ((($123)) + 40|0);
        $125 = HEAP32[$124>>2]|0;
        __THREW__ = 0;
        $126 = (invoke_ii($125|0,($117|0))|0);
        $127 = __THREW__; __THREW__ = 0;
        $128 = $127&1;
        if ($128) {
         label = 35;
         break L24;
        } else {
         $$0$i$i197 = $126;
        }
       } else {
        $129 = ((($119)) + 1|0);
        HEAP32[$118>>2] = $129;
        $130 = HEAP8[$119>>0]|0;
        $131 = $130&255;
        $$0$i$i197 = $131;
       }
       $132 = $$0$i$i197&255;
       __THREW__ = 0;
       invoke_vii(665,($23|0),($132|0));
       $133 = __THREW__; __THREW__ = 0;
       $134 = $133&1;
       if ($134) {
        label = 35;
        break L24;
       } else {
        $$pre$i3$i$i204 = $868;$154 = $868;
        label = 50;
       }
      }
      break;
     }
     case 0:  {
      $137 = ($$0158|0)==(3);
      if ($137) {
       $$1150 = $$0149;
      } else {
       $$pre$i3$i$i204 = $868;$154 = $868;
       label = 50;
      }
      break;
     }
     case 3:  {
      $208 = HEAP8[$43>>0]|0;
      $209 = ($208<<24>>24)<(0);
      $210 = HEAP32[$44>>2]|0;
      $211 = $208&255;
      $212 = $209 ? $210 : $211;
      $213 = HEAP8[$45>>0]|0;
      $214 = ($213<<24>>24)<(0);
      $215 = HEAP32[$46>>2]|0;
      $216 = $213&255;
      $217 = $214 ? $215 : $216;
      $218 = (0 - ($217))|0;
      $219 = ($212|0)==($218|0);
      if ($219) {
       $$1150 = $$0149;
      } else {
       $220 = ($212|0)==(0);
       if ($220) {
        $261 = HEAP32[$0>>2]|0;
        $262 = ((($261)) + 12|0);
        $263 = HEAP32[$262>>2]|0;
        $264 = ((($261)) + 16|0);
        $265 = HEAP32[$264>>2]|0;
        $266 = ($263|0)==($265|0);
        if ($266) {
         $267 = HEAP32[$261>>2]|0;
         $268 = ((($267)) + 36|0);
         $269 = HEAP32[$268>>2]|0;
         __THREW__ = 0;
         $270 = (invoke_ii($269|0,($261|0))|0);
         $271 = __THREW__; __THREW__ = 0;
         $272 = $271&1;
         if ($272) {
          label = 35;
          break L24;
         }
         $$pre484 = HEAP8[$45>>0]|0;
         $$0$i$i257 = $270;$276 = $$pre484;
        } else {
         $273 = HEAP8[$263>>0]|0;
         $274 = $273&255;
         $$0$i$i257 = $274;$276 = $213;
        }
        $275 = $$0$i$i257&255;
        $277 = ($276<<24>>24)<(0);
        $278 = HEAP32[$22>>2]|0;
        $279 = $277 ? $278 : $22;
        $280 = HEAP8[$279>>0]|0;
        $281 = ($275<<24>>24)==($280<<24>>24);
        if (!($281)) {
         $$1150 = $$0149;
         break L47;
        }
        $282 = HEAP32[$0>>2]|0;
        $283 = ((($282)) + 12|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = ((($282)) + 16|0);
        $286 = HEAP32[$285>>2]|0;
        $287 = ($284|0)==($286|0);
        if ($287) {
         $288 = HEAP32[$282>>2]|0;
         $289 = ((($288)) + 40|0);
         $290 = HEAP32[$289>>2]|0;
         __THREW__ = 0;
         (invoke_ii($290|0,($282|0))|0);
         $291 = __THREW__; __THREW__ = 0;
         $292 = $291&1;
         if ($292) {
          label = 35;
          break L24;
         }
         $$pre485 = HEAP8[$45>>0]|0;
         $294 = $$pre485;
        } else {
         $293 = ((($284)) + 1|0);
         HEAP32[$283>>2] = $293;
         $294 = $276;
        }
        HEAP8[$6>>0] = 1;
        $295 = ($294<<24>>24)<(0);
        $296 = HEAP32[$46>>2]|0;
        $297 = $294&255;
        $298 = $295 ? $296 : $297;
        $299 = ($298>>>0)>(1);
        $$$0149159 = $299 ? $22 : $$0149;
        $$1150 = $$$0149159;
        break L47;
       }
       $221 = ($217|0)==(0);
       $222 = HEAP32[$0>>2]|0;
       $223 = ((($222)) + 12|0);
       $224 = HEAP32[$223>>2]|0;
       $225 = ((($222)) + 16|0);
       $226 = HEAP32[$225>>2]|0;
       $227 = ($224|0)==($226|0);
       if ($221) {
        if ($227) {
         $228 = HEAP32[$222>>2]|0;
         $229 = ((($228)) + 36|0);
         $230 = HEAP32[$229>>2]|0;
         __THREW__ = 0;
         $231 = (invoke_ii($230|0,($222|0))|0);
         $232 = __THREW__; __THREW__ = 0;
         $233 = $232&1;
         if ($233) {
          label = 35;
          break L24;
         }
         $$pre482 = HEAP8[$43>>0]|0;
         $$0$i$i246 = $231;$237 = $$pre482;
        } else {
         $234 = HEAP8[$224>>0]|0;
         $235 = $234&255;
         $$0$i$i246 = $235;$237 = $208;
        }
        $236 = $$0$i$i246&255;
        $238 = ($237<<24>>24)<(0);
        $239 = HEAP32[$21>>2]|0;
        $240 = $238 ? $239 : $21;
        $241 = HEAP8[$240>>0]|0;
        $242 = ($236<<24>>24)==($241<<24>>24);
        if (!($242)) {
         HEAP8[$6>>0] = 1;
         $$1150 = $$0149;
         break L47;
        }
        $243 = HEAP32[$0>>2]|0;
        $244 = ((($243)) + 12|0);
        $245 = HEAP32[$244>>2]|0;
        $246 = ((($243)) + 16|0);
        $247 = HEAP32[$246>>2]|0;
        $248 = ($245|0)==($247|0);
        if ($248) {
         $249 = HEAP32[$243>>2]|0;
         $250 = ((($249)) + 40|0);
         $251 = HEAP32[$250>>2]|0;
         __THREW__ = 0;
         (invoke_ii($251|0,($243|0))|0);
         $252 = __THREW__; __THREW__ = 0;
         $253 = $252&1;
         if ($253) {
          label = 35;
          break L24;
         }
         $$pre483 = HEAP8[$43>>0]|0;
         $255 = $$pre483;
        } else {
         $254 = ((($245)) + 1|0);
         HEAP32[$244>>2] = $254;
         $255 = $237;
        }
        $256 = ($255<<24>>24)<(0);
        $257 = HEAP32[$44>>2]|0;
        $258 = $255&255;
        $259 = $256 ? $257 : $258;
        $260 = ($259>>>0)>(1);
        $$$0149 = $260 ? $21 : $$0149;
        $$1150 = $$$0149;
        break L47;
       }
       if ($227) {
        $300 = HEAP32[$222>>2]|0;
        $301 = ((($300)) + 36|0);
        $302 = HEAP32[$301>>2]|0;
        __THREW__ = 0;
        $303 = (invoke_ii($302|0,($222|0))|0);
        $304 = __THREW__; __THREW__ = 0;
        $305 = $304&1;
        if ($305) {
         label = 35;
         break L24;
        }
        $$pre475 = HEAP8[$43>>0]|0;
        $$pre476 = HEAP32[$0>>2]|0;
        $$phi$trans$insert = ((($$pre476)) + 12|0);
        $$pre477 = HEAP32[$$phi$trans$insert>>2]|0;
        $$phi$trans$insert478 = ((($$pre476)) + 16|0);
        $$pre479 = HEAP32[$$phi$trans$insert478>>2]|0;
        $$0$i$i275 = $303;$309 = $$pre475;$316 = $$pre476;$317 = $$pre477;$319 = $$pre479;
       } else {
        $306 = HEAP8[$224>>0]|0;
        $307 = $306&255;
        $$0$i$i275 = $307;$309 = $208;$316 = $222;$317 = $224;$319 = $226;
       }
       $308 = $$0$i$i275&255;
       $310 = ($309<<24>>24)<(0);
       $311 = HEAP32[$21>>2]|0;
       $312 = $310 ? $311 : $21;
       $313 = HEAP8[$312>>0]|0;
       $314 = ($308<<24>>24)==($313<<24>>24);
       $315 = ((($316)) + 12|0);
       $318 = ($317|0)==($319|0);
       if ($314) {
        if ($318) {
         $320 = HEAP32[$316>>2]|0;
         $321 = ((($320)) + 40|0);
         $322 = HEAP32[$321>>2]|0;
         __THREW__ = 0;
         (invoke_ii($322|0,($316|0))|0);
         $323 = __THREW__; __THREW__ = 0;
         $324 = $323&1;
         if ($324) {
          label = 35;
          break L24;
         }
         $$pre481 = HEAP8[$43>>0]|0;
         $326 = $$pre481;
        } else {
         $325 = ((($317)) + 1|0);
         HEAP32[$315>>2] = $325;
         $326 = $309;
        }
        $327 = ($326<<24>>24)<(0);
        $328 = HEAP32[$44>>2]|0;
        $329 = $326&255;
        $330 = $327 ? $328 : $329;
        $331 = ($330>>>0)>(1);
        $$$0149160 = $331 ? $21 : $$0149;
        $$1150 = $$$0149160;
        break L47;
       }
       if ($318) {
        $332 = HEAP32[$316>>2]|0;
        $333 = ((($332)) + 36|0);
        $334 = HEAP32[$333>>2]|0;
        __THREW__ = 0;
        $335 = (invoke_ii($334|0,($316|0))|0);
        $336 = __THREW__; __THREW__ = 0;
        $337 = $336&1;
        if ($337) {
         label = 35;
         break L24;
        } else {
         $$0$i$i284 = $335;
        }
       } else {
        $338 = HEAP8[$317>>0]|0;
        $339 = $338&255;
        $$0$i$i284 = $339;
       }
       $340 = $$0$i$i284&255;
       $341 = HEAP8[$45>>0]|0;
       $342 = ($341<<24>>24)<(0);
       $343 = HEAP32[$22>>2]|0;
       $344 = $342 ? $343 : $22;
       $345 = HEAP8[$344>>0]|0;
       $346 = ($340<<24>>24)==($345<<24>>24);
       if (!($346)) {
        label = 116;
        break L24;
       }
       $347 = HEAP32[$0>>2]|0;
       $348 = ((($347)) + 12|0);
       $349 = HEAP32[$348>>2]|0;
       $350 = ((($347)) + 16|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = ($349|0)==($351|0);
       if ($352) {
        $353 = HEAP32[$347>>2]|0;
        $354 = ((($353)) + 40|0);
        $355 = HEAP32[$354>>2]|0;
        __THREW__ = 0;
        (invoke_ii($355|0,($347|0))|0);
        $356 = __THREW__; __THREW__ = 0;
        $357 = $356&1;
        if ($357) {
         label = 35;
         break L24;
        }
        $$pre480 = HEAP8[$45>>0]|0;
        $359 = $$pre480;
       } else {
        $358 = ((($349)) + 1|0);
        HEAP32[$348>>2] = $358;
        $359 = $341;
       }
       HEAP8[$6>>0] = 1;
       $360 = ($359<<24>>24)<(0);
       $361 = HEAP32[$46>>2]|0;
       $362 = $359&255;
       $363 = $360 ? $361 : $362;
       $364 = ($363>>>0)>(1);
       $$$0149161 = $364 ? $22 : $$0149;
       $$1150 = $$$0149161;
      }
      break;
     }
     case 2:  {
      $367 = ($$0149|0)!=(0|0);
      $368 = ($$0158>>>0)<(2);
      $or$cond = $368 | $367;
      if (!($or$cond)) {
       $369 = ($$0158|0)==(2);
       $370 = HEAP8[$53>>0]|0;
       $371 = ($370<<24>>24)!=(0);
       $372 = $369 & $371;
       $brmerge = $48 | $372;
       if (!($brmerge)) {
        $$1150 = 0;
        break L47;
       }
      }
      $373 = HEAP8[$49>>0]|0;
      $374 = ($373<<24>>24)<(0);
      $375 = HEAP32[$20>>2]|0;
      $376 = $374 ? $375 : $20;
      $377 = $376;
      $378 = ($$0158|0)==(0);
      L120: do {
       if ($378) {
        $$pre$i3$i$i321 = $868;$$sroa$0341$0 = $377;$416 = $373;$420 = $375;$442 = $868;
       } else {
        $379 = (($$0158) + -1)|0;
        $380 = (($16) + ($379)|0);
        $381 = HEAP8[$380>>0]|0;
        $switch = ($381&255)<(2);
        if ($switch) {
         $382 = HEAP32[$50>>2]|0;
         $383 = $373&255;
         $384 = $374 ? $382 : $383;
         $385 = (($376) + ($384)|0);
         $$sroa$0362$0 = $377;
         while(1) {
          $386 = $$sroa$0362$0;
          $387 = ($386|0)==($385|0);
          if ($387) {
           break;
          }
          $388 = HEAP8[$386>>0]|0;
          $isascii3$i314 = ($388<<24>>24)>(-1);
          if (!($isascii3$i314)) {
           break;
          }
          $389 = $388 << 24 >> 24;
          $390 = HEAP32[$42>>2]|0;
          $391 = (($390) + ($389<<1)|0);
          $392 = HEAP16[$391>>1]|0;
          $393 = $392 & 8192;
          $394 = ($393<<16>>16)==(0);
          if ($394) {
           break;
          }
          $395 = ((($386)) + 1|0);
          $396 = $395;
          $$sroa$0362$0 = $396;
         }
         $397 = (($$sroa$0362$0) - ($377))|0;
         $398 = HEAP8[$51>>0]|0;
         $399 = ($398<<24>>24)<(0);
         $400 = HEAP32[$52>>2]|0;
         $401 = $398&255;
         $402 = $399 ? $400 : $401;
         $403 = ($397>>>0)>($402>>>0);
         if ($403) {
          $$pre$i3$i$i321 = $868;$$sroa$0341$0 = $377;$416 = $373;$420 = $375;$442 = $868;
         } else {
          $404 = HEAP32[$23>>2]|0;
          $405 = $399 ? $404 : $23;
          $406 = (($405) + ($402)|0);
          $407 = (0 - ($397))|0;
          $408 = (($406) + ($407)|0);
          $$sink410 = $376;$409 = $408;
          while(1) {
           $410 = ($409|0)==($406|0);
           if ($410) {
            $$pre$i3$i$i321 = $868;$$sroa$0341$0 = $$sroa$0362$0;$416 = $373;$420 = $375;$442 = $868;
            break L120;
           }
           $411 = HEAP8[$409>>0]|0;
           $412 = HEAP8[$$sink410>>0]|0;
           $413 = ($411<<24>>24)==($412<<24>>24);
           if (!($413)) {
            $$pre$i3$i$i321 = $868;$$sroa$0341$0 = $377;$416 = $373;$420 = $375;$442 = $868;
            break L120;
           }
           $414 = ((($409)) + 1|0);
           $415 = ((($$sink410)) + 1|0);
           $$sink410 = $415;$409 = $414;
          }
         }
        } else {
         $$pre$i3$i$i321 = $868;$$sroa$0341$0 = $377;$416 = $373;$420 = $375;$442 = $868;
        }
       }
      } while(0);
      L134: while(1) {
       $417 = ($416<<24>>24)<(0);
       $418 = HEAP32[$50>>2]|0;
       $419 = $416&255;
       $421 = $417 ? $420 : $20;
       $422 = $417 ? $418 : $419;
       $423 = (($421) + ($422)|0);
       $424 = $$sroa$0341$0;
       $425 = ($424|0)==($423|0);
       if ($425) {
        $$lcssa = $423;
        break;
       }
       $426 = HEAP32[$0>>2]|0;
       $427 = ($426|0)==(0|0);
       do {
        if ($427) {
         $440 = 0;
        } else {
         $428 = ((($426)) + 12|0);
         $429 = HEAP32[$428>>2]|0;
         $430 = ((($426)) + 16|0);
         $431 = HEAP32[$430>>2]|0;
         $432 = ($429|0)==($431|0);
         if ($432) {
          $433 = HEAP32[$426>>2]|0;
          $434 = ((($433)) + 36|0);
          $435 = HEAP32[$434>>2]|0;
          __THREW__ = 0;
          $436 = (invoke_ii($435|0,($426|0))|0);
          $437 = __THREW__; __THREW__ = 0;
          $438 = $437&1;
          if ($438) {
           label = 154;
           break L24;
          }
          $439 = ($436|0)==(-1);
          if ($439) {
           HEAP32[$0>>2] = 0;
           $440 = 0;
           break;
          } else {
           $$pre$i$i$i317 = HEAP32[$0>>2]|0;
           $440 = $$pre$i$i$i317;
           break;
          }
         } else {
          $440 = $426;
         }
        }
       } while(0);
       $441 = ($440|0)==(0|0);
       $443 = ($442|0)==(0|0);
       do {
        if ($443) {
         $$pre$i3$i$i321473 = $$pre$i3$i$i321;
         label = 144;
        } else {
         $444 = ((($442)) + 12|0);
         $445 = HEAP32[$444>>2]|0;
         $446 = ((($442)) + 16|0);
         $447 = HEAP32[$446>>2]|0;
         $448 = ($445|0)==($447|0);
         if (!($448)) {
          if ($441) {
           $$pre$i3$i$i321472 = $$pre$i3$i$i321;$870 = $442;
           break;
          } else {
           $$lcssa = $424;
           break L134;
          }
         }
         $449 = HEAP32[$442>>2]|0;
         $450 = ((($449)) + 36|0);
         $451 = HEAP32[$450>>2]|0;
         __THREW__ = 0;
         $452 = (invoke_ii($451|0,($442|0))|0);
         $453 = __THREW__; __THREW__ = 0;
         $454 = $453&1;
         if ($454) {
          label = 154;
          break L24;
         }
         $455 = ($452|0)==(-1);
         if ($455) {
          HEAP32[$1>>2] = 0;
          $$pre$i3$i$i321473 = 0;
          label = 144;
          break;
         } else {
          $456 = ($$pre$i3$i$i321|0)==(0|0);
          $tmp$i$i323 = $441 ^ $456;
          if ($tmp$i$i323) {
           $$pre$i3$i$i321472 = $$pre$i3$i$i321;$870 = $$pre$i3$i$i321;
           break;
          } else {
           $$lcssa = $424;
           break L134;
          }
         }
        }
       } while(0);
       if ((label|0) == 144) {
        label = 0;
        if ($441) {
         $$lcssa = $424;
         break;
        } else {
         $$pre$i3$i$i321472 = $$pre$i3$i$i321473;$870 = 0;
        }
       }
       $457 = HEAP32[$0>>2]|0;
       $458 = ((($457)) + 12|0);
       $459 = HEAP32[$458>>2]|0;
       $460 = ((($457)) + 16|0);
       $461 = HEAP32[$460>>2]|0;
       $462 = ($459|0)==($461|0);
       if ($462) {
        $463 = HEAP32[$457>>2]|0;
        $464 = ((($463)) + 36|0);
        $465 = HEAP32[$464>>2]|0;
        __THREW__ = 0;
        $466 = (invoke_ii($465|0,($457|0))|0);
        $467 = __THREW__; __THREW__ = 0;
        $468 = $467&1;
        if ($468) {
         label = 154;
         break L24;
        } else {
         $$0$i$i311 = $466;
        }
       } else {
        $469 = HEAP8[$459>>0]|0;
        $470 = $469&255;
        $$0$i$i311 = $470;
       }
       $471 = $$0$i$i311&255;
       $472 = HEAP8[$424>>0]|0;
       $473 = ($471<<24>>24)==($472<<24>>24);
       if (!($473)) {
        $$lcssa = $424;
        break;
       }
       $474 = HEAP32[$0>>2]|0;
       $475 = ((($474)) + 12|0);
       $476 = HEAP32[$475>>2]|0;
       $477 = ((($474)) + 16|0);
       $478 = HEAP32[$477>>2]|0;
       $479 = ($476|0)==($478|0);
       if ($479) {
        $480 = HEAP32[$474>>2]|0;
        $481 = ((($480)) + 40|0);
        $482 = HEAP32[$481>>2]|0;
        __THREW__ = 0;
        (invoke_ii($482|0,($474|0))|0);
        $483 = __THREW__; __THREW__ = 0;
        $484 = $483&1;
        if ($484) {
         label = 155;
         break L24;
        }
       } else {
        $485 = ((($476)) + 1|0);
        HEAP32[$475>>2] = $485;
       }
       $486 = ((($424)) + 1|0);
       $487 = $486;
       $$pre470 = HEAP8[$49>>0]|0;
       $$pre471 = HEAP32[$20>>2]|0;
       $$pre$i3$i$i321 = $$pre$i3$i$i321472;$$sroa$0341$0 = $487;$416 = $$pre470;$420 = $$pre471;$442 = $870;
      }
      if ($48) {
       $492 = HEAP8[$49>>0]|0;
       $493 = ($492<<24>>24)<(0);
       $494 = HEAP32[$20>>2]|0;
       $495 = HEAP32[$50>>2]|0;
       $496 = $492&255;
       $497 = $493 ? $494 : $20;
       $498 = $493 ? $495 : $496;
       $499 = (($497) + ($498)|0);
       $500 = ($$lcssa|0)==($499|0);
       if ($500) {
        $$1150 = $$0149;
       } else {
        label = 158;
        break L24;
       }
      } else {
       $$1150 = $$0149;
      }
      break;
     }
     case 4:  {
      $$0132 = 0;$$pre$i3$i$i302 = $868;$519 = $868;
      L168: while(1) {
       $503 = HEAP32[$0>>2]|0;
       $504 = ($503|0)==(0|0);
       do {
        if ($504) {
         $517 = 0;
        } else {
         $505 = ((($503)) + 12|0);
         $506 = HEAP32[$505>>2]|0;
         $507 = ((($503)) + 16|0);
         $508 = HEAP32[$507>>2]|0;
         $509 = ($506|0)==($508|0);
         if ($509) {
          $510 = HEAP32[$503>>2]|0;
          $511 = ((($510)) + 36|0);
          $512 = HEAP32[$511>>2]|0;
          __THREW__ = 0;
          $513 = (invoke_ii($512|0,($503|0))|0);
          $514 = __THREW__; __THREW__ = 0;
          $515 = $514&1;
          if ($515) {
           label = 182;
           break L24;
          }
          $516 = ($513|0)==(-1);
          if ($516) {
           HEAP32[$0>>2] = 0;
           $517 = 0;
           break;
          } else {
           $$pre$i$i$i298 = HEAP32[$0>>2]|0;
           $517 = $$pre$i$i$i298;
           break;
          }
         } else {
          $517 = $503;
         }
        }
       } while(0);
       $518 = ($517|0)==(0|0);
       $520 = ($519|0)==(0|0);
       do {
        if ($520) {
         $$pre$i3$i$i302460 = $$pre$i3$i$i302;
         label = 171;
        } else {
         $521 = ((($519)) + 12|0);
         $522 = HEAP32[$521>>2]|0;
         $523 = ((($519)) + 16|0);
         $524 = HEAP32[$523>>2]|0;
         $525 = ($522|0)==($524|0);
         if (!($525)) {
          if ($518) {
           $$pre$i3$i$i302462 = $$pre$i3$i$i302;$871 = $519;
           break;
          } else {
           $$pre$i3$i$i266 = $$pre$i3$i$i302;
           break L168;
          }
         }
         $526 = HEAP32[$519>>2]|0;
         $527 = ((($526)) + 36|0);
         $528 = HEAP32[$527>>2]|0;
         __THREW__ = 0;
         $529 = (invoke_ii($528|0,($519|0))|0);
         $530 = __THREW__; __THREW__ = 0;
         $531 = $530&1;
         if ($531) {
          label = 182;
          break L24;
         }
         $532 = ($529|0)==(-1);
         if ($532) {
          HEAP32[$1>>2] = 0;
          $$pre$i3$i$i302460 = 0;
          label = 171;
          break;
         } else {
          $533 = ($$pre$i3$i$i302|0)==(0|0);
          $tmp$i$i304 = $518 ^ $533;
          if ($tmp$i$i304) {
           $$pre$i3$i$i302462 = $$pre$i3$i$i302;$871 = $$pre$i3$i$i302;
           break;
          } else {
           $$pre$i3$i$i266 = $$pre$i3$i$i302;
           break L168;
          }
         }
        }
       } while(0);
       if ((label|0) == 171) {
        label = 0;
        if ($518) {
         $$pre$i3$i$i266 = $$pre$i3$i$i302460;
         break;
        } else {
         $$pre$i3$i$i302462 = $$pre$i3$i$i302460;$871 = 0;
        }
       }
       $534 = HEAP32[$0>>2]|0;
       $535 = ((($534)) + 12|0);
       $536 = HEAP32[$535>>2]|0;
       $537 = ((($534)) + 16|0);
       $538 = HEAP32[$537>>2]|0;
       $539 = ($536|0)==($538|0);
       if ($539) {
        $540 = HEAP32[$534>>2]|0;
        $541 = ((($540)) + 36|0);
        $542 = HEAP32[$541>>2]|0;
        __THREW__ = 0;
        $543 = (invoke_ii($542|0,($534|0))|0);
        $544 = __THREW__; __THREW__ = 0;
        $545 = $544&1;
        if ($545) {
         label = 182;
         break L24;
        } else {
         $$0$i$i294 = $543;
        }
       } else {
        $546 = HEAP8[$536>>0]|0;
        $547 = $546&255;
        $$0$i$i294 = $547;
       }
       $548 = $$0$i$i294&255;
       $isascii3$i292 = ($548<<24>>24)>(-1);
       if ($isascii3$i292) {
        $sext411 = $$0$i$i294 << 24;
        $549 = $sext411 >> 24;
        $550 = HEAP32[$42>>2]|0;
        $551 = (($550) + ($549<<1)|0);
        $552 = HEAP16[$551>>1]|0;
        $553 = $552 & 2048;
        $554 = ($553<<16>>16)==(0);
        if ($554) {
         label = 186;
        } else {
         $555 = HEAP32[$9>>2]|0;
         $556 = HEAP32[$11>>2]|0;
         $557 = ($555|0)==($556|0);
         if ($557) {
          __THREW__ = 0;
          invoke_viii(806,($8|0),($9|0),($11|0));
          $558 = __THREW__; __THREW__ = 0;
          $559 = $558&1;
          if ($559) {
           label = 184;
           break L24;
          }
          $$pre = HEAP32[$9>>2]|0;
          $569 = $$pre;
         } else {
          $569 = $555;
         }
         $568 = ((($569)) + 1|0);
         HEAP32[$9>>2] = $568;
         HEAP8[$569>>0] = $548;
         $570 = (($$0132) + 1)|0;
         $$2134$ph = $570;
        }
       } else {
        label = 186;
       }
       if ((label|0) == 186) {
        label = 0;
        $571 = HEAP8[$54>>0]|0;
        $572 = ($571<<24>>24)<(0);
        $573 = HEAP32[$55>>2]|0;
        $574 = $571&255;
        $575 = $572 ? $573 : $574;
        $576 = ($575|0)!=(0);
        $577 = ($$0132|0)!=(0);
        $or$cond13 = $577 & $576;
        $578 = HEAP8[$18>>0]|0;
        $579 = ($548<<24>>24)==($578<<24>>24);
        $or$cond163 = $579 & $or$cond13;
        if (!($or$cond163)) {
         $$pre$i3$i$i266 = $$pre$i3$i$i302462;
         break;
        }
        $580 = HEAP32[$14>>2]|0;
        $581 = HEAP32[$15>>2]|0;
        $582 = ($580|0)==($581|0);
        if ($582) {
         __THREW__ = 0;
         invoke_viii(807,($13|0),($14|0),($15|0));
         $583 = __THREW__; __THREW__ = 0;
         $584 = $583&1;
         if ($584) {
          label = 184;
          break L24;
         }
         $$pre465 = HEAP32[$14>>2]|0;
         $586 = $$pre465;
        } else {
         $586 = $580;
        }
        $585 = ((($586)) + 4|0);
        HEAP32[$14>>2] = $585;
        HEAP32[$586>>2] = $$0132;
        $$2134$ph = 0;
       }
       $587 = HEAP32[$0>>2]|0;
       $588 = ((($587)) + 12|0);
       $589 = HEAP32[$588>>2]|0;
       $590 = ((($587)) + 16|0);
       $591 = HEAP32[$590>>2]|0;
       $592 = ($589|0)==($591|0);
       if ($592) {
        $593 = HEAP32[$587>>2]|0;
        $594 = ((($593)) + 40|0);
        $595 = HEAP32[$594>>2]|0;
        __THREW__ = 0;
        (invoke_ii($595|0,($587|0))|0);
        $596 = __THREW__; __THREW__ = 0;
        $597 = $596&1;
        if ($597) {
         label = 182;
         break L24;
        } else {
         $$0132 = $$2134$ph;$$pre$i3$i$i302 = $$pre$i3$i$i302462;$519 = $871;
         continue;
        }
       } else {
        $598 = ((($589)) + 1|0);
        HEAP32[$588>>2] = $598;
        $$0132 = $$2134$ph;$$pre$i3$i$i302 = $$pre$i3$i$i302462;$519 = $871;
        continue;
       }
      }
      $599 = HEAP32[$13>>2]|0;
      $600 = HEAP32[$14>>2]|0;
      $601 = ($599|0)!=($600|0);
      $602 = ($$0132|0)!=(0);
      $or$cond15 = $602 & $601;
      if ($or$cond15) {
       $603 = HEAP32[$15>>2]|0;
       $604 = ($600|0)==($603|0);
       if ($604) {
        __THREW__ = 0;
        invoke_viii(807,($13|0),($14|0),($15|0));
        $605 = __THREW__; __THREW__ = 0;
        $606 = $605&1;
        if ($606) {
         label = 183;
         break L24;
        }
        $$pre467 = HEAP32[$14>>2]|0;
        $608 = $$pre467;
       } else {
        $608 = $600;
       }
       $607 = ((($608)) + 4|0);
       HEAP32[$14>>2] = $607;
       HEAP32[$608>>2] = $$0132;
      }
      $609 = HEAP32[$24>>2]|0;
      $610 = ($609|0)>(0);
      L220: do {
       if ($610) {
        $611 = HEAP32[$0>>2]|0;
        $612 = ($611|0)==(0|0);
        do {
         if ($612) {
          $625 = 0;
         } else {
          $613 = ((($611)) + 12|0);
          $614 = HEAP32[$613>>2]|0;
          $615 = ((($611)) + 16|0);
          $616 = HEAP32[$615>>2]|0;
          $617 = ($614|0)==($616|0);
          if ($617) {
           $618 = HEAP32[$611>>2]|0;
           $619 = ((($618)) + 36|0);
           $620 = HEAP32[$619>>2]|0;
           __THREW__ = 0;
           $621 = (invoke_ii($620|0,($611|0))|0);
           $622 = __THREW__; __THREW__ = 0;
           $623 = $622&1;
           if ($623) {
            label = 183;
            break L24;
           }
           $624 = ($621|0)==(-1);
           if ($624) {
            HEAP32[$0>>2] = 0;
            $625 = 0;
            break;
           } else {
            $$pre$i$i$i262 = HEAP32[$0>>2]|0;
            $625 = $$pre$i$i$i262;
            break;
           }
          } else {
           $625 = $611;
          }
         }
        } while(0);
        $626 = ($625|0)==(0|0);
        $627 = ($$pre$i3$i$i266|0)==(0|0);
        do {
         if ($627) {
          label = 212;
         } else {
          $628 = ((($$pre$i3$i$i266)) + 12|0);
          $629 = HEAP32[$628>>2]|0;
          $630 = ((($$pre$i3$i$i266)) + 16|0);
          $631 = HEAP32[$630>>2]|0;
          $632 = ($629|0)==($631|0);
          if ($632) {
           $633 = HEAP32[$$pre$i3$i$i266>>2]|0;
           $634 = ((($633)) + 36|0);
           $635 = HEAP32[$634>>2]|0;
           __THREW__ = 0;
           $636 = (invoke_ii($635|0,($$pre$i3$i$i266|0))|0);
           $637 = __THREW__; __THREW__ = 0;
           $638 = $637&1;
           if ($638) {
            label = 183;
            break L24;
           }
           $639 = ($636|0)==(-1);
           if ($639) {
            HEAP32[$1>>2] = 0;
            label = 212;
            break;
           }
          }
          if ($626) {
           $872 = $$pre$i3$i$i266;
          } else {
           label = 217;
           break L24;
          }
         }
        } while(0);
        if ((label|0) == 212) {
         label = 0;
         if ($626) {
          label = 217;
          break L24;
         } else {
          $872 = 0;
         }
        }
        $640 = HEAP32[$0>>2]|0;
        $641 = ((($640)) + 12|0);
        $642 = HEAP32[$641>>2]|0;
        $643 = ((($640)) + 16|0);
        $644 = HEAP32[$643>>2]|0;
        $645 = ($642|0)==($644|0);
        if ($645) {
         $646 = HEAP32[$640>>2]|0;
         $647 = ((($646)) + 36|0);
         $648 = HEAP32[$647>>2]|0;
         __THREW__ = 0;
         $649 = (invoke_ii($648|0,($640|0))|0);
         $650 = __THREW__; __THREW__ = 0;
         $651 = $650&1;
         if ($651) {
          label = 183;
          break L24;
         } else {
          $$0$i$i254 = $649;
         }
        } else {
         $652 = HEAP8[$642>>0]|0;
         $653 = $652&255;
         $$0$i$i254 = $653;
        }
        $654 = $$0$i$i254&255;
        $655 = HEAP8[$17>>0]|0;
        $656 = ($654<<24>>24)==($655<<24>>24);
        if (!($656)) {
         label = 217;
         break L24;
        }
        $659 = HEAP32[$0>>2]|0;
        $660 = ((($659)) + 12|0);
        $661 = HEAP32[$660>>2]|0;
        $662 = ((($659)) + 16|0);
        $663 = HEAP32[$662>>2]|0;
        $664 = ($661|0)==($663|0);
        if ($664) {
         $665 = HEAP32[$659>>2]|0;
         $666 = ((($665)) + 40|0);
         $667 = HEAP32[$666>>2]|0;
         __THREW__ = 0;
         (invoke_ii($667|0,($659|0))|0);
         $668 = __THREW__; __THREW__ = 0;
         $669 = $668&1;
         if ($669) {
          label = 183;
          break L24;
         } else {
          $$pre$i3$i$i239 = $872;$689 = $872;
         }
        } else {
         $670 = ((($661)) + 1|0);
         HEAP32[$660>>2] = $670;
         $$pre$i3$i$i239 = $872;$689 = $872;
        }
        while(1) {
         $671 = HEAP32[$24>>2]|0;
         $672 = ($671|0)>(0);
         if (!($672)) {
          break L220;
         }
         $673 = HEAP32[$0>>2]|0;
         $674 = ($673|0)==(0|0);
         do {
          if ($674) {
           $687 = 0;
          } else {
           $675 = ((($673)) + 12|0);
           $676 = HEAP32[$675>>2]|0;
           $677 = ((($673)) + 16|0);
           $678 = HEAP32[$677>>2]|0;
           $679 = ($676|0)==($678|0);
           if ($679) {
            $680 = HEAP32[$673>>2]|0;
            $681 = ((($680)) + 36|0);
            $682 = HEAP32[$681>>2]|0;
            __THREW__ = 0;
            $683 = (invoke_ii($682|0,($673|0))|0);
            $684 = __THREW__; __THREW__ = 0;
            $685 = $684&1;
            if ($685) {
             label = 181;
             break L24;
            }
            $686 = ($683|0)==(-1);
            if ($686) {
             HEAP32[$0>>2] = 0;
             $687 = 0;
             break;
            } else {
             $$pre$i$i$i235 = HEAP32[$0>>2]|0;
             $687 = $$pre$i$i$i235;
             break;
            }
           } else {
            $687 = $673;
           }
          }
         } while(0);
         $688 = ($687|0)==(0|0);
         $690 = ($689|0)==(0|0);
         do {
          if ($690) {
           $$pre$i3$i$i239468$ph = $$pre$i3$i$i239;
           label = 234;
          } else {
           $691 = ((($689)) + 12|0);
           $692 = HEAP32[$691>>2]|0;
           $693 = ((($689)) + 16|0);
           $694 = HEAP32[$693>>2]|0;
           $695 = ($692|0)==($694|0);
           if (!($695)) {
            if ($688) {
             $$pre$i3$i$i239468491 = $$pre$i3$i$i239;$873 = $689;
             break;
            } else {
             label = 241;
             break L24;
            }
           }
           $696 = HEAP32[$689>>2]|0;
           $697 = ((($696)) + 36|0);
           $698 = HEAP32[$697>>2]|0;
           __THREW__ = 0;
           $699 = (invoke_ii($698|0,($689|0))|0);
           $700 = __THREW__; __THREW__ = 0;
           $701 = $700&1;
           if ($701) {
            label = 181;
            break L24;
           }
           $702 = ($699|0)==(-1);
           if ($702) {
            HEAP32[$1>>2] = 0;
            $$pre$i3$i$i239468$ph = 0;
            label = 234;
            break;
           } else {
            $703 = ($$pre$i3$i$i239|0)==(0|0);
            $tmp$i$i241 = $688 ^ $703;
            if ($tmp$i$i241) {
             $$pre$i3$i$i239468491 = $$pre$i3$i$i239;$873 = $$pre$i3$i$i239;
             break;
            } else {
             label = 241;
             break L24;
            }
           }
          }
         } while(0);
         if ((label|0) == 234) {
          label = 0;
          if ($688) {
           label = 241;
           break L24;
          } else {
           $$pre$i3$i$i239468491 = $$pre$i3$i$i239468$ph;$873 = 0;
          }
         }
         $704 = HEAP32[$0>>2]|0;
         $705 = ((($704)) + 12|0);
         $706 = HEAP32[$705>>2]|0;
         $707 = ((($704)) + 16|0);
         $708 = HEAP32[$707>>2]|0;
         $709 = ($706|0)==($708|0);
         if ($709) {
          $710 = HEAP32[$704>>2]|0;
          $711 = ((($710)) + 36|0);
          $712 = HEAP32[$711>>2]|0;
          __THREW__ = 0;
          $713 = (invoke_ii($712|0,($704|0))|0);
          $714 = __THREW__; __THREW__ = 0;
          $715 = $714&1;
          if ($715) {
           label = 181;
           break L24;
          } else {
           $$0$i$i230 = $713;
          }
         } else {
          $716 = HEAP8[$706>>0]|0;
          $717 = $716&255;
          $$0$i$i230 = $717;
         }
         $718 = $$0$i$i230&255;
         $isascii3$i228 = ($718<<24>>24)>(-1);
         if (!($isascii3$i228)) {
          label = 241;
          break L24;
         }
         $sext = $$0$i$i230 << 24;
         $719 = $sext >> 24;
         $720 = HEAP32[$42>>2]|0;
         $721 = (($720) + ($719<<1)|0);
         $722 = HEAP16[$721>>1]|0;
         $723 = $722 & 2048;
         $724 = ($723<<16>>16)==(0);
         if ($724) {
          label = 241;
          break L24;
         }
         $727 = HEAP32[$9>>2]|0;
         $728 = HEAP32[$11>>2]|0;
         $729 = ($727|0)==($728|0);
         if ($729) {
          __THREW__ = 0;
          invoke_viii(806,($8|0),($9|0),($11|0));
          $730 = __THREW__; __THREW__ = 0;
          $731 = $730&1;
          if ($731) {
           label = 181;
           break L24;
          }
         }
         $732 = HEAP32[$0>>2]|0;
         $733 = ((($732)) + 12|0);
         $734 = HEAP32[$733>>2]|0;
         $735 = ((($732)) + 16|0);
         $736 = HEAP32[$735>>2]|0;
         $737 = ($734|0)==($736|0);
         if ($737) {
          $738 = HEAP32[$732>>2]|0;
          $739 = ((($738)) + 36|0);
          $740 = HEAP32[$739>>2]|0;
          __THREW__ = 0;
          $741 = (invoke_ii($740|0,($732|0))|0);
          $742 = __THREW__; __THREW__ = 0;
          $743 = $742&1;
          if ($743) {
           label = 181;
           break L24;
          } else {
           $$0$i$i223 = $741;
          }
         } else {
          $744 = HEAP8[$734>>0]|0;
          $745 = $744&255;
          $$0$i$i223 = $745;
         }
         $746 = $$0$i$i223&255;
         $747 = HEAP32[$9>>2]|0;
         $748 = ((($747)) + 1|0);
         HEAP32[$9>>2] = $748;
         HEAP8[$747>>0] = $746;
         $749 = HEAP32[$24>>2]|0;
         $750 = (($749) + -1)|0;
         HEAP32[$24>>2] = $750;
         $751 = HEAP32[$0>>2]|0;
         $752 = ((($751)) + 12|0);
         $753 = HEAP32[$752>>2]|0;
         $754 = ((($751)) + 16|0);
         $755 = HEAP32[$754>>2]|0;
         $756 = ($753|0)==($755|0);
         if ($756) {
          $757 = HEAP32[$751>>2]|0;
          $758 = ((($757)) + 40|0);
          $759 = HEAP32[$758>>2]|0;
          __THREW__ = 0;
          (invoke_ii($759|0,($751|0))|0);
          $760 = __THREW__; __THREW__ = 0;
          $761 = $760&1;
          if ($761) {
           label = 181;
           break L24;
          } else {
           $$pre$i3$i$i239 = $$pre$i3$i$i239468491;$689 = $873;
           continue;
          }
         } else {
          $762 = ((($753)) + 1|0);
          HEAP32[$752>>2] = $762;
          $$pre$i3$i$i239 = $$pre$i3$i$i239468491;$689 = $873;
          continue;
         }
        }
       }
      } while(0);
      $763 = HEAP32[$9>>2]|0;
      $764 = HEAP32[$8>>2]|0;
      $765 = ($763|0)==($764|0);
      if ($765) {
       label = 251;
       break L24;
      } else {
       $$1150 = $$0149;
      }
      break;
     }
     default: {
      $$1150 = $$0149;
     }
     }
    } while(0);
    L288: do {
     if ((label|0) == 50) {
      while(1) {
       label = 0;
       $138 = HEAP32[$0>>2]|0;
       $139 = ($138|0)==(0|0);
       do {
        if ($139) {
         $152 = 0;
        } else {
         $140 = ((($138)) + 12|0);
         $141 = HEAP32[$140>>2]|0;
         $142 = ((($138)) + 16|0);
         $143 = HEAP32[$142>>2]|0;
         $144 = ($141|0)==($143|0);
         if ($144) {
          $145 = HEAP32[$138>>2]|0;
          $146 = ((($145)) + 36|0);
          $147 = HEAP32[$146>>2]|0;
          __THREW__ = 0;
          $148 = (invoke_ii($147|0,($138|0))|0);
          $149 = __THREW__; __THREW__ = 0;
          $150 = $149&1;
          if ($150) {
           label = 34;
           break L24;
          }
          $151 = ($148|0)==(-1);
          if ($151) {
           HEAP32[$0>>2] = 0;
           $152 = 0;
           break;
          } else {
           $$pre$i$i$i200 = HEAP32[$0>>2]|0;
           $152 = $$pre$i$i$i200;
           break;
          }
         } else {
          $152 = $138;
         }
        }
       } while(0);
       $153 = ($152|0)==(0|0);
       $155 = ($154|0)==(0|0);
       do {
        if ($155) {
         $$pre$i3$i$i204486 = $$pre$i3$i$i204;
         label = 62;
        } else {
         $156 = ((($154)) + 12|0);
         $157 = HEAP32[$156>>2]|0;
         $158 = ((($154)) + 16|0);
         $159 = HEAP32[$158>>2]|0;
         $160 = ($157|0)==($159|0);
         if (!($160)) {
          if ($153) {
           $$pre$i3$i$i204488 = $$pre$i3$i$i204;$869 = $154;
           break;
          } else {
           $$1150 = $$0149;
           break L288;
          }
         }
         $161 = HEAP32[$154>>2]|0;
         $162 = ((($161)) + 36|0);
         $163 = HEAP32[$162>>2]|0;
         __THREW__ = 0;
         $164 = (invoke_ii($163|0,($154|0))|0);
         $165 = __THREW__; __THREW__ = 0;
         $166 = $165&1;
         if ($166) {
          label = 34;
          break L24;
         }
         $167 = ($164|0)==(-1);
         if ($167) {
          HEAP32[$1>>2] = 0;
          $$pre$i3$i$i204486 = 0;
          label = 62;
          break;
         } else {
          $168 = ($$pre$i3$i$i204|0)==(0|0);
          $tmp$i$i206 = $153 ^ $168;
          if ($tmp$i$i206) {
           $$pre$i3$i$i204488 = $$pre$i3$i$i204;$869 = $$pre$i3$i$i204;
           break;
          } else {
           $$1150 = $$0149;
           break L288;
          }
         }
        }
       } while(0);
       if ((label|0) == 62) {
        label = 0;
        if ($153) {
         $$1150 = $$0149;
         break L288;
        } else {
         $$pre$i3$i$i204488 = $$pre$i3$i$i204486;$869 = 0;
        }
       }
       $169 = HEAP32[$0>>2]|0;
       $170 = ((($169)) + 12|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ((($169)) + 16|0);
       $173 = HEAP32[$172>>2]|0;
       $174 = ($171|0)==($173|0);
       if ($174) {
        $175 = HEAP32[$169>>2]|0;
        $176 = ((($175)) + 36|0);
        $177 = HEAP32[$176>>2]|0;
        __THREW__ = 0;
        $178 = (invoke_ii($177|0,($169|0))|0);
        $179 = __THREW__; __THREW__ = 0;
        $180 = $179&1;
        if ($180) {
         label = 34;
         break L24;
        } else {
         $$0$i$i210 = $178;
        }
       } else {
        $181 = HEAP8[$171>>0]|0;
        $182 = $181&255;
        $$0$i$i210 = $182;
       }
       $183 = $$0$i$i210&255;
       $isascii3$i213 = ($183<<24>>24)>(-1);
       if (!($isascii3$i213)) {
        $$1150 = $$0149;
        break L288;
       }
       $sext412 = $$0$i$i210 << 24;
       $184 = $sext412 >> 24;
       $185 = HEAP32[$42>>2]|0;
       $186 = (($185) + ($184<<1)|0);
       $187 = HEAP16[$186>>1]|0;
       $188 = $187 & 8192;
       $189 = ($188<<16>>16)==(0);
       if ($189) {
        $$1150 = $$0149;
        break L288;
       }
       $190 = HEAP32[$0>>2]|0;
       $191 = ((($190)) + 12|0);
       $192 = HEAP32[$191>>2]|0;
       $193 = ((($190)) + 16|0);
       $194 = HEAP32[$193>>2]|0;
       $195 = ($192|0)==($194|0);
       if ($195) {
        $196 = HEAP32[$190>>2]|0;
        $197 = ((($196)) + 40|0);
        $198 = HEAP32[$197>>2]|0;
        __THREW__ = 0;
        $199 = (invoke_ii($198|0,($190|0))|0);
        $200 = __THREW__; __THREW__ = 0;
        $201 = $200&1;
        if ($201) {
         label = 34;
         break L24;
        } else {
         $$0$i$i217 = $199;
        }
       } else {
        $202 = ((($192)) + 1|0);
        HEAP32[$191>>2] = $202;
        $203 = HEAP8[$192>>0]|0;
        $204 = $203&255;
        $$0$i$i217 = $204;
       }
       $205 = $$0$i$i217&255;
       __THREW__ = 0;
       invoke_vii(665,($23|0),($205|0));
       $206 = __THREW__; __THREW__ = 0;
       $207 = $206&1;
       if ($207) {
        label = 34;
        break L24;
       } else {
        $$pre$i3$i$i204 = $$pre$i3$i$i204488;$154 = $869;
        label = 50;
       }
      }
     }
    } while(0);
    $768 = (($$0158) + 1)|0;
    $$0149 = $$1150;$$0158 = $768;
   }
   L322:    switch (label|0) {
    case 34: {
     $89 = ___cxa_find_matching_catch_2()|0;
     $90 = tempRet0;
     $lpad$phi$index = $89;$lpad$phi$index2 = $90;
     label = 36;
     break;
    }
    case 35: {
     $91 = ___cxa_find_matching_catch_2()|0;
     $92 = tempRet0;
     $lpad$phi$index = $91;$lpad$phi$index2 = $92;
     label = 36;
     break;
    }
    case 48: {
     $135 = HEAP32[$5>>2]|0;
     $136 = $135 | 4;
     HEAP32[$5>>2] = $136;
     $$10 = 0;
     label = 288;
     break;
    }
    case 116: {
     $365 = HEAP32[$5>>2]|0;
     $366 = $365 | 4;
     HEAP32[$5>>2] = $366;
     $$10 = 0;
     label = 288;
     break;
    }
    case 154: {
     $488 = ___cxa_find_matching_catch_2()|0;
     $489 = tempRet0;
     $$5142 = $488;$$5148 = $489;
     break L21;
     break;
    }
    case 155: {
     $490 = ___cxa_find_matching_catch_2()|0;
     $491 = tempRet0;
     $$5142 = $490;$$5148 = $491;
     break L21;
     break;
    }
    case 158: {
     $501 = HEAP32[$5>>2]|0;
     $502 = $501 | 4;
     HEAP32[$5>>2] = $502;
     $$10 = 0;
     label = 288;
     break;
    }
    case 181: {
     $560 = ___cxa_find_matching_catch_2()|0;
     $561 = tempRet0;
     $$sink$index = $560;$$sink$index9 = $561;
     label = 252;
     break;
    }
    case 182: {
     $562 = ___cxa_find_matching_catch_2()|0;
     $563 = tempRet0;
     $$sink$index = $562;$$sink$index9 = $563;
     label = 252;
     break;
    }
    case 183: {
     $564 = ___cxa_find_matching_catch_2()|0;
     $565 = tempRet0;
     $$sink$index = $564;$$sink$index9 = $565;
     label = 252;
     break;
    }
    case 184: {
     $566 = ___cxa_find_matching_catch_2()|0;
     $567 = tempRet0;
     $$sink$index = $566;$$sink$index9 = $567;
     label = 252;
     break;
    }
    case 217: {
     $657 = HEAP32[$5>>2]|0;
     $658 = $657 | 4;
     HEAP32[$5>>2] = $658;
     $$10 = 0;
     label = 288;
     break;
    }
    case 241: {
     $725 = HEAP32[$5>>2]|0;
     $726 = $725 | 4;
     HEAP32[$5>>2] = $726;
     $$10 = 0;
     label = 288;
     break;
    }
    case 251: {
     $766 = HEAP32[$5>>2]|0;
     $767 = $766 | 4;
     HEAP32[$5>>2] = $767;
     $$10 = 0;
     label = 288;
     break;
    }
    case 254: {
     $769 = ($$0149|0)==(0|0);
     L324: do {
      if (!($769)) {
       $770 = ((($$0149)) + 11|0);
       $771 = ((($$0149)) + 4|0);
       $$0 = 1;
       L326: while(1) {
        $772 = HEAP8[$770>>0]|0;
        $773 = ($772<<24>>24)<(0);
        if ($773) {
         $774 = HEAP32[$771>>2]|0;
         $777 = $774;
        } else {
         $775 = $772&255;
         $777 = $775;
        }
        $776 = ($$0>>>0)<($777>>>0);
        if (!($776)) {
         break L324;
        }
        $778 = HEAP32[$0>>2]|0;
        $779 = ($778|0)==(0|0);
        do {
         if ($779) {
          $792 = 0;
         } else {
          $780 = ((($778)) + 12|0);
          $781 = HEAP32[$780>>2]|0;
          $782 = ((($778)) + 16|0);
          $783 = HEAP32[$782>>2]|0;
          $784 = ($781|0)==($783|0);
          if ($784) {
           $785 = HEAP32[$778>>2]|0;
           $786 = ((($785)) + 36|0);
           $787 = HEAP32[$786>>2]|0;
           __THREW__ = 0;
           $788 = (invoke_ii($787|0,($778|0))|0);
           $789 = __THREW__; __THREW__ = 0;
           $790 = $789&1;
           if ($790) {
            label = 280;
            break L326;
           }
           $791 = ($788|0)==(-1);
           if ($791) {
            HEAP32[$0>>2] = 0;
            $792 = 0;
            break;
           } else {
            $$pre$i$i$i = HEAP32[$0>>2]|0;
            $792 = $$pre$i$i$i;
            break;
           }
          } else {
           $792 = $778;
          }
         }
        } while(0);
        $793 = ($792|0)==(0|0);
        $794 = HEAP32[$1>>2]|0;
        $795 = ($794|0)==(0|0);
        do {
         if ($795) {
          label = 272;
         } else {
          $796 = ((($794)) + 12|0);
          $797 = HEAP32[$796>>2]|0;
          $798 = ((($794)) + 16|0);
          $799 = HEAP32[$798>>2]|0;
          $800 = ($797|0)==($799|0);
          if ($800) {
           $801 = HEAP32[$794>>2]|0;
           $802 = ((($801)) + 36|0);
           $803 = HEAP32[$802>>2]|0;
           __THREW__ = 0;
           $804 = (invoke_ii($803|0,($794|0))|0);
           $805 = __THREW__; __THREW__ = 0;
           $806 = $805&1;
           if ($806) {
            label = 280;
            break L326;
           }
           $807 = ($804|0)==(-1);
           if ($807) {
            HEAP32[$1>>2] = 0;
            label = 272;
            break;
           }
          }
          if (!($793)) {
           label = 279;
           break L326;
          }
         }
        } while(0);
        if ((label|0) == 272) {
         label = 0;
         if ($793) {
          label = 279;
          break;
         }
        }
        $808 = HEAP32[$0>>2]|0;
        $809 = ((($808)) + 12|0);
        $810 = HEAP32[$809>>2]|0;
        $811 = ((($808)) + 16|0);
        $812 = HEAP32[$811>>2]|0;
        $813 = ($810|0)==($812|0);
        if ($813) {
         $814 = HEAP32[$808>>2]|0;
         $815 = ((($814)) + 36|0);
         $816 = HEAP32[$815>>2]|0;
         __THREW__ = 0;
         $817 = (invoke_ii($816|0,($808|0))|0);
         $818 = __THREW__; __THREW__ = 0;
         $819 = $818&1;
         if ($819) {
          label = 280;
          break;
         } else {
          $$0$i$i180 = $817;
         }
        } else {
         $820 = HEAP8[$810>>0]|0;
         $821 = $820&255;
         $$0$i$i180 = $821;
        }
        $822 = $$0$i$i180&255;
        $823 = HEAP8[$770>>0]|0;
        $824 = ($823<<24>>24)<(0);
        if ($824) {
         $825 = HEAP32[$$0149>>2]|0;
         $827 = $825;
        } else {
         $827 = $$0149;
        }
        $826 = (($827) + ($$0)|0);
        $828 = HEAP8[$826>>0]|0;
        $829 = ($822<<24>>24)==($828<<24>>24);
        if (!($829)) {
         label = 279;
         break;
        }
        $834 = (($$0) + 1)|0;
        $835 = HEAP32[$0>>2]|0;
        $836 = ((($835)) + 12|0);
        $837 = HEAP32[$836>>2]|0;
        $838 = ((($835)) + 16|0);
        $839 = HEAP32[$838>>2]|0;
        $840 = ($837|0)==($839|0);
        if ($840) {
         $841 = HEAP32[$835>>2]|0;
         $842 = ((($841)) + 40|0);
         $843 = HEAP32[$842>>2]|0;
         __THREW__ = 0;
         (invoke_ii($843|0,($835|0))|0);
         $844 = __THREW__; __THREW__ = 0;
         $845 = $844&1;
         if ($845) {
          label = 280;
          break;
         } else {
          $$0 = $834;
          continue;
         }
        } else {
         $846 = ((($837)) + 1|0);
         HEAP32[$836>>2] = $846;
         $$0 = $834;
         continue;
        }
       }
       if ((label|0) == 279) {
        $830 = HEAP32[$5>>2]|0;
        $831 = $830 | 4;
        HEAP32[$5>>2] = $831;
        $$10 = 0;
        label = 288;
        break L322;
       }
       else if ((label|0) == 280) {
        $832 = ___cxa_find_matching_catch_2()|0;
        $833 = tempRet0;
        $$5142 = $832;$$5148 = $833;
        break L21;
       }
      }
     } while(0);
     $847 = HEAP32[$13>>2]|0;
     $848 = HEAP32[$14>>2]|0;
     $849 = ($847|0)==($848|0);
     if ($849) {
      $$10 = 1;
      label = 288;
     } else {
      HEAP32[$25>>2] = 0;
      __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($19,$847,$848,$25);
      $850 = HEAP32[$25>>2]|0;
      $851 = ($850|0)==(0);
      if ($851) {
       $$10 = 1;
       label = 288;
       break;
      } else {
       $852 = HEAP32[$5>>2]|0;
       $853 = $852 | 4;
       HEAP32[$5>>2] = $853;
       $$10 = 0;
       label = 288;
       break;
      }
     }
     break;
    }
   }
   if ((label|0) == 36) {
    $$5142 = $lpad$phi$index;$$5148 = $lpad$phi$index2;
    break;
   }
   else if ((label|0) == 252) {
    $$5142 = $$sink$index;$$5148 = $$sink$index9;
    break;
   }
   else if ((label|0) == 288) {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($23);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($22);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($21);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($20);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($19);
    $854 = HEAP32[$13>>2]|0;
    HEAP32[$13>>2] = 0;
    $855 = ($854|0)==(0|0);
    if (!($855)) {
     $856 = HEAP32[$27>>2]|0;
     __THREW__ = 0;
     invoke_vi($856|0,($854|0));
     $857 = __THREW__; __THREW__ = 0;
     $858 = $857&1;
     if ($858) {
      $859 = ___cxa_find_matching_catch_3(0|0)|0;
      $860 = tempRet0;
      ___clang_call_terminate($859);
      // unreachable;
     }
    }
    STACKTOP = sp;return ($$10|0);
   }
  }
 } while(0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($23);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($22);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($21);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($20);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($19);
 $861 = HEAP32[$13>>2]|0;
 HEAP32[$13>>2] = 0;
 $862 = ($861|0)==(0|0);
 if (!($862)) {
  $863 = HEAP32[$27>>2]|0;
  __THREW__ = 0;
  invoke_vi($863|0,($861|0));
  $864 = __THREW__; __THREW__ = 0;
  $865 = $864&1;
  if ($865) {
   $866 = ___cxa_find_matching_catch_3(0|0)|0;
   $867 = tempRet0;
   ___clang_call_terminate($866);
   // unreachable;
  }
 }
 ___resumeException($$5142|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorIS9_EE5valueERS5_E4typeES9_S9_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$028 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep29 = 0;
 var $scevgep30 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1;
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $8 = ((($0)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($0)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11 & 2147483647;
  $phitmp$i = (($12) + -1)|0;
  $17 = $9;$18 = $phitmp$i;
 } else {
  $7 = $5&255;
  $17 = $7;$18 = 10;
 }
 $13 = $2;
 $14 = (($13) - ($3))|0;
 $15 = ($14|0)==(0);
 do {
  if (!($15)) {
   $16 = (($18) - ($17))|0;
   $19 = ($16>>>0)<($14>>>0);
   if ($19) {
    $20 = (($17) + ($14))|0;
    $21 = (($20) - ($18))|0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($0,$18,$21,$17,$17,0,0);
    $$pre = HEAP8[$4>>0]|0;
    $22 = $$pre;
   } else {
    $22 = $5;
   }
   $23 = ($22<<24>>24)<(0);
   if ($23) {
    $24 = HEAP32[$0>>2]|0;
    $26 = $24;
   } else {
    $26 = $0;
   }
   $25 = (($26) + ($17)|0);
   $27 = (($17) - ($3))|0;
   $scevgep = (($2) + ($27)|0);
   $scevgep29 = $scevgep;
   $$0 = $25;$$028 = $1;
   while(1) {
    $28 = ($$028|0)==($2|0);
    if ($28) {
     break;
    }
    $29 = HEAP8[$$028>>0]|0;
    HEAP8[$$0>>0] = $29;
    $30 = ((($$0)) + 1|0);
    $31 = ((($$028)) + 1|0);
    $$0 = $30;$$028 = $31;
   }
   $scevgep30 = (($26) + ($scevgep29)|0);
   HEAP8[$scevgep30>>0] = 0;
   $32 = (($17) + ($14))|0;
   $33 = HEAP8[$4>>0]|0;
   $34 = ($33<<24>>24)<(0);
   if ($34) {
    $35 = ((($0)) + 4|0);
    HEAP32[$35>>2] = $32;
    break;
   } else {
    $36 = $32&255;
    HEAP8[$4>>0] = $36;
    break;
   }
  }
 } while(0);
 return ($0|0);
}
function __ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$0$i$i$i = 0, $$0$i$i$i40 = 0, $$0$i$i$i45 = 0, $$0$i$i$i50 = 0, $$0$i$i$i55 = 0, $$0$i$i$i60 = 0, $$0$i$i$i65 = 0, $$0$i$i$i70 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i41 = 0, $exitcond$i$i$i46 = 0, $exitcond$i$i$i51 = 0, $exitcond$i$i$i56 = 0, $exitcond$i$i$i61 = 0, $exitcond$i$i$i66 = 0, $exitcond$i$i$i71 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $10 = sp + 100|0;
 $11 = sp + 88|0;
 $12 = sp + 76|0;
 $13 = sp + 64|0;
 $14 = sp + 52|0;
 $15 = sp + 48|0;
 $16 = sp + 36|0;
 $17 = sp + 24|0;
 $18 = sp + 12|0;
 $19 = sp;
 if ($0) {
  $20 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,42432)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($21)) + 44|0);
  $23 = HEAP32[$22>>2]|0;
  FUNCTION_TABLE_vii[$23 & 1023]($10,$20);
  $24 = HEAP32[$10>>2]|0;
  HEAP8[$2>>0]=$24&255;HEAP8[$2+1>>0]=($24>>8)&255;HEAP8[$2+2>>0]=($24>>16)&255;HEAP8[$2+3>>0]=$24>>24;
  $25 = HEAP32[$20>>2]|0;
  $26 = ((($25)) + 32|0);
  $27 = HEAP32[$26>>2]|0;
  FUNCTION_TABLE_vii[$27 & 1023]($11,$20);
  $28 = ((($8)) + 11|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = ($29<<24>>24)<(0);
  if ($30) {
   $31 = HEAP32[$8>>2]|0;
   HEAP8[$31>>0] = 0;
   $32 = ((($8)) + 4|0);
   HEAP32[$32>>2] = 0;
  } else {
   HEAP8[$8>>0] = 0;
   HEAP8[$28>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(808,($8|0),0);
  $33 = __THREW__; __THREW__ = 0;
  $34 = $33&1;
  if ($34) {
   $35 = ___cxa_find_matching_catch_3(0|0)|0;
   $36 = tempRet0;
   ___clang_call_terminate($35);
   // unreachable;
  }
  ;HEAP32[$8>>2]=HEAP32[$11>>2]|0;HEAP32[$8+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$11+8>>2]|0;
  $$0$i$i$i = 0;
  while(1) {
   $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
   if ($exitcond$i$i$i) {
    break;
   }
   $37 = (($11) + ($$0$i$i$i<<2)|0);
   HEAP32[$37>>2] = 0;
   $38 = (($$0$i$i$i) + 1)|0;
   $$0$i$i$i = $38;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  $39 = HEAP32[$20>>2]|0;
  $40 = ((($39)) + 28|0);
  $41 = HEAP32[$40>>2]|0;
  FUNCTION_TABLE_vii[$41 & 1023]($12,$20);
  $42 = ((($7)) + 11|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = ($43<<24>>24)<(0);
  if ($44) {
   $45 = HEAP32[$7>>2]|0;
   HEAP8[$45>>0] = 0;
   $46 = ((($7)) + 4|0);
   HEAP32[$46>>2] = 0;
  } else {
   HEAP8[$7>>0] = 0;
   HEAP8[$42>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(808,($7|0),0);
  $47 = __THREW__; __THREW__ = 0;
  $48 = $47&1;
  if ($48) {
   $49 = ___cxa_find_matching_catch_3(0|0)|0;
   $50 = tempRet0;
   ___clang_call_terminate($49);
   // unreachable;
  }
  ;HEAP32[$7>>2]=HEAP32[$12>>2]|0;HEAP32[$7+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$12+8>>2]|0;
  $$0$i$i$i40 = 0;
  while(1) {
   $exitcond$i$i$i41 = ($$0$i$i$i40|0)==(3);
   if ($exitcond$i$i$i41) {
    break;
   }
   $51 = (($12) + ($$0$i$i$i40<<2)|0);
   HEAP32[$51>>2] = 0;
   $52 = (($$0$i$i$i40) + 1)|0;
   $$0$i$i$i40 = $52;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($12);
  $53 = HEAP32[$20>>2]|0;
  $54 = ((($53)) + 12|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (FUNCTION_TABLE_ii[$55 & 1023]($20)|0);
  HEAP8[$3>>0] = $56;
  $57 = HEAP32[$20>>2]|0;
  $58 = ((($57)) + 16|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (FUNCTION_TABLE_ii[$59 & 1023]($20)|0);
  HEAP8[$4>>0] = $60;
  $61 = HEAP32[$20>>2]|0;
  $62 = ((($61)) + 20|0);
  $63 = HEAP32[$62>>2]|0;
  FUNCTION_TABLE_vii[$63 & 1023]($13,$20);
  $64 = ((($5)) + 11|0);
  $65 = HEAP8[$64>>0]|0;
  $66 = ($65<<24>>24)<(0);
  if ($66) {
   $67 = HEAP32[$5>>2]|0;
   HEAP8[$67>>0] = 0;
   $68 = ((($5)) + 4|0);
   HEAP32[$68>>2] = 0;
  } else {
   HEAP8[$5>>0] = 0;
   HEAP8[$64>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(808,($5|0),0);
  $69 = __THREW__; __THREW__ = 0;
  $70 = $69&1;
  if ($70) {
   $71 = ___cxa_find_matching_catch_3(0|0)|0;
   $72 = tempRet0;
   ___clang_call_terminate($71);
   // unreachable;
  }
  ;HEAP32[$5>>2]=HEAP32[$13>>2]|0;HEAP32[$5+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$13+8>>2]|0;
  $$0$i$i$i45 = 0;
  while(1) {
   $exitcond$i$i$i46 = ($$0$i$i$i45|0)==(3);
   if ($exitcond$i$i$i46) {
    break;
   }
   $73 = (($13) + ($$0$i$i$i45<<2)|0);
   HEAP32[$73>>2] = 0;
   $74 = (($$0$i$i$i45) + 1)|0;
   $$0$i$i$i45 = $74;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($13);
  $75 = HEAP32[$20>>2]|0;
  $76 = ((($75)) + 24|0);
  $77 = HEAP32[$76>>2]|0;
  FUNCTION_TABLE_vii[$77 & 1023]($14,$20);
  $78 = ((($6)) + 11|0);
  $79 = HEAP8[$78>>0]|0;
  $80 = ($79<<24>>24)<(0);
  if ($80) {
   $81 = HEAP32[$6>>2]|0;
   HEAP8[$81>>0] = 0;
   $82 = ((($6)) + 4|0);
   HEAP32[$82>>2] = 0;
  } else {
   HEAP8[$6>>0] = 0;
   HEAP8[$78>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(808,($6|0),0);
  $83 = __THREW__; __THREW__ = 0;
  $84 = $83&1;
  if ($84) {
   $85 = ___cxa_find_matching_catch_3(0|0)|0;
   $86 = tempRet0;
   ___clang_call_terminate($85);
   // unreachable;
  }
  ;HEAP32[$6>>2]=HEAP32[$14>>2]|0;HEAP32[$6+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$14+8>>2]|0;
  $$0$i$i$i50 = 0;
  while(1) {
   $exitcond$i$i$i51 = ($$0$i$i$i50|0)==(3);
   if ($exitcond$i$i$i51) {
    break;
   }
   $87 = (($14) + ($$0$i$i$i50<<2)|0);
   HEAP32[$87>>2] = 0;
   $88 = (($$0$i$i$i50) + 1)|0;
   $$0$i$i$i50 = $88;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($14);
  $89 = HEAP32[$20>>2]|0;
  $90 = ((($89)) + 36|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (FUNCTION_TABLE_ii[$91 & 1023]($20)|0);
  $storemerge = $92;
 } else {
  $93 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,42424)|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = ((($94)) + 44|0);
  $96 = HEAP32[$95>>2]|0;
  FUNCTION_TABLE_vii[$96 & 1023]($15,$93);
  $97 = HEAP32[$15>>2]|0;
  HEAP8[$2>>0]=$97&255;HEAP8[$2+1>>0]=($97>>8)&255;HEAP8[$2+2>>0]=($97>>16)&255;HEAP8[$2+3>>0]=$97>>24;
  $98 = HEAP32[$93>>2]|0;
  $99 = ((($98)) + 32|0);
  $100 = HEAP32[$99>>2]|0;
  FUNCTION_TABLE_vii[$100 & 1023]($16,$93);
  $101 = ((($8)) + 11|0);
  $102 = HEAP8[$101>>0]|0;
  $103 = ($102<<24>>24)<(0);
  if ($103) {
   $104 = HEAP32[$8>>2]|0;
   HEAP8[$104>>0] = 0;
   $105 = ((($8)) + 4|0);
   HEAP32[$105>>2] = 0;
  } else {
   HEAP8[$8>>0] = 0;
   HEAP8[$101>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(808,($8|0),0);
  $106 = __THREW__; __THREW__ = 0;
  $107 = $106&1;
  if ($107) {
   $108 = ___cxa_find_matching_catch_3(0|0)|0;
   $109 = tempRet0;
   ___clang_call_terminate($108);
   // unreachable;
  }
  ;HEAP32[$8>>2]=HEAP32[$16>>2]|0;HEAP32[$8+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$16+8>>2]|0;
  $$0$i$i$i55 = 0;
  while(1) {
   $exitcond$i$i$i56 = ($$0$i$i$i55|0)==(3);
   if ($exitcond$i$i$i56) {
    break;
   }
   $110 = (($16) + ($$0$i$i$i55<<2)|0);
   HEAP32[$110>>2] = 0;
   $111 = (($$0$i$i$i55) + 1)|0;
   $$0$i$i$i55 = $111;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($16);
  $112 = HEAP32[$93>>2]|0;
  $113 = ((($112)) + 28|0);
  $114 = HEAP32[$113>>2]|0;
  FUNCTION_TABLE_vii[$114 & 1023]($17,$93);
  $115 = ((($7)) + 11|0);
  $116 = HEAP8[$115>>0]|0;
  $117 = ($116<<24>>24)<(0);
  if ($117) {
   $118 = HEAP32[$7>>2]|0;
   HEAP8[$118>>0] = 0;
   $119 = ((($7)) + 4|0);
   HEAP32[$119>>2] = 0;
  } else {
   HEAP8[$7>>0] = 0;
   HEAP8[$115>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(808,($7|0),0);
  $120 = __THREW__; __THREW__ = 0;
  $121 = $120&1;
  if ($121) {
   $122 = ___cxa_find_matching_catch_3(0|0)|0;
   $123 = tempRet0;
   ___clang_call_terminate($122);
   // unreachable;
  }
  ;HEAP32[$7>>2]=HEAP32[$17>>2]|0;HEAP32[$7+4>>2]=HEAP32[$17+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$17+8>>2]|0;
  $$0$i$i$i60 = 0;
  while(1) {
   $exitcond$i$i$i61 = ($$0$i$i$i60|0)==(3);
   if ($exitcond$i$i$i61) {
    break;
   }
   $124 = (($17) + ($$0$i$i$i60<<2)|0);
   HEAP32[$124>>2] = 0;
   $125 = (($$0$i$i$i60) + 1)|0;
   $$0$i$i$i60 = $125;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($17);
  $126 = HEAP32[$93>>2]|0;
  $127 = ((($126)) + 12|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = (FUNCTION_TABLE_ii[$128 & 1023]($93)|0);
  HEAP8[$3>>0] = $129;
  $130 = HEAP32[$93>>2]|0;
  $131 = ((($130)) + 16|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = (FUNCTION_TABLE_ii[$132 & 1023]($93)|0);
  HEAP8[$4>>0] = $133;
  $134 = HEAP32[$93>>2]|0;
  $135 = ((($134)) + 20|0);
  $136 = HEAP32[$135>>2]|0;
  FUNCTION_TABLE_vii[$136 & 1023]($18,$93);
  $137 = ((($5)) + 11|0);
  $138 = HEAP8[$137>>0]|0;
  $139 = ($138<<24>>24)<(0);
  if ($139) {
   $140 = HEAP32[$5>>2]|0;
   HEAP8[$140>>0] = 0;
   $141 = ((($5)) + 4|0);
   HEAP32[$141>>2] = 0;
  } else {
   HEAP8[$5>>0] = 0;
   HEAP8[$137>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(808,($5|0),0);
  $142 = __THREW__; __THREW__ = 0;
  $143 = $142&1;
  if ($143) {
   $144 = ___cxa_find_matching_catch_3(0|0)|0;
   $145 = tempRet0;
   ___clang_call_terminate($144);
   // unreachable;
  }
  ;HEAP32[$5>>2]=HEAP32[$18>>2]|0;HEAP32[$5+4>>2]=HEAP32[$18+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$18+8>>2]|0;
  $$0$i$i$i65 = 0;
  while(1) {
   $exitcond$i$i$i66 = ($$0$i$i$i65|0)==(3);
   if ($exitcond$i$i$i66) {
    break;
   }
   $146 = (($18) + ($$0$i$i$i65<<2)|0);
   HEAP32[$146>>2] = 0;
   $147 = (($$0$i$i$i65) + 1)|0;
   $$0$i$i$i65 = $147;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($18);
  $148 = HEAP32[$93>>2]|0;
  $149 = ((($148)) + 24|0);
  $150 = HEAP32[$149>>2]|0;
  FUNCTION_TABLE_vii[$150 & 1023]($19,$93);
  $151 = ((($6)) + 11|0);
  $152 = HEAP8[$151>>0]|0;
  $153 = ($152<<24>>24)<(0);
  if ($153) {
   $154 = HEAP32[$6>>2]|0;
   HEAP8[$154>>0] = 0;
   $155 = ((($6)) + 4|0);
   HEAP32[$155>>2] = 0;
  } else {
   HEAP8[$6>>0] = 0;
   HEAP8[$151>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(808,($6|0),0);
  $156 = __THREW__; __THREW__ = 0;
  $157 = $156&1;
  if ($157) {
   $158 = ___cxa_find_matching_catch_3(0|0)|0;
   $159 = tempRet0;
   ___clang_call_terminate($158);
   // unreachable;
  }
  ;HEAP32[$6>>2]=HEAP32[$19>>2]|0;HEAP32[$6+4>>2]=HEAP32[$19+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$19+8>>2]|0;
  $$0$i$i$i70 = 0;
  while(1) {
   $exitcond$i$i$i71 = ($$0$i$i$i70|0)==(3);
   if ($exitcond$i$i$i71) {
    break;
   }
   $160 = (($19) + ($$0$i$i$i70<<2)|0);
   HEAP32[$160>>2] = 0;
   $161 = (($$0$i$i$i70) + 1)|0;
   $$0$i$i$i70 = $161;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($19);
  $162 = HEAP32[$93>>2]|0;
  $163 = ((($162)) + 36|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = (FUNCTION_TABLE_ii[$164 & 1023]($93)|0);
  $storemerge = $165;
 }
 HEAP32[$9>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$34 = 0, $$pr = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(801|0);
 $6 = HEAP32[$2>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($6) - ($7))|0;
 $9 = ($8>>>0)<(2147483647);
 $10 = $8 << 1;
 $$34 = $9 ? $10 : -1;
 $11 = ($$34|0)==(0);
 $$ = $11 ? 1 : $$34;
 $12 = HEAP32[$1>>2]|0;
 $13 = $7;
 $14 = (($12) - ($7))|0;
 $15 = $5 ? $13 : 0;
 $16 = (_realloc($15,$$)|0);
 $17 = ($16|0)==(0|0);
 if ($17) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($5) {
   $18 = $16;
   HEAP32[$0>>2] = $18;
   $27 = $16;
  } else {
   $$pr = HEAP32[$0>>2]|0;
   $19 = $16;
   HEAP32[$0>>2] = $19;
   $20 = ($$pr|0)==(0|0);
   if ($20) {
    $27 = $16;
   } else {
    $21 = HEAP32[$3>>2]|0;
    __THREW__ = 0;
    invoke_vi($21|0,($$pr|0));
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     $24 = ___cxa_find_matching_catch_3(0|0)|0;
     $25 = tempRet0;
     ___clang_call_terminate($24);
     // unreachable;
    } else {
     $$pre = HEAP32[$0>>2]|0;
     $27 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$3>>2] = (809);
 $26 = (($27) + ($14)|0);
 HEAP32[$1>>2] = $26;
 $28 = HEAP32[$0>>2]|0;
 $29 = (($28) + ($$)|0);
 HEAP32[$2>>2] = $29;
 return;
}
function __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$34 = 0, $$pr = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(801|0);
 $6 = HEAP32[$2>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($6) - ($7))|0;
 $9 = ($8>>>0)<(2147483647);
 $10 = $8 << 1;
 $$34 = $9 ? $10 : -1;
 $11 = ($$34|0)==(0);
 $$ = $11 ? 4 : $$34;
 $12 = HEAP32[$1>>2]|0;
 $13 = (($12) - ($7))|0;
 $14 = $13 >> 2;
 $phitmp = $7;
 $15 = $5 ? $phitmp : 0;
 $16 = (_realloc($15,$$)|0);
 $17 = ($16|0)==(0|0);
 if ($17) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($5) {
   $18 = $16;
   HEAP32[$0>>2] = $18;
   $28 = $16;
  } else {
   $$pr = HEAP32[$0>>2]|0;
   $19 = $16;
   HEAP32[$0>>2] = $19;
   $20 = ($$pr|0)==(0|0);
   if ($20) {
    $28 = $16;
   } else {
    $21 = HEAP32[$3>>2]|0;
    __THREW__ = 0;
    invoke_vi($21|0,($$pr|0));
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     $24 = ___cxa_find_matching_catch_3(0|0)|0;
     $25 = tempRet0;
     ___clang_call_terminate($24);
     // unreachable;
    } else {
     $$pre = HEAP32[$0>>2]|0;
     $28 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$3>>2] = (809);
 $26 = $$ >>> 2;
 $27 = (($28) + ($14<<2)|0);
 HEAP32[$1>>2] = $27;
 $29 = HEAP32[$0>>2]|0;
 $30 = (($29) + ($26<<2)|0);
 HEAP32[$2>>2] = $30;
 return;
}
function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i$i$i = 0, $$0$i$i2$i$i = 0, $$0$lcssa$i = 0, $$031 = 0, $$032 = 0, $$035 = 0, $$1 = 0, $$133 = 0, $$136 = 0, $$2 = 0, $$234 = 0, $$237 = 0, $$33858 = 0, $$33859 = 0, $$360 = 0, $$361 = 0, $$byval_copy = 0, $$pre = 0;
 var $$pre$i$i$i = 0, $$pre62 = 0, $$sroa$0$0$copyload = 0, $$sroa$043$0 = 0, $$sroa$043$1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp$i$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(592|0);
 $$byval_copy = sp + 472|0;
 $vararg_buffer = sp;
 $7 = sp + 72|0;
 $8 = sp + 64|0;
 $9 = sp + 56|0;
 $10 = sp + 52|0;
 $11 = sp + 576|0;
 $12 = sp + 48|0;
 $13 = sp + 8|0;
 $14 = sp + 476|0;
 $15 = $7;
 HEAP32[$8>>2] = $15;
 $16 = ((($8)) + 4|0);
 HEAP32[$16>>2] = (801);
 $17 = ((($7)) + 400|0);
 __THREW__ = 0;
 $18 = (invoke_ii(658,($4|0))|0);
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $46 = ___cxa_find_matching_catch_2()|0;
  $47 = tempRet0;
  HEAP32[$8>>2] = 0;
  $$33858 = $47;$$360 = $46;$126 = 801;$127 = $7;
  label = 54;
 } else {
  HEAP32[$10>>2] = $18;
  __THREW__ = 0;
  $21 = (invoke_iii(659,($10|0),(40744|0))|0);
  $22 = __THREW__; __THREW__ = 0;
  $23 = $22&1;
  if ($23) {
   $48 = ___cxa_find_matching_catch_2()|0;
   $49 = tempRet0;
   $$234 = $48;$$237 = $49;
  } else {
   HEAP8[$11>>0] = 0;
   $24 = HEAP32[$2>>2]|0;
   HEAP32[$12>>2] = $24;
   $25 = ((($4)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
   $27 = (invoke_iiiiiiiiiiii(810,($1|0),($$byval_copy|0),($3|0),($10|0),($26|0),($5|0),($11|0),($21|0),($8|0),($9|0),($17|0))|0);
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   L7: do {
    if ($29) {
     label = 11;
    } else {
     L9: do {
      if ($27) {
       $30 = HEAP32[$21>>2]|0;
       $31 = ((($30)) + 48|0);
       $32 = HEAP32[$31>>2]|0;
       __THREW__ = 0;
       (invoke_iiiii($32|0,($21|0),(34077|0),((34087)|0),($13|0))|0);
       $33 = __THREW__; __THREW__ = 0;
       $34 = $33&1;
       if ($34) {
        $52 = ___cxa_find_matching_catch_2()|0;
        $53 = tempRet0;
        $$032 = $52;$$035 = $53;
       } else {
        $35 = HEAP32[$9>>2]|0;
        $36 = HEAP32[$8>>2]|0;
        $37 = (($35) - ($36))|0;
        $38 = ($37|0)>(392);
        if ($38) {
         $39 = $37 >> 2;
         $40 = (($39) + 2)|0;
         $41 = (_malloc($40)|0);
         $42 = $41;
         $43 = ($41|0)==(0|0);
         if ($43) {
          __THREW__ = 0;
          invoke_v(777);
          $44 = __THREW__; __THREW__ = 0;
          $45 = $44&1;
          if ($45) {
           $$sroa$043$0 = $42;
          } else {
           $$031 = 0;$$sroa$043$1 = $42;
           label = 16;
          }
         } else {
          $$031 = $41;$$sroa$043$1 = $42;
          label = 16;
         }
        } else {
         $$031 = $14;$$sroa$043$1 = 0;
         label = 16;
        }
        do {
         if ((label|0) == 16) {
          $58 = HEAP8[$11>>0]|0;
          $59 = ($58<<24>>24)==(0);
          if ($59) {
           $$1 = $$031;
          } else {
           $60 = ((($$031)) + 1|0);
           HEAP8[$$031>>0] = 45;
           $$1 = $60;
          }
          $61 = HEAP32[$8>>2]|0;
          $62 = ((($13)) + 40|0);
          $63 = $13;
          $$0 = $61;$$2 = $$1;
          while(1) {
           $64 = HEAP32[$9>>2]|0;
           $65 = ($$0>>>0)<($64>>>0);
           if (!($65)) {
            break;
           }
           $68 = HEAP32[$$0>>2]|0;
           $$0$i = $13;
           while(1) {
            $69 = ($$0$i|0)==($62|0);
            if ($69) {
             $$0$lcssa$i = $62;
             break;
            }
            $70 = HEAP32[$$0$i>>2]|0;
            $71 = ($70|0)==($68|0);
            if ($71) {
             $$0$lcssa$i = $$0$i;
             break;
            }
            $72 = ((($$0$i)) + 4|0);
            $$0$i = $72;
           }
           $73 = $$0$lcssa$i;
           $74 = (($73) - ($63))|0;
           $75 = $74 >> 2;
           $76 = (34077 + ($75)|0);
           $77 = HEAP8[$76>>0]|0;
           HEAP8[$$2>>0] = $77;
           $78 = ((($$0)) + 4|0);
           $79 = ((($$2)) + 1|0);
           $$0 = $78;$$2 = $79;
          }
          HEAP8[$$2>>0] = 0;
          HEAP32[$vararg_buffer>>2] = $6;
          $66 = (_sscanf($14,33962,$vararg_buffer)|0);
          $67 = ($66|0)==(1);
          if (!($67)) {
           __THREW__ = 0;
           invoke_vi(803,(33966|0));
           $80 = __THREW__; __THREW__ = 0;
           $81 = $80&1;
           if ($81) {
            $$sroa$043$0 = $$sroa$043$1;
            break;
           }
          }
          $82 = ($$sroa$043$1|0)==(0);
          if (!($82)) {
           $83 = $$sroa$043$1;
           _free($83);
          }
          break L9;
         }
        } while(0);
        $54 = ___cxa_find_matching_catch_2()|0;
        $55 = tempRet0;
        $56 = ($$sroa$043$0|0)==(0);
        if (!($56)) {
         $57 = $$sroa$043$0;
         _free($57);
        }
        $$032 = $54;$$035 = $55;
       }
       $$133 = $$032;$$136 = $$035;
       break L7;
      }
     } while(0);
     $84 = HEAP32[$1>>2]|0;
     $85 = ($84|0)==(0|0);
     do {
      if ($85) {
       $132 = 1;
      } else {
       $86 = ((($84)) + 12|0);
       $87 = HEAP32[$86>>2]|0;
       $88 = ((($84)) + 16|0);
       $89 = HEAP32[$88>>2]|0;
       $90 = ($87|0)==($89|0);
       if ($90) {
        $91 = HEAP32[$84>>2]|0;
        $92 = ((($91)) + 36|0);
        $93 = HEAP32[$92>>2]|0;
        __THREW__ = 0;
        $94 = (invoke_ii($93|0,($84|0))|0);
        $95 = __THREW__; __THREW__ = 0;
        $96 = $95&1;
        if ($96) {
         label = 11;
         break L7;
        } else {
         $$0$i$i$i$i = $94;
        }
       } else {
        $97 = HEAP32[$87>>2]|0;
        $$0$i$i$i$i = $97;
       }
       $98 = ($$0$i$i$i$i|0)==(-1);
       if ($98) {
        HEAP32[$1>>2] = 0;
        $132 = 1;
        break;
       } else {
        $$pre$i$i$i = HEAP32[$1>>2]|0;
        $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
        $132 = $phitmp$i$i$i;
        break;
       }
      }
     } while(0);
     $99 = HEAP32[$2>>2]|0;
     $100 = ($99|0)==(0|0);
     do {
      if ($100) {
       label = 44;
      } else {
       $101 = ((($99)) + 12|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = ((($99)) + 16|0);
       $104 = HEAP32[$103>>2]|0;
       $105 = ($102|0)==($104|0);
       if ($105) {
        $106 = HEAP32[$99>>2]|0;
        $107 = ((($106)) + 36|0);
        $108 = HEAP32[$107>>2]|0;
        __THREW__ = 0;
        $109 = (invoke_ii($108|0,($99|0))|0);
        $110 = __THREW__; __THREW__ = 0;
        $111 = $110&1;
        if ($111) {
         label = 11;
         break L7;
        } else {
         $$0$i$i2$i$i = $109;
        }
       } else {
        $112 = HEAP32[$102>>2]|0;
        $$0$i$i2$i$i = $112;
       }
       $113 = ($$0$i$i2$i$i|0)==(-1);
       if ($113) {
        HEAP32[$2>>2] = 0;
        label = 44;
        break;
       } else {
        if ($132) {
         break;
        } else {
         label = 46;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 44) {
      if ($132) {
       label = 46;
      }
     }
     if ((label|0) == 46) {
      $114 = HEAP32[$5>>2]|0;
      $115 = $114 | 2;
      HEAP32[$5>>2] = $115;
     }
     $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
     $116 = HEAP32[$10>>2]|0;
     (__ZNSt3__214__shared_count16__release_sharedEv($116)|0);
     $117 = HEAP32[$8>>2]|0;
     HEAP32[$8>>2] = 0;
     $118 = ($117|0)==(0|0);
     if (!($118)) {
      $119 = HEAP32[$16>>2]|0;
      __THREW__ = 0;
      invoke_vi($119|0,($117|0));
      $120 = __THREW__; __THREW__ = 0;
      $121 = $120&1;
      if ($121) {
       $122 = ___cxa_find_matching_catch_3(0|0)|0;
       $123 = tempRet0;
       ___clang_call_terminate($122);
       // unreachable;
      }
     }
     STACKTOP = sp;return ($$sroa$0$0$copyload|0);
    }
   } while(0);
   if ((label|0) == 11) {
    $50 = ___cxa_find_matching_catch_2()|0;
    $51 = tempRet0;
    $$133 = $50;$$136 = $51;
   }
   $$234 = $$133;$$237 = $$136;
  }
  $124 = HEAP32[$10>>2]|0;
  (__ZNSt3__214__shared_count16__release_sharedEv($124)|0);
  $$pre = HEAP32[$8>>2]|0;
  HEAP32[$8>>2] = 0;
  $125 = ($$pre|0)==(0|0);
  if ($125) {
   $$33859 = $$237;$$361 = $$234;
  } else {
   $$pre62 = HEAP32[$16>>2]|0;
   $$33858 = $$237;$$360 = $$234;$126 = $$pre62;$127 = $$pre;
   label = 54;
  }
 }
 if ((label|0) == 54) {
  __THREW__ = 0;
  invoke_vi($126|0,($127|0));
  $128 = __THREW__; __THREW__ = 0;
  $129 = $128&1;
  if ($129) {
   $130 = ___cxa_find_matching_catch_3(0|0)|0;
   $131 = tempRet0;
   ___clang_call_terminate($130);
   // unreachable;
  } else {
   $$33859 = $$33858;$$361 = $$360;
  }
 }
 ___resumeException($$361|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0$i$i$i$i = 0, $$0$i$i2$i$i = 0, $$1 = 0, $$135 = 0, $$23645 = 0, $$23646 = 0, $$247 = 0, $$248 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $$sink$index = 0, $$sink$index2 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(432|0);
 $$byval_copy = sp + 424|0;
 $7 = sp + 24|0;
 $8 = sp + 16|0;
 $9 = sp + 8|0;
 $10 = sp + 4|0;
 $11 = sp + 428|0;
 $12 = sp;
 $13 = $7;
 HEAP32[$8>>2] = $13;
 $14 = ((($8)) + 4|0);
 HEAP32[$14>>2] = (801);
 $15 = ((($7)) + 400|0);
 __THREW__ = 0;
 $16 = (invoke_ii(658,($4|0))|0);
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if ($18) {
  $45 = ___cxa_find_matching_catch_2()|0;
  $46 = tempRet0;
  HEAP32[$8>>2] = 0;
  $$23645 = $46;$$247 = $45;$111 = $7;
  label = 43;
 } else {
  HEAP32[$10>>2] = $16;
  __THREW__ = 0;
  $19 = (invoke_iii(659,($10|0),(40744|0))|0);
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if ($21) {
   $47 = ___cxa_find_matching_catch_2()|0;
   $48 = tempRet0;
   $$1 = $47;$$135 = $48;
  } else {
   HEAP8[$11>>0] = 0;
   $22 = HEAP32[$2>>2]|0;
   HEAP32[$12>>2] = $22;
   $23 = ((($4)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $22;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
   $26 = (invoke_iiiiiiiiiiii(810,($1|0),($$byval_copy|0),($3|0),($10|0),($24|0),($5|0),($11|0),($19|0),($8|0),($9|0),($15|0))|0);
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   L7: do {
    if ($28) {
     label = 13;
    } else {
     if ($26) {
      $29 = ((($6)) + 8|0);
      $30 = ((($29)) + 3|0);
      $31 = HEAP8[$30>>0]|0;
      $32 = ($31<<24>>24)<(0);
      if ($32) {
       $33 = HEAP32[$6>>2]|0;
       HEAP32[$33>>2] = 0;
       $34 = ((($6)) + 4|0);
       HEAP32[$34>>2] = 0;
      } else {
       HEAP32[$6>>2] = 0;
       HEAP8[$30>>0] = 0;
      }
      $35 = HEAP8[$11>>0]|0;
      $36 = ($35<<24>>24)==(0);
      if (!($36)) {
       $37 = HEAP32[$19>>2]|0;
       $38 = ((($37)) + 44|0);
       $39 = HEAP32[$38>>2]|0;
       __THREW__ = 0;
       $40 = (invoke_iii($39|0,($19|0),45)|0);
       $41 = __THREW__; __THREW__ = 0;
       $42 = $41&1;
       if ($42) {
        label = 13;
        break;
       }
       __THREW__ = 0;
       invoke_vii(811,($6|0),($40|0));
       $43 = __THREW__; __THREW__ = 0;
       $44 = $43&1;
       if ($44) {
        label = 13;
        break;
       }
      }
      $51 = HEAP32[$19>>2]|0;
      $52 = ((($51)) + 44|0);
      $53 = HEAP32[$52>>2]|0;
      __THREW__ = 0;
      $54 = (invoke_iii($53|0,($19|0),48)|0);
      $55 = __THREW__; __THREW__ = 0;
      $56 = $55&1;
      if ($56) {
       label = 13;
       break;
      }
      $57 = HEAP32[$8>>2]|0;
      $58 = HEAP32[$9>>2]|0;
      $59 = ((($58)) + -4|0);
      $$0 = $57;
      while(1) {
       $60 = ($$0>>>0)<($59>>>0);
       if (!($60)) {
        break;
       }
       $61 = HEAP32[$$0>>2]|0;
       $62 = ($61|0)==($54|0);
       if (!($62)) {
        break;
       }
       $63 = ((($$0)) + 4|0);
       $$0 = $63;
      }
      __THREW__ = 0;
      (invoke_iiii(812,($6|0),($$0|0),($58|0))|0);
      $64 = __THREW__; __THREW__ = 0;
      $65 = $64&1;
      if ($65) {
       $66 = ___cxa_find_matching_catch_2()|0;
       $67 = tempRet0;
       $$sink$index = $66;$$sink$index2 = $67;
       break;
      }
     }
     $68 = HEAP32[$1>>2]|0;
     $69 = ($68|0)==(0|0);
     do {
      if ($69) {
       $116 = 1;
      } else {
       $70 = ((($68)) + 12|0);
       $71 = HEAP32[$70>>2]|0;
       $72 = ((($68)) + 16|0);
       $73 = HEAP32[$72>>2]|0;
       $74 = ($71|0)==($73|0);
       if ($74) {
        $75 = HEAP32[$68>>2]|0;
        $76 = ((($75)) + 36|0);
        $77 = HEAP32[$76>>2]|0;
        __THREW__ = 0;
        $78 = (invoke_ii($77|0,($68|0))|0);
        $79 = __THREW__; __THREW__ = 0;
        $80 = $79&1;
        if ($80) {
         label = 13;
         break L7;
        } else {
         $$0$i$i$i$i = $78;
        }
       } else {
        $81 = HEAP32[$71>>2]|0;
        $$0$i$i$i$i = $81;
       }
       $82 = ($$0$i$i$i$i|0)==(-1);
       if ($82) {
        HEAP32[$1>>2] = 0;
        $116 = 1;
        break;
       } else {
        $$pre$i$i$i = HEAP32[$1>>2]|0;
        $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
        $116 = $phitmp$i$i$i;
        break;
       }
      }
     } while(0);
     $83 = ($22|0)==(0);
     do {
      if ($83) {
       label = 34;
      } else {
       $84 = ((($25)) + 12|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = ((($25)) + 16|0);
       $87 = HEAP32[$86>>2]|0;
       $88 = ($85|0)==($87|0);
       if ($88) {
        $89 = $22;
        $90 = HEAP32[$89>>2]|0;
        $91 = ((($90)) + 36|0);
        $92 = HEAP32[$91>>2]|0;
        __THREW__ = 0;
        $93 = (invoke_ii($92|0,($25|0))|0);
        $94 = __THREW__; __THREW__ = 0;
        $95 = $94&1;
        if ($95) {
         label = 13;
         break L7;
        } else {
         $$0$i$i2$i$i = $93;
        }
       } else {
        $96 = HEAP32[$85>>2]|0;
        $$0$i$i2$i$i = $96;
       }
       $97 = ($$0$i$i2$i$i|0)==(-1);
       if ($97) {
        HEAP32[$2>>2] = 0;
        label = 34;
        break;
       } else {
        if ($116) {
         break;
        } else {
         label = 36;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 34) {
      if ($116) {
       label = 36;
      }
     }
     if ((label|0) == 36) {
      $98 = HEAP32[$5>>2]|0;
      $99 = $98 | 2;
      HEAP32[$5>>2] = $99;
     }
     $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
     $100 = HEAP32[$10>>2]|0;
     (__ZNSt3__214__shared_count16__release_sharedEv($100)|0);
     $101 = HEAP32[$8>>2]|0;
     HEAP32[$8>>2] = 0;
     $102 = ($101|0)==(0|0);
     if (!($102)) {
      $103 = HEAP32[$14>>2]|0;
      __THREW__ = 0;
      invoke_vi($103|0,($101|0));
      $104 = __THREW__; __THREW__ = 0;
      $105 = $104&1;
      if ($105) {
       $106 = ___cxa_find_matching_catch_3(0|0)|0;
       $107 = tempRet0;
       ___clang_call_terminate($106);
       // unreachable;
      }
     }
     STACKTOP = sp;return ($$sroa$0$0$copyload|0);
    }
   } while(0);
   if ((label|0) == 13) {
    $49 = ___cxa_find_matching_catch_2()|0;
    $50 = tempRet0;
    $$sink$index = $49;$$sink$index2 = $50;
   }
   $$1 = $$sink$index;$$135 = $$sink$index2;
  }
  $108 = HEAP32[$10>>2]|0;
  (__ZNSt3__214__shared_count16__release_sharedEv($108)|0);
  $$pre = HEAP32[$8>>2]|0;
  HEAP32[$8>>2] = 0;
  $109 = ($$pre|0)==(0|0);
  if ($109) {
   $$23646 = $$135;$$248 = $$1;
  } else {
   $$23645 = $$135;$$247 = $$1;$111 = $$pre;
   label = 43;
  }
 }
 if ((label|0) == 43) {
  $110 = HEAP32[$14>>2]|0;
  __THREW__ = 0;
  invoke_vi($110|0,($111|0));
  $112 = __THREW__; __THREW__ = 0;
  $113 = $112&1;
  if ($113) {
   $114 = ___cxa_find_matching_catch_3(0|0)|0;
   $115 = tempRet0;
   ___clang_call_terminate($114);
   // unreachable;
  } else {
   $$23646 = $$23645;$$248 = $$247;
  }
 }
 ___resumeException($$248|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$$0152 = 0, $$$0152162 = 0, $$$0152163 = 0, $$$0152164 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i186 = 0, $$0$i$i$i$i206 = 0, $$0$i$i$i$i252 = 0, $$0$i$i$i$i286 = 0, $$0$i$i$i$i317 = 0, $$0$i$i$i$i341 = 0, $$0$i$i171 = 0, $$0$i$i173 = 0, $$0$i$i176 = 0, $$0$i$i179 = 0, $$0$i$i182 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i192 = 0;
 var $$0$i$i2$i$i212 = 0, $$0$i$i2$i$i258 = 0, $$0$i$i2$i$i292 = 0, $$0$i$i2$i$i323 = 0, $$0$i$i2$i$i347 = 0, $$0$i$i200 = 0, $$0$i$i204 = 0, $$0$i$i221 = 0, $$0$i$i228 = 0, $$0$i$i236 = 0, $$0$i$i243 = 0, $$0$i$i246 = 0, $$0$i$i267 = 0, $$0$i$i276 = 0, $$0$i$i280 = 0, $$0$i$i301 = 0, $$0$i$i312 = 0, $$0$i$i337 = 0, $$0135 = 0, $$0152 = 0;
 var $$0161 = 0, $$10 = 0, $$1153 = 0, $$2137$ph = 0, $$5145 = 0, $$5151 = 0, $$lcssa = 0, $$phi$trans$insert = 0, $$phi$trans$insert502 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i188 = 0, $$pre$i$i$i208 = 0, $$pre$i$i$i254 = 0, $$pre$i$i$i288 = 0, $$pre$i$i$i319 = 0, $$pre$i$i$i343 = 0, $$pre$i4$i$i214 = 0, $$pre$i4$i$i214510 = 0, $$pre$i4$i$i214512 = 0;
 var $$pre$i4$i$i260 = 0, $$pre$i4$i$i260488$ph = 0, $$pre$i4$i$i260488516 = 0, $$pre$i4$i$i294 = 0, $$pre$i4$i$i325 = 0, $$pre$i4$i$i325481 = 0, $$pre$i4$i$i325483 = 0, $$pre$i4$i$i349 = 0, $$pre$i4$i$i349496 = 0, $$pre$i4$i$i349497 = 0, $$pre485 = 0, $$pre487 = 0, $$pre490 = 0, $$pre491 = 0, $$pre492 = 0, $$pre493 = 0, $$pre494 = 0, $$pre495 = 0, $$pre499 = 0, $$pre500 = 0;
 var $$pre501 = 0, $$pre503 = 0, $$pre504 = 0, $$pre505 = 0, $$pre506 = 0, $$pre507 = 0, $$pre508 = 0, $$pre509 = 0, $$sink$index = 0, $$sink$index9 = 0, $$sink430 = 0, $$sroa$0367$0 = 0, $$sroa$0389$0 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0;
 var $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0;
 var $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0;
 var $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0;
 var $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0;
 var $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0;
 var $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0;
 var $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0;
 var $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0;
 var $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0;
 var $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0;
 var $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0;
 var $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0;
 var $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0;
 var $798 = 0, $799 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0;
 var $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0;
 var $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0;
 var $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $cond169 = 0, $exitcond$i$i = 0, $exitcond$i$i172 = 0, $exitcond$i$i174 = 0, $exitcond$i$i177 = 0, $exitcond$i$i180 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond166 = 0;
 var $phitmp$i$i$i = 0, $phitmp$i$i$i189 = 0, $phitmp$i$i$i209 = 0, $phitmp$i$i$i255 = 0, $phitmp$i$i$i289 = 0, $phitmp$i$i$i320 = 0, $phitmp$i$i$i344 = 0, $phitmp$i5$i$i215 = 0, $phitmp$i5$i$i261 = 0, $phitmp$i5$i$i326 = 0, $phitmp$i5$i$i350 = 0, $switch = 0, $tmp$i$i217 = 0, $tmp$i$i263 = 0, $tmp$i$i328 = 0, $tmp$i$i352 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $11 = sp + 496|0;
 $12 = sp + 96|0;
 $13 = sp + 88|0;
 $14 = sp + 80|0;
 $15 = sp + 76|0;
 $16 = sp + 500|0;
 $17 = sp + 72|0;
 $18 = sp + 68|0;
 $19 = sp + 56|0;
 $20 = sp + 44|0;
 $21 = sp + 32|0;
 $22 = sp + 20|0;
 $23 = sp + 8|0;
 $24 = sp + 4|0;
 $25 = sp;
 HEAP32[$11>>2] = $10;
 $26 = $12;
 HEAP32[$13>>2] = $26;
 $27 = ((($13)) + 4|0);
 HEAP32[$27>>2] = (801);
 HEAP32[$14>>2] = $12;
 $28 = ((($12)) + 400|0);
 HEAP32[$15>>2] = $28;
 ;HEAP32[$19>>2]=0|0;HEAP32[$19+4>>2]=0|0;HEAP32[$19+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $29 = (($19) + ($$0$i$i<<2)|0);
  HEAP32[$29>>2] = 0;
  $30 = (($$0$i$i) + 1)|0;
  $$0$i$i = $30;
 }
 ;HEAP32[$20>>2]=0|0;HEAP32[$20+4>>2]=0|0;HEAP32[$20+8>>2]=0|0;
 $$0$i$i171 = 0;
 while(1) {
  $exitcond$i$i172 = ($$0$i$i171|0)==(3);
  if ($exitcond$i$i172) {
   break;
  }
  $31 = (($20) + ($$0$i$i171<<2)|0);
  HEAP32[$31>>2] = 0;
  $32 = (($$0$i$i171) + 1)|0;
  $$0$i$i171 = $32;
 }
 ;HEAP32[$21>>2]=0|0;HEAP32[$21+4>>2]=0|0;HEAP32[$21+8>>2]=0|0;
 $$0$i$i173 = 0;
 while(1) {
  $exitcond$i$i174 = ($$0$i$i173|0)==(3);
  if ($exitcond$i$i174) {
   break;
  }
  $33 = (($21) + ($$0$i$i173<<2)|0);
  HEAP32[$33>>2] = 0;
  $34 = (($$0$i$i173) + 1)|0;
  $$0$i$i173 = $34;
 }
 ;HEAP32[$22>>2]=0|0;HEAP32[$22+4>>2]=0|0;HEAP32[$22+8>>2]=0|0;
 $$0$i$i176 = 0;
 while(1) {
  $exitcond$i$i177 = ($$0$i$i176|0)==(3);
  if ($exitcond$i$i177) {
   break;
  }
  $35 = (($22) + ($$0$i$i176<<2)|0);
  HEAP32[$35>>2] = 0;
  $36 = (($$0$i$i176) + 1)|0;
  $$0$i$i176 = $36;
 }
 ;HEAP32[$23>>2]=0|0;HEAP32[$23+4>>2]=0|0;HEAP32[$23+8>>2]=0|0;
 $$0$i$i179 = 0;
 while(1) {
  $exitcond$i$i180 = ($$0$i$i179|0)==(3);
  if ($exitcond$i$i180) {
   break;
  }
  $37 = (($23) + ($$0$i$i179<<2)|0);
  HEAP32[$37>>2] = 0;
  $38 = (($$0$i$i179) + 1)|0;
  $$0$i$i179 = $38;
 }
 __THREW__ = 0;
 invoke_viiiiiiiiii(813,($2|0),($3|0),($16|0),($17|0),($18|0),($19|0),($20|0),($21|0),($22|0),($24|0));
 $39 = __THREW__; __THREW__ = 0;
 $40 = $39&1;
 L21: do {
  if ($40) {
   $90 = ___cxa_find_matching_catch_2()|0;
   $91 = tempRet0;
   $$5145 = $90;$$5151 = $91;
  } else {
   $41 = HEAP32[$8>>2]|0;
   HEAP32[$9>>2] = $41;
   $42 = ((($21)) + 8|0);
   $43 = ((($42)) + 3|0);
   $44 = ((($21)) + 4|0);
   $45 = ((($22)) + 8|0);
   $46 = ((($45)) + 3|0);
   $47 = ((($22)) + 4|0);
   $48 = $4 & 512;
   $49 = ($48|0)!=(0);
   $50 = ((($20)) + 8|0);
   $51 = ((($50)) + 3|0);
   $52 = ((($20)) + 4|0);
   $53 = ((($23)) + 8|0);
   $54 = ((($53)) + 3|0);
   $55 = ((($23)) + 4|0);
   $56 = ((($16)) + 3|0);
   $57 = ((($19)) + 11|0);
   $58 = ((($19)) + 4|0);
   $$0152 = 0;$$0161 = 0;
   L24: while(1) {
    $59 = ($$0161>>>0)<(4);
    if (!($59)) {
     label = 262;
     break;
    }
    $60 = HEAP32[$0>>2]|0;
    $61 = ($60|0)==(0|0);
    do {
     if ($61) {
      $856 = 1;
     } else {
      $62 = ((($60)) + 12|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ((($60)) + 16|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($63|0)==($65|0);
      if ($66) {
       $67 = HEAP32[$60>>2]|0;
       $68 = ((($67)) + 36|0);
       $69 = HEAP32[$68>>2]|0;
       __THREW__ = 0;
       $70 = (invoke_ii($69|0,($60|0))|0);
       $71 = __THREW__; __THREW__ = 0;
       $72 = $71&1;
       if ($72) {
        label = 36;
        break L24;
       } else {
        $$0$i$i$i$i186 = $70;
       }
      } else {
       $73 = HEAP32[$63>>2]|0;
       $$0$i$i$i$i186 = $73;
      }
      $74 = ($$0$i$i$i$i186|0)==(-1);
      if ($74) {
       HEAP32[$0>>2] = 0;
       $856 = 1;
       break;
      } else {
       $$pre$i$i$i188 = HEAP32[$0>>2]|0;
       $phitmp$i$i$i189 = ($$pre$i$i$i188|0)==(0|0);
       $856 = $phitmp$i$i$i189;
       break;
      }
     }
    } while(0);
    $75 = HEAP32[$1>>2]|0;
    $76 = ($75|0)==(0|0);
    do {
     if ($76) {
      label = 32;
     } else {
      $77 = ((($75)) + 12|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = ((($75)) + 16|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = ($78|0)==($80|0);
      if ($81) {
       $82 = HEAP32[$75>>2]|0;
       $83 = ((($82)) + 36|0);
       $84 = HEAP32[$83>>2]|0;
       __THREW__ = 0;
       $85 = (invoke_ii($84|0,($75|0))|0);
       $86 = __THREW__; __THREW__ = 0;
       $87 = $86&1;
       if ($87) {
        label = 36;
        break L24;
       } else {
        $$0$i$i2$i$i192 = $85;
       }
      } else {
       $88 = HEAP32[$78>>2]|0;
       $$0$i$i2$i$i192 = $88;
      }
      $89 = ($$0$i$i2$i$i192|0)==(-1);
      if ($89) {
       HEAP32[$1>>2] = 0;
       label = 32;
       break;
      } else {
       if ($856) {
        $857 = $75;
        break;
       } else {
        label = 262;
        break L24;
       }
      }
     }
    } while(0);
    if ((label|0) == 32) {
     label = 0;
     if ($856) {
      label = 262;
      break;
     } else {
      $857 = 0;
     }
    }
    $96 = (($16) + ($$0161)|0);
    $97 = HEAP8[$96>>0]|0;
    $98 = $97 << 24 >> 24;
    L49: do {
     switch ($98|0) {
     case 1:  {
      $cond169 = ($$0161|0)==(3);
      if ($cond169) {
       $$1153 = $$0152;
      } else {
       $99 = HEAP32[$0>>2]|0;
       $100 = ((($99)) + 12|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = ((($99)) + 16|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = ($101|0)==($103|0);
       if ($104) {
        $105 = HEAP32[$99>>2]|0;
        $106 = ((($105)) + 36|0);
        $107 = HEAP32[$106>>2]|0;
        __THREW__ = 0;
        $108 = (invoke_ii($107|0,($99|0))|0);
        $109 = __THREW__; __THREW__ = 0;
        $110 = $109&1;
        if ($110) {
         label = 36;
         break L24;
        } else {
         $$0$i$i200 = $108;
        }
       } else {
        $111 = HEAP32[$101>>2]|0;
        $$0$i$i200 = $111;
       }
       $112 = HEAP32[$7>>2]|0;
       $113 = ((($112)) + 12|0);
       $114 = HEAP32[$113>>2]|0;
       __THREW__ = 0;
       $115 = (invoke_iiii($114|0,($7|0),8192,($$0$i$i200|0))|0);
       $116 = __THREW__; __THREW__ = 0;
       $117 = $116&1;
       if ($117) {
        label = 36;
        break L24;
       }
       if (!($115)) {
        label = 49;
        break L24;
       }
       $118 = HEAP32[$0>>2]|0;
       $119 = ((($118)) + 12|0);
       $120 = HEAP32[$119>>2]|0;
       $121 = ((($118)) + 16|0);
       $122 = HEAP32[$121>>2]|0;
       $123 = ($120|0)==($122|0);
       if ($123) {
        $124 = HEAP32[$118>>2]|0;
        $125 = ((($124)) + 40|0);
        $126 = HEAP32[$125>>2]|0;
        __THREW__ = 0;
        $127 = (invoke_ii($126|0,($118|0))|0);
        $128 = __THREW__; __THREW__ = 0;
        $129 = $128&1;
        if ($129) {
         label = 36;
         break L24;
        } else {
         $$0$i$i204 = $127;
        }
       } else {
        $130 = ((($120)) + 4|0);
        HEAP32[$119>>2] = $130;
        $131 = HEAP32[$120>>2]|0;
        $$0$i$i204 = $131;
       }
       __THREW__ = 0;
       invoke_vii(811,($23|0),($$0$i$i204|0));
       $132 = __THREW__; __THREW__ = 0;
       $133 = $132&1;
       if ($133) {
        label = 36;
        break L24;
       } else {
        $$pre$i4$i$i214 = $857;$152 = $857;
        label = 51;
       }
      }
      break;
     }
     case 0:  {
      $136 = ($$0161|0)==(3);
      if ($136) {
       $$1153 = $$0152;
      } else {
       $$pre$i4$i$i214 = $857;$152 = $857;
       label = 51;
      }
      break;
     }
     case 3:  {
      $203 = HEAP8[$43>>0]|0;
      $204 = ($203<<24>>24)<(0);
      $205 = HEAP32[$44>>2]|0;
      $206 = $203&255;
      $207 = $204 ? $205 : $206;
      $208 = HEAP8[$46>>0]|0;
      $209 = ($208<<24>>24)<(0);
      $210 = HEAP32[$47>>2]|0;
      $211 = $208&255;
      $212 = $209 ? $210 : $211;
      $213 = (0 - ($212))|0;
      $214 = ($207|0)==($213|0);
      if ($214) {
       $$1153 = $$0152;
      } else {
       $215 = ($207|0)==(0);
       if ($215) {
        $254 = HEAP32[$0>>2]|0;
        $255 = ((($254)) + 12|0);
        $256 = HEAP32[$255>>2]|0;
        $257 = ((($254)) + 16|0);
        $258 = HEAP32[$257>>2]|0;
        $259 = ($256|0)==($258|0);
        if ($259) {
         $260 = HEAP32[$254>>2]|0;
         $261 = ((($260)) + 36|0);
         $262 = HEAP32[$261>>2]|0;
         __THREW__ = 0;
         $263 = (invoke_ii($262|0,($254|0))|0);
         $264 = __THREW__; __THREW__ = 0;
         $265 = $264&1;
         if ($265) {
          label = 36;
          break L24;
         }
         $$pre508 = HEAP8[$46>>0]|0;
         $$0$i$i267 = $263;$267 = $$pre508;
        } else {
         $266 = HEAP32[$256>>2]|0;
         $$0$i$i267 = $266;$267 = $208;
        }
        $268 = ($267<<24>>24)<(0);
        $269 = HEAP32[$22>>2]|0;
        $270 = $268 ? $269 : $22;
        $271 = HEAP32[$270>>2]|0;
        $272 = ($$0$i$i267|0)==($271|0);
        if (!($272)) {
         $$1153 = $$0152;
         break L49;
        }
        $273 = HEAP32[$0>>2]|0;
        $274 = ((($273)) + 12|0);
        $275 = HEAP32[$274>>2]|0;
        $276 = ((($273)) + 16|0);
        $277 = HEAP32[$276>>2]|0;
        $278 = ($275|0)==($277|0);
        if ($278) {
         $279 = HEAP32[$273>>2]|0;
         $280 = ((($279)) + 40|0);
         $281 = HEAP32[$280>>2]|0;
         __THREW__ = 0;
         (invoke_ii($281|0,($273|0))|0);
         $282 = __THREW__; __THREW__ = 0;
         $283 = $282&1;
         if ($283) {
          label = 36;
          break L24;
         }
         $$pre509 = HEAP8[$46>>0]|0;
         $285 = $$pre509;
        } else {
         $284 = ((($275)) + 4|0);
         HEAP32[$274>>2] = $284;
         $285 = $267;
        }
        HEAP8[$6>>0] = 1;
        $286 = ($285<<24>>24)<(0);
        $287 = HEAP32[$47>>2]|0;
        $288 = $285&255;
        $289 = $286 ? $287 : $288;
        $290 = ($289>>>0)>(1);
        $$$0152162 = $290 ? $22 : $$0152;
        $$1153 = $$$0152162;
        break L49;
       }
       $216 = ($212|0)==(0);
       $217 = HEAP32[$0>>2]|0;
       $218 = ((($217)) + 12|0);
       $219 = HEAP32[$218>>2]|0;
       $220 = ((($217)) + 16|0);
       $221 = HEAP32[$220>>2]|0;
       $222 = ($219|0)==($221|0);
       if ($216) {
        if ($222) {
         $223 = HEAP32[$217>>2]|0;
         $224 = ((($223)) + 36|0);
         $225 = HEAP32[$224>>2]|0;
         __THREW__ = 0;
         $226 = (invoke_ii($225|0,($217|0))|0);
         $227 = __THREW__; __THREW__ = 0;
         $228 = $227&1;
         if ($228) {
          label = 36;
          break L24;
         }
         $$pre506 = HEAP8[$43>>0]|0;
         $$0$i$i243 = $226;$230 = $$pre506;
        } else {
         $229 = HEAP32[$219>>2]|0;
         $$0$i$i243 = $229;$230 = $203;
        }
        $231 = ($230<<24>>24)<(0);
        $232 = HEAP32[$21>>2]|0;
        $233 = $231 ? $232 : $21;
        $234 = HEAP32[$233>>2]|0;
        $235 = ($$0$i$i243|0)==($234|0);
        if (!($235)) {
         HEAP8[$6>>0] = 1;
         $$1153 = $$0152;
         break L49;
        }
        $236 = HEAP32[$0>>2]|0;
        $237 = ((($236)) + 12|0);
        $238 = HEAP32[$237>>2]|0;
        $239 = ((($236)) + 16|0);
        $240 = HEAP32[$239>>2]|0;
        $241 = ($238|0)==($240|0);
        if ($241) {
         $242 = HEAP32[$236>>2]|0;
         $243 = ((($242)) + 40|0);
         $244 = HEAP32[$243>>2]|0;
         __THREW__ = 0;
         (invoke_ii($244|0,($236|0))|0);
         $245 = __THREW__; __THREW__ = 0;
         $246 = $245&1;
         if ($246) {
          label = 36;
          break L24;
         }
         $$pre507 = HEAP8[$43>>0]|0;
         $248 = $$pre507;
        } else {
         $247 = ((($238)) + 4|0);
         HEAP32[$237>>2] = $247;
         $248 = $230;
        }
        $249 = ($248<<24>>24)<(0);
        $250 = HEAP32[$44>>2]|0;
        $251 = $248&255;
        $252 = $249 ? $250 : $251;
        $253 = ($252>>>0)>(1);
        $$$0152 = $253 ? $21 : $$0152;
        $$1153 = $$$0152;
        break L49;
       }
       if ($222) {
        $291 = HEAP32[$217>>2]|0;
        $292 = ((($291)) + 36|0);
        $293 = HEAP32[$292>>2]|0;
        __THREW__ = 0;
        $294 = (invoke_ii($293|0,($217|0))|0);
        $295 = __THREW__; __THREW__ = 0;
        $296 = $295&1;
        if ($296) {
         label = 36;
         break L24;
        }
        $$pre499 = HEAP8[$43>>0]|0;
        $$pre500 = HEAP32[$0>>2]|0;
        $$phi$trans$insert = ((($$pre500)) + 12|0);
        $$pre501 = HEAP32[$$phi$trans$insert>>2]|0;
        $$phi$trans$insert502 = ((($$pre500)) + 16|0);
        $$pre503 = HEAP32[$$phi$trans$insert502>>2]|0;
        $$0$i$i276 = $294;$298 = $$pre499;$305 = $$pre500;$306 = $$pre501;$308 = $$pre503;
       } else {
        $297 = HEAP32[$219>>2]|0;
        $$0$i$i276 = $297;$298 = $203;$305 = $217;$306 = $219;$308 = $221;
       }
       $299 = ($298<<24>>24)<(0);
       $300 = HEAP32[$21>>2]|0;
       $301 = $299 ? $300 : $21;
       $302 = HEAP32[$301>>2]|0;
       $303 = ($$0$i$i276|0)==($302|0);
       $304 = ((($305)) + 12|0);
       $307 = ($306|0)==($308|0);
       if ($303) {
        if ($307) {
         $309 = HEAP32[$305>>2]|0;
         $310 = ((($309)) + 40|0);
         $311 = HEAP32[$310>>2]|0;
         __THREW__ = 0;
         (invoke_ii($311|0,($305|0))|0);
         $312 = __THREW__; __THREW__ = 0;
         $313 = $312&1;
         if ($313) {
          label = 36;
          break L24;
         }
         $$pre505 = HEAP8[$43>>0]|0;
         $315 = $$pre505;
        } else {
         $314 = ((($306)) + 4|0);
         HEAP32[$304>>2] = $314;
         $315 = $298;
        }
        $316 = ($315<<24>>24)<(0);
        $317 = HEAP32[$44>>2]|0;
        $318 = $315&255;
        $319 = $316 ? $317 : $318;
        $320 = ($319>>>0)>(1);
        $$$0152163 = $320 ? $21 : $$0152;
        $$1153 = $$$0152163;
        break L49;
       }
       if ($307) {
        $321 = HEAP32[$305>>2]|0;
        $322 = ((($321)) + 36|0);
        $323 = HEAP32[$322>>2]|0;
        __THREW__ = 0;
        $324 = (invoke_ii($323|0,($305|0))|0);
        $325 = __THREW__; __THREW__ = 0;
        $326 = $325&1;
        if ($326) {
         label = 36;
         break L24;
        } else {
         $$0$i$i301 = $324;
        }
       } else {
        $327 = HEAP32[$306>>2]|0;
        $$0$i$i301 = $327;
       }
       $328 = HEAP8[$46>>0]|0;
       $329 = ($328<<24>>24)<(0);
       $330 = HEAP32[$22>>2]|0;
       $331 = $329 ? $330 : $22;
       $332 = HEAP32[$331>>2]|0;
       $333 = ($$0$i$i301|0)==($332|0);
       if (!($333)) {
        label = 118;
        break L24;
       }
       $334 = HEAP32[$0>>2]|0;
       $335 = ((($334)) + 12|0);
       $336 = HEAP32[$335>>2]|0;
       $337 = ((($334)) + 16|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ($336|0)==($338|0);
       if ($339) {
        $340 = HEAP32[$334>>2]|0;
        $341 = ((($340)) + 40|0);
        $342 = HEAP32[$341>>2]|0;
        __THREW__ = 0;
        (invoke_ii($342|0,($334|0))|0);
        $343 = __THREW__; __THREW__ = 0;
        $344 = $343&1;
        if ($344) {
         label = 36;
         break L24;
        }
        $$pre504 = HEAP8[$46>>0]|0;
        $346 = $$pre504;
       } else {
        $345 = ((($336)) + 4|0);
        HEAP32[$335>>2] = $345;
        $346 = $328;
       }
       HEAP8[$6>>0] = 1;
       $347 = ($346<<24>>24)<(0);
       $348 = HEAP32[$47>>2]|0;
       $349 = $346&255;
       $350 = $347 ? $348 : $349;
       $351 = ($350>>>0)>(1);
       $$$0152164 = $351 ? $22 : $$0152;
       $$1153 = $$$0152164;
      }
      break;
     }
     case 2:  {
      $354 = ($$0152|0)!=(0|0);
      $355 = ($$0161>>>0)<(2);
      $or$cond = $355 | $354;
      if (!($or$cond)) {
       $356 = ($$0161|0)==(2);
       $357 = HEAP8[$56>>0]|0;
       $358 = ($357<<24>>24)!=(0);
       $359 = $356 & $358;
       $brmerge = $49 | $359;
       if (!($brmerge)) {
        $$1153 = 0;
        break L49;
       }
      }
      $360 = HEAP8[$51>>0]|0;
      $361 = ($360<<24>>24)<(0);
      $362 = HEAP32[$20>>2]|0;
      $363 = $361 ? $362 : $20;
      $364 = $363;
      $365 = ($$0161|0)==(0);
      L122: do {
       if ($365) {
        $$pre$i4$i$i349 = $857;$$sroa$0367$0 = $364;$415 = $360;$419 = $362;$440 = $857;
       } else {
        $366 = (($$0161) + -1)|0;
        $367 = (($16) + ($366)|0);
        $368 = HEAP8[$367>>0]|0;
        $switch = ($368&255)<(2);
        if ($switch) {
         $$sroa$0389$0 = $364;$369 = $360;$373 = $362;
         while(1) {
          $370 = ($369<<24>>24)<(0);
          $371 = HEAP32[$52>>2]|0;
          $372 = $369&255;
          $374 = $370 ? $373 : $20;
          $375 = $370 ? $371 : $372;
          $376 = (($374) + ($375<<2)|0);
          $377 = $$sroa$0389$0;
          $378 = ($377|0)==($376|0);
          if ($378) {
           $390 = $369;$392 = $373;
           break;
          }
          $379 = HEAP32[$377>>2]|0;
          $380 = HEAP32[$7>>2]|0;
          $381 = ((($380)) + 12|0);
          $382 = HEAP32[$381>>2]|0;
          __THREW__ = 0;
          $383 = (invoke_iiii($382|0,($7|0),8192,($379|0))|0);
          $384 = __THREW__; __THREW__ = 0;
          $385 = $384&1;
          if ($385) {
           label = 128;
           break L24;
          }
          if (!($383)) {
           label = 126;
           break;
          }
          $386 = ((($377)) + 4|0);
          $387 = $386;
          $$pre490 = HEAP8[$51>>0]|0;
          $$pre491 = HEAP32[$20>>2]|0;
          $$sroa$0389$0 = $387;$369 = $$pre490;$373 = $$pre491;
         }
         if ((label|0) == 126) {
          label = 0;
          $$pre492 = HEAP8[$51>>0]|0;
          $$pre493 = HEAP32[$20>>2]|0;
          $390 = $$pre492;$392 = $$pre493;
         }
         $391 = ($390<<24>>24)<(0);
         $393 = $391 ? $392 : $20;
         $394 = $393;
         $395 = (($$sroa$0389$0) - ($394))|0;
         $396 = $395 >> 2;
         $397 = HEAP8[$54>>0]|0;
         $398 = ($397<<24>>24)<(0);
         $399 = HEAP32[$55>>2]|0;
         $400 = $397&255;
         $401 = $398 ? $399 : $400;
         $402 = ($396>>>0)>($401>>>0);
         if ($402) {
          $$pre$i4$i$i349 = $857;$$sroa$0367$0 = $394;$415 = $390;$419 = $392;$440 = $857;
         } else {
          $403 = HEAP32[$23>>2]|0;
          $404 = $398 ? $403 : $23;
          $405 = (($404) + ($401<<2)|0);
          $406 = (0 - ($396))|0;
          $407 = (($405) + ($406<<2)|0);
          $$sink430 = $393;$408 = $407;
          while(1) {
           $409 = ($408|0)==($405|0);
           if ($409) {
            $$pre$i4$i$i349 = $857;$$sroa$0367$0 = $$sroa$0389$0;$415 = $390;$419 = $392;$440 = $857;
            break L122;
           }
           $410 = HEAP32[$408>>2]|0;
           $411 = HEAP32[$$sink430>>2]|0;
           $412 = ($410|0)==($411|0);
           if (!($412)) {
            $$pre$i4$i$i349 = $857;$$sroa$0367$0 = $394;$415 = $390;$419 = $392;$440 = $857;
            break L122;
           }
           $413 = ((($408)) + 4|0);
           $414 = ((($$sink430)) + 4|0);
           $$sink430 = $414;$408 = $413;
          }
         }
        } else {
         $$pre$i4$i$i349 = $857;$$sroa$0367$0 = $364;$415 = $360;$419 = $362;$440 = $857;
        }
       }
      } while(0);
      L137: while(1) {
       $416 = ($415<<24>>24)<(0);
       $417 = HEAP32[$52>>2]|0;
       $418 = $415&255;
       $420 = $416 ? $419 : $20;
       $421 = $416 ? $417 : $418;
       $422 = (($420) + ($421<<2)|0);
       $423 = $$sroa$0367$0;
       $424 = ($423|0)==($422|0);
       if ($424) {
        $$lcssa = $422;
        break;
       }
       $425 = HEAP32[$0>>2]|0;
       $426 = ($425|0)==(0|0);
       do {
        if ($426) {
         $455 = 1;
        } else {
         $427 = ((($425)) + 12|0);
         $428 = HEAP32[$427>>2]|0;
         $429 = ((($425)) + 16|0);
         $430 = HEAP32[$429>>2]|0;
         $431 = ($428|0)==($430|0);
         if ($431) {
          $432 = HEAP32[$425>>2]|0;
          $433 = ((($432)) + 36|0);
          $434 = HEAP32[$433>>2]|0;
          __THREW__ = 0;
          $435 = (invoke_ii($434|0,($425|0))|0);
          $436 = __THREW__; __THREW__ = 0;
          $437 = $436&1;
          if ($437) {
           label = 158;
           break L24;
          } else {
           $$0$i$i$i$i341 = $435;
          }
         } else {
          $438 = HEAP32[$428>>2]|0;
          $$0$i$i$i$i341 = $438;
         }
         $439 = ($$0$i$i$i$i341|0)==(-1);
         if ($439) {
          HEAP32[$0>>2] = 0;
          $455 = 1;
          break;
         } else {
          $$pre$i$i$i343 = HEAP32[$0>>2]|0;
          $phitmp$i$i$i344 = ($$pre$i$i$i343|0)==(0|0);
          $455 = $phitmp$i$i$i344;
          break;
         }
        }
       } while(0);
       $441 = ($440|0)==(0|0);
       do {
        if ($441) {
         $$pre$i4$i$i349497 = $$pre$i4$i$i349;
         label = 148;
        } else {
         $442 = ((($440)) + 12|0);
         $443 = HEAP32[$442>>2]|0;
         $444 = ((($440)) + 16|0);
         $445 = HEAP32[$444>>2]|0;
         $446 = ($443|0)==($445|0);
         if ($446) {
          $447 = HEAP32[$440>>2]|0;
          $448 = ((($447)) + 36|0);
          $449 = HEAP32[$448>>2]|0;
          __THREW__ = 0;
          $450 = (invoke_ii($449|0,($440|0))|0);
          $451 = __THREW__; __THREW__ = 0;
          $452 = $451&1;
          if ($452) {
           label = 158;
           break L24;
          } else {
           $$0$i$i2$i$i347 = $450;
          }
         } else {
          $453 = HEAP32[$443>>2]|0;
          $$0$i$i2$i$i347 = $453;
         }
         $454 = ($$0$i$i2$i$i347|0)==(-1);
         if ($454) {
          HEAP32[$1>>2] = 0;
          $$pre$i4$i$i349497 = 0;
          label = 148;
          break;
         } else {
          $phitmp$i5$i$i350 = ($$pre$i4$i$i349|0)==(0|0);
          $tmp$i$i352 = $455 ^ $phitmp$i5$i$i350;
          if ($tmp$i$i352) {
           $$pre$i4$i$i349496 = $$pre$i4$i$i349;$859 = $$pre$i4$i$i349;
           break;
          } else {
           $$lcssa = $423;
           break L137;
          }
         }
        }
       } while(0);
       if ((label|0) == 148) {
        label = 0;
        if ($455) {
         $$lcssa = $423;
         break;
        } else {
         $$pre$i4$i$i349496 = $$pre$i4$i$i349497;$859 = 0;
        }
       }
       $456 = HEAP32[$0>>2]|0;
       $457 = ((($456)) + 12|0);
       $458 = HEAP32[$457>>2]|0;
       $459 = ((($456)) + 16|0);
       $460 = HEAP32[$459>>2]|0;
       $461 = ($458|0)==($460|0);
       if ($461) {
        $462 = HEAP32[$456>>2]|0;
        $463 = ((($462)) + 36|0);
        $464 = HEAP32[$463>>2]|0;
        __THREW__ = 0;
        $465 = (invoke_ii($464|0,($456|0))|0);
        $466 = __THREW__; __THREW__ = 0;
        $467 = $466&1;
        if ($467) {
         label = 158;
         break L24;
        } else {
         $$0$i$i337 = $465;
        }
       } else {
        $468 = HEAP32[$458>>2]|0;
        $$0$i$i337 = $468;
       }
       $469 = HEAP32[$423>>2]|0;
       $470 = ($$0$i$i337|0)==($469|0);
       if (!($470)) {
        $$lcssa = $423;
        break;
       }
       $471 = HEAP32[$0>>2]|0;
       $472 = ((($471)) + 12|0);
       $473 = HEAP32[$472>>2]|0;
       $474 = ((($471)) + 16|0);
       $475 = HEAP32[$474>>2]|0;
       $476 = ($473|0)==($475|0);
       if ($476) {
        $477 = HEAP32[$471>>2]|0;
        $478 = ((($477)) + 40|0);
        $479 = HEAP32[$478>>2]|0;
        __THREW__ = 0;
        (invoke_ii($479|0,($471|0))|0);
        $480 = __THREW__; __THREW__ = 0;
        $481 = $480&1;
        if ($481) {
         label = 159;
         break L24;
        }
       } else {
        $482 = ((($473)) + 4|0);
        HEAP32[$472>>2] = $482;
       }
       $483 = ((($423)) + 4|0);
       $484 = $483;
       $$pre494 = HEAP8[$51>>0]|0;
       $$pre495 = HEAP32[$20>>2]|0;
       $$pre$i4$i$i349 = $$pre$i4$i$i349496;$$sroa$0367$0 = $484;$415 = $$pre494;$419 = $$pre495;$440 = $859;
      }
      if ($49) {
       $489 = HEAP8[$51>>0]|0;
       $490 = ($489<<24>>24)<(0);
       $491 = HEAP32[$20>>2]|0;
       $492 = HEAP32[$52>>2]|0;
       $493 = $489&255;
       $494 = $490 ? $491 : $20;
       $495 = $490 ? $492 : $493;
       $496 = (($494) + ($495<<2)|0);
       $497 = ($$lcssa|0)==($496|0);
       if ($497) {
        $$1153 = $$0152;
       } else {
        label = 162;
        break L24;
       }
      } else {
       $$1153 = $$0152;
      }
      break;
     }
     case 4:  {
      $$0135 = 0;$$pre$i4$i$i325 = $857;$515 = $857;
      L173: while(1) {
       $500 = HEAP32[$0>>2]|0;
       $501 = ($500|0)==(0|0);
       do {
        if ($501) {
         $530 = 1;
        } else {
         $502 = ((($500)) + 12|0);
         $503 = HEAP32[$502>>2]|0;
         $504 = ((($500)) + 16|0);
         $505 = HEAP32[$504>>2]|0;
         $506 = ($503|0)==($505|0);
         if ($506) {
          $507 = HEAP32[$500>>2]|0;
          $508 = ((($507)) + 36|0);
          $509 = HEAP32[$508>>2]|0;
          __THREW__ = 0;
          $510 = (invoke_ii($509|0,($500|0))|0);
          $511 = __THREW__; __THREW__ = 0;
          $512 = $511&1;
          if ($512) {
           label = 187;
           break L24;
          } else {
           $$0$i$i$i$i317 = $510;
          }
         } else {
          $513 = HEAP32[$503>>2]|0;
          $$0$i$i$i$i317 = $513;
         }
         $514 = ($$0$i$i$i$i317|0)==(-1);
         if ($514) {
          HEAP32[$0>>2] = 0;
          $530 = 1;
          break;
         } else {
          $$pre$i$i$i319 = HEAP32[$0>>2]|0;
          $phitmp$i$i$i320 = ($$pre$i$i$i319|0)==(0|0);
          $530 = $phitmp$i$i$i320;
          break;
         }
        }
       } while(0);
       $516 = ($515|0)==(0|0);
       do {
        if ($516) {
         $$pre$i4$i$i325481 = $$pre$i4$i$i325;
         label = 176;
        } else {
         $517 = ((($515)) + 12|0);
         $518 = HEAP32[$517>>2]|0;
         $519 = ((($515)) + 16|0);
         $520 = HEAP32[$519>>2]|0;
         $521 = ($518|0)==($520|0);
         if ($521) {
          $522 = HEAP32[$515>>2]|0;
          $523 = ((($522)) + 36|0);
          $524 = HEAP32[$523>>2]|0;
          __THREW__ = 0;
          $525 = (invoke_ii($524|0,($515|0))|0);
          $526 = __THREW__; __THREW__ = 0;
          $527 = $526&1;
          if ($527) {
           label = 187;
           break L24;
          } else {
           $$0$i$i2$i$i323 = $525;
          }
         } else {
          $528 = HEAP32[$518>>2]|0;
          $$0$i$i2$i$i323 = $528;
         }
         $529 = ($$0$i$i2$i$i323|0)==(-1);
         if ($529) {
          HEAP32[$1>>2] = 0;
          $$pre$i4$i$i325481 = 0;
          label = 176;
          break;
         } else {
          $phitmp$i5$i$i326 = ($$pre$i4$i$i325|0)==(0|0);
          $tmp$i$i328 = $530 ^ $phitmp$i5$i$i326;
          if ($tmp$i$i328) {
           $$pre$i4$i$i325483 = $$pre$i4$i$i325;$860 = $$pre$i4$i$i325;
           break;
          } else {
           $$pre$i4$i$i294 = $$pre$i4$i$i325;
           break L173;
          }
         }
        }
       } while(0);
       if ((label|0) == 176) {
        label = 0;
        if ($530) {
         $$pre$i4$i$i294 = $$pre$i4$i$i325481;
         break;
        } else {
         $$pre$i4$i$i325483 = $$pre$i4$i$i325481;$860 = 0;
        }
       }
       $531 = HEAP32[$0>>2]|0;
       $532 = ((($531)) + 12|0);
       $533 = HEAP32[$532>>2]|0;
       $534 = ((($531)) + 16|0);
       $535 = HEAP32[$534>>2]|0;
       $536 = ($533|0)==($535|0);
       if ($536) {
        $537 = HEAP32[$531>>2]|0;
        $538 = ((($537)) + 36|0);
        $539 = HEAP32[$538>>2]|0;
        __THREW__ = 0;
        $540 = (invoke_ii($539|0,($531|0))|0);
        $541 = __THREW__; __THREW__ = 0;
        $542 = $541&1;
        if ($542) {
         label = 187;
         break L24;
        } else {
         $$0$i$i312 = $540;
        }
       } else {
        $543 = HEAP32[$533>>2]|0;
        $$0$i$i312 = $543;
       }
       $544 = HEAP32[$7>>2]|0;
       $545 = ((($544)) + 12|0);
       $546 = HEAP32[$545>>2]|0;
       __THREW__ = 0;
       $547 = (invoke_iiii($546|0,($7|0),2048,($$0$i$i312|0))|0);
       $548 = __THREW__; __THREW__ = 0;
       $549 = $548&1;
       if ($549) {
        label = 189;
        break L24;
       }
       if ($547) {
        $550 = HEAP32[$9>>2]|0;
        $551 = HEAP32[$11>>2]|0;
        $552 = ($550|0)==($551|0);
        if ($552) {
         __THREW__ = 0;
         invoke_viii(814,($8|0),($9|0),($11|0));
         $553 = __THREW__; __THREW__ = 0;
         $554 = $553&1;
         if ($554) {
          label = 189;
          break L24;
         }
         $$pre485 = HEAP32[$9>>2]|0;
         $564 = $$pre485;
        } else {
         $564 = $550;
        }
        $563 = ((($564)) + 4|0);
        HEAP32[$9>>2] = $563;
        HEAP32[$564>>2] = $$0$i$i312;
        $565 = (($$0135) + 1)|0;
        $$2137$ph = $565;
       } else {
        $566 = HEAP8[$57>>0]|0;
        $567 = ($566<<24>>24)<(0);
        $568 = HEAP32[$58>>2]|0;
        $569 = $566&255;
        $570 = $567 ? $568 : $569;
        $571 = ($570|0)!=(0);
        $572 = ($$0135|0)!=(0);
        $or$cond13 = $572 & $571;
        $573 = HEAP32[$18>>2]|0;
        $574 = ($$0$i$i312|0)==($573|0);
        $or$cond166 = $574 & $or$cond13;
        if (!($or$cond166)) {
         $$pre$i4$i$i294 = $$pre$i4$i$i325483;
         break;
        }
        $575 = HEAP32[$14>>2]|0;
        $576 = HEAP32[$15>>2]|0;
        $577 = ($575|0)==($576|0);
        if ($577) {
         __THREW__ = 0;
         invoke_viii(807,($13|0),($14|0),($15|0));
         $578 = __THREW__; __THREW__ = 0;
         $579 = $578&1;
         if ($579) {
          label = 189;
          break L24;
         }
         $$pre = HEAP32[$14>>2]|0;
         $581 = $$pre;
        } else {
         $581 = $575;
        }
        $580 = ((($581)) + 4|0);
        HEAP32[$14>>2] = $580;
        HEAP32[$581>>2] = $$0135;
        $$2137$ph = 0;
       }
       $582 = HEAP32[$0>>2]|0;
       $583 = ((($582)) + 12|0);
       $584 = HEAP32[$583>>2]|0;
       $585 = ((($582)) + 16|0);
       $586 = HEAP32[$585>>2]|0;
       $587 = ($584|0)==($586|0);
       if ($587) {
        $588 = HEAP32[$582>>2]|0;
        $589 = ((($588)) + 40|0);
        $590 = HEAP32[$589>>2]|0;
        __THREW__ = 0;
        (invoke_ii($590|0,($582|0))|0);
        $591 = __THREW__; __THREW__ = 0;
        $592 = $591&1;
        if ($592) {
         label = 187;
         break L24;
        } else {
         $$0135 = $$2137$ph;$$pre$i4$i$i325 = $$pre$i4$i$i325483;$515 = $860;
         continue;
        }
       } else {
        $593 = ((($584)) + 4|0);
        HEAP32[$583>>2] = $593;
        $$0135 = $$2137$ph;$$pre$i4$i$i325 = $$pre$i4$i$i325483;$515 = $860;
        continue;
       }
      }
      $594 = HEAP32[$13>>2]|0;
      $595 = HEAP32[$14>>2]|0;
      $596 = ($594|0)!=($595|0);
      $597 = ($$0135|0)!=(0);
      $or$cond15 = $597 & $596;
      if ($or$cond15) {
       $598 = HEAP32[$15>>2]|0;
       $599 = ($595|0)==($598|0);
       if ($599) {
        __THREW__ = 0;
        invoke_viii(807,($13|0),($14|0),($15|0));
        $600 = __THREW__; __THREW__ = 0;
        $601 = $600&1;
        if ($601) {
         label = 188;
         break L24;
        }
        $$pre487 = HEAP32[$14>>2]|0;
        $603 = $$pre487;
       } else {
        $603 = $595;
       }
       $602 = ((($603)) + 4|0);
       HEAP32[$14>>2] = $602;
       HEAP32[$603>>2] = $$0135;
      }
      $604 = HEAP32[$24>>2]|0;
      $605 = ($604|0)>(0);
      L226: do {
       if ($605) {
        $606 = HEAP32[$0>>2]|0;
        $607 = ($606|0)==(0|0);
        do {
         if ($607) {
          $861 = 1;
         } else {
          $608 = ((($606)) + 12|0);
          $609 = HEAP32[$608>>2]|0;
          $610 = ((($606)) + 16|0);
          $611 = HEAP32[$610>>2]|0;
          $612 = ($609|0)==($611|0);
          if ($612) {
           $613 = HEAP32[$606>>2]|0;
           $614 = ((($613)) + 36|0);
           $615 = HEAP32[$614>>2]|0;
           __THREW__ = 0;
           $616 = (invoke_ii($615|0,($606|0))|0);
           $617 = __THREW__; __THREW__ = 0;
           $618 = $617&1;
           if ($618) {
            label = 188;
            break L24;
           } else {
            $$0$i$i$i$i286 = $616;
           }
          } else {
           $619 = HEAP32[$609>>2]|0;
           $$0$i$i$i$i286 = $619;
          }
          $620 = ($$0$i$i$i$i286|0)==(-1);
          if ($620) {
           HEAP32[$0>>2] = 0;
           $861 = 1;
           break;
          } else {
           $$pre$i$i$i288 = HEAP32[$0>>2]|0;
           $phitmp$i$i$i289 = ($$pre$i$i$i288|0)==(0|0);
           $861 = $phitmp$i$i$i289;
           break;
          }
         }
        } while(0);
        $621 = ($$pre$i4$i$i294|0)==(0|0);
        do {
         if ($621) {
          label = 218;
         } else {
          $622 = ((($$pre$i4$i$i294)) + 12|0);
          $623 = HEAP32[$622>>2]|0;
          $624 = ((($$pre$i4$i$i294)) + 16|0);
          $625 = HEAP32[$624>>2]|0;
          $626 = ($623|0)==($625|0);
          if ($626) {
           $627 = HEAP32[$$pre$i4$i$i294>>2]|0;
           $628 = ((($627)) + 36|0);
           $629 = HEAP32[$628>>2]|0;
           __THREW__ = 0;
           $630 = (invoke_ii($629|0,($$pre$i4$i$i294|0))|0);
           $631 = __THREW__; __THREW__ = 0;
           $632 = $631&1;
           if ($632) {
            label = 188;
            break L24;
           } else {
            $$0$i$i2$i$i292 = $630;
           }
          } else {
           $633 = HEAP32[$623>>2]|0;
           $$0$i$i2$i$i292 = $633;
          }
          $634 = ($$0$i$i2$i$i292|0)==(-1);
          if ($634) {
           HEAP32[$1>>2] = 0;
           label = 218;
           break;
          } else {
           if ($861) {
            $862 = $$pre$i4$i$i294;
            break;
           } else {
            label = 224;
            break L24;
           }
          }
         }
        } while(0);
        if ((label|0) == 218) {
         label = 0;
         if ($861) {
          label = 224;
          break L24;
         } else {
          $862 = 0;
         }
        }
        $635 = HEAP32[$0>>2]|0;
        $636 = ((($635)) + 12|0);
        $637 = HEAP32[$636>>2]|0;
        $638 = ((($635)) + 16|0);
        $639 = HEAP32[$638>>2]|0;
        $640 = ($637|0)==($639|0);
        if ($640) {
         $641 = HEAP32[$635>>2]|0;
         $642 = ((($641)) + 36|0);
         $643 = HEAP32[$642>>2]|0;
         __THREW__ = 0;
         $644 = (invoke_ii($643|0,($635|0))|0);
         $645 = __THREW__; __THREW__ = 0;
         $646 = $645&1;
         if ($646) {
          label = 188;
          break L24;
         } else {
          $$0$i$i280 = $644;
         }
        } else {
         $647 = HEAP32[$637>>2]|0;
         $$0$i$i280 = $647;
        }
        $648 = HEAP32[$17>>2]|0;
        $649 = ($$0$i$i280|0)==($648|0);
        if (!($649)) {
         label = 224;
         break L24;
        }
        $652 = HEAP32[$0>>2]|0;
        $653 = ((($652)) + 12|0);
        $654 = HEAP32[$653>>2]|0;
        $655 = ((($652)) + 16|0);
        $656 = HEAP32[$655>>2]|0;
        $657 = ($654|0)==($656|0);
        if ($657) {
         $658 = HEAP32[$652>>2]|0;
         $659 = ((($658)) + 40|0);
         $660 = HEAP32[$659>>2]|0;
         __THREW__ = 0;
         (invoke_ii($660|0,($652|0))|0);
         $661 = __THREW__; __THREW__ = 0;
         $662 = $661&1;
         if ($662) {
          label = 188;
          break L24;
         } else {
          $$pre$i4$i$i260 = $862;$681 = $862;
         }
        } else {
         $663 = ((($654)) + 4|0);
         HEAP32[$653>>2] = $663;
         $$pre$i4$i$i260 = $862;$681 = $862;
        }
        while(1) {
         $664 = HEAP32[$24>>2]|0;
         $665 = ($664|0)>(0);
         if (!($665)) {
          break L226;
         }
         $666 = HEAP32[$0>>2]|0;
         $667 = ($666|0)==(0|0);
         do {
          if ($667) {
           $696 = 1;
          } else {
           $668 = ((($666)) + 12|0);
           $669 = HEAP32[$668>>2]|0;
           $670 = ((($666)) + 16|0);
           $671 = HEAP32[$670>>2]|0;
           $672 = ($669|0)==($671|0);
           if ($672) {
            $673 = HEAP32[$666>>2]|0;
            $674 = ((($673)) + 36|0);
            $675 = HEAP32[$674>>2]|0;
            __THREW__ = 0;
            $676 = (invoke_ii($675|0,($666|0))|0);
            $677 = __THREW__; __THREW__ = 0;
            $678 = $677&1;
            if ($678) {
             label = 186;
             break L24;
            } else {
             $$0$i$i$i$i252 = $676;
            }
           } else {
            $679 = HEAP32[$669>>2]|0;
            $$0$i$i$i$i252 = $679;
           }
           $680 = ($$0$i$i$i$i252|0)==(-1);
           if ($680) {
            HEAP32[$0>>2] = 0;
            $696 = 1;
            break;
           } else {
            $$pre$i$i$i254 = HEAP32[$0>>2]|0;
            $phitmp$i$i$i255 = ($$pre$i$i$i254|0)==(0|0);
            $696 = $phitmp$i$i$i255;
            break;
           }
          }
         } while(0);
         $682 = ($681|0)==(0|0);
         do {
          if ($682) {
           $$pre$i4$i$i260488$ph = $$pre$i4$i$i260;
           label = 242;
          } else {
           $683 = ((($681)) + 12|0);
           $684 = HEAP32[$683>>2]|0;
           $685 = ((($681)) + 16|0);
           $686 = HEAP32[$685>>2]|0;
           $687 = ($684|0)==($686|0);
           if ($687) {
            $688 = HEAP32[$681>>2]|0;
            $689 = ((($688)) + 36|0);
            $690 = HEAP32[$689>>2]|0;
            __THREW__ = 0;
            $691 = (invoke_ii($690|0,($681|0))|0);
            $692 = __THREW__; __THREW__ = 0;
            $693 = $692&1;
            if ($693) {
             label = 186;
             break L24;
            } else {
             $$0$i$i2$i$i258 = $691;
            }
           } else {
            $694 = HEAP32[$684>>2]|0;
            $$0$i$i2$i$i258 = $694;
           }
           $695 = ($$0$i$i2$i$i258|0)==(-1);
           if ($695) {
            HEAP32[$1>>2] = 0;
            $$pre$i4$i$i260488$ph = 0;
            label = 242;
            break;
           } else {
            $phitmp$i5$i$i261 = ($$pre$i4$i$i260|0)==(0|0);
            $tmp$i$i263 = $696 ^ $phitmp$i5$i$i261;
            if ($tmp$i$i263) {
             $$pre$i4$i$i260488516 = $$pre$i4$i$i260;$863 = $$pre$i4$i$i260;
             break;
            } else {
             label = 249;
             break L24;
            }
           }
          }
         } while(0);
         if ((label|0) == 242) {
          label = 0;
          if ($696) {
           label = 249;
           break L24;
          } else {
           $$pre$i4$i$i260488516 = $$pre$i4$i$i260488$ph;$863 = 0;
          }
         }
         $697 = HEAP32[$0>>2]|0;
         $698 = ((($697)) + 12|0);
         $699 = HEAP32[$698>>2]|0;
         $700 = ((($697)) + 16|0);
         $701 = HEAP32[$700>>2]|0;
         $702 = ($699|0)==($701|0);
         if ($702) {
          $703 = HEAP32[$697>>2]|0;
          $704 = ((($703)) + 36|0);
          $705 = HEAP32[$704>>2]|0;
          __THREW__ = 0;
          $706 = (invoke_ii($705|0,($697|0))|0);
          $707 = __THREW__; __THREW__ = 0;
          $708 = $707&1;
          if ($708) {
           label = 186;
           break L24;
          } else {
           $$0$i$i246 = $706;
          }
         } else {
          $709 = HEAP32[$699>>2]|0;
          $$0$i$i246 = $709;
         }
         $710 = HEAP32[$7>>2]|0;
         $711 = ((($710)) + 12|0);
         $712 = HEAP32[$711>>2]|0;
         __THREW__ = 0;
         $713 = (invoke_iiii($712|0,($7|0),2048,($$0$i$i246|0))|0);
         $714 = __THREW__; __THREW__ = 0;
         $715 = $714&1;
         if ($715) {
          label = 186;
          break L24;
         }
         if (!($713)) {
          label = 249;
          break L24;
         }
         $718 = HEAP32[$9>>2]|0;
         $719 = HEAP32[$11>>2]|0;
         $720 = ($718|0)==($719|0);
         if ($720) {
          __THREW__ = 0;
          invoke_viii(814,($8|0),($9|0),($11|0));
          $721 = __THREW__; __THREW__ = 0;
          $722 = $721&1;
          if ($722) {
           label = 186;
           break L24;
          }
         }
         $723 = HEAP32[$0>>2]|0;
         $724 = ((($723)) + 12|0);
         $725 = HEAP32[$724>>2]|0;
         $726 = ((($723)) + 16|0);
         $727 = HEAP32[$726>>2]|0;
         $728 = ($725|0)==($727|0);
         if ($728) {
          $729 = HEAP32[$723>>2]|0;
          $730 = ((($729)) + 36|0);
          $731 = HEAP32[$730>>2]|0;
          __THREW__ = 0;
          $732 = (invoke_ii($731|0,($723|0))|0);
          $733 = __THREW__; __THREW__ = 0;
          $734 = $733&1;
          if ($734) {
           label = 186;
           break L24;
          } else {
           $$0$i$i236 = $732;
          }
         } else {
          $735 = HEAP32[$725>>2]|0;
          $$0$i$i236 = $735;
         }
         $736 = HEAP32[$9>>2]|0;
         $737 = ((($736)) + 4|0);
         HEAP32[$9>>2] = $737;
         HEAP32[$736>>2] = $$0$i$i236;
         $738 = HEAP32[$24>>2]|0;
         $739 = (($738) + -1)|0;
         HEAP32[$24>>2] = $739;
         $740 = HEAP32[$0>>2]|0;
         $741 = ((($740)) + 12|0);
         $742 = HEAP32[$741>>2]|0;
         $743 = ((($740)) + 16|0);
         $744 = HEAP32[$743>>2]|0;
         $745 = ($742|0)==($744|0);
         if ($745) {
          $746 = HEAP32[$740>>2]|0;
          $747 = ((($746)) + 40|0);
          $748 = HEAP32[$747>>2]|0;
          __THREW__ = 0;
          (invoke_ii($748|0,($740|0))|0);
          $749 = __THREW__; __THREW__ = 0;
          $750 = $749&1;
          if ($750) {
           label = 186;
           break L24;
          } else {
           $$pre$i4$i$i260 = $$pre$i4$i$i260488516;$681 = $863;
           continue;
          }
         } else {
          $751 = ((($742)) + 4|0);
          HEAP32[$741>>2] = $751;
          $$pre$i4$i$i260 = $$pre$i4$i$i260488516;$681 = $863;
          continue;
         }
        }
       }
      } while(0);
      $752 = HEAP32[$9>>2]|0;
      $753 = HEAP32[$8>>2]|0;
      $754 = ($752|0)==($753|0);
      if ($754) {
       label = 259;
       break L24;
      } else {
       $$1153 = $$0152;
      }
      break;
     }
     default: {
      $$1153 = $$0152;
     }
     }
    } while(0);
    L300: do {
     if ((label|0) == 51) {
      while(1) {
       label = 0;
       $137 = HEAP32[$0>>2]|0;
       $138 = ($137|0)==(0|0);
       do {
        if ($138) {
         $167 = 1;
        } else {
         $139 = ((($137)) + 12|0);
         $140 = HEAP32[$139>>2]|0;
         $141 = ((($137)) + 16|0);
         $142 = HEAP32[$141>>2]|0;
         $143 = ($140|0)==($142|0);
         if ($143) {
          $144 = HEAP32[$137>>2]|0;
          $145 = ((($144)) + 36|0);
          $146 = HEAP32[$145>>2]|0;
          __THREW__ = 0;
          $147 = (invoke_ii($146|0,($137|0))|0);
          $148 = __THREW__; __THREW__ = 0;
          $149 = $148&1;
          if ($149) {
           label = 35;
           break L24;
          } else {
           $$0$i$i$i$i206 = $147;
          }
         } else {
          $150 = HEAP32[$140>>2]|0;
          $$0$i$i$i$i206 = $150;
         }
         $151 = ($$0$i$i$i$i206|0)==(-1);
         if ($151) {
          HEAP32[$0>>2] = 0;
          $167 = 1;
          break;
         } else {
          $$pre$i$i$i208 = HEAP32[$0>>2]|0;
          $phitmp$i$i$i209 = ($$pre$i$i$i208|0)==(0|0);
          $167 = $phitmp$i$i$i209;
          break;
         }
        }
       } while(0);
       $153 = ($152|0)==(0|0);
       do {
        if ($153) {
         $$pre$i4$i$i214510 = $$pre$i4$i$i214;
         label = 64;
        } else {
         $154 = ((($152)) + 12|0);
         $155 = HEAP32[$154>>2]|0;
         $156 = ((($152)) + 16|0);
         $157 = HEAP32[$156>>2]|0;
         $158 = ($155|0)==($157|0);
         if ($158) {
          $159 = HEAP32[$152>>2]|0;
          $160 = ((($159)) + 36|0);
          $161 = HEAP32[$160>>2]|0;
          __THREW__ = 0;
          $162 = (invoke_ii($161|0,($152|0))|0);
          $163 = __THREW__; __THREW__ = 0;
          $164 = $163&1;
          if ($164) {
           label = 35;
           break L24;
          } else {
           $$0$i$i2$i$i212 = $162;
          }
         } else {
          $165 = HEAP32[$155>>2]|0;
          $$0$i$i2$i$i212 = $165;
         }
         $166 = ($$0$i$i2$i$i212|0)==(-1);
         if ($166) {
          HEAP32[$1>>2] = 0;
          $$pre$i4$i$i214510 = 0;
          label = 64;
          break;
         } else {
          $phitmp$i5$i$i215 = ($$pre$i4$i$i214|0)==(0|0);
          $tmp$i$i217 = $167 ^ $phitmp$i5$i$i215;
          if ($tmp$i$i217) {
           $$pre$i4$i$i214512 = $$pre$i4$i$i214;$858 = $$pre$i4$i$i214;
           break;
          } else {
           $$1153 = $$0152;
           break L300;
          }
         }
        }
       } while(0);
       if ((label|0) == 64) {
        label = 0;
        if ($167) {
         $$1153 = $$0152;
         break L300;
        } else {
         $$pre$i4$i$i214512 = $$pre$i4$i$i214510;$858 = 0;
        }
       }
       $168 = HEAP32[$0>>2]|0;
       $169 = ((($168)) + 12|0);
       $170 = HEAP32[$169>>2]|0;
       $171 = ((($168)) + 16|0);
       $172 = HEAP32[$171>>2]|0;
       $173 = ($170|0)==($172|0);
       if ($173) {
        $174 = HEAP32[$168>>2]|0;
        $175 = ((($174)) + 36|0);
        $176 = HEAP32[$175>>2]|0;
        __THREW__ = 0;
        $177 = (invoke_ii($176|0,($168|0))|0);
        $178 = __THREW__; __THREW__ = 0;
        $179 = $178&1;
        if ($179) {
         label = 35;
         break L24;
        } else {
         $$0$i$i221 = $177;
        }
       } else {
        $180 = HEAP32[$170>>2]|0;
        $$0$i$i221 = $180;
       }
       $181 = HEAP32[$7>>2]|0;
       $182 = ((($181)) + 12|0);
       $183 = HEAP32[$182>>2]|0;
       __THREW__ = 0;
       $184 = (invoke_iiii($183|0,($7|0),8192,($$0$i$i221|0))|0);
       $185 = __THREW__; __THREW__ = 0;
       $186 = $185&1;
       if ($186) {
        label = 35;
        break L24;
       }
       if (!($184)) {
        $$1153 = $$0152;
        break L300;
       }
       $187 = HEAP32[$0>>2]|0;
       $188 = ((($187)) + 12|0);
       $189 = HEAP32[$188>>2]|0;
       $190 = ((($187)) + 16|0);
       $191 = HEAP32[$190>>2]|0;
       $192 = ($189|0)==($191|0);
       if ($192) {
        $193 = HEAP32[$187>>2]|0;
        $194 = ((($193)) + 40|0);
        $195 = HEAP32[$194>>2]|0;
        __THREW__ = 0;
        $196 = (invoke_ii($195|0,($187|0))|0);
        $197 = __THREW__; __THREW__ = 0;
        $198 = $197&1;
        if ($198) {
         label = 35;
         break L24;
        } else {
         $$0$i$i228 = $196;
        }
       } else {
        $199 = ((($189)) + 4|0);
        HEAP32[$188>>2] = $199;
        $200 = HEAP32[$189>>2]|0;
        $$0$i$i228 = $200;
       }
       __THREW__ = 0;
       invoke_vii(811,($23|0),($$0$i$i228|0));
       $201 = __THREW__; __THREW__ = 0;
       $202 = $201&1;
       if ($202) {
        label = 35;
        break L24;
       } else {
        $$pre$i4$i$i214 = $$pre$i4$i$i214512;$152 = $858;
        label = 51;
       }
      }
     }
    } while(0);
    $757 = (($$0161) + 1)|0;
    $$0152 = $$1153;$$0161 = $757;
   }
   L336:    switch (label|0) {
    case 35: {
     $92 = ___cxa_find_matching_catch_2()|0;
     $93 = tempRet0;
     $lpad$phi$index = $92;$lpad$phi$index2 = $93;
     label = 37;
     break;
    }
    case 36: {
     $94 = ___cxa_find_matching_catch_2()|0;
     $95 = tempRet0;
     $lpad$phi$index = $94;$lpad$phi$index2 = $95;
     label = 37;
     break;
    }
    case 49: {
     $134 = HEAP32[$5>>2]|0;
     $135 = $134 | 4;
     HEAP32[$5>>2] = $135;
     $$10 = 0;
     label = 298;
     break;
    }
    case 118: {
     $352 = HEAP32[$5>>2]|0;
     $353 = $352 | 4;
     HEAP32[$5>>2] = $353;
     $$10 = 0;
     label = 298;
     break;
    }
    case 128: {
     $388 = ___cxa_find_matching_catch_2()|0;
     $389 = tempRet0;
     $$5145 = $388;$$5151 = $389;
     break L21;
     break;
    }
    case 158: {
     $485 = ___cxa_find_matching_catch_2()|0;
     $486 = tempRet0;
     $$5145 = $485;$$5151 = $486;
     break L21;
     break;
    }
    case 159: {
     $487 = ___cxa_find_matching_catch_2()|0;
     $488 = tempRet0;
     $$5145 = $487;$$5151 = $488;
     break L21;
     break;
    }
    case 162: {
     $498 = HEAP32[$5>>2]|0;
     $499 = $498 | 4;
     HEAP32[$5>>2] = $499;
     $$10 = 0;
     label = 298;
     break;
    }
    case 186: {
     $555 = ___cxa_find_matching_catch_2()|0;
     $556 = tempRet0;
     $$sink$index = $555;$$sink$index9 = $556;
     label = 260;
     break;
    }
    case 187: {
     $557 = ___cxa_find_matching_catch_2()|0;
     $558 = tempRet0;
     $$sink$index = $557;$$sink$index9 = $558;
     label = 260;
     break;
    }
    case 188: {
     $559 = ___cxa_find_matching_catch_2()|0;
     $560 = tempRet0;
     $$sink$index = $559;$$sink$index9 = $560;
     label = 260;
     break;
    }
    case 189: {
     $561 = ___cxa_find_matching_catch_2()|0;
     $562 = tempRet0;
     $$sink$index = $561;$$sink$index9 = $562;
     label = 260;
     break;
    }
    case 224: {
     $650 = HEAP32[$5>>2]|0;
     $651 = $650 | 4;
     HEAP32[$5>>2] = $651;
     $$10 = 0;
     label = 298;
     break;
    }
    case 249: {
     $716 = HEAP32[$5>>2]|0;
     $717 = $716 | 4;
     HEAP32[$5>>2] = $717;
     $$10 = 0;
     label = 298;
     break;
    }
    case 259: {
     $755 = HEAP32[$5>>2]|0;
     $756 = $755 | 4;
     HEAP32[$5>>2] = $756;
     $$10 = 0;
     label = 298;
     break;
    }
    case 262: {
     $758 = ($$0152|0)==(0|0);
     L338: do {
      if (!($758)) {
       $759 = ((($$0152)) + 8|0);
       $760 = ((($759)) + 3|0);
       $761 = ((($$0152)) + 4|0);
       $$0 = 1;
       L340: while(1) {
        $762 = HEAP8[$760>>0]|0;
        $763 = ($762<<24>>24)<(0);
        if ($763) {
         $764 = HEAP32[$761>>2]|0;
         $767 = $764;
        } else {
         $765 = $762&255;
         $767 = $765;
        }
        $766 = ($$0>>>0)<($767>>>0);
        if (!($766)) {
         break L338;
        }
        $768 = HEAP32[$0>>2]|0;
        $769 = ($768|0)==(0|0);
        do {
         if ($769) {
          $864 = 1;
         } else {
          $770 = ((($768)) + 12|0);
          $771 = HEAP32[$770>>2]|0;
          $772 = ((($768)) + 16|0);
          $773 = HEAP32[$772>>2]|0;
          $774 = ($771|0)==($773|0);
          if ($774) {
           $775 = HEAP32[$768>>2]|0;
           $776 = ((($775)) + 36|0);
           $777 = HEAP32[$776>>2]|0;
           __THREW__ = 0;
           $778 = (invoke_ii($777|0,($768|0))|0);
           $779 = __THREW__; __THREW__ = 0;
           $780 = $779&1;
           if ($780) {
            label = 290;
            break L340;
           } else {
            $$0$i$i$i$i = $778;
           }
          } else {
           $781 = HEAP32[$771>>2]|0;
           $$0$i$i$i$i = $781;
          }
          $782 = ($$0$i$i$i$i|0)==(-1);
          if ($782) {
           HEAP32[$0>>2] = 0;
           $864 = 1;
           break;
          } else {
           $$pre$i$i$i = HEAP32[$0>>2]|0;
           $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
           $864 = $phitmp$i$i$i;
           break;
          }
         }
        } while(0);
        $783 = HEAP32[$1>>2]|0;
        $784 = ($783|0)==(0|0);
        do {
         if ($784) {
          label = 281;
         } else {
          $785 = ((($783)) + 12|0);
          $786 = HEAP32[$785>>2]|0;
          $787 = ((($783)) + 16|0);
          $788 = HEAP32[$787>>2]|0;
          $789 = ($786|0)==($788|0);
          if ($789) {
           $790 = HEAP32[$783>>2]|0;
           $791 = ((($790)) + 36|0);
           $792 = HEAP32[$791>>2]|0;
           __THREW__ = 0;
           $793 = (invoke_ii($792|0,($783|0))|0);
           $794 = __THREW__; __THREW__ = 0;
           $795 = $794&1;
           if ($795) {
            label = 290;
            break L340;
           } else {
            $$0$i$i2$i$i = $793;
           }
          } else {
           $796 = HEAP32[$786>>2]|0;
           $$0$i$i2$i$i = $796;
          }
          $797 = ($$0$i$i2$i$i|0)==(-1);
          if ($797) {
           HEAP32[$1>>2] = 0;
           label = 281;
           break;
          } else {
           if ($864) {
            break;
           } else {
            label = 289;
            break L340;
           }
          }
         }
        } while(0);
        if ((label|0) == 281) {
         label = 0;
         if ($864) {
          label = 289;
          break;
         }
        }
        $798 = HEAP32[$0>>2]|0;
        $799 = ((($798)) + 12|0);
        $800 = HEAP32[$799>>2]|0;
        $801 = ((($798)) + 16|0);
        $802 = HEAP32[$801>>2]|0;
        $803 = ($800|0)==($802|0);
        if ($803) {
         $804 = HEAP32[$798>>2]|0;
         $805 = ((($804)) + 36|0);
         $806 = HEAP32[$805>>2]|0;
         __THREW__ = 0;
         $807 = (invoke_ii($806|0,($798|0))|0);
         $808 = __THREW__; __THREW__ = 0;
         $809 = $808&1;
         if ($809) {
          label = 290;
          break;
         } else {
          $$0$i$i182 = $807;
         }
        } else {
         $810 = HEAP32[$800>>2]|0;
         $$0$i$i182 = $810;
        }
        $811 = HEAP8[$760>>0]|0;
        $812 = ($811<<24>>24)<(0);
        if ($812) {
         $813 = HEAP32[$$0152>>2]|0;
         $815 = $813;
        } else {
         $815 = $$0152;
        }
        $814 = (($815) + ($$0<<2)|0);
        $816 = HEAP32[$814>>2]|0;
        $817 = ($$0$i$i182|0)==($816|0);
        if (!($817)) {
         label = 289;
         break;
        }
        $822 = (($$0) + 1)|0;
        $823 = HEAP32[$0>>2]|0;
        $824 = ((($823)) + 12|0);
        $825 = HEAP32[$824>>2]|0;
        $826 = ((($823)) + 16|0);
        $827 = HEAP32[$826>>2]|0;
        $828 = ($825|0)==($827|0);
        if ($828) {
         $829 = HEAP32[$823>>2]|0;
         $830 = ((($829)) + 40|0);
         $831 = HEAP32[$830>>2]|0;
         __THREW__ = 0;
         (invoke_ii($831|0,($823|0))|0);
         $832 = __THREW__; __THREW__ = 0;
         $833 = $832&1;
         if ($833) {
          label = 290;
          break;
         } else {
          $$0 = $822;
          continue;
         }
        } else {
         $834 = ((($825)) + 4|0);
         HEAP32[$824>>2] = $834;
         $$0 = $822;
         continue;
        }
       }
       if ((label|0) == 289) {
        $818 = HEAP32[$5>>2]|0;
        $819 = $818 | 4;
        HEAP32[$5>>2] = $819;
        $$10 = 0;
        label = 298;
        break L336;
       }
       else if ((label|0) == 290) {
        $820 = ___cxa_find_matching_catch_2()|0;
        $821 = tempRet0;
        $$5145 = $820;$$5151 = $821;
        break L21;
       }
      }
     } while(0);
     $835 = HEAP32[$13>>2]|0;
     $836 = HEAP32[$14>>2]|0;
     $837 = ($835|0)==($836|0);
     if ($837) {
      $$10 = 1;
      label = 298;
     } else {
      HEAP32[$25>>2] = 0;
      __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($19,$835,$836,$25);
      $838 = HEAP32[$25>>2]|0;
      $839 = ($838|0)==(0);
      if ($839) {
       $$10 = 1;
       label = 298;
       break;
      } else {
       $840 = HEAP32[$5>>2]|0;
       $841 = $840 | 4;
       HEAP32[$5>>2] = $841;
       $$10 = 0;
       label = 298;
       break;
      }
     }
     break;
    }
   }
   if ((label|0) == 37) {
    $$5145 = $lpad$phi$index;$$5151 = $lpad$phi$index2;
    break;
   }
   else if ((label|0) == 260) {
    $$5145 = $$sink$index;$$5151 = $$sink$index9;
    break;
   }
   else if ((label|0) == 298) {
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($23);
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($22);
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($21);
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($20);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($19);
    $842 = HEAP32[$13>>2]|0;
    HEAP32[$13>>2] = 0;
    $843 = ($842|0)==(0|0);
    if (!($843)) {
     $844 = HEAP32[$27>>2]|0;
     __THREW__ = 0;
     invoke_vi($844|0,($842|0));
     $845 = __THREW__; __THREW__ = 0;
     $846 = $845&1;
     if ($846) {
      $847 = ___cxa_find_matching_catch_3(0|0)|0;
      $848 = tempRet0;
      ___clang_call_terminate($847);
      // unreachable;
     }
    }
    STACKTOP = sp;return ($$10|0);
   }
  }
 } while(0);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($23);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($22);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($21);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($20);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($19);
 $849 = HEAP32[$13>>2]|0;
 HEAP32[$13>>2] = 0;
 $850 = ($849|0)==(0|0);
 if (!($850)) {
  $851 = HEAP32[$27>>2]|0;
  __THREW__ = 0;
  invoke_vi($851|0,($849|0));
  $852 = __THREW__; __THREW__ = 0;
  $853 = $852&1;
  if ($853) {
   $854 = ___cxa_find_matching_catch_3(0|0)|0;
   $855 = tempRet0;
   ___clang_call_terminate($854);
   // unreachable;
  }
 }
 ___resumeException($$5145|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorIS9_EE5valueERS5_E4typeES9_S9_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$028 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0;
 var $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1;
 $4 = ((($0)) + 8|0);
 $5 = ((($4)) + 3|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $9 = ((($0)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$4>>2]|0;
  $12 = $11 & 2147483647;
  $phitmp$i = (($12) + -1)|0;
  $18 = $10;$19 = $phitmp$i;
 } else {
  $8 = $6&255;
  $18 = $8;$19 = 1;
 }
 $13 = $2;
 $14 = (($13) - ($3))|0;
 $15 = $14 >> 2;
 $16 = ($15|0)==(0);
 do {
  if (!($16)) {
   $17 = (($19) - ($18))|0;
   $20 = ($17>>>0)<($15>>>0);
   if ($20) {
    $21 = (($18) + ($15))|0;
    $22 = (($21) - ($19))|0;
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($0,$19,$22,$18,$18,0,0);
    $$pre = HEAP8[$5>>0]|0;
    $23 = $$pre;
   } else {
    $23 = $6;
   }
   $24 = ($23<<24>>24)<(0);
   if ($24) {
    $25 = HEAP32[$0>>2]|0;
    $27 = $25;
   } else {
    $27 = $0;
   }
   $26 = (($27) + ($18<<2)|0);
   $28 = $2;
   $29 = (($28) - ($3))|0;
   $30 = $29 >>> 2;
   $31 = (($18) + ($30))|0;
   $$0 = $26;$$028 = $1;
   while(1) {
    $32 = ($$028|0)==($2|0);
    if ($32) {
     break;
    }
    $33 = HEAP32[$$028>>2]|0;
    HEAP32[$$0>>2] = $33;
    $34 = ((($$0)) + 4|0);
    $35 = ((($$028)) + 4|0);
    $$0 = $34;$$028 = $35;
   }
   $scevgep = (($27) + ($31<<2)|0);
   HEAP32[$scevgep>>2] = 0;
   $36 = (($18) + ($15))|0;
   if ($24) {
    $37 = ((($0)) + 4|0);
    HEAP32[$37>>2] = $36;
    break;
   } else {
    $38 = $36&255;
    HEAP8[$5>>0] = $38;
    break;
   }
  }
 } while(0);
 return ($0|0);
}
function __ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$0$i$i$i = 0, $$0$i$i$i40 = 0, $$0$i$i$i43 = 0, $$0$i$i$i47 = 0, $$0$i$i$i52 = 0, $$0$i$i$i57 = 0, $$0$i$i$i62 = 0, $$0$i$i$i67 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i41 = 0, $exitcond$i$i$i44 = 0, $exitcond$i$i$i48 = 0, $exitcond$i$i$i53 = 0, $exitcond$i$i$i58 = 0, $exitcond$i$i$i63 = 0, $exitcond$i$i$i68 = 0, $storemerge = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $10 = sp + 100|0;
 $11 = sp + 88|0;
 $12 = sp + 76|0;
 $13 = sp + 64|0;
 $14 = sp + 52|0;
 $15 = sp + 48|0;
 $16 = sp + 36|0;
 $17 = sp + 24|0;
 $18 = sp + 12|0;
 $19 = sp;
 if ($0) {
  $20 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,42448)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($21)) + 44|0);
  $23 = HEAP32[$22>>2]|0;
  FUNCTION_TABLE_vii[$23 & 1023]($10,$20);
  $24 = HEAP32[$10>>2]|0;
  HEAP8[$2>>0]=$24&255;HEAP8[$2+1>>0]=($24>>8)&255;HEAP8[$2+2>>0]=($24>>16)&255;HEAP8[$2+3>>0]=$24>>24;
  $25 = HEAP32[$20>>2]|0;
  $26 = ((($25)) + 32|0);
  $27 = HEAP32[$26>>2]|0;
  FUNCTION_TABLE_vii[$27 & 1023]($11,$20);
  $28 = ((($8)) + 8|0);
  $29 = ((($28)) + 3|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = ($30<<24>>24)<(0);
  if ($31) {
   $32 = HEAP32[$8>>2]|0;
   HEAP32[$32>>2] = 0;
   $33 = ((($8)) + 4|0);
   HEAP32[$33>>2] = 0;
  } else {
   HEAP32[$8>>2] = 0;
   HEAP8[$29>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(815,($8|0),0);
  $34 = __THREW__; __THREW__ = 0;
  $35 = $34&1;
  if ($35) {
   $36 = ___cxa_find_matching_catch_3(0|0)|0;
   $37 = tempRet0;
   ___clang_call_terminate($36);
   // unreachable;
  }
  ;HEAP32[$8>>2]=HEAP32[$11>>2]|0;HEAP32[$8+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$11+8>>2]|0;
  $$0$i$i$i = 0;
  while(1) {
   $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
   if ($exitcond$i$i$i) {
    break;
   }
   $38 = (($11) + ($$0$i$i$i<<2)|0);
   HEAP32[$38>>2] = 0;
   $39 = (($$0$i$i$i) + 1)|0;
   $$0$i$i$i = $39;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  $40 = HEAP32[$20>>2]|0;
  $41 = ((($40)) + 28|0);
  $42 = HEAP32[$41>>2]|0;
  FUNCTION_TABLE_vii[$42 & 1023]($12,$20);
  $43 = ((($7)) + 8|0);
  $44 = ((($43)) + 3|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = ($45<<24>>24)<(0);
  if ($46) {
   $47 = HEAP32[$7>>2]|0;
   HEAP32[$47>>2] = 0;
   $48 = ((($7)) + 4|0);
   HEAP32[$48>>2] = 0;
  } else {
   HEAP32[$7>>2] = 0;
   HEAP8[$44>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(815,($7|0),0);
  $49 = __THREW__; __THREW__ = 0;
  $50 = $49&1;
  if ($50) {
   $51 = ___cxa_find_matching_catch_3(0|0)|0;
   $52 = tempRet0;
   ___clang_call_terminate($51);
   // unreachable;
  }
  ;HEAP32[$7>>2]=HEAP32[$12>>2]|0;HEAP32[$7+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$12+8>>2]|0;
  $$0$i$i$i40 = 0;
  while(1) {
   $exitcond$i$i$i41 = ($$0$i$i$i40|0)==(3);
   if ($exitcond$i$i$i41) {
    break;
   }
   $53 = (($12) + ($$0$i$i$i40<<2)|0);
   HEAP32[$53>>2] = 0;
   $54 = (($$0$i$i$i40) + 1)|0;
   $$0$i$i$i40 = $54;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($12);
  $55 = HEAP32[$20>>2]|0;
  $56 = ((($55)) + 12|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (FUNCTION_TABLE_ii[$57 & 1023]($20)|0);
  HEAP32[$3>>2] = $58;
  $59 = HEAP32[$20>>2]|0;
  $60 = ((($59)) + 16|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (FUNCTION_TABLE_ii[$61 & 1023]($20)|0);
  HEAP32[$4>>2] = $62;
  $63 = HEAP32[$20>>2]|0;
  $64 = ((($63)) + 20|0);
  $65 = HEAP32[$64>>2]|0;
  FUNCTION_TABLE_vii[$65 & 1023]($13,$20);
  $66 = ((($5)) + 11|0);
  $67 = HEAP8[$66>>0]|0;
  $68 = ($67<<24>>24)<(0);
  if ($68) {
   $69 = HEAP32[$5>>2]|0;
   HEAP8[$69>>0] = 0;
   $70 = ((($5)) + 4|0);
   HEAP32[$70>>2] = 0;
  } else {
   HEAP8[$5>>0] = 0;
   HEAP8[$66>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(808,($5|0),0);
  $71 = __THREW__; __THREW__ = 0;
  $72 = $71&1;
  if ($72) {
   $73 = ___cxa_find_matching_catch_3(0|0)|0;
   $74 = tempRet0;
   ___clang_call_terminate($73);
   // unreachable;
  }
  ;HEAP32[$5>>2]=HEAP32[$13>>2]|0;HEAP32[$5+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$13+8>>2]|0;
  $$0$i$i$i43 = 0;
  while(1) {
   $exitcond$i$i$i44 = ($$0$i$i$i43|0)==(3);
   if ($exitcond$i$i$i44) {
    break;
   }
   $75 = (($13) + ($$0$i$i$i43<<2)|0);
   HEAP32[$75>>2] = 0;
   $76 = (($$0$i$i$i43) + 1)|0;
   $$0$i$i$i43 = $76;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($13);
  $77 = HEAP32[$20>>2]|0;
  $78 = ((($77)) + 24|0);
  $79 = HEAP32[$78>>2]|0;
  FUNCTION_TABLE_vii[$79 & 1023]($14,$20);
  $80 = ((($6)) + 8|0);
  $81 = ((($80)) + 3|0);
  $82 = HEAP8[$81>>0]|0;
  $83 = ($82<<24>>24)<(0);
  if ($83) {
   $84 = HEAP32[$6>>2]|0;
   HEAP32[$84>>2] = 0;
   $85 = ((($6)) + 4|0);
   HEAP32[$85>>2] = 0;
  } else {
   HEAP32[$6>>2] = 0;
   HEAP8[$81>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(815,($6|0),0);
  $86 = __THREW__; __THREW__ = 0;
  $87 = $86&1;
  if ($87) {
   $88 = ___cxa_find_matching_catch_3(0|0)|0;
   $89 = tempRet0;
   ___clang_call_terminate($88);
   // unreachable;
  }
  ;HEAP32[$6>>2]=HEAP32[$14>>2]|0;HEAP32[$6+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$14+8>>2]|0;
  $$0$i$i$i47 = 0;
  while(1) {
   $exitcond$i$i$i48 = ($$0$i$i$i47|0)==(3);
   if ($exitcond$i$i$i48) {
    break;
   }
   $90 = (($14) + ($$0$i$i$i47<<2)|0);
   HEAP32[$90>>2] = 0;
   $91 = (($$0$i$i$i47) + 1)|0;
   $$0$i$i$i47 = $91;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($14);
  $92 = HEAP32[$20>>2]|0;
  $93 = ((($92)) + 36|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (FUNCTION_TABLE_ii[$94 & 1023]($20)|0);
  $storemerge = $95;
 } else {
  $96 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,42440)|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = ((($97)) + 44|0);
  $99 = HEAP32[$98>>2]|0;
  FUNCTION_TABLE_vii[$99 & 1023]($15,$96);
  $100 = HEAP32[$15>>2]|0;
  HEAP8[$2>>0]=$100&255;HEAP8[$2+1>>0]=($100>>8)&255;HEAP8[$2+2>>0]=($100>>16)&255;HEAP8[$2+3>>0]=$100>>24;
  $101 = HEAP32[$96>>2]|0;
  $102 = ((($101)) + 32|0);
  $103 = HEAP32[$102>>2]|0;
  FUNCTION_TABLE_vii[$103 & 1023]($16,$96);
  $104 = ((($8)) + 8|0);
  $105 = ((($104)) + 3|0);
  $106 = HEAP8[$105>>0]|0;
  $107 = ($106<<24>>24)<(0);
  if ($107) {
   $108 = HEAP32[$8>>2]|0;
   HEAP32[$108>>2] = 0;
   $109 = ((($8)) + 4|0);
   HEAP32[$109>>2] = 0;
  } else {
   HEAP32[$8>>2] = 0;
   HEAP8[$105>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(815,($8|0),0);
  $110 = __THREW__; __THREW__ = 0;
  $111 = $110&1;
  if ($111) {
   $112 = ___cxa_find_matching_catch_3(0|0)|0;
   $113 = tempRet0;
   ___clang_call_terminate($112);
   // unreachable;
  }
  ;HEAP32[$8>>2]=HEAP32[$16>>2]|0;HEAP32[$8+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$16+8>>2]|0;
  $$0$i$i$i52 = 0;
  while(1) {
   $exitcond$i$i$i53 = ($$0$i$i$i52|0)==(3);
   if ($exitcond$i$i$i53) {
    break;
   }
   $114 = (($16) + ($$0$i$i$i52<<2)|0);
   HEAP32[$114>>2] = 0;
   $115 = (($$0$i$i$i52) + 1)|0;
   $$0$i$i$i52 = $115;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($16);
  $116 = HEAP32[$96>>2]|0;
  $117 = ((($116)) + 28|0);
  $118 = HEAP32[$117>>2]|0;
  FUNCTION_TABLE_vii[$118 & 1023]($17,$96);
  $119 = ((($7)) + 8|0);
  $120 = ((($119)) + 3|0);
  $121 = HEAP8[$120>>0]|0;
  $122 = ($121<<24>>24)<(0);
  if ($122) {
   $123 = HEAP32[$7>>2]|0;
   HEAP32[$123>>2] = 0;
   $124 = ((($7)) + 4|0);
   HEAP32[$124>>2] = 0;
  } else {
   HEAP32[$7>>2] = 0;
   HEAP8[$120>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(815,($7|0),0);
  $125 = __THREW__; __THREW__ = 0;
  $126 = $125&1;
  if ($126) {
   $127 = ___cxa_find_matching_catch_3(0|0)|0;
   $128 = tempRet0;
   ___clang_call_terminate($127);
   // unreachable;
  }
  ;HEAP32[$7>>2]=HEAP32[$17>>2]|0;HEAP32[$7+4>>2]=HEAP32[$17+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$17+8>>2]|0;
  $$0$i$i$i57 = 0;
  while(1) {
   $exitcond$i$i$i58 = ($$0$i$i$i57|0)==(3);
   if ($exitcond$i$i$i58) {
    break;
   }
   $129 = (($17) + ($$0$i$i$i57<<2)|0);
   HEAP32[$129>>2] = 0;
   $130 = (($$0$i$i$i57) + 1)|0;
   $$0$i$i$i57 = $130;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($17);
  $131 = HEAP32[$96>>2]|0;
  $132 = ((($131)) + 12|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = (FUNCTION_TABLE_ii[$133 & 1023]($96)|0);
  HEAP32[$3>>2] = $134;
  $135 = HEAP32[$96>>2]|0;
  $136 = ((($135)) + 16|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = (FUNCTION_TABLE_ii[$137 & 1023]($96)|0);
  HEAP32[$4>>2] = $138;
  $139 = HEAP32[$96>>2]|0;
  $140 = ((($139)) + 20|0);
  $141 = HEAP32[$140>>2]|0;
  FUNCTION_TABLE_vii[$141 & 1023]($18,$96);
  $142 = ((($5)) + 11|0);
  $143 = HEAP8[$142>>0]|0;
  $144 = ($143<<24>>24)<(0);
  if ($144) {
   $145 = HEAP32[$5>>2]|0;
   HEAP8[$145>>0] = 0;
   $146 = ((($5)) + 4|0);
   HEAP32[$146>>2] = 0;
  } else {
   HEAP8[$5>>0] = 0;
   HEAP8[$142>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(808,($5|0),0);
  $147 = __THREW__; __THREW__ = 0;
  $148 = $147&1;
  if ($148) {
   $149 = ___cxa_find_matching_catch_3(0|0)|0;
   $150 = tempRet0;
   ___clang_call_terminate($149);
   // unreachable;
  }
  ;HEAP32[$5>>2]=HEAP32[$18>>2]|0;HEAP32[$5+4>>2]=HEAP32[$18+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$18+8>>2]|0;
  $$0$i$i$i62 = 0;
  while(1) {
   $exitcond$i$i$i63 = ($$0$i$i$i62|0)==(3);
   if ($exitcond$i$i$i63) {
    break;
   }
   $151 = (($18) + ($$0$i$i$i62<<2)|0);
   HEAP32[$151>>2] = 0;
   $152 = (($$0$i$i$i62) + 1)|0;
   $$0$i$i$i62 = $152;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($18);
  $153 = HEAP32[$96>>2]|0;
  $154 = ((($153)) + 24|0);
  $155 = HEAP32[$154>>2]|0;
  FUNCTION_TABLE_vii[$155 & 1023]($19,$96);
  $156 = ((($6)) + 8|0);
  $157 = ((($156)) + 3|0);
  $158 = HEAP8[$157>>0]|0;
  $159 = ($158<<24>>24)<(0);
  if ($159) {
   $160 = HEAP32[$6>>2]|0;
   HEAP32[$160>>2] = 0;
   $161 = ((($6)) + 4|0);
   HEAP32[$161>>2] = 0;
  } else {
   HEAP32[$6>>2] = 0;
   HEAP8[$157>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(815,($6|0),0);
  $162 = __THREW__; __THREW__ = 0;
  $163 = $162&1;
  if ($163) {
   $164 = ___cxa_find_matching_catch_3(0|0)|0;
   $165 = tempRet0;
   ___clang_call_terminate($164);
   // unreachable;
  }
  ;HEAP32[$6>>2]=HEAP32[$19>>2]|0;HEAP32[$6+4>>2]=HEAP32[$19+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$19+8>>2]|0;
  $$0$i$i$i67 = 0;
  while(1) {
   $exitcond$i$i$i68 = ($$0$i$i$i67|0)==(3);
   if ($exitcond$i$i$i68) {
    break;
   }
   $166 = (($19) + ($$0$i$i$i67<<2)|0);
   HEAP32[$166>>2] = 0;
   $167 = (($$0$i$i$i67) + 1)|0;
   $$0$i$i$i67 = $167;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($19);
  $168 = HEAP32[$96>>2]|0;
  $169 = ((($168)) + 36|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = (FUNCTION_TABLE_ii[$170 & 1023]($96)|0);
  $storemerge = $171;
 }
 HEAP32[$9>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$34 = 0, $$pr = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(801|0);
 $6 = HEAP32[$2>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($6) - ($7))|0;
 $9 = ($8>>>0)<(2147483647);
 $10 = $8 << 1;
 $$34 = $9 ? $10 : -1;
 $11 = ($$34|0)==(0);
 $$ = $11 ? 4 : $$34;
 $12 = HEAP32[$1>>2]|0;
 $13 = (($12) - ($7))|0;
 $14 = $13 >> 2;
 $phitmp = $7;
 $15 = $5 ? $phitmp : 0;
 $16 = (_realloc($15,$$)|0);
 $17 = ($16|0)==(0|0);
 if ($17) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($5) {
   $18 = $16;
   HEAP32[$0>>2] = $18;
   $28 = $16;
  } else {
   $$pr = HEAP32[$0>>2]|0;
   $19 = $16;
   HEAP32[$0>>2] = $19;
   $20 = ($$pr|0)==(0|0);
   if ($20) {
    $28 = $16;
   } else {
    $21 = HEAP32[$3>>2]|0;
    __THREW__ = 0;
    invoke_vi($21|0,($$pr|0));
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     $24 = ___cxa_find_matching_catch_3(0|0)|0;
     $25 = tempRet0;
     ___clang_call_terminate($24);
     // unreachable;
    } else {
     $$pre = HEAP32[$0>>2]|0;
     $28 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$3>>2] = (809);
 $26 = $$ >>> 2;
 $27 = (($28) + ($14<<2)|0);
 HEAP32[$1>>2] = $27;
 $29 = HEAP32[$0>>2]|0;
 $30 = (($29) + ($26<<2)|0);
 HEAP32[$2>>2] = $30;
 return;
}
function __ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i55 = 0, $$0$i$i58 = 0, $$045 = 0, $$046 = 0, $$047 = 0, $$048 = 0, $$1 = 0, $$149 = 0, $$3 = 0, $$351 = 0, $$4 = 0, $$452 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $$pre104 = 0, $$pre106 = 0, $$sroa$070$0 = 0;
 var $$sroa$070$1 = 0, $$sroa$082$0 = 0, $$sroa$082$1 = 0, $$sroa$082$2 = 0, $$sroa$095$0 = 0, $$sroa$095$1 = 0, $$sroa$095$2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $exitcond$i$i56 = 0, $exitcond$i$i59 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(400|0);
 $$byval_copy = sp + 76|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $6 = sp + 288|0;
 $7 = sp + 72|0;
 $8 = sp + 188|0;
 $9 = sp + 68|0;
 $10 = sp + 184|0;
 $11 = sp + 181|0;
 $12 = sp + 180|0;
 $13 = sp + 56|0;
 $14 = sp + 44|0;
 $15 = sp + 32|0;
 $16 = sp + 28|0;
 $17 = sp + 80|0;
 $18 = sp + 24|0;
 $19 = sp + 20|0;
 $20 = sp + 16|0;
 HEAP32[$7>>2] = $6;
 HEAPF64[$vararg_buffer>>3] = $5;
 $21 = (_snprintf($6,100,34183,$vararg_buffer)|0);
 $22 = ($21>>>0)>(99);
 do {
  if ($22) {
   __THREW__ = 0;
   $23 = (invoke_i(762)|0);
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if ($25) {
    $$sroa$082$0 = 0;$$sroa$095$0 = 0;
    label = 8;
   } else {
    __THREW__ = 0;
    HEAPF64[$vararg_buffer1>>3] = $5;
    $26 = (invoke_iiiii(780,($7|0),($23|0),(34183|0),($vararg_buffer1|0))|0);
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if ($28) {
     $$sroa$082$0 = 0;$$sroa$095$0 = 0;
     label = 8;
    } else {
     $29 = HEAP32[$7>>2]|0;
     $30 = ($29|0)==(0|0);
     if ($30) {
      __THREW__ = 0;
      invoke_v(777);
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if ($33) {
       $$sroa$082$0 = 0;$$sroa$095$0 = 0;
       label = 8;
       break;
      }
      $$pre = HEAP32[$7>>2]|0;
      $149 = $$pre;
     } else {
      $31 = $29;
      $149 = $31;
     }
     $36 = (_malloc($26)|0);
     $37 = $36;
     $38 = ($36|0)==(0|0);
     if ($38) {
      __THREW__ = 0;
      invoke_v(777);
      $39 = __THREW__; __THREW__ = 0;
      $40 = $39&1;
      if ($40) {
       $$sroa$082$0 = $37;$$sroa$095$0 = $149;
       label = 8;
      } else {
       $$0 = 0;$$046 = $26;$$sroa$082$1 = $37;$$sroa$095$1 = $149;
       label = 11;
      }
     } else {
      $$0 = $36;$$046 = $26;$$sroa$082$1 = $37;$$sroa$095$1 = $149;
      label = 11;
     }
    }
   }
  } else {
   $$0 = $8;$$046 = $21;$$sroa$082$1 = 0;$$sroa$095$1 = 0;
   label = 11;
  }
 } while(0);
 if ((label|0) == 11) {
  __THREW__ = 0;
  $41 = (invoke_ii(658,($3|0))|0);
  $42 = __THREW__; __THREW__ = 0;
  $43 = $42&1;
  if ($43) {
   $$sroa$082$0 = $$sroa$082$1;$$sroa$095$0 = $$sroa$095$1;
   label = 8;
  } else {
   HEAP32[$9>>2] = $41;
   __THREW__ = 0;
   $44 = (invoke_iii(659,($9|0),(40712|0))|0);
   $45 = __THREW__; __THREW__ = 0;
   $46 = $45&1;
   do {
    if ($46) {
     $111 = ___cxa_find_matching_catch_2()|0;
     $112 = tempRet0;
     $$3 = $111;$$351 = $112;$144 = $41;
    } else {
     $47 = HEAP32[$7>>2]|0;
     $48 = (($47) + ($$046)|0);
     $49 = HEAP32[$44>>2]|0;
     $50 = ((($49)) + 32|0);
     $51 = HEAP32[$50>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($51|0,($44|0),($47|0),($48|0),($$0|0))|0);
     $52 = __THREW__; __THREW__ = 0;
     $53 = $52&1;
     if ($53) {
      $113 = ___cxa_find_matching_catch_2()|0;
      $114 = tempRet0;
      $$3 = $113;$$351 = $114;$144 = $41;
      break;
     }
     $54 = ($$046|0)==(0);
     if ($54) {
      $64 = 0;
     } else {
      $55 = HEAP32[$7>>2]|0;
      $56 = HEAP8[$55>>0]|0;
      $57 = ($56<<24>>24)==(45);
      $64 = $57;
     }
     ;HEAP32[$13>>2]=0|0;HEAP32[$13+4>>2]=0|0;HEAP32[$13+8>>2]=0|0;
     $$0$i$i = 0;
     while(1) {
      $exitcond$i$i = ($$0$i$i|0)==(3);
      if ($exitcond$i$i) {
       break;
      }
      $58 = (($13) + ($$0$i$i<<2)|0);
      HEAP32[$58>>2] = 0;
      $59 = (($$0$i$i) + 1)|0;
      $$0$i$i = $59;
     }
     ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;
     $$0$i$i55 = 0;
     while(1) {
      $exitcond$i$i56 = ($$0$i$i55|0)==(3);
      if ($exitcond$i$i56) {
       break;
      }
      $60 = (($14) + ($$0$i$i55<<2)|0);
      HEAP32[$60>>2] = 0;
      $61 = (($$0$i$i55) + 1)|0;
      $$0$i$i55 = $61;
     }
     ;HEAP32[$15>>2]=0|0;HEAP32[$15+4>>2]=0|0;HEAP32[$15+8>>2]=0|0;
     $$0$i$i58 = 0;
     while(1) {
      $exitcond$i$i59 = ($$0$i$i58|0)==(3);
      if ($exitcond$i$i59) {
       break;
      }
      $62 = (($15) + ($$0$i$i58<<2)|0);
      HEAP32[$62>>2] = 0;
      $63 = (($$0$i$i58) + 1)|0;
      $$0$i$i58 = $63;
     }
     __THREW__ = 0;
     invoke_viiiiiiiiii(816,($2|0),($64|0),($9|0),($10|0),($11|0),($12|0),($13|0),($14|0),($15|0),($16|0));
     $65 = __THREW__; __THREW__ = 0;
     $66 = $65&1;
     if ($66) {
      $115 = ___cxa_find_matching_catch_2()|0;
      $116 = tempRet0;
      $$1 = $115;$$149 = $116;
     } else {
      $67 = HEAP32[$16>>2]|0;
      $68 = ($$046|0)>($67|0);
      if ($68) {
       $69 = (($$046) - ($67))|0;
       $70 = $69 << 1;
       $71 = ((($15)) + 11|0);
       $72 = HEAP8[$71>>0]|0;
       $73 = ($72<<24>>24)<(0);
       $74 = ((($15)) + 4|0);
       $75 = HEAP32[$74>>2]|0;
       $76 = $72&255;
       $77 = $73 ? $75 : $76;
       $78 = ((($14)) + 11|0);
       $79 = HEAP8[$78>>0]|0;
       $80 = ($79<<24>>24)<(0);
       $81 = ((($14)) + 4|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = $79&255;
       $84 = $80 ? $82 : $83;
       $85 = $70 | 1;
       $86 = (($77) + ($85))|0;
       $87 = (($86) + ($84))|0;
       $$pn = $87;
      } else {
       $88 = ((($15)) + 11|0);
       $89 = HEAP8[$88>>0]|0;
       $90 = ($89<<24>>24)<(0);
       $91 = ((($15)) + 4|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = $89&255;
       $94 = $90 ? $92 : $93;
       $95 = ((($14)) + 11|0);
       $96 = HEAP8[$95>>0]|0;
       $97 = ($96<<24>>24)<(0);
       $98 = ((($14)) + 4|0);
       $99 = HEAP32[$98>>2]|0;
       $100 = $96&255;
       $101 = $97 ? $99 : $100;
       $102 = (($94) + 2)|0;
       $103 = (($102) + ($101))|0;
       $$pn = $103;
      }
      $104 = (($$pn) + ($67))|0;
      $105 = ($104>>>0)>(100);
      do {
       if ($105) {
        $106 = (_malloc($104)|0);
        $107 = $106;
        $108 = ($106|0)==(0|0);
        if ($108) {
         __THREW__ = 0;
         invoke_v(777);
         $109 = __THREW__; __THREW__ = 0;
         $110 = $109&1;
         if ($110) {
          $117 = ___cxa_find_matching_catch_2()|0;
          $118 = tempRet0;
          $$047 = $117;$$048 = $118;$$sroa$070$1 = $107;
          break;
         } else {
          $$pre104 = HEAP32[$16>>2]|0;
          $$045 = 0;$$sroa$070$0 = $107;$124 = $$pre104;
          label = 37;
          break;
         }
        } else {
         $$045 = $106;$$sroa$070$0 = $107;$124 = $67;
         label = 37;
        }
       } else {
        $$045 = $17;$$sroa$070$0 = 0;$124 = $67;
        label = 37;
       }
      } while(0);
      if ((label|0) == 37) {
       $119 = ((($3)) + 4|0);
       $120 = HEAP32[$119>>2]|0;
       $121 = (($$0) + ($$046)|0);
       $122 = HEAP8[$11>>0]|0;
       $123 = HEAP8[$12>>0]|0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(817,($$045|0),($18|0),($19|0),($120|0),($$0|0),($121|0),($44|0),($64|0),($10|0),($122|0),($123|0),($13|0),($14|0),($15|0),($124|0));
       $125 = __THREW__; __THREW__ = 0;
       $126 = $125&1;
       if (!($126)) {
        $127 = HEAP32[$1>>2]|0;
        HEAP32[$20>>2] = $127;
        $128 = HEAP32[$18>>2]|0;
        $129 = HEAP32[$19>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy>>2]=HEAP32[$20>>2]|0;
        $130 = (invoke_iiiiiii(661,($$byval_copy|0),($$045|0),($128|0),($129|0),($3|0),($4|0))|0);
        $131 = __THREW__; __THREW__ = 0;
        $132 = $131&1;
        if (!($132)) {
         $133 = ($$sroa$070$0|0)==(0);
         if (!($133)) {
          $134 = $$sroa$070$0;
          _free($134);
         }
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($15);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($14);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($13);
         $135 = HEAP32[$9>>2]|0;
         (__ZNSt3__214__shared_count16__release_sharedEv($135)|0);
         $136 = ($$sroa$082$1|0)==(0);
         if (!($136)) {
          $137 = $$sroa$082$1;
          _free($137);
         }
         $138 = ($$sroa$095$1|0)==(0);
         if (!($138)) {
          $139 = $$sroa$095$1;
          _free($139);
         }
         STACKTOP = sp;return ($130|0);
        }
       }
       $140 = ___cxa_find_matching_catch_2()|0;
       $141 = tempRet0;
       $$047 = $140;$$048 = $141;$$sroa$070$1 = $$sroa$070$0;
      }
      $142 = ($$sroa$070$1|0)==(0);
      if (!($142)) {
       $143 = $$sroa$070$1;
       _free($143);
      }
      $$1 = $$047;$$149 = $$048;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($15);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($14);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($13);
     $$pre106 = HEAP32[$9>>2]|0;
     $$3 = $$1;$$351 = $$149;$144 = $$pre106;
    }
   } while(0);
   (__ZNSt3__214__shared_count16__release_sharedEv($144)|0);
   $$4 = $$3;$$452 = $$351;$$sroa$082$2 = $$sroa$082$1;$$sroa$095$2 = $$sroa$095$1;
  }
 }
 if ((label|0) == 8) {
  $34 = ___cxa_find_matching_catch_2()|0;
  $35 = tempRet0;
  $$4 = $34;$$452 = $35;$$sroa$082$2 = $$sroa$082$0;$$sroa$095$2 = $$sroa$095$0;
 }
 $145 = ($$sroa$082$2|0)==(0);
 if (!($145)) {
  $146 = $$sroa$082$2;
  _free($146);
 }
 $147 = ($$sroa$095$2|0)==(0);
 if (!($147)) {
  $148 = $$sroa$095$2;
  _free($148);
 }
 ___resumeException($$4|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i36 = 0, $$0$i$i39 = 0, $$031 = 0, $$032 = 0, $$1 = 0, $$133 = 0, $$3 = 0, $$335 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $$pre62 = 0, $$pre63 = 0, $$sroa$052$0 = 0, $$sroa$052$1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $exitcond$i$i37 = 0, $exitcond$i$i40 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $$byval_copy = sp + 56|0;
 $6 = sp + 52|0;
 $7 = sp + 164|0;
 $8 = sp + 161|0;
 $9 = sp + 160|0;
 $10 = sp + 40|0;
 $11 = sp + 28|0;
 $12 = sp + 16|0;
 $13 = sp + 12|0;
 $14 = sp + 60|0;
 $15 = sp + 8|0;
 $16 = sp + 4|0;
 $17 = sp;
 $18 = (__ZNKSt3__28ios_base6getlocEv($3)|0);
 HEAP32[$6>>2] = $18;
 __THREW__ = 0;
 $19 = (invoke_iii(659,($6|0),(40712|0))|0);
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 L1: do {
  if ($21) {
   $98 = ___cxa_find_matching_catch_2()|0;
   $99 = tempRet0;
   $$3 = $98;$$335 = $99;
  } else {
   $22 = ((($5)) + 11|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = ($23<<24>>24)<(0);
   $25 = ((($5)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $23&255;
   $28 = $24 ? $26 : $27;
   $29 = ($28|0)==(0);
   do {
    if ($29) {
     $46 = 0;
    } else {
     $30 = HEAP32[$5>>2]|0;
     $31 = $24 ? $30 : $5;
     $32 = HEAP8[$31>>0]|0;
     $33 = HEAP32[$19>>2]|0;
     $34 = ((($33)) + 28|0);
     $35 = HEAP32[$34>>2]|0;
     __THREW__ = 0;
     $36 = (invoke_iii($35|0,($19|0),45)|0);
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     if ($38) {
      $100 = ___cxa_find_matching_catch_2()|0;
      $101 = tempRet0;
      $$3 = $100;$$335 = $101;
      break L1;
     } else {
      $39 = ($32<<24>>24)==($36<<24>>24);
      $46 = $39;
      break;
     }
    }
   } while(0);
   ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
   $$0$i$i = 0;
   while(1) {
    $exitcond$i$i = ($$0$i$i|0)==(3);
    if ($exitcond$i$i) {
     break;
    }
    $40 = (($10) + ($$0$i$i<<2)|0);
    HEAP32[$40>>2] = 0;
    $41 = (($$0$i$i) + 1)|0;
    $$0$i$i = $41;
   }
   ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
   $$0$i$i36 = 0;
   while(1) {
    $exitcond$i$i37 = ($$0$i$i36|0)==(3);
    if ($exitcond$i$i37) {
     break;
    }
    $42 = (($11) + ($$0$i$i36<<2)|0);
    HEAP32[$42>>2] = 0;
    $43 = (($$0$i$i36) + 1)|0;
    $$0$i$i36 = $43;
   }
   ;HEAP32[$12>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;
   $$0$i$i39 = 0;
   while(1) {
    $exitcond$i$i40 = ($$0$i$i39|0)==(3);
    if ($exitcond$i$i40) {
     break;
    }
    $44 = (($12) + ($$0$i$i39<<2)|0);
    HEAP32[$44>>2] = 0;
    $45 = (($$0$i$i39) + 1)|0;
    $$0$i$i39 = $45;
   }
   __THREW__ = 0;
   invoke_viiiiiiiiii(816,($2|0),($46|0),($6|0),($7|0),($8|0),($9|0),($10|0),($11|0),($12|0),($13|0));
   $47 = __THREW__; __THREW__ = 0;
   $48 = $47&1;
   if ($48) {
    $102 = ___cxa_find_matching_catch_2()|0;
    $103 = tempRet0;
    $$1 = $102;$$133 = $103;
   } else {
    $49 = HEAP8[$22>>0]|0;
    $50 = ($49<<24>>24)<(0);
    $51 = HEAP32[$25>>2]|0;
    $52 = $49&255;
    $53 = $50 ? $51 : $52;
    $54 = HEAP32[$13>>2]|0;
    $55 = ($53|0)>($54|0);
    if ($55) {
     $56 = (($53) - ($54))|0;
     $57 = $56 << 1;
     $58 = ((($12)) + 11|0);
     $59 = HEAP8[$58>>0]|0;
     $60 = ($59<<24>>24)<(0);
     $61 = ((($12)) + 4|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = $59&255;
     $64 = $60 ? $62 : $63;
     $65 = ((($11)) + 11|0);
     $66 = HEAP8[$65>>0]|0;
     $67 = ($66<<24>>24)<(0);
     $68 = ((($11)) + 4|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = $66&255;
     $71 = $67 ? $69 : $70;
     $72 = $57 | 1;
     $73 = (($64) + ($72))|0;
     $74 = (($73) + ($71))|0;
     $$pn = $74;
    } else {
     $75 = ((($12)) + 11|0);
     $76 = HEAP8[$75>>0]|0;
     $77 = ($76<<24>>24)<(0);
     $78 = ((($12)) + 4|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = $76&255;
     $81 = $77 ? $79 : $80;
     $82 = ((($11)) + 11|0);
     $83 = HEAP8[$82>>0]|0;
     $84 = ($83<<24>>24)<(0);
     $85 = ((($11)) + 4|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = $83&255;
     $88 = $84 ? $86 : $87;
     $89 = (($81) + 2)|0;
     $90 = (($89) + ($88))|0;
     $$pn = $90;
    }
    $91 = (($$pn) + ($54))|0;
    $92 = ($91>>>0)>(100);
    do {
     if ($92) {
      $93 = (_malloc($91)|0);
      $94 = $93;
      $95 = ($93|0)==(0|0);
      if ($95) {
       __THREW__ = 0;
       invoke_v(777);
       $96 = __THREW__; __THREW__ = 0;
       $97 = $96&1;
       if ($97) {
        $104 = ___cxa_find_matching_catch_2()|0;
        $105 = tempRet0;
        $$0 = $104;$$032 = $105;$$sroa$052$1 = $94;
        break;
       } else {
        $$pre = HEAP8[$22>>0]|0;
        $$pre62 = HEAP32[$25>>2]|0;
        $$pre63 = HEAP32[$13>>2]|0;
        $$031 = 0;$$sroa$052$0 = $94;$108 = $$pre;$113 = $$pre62;$118 = $$pre63;
        label = 26;
        break;
       }
      } else {
       $$031 = $93;$$sroa$052$0 = $94;$108 = $49;$113 = $51;$118 = $54;
       label = 26;
      }
     } else {
      $$031 = $14;$$sroa$052$0 = 0;$108 = $49;$113 = $51;$118 = $54;
      label = 26;
     }
    } while(0);
    if ((label|0) == 26) {
     $106 = ((($3)) + 4|0);
     $107 = HEAP32[$106>>2]|0;
     $109 = ($108<<24>>24)<(0);
     $110 = HEAP32[$5>>2]|0;
     $111 = $109 ? $110 : $5;
     $112 = $108&255;
     $114 = $109 ? $113 : $112;
     $115 = (($111) + ($114)|0);
     $116 = HEAP8[$8>>0]|0;
     $117 = HEAP8[$9>>0]|0;
     __THREW__ = 0;
     invoke_viiiiiiiiiiiiiii(817,($$031|0),($15|0),($16|0),($107|0),($111|0),($115|0),($19|0),($46|0),($7|0),($116|0),($117|0),($10|0),($11|0),($12|0),($118|0));
     $119 = __THREW__; __THREW__ = 0;
     $120 = $119&1;
     if (!($120)) {
      $121 = HEAP32[$1>>2]|0;
      HEAP32[$17>>2] = $121;
      $122 = HEAP32[$15>>2]|0;
      $123 = HEAP32[$16>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy>>2]=HEAP32[$17>>2]|0;
      $124 = (invoke_iiiiiii(661,($$byval_copy|0),($$031|0),($122|0),($123|0),($3|0),($4|0))|0);
      $125 = __THREW__; __THREW__ = 0;
      $126 = $125&1;
      if (!($126)) {
       $127 = ($$sroa$052$0|0)==(0);
       if (!($127)) {
        $128 = $$sroa$052$0;
        _free($128);
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($12);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
       $129 = HEAP32[$6>>2]|0;
       (__ZNSt3__214__shared_count16__release_sharedEv($129)|0);
       STACKTOP = sp;return ($124|0);
      }
     }
     $130 = ___cxa_find_matching_catch_2()|0;
     $131 = tempRet0;
     $$0 = $130;$$032 = $131;$$sroa$052$1 = $$sroa$052$0;
    }
    $132 = ($$sroa$052$1|0)==(0);
    if (!($132)) {
     $133 = $$sroa$052$1;
     _free($133);
    }
    $$1 = $$0;$$133 = $$032;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($12);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
   $$3 = $$1;$$335 = $$133;
  }
 } while(0);
 $134 = HEAP32[$6>>2]|0;
 (__ZNSt3__214__shared_count16__release_sharedEv($134)|0);
 ___resumeException($$3|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$0$i$i$i = 0, $$0$i$i$i46 = 0, $$0$i$i$i51 = 0, $$0$i$i$i56 = 0, $$0$i$i$i61 = 0, $$0$i$i$i66 = 0, $$0$i$i$i71 = 0, $$0$i$i$i76 = 0, $$pre$phi79Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i47 = 0, $exitcond$i$i$i52 = 0, $exitcond$i$i$i57 = 0;
 var $exitcond$i$i$i62 = 0, $exitcond$i$i$i67 = 0, $exitcond$i$i$i72 = 0, $exitcond$i$i$i77 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $10 = sp + 108|0;
 $11 = sp + 96|0;
 $12 = sp + 92|0;
 $13 = sp + 80|0;
 $14 = sp + 68|0;
 $15 = sp + 56|0;
 $16 = sp + 52|0;
 $17 = sp + 40|0;
 $18 = sp + 36|0;
 $19 = sp + 24|0;
 $20 = sp + 12|0;
 $21 = sp;
 if ($0) {
  $22 = (__ZNKSt3__26locale9use_facetERNS0_2idE($2,42432)|0);
  if ($1) {
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($23)) + 44|0);
   $25 = HEAP32[$24>>2]|0;
   FUNCTION_TABLE_vii[$25 & 1023]($10,$22);
   $26 = HEAP32[$10>>2]|0;
   HEAP8[$3>>0]=$26&255;HEAP8[$3+1>>0]=($26>>8)&255;HEAP8[$3+2>>0]=($26>>16)&255;HEAP8[$3+3>>0]=$26>>24;
   $27 = HEAP32[$22>>2]|0;
   $28 = ((($27)) + 32|0);
   $29 = HEAP32[$28>>2]|0;
   FUNCTION_TABLE_vii[$29 & 1023]($11,$22);
   $30 = ((($8)) + 11|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = ($31<<24>>24)<(0);
   if ($32) {
    $33 = HEAP32[$8>>2]|0;
    HEAP8[$33>>0] = 0;
    $34 = ((($8)) + 4|0);
    HEAP32[$34>>2] = 0;
   } else {
    HEAP8[$8>>0] = 0;
    HEAP8[$30>>0] = 0;
   }
   __THREW__ = 0;
   invoke_vii(808,($8|0),0);
   $35 = __THREW__; __THREW__ = 0;
   $36 = $35&1;
   if ($36) {
    $37 = ___cxa_find_matching_catch_3(0|0)|0;
    $38 = tempRet0;
    ___clang_call_terminate($37);
    // unreachable;
   }
   ;HEAP32[$8>>2]=HEAP32[$11>>2]|0;HEAP32[$8+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$11+8>>2]|0;
   $$0$i$i$i = 0;
   while(1) {
    $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
    if ($exitcond$i$i$i) {
     break;
    }
    $39 = (($11) + ($$0$i$i$i<<2)|0);
    HEAP32[$39>>2] = 0;
    $40 = (($$0$i$i$i) + 1)|0;
    $$0$i$i$i = $40;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
   $$pre$phiZ2D = $22;
  } else {
   $41 = HEAP32[$22>>2]|0;
   $42 = ((($41)) + 40|0);
   $43 = HEAP32[$42>>2]|0;
   FUNCTION_TABLE_vii[$43 & 1023]($12,$22);
   $44 = HEAP32[$12>>2]|0;
   HEAP8[$3>>0]=$44&255;HEAP8[$3+1>>0]=($44>>8)&255;HEAP8[$3+2>>0]=($44>>16)&255;HEAP8[$3+3>>0]=$44>>24;
   $45 = HEAP32[$22>>2]|0;
   $46 = ((($45)) + 28|0);
   $47 = HEAP32[$46>>2]|0;
   FUNCTION_TABLE_vii[$47 & 1023]($13,$22);
   $48 = ((($8)) + 11|0);
   $49 = HEAP8[$48>>0]|0;
   $50 = ($49<<24>>24)<(0);
   if ($50) {
    $51 = HEAP32[$8>>2]|0;
    HEAP8[$51>>0] = 0;
    $52 = ((($8)) + 4|0);
    HEAP32[$52>>2] = 0;
   } else {
    HEAP8[$8>>0] = 0;
    HEAP8[$48>>0] = 0;
   }
   __THREW__ = 0;
   invoke_vii(808,($8|0),0);
   $53 = __THREW__; __THREW__ = 0;
   $54 = $53&1;
   if ($54) {
    $55 = ___cxa_find_matching_catch_3(0|0)|0;
    $56 = tempRet0;
    ___clang_call_terminate($55);
    // unreachable;
   }
   ;HEAP32[$8>>2]=HEAP32[$13>>2]|0;HEAP32[$8+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$13+8>>2]|0;
   $$0$i$i$i46 = 0;
   while(1) {
    $exitcond$i$i$i47 = ($$0$i$i$i46|0)==(3);
    if ($exitcond$i$i$i47) {
     break;
    }
    $57 = (($13) + ($$0$i$i$i46<<2)|0);
    HEAP32[$57>>2] = 0;
    $58 = (($$0$i$i$i46) + 1)|0;
    $$0$i$i$i46 = $58;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($13);
   $$pre$phiZ2D = $22;
  }
  $59 = HEAP32[$22>>2]|0;
  $60 = ((($59)) + 12|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (FUNCTION_TABLE_ii[$61 & 1023]($22)|0);
  HEAP8[$4>>0] = $62;
  $63 = HEAP32[$22>>2]|0;
  $64 = ((($63)) + 16|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (FUNCTION_TABLE_ii[$65 & 1023]($22)|0);
  HEAP8[$5>>0] = $66;
  $67 = HEAP32[$$pre$phiZ2D>>2]|0;
  $68 = ((($67)) + 20|0);
  $69 = HEAP32[$68>>2]|0;
  FUNCTION_TABLE_vii[$69 & 1023]($14,$22);
  $70 = ((($6)) + 11|0);
  $71 = HEAP8[$70>>0]|0;
  $72 = ($71<<24>>24)<(0);
  if ($72) {
   $73 = HEAP32[$6>>2]|0;
   HEAP8[$73>>0] = 0;
   $74 = ((($6)) + 4|0);
   HEAP32[$74>>2] = 0;
  } else {
   HEAP8[$6>>0] = 0;
   HEAP8[$70>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(808,($6|0),0);
  $75 = __THREW__; __THREW__ = 0;
  $76 = $75&1;
  if ($76) {
   $77 = ___cxa_find_matching_catch_3(0|0)|0;
   $78 = tempRet0;
   ___clang_call_terminate($77);
   // unreachable;
  }
  ;HEAP32[$6>>2]=HEAP32[$14>>2]|0;HEAP32[$6+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$14+8>>2]|0;
  $$0$i$i$i51 = 0;
  while(1) {
   $exitcond$i$i$i52 = ($$0$i$i$i51|0)==(3);
   if ($exitcond$i$i$i52) {
    break;
   }
   $79 = (($14) + ($$0$i$i$i51<<2)|0);
   HEAP32[$79>>2] = 0;
   $80 = (($$0$i$i$i51) + 1)|0;
   $$0$i$i$i51 = $80;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($14);
  $81 = HEAP32[$$pre$phiZ2D>>2]|0;
  $82 = ((($81)) + 24|0);
  $83 = HEAP32[$82>>2]|0;
  FUNCTION_TABLE_vii[$83 & 1023]($15,$22);
  $84 = ((($7)) + 11|0);
  $85 = HEAP8[$84>>0]|0;
  $86 = ($85<<24>>24)<(0);
  if ($86) {
   $87 = HEAP32[$7>>2]|0;
   HEAP8[$87>>0] = 0;
   $88 = ((($7)) + 4|0);
   HEAP32[$88>>2] = 0;
  } else {
   HEAP8[$7>>0] = 0;
   HEAP8[$84>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(808,($7|0),0);
  $89 = __THREW__; __THREW__ = 0;
  $90 = $89&1;
  if ($90) {
   $91 = ___cxa_find_matching_catch_3(0|0)|0;
   $92 = tempRet0;
   ___clang_call_terminate($91);
   // unreachable;
  }
  ;HEAP32[$7>>2]=HEAP32[$15>>2]|0;HEAP32[$7+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$15+8>>2]|0;
  $$0$i$i$i56 = 0;
  while(1) {
   $exitcond$i$i$i57 = ($$0$i$i$i56|0)==(3);
   if ($exitcond$i$i$i57) {
    break;
   }
   $93 = (($15) + ($$0$i$i$i56<<2)|0);
   HEAP32[$93>>2] = 0;
   $94 = (($$0$i$i$i56) + 1)|0;
   $$0$i$i$i56 = $94;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($15);
  $95 = HEAP32[$22>>2]|0;
  $96 = ((($95)) + 36|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = (FUNCTION_TABLE_ii[$97 & 1023]($22)|0);
  $storemerge = $98;
 } else {
  $99 = (__ZNKSt3__26locale9use_facetERNS0_2idE($2,42424)|0);
  if ($1) {
   $100 = HEAP32[$99>>2]|0;
   $101 = ((($100)) + 44|0);
   $102 = HEAP32[$101>>2]|0;
   FUNCTION_TABLE_vii[$102 & 1023]($16,$99);
   $103 = HEAP32[$16>>2]|0;
   HEAP8[$3>>0]=$103&255;HEAP8[$3+1>>0]=($103>>8)&255;HEAP8[$3+2>>0]=($103>>16)&255;HEAP8[$3+3>>0]=$103>>24;
   $104 = HEAP32[$99>>2]|0;
   $105 = ((($104)) + 32|0);
   $106 = HEAP32[$105>>2]|0;
   FUNCTION_TABLE_vii[$106 & 1023]($17,$99);
   $107 = ((($8)) + 11|0);
   $108 = HEAP8[$107>>0]|0;
   $109 = ($108<<24>>24)<(0);
   if ($109) {
    $110 = HEAP32[$8>>2]|0;
    HEAP8[$110>>0] = 0;
    $111 = ((($8)) + 4|0);
    HEAP32[$111>>2] = 0;
   } else {
    HEAP8[$8>>0] = 0;
    HEAP8[$107>>0] = 0;
   }
   __THREW__ = 0;
   invoke_vii(808,($8|0),0);
   $112 = __THREW__; __THREW__ = 0;
   $113 = $112&1;
   if ($113) {
    $114 = ___cxa_find_matching_catch_3(0|0)|0;
    $115 = tempRet0;
    ___clang_call_terminate($114);
    // unreachable;
   }
   ;HEAP32[$8>>2]=HEAP32[$17>>2]|0;HEAP32[$8+4>>2]=HEAP32[$17+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$17+8>>2]|0;
   $$0$i$i$i61 = 0;
   while(1) {
    $exitcond$i$i$i62 = ($$0$i$i$i61|0)==(3);
    if ($exitcond$i$i$i62) {
     break;
    }
    $116 = (($17) + ($$0$i$i$i61<<2)|0);
    HEAP32[$116>>2] = 0;
    $117 = (($$0$i$i$i61) + 1)|0;
    $$0$i$i$i61 = $117;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($17);
   $$pre$phi79Z2D = $99;
  } else {
   $118 = HEAP32[$99>>2]|0;
   $119 = ((($118)) + 40|0);
   $120 = HEAP32[$119>>2]|0;
   FUNCTION_TABLE_vii[$120 & 1023]($18,$99);
   $121 = HEAP32[$18>>2]|0;
   HEAP8[$3>>0]=$121&255;HEAP8[$3+1>>0]=($121>>8)&255;HEAP8[$3+2>>0]=($121>>16)&255;HEAP8[$3+3>>0]=$121>>24;
   $122 = HEAP32[$99>>2]|0;
   $123 = ((($122)) + 28|0);
   $124 = HEAP32[$123>>2]|0;
   FUNCTION_TABLE_vii[$124 & 1023]($19,$99);
   $125 = ((($8)) + 11|0);
   $126 = HEAP8[$125>>0]|0;
   $127 = ($126<<24>>24)<(0);
   if ($127) {
    $128 = HEAP32[$8>>2]|0;
    HEAP8[$128>>0] = 0;
    $129 = ((($8)) + 4|0);
    HEAP32[$129>>2] = 0;
   } else {
    HEAP8[$8>>0] = 0;
    HEAP8[$125>>0] = 0;
   }
   __THREW__ = 0;
   invoke_vii(808,($8|0),0);
   $130 = __THREW__; __THREW__ = 0;
   $131 = $130&1;
   if ($131) {
    $132 = ___cxa_find_matching_catch_3(0|0)|0;
    $133 = tempRet0;
    ___clang_call_terminate($132);
    // unreachable;
   }
   ;HEAP32[$8>>2]=HEAP32[$19>>2]|0;HEAP32[$8+4>>2]=HEAP32[$19+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$19+8>>2]|0;
   $$0$i$i$i66 = 0;
   while(1) {
    $exitcond$i$i$i67 = ($$0$i$i$i66|0)==(3);
    if ($exitcond$i$i$i67) {
     break;
    }
    $134 = (($19) + ($$0$i$i$i66<<2)|0);
    HEAP32[$134>>2] = 0;
    $135 = (($$0$i$i$i66) + 1)|0;
    $$0$i$i$i66 = $135;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($19);
   $$pre$phi79Z2D = $99;
  }
  $136 = HEAP32[$99>>2]|0;
  $137 = ((($136)) + 12|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = (FUNCTION_TABLE_ii[$138 & 1023]($99)|0);
  HEAP8[$4>>0] = $139;
  $140 = HEAP32[$99>>2]|0;
  $141 = ((($140)) + 16|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = (FUNCTION_TABLE_ii[$142 & 1023]($99)|0);
  HEAP8[$5>>0] = $143;
  $144 = HEAP32[$$pre$phi79Z2D>>2]|0;
  $145 = ((($144)) + 20|0);
  $146 = HEAP32[$145>>2]|0;
  FUNCTION_TABLE_vii[$146 & 1023]($20,$99);
  $147 = ((($6)) + 11|0);
  $148 = HEAP8[$147>>0]|0;
  $149 = ($148<<24>>24)<(0);
  if ($149) {
   $150 = HEAP32[$6>>2]|0;
   HEAP8[$150>>0] = 0;
   $151 = ((($6)) + 4|0);
   HEAP32[$151>>2] = 0;
  } else {
   HEAP8[$6>>0] = 0;
   HEAP8[$147>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(808,($6|0),0);
  $152 = __THREW__; __THREW__ = 0;
  $153 = $152&1;
  if ($153) {
   $154 = ___cxa_find_matching_catch_3(0|0)|0;
   $155 = tempRet0;
   ___clang_call_terminate($154);
   // unreachable;
  }
  ;HEAP32[$6>>2]=HEAP32[$20>>2]|0;HEAP32[$6+4>>2]=HEAP32[$20+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$20+8>>2]|0;
  $$0$i$i$i71 = 0;
  while(1) {
   $exitcond$i$i$i72 = ($$0$i$i$i71|0)==(3);
   if ($exitcond$i$i$i72) {
    break;
   }
   $156 = (($20) + ($$0$i$i$i71<<2)|0);
   HEAP32[$156>>2] = 0;
   $157 = (($$0$i$i$i71) + 1)|0;
   $$0$i$i$i71 = $157;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($20);
  $158 = HEAP32[$$pre$phi79Z2D>>2]|0;
  $159 = ((($158)) + 24|0);
  $160 = HEAP32[$159>>2]|0;
  FUNCTION_TABLE_vii[$160 & 1023]($21,$99);
  $161 = ((($7)) + 11|0);
  $162 = HEAP8[$161>>0]|0;
  $163 = ($162<<24>>24)<(0);
  if ($163) {
   $164 = HEAP32[$7>>2]|0;
   HEAP8[$164>>0] = 0;
   $165 = ((($7)) + 4|0);
   HEAP32[$165>>2] = 0;
  } else {
   HEAP8[$7>>0] = 0;
   HEAP8[$161>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(808,($7|0),0);
  $166 = __THREW__; __THREW__ = 0;
  $167 = $166&1;
  if ($167) {
   $168 = ___cxa_find_matching_catch_3(0|0)|0;
   $169 = tempRet0;
   ___clang_call_terminate($168);
   // unreachable;
  }
  ;HEAP32[$7>>2]=HEAP32[$21>>2]|0;HEAP32[$7+4>>2]=HEAP32[$21+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$21+8>>2]|0;
  $$0$i$i$i76 = 0;
  while(1) {
   $exitcond$i$i$i77 = ($$0$i$i$i76|0)==(3);
   if ($exitcond$i$i$i77) {
    break;
   }
   $170 = (($21) + ($$0$i$i$i76<<2)|0);
   HEAP32[$170>>2] = 0;
   $171 = (($$0$i$i$i76) + 1)|0;
   $$0$i$i$i76 = $171;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($21);
  $172 = HEAP32[$99>>2]|0;
  $173 = ((($172)) + 36|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = (FUNCTION_TABLE_ii[$174 & 1023]($99)|0);
  $storemerge = $175;
 }
 HEAP32[$9>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 var $$ = 0, $$$097 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i106 = 0, $$0$i$i113 = 0, $$0101 = 0, $$0104 = 0, $$07$i$i = 0, $$093 = 0, $$095 = 0, $$097 = 0, $$099 = 0, $$1 = 0, $$1100 = 0, $$1102 = 0, $$194 = 0, $$196 = 0, $$2 = 0, $$2103 = 0;
 var $$3 = 0, $$pn = 0, $$sroa$08$0$i = 0, $$sroa$08$0$i112 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $exitcond = 0, $isascii3$i = 0, $or$cond = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = $0;
 $15 = ((($13)) + 11|0);
 $16 = ((($13)) + 4|0);
 $17 = ((($12)) + 11|0);
 $18 = ((($12)) + 4|0);
 $19 = $3 & 512;
 $20 = ($19|0)==(0);
 $21 = ((($6)) + 8|0);
 $22 = ($14|0)>(0);
 $23 = ((($11)) + 11|0);
 $24 = ((($11)) + 4|0);
 $$0104 = 0;$$097 = $4;
 while(1) {
  $exitcond = ($$0104|0)==(4);
  if ($exitcond) {
   break;
  }
  $31 = (($8) + ($$0104)|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32 << 24 >> 24;
  L4: do {
   switch ($33|0) {
   case 0:  {
    $34 = HEAP32[$2>>2]|0;
    HEAP32[$1>>2] = $34;
    $$2 = $$097;
    break;
   }
   case 1:  {
    $35 = HEAP32[$2>>2]|0;
    HEAP32[$1>>2] = $35;
    $36 = HEAP32[$6>>2]|0;
    $37 = ((($36)) + 28|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (FUNCTION_TABLE_iii[$38 & 1023]($6,32)|0);
    $40 = HEAP32[$2>>2]|0;
    $41 = ((($40)) + 1|0);
    HEAP32[$2>>2] = $41;
    HEAP8[$40>>0] = $39;
    $$2 = $$097;
    break;
   }
   case 3:  {
    $42 = HEAP8[$15>>0]|0;
    $43 = ($42<<24>>24)<(0);
    $44 = HEAP32[$16>>2]|0;
    $45 = $42&255;
    $46 = $43 ? $44 : $45;
    $47 = ($46|0)==(0);
    if ($47) {
     $$2 = $$097;
    } else {
     $48 = HEAP32[$13>>2]|0;
     $49 = $43 ? $48 : $13;
     $50 = HEAP8[$49>>0]|0;
     $51 = HEAP32[$2>>2]|0;
     $52 = ((($51)) + 1|0);
     HEAP32[$2>>2] = $52;
     HEAP8[$51>>0] = $50;
     $$2 = $$097;
    }
    break;
   }
   case 2:  {
    $53 = HEAP8[$17>>0]|0;
    $54 = ($53<<24>>24)<(0);
    $55 = HEAP32[$18>>2]|0;
    $56 = $53&255;
    $57 = $54 ? $55 : $56;
    $58 = ($57|0)==(0);
    $or$cond = $20 | $58;
    if ($or$cond) {
     $$2 = $$097;
    } else {
     $59 = HEAP32[$12>>2]|0;
     $60 = $54 ? $59 : $12;
     $61 = (($60) + ($57)|0);
     $62 = HEAP32[$2>>2]|0;
     $$0$i$i113 = $62;$$sroa$08$0$i112 = $60;
     while(1) {
      $63 = ($$sroa$08$0$i112|0)==($61|0);
      if ($63) {
       break;
      }
      $64 = HEAP8[$$sroa$08$0$i112>>0]|0;
      HEAP8[$$0$i$i113>>0] = $64;
      $65 = ((($$sroa$08$0$i112)) + 1|0);
      $66 = ((($$0$i$i113)) + 1|0);
      $$0$i$i113 = $66;$$sroa$08$0$i112 = $65;
     }
     HEAP32[$2>>2] = $$0$i$i113;
     $$2 = $$097;
    }
    break;
   }
   case 4:  {
    $67 = HEAP32[$2>>2]|0;
    $68 = ((($$097)) + 1|0);
    $$$097 = $7 ? $68 : $$097;
    $$0101 = $$$097;
    while(1) {
     $69 = ($$0101>>>0)<($5>>>0);
     if (!($69)) {
      break;
     }
     $70 = HEAP8[$$0101>>0]|0;
     $isascii3$i = ($70<<24>>24)>(-1);
     if (!($isascii3$i)) {
      break;
     }
     $71 = $70 << 24 >> 24;
     $72 = HEAP32[$21>>2]|0;
     $73 = (($72) + ($71<<1)|0);
     $74 = HEAP16[$73>>1]|0;
     $75 = $74 & 2048;
     $76 = ($75<<16>>16)==(0);
     if ($76) {
      break;
     }
     $77 = ((($$0101)) + 1|0);
     $$0101 = $77;
    }
    if ($22) {
     $$099 = $14;$$1102 = $$0101;
     while(1) {
      $78 = ($$1102>>>0)>($$$097>>>0);
      $79 = ($$099|0)>(0);
      $80 = $78 & $79;
      if (!($80)) {
       break;
      }
      $81 = ((($$1102)) + -1|0);
      $82 = HEAP8[$81>>0]|0;
      $83 = HEAP32[$2>>2]|0;
      $84 = ((($83)) + 1|0);
      HEAP32[$2>>2] = $84;
      HEAP8[$83>>0] = $82;
      $85 = (($$099) + -1)|0;
      $$099 = $85;$$1102 = $81;
     }
     if ($79) {
      $86 = HEAP32[$6>>2]|0;
      $87 = ((($86)) + 28|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = (FUNCTION_TABLE_iii[$88 & 1023]($6,48)|0);
      $93 = $89;
     } else {
      $93 = 0;
     }
     $$1100 = $$099;
     while(1) {
      $90 = ($$1100|0)>(0);
      $91 = HEAP32[$2>>2]|0;
      $92 = ((($91)) + 1|0);
      HEAP32[$2>>2] = $92;
      if (!($90)) {
       break;
      }
      HEAP8[$91>>0] = $93;
      $94 = (($$1100) + -1)|0;
      $$1100 = $94;
     }
     HEAP8[$91>>0] = $9;
     $$2103 = $$1102;
    } else {
     $$2103 = $$0101;
    }
    $95 = ($$2103|0)==($$$097|0);
    L35: do {
     if ($95) {
      $96 = HEAP32[$6>>2]|0;
      $97 = ((($96)) + 28|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = (FUNCTION_TABLE_iii[$98 & 1023]($6,48)|0);
      $100 = HEAP32[$2>>2]|0;
      $101 = ((($100)) + 1|0);
      HEAP32[$2>>2] = $101;
      HEAP8[$100>>0] = $99;
     } else {
      $102 = HEAP8[$23>>0]|0;
      $103 = ($102<<24>>24)<(0);
      $104 = HEAP32[$24>>2]|0;
      $105 = $102&255;
      $106 = $103 ? $104 : $105;
      $107 = ($106|0)==(0);
      if ($107) {
       $$0 = -1;$$093 = 0;$$095 = 0;$$3 = $$2103;
      } else {
       $108 = HEAP32[$11>>2]|0;
       $109 = $103 ? $108 : $11;
       $110 = HEAP8[$109>>0]|0;
       $111 = $110 << 24 >> 24;
       $$0 = $111;$$093 = 0;$$095 = 0;$$3 = $$2103;
      }
      while(1) {
       $112 = ($$3|0)==($$$097|0);
       if ($112) {
        break L35;
       }
       $113 = ($$095|0)==($$0|0);
       if ($113) {
        $114 = HEAP32[$2>>2]|0;
        $115 = ((($114)) + 1|0);
        HEAP32[$2>>2] = $115;
        HEAP8[$114>>0] = $10;
        $116 = (($$093) + 1)|0;
        $117 = HEAP8[$23>>0]|0;
        $118 = ($117<<24>>24)<(0);
        $119 = HEAP32[$24>>2]|0;
        $120 = $117&255;
        $121 = $118 ? $119 : $120;
        $122 = ($116>>>0)<($121>>>0);
        if ($122) {
         $123 = HEAP32[$11>>2]|0;
         $124 = $118 ? $123 : $11;
         $125 = (($124) + ($116)|0);
         $126 = HEAP8[$125>>0]|0;
         $127 = ($126<<24>>24)==(127);
         $128 = $126 << 24 >> 24;
         $$ = $127 ? -1 : $128;
         $$1 = $$;$$194 = $116;$$196 = 0;
        } else {
         $$1 = $$095;$$194 = $116;$$196 = 0;
        }
       } else {
        $$1 = $$0;$$194 = $$093;$$196 = $$095;
       }
       $129 = ((($$3)) + -1|0);
       $130 = HEAP8[$129>>0]|0;
       $131 = HEAP32[$2>>2]|0;
       $132 = ((($131)) + 1|0);
       HEAP32[$2>>2] = $132;
       HEAP8[$131>>0] = $130;
       $133 = (($$196) + 1)|0;
       $$0 = $$1;$$093 = $$194;$$095 = $133;$$3 = $129;
      }
     }
    } while(0);
    $134 = HEAP32[$2>>2]|0;
    $135 = ($67|0)==($134|0);
    if ($135) {
     $$2 = $$$097;
    } else {
     $$0$i$i106 = $134;$$07$i$i = $67;
     while(1) {
      $136 = ((($$0$i$i106)) + -1|0);
      $137 = ($$07$i$i>>>0)<($136>>>0);
      if (!($137)) {
       $$2 = $$$097;
       break L4;
      }
      $138 = HEAP8[$$07$i$i>>0]|0;
      $139 = HEAP8[$136>>0]|0;
      HEAP8[$$07$i$i>>0] = $139;
      HEAP8[$136>>0] = $138;
      $140 = ((($$07$i$i)) + 1|0);
      $$0$i$i106 = $136;$$07$i$i = $140;
     }
    }
    break;
   }
   default: {
    $$2 = $$097;
   }
   }
  } while(0);
  $141 = (($$0104) + 1)|0;
  $$0104 = $141;$$097 = $$2;
 }
 $25 = HEAP8[$15>>0]|0;
 $26 = ($25<<24>>24)<(0);
 $27 = HEAP32[$16>>2]|0;
 $28 = $25&255;
 $29 = $26 ? $27 : $28;
 $30 = ($29>>>0)>(1);
 if ($30) {
  $142 = HEAP32[$13>>2]|0;
  $143 = $26 ? $142 : $13;
  $144 = (($143) + ($29)|0);
  $145 = HEAP32[$2>>2]|0;
  $$0$i$i = $145;$$pn = $143;
  while(1) {
   $$sroa$08$0$i = ((($$pn)) + 1|0);
   $146 = ($$sroa$08$0$i|0)==($144|0);
   if ($146) {
    break;
   }
   $147 = HEAP8[$$sroa$08$0$i>>0]|0;
   HEAP8[$$0$i$i>>0] = $147;
   $148 = ((($$0$i$i)) + 1|0);
   $$0$i$i = $148;$$pn = $$sroa$08$0$i;
  }
  HEAP32[$2>>2] = $$0$i$i;
 }
 $149 = $3 & 176;
 $trunc = $149&255;
 switch ($trunc<<24>>24) {
 case 32:  {
  $150 = HEAP32[$2>>2]|0;
  HEAP32[$1>>2] = $150;
  break;
 }
 case 16:  {
  break;
 }
 default: {
  HEAP32[$1>>2] = $0;
 }
 }
 return;
}
function __ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i53 = 0, $$0$i$i55 = 0, $$045 = 0, $$046 = 0, $$047 = 0, $$048 = 0, $$1 = 0, $$149 = 0, $$3 = 0, $$351 = 0, $$4 = 0, $$452 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $$pre101 = 0, $$pre103 = 0, $$sroa$067$0 = 0;
 var $$sroa$067$1 = 0, $$sroa$079$0 = 0, $$sroa$079$1 = 0, $$sroa$079$2 = 0, $$sroa$092$0 = 0, $$sroa$092$1 = 0, $$sroa$092$2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $exitcond$i$i54 = 0, $exitcond$i$i56 = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1008|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1008|0);
 $$byval_copy = sp + 892|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $6 = sp + 900|0;
 $7 = sp + 888|0;
 $8 = sp + 488|0;
 $9 = sp + 480|0;
 $10 = sp + 896|0;
 $11 = sp + 476|0;
 $12 = sp + 472|0;
 $13 = sp + 460|0;
 $14 = sp + 448|0;
 $15 = sp + 436|0;
 $16 = sp + 432|0;
 $17 = sp + 32|0;
 $18 = sp + 24|0;
 $19 = sp + 20|0;
 $20 = sp + 16|0;
 HEAP32[$7>>2] = $6;
 HEAPF64[$vararg_buffer>>3] = $5;
 $21 = (_snprintf($6,100,34183,$vararg_buffer)|0);
 $22 = ($21>>>0)>(99);
 do {
  if ($22) {
   __THREW__ = 0;
   $23 = (invoke_i(762)|0);
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if ($25) {
    $$sroa$079$0 = 0;$$sroa$092$0 = 0;
    label = 8;
   } else {
    __THREW__ = 0;
    HEAPF64[$vararg_buffer1>>3] = $5;
    $26 = (invoke_iiiii(780,($7|0),($23|0),(34183|0),($vararg_buffer1|0))|0);
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if ($28) {
     $$sroa$079$0 = 0;$$sroa$092$0 = 0;
     label = 8;
    } else {
     $29 = HEAP32[$7>>2]|0;
     $30 = ($29|0)==(0|0);
     if ($30) {
      __THREW__ = 0;
      invoke_v(777);
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if ($33) {
       $$sroa$079$0 = 0;$$sroa$092$0 = 0;
       label = 8;
       break;
      }
      $$pre = HEAP32[$7>>2]|0;
      $155 = $$pre;
     } else {
      $31 = $29;
      $155 = $31;
     }
     $36 = $26 << 2;
     $37 = (_malloc($36)|0);
     $38 = $37;
     $39 = ($37|0)==(0|0);
     if ($39) {
      __THREW__ = 0;
      invoke_v(777);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       $$sroa$079$0 = $38;$$sroa$092$0 = $155;
       label = 8;
      } else {
       $$0 = 0;$$046 = $26;$$sroa$079$1 = $38;$$sroa$092$1 = $155;
       label = 11;
      }
     } else {
      $$0 = $37;$$046 = $26;$$sroa$079$1 = $38;$$sroa$092$1 = $155;
      label = 11;
     }
    }
   }
  } else {
   $$0 = $8;$$046 = $21;$$sroa$079$1 = 0;$$sroa$092$1 = 0;
   label = 11;
  }
 } while(0);
 if ((label|0) == 11) {
  __THREW__ = 0;
  $42 = (invoke_ii(658,($3|0))|0);
  $43 = __THREW__; __THREW__ = 0;
  $44 = $43&1;
  if ($44) {
   $$sroa$079$0 = $$sroa$079$1;$$sroa$092$0 = $$sroa$092$1;
   label = 8;
  } else {
   HEAP32[$9>>2] = $42;
   __THREW__ = 0;
   $45 = (invoke_iii(659,($9|0),(40744|0))|0);
   $46 = __THREW__; __THREW__ = 0;
   $47 = $46&1;
   do {
    if ($47) {
     $117 = ___cxa_find_matching_catch_2()|0;
     $118 = tempRet0;
     $$3 = $117;$$351 = $118;$150 = $42;
    } else {
     $48 = HEAP32[$7>>2]|0;
     $49 = (($48) + ($$046)|0);
     $50 = HEAP32[$45>>2]|0;
     $51 = ((($50)) + 48|0);
     $52 = HEAP32[$51>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($52|0,($45|0),($48|0),($49|0),($$0|0))|0);
     $53 = __THREW__; __THREW__ = 0;
     $54 = $53&1;
     if ($54) {
      $119 = ___cxa_find_matching_catch_2()|0;
      $120 = tempRet0;
      $$3 = $119;$$351 = $120;$150 = $42;
      break;
     }
     $55 = ($$046|0)==(0);
     if ($55) {
      $65 = 0;
     } else {
      $56 = HEAP32[$7>>2]|0;
      $57 = HEAP8[$56>>0]|0;
      $58 = ($57<<24>>24)==(45);
      $65 = $58;
     }
     ;HEAP32[$13>>2]=0|0;HEAP32[$13+4>>2]=0|0;HEAP32[$13+8>>2]=0|0;
     $$0$i$i = 0;
     while(1) {
      $exitcond$i$i = ($$0$i$i|0)==(3);
      if ($exitcond$i$i) {
       break;
      }
      $59 = (($13) + ($$0$i$i<<2)|0);
      HEAP32[$59>>2] = 0;
      $60 = (($$0$i$i) + 1)|0;
      $$0$i$i = $60;
     }
     ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;
     $$0$i$i53 = 0;
     while(1) {
      $exitcond$i$i54 = ($$0$i$i53|0)==(3);
      if ($exitcond$i$i54) {
       break;
      }
      $61 = (($14) + ($$0$i$i53<<2)|0);
      HEAP32[$61>>2] = 0;
      $62 = (($$0$i$i53) + 1)|0;
      $$0$i$i53 = $62;
     }
     ;HEAP32[$15>>2]=0|0;HEAP32[$15+4>>2]=0|0;HEAP32[$15+8>>2]=0|0;
     $$0$i$i55 = 0;
     while(1) {
      $exitcond$i$i56 = ($$0$i$i55|0)==(3);
      if ($exitcond$i$i56) {
       break;
      }
      $63 = (($15) + ($$0$i$i55<<2)|0);
      HEAP32[$63>>2] = 0;
      $64 = (($$0$i$i55) + 1)|0;
      $$0$i$i55 = $64;
     }
     __THREW__ = 0;
     invoke_viiiiiiiiii(818,($2|0),($65|0),($9|0),($10|0),($11|0),($12|0),($13|0),($14|0),($15|0),($16|0));
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      $121 = ___cxa_find_matching_catch_2()|0;
      $122 = tempRet0;
      $$1 = $121;$$149 = $122;
     } else {
      $68 = HEAP32[$16>>2]|0;
      $69 = ($$046|0)>($68|0);
      if ($69) {
       $70 = (($$046) - ($68))|0;
       $71 = $70 << 1;
       $72 = ((($15)) + 8|0);
       $73 = ((($72)) + 3|0);
       $74 = HEAP8[$73>>0]|0;
       $75 = ($74<<24>>24)<(0);
       $76 = ((($15)) + 4|0);
       $77 = HEAP32[$76>>2]|0;
       $78 = $74&255;
       $79 = $75 ? $77 : $78;
       $80 = ((($14)) + 8|0);
       $81 = ((($80)) + 3|0);
       $82 = HEAP8[$81>>0]|0;
       $83 = ($82<<24>>24)<(0);
       $84 = ((($14)) + 4|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = $82&255;
       $87 = $83 ? $85 : $86;
       $88 = $71 | 1;
       $89 = (($79) + ($88))|0;
       $90 = (($89) + ($87))|0;
       $$pn = $90;
      } else {
       $91 = ((($15)) + 8|0);
       $92 = ((($91)) + 3|0);
       $93 = HEAP8[$92>>0]|0;
       $94 = ($93<<24>>24)<(0);
       $95 = ((($15)) + 4|0);
       $96 = HEAP32[$95>>2]|0;
       $97 = $93&255;
       $98 = $94 ? $96 : $97;
       $99 = ((($14)) + 8|0);
       $100 = ((($99)) + 3|0);
       $101 = HEAP8[$100>>0]|0;
       $102 = ($101<<24>>24)<(0);
       $103 = ((($14)) + 4|0);
       $104 = HEAP32[$103>>2]|0;
       $105 = $101&255;
       $106 = $102 ? $104 : $105;
       $107 = (($98) + 2)|0;
       $108 = (($107) + ($106))|0;
       $$pn = $108;
      }
      $109 = (($$pn) + ($68))|0;
      $110 = ($109>>>0)>(100);
      do {
       if ($110) {
        $111 = $109 << 2;
        $112 = (_malloc($111)|0);
        $113 = $112;
        $114 = ($112|0)==(0|0);
        if ($114) {
         __THREW__ = 0;
         invoke_v(777);
         $115 = __THREW__; __THREW__ = 0;
         $116 = $115&1;
         if ($116) {
          $123 = ___cxa_find_matching_catch_2()|0;
          $124 = tempRet0;
          $$047 = $123;$$048 = $124;$$sroa$067$1 = $113;
          break;
         } else {
          $$pre101 = HEAP32[$16>>2]|0;
          $$045 = 0;$$sroa$067$0 = $113;$130 = $$pre101;
          label = 37;
          break;
         }
        } else {
         $$045 = $112;$$sroa$067$0 = $113;$130 = $68;
         label = 37;
        }
       } else {
        $$045 = $17;$$sroa$067$0 = 0;$130 = $68;
        label = 37;
       }
      } while(0);
      if ((label|0) == 37) {
       $125 = ((($3)) + 4|0);
       $126 = HEAP32[$125>>2]|0;
       $127 = (($$0) + ($$046<<2)|0);
       $128 = HEAP32[$11>>2]|0;
       $129 = HEAP32[$12>>2]|0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(819,($$045|0),($18|0),($19|0),($126|0),($$0|0),($127|0),($45|0),($65|0),($10|0),($128|0),($129|0),($13|0),($14|0),($15|0),($130|0));
       $131 = __THREW__; __THREW__ = 0;
       $132 = $131&1;
       if (!($132)) {
        $133 = HEAP32[$1>>2]|0;
        HEAP32[$20>>2] = $133;
        $134 = HEAP32[$18>>2]|0;
        $135 = HEAP32[$19>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy>>2]=HEAP32[$20>>2]|0;
        $136 = (invoke_iiiiiii(787,($$byval_copy|0),($$045|0),($134|0),($135|0),($3|0),($4|0))|0);
        $137 = __THREW__; __THREW__ = 0;
        $138 = $137&1;
        if (!($138)) {
         $139 = ($$sroa$067$0|0)==(0);
         if (!($139)) {
          $140 = $$sroa$067$0;
          _free($140);
         }
         __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($15);
         __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($14);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($13);
         $141 = HEAP32[$9>>2]|0;
         (__ZNSt3__214__shared_count16__release_sharedEv($141)|0);
         $142 = ($$sroa$079$1|0)==(0);
         if (!($142)) {
          $143 = $$sroa$079$1;
          _free($143);
         }
         $144 = ($$sroa$092$1|0)==(0);
         if (!($144)) {
          $145 = $$sroa$092$1;
          _free($145);
         }
         STACKTOP = sp;return ($136|0);
        }
       }
       $146 = ___cxa_find_matching_catch_2()|0;
       $147 = tempRet0;
       $$047 = $146;$$048 = $147;$$sroa$067$1 = $$sroa$067$0;
      }
      $148 = ($$sroa$067$1|0)==(0);
      if (!($148)) {
       $149 = $$sroa$067$1;
       _free($149);
      }
      $$1 = $$047;$$149 = $$048;
     }
     __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($15);
     __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($14);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($13);
     $$pre103 = HEAP32[$9>>2]|0;
     $$3 = $$1;$$351 = $$149;$150 = $$pre103;
    }
   } while(0);
   (__ZNSt3__214__shared_count16__release_sharedEv($150)|0);
   $$4 = $$3;$$452 = $$351;$$sroa$079$2 = $$sroa$079$1;$$sroa$092$2 = $$sroa$092$1;
  }
 }
 if ((label|0) == 8) {
  $34 = ___cxa_find_matching_catch_2()|0;
  $35 = tempRet0;
  $$4 = $34;$$452 = $35;$$sroa$079$2 = $$sroa$079$0;$$sroa$092$2 = $$sroa$092$0;
 }
 $151 = ($$sroa$079$2|0)==(0);
 if (!($151)) {
  $152 = $$sroa$079$2;
  _free($152);
 }
 $153 = ($$sroa$092$2|0)==(0);
 if (!($153)) {
  $154 = $$sroa$092$2;
  _free($154);
 }
 ___resumeException($$4|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i36 = 0, $$0$i$i38 = 0, $$031 = 0, $$032 = 0, $$1 = 0, $$133 = 0, $$3 = 0, $$335 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $$pre61 = 0, $$pre62 = 0, $$sroa$051$0 = 0, $$sroa$051$1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $exitcond$i$i37 = 0, $exitcond$i$i39 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(480|0);
 $$byval_copy = sp + 468|0;
 $6 = sp + 464|0;
 $7 = sp + 472|0;
 $8 = sp + 460|0;
 $9 = sp + 456|0;
 $10 = sp + 444|0;
 $11 = sp + 432|0;
 $12 = sp + 420|0;
 $13 = sp + 416|0;
 $14 = sp + 16|0;
 $15 = sp + 8|0;
 $16 = sp + 4|0;
 $17 = sp;
 $18 = (__ZNKSt3__28ios_base6getlocEv($3)|0);
 HEAP32[$6>>2] = $18;
 __THREW__ = 0;
 $19 = (invoke_iii(659,($6|0),(40744|0))|0);
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 L1: do {
  if ($21) {
   $104 = ___cxa_find_matching_catch_2()|0;
   $105 = tempRet0;
   $$3 = $104;$$335 = $105;
  } else {
   $22 = ((($5)) + 8|0);
   $23 = ((($22)) + 3|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = ($24<<24>>24)<(0);
   $26 = ((($5)) + 4|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $24&255;
   $29 = $25 ? $27 : $28;
   $30 = ($29|0)==(0);
   do {
    if ($30) {
     $47 = 0;
    } else {
     $31 = HEAP32[$5>>2]|0;
     $32 = $25 ? $31 : $5;
     $33 = HEAP32[$32>>2]|0;
     $34 = HEAP32[$19>>2]|0;
     $35 = ((($34)) + 44|0);
     $36 = HEAP32[$35>>2]|0;
     __THREW__ = 0;
     $37 = (invoke_iii($36|0,($19|0),45)|0);
     $38 = __THREW__; __THREW__ = 0;
     $39 = $38&1;
     if ($39) {
      $106 = ___cxa_find_matching_catch_2()|0;
      $107 = tempRet0;
      $$3 = $106;$$335 = $107;
      break L1;
     } else {
      $40 = ($33|0)==($37|0);
      $47 = $40;
      break;
     }
    }
   } while(0);
   ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
   $$0$i$i = 0;
   while(1) {
    $exitcond$i$i = ($$0$i$i|0)==(3);
    if ($exitcond$i$i) {
     break;
    }
    $41 = (($10) + ($$0$i$i<<2)|0);
    HEAP32[$41>>2] = 0;
    $42 = (($$0$i$i) + 1)|0;
    $$0$i$i = $42;
   }
   ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
   $$0$i$i36 = 0;
   while(1) {
    $exitcond$i$i37 = ($$0$i$i36|0)==(3);
    if ($exitcond$i$i37) {
     break;
    }
    $43 = (($11) + ($$0$i$i36<<2)|0);
    HEAP32[$43>>2] = 0;
    $44 = (($$0$i$i36) + 1)|0;
    $$0$i$i36 = $44;
   }
   ;HEAP32[$12>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;
   $$0$i$i38 = 0;
   while(1) {
    $exitcond$i$i39 = ($$0$i$i38|0)==(3);
    if ($exitcond$i$i39) {
     break;
    }
    $45 = (($12) + ($$0$i$i38<<2)|0);
    HEAP32[$45>>2] = 0;
    $46 = (($$0$i$i38) + 1)|0;
    $$0$i$i38 = $46;
   }
   __THREW__ = 0;
   invoke_viiiiiiiiii(818,($2|0),($47|0),($6|0),($7|0),($8|0),($9|0),($10|0),($11|0),($12|0),($13|0));
   $48 = __THREW__; __THREW__ = 0;
   $49 = $48&1;
   if ($49) {
    $108 = ___cxa_find_matching_catch_2()|0;
    $109 = tempRet0;
    $$1 = $108;$$133 = $109;
   } else {
    $50 = HEAP8[$23>>0]|0;
    $51 = ($50<<24>>24)<(0);
    $52 = HEAP32[$26>>2]|0;
    $53 = $50&255;
    $54 = $51 ? $52 : $53;
    $55 = HEAP32[$13>>2]|0;
    $56 = ($54|0)>($55|0);
    if ($56) {
     $57 = (($54) - ($55))|0;
     $58 = $57 << 1;
     $59 = ((($12)) + 8|0);
     $60 = ((($59)) + 3|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = ($61<<24>>24)<(0);
     $63 = ((($12)) + 4|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = $61&255;
     $66 = $62 ? $64 : $65;
     $67 = ((($11)) + 8|0);
     $68 = ((($67)) + 3|0);
     $69 = HEAP8[$68>>0]|0;
     $70 = ($69<<24>>24)<(0);
     $71 = ((($11)) + 4|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = $69&255;
     $74 = $70 ? $72 : $73;
     $75 = $58 | 1;
     $76 = (($66) + ($75))|0;
     $77 = (($76) + ($74))|0;
     $$pn = $77;
    } else {
     $78 = ((($12)) + 8|0);
     $79 = ((($78)) + 3|0);
     $80 = HEAP8[$79>>0]|0;
     $81 = ($80<<24>>24)<(0);
     $82 = ((($12)) + 4|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = $80&255;
     $85 = $81 ? $83 : $84;
     $86 = ((($11)) + 8|0);
     $87 = ((($86)) + 3|0);
     $88 = HEAP8[$87>>0]|0;
     $89 = ($88<<24>>24)<(0);
     $90 = ((($11)) + 4|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = $88&255;
     $93 = $89 ? $91 : $92;
     $94 = (($85) + 2)|0;
     $95 = (($94) + ($93))|0;
     $$pn = $95;
    }
    $96 = (($$pn) + ($55))|0;
    $97 = ($96>>>0)>(100);
    do {
     if ($97) {
      $98 = $96 << 2;
      $99 = (_malloc($98)|0);
      $100 = $99;
      $101 = ($99|0)==(0|0);
      if ($101) {
       __THREW__ = 0;
       invoke_v(777);
       $102 = __THREW__; __THREW__ = 0;
       $103 = $102&1;
       if ($103) {
        $110 = ___cxa_find_matching_catch_2()|0;
        $111 = tempRet0;
        $$0 = $110;$$032 = $111;$$sroa$051$1 = $100;
        break;
       } else {
        $$pre = HEAP8[$23>>0]|0;
        $$pre61 = HEAP32[$26>>2]|0;
        $$pre62 = HEAP32[$13>>2]|0;
        $$031 = 0;$$sroa$051$0 = $100;$114 = $$pre;$119 = $$pre61;$124 = $$pre62;
        label = 26;
        break;
       }
      } else {
       $$031 = $99;$$sroa$051$0 = $100;$114 = $50;$119 = $52;$124 = $55;
       label = 26;
      }
     } else {
      $$031 = $14;$$sroa$051$0 = 0;$114 = $50;$119 = $52;$124 = $55;
      label = 26;
     }
    } while(0);
    if ((label|0) == 26) {
     $112 = ((($3)) + 4|0);
     $113 = HEAP32[$112>>2]|0;
     $115 = ($114<<24>>24)<(0);
     $116 = HEAP32[$5>>2]|0;
     $117 = $115 ? $116 : $5;
     $118 = $114&255;
     $120 = $115 ? $119 : $118;
     $121 = (($117) + ($120<<2)|0);
     $122 = HEAP32[$8>>2]|0;
     $123 = HEAP32[$9>>2]|0;
     __THREW__ = 0;
     invoke_viiiiiiiiiiiiiii(819,($$031|0),($15|0),($16|0),($113|0),($117|0),($121|0),($19|0),($47|0),($7|0),($122|0),($123|0),($10|0),($11|0),($12|0),($124|0));
     $125 = __THREW__; __THREW__ = 0;
     $126 = $125&1;
     if (!($126)) {
      $127 = HEAP32[$1>>2]|0;
      HEAP32[$17>>2] = $127;
      $128 = HEAP32[$15>>2]|0;
      $129 = HEAP32[$16>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy>>2]=HEAP32[$17>>2]|0;
      $130 = (invoke_iiiiiii(787,($$byval_copy|0),($$031|0),($128|0),($129|0),($3|0),($4|0))|0);
      $131 = __THREW__; __THREW__ = 0;
      $132 = $131&1;
      if (!($132)) {
       $133 = ($$sroa$051$0|0)==(0);
       if (!($133)) {
        $134 = $$sroa$051$0;
        _free($134);
       }
       __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($12);
       __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
       $135 = HEAP32[$6>>2]|0;
       (__ZNSt3__214__shared_count16__release_sharedEv($135)|0);
       STACKTOP = sp;return ($130|0);
      }
     }
     $136 = ___cxa_find_matching_catch_2()|0;
     $137 = tempRet0;
     $$0 = $136;$$032 = $137;$$sroa$051$1 = $$sroa$051$0;
    }
    $138 = ($$sroa$051$1|0)==(0);
    if (!($138)) {
     $139 = $$sroa$051$1;
     _free($139);
    }
    $$1 = $$0;$$133 = $$032;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($12);
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
   $$3 = $$1;$$335 = $$133;
  }
 } while(0);
 $140 = HEAP32[$6>>2]|0;
 (__ZNSt3__214__shared_count16__release_sharedEv($140)|0);
 ___resumeException($$3|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$0$i$i$i = 0, $$0$i$i$i46 = 0, $$0$i$i$i49 = 0, $$0$i$i$i53 = 0, $$0$i$i$i58 = 0, $$0$i$i$i63 = 0, $$0$i$i$i68 = 0, $$0$i$i$i73 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $exitcond$i$i$i = 0, $exitcond$i$i$i47 = 0, $exitcond$i$i$i50 = 0, $exitcond$i$i$i54 = 0, $exitcond$i$i$i59 = 0, $exitcond$i$i$i64 = 0, $exitcond$i$i$i69 = 0, $exitcond$i$i$i74 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $10 = sp + 108|0;
 $11 = sp + 96|0;
 $12 = sp + 92|0;
 $13 = sp + 80|0;
 $14 = sp + 68|0;
 $15 = sp + 56|0;
 $16 = sp + 52|0;
 $17 = sp + 40|0;
 $18 = sp + 36|0;
 $19 = sp + 24|0;
 $20 = sp + 12|0;
 $21 = sp;
 if ($0) {
  $22 = (__ZNKSt3__26locale9use_facetERNS0_2idE($2,42448)|0);
  if ($1) {
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($23)) + 44|0);
   $25 = HEAP32[$24>>2]|0;
   FUNCTION_TABLE_vii[$25 & 1023]($10,$22);
   $26 = HEAP32[$10>>2]|0;
   HEAP8[$3>>0]=$26&255;HEAP8[$3+1>>0]=($26>>8)&255;HEAP8[$3+2>>0]=($26>>16)&255;HEAP8[$3+3>>0]=$26>>24;
   $27 = HEAP32[$22>>2]|0;
   $28 = ((($27)) + 32|0);
   $29 = HEAP32[$28>>2]|0;
   FUNCTION_TABLE_vii[$29 & 1023]($11,$22);
   $30 = ((($8)) + 8|0);
   $31 = ((($30)) + 3|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = ($32<<24>>24)<(0);
   if ($33) {
    $34 = HEAP32[$8>>2]|0;
    HEAP32[$34>>2] = 0;
    $35 = ((($8)) + 4|0);
    HEAP32[$35>>2] = 0;
   } else {
    HEAP32[$8>>2] = 0;
    HEAP8[$31>>0] = 0;
   }
   __THREW__ = 0;
   invoke_vii(815,($8|0),0);
   $36 = __THREW__; __THREW__ = 0;
   $37 = $36&1;
   if ($37) {
    $38 = ___cxa_find_matching_catch_3(0|0)|0;
    $39 = tempRet0;
    ___clang_call_terminate($38);
    // unreachable;
   }
   ;HEAP32[$8>>2]=HEAP32[$11>>2]|0;HEAP32[$8+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$11+8>>2]|0;
   $$0$i$i$i = 0;
   while(1) {
    $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
    if ($exitcond$i$i$i) {
     break;
    }
    $40 = (($11) + ($$0$i$i$i<<2)|0);
    HEAP32[$40>>2] = 0;
    $41 = (($$0$i$i$i) + 1)|0;
    $$0$i$i$i = $41;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  } else {
   $42 = HEAP32[$22>>2]|0;
   $43 = ((($42)) + 40|0);
   $44 = HEAP32[$43>>2]|0;
   FUNCTION_TABLE_vii[$44 & 1023]($12,$22);
   $45 = HEAP32[$12>>2]|0;
   HEAP8[$3>>0]=$45&255;HEAP8[$3+1>>0]=($45>>8)&255;HEAP8[$3+2>>0]=($45>>16)&255;HEAP8[$3+3>>0]=$45>>24;
   $46 = HEAP32[$22>>2]|0;
   $47 = ((($46)) + 28|0);
   $48 = HEAP32[$47>>2]|0;
   FUNCTION_TABLE_vii[$48 & 1023]($13,$22);
   $49 = ((($8)) + 8|0);
   $50 = ((($49)) + 3|0);
   $51 = HEAP8[$50>>0]|0;
   $52 = ($51<<24>>24)<(0);
   if ($52) {
    $53 = HEAP32[$8>>2]|0;
    HEAP32[$53>>2] = 0;
    $54 = ((($8)) + 4|0);
    HEAP32[$54>>2] = 0;
   } else {
    HEAP32[$8>>2] = 0;
    HEAP8[$50>>0] = 0;
   }
   __THREW__ = 0;
   invoke_vii(815,($8|0),0);
   $55 = __THREW__; __THREW__ = 0;
   $56 = $55&1;
   if ($56) {
    $57 = ___cxa_find_matching_catch_3(0|0)|0;
    $58 = tempRet0;
    ___clang_call_terminate($57);
    // unreachable;
   }
   ;HEAP32[$8>>2]=HEAP32[$13>>2]|0;HEAP32[$8+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$13+8>>2]|0;
   $$0$i$i$i46 = 0;
   while(1) {
    $exitcond$i$i$i47 = ($$0$i$i$i46|0)==(3);
    if ($exitcond$i$i$i47) {
     break;
    }
    $59 = (($13) + ($$0$i$i$i46<<2)|0);
    HEAP32[$59>>2] = 0;
    $60 = (($$0$i$i$i46) + 1)|0;
    $$0$i$i$i46 = $60;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($13);
  }
  $61 = HEAP32[$22>>2]|0;
  $62 = ((($61)) + 12|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (FUNCTION_TABLE_ii[$63 & 1023]($22)|0);
  HEAP32[$4>>2] = $64;
  $65 = HEAP32[$22>>2]|0;
  $66 = ((($65)) + 16|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (FUNCTION_TABLE_ii[$67 & 1023]($22)|0);
  HEAP32[$5>>2] = $68;
  $69 = HEAP32[$22>>2]|0;
  $70 = ((($69)) + 20|0);
  $71 = HEAP32[$70>>2]|0;
  FUNCTION_TABLE_vii[$71 & 1023]($14,$22);
  $72 = ((($6)) + 11|0);
  $73 = HEAP8[$72>>0]|0;
  $74 = ($73<<24>>24)<(0);
  if ($74) {
   $75 = HEAP32[$6>>2]|0;
   HEAP8[$75>>0] = 0;
   $76 = ((($6)) + 4|0);
   HEAP32[$76>>2] = 0;
  } else {
   HEAP8[$6>>0] = 0;
   HEAP8[$72>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(808,($6|0),0);
  $77 = __THREW__; __THREW__ = 0;
  $78 = $77&1;
  if ($78) {
   $79 = ___cxa_find_matching_catch_3(0|0)|0;
   $80 = tempRet0;
   ___clang_call_terminate($79);
   // unreachable;
  }
  ;HEAP32[$6>>2]=HEAP32[$14>>2]|0;HEAP32[$6+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$14+8>>2]|0;
  $$0$i$i$i49 = 0;
  while(1) {
   $exitcond$i$i$i50 = ($$0$i$i$i49|0)==(3);
   if ($exitcond$i$i$i50) {
    break;
   }
   $81 = (($14) + ($$0$i$i$i49<<2)|0);
   HEAP32[$81>>2] = 0;
   $82 = (($$0$i$i$i49) + 1)|0;
   $$0$i$i$i49 = $82;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($14);
  $83 = HEAP32[$22>>2]|0;
  $84 = ((($83)) + 24|0);
  $85 = HEAP32[$84>>2]|0;
  FUNCTION_TABLE_vii[$85 & 1023]($15,$22);
  $86 = ((($7)) + 8|0);
  $87 = ((($86)) + 3|0);
  $88 = HEAP8[$87>>0]|0;
  $89 = ($88<<24>>24)<(0);
  if ($89) {
   $90 = HEAP32[$7>>2]|0;
   HEAP32[$90>>2] = 0;
   $91 = ((($7)) + 4|0);
   HEAP32[$91>>2] = 0;
  } else {
   HEAP32[$7>>2] = 0;
   HEAP8[$87>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(815,($7|0),0);
  $92 = __THREW__; __THREW__ = 0;
  $93 = $92&1;
  if ($93) {
   $94 = ___cxa_find_matching_catch_3(0|0)|0;
   $95 = tempRet0;
   ___clang_call_terminate($94);
   // unreachable;
  }
  ;HEAP32[$7>>2]=HEAP32[$15>>2]|0;HEAP32[$7+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$15+8>>2]|0;
  $$0$i$i$i53 = 0;
  while(1) {
   $exitcond$i$i$i54 = ($$0$i$i$i53|0)==(3);
   if ($exitcond$i$i$i54) {
    break;
   }
   $96 = (($15) + ($$0$i$i$i53<<2)|0);
   HEAP32[$96>>2] = 0;
   $97 = (($$0$i$i$i53) + 1)|0;
   $$0$i$i$i53 = $97;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($15);
  $98 = HEAP32[$22>>2]|0;
  $99 = ((($98)) + 36|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = (FUNCTION_TABLE_ii[$100 & 1023]($22)|0);
  $storemerge = $101;
 } else {
  $102 = (__ZNKSt3__26locale9use_facetERNS0_2idE($2,42440)|0);
  if ($1) {
   $103 = HEAP32[$102>>2]|0;
   $104 = ((($103)) + 44|0);
   $105 = HEAP32[$104>>2]|0;
   FUNCTION_TABLE_vii[$105 & 1023]($16,$102);
   $106 = HEAP32[$16>>2]|0;
   HEAP8[$3>>0]=$106&255;HEAP8[$3+1>>0]=($106>>8)&255;HEAP8[$3+2>>0]=($106>>16)&255;HEAP8[$3+3>>0]=$106>>24;
   $107 = HEAP32[$102>>2]|0;
   $108 = ((($107)) + 32|0);
   $109 = HEAP32[$108>>2]|0;
   FUNCTION_TABLE_vii[$109 & 1023]($17,$102);
   $110 = ((($8)) + 8|0);
   $111 = ((($110)) + 3|0);
   $112 = HEAP8[$111>>0]|0;
   $113 = ($112<<24>>24)<(0);
   if ($113) {
    $114 = HEAP32[$8>>2]|0;
    HEAP32[$114>>2] = 0;
    $115 = ((($8)) + 4|0);
    HEAP32[$115>>2] = 0;
   } else {
    HEAP32[$8>>2] = 0;
    HEAP8[$111>>0] = 0;
   }
   __THREW__ = 0;
   invoke_vii(815,($8|0),0);
   $116 = __THREW__; __THREW__ = 0;
   $117 = $116&1;
   if ($117) {
    $118 = ___cxa_find_matching_catch_3(0|0)|0;
    $119 = tempRet0;
    ___clang_call_terminate($118);
    // unreachable;
   }
   ;HEAP32[$8>>2]=HEAP32[$17>>2]|0;HEAP32[$8+4>>2]=HEAP32[$17+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$17+8>>2]|0;
   $$0$i$i$i58 = 0;
   while(1) {
    $exitcond$i$i$i59 = ($$0$i$i$i58|0)==(3);
    if ($exitcond$i$i$i59) {
     break;
    }
    $120 = (($17) + ($$0$i$i$i58<<2)|0);
    HEAP32[$120>>2] = 0;
    $121 = (($$0$i$i$i58) + 1)|0;
    $$0$i$i$i58 = $121;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($17);
  } else {
   $122 = HEAP32[$102>>2]|0;
   $123 = ((($122)) + 40|0);
   $124 = HEAP32[$123>>2]|0;
   FUNCTION_TABLE_vii[$124 & 1023]($18,$102);
   $125 = HEAP32[$18>>2]|0;
   HEAP8[$3>>0]=$125&255;HEAP8[$3+1>>0]=($125>>8)&255;HEAP8[$3+2>>0]=($125>>16)&255;HEAP8[$3+3>>0]=$125>>24;
   $126 = HEAP32[$102>>2]|0;
   $127 = ((($126)) + 28|0);
   $128 = HEAP32[$127>>2]|0;
   FUNCTION_TABLE_vii[$128 & 1023]($19,$102);
   $129 = ((($8)) + 8|0);
   $130 = ((($129)) + 3|0);
   $131 = HEAP8[$130>>0]|0;
   $132 = ($131<<24>>24)<(0);
   if ($132) {
    $133 = HEAP32[$8>>2]|0;
    HEAP32[$133>>2] = 0;
    $134 = ((($8)) + 4|0);
    HEAP32[$134>>2] = 0;
   } else {
    HEAP32[$8>>2] = 0;
    HEAP8[$130>>0] = 0;
   }
   __THREW__ = 0;
   invoke_vii(815,($8|0),0);
   $135 = __THREW__; __THREW__ = 0;
   $136 = $135&1;
   if ($136) {
    $137 = ___cxa_find_matching_catch_3(0|0)|0;
    $138 = tempRet0;
    ___clang_call_terminate($137);
    // unreachable;
   }
   ;HEAP32[$8>>2]=HEAP32[$19>>2]|0;HEAP32[$8+4>>2]=HEAP32[$19+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$19+8>>2]|0;
   $$0$i$i$i63 = 0;
   while(1) {
    $exitcond$i$i$i64 = ($$0$i$i$i63|0)==(3);
    if ($exitcond$i$i$i64) {
     break;
    }
    $139 = (($19) + ($$0$i$i$i63<<2)|0);
    HEAP32[$139>>2] = 0;
    $140 = (($$0$i$i$i63) + 1)|0;
    $$0$i$i$i63 = $140;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($19);
  }
  $141 = HEAP32[$102>>2]|0;
  $142 = ((($141)) + 12|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = (FUNCTION_TABLE_ii[$143 & 1023]($102)|0);
  HEAP32[$4>>2] = $144;
  $145 = HEAP32[$102>>2]|0;
  $146 = ((($145)) + 16|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = (FUNCTION_TABLE_ii[$147 & 1023]($102)|0);
  HEAP32[$5>>2] = $148;
  $149 = HEAP32[$102>>2]|0;
  $150 = ((($149)) + 20|0);
  $151 = HEAP32[$150>>2]|0;
  FUNCTION_TABLE_vii[$151 & 1023]($20,$102);
  $152 = ((($6)) + 11|0);
  $153 = HEAP8[$152>>0]|0;
  $154 = ($153<<24>>24)<(0);
  if ($154) {
   $155 = HEAP32[$6>>2]|0;
   HEAP8[$155>>0] = 0;
   $156 = ((($6)) + 4|0);
   HEAP32[$156>>2] = 0;
  } else {
   HEAP8[$6>>0] = 0;
   HEAP8[$152>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(808,($6|0),0);
  $157 = __THREW__; __THREW__ = 0;
  $158 = $157&1;
  if ($158) {
   $159 = ___cxa_find_matching_catch_3(0|0)|0;
   $160 = tempRet0;
   ___clang_call_terminate($159);
   // unreachable;
  }
  ;HEAP32[$6>>2]=HEAP32[$20>>2]|0;HEAP32[$6+4>>2]=HEAP32[$20+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$20+8>>2]|0;
  $$0$i$i$i68 = 0;
  while(1) {
   $exitcond$i$i$i69 = ($$0$i$i$i68|0)==(3);
   if ($exitcond$i$i$i69) {
    break;
   }
   $161 = (($20) + ($$0$i$i$i68<<2)|0);
   HEAP32[$161>>2] = 0;
   $162 = (($$0$i$i$i68) + 1)|0;
   $$0$i$i$i68 = $162;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($20);
  $163 = HEAP32[$102>>2]|0;
  $164 = ((($163)) + 24|0);
  $165 = HEAP32[$164>>2]|0;
  FUNCTION_TABLE_vii[$165 & 1023]($21,$102);
  $166 = ((($7)) + 8|0);
  $167 = ((($166)) + 3|0);
  $168 = HEAP8[$167>>0]|0;
  $169 = ($168<<24>>24)<(0);
  if ($169) {
   $170 = HEAP32[$7>>2]|0;
   HEAP32[$170>>2] = 0;
   $171 = ((($7)) + 4|0);
   HEAP32[$171>>2] = 0;
  } else {
   HEAP32[$7>>2] = 0;
   HEAP8[$167>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(815,($7|0),0);
  $172 = __THREW__; __THREW__ = 0;
  $173 = $172&1;
  if ($173) {
   $174 = ___cxa_find_matching_catch_3(0|0)|0;
   $175 = tempRet0;
   ___clang_call_terminate($174);
   // unreachable;
  }
  ;HEAP32[$7>>2]=HEAP32[$21>>2]|0;HEAP32[$7+4>>2]=HEAP32[$21+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$21+8>>2]|0;
  $$0$i$i$i73 = 0;
  while(1) {
   $exitcond$i$i$i74 = ($$0$i$i$i73|0)==(3);
   if ($exitcond$i$i$i74) {
    break;
   }
   $176 = (($21) + ($$0$i$i$i73<<2)|0);
   HEAP32[$176>>2] = 0;
   $177 = (($$0$i$i$i73) + 1)|0;
   $$0$i$i$i73 = $177;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($21);
  $178 = HEAP32[$102>>2]|0;
  $179 = ((($178)) + 36|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = (FUNCTION_TABLE_ii[$180 & 1023]($102)|0);
  $storemerge = $181;
 }
 HEAP32[$9>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 var $$ = 0, $$$099 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i108 = 0, $$0$i$i112 = 0, $$0101 = 0, $$0103 = 0, $$0106 = 0, $$07$i$i = 0, $$095 = 0, $$097 = 0, $$099 = 0, $$1 = 0, $$1102 = 0, $$1104 = 0, $$196 = 0, $$198 = 0, $$2 = 0, $$2105 = 0;
 var $$3 = 0, $$pre137 = 0, $$promoted = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $exitcond = 0, $or$cond = 0, $scevgep$i = 0, $scevgep$i113 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = $0;
 $15 = ((($13)) + 8|0);
 $16 = ((($15)) + 3|0);
 $17 = ((($13)) + 4|0);
 $18 = ((($12)) + 8|0);
 $19 = ((($18)) + 3|0);
 $20 = ((($12)) + 4|0);
 $21 = $3 & 512;
 $22 = ($21|0)==(0);
 $23 = ($14|0)>(0);
 $24 = ((($11)) + 11|0);
 $25 = ((($11)) + 4|0);
 $$0106 = 0;$$099 = $4;
 while(1) {
  $exitcond = ($$0106|0)==(4);
  if ($exitcond) {
   break;
  }
  $32 = (($8) + ($$0106)|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33 << 24 >> 24;
  L4: do {
   switch ($34|0) {
   case 0:  {
    $35 = HEAP32[$2>>2]|0;
    HEAP32[$1>>2] = $35;
    $$2 = $$099;
    break;
   }
   case 1:  {
    $36 = HEAP32[$2>>2]|0;
    HEAP32[$1>>2] = $36;
    $37 = HEAP32[$6>>2]|0;
    $38 = ((($37)) + 44|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (FUNCTION_TABLE_iii[$39 & 1023]($6,32)|0);
    $41 = HEAP32[$2>>2]|0;
    $42 = ((($41)) + 4|0);
    HEAP32[$2>>2] = $42;
    HEAP32[$41>>2] = $40;
    $$2 = $$099;
    break;
   }
   case 3:  {
    $43 = HEAP8[$16>>0]|0;
    $44 = ($43<<24>>24)<(0);
    $45 = HEAP32[$17>>2]|0;
    $46 = $43&255;
    $47 = $44 ? $45 : $46;
    $48 = ($47|0)==(0);
    if ($48) {
     $$2 = $$099;
    } else {
     $49 = HEAP32[$13>>2]|0;
     $50 = $44 ? $49 : $13;
     $51 = HEAP32[$50>>2]|0;
     $52 = HEAP32[$2>>2]|0;
     $53 = ((($52)) + 4|0);
     HEAP32[$2>>2] = $53;
     HEAP32[$52>>2] = $51;
     $$2 = $$099;
    }
    break;
   }
   case 2:  {
    $54 = HEAP8[$19>>0]|0;
    $55 = ($54<<24>>24)<(0);
    $56 = HEAP32[$20>>2]|0;
    $57 = $54&255;
    $58 = $55 ? $56 : $57;
    $59 = ($58|0)==(0);
    $or$cond = $22 | $59;
    if ($or$cond) {
     $$2 = $$099;
    } else {
     $60 = HEAP32[$12>>2]|0;
     $61 = $55 ? $60 : $12;
     $62 = (($61) + ($58<<2)|0);
     $63 = HEAP32[$2>>2]|0;
     $$0$i$i112 = $63;$64 = $61;
     while(1) {
      $65 = ($64|0)==($62|0);
      if ($65) {
       break;
      }
      $66 = HEAP32[$64>>2]|0;
      HEAP32[$$0$i$i112>>2] = $66;
      $67 = ((($64)) + 4|0);
      $68 = ((($$0$i$i112)) + 4|0);
      $$0$i$i112 = $68;$64 = $67;
     }
     $scevgep$i113 = (($63) + ($58<<2)|0);
     HEAP32[$2>>2] = $scevgep$i113;
     $$2 = $$099;
    }
    break;
   }
   case 4:  {
    $69 = HEAP32[$2>>2]|0;
    $70 = ((($$099)) + 4|0);
    $$$099 = $7 ? $70 : $$099;
    $$0103 = $$$099;
    while(1) {
     $71 = ($$0103>>>0)<($5>>>0);
     if (!($71)) {
      break;
     }
     $72 = HEAP32[$$0103>>2]|0;
     $73 = HEAP32[$6>>2]|0;
     $74 = ((($73)) + 12|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = (FUNCTION_TABLE_iiii[$75 & 1023]($6,2048,$72)|0);
     if (!($76)) {
      break;
     }
     $77 = ((($$0103)) + 4|0);
     $$0103 = $77;
    }
    if ($23) {
     $$0101 = $14;$$1104 = $$0103;
     while(1) {
      $78 = ($$1104>>>0)>($$$099>>>0);
      $79 = ($$0101|0)>(0);
      $80 = $78 & $79;
      if (!($80)) {
       break;
      }
      $81 = ((($$1104)) + -4|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = HEAP32[$2>>2]|0;
      $84 = ((($83)) + 4|0);
      HEAP32[$2>>2] = $84;
      HEAP32[$83>>2] = $82;
      $85 = (($$0101) + -1)|0;
      $$0101 = $85;$$1104 = $81;
     }
     if ($79) {
      $86 = HEAP32[$6>>2]|0;
      $87 = ((($86)) + 44|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = (FUNCTION_TABLE_iii[$88 & 1023]($6,48)|0);
      $93 = $89;
     } else {
      $93 = 0;
     }
     $$promoted = HEAP32[$2>>2]|0;
     $$1102 = $$0101;$92 = $$promoted;
     while(1) {
      $90 = ($$1102|0)>(0);
      $91 = ((($92)) + 4|0);
      if (!($90)) {
       break;
      }
      HEAP32[$92>>2] = $93;
      $94 = (($$1102) + -1)|0;
      $$1102 = $94;$92 = $91;
     }
     HEAP32[$2>>2] = $91;
     HEAP32[$92>>2] = $9;
     $$2105 = $$1104;
    } else {
     $$2105 = $$0103;
    }
    $95 = ($$2105|0)==($$$099|0);
    if ($95) {
     $96 = HEAP32[$6>>2]|0;
     $97 = ((($96)) + 44|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = (FUNCTION_TABLE_iii[$98 & 1023]($6,48)|0);
     $100 = HEAP32[$2>>2]|0;
     $101 = ((($100)) + 4|0);
     HEAP32[$2>>2] = $101;
     HEAP32[$100>>2] = $99;
     $130 = $101;
    } else {
     $102 = HEAP8[$24>>0]|0;
     $103 = ($102<<24>>24)<(0);
     $104 = HEAP32[$25>>2]|0;
     $105 = $102&255;
     $106 = $103 ? $104 : $105;
     $107 = ($106|0)==(0);
     if ($107) {
      $$0 = -1;$$095 = 0;$$097 = 0;$$3 = $$2105;
     } else {
      $108 = HEAP32[$11>>2]|0;
      $109 = $103 ? $108 : $11;
      $110 = HEAP8[$109>>0]|0;
      $111 = $110 << 24 >> 24;
      $$0 = $111;$$095 = 0;$$097 = 0;$$3 = $$2105;
     }
     while(1) {
      $112 = ($$3|0)==($$$099|0);
      if ($112) {
       break;
      }
      $113 = ($$097|0)==($$0|0);
      $114 = HEAP32[$2>>2]|0;
      if ($113) {
       $115 = ((($114)) + 4|0);
       HEAP32[$2>>2] = $115;
       HEAP32[$114>>2] = $10;
       $116 = (($$095) + 1)|0;
       $117 = ($116>>>0)<($106>>>0);
       if ($117) {
        $118 = HEAP32[$11>>2]|0;
        $119 = $103 ? $118 : $11;
        $120 = (($119) + ($116)|0);
        $121 = HEAP8[$120>>0]|0;
        $122 = ($121<<24>>24)==(127);
        $123 = $121 << 24 >> 24;
        $$ = $122 ? -1 : $123;
        $$1 = $$;$$196 = $116;$$198 = 0;$127 = $115;
       } else {
        $$1 = $$097;$$196 = $116;$$198 = 0;$127 = $115;
       }
      } else {
       $$1 = $$0;$$196 = $$095;$$198 = $$097;$127 = $114;
      }
      $124 = ((($$3)) + -4|0);
      $125 = HEAP32[$124>>2]|0;
      $126 = ((($127)) + 4|0);
      HEAP32[$2>>2] = $126;
      HEAP32[$127>>2] = $125;
      $128 = (($$198) + 1)|0;
      $$0 = $$1;$$095 = $$196;$$097 = $128;$$3 = $124;
     }
     $$pre137 = HEAP32[$2>>2]|0;
     $130 = $$pre137;
    }
    $129 = ($69|0)==($130|0);
    if ($129) {
     $$2 = $$$099;
    } else {
     $$0$i$i108 = $130;$$07$i$i = $69;
     while(1) {
      $131 = ((($$0$i$i108)) + -4|0);
      $132 = ($$07$i$i>>>0)<($131>>>0);
      if (!($132)) {
       $$2 = $$$099;
       break L4;
      }
      $133 = HEAP32[$$07$i$i>>2]|0;
      $134 = HEAP32[$131>>2]|0;
      HEAP32[$$07$i$i>>2] = $134;
      HEAP32[$131>>2] = $133;
      $135 = ((($$07$i$i)) + 4|0);
      $$0$i$i108 = $131;$$07$i$i = $135;
     }
    }
    break;
   }
   default: {
    $$2 = $$099;
   }
   }
  } while(0);
  $136 = (($$0106) + 1)|0;
  $$0106 = $136;$$099 = $$2;
 }
 $26 = HEAP8[$16>>0]|0;
 $27 = ($26<<24>>24)<(0);
 $28 = HEAP32[$17>>2]|0;
 $29 = $26&255;
 $30 = $27 ? $28 : $29;
 $31 = ($30>>>0)>(1);
 if ($31) {
  $137 = HEAP32[$13>>2]|0;
  $138 = $27 ? $137 : $13;
  $139 = ((($138)) + 4|0);
  $140 = (($138) + ($30<<2)|0);
  $141 = HEAP32[$2>>2]|0;
  $142 = $139;
  $143 = $140;
  $144 = (($143) - ($142))|0;
  $$0$i$i = $141;$145 = $139;
  while(1) {
   $146 = ($145|0)==($140|0);
   if ($146) {
    break;
   }
   $147 = HEAP32[$145>>2]|0;
   HEAP32[$$0$i$i>>2] = $147;
   $148 = ((($145)) + 4|0);
   $149 = ((($$0$i$i)) + 4|0);
   $$0$i$i = $149;$145 = $148;
  }
  $150 = $144 >>> 2;
  $scevgep$i = (($141) + ($150<<2)|0);
  HEAP32[$2>>2] = $scevgep$i;
 }
 $151 = $3 & 176;
 $trunc = $151&255;
 switch ($trunc<<24>>24) {
 case 32:  {
  $152 = HEAP32[$2>>2]|0;
  HEAP32[$1>>2] = $152;
  break;
 }
 case 16:  {
  break;
 }
 default: {
  HEAP32[$1>>2] = $0;
 }
 }
 return;
}
function __ZNSt3__28messagesIcED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__28messagesIcED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 $6 = HEAP32[$1>>2]|0;
 $7 = $5 ? $6 : $1;
 $8 = (_catopen($7,1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 return ($$|0);
}
function __ZNKSt3__28messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i24 = 0, $$0$i28 = 0, $$1 = 0, $$123 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i = 0, $exitcond$i$i25 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp;
 ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $7 = (($6) + ($$0$i$i<<2)|0);
  HEAP32[$7>>2] = 0;
  $8 = (($$0$i$i) + 1)|0;
  $$0$i$i = $8;
 }
 $9 = ((($5)) + 11|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)<(0);
 $12 = HEAP32[$5>>2]|0;
 $13 = $11 ? $12 : $5;
 $14 = ((($5)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $10&255;
 $17 = $11 ? $15 : $16;
 $18 = (($13) + ($17)|0);
 $$0$i28 = $13;
 while(1) {
  $19 = ($$0$i28>>>0)<($18>>>0);
  if (!($19)) {
   label = 8;
   break;
  }
  $20 = HEAP8[$$0$i28>>0]|0;
  __THREW__ = 0;
  invoke_vii(665,($6|0),($20|0));
  $21 = __THREW__; __THREW__ = 0;
  $22 = $21&1;
  if ($22) {
   label = 9;
   break;
  }
  $23 = ((($$0$i28)) + 1|0);
  $$0$i28 = $23;
 }
 do {
  if ((label|0) == 8) {
   $24 = ($2|0)==(-1);
   $25 = $2 << 1;
   $26 = $25;
   $27 = $24 ? (-1) : $26;
   $28 = ((($6)) + 11|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = ($29<<24>>24)<(0);
   $31 = HEAP32[$6>>2]|0;
   $32 = $30 ? $31 : $6;
   __THREW__ = 0;
   $33 = (invoke_iiiii(820,($27|0),($3|0),($4|0),($32|0))|0);
   $34 = __THREW__; __THREW__ = 0;
   $35 = $34&1;
   if ($35) {
    $47 = ___cxa_find_matching_catch_2()|0;
    $48 = tempRet0;
    $$1 = $47;$$123 = $48;
    break;
   }
   ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
   $$0$i$i24 = 0;
   while(1) {
    $exitcond$i$i25 = ($$0$i$i24|0)==(3);
    if ($exitcond$i$i25) {
     break;
    }
    $38 = (($0) + ($$0$i$i24<<2)|0);
    HEAP32[$38>>2] = 0;
    $39 = (($$0$i$i24) + 1)|0;
    $$0$i$i24 = $39;
   }
   $40 = (_strlen($33)|0);
   $41 = (($33) + ($40)|0);
   $$0$i = $33;
   while(1) {
    $42 = ($$0$i>>>0)<($41>>>0);
    if (!($42)) {
     label = 19;
     break;
    }
    $43 = HEAP8[$$0$i>>0]|0;
    __THREW__ = 0;
    invoke_vii(665,($0|0),($43|0));
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if ($45) {
     label = 18;
     break;
    }
    $46 = ((($$0$i)) + 1|0);
    $$0$i = $46;
   }
   if ((label|0) == 18) {
    $49 = ___cxa_find_matching_catch_2()|0;
    $50 = tempRet0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
    $$1 = $49;$$123 = $50;
    break;
   }
   else if ((label|0) == 19) {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
    STACKTOP = sp;return;
   }
  }
  else if ((label|0) == 9) {
   $36 = ___cxa_find_matching_catch_2()|0;
   $37 = tempRet0;
   $$1 = $36;$$123 = $37;
  }
 } while(0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNKSt3__28messagesIcE8do_closeEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__28messagesIwED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__28messagesIwED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 $6 = HEAP32[$1>>2]|0;
 $7 = $5 ? $6 : $1;
 $8 = (_catopen($7,1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 return ($$|0);
}
function __ZNKSt3__28messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i28 = 0, $$0$i31 = 0, $$016$i = 0, $$017$i = 0, $$019$i = 0, $$020$i = 0, $$2 = 0, $$224 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $exitcond$i$i29 = 0, $lpad$phi$index = 0, $lpad$phi$index10 = 0, $lpad$phi47$index = 0, $lpad$phi47$index3 = 0;
 var $or$cond$i = 0, $or$cond$i30 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $6 = sp + 184|0;
 $7 = sp + 192|0;
 $8 = sp + 180|0;
 $9 = sp + 176|0;
 $10 = sp + 168|0;
 $11 = sp + 40|0;
 $12 = sp + 32|0;
 $13 = sp + 28|0;
 $14 = sp + 16|0;
 $15 = sp + 8|0;
 $16 = sp;
 ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $17 = (($14) + ($$0$i$i<<2)|0);
  HEAP32[$17>>2] = 0;
  $18 = (($$0$i$i) + 1)|0;
  $$0$i$i = $18;
 }
 $19 = ((($15)) + 4|0);
 HEAP32[$19>>2] = 0;
 HEAP32[$15>>2] = (18188);
 $20 = ((($5)) + 8|0);
 $21 = ((($20)) + 3|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = ($22<<24>>24)<(0);
 $24 = HEAP32[$5>>2]|0;
 $25 = $23 ? $24 : $5;
 $26 = ((($5)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $22&255;
 $29 = $23 ? $27 : $28;
 $30 = (($25) + ($29<<2)|0);
 $31 = ((($7)) + 32|0);
 $$016$i = $25;$$017$i = 0;
 L5: while(1) {
  $32 = ($$016$i>>>0)<($30>>>0);
  $33 = ($$017$i|0)!=(2);
  $34 = $33 & $32;
  if (!($34)) {
   label = 13;
   break;
  }
  HEAP32[$9>>2] = $$016$i;
  $35 = HEAP32[$15>>2]|0;
  $36 = ((($35)) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  __THREW__ = 0;
  $38 = (invoke_iiiiiiiii($37|0,($15|0),($6|0),($$016$i|0),($30|0),($9|0),($7|0),($31|0),($8|0))|0);
  $39 = __THREW__; __THREW__ = 0;
  $40 = $39&1;
  if ($40) {
   label = 15;
   break;
  }
  $41 = ($38|0)==(2);
  $42 = HEAP32[$9>>2]|0;
  $43 = ($42|0)==($$016$i|0);
  $or$cond$i30 = $41 | $43;
  if ($or$cond$i30) {
   label = 8;
   break;
  } else {
   $$0$i31 = $7;
  }
  while(1) {
   $47 = HEAP32[$8>>2]|0;
   $48 = ($$0$i31>>>0)<($47>>>0);
   if (!($48)) {
    break;
   }
   $50 = HEAP8[$$0$i31>>0]|0;
   __THREW__ = 0;
   invoke_vii(665,($14|0),($50|0));
   $51 = __THREW__; __THREW__ = 0;
   $52 = $51&1;
   if ($52) {
    label = 14;
    break L5;
   }
   $53 = ((($$0$i31)) + 1|0);
   $$0$i31 = $53;
  }
  $49 = HEAP32[$9>>2]|0;
  $$016$i = $49;$$017$i = $38;
 }
 do {
  if ((label|0) == 8) {
   __THREW__ = 0;
   invoke_vi(803,(33728|0));
   $44 = __THREW__; __THREW__ = 0;
   $45 = ___cxa_find_matching_catch_2()|0;
   $46 = tempRet0;
   $lpad$phi47$index = $45;$lpad$phi47$index3 = $46;
   label = 16;
  }
  else if ((label|0) == 13) {
   $54 = ($2|0)==(-1);
   $55 = $2 << 1;
   $56 = $55;
   $57 = $54 ? (-1) : $56;
   $58 = ((($14)) + 11|0);
   $59 = HEAP8[$58>>0]|0;
   $60 = ($59<<24>>24)<(0);
   $61 = HEAP32[$14>>2]|0;
   $62 = $60 ? $61 : $14;
   __THREW__ = 0;
   $63 = (invoke_iiiii(820,($57|0),($3|0),($4|0),($62|0))|0);
   $64 = __THREW__; __THREW__ = 0;
   $65 = $64&1;
   if ($65) {
    $104 = ___cxa_find_matching_catch_2()|0;
    $105 = tempRet0;
    $$2 = $104;$$224 = $105;
    break;
   }
   ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
   $$0$i$i28 = 0;
   while(1) {
    $exitcond$i$i29 = ($$0$i$i28|0)==(3);
    if ($exitcond$i$i29) {
     break;
    }
    $70 = (($0) + ($$0$i$i28<<2)|0);
    HEAP32[$70>>2] = 0;
    $71 = (($$0$i$i28) + 1)|0;
    $$0$i$i28 = $71;
   }
   $72 = ((($16)) + 4|0);
   HEAP32[$72>>2] = 0;
   HEAP32[$16>>2] = (18236);
   $73 = (_strlen($63)|0);
   $74 = (($63) + ($73)|0);
   $75 = $74;
   $76 = ((($11)) + 128|0);
   $$019$i = $63;$$020$i = 0;
   L23: while(1) {
    $77 = ($$019$i>>>0)<($74>>>0);
    $78 = ($$020$i|0)!=(2);
    $79 = $78 & $77;
    if (!($79)) {
     label = 29;
     break;
    }
    HEAP32[$13>>2] = $$019$i;
    $80 = HEAP32[$16>>2]|0;
    $81 = ((($80)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = $$019$i;
    $84 = (($75) - ($83))|0;
    $85 = ($84|0)>(32);
    $86 = ((($$019$i)) + 32|0);
    $87 = $85 ? $86 : $74;
    __THREW__ = 0;
    $88 = (invoke_iiiiiiiii($82|0,($16|0),($10|0),($$019$i|0),($87|0),($13|0),($11|0),($76|0),($12|0))|0);
    $89 = __THREW__; __THREW__ = 0;
    $90 = $89&1;
    if ($90) {
     label = 32;
     break;
    }
    $91 = ($88|0)==(2);
    $92 = HEAP32[$13>>2]|0;
    $93 = ($92|0)==($$019$i|0);
    $or$cond$i = $91 | $93;
    if ($or$cond$i) {
     label = 24;
     break;
    } else {
     $$0$i = $11;
    }
    while(1) {
     $97 = HEAP32[$12>>2]|0;
     $98 = ($$0$i>>>0)<($97>>>0);
     if (!($98)) {
      break;
     }
     $100 = HEAP32[$$0$i>>2]|0;
     __THREW__ = 0;
     invoke_vii(811,($0|0),($100|0));
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 31;
      break L23;
     }
     $103 = ((($$0$i)) + 4|0);
     $$0$i = $103;
    }
    $99 = HEAP32[$13>>2]|0;
    $$019$i = $99;$$020$i = $88;
   }
   if ((label|0) == 24) {
    __THREW__ = 0;
    invoke_vi(803,(33728|0));
    $94 = __THREW__; __THREW__ = 0;
    $95 = ___cxa_find_matching_catch_2()|0;
    $96 = tempRet0;
    $lpad$phi$index = $95;$lpad$phi$index10 = $96;
   }
   else if ((label|0) == 29) {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($14);
    STACKTOP = sp;return;
   }
   else if ((label|0) == 31) {
    $106 = ___cxa_find_matching_catch_2()|0;
    $107 = tempRet0;
    $lpad$phi$index = $106;$lpad$phi$index10 = $107;
   }
   else if ((label|0) == 32) {
    $108 = ___cxa_find_matching_catch_2()|0;
    $109 = tempRet0;
    $lpad$phi$index = $108;$lpad$phi$index10 = $109;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($0);
   $$2 = $lpad$phi$index;$$224 = $lpad$phi$index10;
  }
  else if ((label|0) == 14) {
   $66 = ___cxa_find_matching_catch_2()|0;
   $67 = tempRet0;
   $lpad$phi47$index = $66;$lpad$phi47$index3 = $67;
   label = 16;
  }
  else if ((label|0) == 15) {
   $68 = ___cxa_find_matching_catch_2()|0;
   $69 = tempRet0;
   $lpad$phi47$index = $68;$lpad$phi47$index3 = $69;
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $$2 = $lpad$phi47$index;$$224 = $lpad$phi47$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($14);
 ___resumeException($$2|0);
 // unreachable;
}
function __ZNKSt3__28messagesIwE8do_closeEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26locale5facetD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__217__widen_from_utf8ILj32EED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $5;
 $10 = (__ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($2,$3,$8,$5,$6,$9,1114111,0)|0);
 $11 = HEAP32[$8>>2]|0;
 HEAP32[$4>>2] = $11;
 $12 = HEAP32[$9>>2]|0;
 HEAP32[$7>>2] = $12;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $5;
 $10 = (__ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($2,$3,$8,$5,$6,$9,1114111,0)|0);
 $11 = HEAP32[$8>>2]|0;
 HEAP32[$4>>2] = $11;
 $12 = HEAP32[$9>>2]|0;
 HEAP32[$7>>2] = $12;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$4>>2] = $2;
 return 3;
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (__ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($2,$3,$4,1114111,0)|0);
 return ($5|0);
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$091 = 0, $$185 = 0, $$395 = 0, $$589 = 0, $$off = 0, $$pre = 0, $$pre132 = 0, $$pre134 = 0, $$pre136 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $4 & 4;
 $6 = ($5|0)==(0);
 $$pre136 = $1;
 if ($6) {
  $$091 = 0;$$185 = $0;
 } else {
  $7 = $0;
  $8 = (($$pre136) - ($7))|0;
  $9 = ($8|0)>(2);
  if ($9) {
   $10 = HEAP8[$0>>0]|0;
   $11 = ($10<<24>>24)==(-17);
   if ($11) {
    $12 = ((($0)) + 1|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = ($13<<24>>24)==(-69);
    if ($14) {
     $15 = ((($0)) + 2|0);
     $16 = HEAP8[$15>>0]|0;
     $17 = ($16<<24>>24)==(-65);
     $18 = ((($0)) + 3|0);
     $$ = $17 ? $18 : $0;
     $$091 = 0;$$185 = $$;
    } else {
     $$091 = 0;$$185 = $0;
    }
   } else {
    $$091 = 0;$$185 = $0;
   }
  } else {
   $$091 = 0;$$185 = $0;
  }
 }
 L6: while(1) {
  $19 = ($$185>>>0)<($1>>>0);
  $20 = ($$091>>>0)<($2>>>0);
  $or$cond = $20 & $19;
  if (!($or$cond)) {
   label = 40;
   break;
  }
  $21 = HEAP8[$$185>>0]|0;
  $22 = $21&255;
  $23 = ($21<<24>>24)>(-1);
  do {
   if ($23) {
    $24 = ($22>>>0)>($3>>>0);
    if ($24) {
     label = 40;
     break L6;
    }
    $25 = ((($$185)) + 1|0);
    $$589 = $25;
   } else {
    $26 = ($21&255)<(194);
    if ($26) {
     label = 40;
     break L6;
    }
    $27 = ($21&255)<(224);
    if ($27) {
     $28 = $$185;
     $29 = (($$pre136) - ($28))|0;
     $30 = ($29|0)<(2);
     if ($30) {
      label = 40;
      break L6;
     }
     $31 = ((($$185)) + 1|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = $32&255;
     $34 = $33 & 192;
     $35 = ($34|0)==(128);
     if (!($35)) {
      label = 40;
      break L6;
     }
     $36 = $22 << 6;
     $37 = $36 & 1984;
     $38 = $33 & 63;
     $39 = $38 | $37;
     $40 = ($39>>>0)>($3>>>0);
     if ($40) {
      label = 40;
      break L6;
     }
     $41 = ((($$185)) + 2|0);
     $$589 = $41;
     break;
    }
    $42 = ($21&255)<(240);
    if ($42) {
     $43 = $$185;
     $44 = (($$pre136) - ($43))|0;
     $45 = ($44|0)<(3);
     if ($45) {
      label = 40;
      break L6;
     }
     $46 = ((($$185)) + 1|0);
     $47 = HEAP8[$46>>0]|0;
     $48 = ((($$185)) + 2|0);
     $49 = HEAP8[$48>>0]|0;
     switch ($21<<24>>24) {
     case -32:  {
      $50 = $47 & -32;
      $51 = ($50<<24>>24)==(-96);
      if (!($51)) {
       label = 20;
       break L6;
      }
      break;
     }
     case -19:  {
      $54 = $47 & -32;
      $55 = ($54<<24>>24)==(-128);
      if (!($55)) {
       label = 22;
       break L6;
      }
      break;
     }
     default: {
      $58 = $47 & -64;
      $59 = ($58<<24>>24)==(-128);
      if (!($59)) {
       label = 24;
       break L6;
      }
     }
     }
     $62 = $49&255;
     $63 = $62 & 192;
     $64 = ($63|0)==(128);
     if (!($64)) {
      label = 40;
      break L6;
     }
     $65 = $22 << 12;
     $66 = $65 & 61440;
     $67 = $47&255;
     $68 = $67 << 6;
     $69 = $68 & 4032;
     $70 = $69 | $66;
     $71 = $62 & 63;
     $72 = $70 | $71;
     $73 = ($72>>>0)>($3>>>0);
     $74 = ((($$185)) + 3|0);
     if ($73) {
      label = 40;
      break L6;
     } else {
      $$589 = $74;
      break;
     }
    }
    $75 = ($21&255)<(245);
    if (!($75)) {
     label = 40;
     break L6;
    }
    $76 = $$185;
    $77 = (($$pre136) - ($76))|0;
    $78 = ($77|0)<(4);
    if ($78) {
     label = 40;
     break L6;
    }
    $79 = ((($$185)) + 1|0);
    $80 = HEAP8[$79>>0]|0;
    $81 = ((($$185)) + 2|0);
    $82 = HEAP8[$81>>0]|0;
    $83 = ((($$185)) + 3|0);
    $84 = HEAP8[$83>>0]|0;
    switch ($21<<24>>24) {
    case -16:  {
     $$off = (($80) + 112)<<24>>24;
     $85 = ($$off&255)<(48);
     if (!($85)) {
      label = 31;
      break L6;
     }
     break;
    }
    case -12:  {
     $88 = $80 & -16;
     $89 = ($88<<24>>24)==(-128);
     if (!($89)) {
      label = 33;
      break L6;
     }
     break;
    }
    default: {
     $92 = $80 & -64;
     $93 = ($92<<24>>24)==(-128);
     if (!($93)) {
      label = 35;
      break L6;
     }
    }
    }
    $96 = $82&255;
    $97 = $96 & 192;
    $98 = ($97|0)==(128);
    if (!($98)) {
     label = 40;
     break L6;
    }
    $99 = $84&255;
    $100 = $99 & 192;
    $101 = ($100|0)==(128);
    if (!($101)) {
     label = 40;
     break L6;
    }
    $102 = $22 << 18;
    $103 = $102 & 1835008;
    $104 = $80&255;
    $105 = $104 << 12;
    $106 = $105 & 258048;
    $107 = $106 | $103;
    $108 = $96 << 6;
    $109 = $108 & 4032;
    $110 = $107 | $109;
    $111 = $99 & 63;
    $112 = $110 | $111;
    $113 = ($112>>>0)>($3>>>0);
    $114 = ((($$185)) + 4|0);
    if ($113) {
     label = 40;
     break L6;
    } else {
     $$589 = $114;
    }
   }
  } while(0);
  $115 = (($$091) + 1)|0;
  $$091 = $115;$$185 = $$589;
 }
 if ((label|0) == 20) {
  $52 = $0;
  $53 = (($43) - ($52))|0;
  $$395 = $53;
 }
 else if ((label|0) == 22) {
  $56 = $0;
  $57 = (($43) - ($56))|0;
  $$395 = $57;
 }
 else if ((label|0) == 24) {
  $60 = $0;
  $61 = (($43) - ($60))|0;
  $$395 = $61;
 }
 else if ((label|0) == 31) {
  $86 = $0;
  $87 = (($76) - ($86))|0;
  $$395 = $87;
 }
 else if ((label|0) == 33) {
  $90 = $0;
  $91 = (($76) - ($90))|0;
  $$395 = $91;
 }
 else if ((label|0) == 35) {
  $94 = $0;
  $95 = (($76) - ($94))|0;
  $$395 = $95;
 }
 else if ((label|0) == 40) {
  $$pre = $$185;
  $$pre132 = $0;
  $$pre134 = (($$pre) - ($$pre132))|0;
  $$395 = $$pre134;
 }
 return ($$395|0);
}
function __ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$9 = 0, $$off = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = $0;
 HEAP32[$5>>2] = $3;
 $8 = $7 & 4;
 $9 = ($8|0)==(0);
 if ($9) {
  $$pre = $1;
  $$pre$phiZ2D = $$pre;
 } else {
  $10 = HEAP32[$2>>2]|0;
  $11 = $1;
  $12 = $10;
  $13 = (($11) - ($12))|0;
  $14 = ($13|0)>(2);
  if ($14) {
   $15 = HEAP8[$10>>0]|0;
   $16 = ($15<<24>>24)==(-17);
   if ($16) {
    $17 = ((($10)) + 1|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = ($18<<24>>24)==(-69);
    if ($19) {
     $20 = ((($10)) + 2|0);
     $21 = HEAP8[$20>>0]|0;
     $22 = ($21<<24>>24)==(-65);
     if ($22) {
      $23 = ((($10)) + 3|0);
      HEAP32[$2>>2] = $23;
      $$pre$phiZ2D = $11;
     } else {
      $$pre$phiZ2D = $11;
     }
    } else {
     $$pre$phiZ2D = $11;
    }
   } else {
    $$pre$phiZ2D = $11;
   }
  } else {
   $$pre$phiZ2D = $11;
  }
 }
 L9: while(1) {
  $24 = HEAP32[$2>>2]|0;
  $25 = ($24>>>0)<($1>>>0);
  if (!($25)) {
   label = 40;
   break;
  }
  $26 = HEAP32[$5>>2]|0;
  $27 = ($26>>>0)<($4>>>0);
  if (!($27)) {
   label = 40;
   break;
  }
  $28 = HEAP8[$24>>0]|0;
  $29 = $28&255;
  $30 = ($28<<24>>24)>(-1);
  do {
   if ($30) {
    $31 = ($29>>>0)>($6>>>0);
    if ($31) {
     $$9 = 2;
     break L9;
    }
    HEAP32[$26>>2] = $29;
    $32 = ((($24)) + 1|0);
    HEAP32[$2>>2] = $32;
   } else {
    $33 = ($28&255)<(194);
    if ($33) {
     $$9 = 2;
     break L9;
    }
    $34 = ($28&255)<(224);
    if ($34) {
     $35 = $24;
     $36 = (($$pre$phiZ2D) - ($35))|0;
     $37 = ($36|0)<(2);
     if ($37) {
      $$9 = 1;
      break L9;
     }
     $38 = ((($24)) + 1|0);
     $39 = HEAP8[$38>>0]|0;
     $40 = $39&255;
     $41 = $40 & 192;
     $42 = ($41|0)==(128);
     if (!($42)) {
      $$9 = 2;
      break L9;
     }
     $43 = $29 << 6;
     $44 = $43 & 1984;
     $45 = $40 & 63;
     $46 = $45 | $44;
     $47 = ($46>>>0)>($6>>>0);
     if ($47) {
      $$9 = 2;
      break L9;
     }
     HEAP32[$26>>2] = $46;
     $48 = ((($24)) + 2|0);
     HEAP32[$2>>2] = $48;
     break;
    }
    $49 = ($28&255)<(240);
    if ($49) {
     $50 = $24;
     $51 = (($$pre$phiZ2D) - ($50))|0;
     $52 = ($51|0)<(3);
     if ($52) {
      $$9 = 1;
      break L9;
     }
     $53 = ((($24)) + 1|0);
     $54 = HEAP8[$53>>0]|0;
     $55 = ((($24)) + 2|0);
     $56 = HEAP8[$55>>0]|0;
     switch ($28<<24>>24) {
     case -32:  {
      $57 = $54 & -32;
      $58 = ($57<<24>>24)==(-96);
      if (!($58)) {
       $$9 = 2;
       break L9;
      }
      break;
     }
     case -19:  {
      $59 = $54 & -32;
      $60 = ($59<<24>>24)==(-128);
      if (!($60)) {
       $$9 = 2;
       break L9;
      }
      break;
     }
     default: {
      $61 = $54 & -64;
      $62 = ($61<<24>>24)==(-128);
      if (!($62)) {
       $$9 = 2;
       break L9;
      }
     }
     }
     $63 = $56&255;
     $64 = $63 & 192;
     $65 = ($64|0)==(128);
     if (!($65)) {
      $$9 = 2;
      break L9;
     }
     $66 = $29 << 12;
     $67 = $66 & 61440;
     $68 = $54&255;
     $69 = $68 << 6;
     $70 = $69 & 4032;
     $71 = $70 | $67;
     $72 = $63 & 63;
     $73 = $71 | $72;
     $74 = ($73>>>0)>($6>>>0);
     if ($74) {
      $$9 = 2;
      break L9;
     }
     HEAP32[$26>>2] = $73;
     $75 = ((($24)) + 3|0);
     HEAP32[$2>>2] = $75;
     break;
    }
    $76 = ($28&255)<(245);
    if (!($76)) {
     $$9 = 2;
     break L9;
    }
    $77 = $24;
    $78 = (($$pre$phiZ2D) - ($77))|0;
    $79 = ($78|0)<(4);
    if ($79) {
     $$9 = 1;
     break L9;
    }
    $80 = ((($24)) + 1|0);
    $81 = HEAP8[$80>>0]|0;
    $82 = ((($24)) + 2|0);
    $83 = HEAP8[$82>>0]|0;
    $84 = ((($24)) + 3|0);
    $85 = HEAP8[$84>>0]|0;
    switch ($28<<24>>24) {
    case -16:  {
     $$off = (($81) + 112)<<24>>24;
     $86 = ($$off&255)<(48);
     if (!($86)) {
      $$9 = 2;
      break L9;
     }
     break;
    }
    case -12:  {
     $87 = $81 & -16;
     $88 = ($87<<24>>24)==(-128);
     if (!($88)) {
      $$9 = 2;
      break L9;
     }
     break;
    }
    default: {
     $89 = $81 & -64;
     $90 = ($89<<24>>24)==(-128);
     if (!($90)) {
      $$9 = 2;
      break L9;
     }
    }
    }
    $91 = $83&255;
    $92 = $91 & 192;
    $93 = ($92|0)==(128);
    if (!($93)) {
     $$9 = 2;
     break L9;
    }
    $94 = $85&255;
    $95 = $94 & 192;
    $96 = ($95|0)==(128);
    if (!($96)) {
     $$9 = 2;
     break L9;
    }
    $97 = $29 << 18;
    $98 = $97 & 1835008;
    $99 = $81&255;
    $100 = $99 << 12;
    $101 = $100 & 258048;
    $102 = $101 | $98;
    $103 = $91 << 6;
    $104 = $103 & 4032;
    $105 = $102 | $104;
    $106 = $94 & 63;
    $107 = $105 | $106;
    $108 = ($107>>>0)>($6>>>0);
    if ($108) {
     $$9 = 2;
     break L9;
    }
    HEAP32[$26>>2] = $107;
    $109 = ((($24)) + 4|0);
    HEAP32[$2>>2] = $109;
   }
  } while(0);
  $110 = HEAP32[$5>>2]|0;
  $111 = ((($110)) + 4|0);
  HEAP32[$5>>2] = $111;
 }
 if ((label|0) == 40) {
  $112 = $25&1;
  $$9 = $112;
 }
 return ($$9|0);
}
function __ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$2 = 0, $$pre = 0, $$pre49 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = $0;
 HEAP32[$5>>2] = $3;
 $8 = $7 & 2;
 $9 = ($8|0)==(0);
 $$pre49 = $4;
 if ($9) {
  label = 4;
 } else {
  $10 = $3;
  $11 = (($$pre49) - ($10))|0;
  $12 = ($11|0)<(3);
  if ($12) {
   $$2 = 1;
  } else {
   $13 = ((($3)) + 1|0);
   HEAP32[$5>>2] = $13;
   HEAP8[$3>>0] = -17;
   $14 = HEAP32[$5>>2]|0;
   $15 = ((($14)) + 1|0);
   HEAP32[$5>>2] = $15;
   HEAP8[$14>>0] = -69;
   $16 = HEAP32[$5>>2]|0;
   $17 = ((($16)) + 1|0);
   HEAP32[$5>>2] = $17;
   HEAP8[$16>>0] = -65;
   label = 4;
  }
 }
 L4: do {
  if ((label|0) == 4) {
   $$pre = HEAP32[$2>>2]|0;
   $18 = $$pre;
   while(1) {
    $19 = ($18>>>0)<($1>>>0);
    if (!($19)) {
     $$2 = 0;
     break L4;
    }
    $20 = HEAP32[$18>>2]|0;
    $21 = $20 & -2048;
    $22 = ($21|0)==(55296);
    $23 = ($20>>>0)>($6>>>0);
    $or$cond = $23 | $22;
    if ($or$cond) {
     $$2 = 2;
     break L4;
    }
    $24 = ($20>>>0)<(128);
    do {
     if ($24) {
      $25 = HEAP32[$5>>2]|0;
      $26 = $25;
      $27 = (($$pre49) - ($26))|0;
      $28 = ($27|0)<(1);
      if ($28) {
       $$2 = 1;
       break L4;
      }
      $29 = $20&255;
      $30 = ((($25)) + 1|0);
      HEAP32[$5>>2] = $30;
      HEAP8[$25>>0] = $29;
     } else {
      $31 = ($20>>>0)<(2048);
      if ($31) {
       $32 = HEAP32[$5>>2]|0;
       $33 = $32;
       $34 = (($$pre49) - ($33))|0;
       $35 = ($34|0)<(2);
       if ($35) {
        $$2 = 1;
        break L4;
       }
       $36 = $20 >>> 6;
       $37 = $36 | 192;
       $38 = $37&255;
       $39 = ((($32)) + 1|0);
       HEAP32[$5>>2] = $39;
       HEAP8[$32>>0] = $38;
       $40 = $20 & 63;
       $41 = $40 | 128;
       $42 = $41&255;
       $43 = HEAP32[$5>>2]|0;
       $44 = ((($43)) + 1|0);
       HEAP32[$5>>2] = $44;
       HEAP8[$43>>0] = $42;
       break;
      }
      $45 = ($20>>>0)<(65536);
      $46 = HEAP32[$5>>2]|0;
      $47 = $46;
      $48 = (($$pre49) - ($47))|0;
      if ($45) {
       $49 = ($48|0)<(3);
       if ($49) {
        $$2 = 1;
        break L4;
       }
       $50 = $20 >>> 12;
       $51 = $50 | 224;
       $52 = $51&255;
       $53 = ((($46)) + 1|0);
       HEAP32[$5>>2] = $53;
       HEAP8[$46>>0] = $52;
       $54 = $20 >>> 6;
       $55 = $54 & 63;
       $56 = $55 | 128;
       $57 = $56&255;
       $58 = HEAP32[$5>>2]|0;
       $59 = ((($58)) + 1|0);
       HEAP32[$5>>2] = $59;
       HEAP8[$58>>0] = $57;
       $60 = $20 & 63;
       $61 = $60 | 128;
       $62 = $61&255;
       $63 = HEAP32[$5>>2]|0;
       $64 = ((($63)) + 1|0);
       HEAP32[$5>>2] = $64;
       HEAP8[$63>>0] = $62;
       break;
      } else {
       $65 = ($48|0)<(4);
       if ($65) {
        $$2 = 1;
        break L4;
       }
       $66 = $20 >>> 18;
       $67 = $66 | 240;
       $68 = $67&255;
       $69 = ((($46)) + 1|0);
       HEAP32[$5>>2] = $69;
       HEAP8[$46>>0] = $68;
       $70 = $20 >>> 12;
       $71 = $70 & 63;
       $72 = $71 | 128;
       $73 = $72&255;
       $74 = HEAP32[$5>>2]|0;
       $75 = ((($74)) + 1|0);
       HEAP32[$5>>2] = $75;
       HEAP8[$74>>0] = $73;
       $76 = $20 >>> 6;
       $77 = $76 & 63;
       $78 = $77 | 128;
       $79 = $78&255;
       $80 = HEAP32[$5>>2]|0;
       $81 = ((($80)) + 1|0);
       HEAP32[$5>>2] = $81;
       HEAP8[$80>>0] = $79;
       $82 = $20 & 63;
       $83 = $82 | 128;
       $84 = $83&255;
       $85 = HEAP32[$5>>2]|0;
       $86 = ((($85)) + 1|0);
       HEAP32[$5>>2] = $86;
       HEAP8[$85>>0] = $84;
       break;
      }
     }
    } while(0);
    $87 = HEAP32[$2>>2]|0;
    $88 = ((($87)) + 4|0);
    HEAP32[$2>>2] = $88;
    $18 = $88;
   }
  }
 } while(0);
 return ($$2|0);
}
function __ZNSt3__216__narrow_to_utf8ILj32EED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$4>>2] = $2;
 HEAP32[$7>>2] = $5;
 return 3;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$4>>2] = $2;
 HEAP32[$7>>2] = $5;
 return 3;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$4>>2] = $2;
 return 3;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sroa$speculated = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $3;
 $6 = $2;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<($4>>>0);
 $$sroa$speculated = $8 ? $7 : $4;
 return ($$sroa$speculated|0);
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0 = 0, $$069 = 0, $$070 = 0, $$070$lcssa = 0, $$077 = 0, $$079 = 0, $$171 = 0, $$173 = 0, $$178 = 0, $$2 = 0, $$2$lcssa = 0, $$375$ph = 0, $$476 = 0, $$5$ph87 = 0, $$pre = 0, $$pre170 = 0, $$pre171 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp;
 $9 = sp + 8|0;
 $$070 = $2;
 while(1) {
  $10 = ($$070|0)==($3|0);
  if ($10) {
   $$070$lcssa = $3;
   break;
  }
  $11 = HEAP32[$$070>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   $$070$lcssa = $$070;
   break;
  }
  $13 = ((($$070)) + 4|0);
  $$070 = $13;
 }
 HEAP32[$7>>2] = $5;
 HEAP32[$4>>2] = $2;
 $14 = $6;
 $15 = ((($0)) + 8|0);
 $$077 = $2;$$079 = $5;$$171 = $$070$lcssa;
 L6: while(1) {
  $16 = ($$077|0)==($3|0);
  $17 = ($$079|0)==($6|0);
  $or$cond = $17 | $16;
  if ($or$cond) {
   $113 = $$077;
   label = 53;
   break;
  }
  $18 = $1;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (($18) + 4)|0;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = $8;
  $25 = $24;
  HEAP32[$25>>2] = $20;
  $26 = (($24) + 4)|0;
  $27 = $26;
  HEAP32[$27>>2] = $23;
  $28 = $$171;
  $29 = $$077;
  $30 = (($28) - ($29))|0;
  $31 = $30 >> 2;
  $32 = $$079;
  $33 = (($14) - ($32))|0;
  $34 = HEAP32[$15>>2]|0;
  $35 = (_uselocale($34)|0);
  __THREW__ = 0;
  $36 = (invoke_iiiiii(821,($$079|0),($4|0),($31|0),($33|0),($1|0))|0);
  $37 = __THREW__; __THREW__ = 0;
  $38 = $37&1;
  if ($38) {
   label = 11;
   break;
  }
  $39 = ($35|0)==(0|0);
  if (!($39)) {
   __THREW__ = 0;
   (invoke_ii(765,($35|0))|0);
   $40 = __THREW__; __THREW__ = 0;
   $41 = $40&1;
   if ($41) {
    label = 10;
    break;
   }
  }
  switch ($36|0) {
  case -1:  {
   label = 16;
   break L6;
   break;
  }
  case 0:  {
   $$375$ph = 1;
   label = 50;
   break L6;
   break;
  }
  default: {
  }
  }
  $76 = HEAP32[$7>>2]|0;
  $77 = (($76) + ($36)|0);
  HEAP32[$7>>2] = $77;
  $78 = ($77|0)==($6|0);
  if ($78) {
   label = 51;
   break;
  }
  $79 = ($$171|0)==($3|0);
  if ($79) {
   $$pre = HEAP32[$4>>2]|0;
   $$5$ph87 = $3;$115 = $77;$116 = $$pre;
  } else {
   $80 = HEAP32[$15>>2]|0;
   $81 = (_uselocale($80)|0);
   __THREW__ = 0;
   $82 = (invoke_iiii(822,($9|0),0,($1|0))|0);
   $83 = __THREW__; __THREW__ = 0;
   $84 = $83&1;
   if ($84) {
    label = 36;
    break;
   }
   $85 = ($81|0)==(0|0);
   if (!($85)) {
    __THREW__ = 0;
    (invoke_ii(765,($81|0))|0);
    $86 = __THREW__; __THREW__ = 0;
    $87 = $86&1;
    if ($87) {
     label = 35;
     break;
    }
   }
   $97 = ($82|0)==(-1);
   if ($97) {
    $$173 = 2;
    label = 49;
    break;
   }
   $98 = HEAP32[$7>>2]|0;
   $99 = (($14) - ($98))|0;
   $100 = ($82>>>0)>($99>>>0);
   if ($100) {
    $$173 = 1;
    label = 49;
    break;
   } else {
    $$0 = $9;$$069 = $82;
   }
   while(1) {
    $101 = ($$069|0)==(0);
    if ($101) {
     break;
    }
    $104 = ((($$0)) + 1|0);
    $105 = HEAP8[$$0>>0]|0;
    $106 = HEAP32[$7>>2]|0;
    $107 = ((($106)) + 1|0);
    HEAP32[$7>>2] = $107;
    HEAP8[$106>>0] = $105;
    $108 = (($$069) + -1)|0;
    $$0 = $104;$$069 = $108;
   }
   $102 = HEAP32[$4>>2]|0;
   $103 = ((($102)) + 4|0);
   HEAP32[$4>>2] = $103;
   $$2 = $103;
   while(1) {
    $109 = ($$2|0)==($3|0);
    if ($109) {
     $$2$lcssa = $3;
     break;
    }
    $110 = HEAP32[$$2>>2]|0;
    $111 = ($110|0)==(0);
    if ($111) {
     $$2$lcssa = $$2;
     break;
    }
    $112 = ((($$2)) + 4|0);
    $$2 = $112;
   }
   $$pre170 = HEAP32[$7>>2]|0;
   $$5$ph87 = $$2$lcssa;$115 = $$pre170;$116 = $103;
  }
  $$077 = $116;$$079 = $115;$$171 = $$5$ph87;
 }
 do {
  if ((label|0) == 10) {
   $42 = ___cxa_find_matching_catch_3(0|0)|0;
   $43 = tempRet0;
   ___clang_call_terminate($42);
   // unreachable;
  }
  else if ((label|0) == 11) {
   $44 = ___cxa_find_matching_catch_2()|0;
   $45 = tempRet0;
   $46 = ($35|0)==(0|0);
   if (!($46)) {
    __THREW__ = 0;
    (invoke_ii(765,($35|0))|0);
    $47 = __THREW__; __THREW__ = 0;
    $48 = $47&1;
    if ($48) {
     $49 = ___cxa_find_matching_catch_3(0|0)|0;
     $50 = tempRet0;
     ___clang_call_terminate($49);
     // unreachable;
    }
   }
   ___resumeException($44|0);
   // unreachable;
  }
  else if ((label|0) == 16) {
   HEAP32[$7>>2] = $$079;
   $$178 = $$077;$56 = $$079;
   while(1) {
    $51 = HEAP32[$4>>2]|0;
    $52 = ($$178|0)==($51|0);
    if ($52) {
     label = 28;
     break;
    }
    $53 = HEAP32[$$178>>2]|0;
    $54 = HEAP32[$15>>2]|0;
    $55 = (_uselocale($54)|0);
    __THREW__ = 0;
    $57 = (invoke_iiii(822,($56|0),($53|0),($8|0))|0);
    $58 = __THREW__; __THREW__ = 0;
    $59 = $58&1;
    if ($59) {
     label = 22;
     break;
    }
    $60 = ($55|0)==(0|0);
    if (!($60)) {
     __THREW__ = 0;
     (invoke_ii(765,($55|0))|0);
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      label = 21;
      break;
     }
    }
    $72 = ($57|0)==(-1);
    if ($72) {
     label = 28;
     break;
    }
    $73 = HEAP32[$7>>2]|0;
    $74 = (($73) + ($57)|0);
    HEAP32[$7>>2] = $74;
    $75 = ((($$178)) + 4|0);
    $$178 = $75;$56 = $74;
   }
   if ((label|0) == 21) {
    $63 = ___cxa_find_matching_catch_3(0|0)|0;
    $64 = tempRet0;
    ___clang_call_terminate($63);
    // unreachable;
   }
   else if ((label|0) == 22) {
    $65 = ___cxa_find_matching_catch_2()|0;
    $66 = tempRet0;
    $67 = ($55|0)==(0|0);
    if (!($67)) {
     __THREW__ = 0;
     (invoke_ii(765,($55|0))|0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      $70 = ___cxa_find_matching_catch_3(0|0)|0;
      $71 = tempRet0;
      ___clang_call_terminate($70);
      // unreachable;
     }
    }
    ___resumeException($65|0);
    // unreachable;
   }
   else if ((label|0) == 28) {
    HEAP32[$4>>2] = $$178;
    $$375$ph = 2;
    label = 50;
    break;
   }
  }
  else if ((label|0) == 35) {
   $88 = ___cxa_find_matching_catch_3(0|0)|0;
   $89 = tempRet0;
   ___clang_call_terminate($88);
   // unreachable;
  }
  else if ((label|0) == 36) {
   $90 = ___cxa_find_matching_catch_2()|0;
   $91 = tempRet0;
   $92 = ($81|0)==(0|0);
   if (!($92)) {
    __THREW__ = 0;
    (invoke_ii(765,($81|0))|0);
    $93 = __THREW__; __THREW__ = 0;
    $94 = $93&1;
    if ($94) {
     $95 = ___cxa_find_matching_catch_3(0|0)|0;
     $96 = tempRet0;
     ___clang_call_terminate($95);
     // unreachable;
    }
   }
   ___resumeException($90|0);
   // unreachable;
  }
  else if ((label|0) == 49) {
   $$375$ph = $$173;
   label = 50;
  }
  else if ((label|0) == 51) {
   $$pre171 = HEAP32[$4>>2]|0;
   $113 = $$pre171;
   label = 53;
  }
 } while(0);
 if ((label|0) == 50) {
  $$476 = $$375$ph;
 }
 else if ((label|0) == 53) {
  $not$ = ($113|0)!=($3|0);
  $114 = $not$&1;
  $$476 = $114;
 }
 STACKTOP = sp;return ($$476|0);
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$070 = 0, $$070$lcssa = 0, $$074 = 0, $$077 = 0, $$1 = 0, $$172$ph = 0, $$175 = 0, $$2 = 0, $$2$lcssa = 0, $$273 = 0, $$276 = 0, $$4$ph = 0, $$pre = 0, $$pre176 = 0, $$pre177 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $not$78 = 0;
 var $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp;
 $$070 = $2;
 while(1) {
  $9 = ($$070|0)==($3|0);
  if ($9) {
   $$070$lcssa = $3;
   break;
  }
  $10 = HEAP8[$$070>>0]|0;
  $11 = ($10<<24>>24)==(0);
  if ($11) {
   $$070$lcssa = $$070;
   break;
  }
  $12 = ((($$070)) + 1|0);
  $$070 = $12;
 }
 HEAP32[$7>>2] = $5;
 HEAP32[$4>>2] = $2;
 $13 = $6;
 $14 = ((($0)) + 8|0);
 $$074 = $2;$$077 = $5;$$1 = $$070$lcssa;
 while(1) {
  $15 = ($$074|0)==($3|0);
  $16 = ($$077|0)==($6|0);
  $or$cond = $16 | $15;
  if ($or$cond) {
   $107 = $$074;
   label = 51;
   break;
  }
  $17 = $1;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + 4)|0;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = $8;
  $24 = $23;
  HEAP32[$24>>2] = $19;
  $25 = (($23) + 4)|0;
  $26 = $25;
  HEAP32[$26>>2] = $22;
  $27 = $$1;
  $28 = $$074;
  $29 = (($27) - ($28))|0;
  $30 = $$077;
  $31 = (($13) - ($30))|0;
  $32 = $31 >> 2;
  $33 = HEAP32[$14>>2]|0;
  $34 = (_uselocale($33)|0);
  __THREW__ = 0;
  $35 = (invoke_iiiiii(823,($$077|0),($4|0),($29|0),($32|0),($1|0))|0);
  $36 = __THREW__; __THREW__ = 0;
  $37 = $36&1;
  if ($37) {
   label = 11;
   break;
  }
  $38 = ($34|0)==(0|0);
  if (!($38)) {
   __THREW__ = 0;
   (invoke_ii(765,($34|0))|0);
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if ($40) {
    label = 10;
    break;
   }
  }
  $50 = ($35|0)==(-1);
  if ($50) {
   $$175 = $$074;$storemerge = $$077;
   label = 16;
   break;
  }
  $77 = HEAP32[$7>>2]|0;
  $78 = (($77) + ($35<<2)|0);
  HEAP32[$7>>2] = $78;
  $79 = ($78|0)==($6|0);
  if ($79) {
   label = 48;
   break;
  }
  $80 = ($$1|0)==($3|0);
  $$pre = HEAP32[$4>>2]|0;
  if ($80) {
   $$4$ph = $3;$109 = $78;$110 = $$pre;
  } else {
   $81 = HEAP32[$14>>2]|0;
   $82 = (_uselocale($81)|0);
   __THREW__ = 0;
   $83 = (invoke_iiiii(824,($78|0),($$pre|0),1,($1|0))|0);
   $84 = __THREW__; __THREW__ = 0;
   $85 = $84&1;
   if ($85) {
    label = 38;
    break;
   }
   $86 = ($82|0)==(0|0);
   if (!($86)) {
    __THREW__ = 0;
    (invoke_ii(765,($82|0))|0);
    $87 = __THREW__; __THREW__ = 0;
    $88 = $87&1;
    if ($88) {
     label = 37;
     break;
    }
   }
   $98 = ($83|0)==(0);
   if (!($98)) {
    $$172$ph = 2;
    label = 47;
    break;
   }
   $99 = HEAP32[$7>>2]|0;
   $100 = ((($99)) + 4|0);
   HEAP32[$7>>2] = $100;
   $101 = HEAP32[$4>>2]|0;
   $102 = ((($101)) + 1|0);
   HEAP32[$4>>2] = $102;
   $$2 = $102;
   while(1) {
    $103 = ($$2|0)==($3|0);
    if ($103) {
     $$2$lcssa = $3;
     break;
    }
    $104 = HEAP8[$$2>>0]|0;
    $105 = ($104<<24>>24)==(0);
    if ($105) {
     $$2$lcssa = $$2;
     break;
    }
    $106 = ((($$2)) + 1|0);
    $$2 = $106;
   }
   $$pre176 = HEAP32[$7>>2]|0;
   $$4$ph = $$2$lcssa;$109 = $$pre176;$110 = $102;
  }
  $$074 = $110;$$077 = $109;$$1 = $$4$ph;
 }
 do {
  if ((label|0) == 10) {
   $41 = ___cxa_find_matching_catch_3(0|0)|0;
   $42 = tempRet0;
   ___clang_call_terminate($41);
   // unreachable;
  }
  else if ((label|0) == 11) {
   $43 = ___cxa_find_matching_catch_2()|0;
   $44 = tempRet0;
   $45 = ($34|0)==(0|0);
   if (!($45)) {
    __THREW__ = 0;
    (invoke_ii(765,($34|0))|0);
    $46 = __THREW__; __THREW__ = 0;
    $47 = $46&1;
    if ($47) {
     $48 = ___cxa_find_matching_catch_3(0|0)|0;
     $49 = tempRet0;
     ___clang_call_terminate($48);
     // unreachable;
    }
   }
   ___resumeException($43|0);
   // unreachable;
  }
  else if ((label|0) == 16) {
   L30: while(1) {
    label = 0;
    HEAP32[$7>>2] = $storemerge;
    $51 = HEAP32[$4>>2]|0;
    $52 = ($$175|0)==($51|0);
    if ($52) {
     label = 31;
     break;
    }
    $53 = $$175;
    $54 = (($27) - ($53))|0;
    $55 = HEAP32[$14>>2]|0;
    $56 = (_uselocale($55)|0);
    __THREW__ = 0;
    $57 = (invoke_iiiii(824,($storemerge|0),($$175|0),($54|0),($8|0))|0);
    $58 = __THREW__; __THREW__ = 0;
    $59 = $58&1;
    if ($59) {
     label = 21;
     break;
    }
    $60 = ($56|0)==(0|0);
    if (!($60)) {
     __THREW__ = 0;
     (invoke_ii(765,($56|0))|0);
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      label = 20;
      break;
     }
    }
    switch ($57|0) {
    case -1:  {
     label = 27;
     break L30;
     break;
    }
    case -2:  {
     label = 28;
     break L30;
     break;
    }
    case 0:  {
     $72 = ((($$175)) + 1|0);
     $$276 = $72;
     break;
    }
    default: {
     $73 = (($$175) + ($57)|0);
     $$276 = $73;
    }
    }
    $74 = HEAP32[$7>>2]|0;
    $75 = ((($74)) + 4|0);
    $$175 = $$276;$storemerge = $75;
    label = 16;
   }
   if ((label|0) == 20) {
    $63 = ___cxa_find_matching_catch_3(0|0)|0;
    $64 = tempRet0;
    ___clang_call_terminate($63);
    // unreachable;
   }
   else if ((label|0) == 21) {
    $65 = ___cxa_find_matching_catch_2()|0;
    $66 = tempRet0;
    $67 = ($56|0)==(0|0);
    if (!($67)) {
     __THREW__ = 0;
     (invoke_ii(765,($56|0))|0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      $70 = ___cxa_find_matching_catch_3(0|0)|0;
      $71 = tempRet0;
      ___clang_call_terminate($70);
      // unreachable;
     }
    }
    ___resumeException($65|0);
    // unreachable;
   }
   else if ((label|0) == 27) {
    HEAP32[$4>>2] = $$175;
    $$172$ph = 2;
    label = 47;
    break;
   }
   else if ((label|0) == 28) {
    HEAP32[$4>>2] = $$175;
    $$172$ph = 1;
    label = 47;
    break;
   }
   else if ((label|0) == 31) {
    HEAP32[$4>>2] = $$175;
    $not$78 = ($$175|0)!=($3|0);
    $76 = $not$78&1;
    $$172$ph = $76;
    label = 47;
    break;
   }
  }
  else if ((label|0) == 37) {
   $89 = ___cxa_find_matching_catch_3(0|0)|0;
   $90 = tempRet0;
   ___clang_call_terminate($89);
   // unreachable;
  }
  else if ((label|0) == 38) {
   $91 = ___cxa_find_matching_catch_2()|0;
   $92 = tempRet0;
   $93 = ($82|0)==(0|0);
   if (!($93)) {
    __THREW__ = 0;
    (invoke_ii(765,($82|0))|0);
    $94 = __THREW__; __THREW__ = 0;
    $95 = $94&1;
    if ($95) {
     $96 = ___cxa_find_matching_catch_3(0|0)|0;
     $97 = tempRet0;
     ___clang_call_terminate($96);
     // unreachable;
    }
   }
   ___resumeException($91|0);
   // unreachable;
  }
  else if ((label|0) == 48) {
   $$pre177 = HEAP32[$4>>2]|0;
   $107 = $$pre177;
   label = 51;
  }
 } while(0);
 if ((label|0) == 47) {
  $$273 = $$172$ph;
 }
 else if ((label|0) == 51) {
  $not$ = ($107|0)!=($3|0);
  $108 = $not$&1;
  $$273 = $108;
 }
 STACKTOP = sp;return ($$273|0);
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$018 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 HEAP32[$4>>2] = $2;
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_uselocale($7)|0);
 __THREW__ = 0;
 $9 = (invoke_iiii(822,($5|0),0,($1|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $17 = ___cxa_find_matching_catch_2()|0;
  $18 = tempRet0;
  $19 = ($8|0)==(0|0);
  if (!($19)) {
   __THREW__ = 0;
   (invoke_ii(765,($8|0))|0);
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if ($21) {
    $22 = ___cxa_find_matching_catch_3(0|0)|0;
    $23 = tempRet0;
    ___clang_call_terminate($22);
    // unreachable;
   }
  }
  ___resumeException($17|0);
  // unreachable;
 }
 $12 = ($8|0)==(0|0);
 if (!($12)) {
  __THREW__ = 0;
  (invoke_ii(765,($8|0))|0);
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if ($14) {
   $15 = ___cxa_find_matching_catch_3(0|0)|0;
   $16 = tempRet0;
   ___clang_call_terminate($15);
   // unreachable;
  }
 }
 L12: do {
  switch ($9|0) {
  case 0: case -1:  {
   $$019 = 2;
   break;
  }
  default: {
   $24 = (($9) + -1)|0;
   $25 = HEAP32[$4>>2]|0;
   $26 = $3;
   $27 = (($26) - ($25))|0;
   $28 = ($24>>>0)>($27>>>0);
   if ($28) {
    $$019 = 1;
   } else {
    $$0 = $5;$$018 = $24;
    while(1) {
     $29 = ($$018|0)==(0);
     if ($29) {
      $$019 = 0;
      break L12;
     }
     $30 = ((($$0)) + 1|0);
     $31 = HEAP8[$$0>>0]|0;
     $32 = HEAP32[$4>>2]|0;
     $33 = ((($32)) + 1|0);
     HEAP32[$4>>2] = $33;
     HEAP8[$32>>0] = $31;
     $34 = (($$018) + -1)|0;
     $$0 = $30;$$018 = $34;
    }
   }
  }
  }
 } while(0);
 STACKTOP = sp;return ($$019|0);
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$indexZ2D = 0, $merge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 $3 = (invoke_ii(765,($2|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 do {
  if ($5) {
   label = 16;
  } else {
   __THREW__ = 0;
   $6 = (invoke_iiii(825,(0|0),(0|0),4)|0);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if ($8) {
    $14 = ___cxa_find_matching_catch_3(0|0)|0;
    $15 = tempRet0;
    $16 = ($3|0)==(0|0);
    if ($16) {
     $eh$lpad$body$indexZ2D = $14;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(765,($3|0))|0);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if (!($18)) {
     $eh$lpad$body$indexZ2D = $14;
     break;
    }
    $19 = ___cxa_find_matching_catch_3(0|0)|0;
    $20 = tempRet0;
    ___clang_call_terminate($19);
    // unreachable;
   }
   $9 = ($3|0)==(0|0);
   if (!($9)) {
    __THREW__ = 0;
    (invoke_ii(765,($3|0))|0);
    $10 = __THREW__; __THREW__ = 0;
    $11 = $10&1;
    if ($11) {
     $12 = ___cxa_find_matching_catch_3(0|0)|0;
     $13 = tempRet0;
     ___clang_call_terminate($12);
     // unreachable;
    }
   }
   $21 = ($6|0)==(0);
   if ($21) {
    $22 = HEAP32[$1>>2]|0;
    $23 = ($22|0)==(0|0);
    if ($23) {
     $merge = 1;
    } else {
     __THREW__ = 0;
     $24 = (invoke_ii(765,($22|0))|0);
     $25 = __THREW__; __THREW__ = 0;
     $26 = $25&1;
     if ($26) {
      label = 16;
      break;
     }
     $27 = ($24|0)==(0|0);
     if ($27) {
      $merge = 0;
     } else {
      __THREW__ = 0;
      (invoke_ii(765,($24|0))|0);
      $28 = __THREW__; __THREW__ = 0;
      $29 = $28&1;
      if ($29) {
       $30 = ___cxa_find_matching_catch_3(0|0)|0;
       $31 = tempRet0;
       ___clang_call_terminate($30);
       // unreachable;
      } else {
       $merge = 0;
      }
     }
    }
   } else {
    $merge = -1;
   }
   return ($merge|0);
  }
 } while(0);
 if ((label|0) == 16) {
  $32 = ___cxa_find_matching_catch_3(0|0)|0;
  $33 = tempRet0;
  $eh$lpad$body$indexZ2D = $32;
 }
 ___clang_call_terminate($eh$lpad$body$indexZ2D);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$029 = 0, $$030 = 0, $$034 = 0, $$131 = 0, $$135 = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $3;
 $6 = ((($0)) + 8|0);
 $$029 = 0;$$030 = 0;$$034 = $2;
 L1: while(1) {
  $7 = ($$029>>>0)>=($4>>>0);
  $8 = ($$034|0)==($3|0);
  $or$cond = $8 | $7;
  if ($or$cond) {
   label = 15;
   break;
  }
  $9 = $$034;
  $10 = (($5) - ($9))|0;
  $11 = HEAP32[$6>>2]|0;
  $12 = (_uselocale($11)|0);
  __THREW__ = 0;
  $13 = (invoke_iiii(826,($$034|0),($10|0),($1|0))|0);
  $14 = __THREW__; __THREW__ = 0;
  $15 = $14&1;
  if ($15) {
   label = 7;
   break;
  }
  $16 = ($12|0)==(0|0);
  if (!($16)) {
   __THREW__ = 0;
   (invoke_ii(765,($12|0))|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    label = 6;
    break;
   }
  }
  switch ($13|0) {
  case -2: case -1:  {
   label = 15;
   break L1;
   break;
  }
  case 0:  {
   $28 = ((($$034)) + 1|0);
   $$135 = $28;$$pn = 1;
   break;
  }
  default: {
   $29 = (($$034) + ($13)|0);
   $$135 = $29;$$pn = $13;
  }
  }
  $$131 = (($$pn) + ($$030))|0;
  $30 = (($$029) + 1)|0;
  $$029 = $30;$$030 = $$131;$$034 = $$135;
 }
 if ((label|0) == 6) {
  $19 = ___cxa_find_matching_catch_3(0|0)|0;
  $20 = tempRet0;
  ___clang_call_terminate($19);
  // unreachable;
 }
 else if ((label|0) == 7) {
  $21 = ___cxa_find_matching_catch_2()|0;
  $22 = tempRet0;
  $23 = ($12|0)==(0|0);
  if (!($23)) {
   __THREW__ = 0;
   (invoke_ii(765,($12|0))|0);
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if ($25) {
    $26 = ___cxa_find_matching_catch_3(0|0)|0;
    $27 = tempRet0;
    ___clang_call_terminate($26);
    // unreachable;
   }
  }
  ___resumeException($21|0);
  // unreachable;
 }
 else if ((label|0) == 15) {
  return ($$030|0);
 }
 return (0)|0;
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $12 = 1;
 } else {
  __THREW__ = 0;
  $4 = (invoke_ii(765,($2|0))|0);
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if ($6) {
   $13 = ___cxa_find_matching_catch_3(0|0)|0;
   $14 = tempRet0;
   ___clang_call_terminate($13);
   // unreachable;
  }
  $7 = ($4|0)==(0|0);
  if ($7) {
   $12 = 4;
  } else {
   __THREW__ = 0;
   (invoke_ii(765,($4|0))|0);
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if ($9) {
    $10 = ___cxa_find_matching_catch_3(0|0)|0;
    $11 = tempRet0;
    ___clang_call_terminate($10);
    // unreachable;
   } else {
    $12 = 4;
   }
  }
 }
 return ($12|0);
}
function __ZNSt3__27codecvtIwc11__mbstate_tED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (18284);
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 $3 = (invoke_i(762)|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 do {
  if (!($5)) {
   $6 = ($2|0)==($3|0);
   if (!($6)) {
    $7 = HEAP32[$1>>2]|0;
    __THREW__ = 0;
    invoke_vi(798,($7|0));
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if ($9) {
     break;
    }
   }
   return;
  }
 } while(0);
 $10 = ___cxa_find_matching_catch_3(0|0)|0;
 $11 = tempRet0;
 __ZNSt3__26locale5facetD2Ev($0);
 ___clang_call_terminate($10);
 // unreachable;
}
function __ZNSt3__27codecvtIwc11__mbstate_tED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__27codecvtIwc11__mbstate_tED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $5;
 $10 = (__ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($2,$3,$8,$5,$6,$9,1114111,0)|0);
 $11 = HEAP32[$8>>2]|0;
 HEAP32[$4>>2] = $11;
 $12 = HEAP32[$9>>2]|0;
 HEAP32[$7>>2] = $12;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $5;
 $10 = (__ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($2,$3,$8,$5,$6,$9,1114111,0)|0);
 $11 = HEAP32[$8>>2]|0;
 HEAP32[$4>>2] = $11;
 $12 = HEAP32[$9>>2]|0;
 HEAP32[$7>>2] = $12;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$4>>2] = $2;
 return 3;
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (__ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($2,$3,$4,1114111,0)|0);
 return ($5|0);
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0100 = 0, $$194 = 0, $$2102 = 0, $$598 = 0, $$off = 0, $$pre = 0, $$pre142 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond110 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $4 & 4;
 $6 = ($5|0)==(0);
 $$pre142 = $1;
 if ($6) {
  $$0100 = 0;$$194 = $0;
 } else {
  $7 = $0;
  $8 = (($$pre142) - ($7))|0;
  $9 = ($8|0)>(2);
  if ($9) {
   $10 = HEAP8[$0>>0]|0;
   $11 = ($10<<24>>24)==(-17);
   if ($11) {
    $12 = ((($0)) + 1|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = ($13<<24>>24)==(-69);
    if ($14) {
     $15 = ((($0)) + 2|0);
     $16 = HEAP8[$15>>0]|0;
     $17 = ($16<<24>>24)==(-65);
     $18 = ((($0)) + 3|0);
     $$ = $17 ? $18 : $0;
     $$0100 = 0;$$194 = $$;
    } else {
     $$0100 = 0;$$194 = $0;
    }
   } else {
    $$0100 = 0;$$194 = $0;
   }
  } else {
   $$0100 = 0;$$194 = $0;
  }
 }
 L6: while(1) {
  $19 = ($$194>>>0)<($1>>>0);
  $20 = ($$0100>>>0)<($2>>>0);
  $or$cond = $20 & $19;
  if (!($or$cond)) {
   label = 39;
   break;
  }
  $21 = HEAP8[$$194>>0]|0;
  $22 = $21&255;
  $23 = ($22>>>0)>($3>>>0);
  if ($23) {
   label = 39;
   break;
  }
  $24 = ($21<<24>>24)>(-1);
  do {
   if ($24) {
    $25 = ((($$194)) + 1|0);
    $$2102 = $$0100;$$598 = $25;
   } else {
    $26 = ($21&255)<(194);
    if ($26) {
     label = 39;
     break L6;
    }
    $27 = ($21&255)<(224);
    if ($27) {
     $28 = $$194;
     $29 = (($$pre142) - ($28))|0;
     $30 = ($29|0)<(2);
     if ($30) {
      label = 39;
      break L6;
     }
     $31 = ((($$194)) + 1|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = $32&255;
     $34 = $33 & 192;
     $35 = ($34|0)==(128);
     if (!($35)) {
      label = 39;
      break L6;
     }
     $36 = $22 << 6;
     $37 = $36 & 1984;
     $38 = $33 & 63;
     $39 = $38 | $37;
     $40 = ($39>>>0)>($3>>>0);
     $41 = ((($$194)) + 2|0);
     if ($40) {
      label = 39;
      break L6;
     } else {
      $$2102 = $$0100;$$598 = $41;
      break;
     }
    }
    $42 = ($21&255)<(240);
    if ($42) {
     $43 = $$194;
     $44 = (($$pre142) - ($43))|0;
     $45 = ($44|0)<(3);
     if ($45) {
      label = 39;
      break L6;
     }
     $46 = ((($$194)) + 1|0);
     $47 = HEAP8[$46>>0]|0;
     $48 = ((($$194)) + 2|0);
     $49 = HEAP8[$48>>0]|0;
     switch ($21<<24>>24) {
     case -32:  {
      $50 = $47 & -32;
      $51 = ($50<<24>>24)==(-96);
      if (!($51)) {
       label = 19;
       break L6;
      }
      break;
     }
     case -19:  {
      $54 = $47 & -32;
      $55 = ($54<<24>>24)==(-128);
      if (!($55)) {
       label = 21;
       break L6;
      }
      break;
     }
     default: {
      $58 = $47 & -64;
      $59 = ($58<<24>>24)==(-128);
      if (!($59)) {
       label = 23;
       break L6;
      }
     }
     }
     $62 = $49&255;
     $63 = $62 & 192;
     $64 = ($63|0)==(128);
     if (!($64)) {
      label = 39;
      break L6;
     }
     $65 = $22 << 12;
     $66 = $65 & 61440;
     $67 = $47&255;
     $68 = $67 << 6;
     $69 = $68 & 4032;
     $70 = $69 | $66;
     $71 = $62 & 63;
     $72 = $70 | $71;
     $73 = ($72>>>0)>($3>>>0);
     $74 = ((($$194)) + 3|0);
     if ($73) {
      label = 39;
      break L6;
     } else {
      $$2102 = $$0100;$$598 = $74;
      break;
     }
    }
    $75 = ($21&255)<(245);
    if (!($75)) {
     label = 39;
     break L6;
    }
    $76 = $$194;
    $77 = (($$pre142) - ($76))|0;
    $78 = ($77|0)<(4);
    $79 = (($2) - ($$0100))|0;
    $80 = ($79>>>0)<(2);
    $or$cond110 = $80 | $78;
    if ($or$cond110) {
     label = 39;
     break L6;
    }
    $81 = ((($$194)) + 1|0);
    $82 = HEAP8[$81>>0]|0;
    $83 = ((($$194)) + 2|0);
    $84 = HEAP8[$83>>0]|0;
    $85 = ((($$194)) + 3|0);
    $86 = HEAP8[$85>>0]|0;
    switch ($21<<24>>24) {
    case -16:  {
     $$off = (($82) + 112)<<24>>24;
     $87 = ($$off&255)<(48);
     if (!($87)) {
      label = 30;
      break L6;
     }
     break;
    }
    case -12:  {
     $90 = $82 & -16;
     $91 = ($90<<24>>24)==(-128);
     if (!($91)) {
      label = 32;
      break L6;
     }
     break;
    }
    default: {
     $94 = $82 & -64;
     $95 = ($94<<24>>24)==(-128);
     if (!($95)) {
      label = 34;
      break L6;
     }
    }
    }
    $98 = $84&255;
    $99 = $98 & 192;
    $100 = ($99|0)==(128);
    if (!($100)) {
     label = 39;
     break L6;
    }
    $101 = $86&255;
    $102 = $101 & 192;
    $103 = ($102|0)==(128);
    if (!($103)) {
     label = 39;
     break L6;
    }
    $104 = $22 << 18;
    $105 = $104 & 1835008;
    $106 = $82&255;
    $107 = $106 << 12;
    $108 = $107 & 258048;
    $109 = $108 | $105;
    $110 = $98 << 6;
    $111 = $110 & 4032;
    $112 = $109 | $111;
    $113 = $101 & 63;
    $114 = $112 | $113;
    $115 = ($114>>>0)>($3>>>0);
    $116 = (($$0100) + 1)|0;
    $117 = ((($$194)) + 4|0);
    if ($115) {
     label = 39;
     break L6;
    } else {
     $$2102 = $116;$$598 = $117;
    }
   }
  } while(0);
  $118 = (($$2102) + 1)|0;
  $$0100 = $118;$$194 = $$598;
 }
 if ((label|0) == 19) {
  $52 = $0;
  $53 = (($43) - ($52))|0;
  $121 = $53;
 }
 else if ((label|0) == 21) {
  $56 = $0;
  $57 = (($43) - ($56))|0;
  $121 = $57;
 }
 else if ((label|0) == 23) {
  $60 = $0;
  $61 = (($43) - ($60))|0;
  $121 = $61;
 }
 else if ((label|0) == 30) {
  $88 = $0;
  $89 = (($76) - ($88))|0;
  $121 = $89;
 }
 else if ((label|0) == 32) {
  $92 = $0;
  $93 = (($76) - ($92))|0;
  $121 = $93;
 }
 else if ((label|0) == 34) {
  $96 = $0;
  $97 = (($76) - ($96))|0;
  $121 = $97;
 }
 else if ((label|0) == 39) {
  $$pre = $0;
  $119 = $$194;
  $120 = (($119) - ($$pre))|0;
  $121 = $120;
 }
 return ($121|0);
}
function __ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$8 = 0, $$off = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = $0;
 HEAP32[$5>>2] = $3;
 $8 = $7 & 4;
 $9 = ($8|0)==(0);
 if ($9) {
  $$pre = $1;
  $$pre$phiZ2D = $$pre;
 } else {
  $10 = HEAP32[$2>>2]|0;
  $11 = $1;
  $12 = $10;
  $13 = (($11) - ($12))|0;
  $14 = ($13|0)>(2);
  if ($14) {
   $15 = HEAP8[$10>>0]|0;
   $16 = ($15<<24>>24)==(-17);
   if ($16) {
    $17 = ((($10)) + 1|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = ($18<<24>>24)==(-69);
    if ($19) {
     $20 = ((($10)) + 2|0);
     $21 = HEAP8[$20>>0]|0;
     $22 = ($21<<24>>24)==(-65);
     if ($22) {
      $23 = ((($10)) + 3|0);
      HEAP32[$2>>2] = $23;
      $$pre$phiZ2D = $11;
     } else {
      $$pre$phiZ2D = $11;
     }
    } else {
     $$pre$phiZ2D = $11;
    }
   } else {
    $$pre$phiZ2D = $11;
   }
  } else {
   $$pre$phiZ2D = $11;
  }
 }
 $24 = $4;
 L9: while(1) {
  $25 = HEAP32[$2>>2]|0;
  $26 = ($25>>>0)<($1>>>0);
  if (!($26)) {
   label = 41;
   break;
  }
  $27 = HEAP32[$5>>2]|0;
  $28 = ($27>>>0)<($4>>>0);
  if (!($28)) {
   label = 41;
   break;
  }
  $29 = HEAP8[$25>>0]|0;
  $30 = $29&255;
  $31 = ($30>>>0)>($6>>>0);
  if ($31) {
   $$8 = 2;
   break;
  }
  $32 = ($29<<24>>24)>(-1);
  do {
   if ($32) {
    $33 = $29&255;
    HEAP16[$27>>1] = $33;
    $34 = ((($25)) + 1|0);
    HEAP32[$2>>2] = $34;
   } else {
    $35 = ($29&255)<(194);
    if ($35) {
     $$8 = 2;
     break L9;
    }
    $36 = ($29&255)<(224);
    if ($36) {
     $37 = $25;
     $38 = (($$pre$phiZ2D) - ($37))|0;
     $39 = ($38|0)<(2);
     if ($39) {
      $$8 = 1;
      break L9;
     }
     $40 = ((($25)) + 1|0);
     $41 = HEAP8[$40>>0]|0;
     $42 = $41&255;
     $43 = $42 & 192;
     $44 = ($43|0)==(128);
     if (!($44)) {
      $$8 = 2;
      break L9;
     }
     $45 = $30 << 6;
     $46 = $45 & 1984;
     $47 = $42 & 63;
     $48 = $47 | $46;
     $49 = ($48>>>0)>($6>>>0);
     if ($49) {
      $$8 = 2;
      break L9;
     }
     $50 = $48&65535;
     HEAP16[$27>>1] = $50;
     $51 = ((($25)) + 2|0);
     HEAP32[$2>>2] = $51;
     break;
    }
    $52 = ($29&255)<(240);
    if ($52) {
     $53 = $25;
     $54 = (($$pre$phiZ2D) - ($53))|0;
     $55 = ($54|0)<(3);
     if ($55) {
      $$8 = 1;
      break L9;
     }
     $56 = ((($25)) + 1|0);
     $57 = HEAP8[$56>>0]|0;
     $58 = ((($25)) + 2|0);
     $59 = HEAP8[$58>>0]|0;
     switch ($29<<24>>24) {
     case -32:  {
      $60 = $57 & -32;
      $61 = ($60<<24>>24)==(-96);
      if (!($61)) {
       $$8 = 2;
       break L9;
      }
      break;
     }
     case -19:  {
      $62 = $57 & -32;
      $63 = ($62<<24>>24)==(-128);
      if (!($63)) {
       $$8 = 2;
       break L9;
      }
      break;
     }
     default: {
      $64 = $57 & -64;
      $65 = ($64<<24>>24)==(-128);
      if (!($65)) {
       $$8 = 2;
       break L9;
      }
     }
     }
     $66 = $59&255;
     $67 = $66 & 192;
     $68 = ($67|0)==(128);
     if (!($68)) {
      $$8 = 2;
      break L9;
     }
     $69 = $30 << 12;
     $70 = $57&255;
     $71 = $70 << 6;
     $72 = $71 & 4032;
     $73 = $72 | $69;
     $74 = $66 & 63;
     $75 = $73 | $74;
     $76 = $75 & 65535;
     $77 = ($76>>>0)>($6>>>0);
     if ($77) {
      $$8 = 2;
      break L9;
     }
     $78 = $75&65535;
     HEAP16[$27>>1] = $78;
     $79 = ((($25)) + 3|0);
     HEAP32[$2>>2] = $79;
     break;
    }
    $80 = ($29&255)<(245);
    if (!($80)) {
     $$8 = 2;
     break L9;
    }
    $81 = $25;
    $82 = (($$pre$phiZ2D) - ($81))|0;
    $83 = ($82|0)<(4);
    if ($83) {
     $$8 = 1;
     break L9;
    }
    $84 = ((($25)) + 1|0);
    $85 = HEAP8[$84>>0]|0;
    $86 = ((($25)) + 2|0);
    $87 = HEAP8[$86>>0]|0;
    $88 = ((($25)) + 3|0);
    $89 = HEAP8[$88>>0]|0;
    switch ($29<<24>>24) {
    case -16:  {
     $$off = (($85) + 112)<<24>>24;
     $90 = ($$off&255)<(48);
     if (!($90)) {
      $$8 = 2;
      break L9;
     }
     break;
    }
    case -12:  {
     $91 = $85 & -16;
     $92 = ($91<<24>>24)==(-128);
     if (!($92)) {
      $$8 = 2;
      break L9;
     }
     break;
    }
    default: {
     $93 = $85 & -64;
     $94 = ($93<<24>>24)==(-128);
     if (!($94)) {
      $$8 = 2;
      break L9;
     }
    }
    }
    $95 = $87&255;
    $96 = $95 & 192;
    $97 = ($96|0)==(128);
    if (!($97)) {
     $$8 = 2;
     break L9;
    }
    $98 = $89&255;
    $99 = $98 & 192;
    $100 = ($99|0)==(128);
    if (!($100)) {
     $$8 = 2;
     break L9;
    }
    $101 = $27;
    $102 = (($24) - ($101))|0;
    $103 = ($102|0)<(4);
    if ($103) {
     $$8 = 1;
     break L9;
    }
    $104 = $30 & 7;
    $105 = $104 << 18;
    $106 = $85&255;
    $107 = $106 << 12;
    $108 = $107 & 258048;
    $109 = $108 | $105;
    $110 = $95 << 6;
    $111 = $110 & 4032;
    $112 = $109 | $111;
    $113 = $98 & 63;
    $114 = $112 | $113;
    $115 = ($114>>>0)>($6>>>0);
    if ($115) {
     $$8 = 2;
     break L9;
    }
    $116 = $104 << 2;
    $117 = $106 >>> 4;
    $118 = $117 & 3;
    $119 = $118 | $116;
    $120 = $119 << 6;
    $121 = (($120) + 16320)|0;
    $122 = $106 << 2;
    $123 = $122 & 60;
    $124 = $95 >>> 4;
    $125 = $124 & 3;
    $126 = $123 | $125;
    $127 = $126 | $121;
    $128 = $127 | 55296;
    $129 = $128&65535;
    HEAP16[$27>>1] = $129;
    $130 = $110 & 960;
    $131 = $113 | $130;
    $132 = $131 | 56320;
    $133 = $132&65535;
    $134 = ((($27)) + 2|0);
    HEAP32[$5>>2] = $134;
    HEAP16[$134>>1] = $133;
    $135 = HEAP32[$2>>2]|0;
    $136 = ((($135)) + 4|0);
    HEAP32[$2>>2] = $136;
   }
  } while(0);
  $137 = HEAP32[$5>>2]|0;
  $138 = ((($137)) + 2|0);
  HEAP32[$5>>2] = $138;
 }
 if ((label|0) == 41) {
  $139 = $26&1;
  $$8 = $139;
 }
 return ($$8|0);
}
function __ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$4 = 0, $$pre = 0, $$pre80 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = $0;
 HEAP32[$5>>2] = $3;
 $8 = $7 & 2;
 $9 = ($8|0)==(0);
 $$pre80 = $4;
 if ($9) {
  label = 4;
 } else {
  $10 = $3;
  $11 = (($$pre80) - ($10))|0;
  $12 = ($11|0)<(3);
  if ($12) {
   $$4 = 1;
  } else {
   $13 = ((($3)) + 1|0);
   HEAP32[$5>>2] = $13;
   HEAP8[$3>>0] = -17;
   $14 = HEAP32[$5>>2]|0;
   $15 = ((($14)) + 1|0);
   HEAP32[$5>>2] = $15;
   HEAP8[$14>>0] = -69;
   $16 = HEAP32[$5>>2]|0;
   $17 = ((($16)) + 1|0);
   HEAP32[$5>>2] = $17;
   HEAP8[$16>>0] = -65;
   label = 4;
  }
 }
 L4: do {
  if ((label|0) == 4) {
   $18 = $1;
   $$pre = HEAP32[$2>>2]|0;
   $19 = $$pre;
   while(1) {
    $20 = ($19>>>0)<($1>>>0);
    if (!($20)) {
     $$4 = 0;
     break L4;
    }
    $21 = HEAP16[$19>>1]|0;
    $22 = $21&65535;
    $23 = ($22>>>0)>($6>>>0);
    if ($23) {
     $$4 = 2;
     break L4;
    }
    $24 = ($21&65535)<(128);
    do {
     if ($24) {
      $25 = HEAP32[$5>>2]|0;
      $26 = $25;
      $27 = (($$pre80) - ($26))|0;
      $28 = ($27|0)<(1);
      if ($28) {
       $$4 = 1;
       break L4;
      }
      $29 = $21&255;
      $30 = ((($25)) + 1|0);
      HEAP32[$5>>2] = $30;
      HEAP8[$25>>0] = $29;
     } else {
      $31 = ($21&65535)<(2048);
      if ($31) {
       $32 = HEAP32[$5>>2]|0;
       $33 = $32;
       $34 = (($$pre80) - ($33))|0;
       $35 = ($34|0)<(2);
       if ($35) {
        $$4 = 1;
        break L4;
       }
       $36 = $22 >>> 6;
       $37 = $36 | 192;
       $38 = $37&255;
       $39 = ((($32)) + 1|0);
       HEAP32[$5>>2] = $39;
       HEAP8[$32>>0] = $38;
       $40 = $22 & 63;
       $41 = $40 | 128;
       $42 = $41&255;
       $43 = HEAP32[$5>>2]|0;
       $44 = ((($43)) + 1|0);
       HEAP32[$5>>2] = $44;
       HEAP8[$43>>0] = $42;
       break;
      }
      $45 = ($21&65535)<(55296);
      if ($45) {
       $46 = HEAP32[$5>>2]|0;
       $47 = $46;
       $48 = (($$pre80) - ($47))|0;
       $49 = ($48|0)<(3);
       if ($49) {
        $$4 = 1;
        break L4;
       }
       $50 = $22 >>> 12;
       $51 = $50 | 224;
       $52 = $51&255;
       $53 = ((($46)) + 1|0);
       HEAP32[$5>>2] = $53;
       HEAP8[$46>>0] = $52;
       $54 = $22 >>> 6;
       $55 = $54 & 63;
       $56 = $55 | 128;
       $57 = $56&255;
       $58 = HEAP32[$5>>2]|0;
       $59 = ((($58)) + 1|0);
       HEAP32[$5>>2] = $59;
       HEAP8[$58>>0] = $57;
       $60 = $22 & 63;
       $61 = $60 | 128;
       $62 = $61&255;
       $63 = HEAP32[$5>>2]|0;
       $64 = ((($63)) + 1|0);
       HEAP32[$5>>2] = $64;
       HEAP8[$63>>0] = $62;
       break;
      }
      $65 = ($21&65535)<(56320);
      if (!($65)) {
       $116 = ($21&65535)<(57344);
       if ($116) {
        $$4 = 2;
        break L4;
       }
       $117 = HEAP32[$5>>2]|0;
       $118 = $117;
       $119 = (($$pre80) - ($118))|0;
       $120 = ($119|0)<(3);
       if ($120) {
        $$4 = 1;
        break L4;
       }
       $121 = $22 >>> 12;
       $122 = $121 | 224;
       $123 = $122&255;
       $124 = ((($117)) + 1|0);
       HEAP32[$5>>2] = $124;
       HEAP8[$117>>0] = $123;
       $125 = $22 >>> 6;
       $126 = $125 & 63;
       $127 = $126 | 128;
       $128 = $127&255;
       $129 = HEAP32[$5>>2]|0;
       $130 = ((($129)) + 1|0);
       HEAP32[$5>>2] = $130;
       HEAP8[$129>>0] = $128;
       $131 = $22 & 63;
       $132 = $131 | 128;
       $133 = $132&255;
       $134 = HEAP32[$5>>2]|0;
       $135 = ((($134)) + 1|0);
       HEAP32[$5>>2] = $135;
       HEAP8[$134>>0] = $133;
       break;
      }
      $66 = $19;
      $67 = (($18) - ($66))|0;
      $68 = ($67|0)<(4);
      if ($68) {
       $$4 = 1;
       break L4;
      }
      $69 = ((($19)) + 2|0);
      $70 = HEAP16[$69>>1]|0;
      $71 = $70&65535;
      $72 = $71 & 64512;
      $73 = ($72|0)==(56320);
      if (!($73)) {
       $$4 = 2;
       break L4;
      }
      $74 = HEAP32[$5>>2]|0;
      $75 = (($$pre80) - ($74))|0;
      $76 = ($75|0)<(4);
      if ($76) {
       $$4 = 1;
       break L4;
      }
      $77 = $22 & 960;
      $78 = $77 << 10;
      $79 = (($78) + 65536)|0;
      $80 = $22 << 10;
      $81 = $80 & 64512;
      $82 = $79 | $81;
      $83 = $71 & 1023;
      $84 = $82 | $83;
      $85 = ($84>>>0)>($6>>>0);
      if ($85) {
       $$4 = 2;
       break L4;
      }
      HEAP32[$2>>2] = $69;
      $86 = $77 >>> 6;
      $87 = (($86) + 1)|0;
      $88 = $87 >>> 2;
      $89 = $88 | 240;
      $90 = $89&255;
      $91 = HEAP32[$5>>2]|0;
      $92 = ((($91)) + 1|0);
      HEAP32[$5>>2] = $92;
      HEAP8[$91>>0] = $90;
      $93 = $87 << 4;
      $94 = $93 & 48;
      $95 = $22 >>> 2;
      $96 = $95 & 15;
      $97 = $96 | $94;
      $98 = $97 | 128;
      $99 = $98&255;
      $100 = HEAP32[$5>>2]|0;
      $101 = ((($100)) + 1|0);
      HEAP32[$5>>2] = $101;
      HEAP8[$100>>0] = $99;
      $102 = $22 << 4;
      $103 = $102 & 48;
      $104 = $71 >>> 6;
      $105 = $104 & 15;
      $106 = $103 | $105;
      $107 = $106 | 128;
      $108 = $107&255;
      $109 = HEAP32[$5>>2]|0;
      $110 = ((($109)) + 1|0);
      HEAP32[$5>>2] = $110;
      HEAP8[$109>>0] = $108;
      $111 = $71 & 63;
      $112 = $111 | 128;
      $113 = $112&255;
      $114 = HEAP32[$5>>2]|0;
      $115 = ((($114)) + 1|0);
      HEAP32[$5>>2] = $115;
      HEAP8[$114>>0] = $113;
     }
    } while(0);
    $136 = HEAP32[$2>>2]|0;
    $137 = ((($136)) + 2|0);
    HEAP32[$2>>2] = $137;
    $19 = $137;
   }
  }
 } while(0);
 return ($$4|0);
}
function __ZNSt3__26locale5__impD2Ev($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (18332);
 $1 = ((($0)) + 8|0);
 $2 = ((($0)) + 12|0);
 $$0 = 0;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = HEAP32[$1>>2]|0;
  $5 = (($3) - ($4))|0;
  $6 = $5 >> 2;
  $7 = ($$0>>>0)<($6>>>0);
  if (!($7)) {
   break;
  }
  $9 = $4;
  $10 = (($9) + ($$0<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   (__ZNSt3__214__shared_count16__release_sharedEv($11)|0);
  }
  $13 = (($$0) + 1)|0;
  $$0 = $13;
 }
 $8 = ((($0)) + 144|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($1);
 return;
}
function __ZNSt3__26locale5__impD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5__impD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($0) {
 $0 = $0|0;
 var $$pre$i$i = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if (!($2)) {
   $3 = ((($0)) + 4|0);
   $$pre$i$i = HEAP32[$3>>2]|0;
   $4 = $$pre$i$i;
   while(1) {
    $5 = ($4|0)==($1|0);
    if ($5) {
     break;
    }
    $6 = ((($4)) + -4|0);
    HEAP32[$3>>2] = $6;
    $4 = $6;
   }
   $7 = ((($0)) + 16|0);
   $8 = ($7|0)==($1|0);
   if ($8) {
    $9 = ((($0)) + 128|0);
    HEAP8[$9>>0] = 0;
    break;
   } else {
    __ZdlPv($1);
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__25ctypeIcED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (18352);
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ((($0)) + 12|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = ($5<<24>>24)==(0);
  if (!($6)) {
   __ZdaPv($2);
  }
 }
 return;
}
function __ZNSt3__25ctypeIcED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__25ctypeIcED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__25ctypeIcE10do_toupperEc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $isascii2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii2 = ($1<<24>>24)>(-1);
 if ($isascii2) {
  $2 = $1&255;
  $3 = (__ZNSt3__25ctypeIcE21__classic_upper_tableEv()|0);
  $4 = (($3) + ($2<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5&255;
  $7 = $6;
 } else {
  $7 = $1;
 }
 return ($7|0);
}
function __ZNKSt3__25ctypeIcE10do_toupperEPcPKc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $1;
 while(1) {
  $3 = ($$0|0)==($2|0);
  if ($3) {
   break;
  }
  $4 = HEAP8[$$0>>0]|0;
  $isascii7 = ($4<<24>>24)>(-1);
  if ($isascii7) {
   $5 = $4 << 24 >> 24;
   $6 = (__ZNSt3__25ctypeIcE21__classic_upper_tableEv()|0);
   $7 = (($6) + ($5<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = $8&255;
   $10 = $9;
  } else {
   $10 = $4;
  }
  HEAP8[$$0>>0] = $10;
  $11 = ((($$0)) + 1|0);
  $$0 = $11;
 }
 return ($2|0);
}
function __ZNKSt3__25ctypeIcE10do_tolowerEc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $isascii2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii2 = ($1<<24>>24)>(-1);
 if ($isascii2) {
  $2 = $1 << 24 >> 24;
  $3 = (__ZNSt3__25ctypeIcE21__classic_lower_tableEv()|0);
  $4 = (($3) + ($2<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5&255;
  $7 = $6;
 } else {
  $7 = $1;
 }
 return ($7|0);
}
function __ZNKSt3__25ctypeIcE10do_tolowerEPcPKc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $1;
 while(1) {
  $3 = ($$0|0)==($2|0);
  if ($3) {
   break;
  }
  $4 = HEAP8[$$0>>0]|0;
  $isascii7 = ($4<<24>>24)>(-1);
  if ($isascii7) {
   $5 = $4 << 24 >> 24;
   $6 = (__ZNSt3__25ctypeIcE21__classic_lower_tableEv()|0);
   $7 = (($6) + ($5<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = $8&255;
   $10 = $9;
  } else {
   $10 = $4;
  }
  HEAP8[$$0>>0] = $10;
  $11 = ((($$0)) + 1|0);
  $$0 = $11;
 }
 return ($2|0);
}
function __ZNKSt3__25ctypeIcE8do_widenEc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($1|0);
}
function __ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$07 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $3;$$07 = $1;
 while(1) {
  $4 = ($$07|0)==($2|0);
  if ($4) {
   break;
  }
  $5 = HEAP8[$$07>>0]|0;
  HEAP8[$$0>>0] = $5;
  $6 = ((($$07)) + 1|0);
  $7 = ((($$0)) + 1|0);
  $$0 = $7;$$07 = $6;
 }
 return ($2|0);
}
function __ZNKSt3__25ctypeIcE9do_narrowEcc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $isascii4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii4 = ($1<<24>>24)>(-1);
 $$ = $isascii4 ? $1 : $2;
 return ($$|0);
}
function __ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0 = 0, $$09 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $4;$$09 = $1;
 while(1) {
  $5 = ($$09|0)==($2|0);
  if ($5) {
   break;
  }
  $6 = HEAP8[$$09>>0]|0;
  $isascii10 = ($6<<24>>24)>(-1);
  $$ = $isascii10 ? $6 : $3;
  HEAP8[$$0>>0] = $$;
  $7 = ((($$09)) + 1|0);
  $8 = ((($$0)) + 1|0);
  $$0 = $8;$$09 = $7;
 }
 return ($2|0);
}
function __ZNSt3__25ctypeIcE21__classic_lower_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(827)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch_3(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  return ($3|0);
 }
 return (0)|0;
}
function __ZNSt3__25ctypeIcE21__classic_upper_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(828)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch_3(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  return ($3|0);
 }
 return (0)|0;
}
function __ZNSt3__25ctypeIcE13classic_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(829)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch_3(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  return ($3|0);
 }
 return (0)|0;
}
function __ZNSt3__28numpunctIcED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (18404);
 $1 = ((($0)) + 12|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
 return;
}
function __ZNSt3__28numpunctIcED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28numpunctIcED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28numpunctIcE16do_decimal_pointEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP8[$1>>0]|0;
 return ($2|0);
}
function __ZNKSt3__28numpunctIcE16do_thousands_sepEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 9|0);
 $2 = HEAP8[$1>>0]|0;
 return ($2|0);
}
function __ZNKSt3__28numpunctIcE11do_groupingEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 12|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0,$2);
 return;
}
function __ZNKSt3__28numpunctIcE11do_truenameEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($0,34760,4);
 return;
}
function __ZNKSt3__28numpunctIcE12do_falsenameEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($0,34754,5);
 return;
}
function __ZNSt3__28numpunctIwED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (18444);
 $1 = ((($0)) + 16|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
 return;
}
function __ZNSt3__28numpunctIwED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28numpunctIwED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28numpunctIwE16do_decimal_pointEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZNKSt3__28numpunctIwE16do_thousands_sepEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZNKSt3__28numpunctIwE11do_groupingEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 16|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0,$2);
 return;
}
function __ZNKSt3__28numpunctIwE11do_truenameEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $2 = (_wcslen(18500)|0);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($0,18500,$2);
 return;
}
function __ZNKSt3__28numpunctIwE12do_falsenameEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $2 = (_wcslen(18476)|0);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($0,18476,$2);
 return;
}
function __ZNSt3__26locale5facetD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNSt3__25ctypeIwED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__25ctypeIwE5do_isEtw($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($2>>>0)<(128);
 if ($isascii) {
  $3 = (__ZNSt3__25ctypeIcE13classic_tableEv()|0);
  $4 = (($3) + ($2<<1)|0);
  $5 = HEAP16[$4>>1]|0;
  $6 = $5 & $1;
  $7 = ($6<<16>>16)!=(0);
  $8 = $7;
 } else {
  $8 = 0;
 }
 return ($8|0);
}
function __ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$08 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $3;$$08 = $1;
 while(1) {
  $4 = ($$08|0)==($2|0);
  if ($4) {
   break;
  }
  $5 = HEAP32[$$08>>2]|0;
  $isascii = ($5>>>0)<(128);
  if ($isascii) {
   $6 = (__ZNSt3__25ctypeIcE13classic_tableEv()|0);
   $7 = (($6) + ($5<<1)|0);
   $8 = HEAP16[$7>>1]|0;
   $9 = $8&65535;
   $11 = $9;
  } else {
   $11 = 0;
  }
  $10 = $11&65535;
  HEAP16[$$0>>1] = $10;
  $12 = ((($$08)) + 4|0);
  $13 = ((($$0)) + 2|0);
  $$0 = $13;$$08 = $12;
 }
 return ($2|0);
}
function __ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0$lcssa = 0, $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $2;
 while(1) {
  $4 = ($$0|0)==($3|0);
  if ($4) {
   $$0$lcssa = $3;
   break;
  }
  $5 = HEAP32[$$0>>2]|0;
  $isascii = ($5>>>0)<(128);
  if ($isascii) {
   $6 = (__ZNSt3__25ctypeIcE13classic_tableEv()|0);
   $7 = (($6) + ($5<<1)|0);
   $8 = HEAP16[$7>>1]|0;
   $9 = $8 & $1;
   $10 = ($9<<16>>16)==(0);
   if (!($10)) {
    $$0$lcssa = $$0;
    break;
   }
  }
  $11 = ((($$0)) + 4|0);
  $$0 = $11;
 }
 return ($$0$lcssa|0);
}
function __ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0$lcssa = 0, $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $2;
 while(1) {
  $4 = ($$0|0)==($3|0);
  if ($4) {
   $$0$lcssa = $3;
   break;
  }
  $5 = HEAP32[$$0>>2]|0;
  $isascii = ($5>>>0)<(128);
  if (!($isascii)) {
   $$0$lcssa = $$0;
   break;
  }
  $6 = (__ZNSt3__25ctypeIcE13classic_tableEv()|0);
  $7 = (($6) + ($5<<1)|0);
  $8 = HEAP16[$7>>1]|0;
  $9 = $8 & $1;
  $10 = ($9<<16>>16)==(0);
  if ($10) {
   $$0$lcssa = $$0;
   break;
  }
  $11 = ((($$0)) + 4|0);
  $$0 = $11;
 }
 return ($$0$lcssa|0);
}
function __ZNKSt3__25ctypeIwE10do_toupperEw($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($1>>>0)<(128);
 if ($isascii) {
  $2 = (__ZNSt3__25ctypeIcE21__classic_upper_tableEv()|0);
  $3 = (($2) + ($1<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $4;
 } else {
  $5 = $1;
 }
 return ($5|0);
}
function __ZNKSt3__25ctypeIwE10do_toupperEPwPKw($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $1;
 while(1) {
  $3 = ($$0|0)==($2|0);
  if ($3) {
   break;
  }
  $4 = HEAP32[$$0>>2]|0;
  $isascii = ($4>>>0)<(128);
  if ($isascii) {
   $5 = (__ZNSt3__25ctypeIcE21__classic_upper_tableEv()|0);
   $6 = (($5) + ($4<<2)|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = $7;
  } else {
   $8 = $4;
  }
  HEAP32[$$0>>2] = $8;
  $9 = ((($$0)) + 4|0);
  $$0 = $9;
 }
 return ($2|0);
}
function __ZNKSt3__25ctypeIwE10do_tolowerEw($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($1>>>0)<(128);
 if ($isascii) {
  $2 = (__ZNSt3__25ctypeIcE21__classic_lower_tableEv()|0);
  $3 = (($2) + ($1<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $4;
 } else {
  $5 = $1;
 }
 return ($5|0);
}
function __ZNKSt3__25ctypeIwE10do_tolowerEPwPKw($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $1;
 while(1) {
  $3 = ($$0|0)==($2|0);
  if ($3) {
   break;
  }
  $4 = HEAP32[$$0>>2]|0;
  $isascii = ($4>>>0)<(128);
  if ($isascii) {
   $5 = (__ZNSt3__25ctypeIcE21__classic_lower_tableEv()|0);
   $6 = (($5) + ($4<<2)|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = $7;
  } else {
   $8 = $4;
  }
  HEAP32[$$0>>2] = $8;
  $9 = ((($$0)) + 4|0);
  $$0 = $9;
 }
 return ($2|0);
}
function __ZNKSt3__25ctypeIwE8do_widenEc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 << 24 >> 24;
 return ($2|0);
}
function __ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$07 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $3;$$07 = $1;
 while(1) {
  $4 = ($$07|0)==($2|0);
  if ($4) {
   break;
  }
  $5 = HEAP8[$$07>>0]|0;
  $6 = $5 << 24 >> 24;
  HEAP32[$$0>>2] = $6;
  $7 = ((($$07)) + 1|0);
  $8 = ((($$0)) + 4|0);
  $$0 = $8;$$07 = $7;
 }
 return ($2|0);
}
function __ZNKSt3__25ctypeIwE9do_narrowEwc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($1>>>0)<(128);
 $3 = $1&255;
 $$0 = $isascii ? $3 : $2;
 return ($$0|0);
}
function __ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0 = 0, $$09 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $1;
 $6 = $2;
 $7 = (($6) - ($5))|0;
 $8 = $7 >>> 2;
 $$0 = $4;$$09 = $1;
 while(1) {
  $9 = ($$09|0)==($2|0);
  if ($9) {
   break;
  }
  $10 = HEAP32[$$09>>2]|0;
  $isascii = ($10>>>0)<(128);
  $11 = $10&255;
  $$ = $isascii ? $11 : $3;
  HEAP8[$$0>>0] = $$;
  $12 = ((($$09)) + 4|0);
  $13 = ((($$0)) + 1|0);
  $$0 = $13;$$09 = $12;
 }
 $scevgep = (($1) + ($8<<2)|0);
 return ($scevgep|0);
}
function __ZNSt3__27codecvtIcc11__mbstate_tED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNSt3__27codecvtIDsc11__mbstate_tED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNSt3__27codecvtIDic11__mbstate_tED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(830,($1|0),(34807|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  ___cxa_free_exception(($1|0));
  ___resumeException($4|0);
  // unreachable;
 } else {
  HEAP32[$1>>2] = (18928);
  ___cxa_throw(($1|0),(2896|0),(620|0));
  // unreachable;
 }
}
function __ZNSt3__26locale5__impC2Ej($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$03 = 0, $$1 = 0, $$14 = 0, $$pre$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($1) + -1)|0;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $2;
 HEAP32[$0>>2] = (18332);
 $4 = ((($0)) + 8|0);
 __THREW__ = 0;
 invoke_vii(831,($4|0),28);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $84 = ___cxa_find_matching_catch_2()|0;
  $85 = tempRet0;
  $$1 = $85;$$14 = $84;
 } else {
  $7 = ((($0)) + 144|0);
  ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
  __THREW__ = 0;
  invoke_viii(646,($7|0),(32662|0),1);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if ($9) {
   $86 = ___cxa_find_matching_catch_2()|0;
   $87 = tempRet0;
   $$0 = $87;$$03 = $86;
  } else {
   $10 = HEAP32[$4>>2]|0;
   $11 = ((($0)) + 12|0);
   $$pre$i$i$i = HEAP32[$11>>2]|0;
   $12 = $$pre$i$i$i;
   while(1) {
    $13 = ($12|0)==($10|0);
    if ($13) {
     break;
    }
    $14 = ((($12)) + -4|0);
    HEAP32[$11>>2] = $14;
    $12 = $14;
   }
   HEAP32[(35868)>>2] = 0;
   HEAP32[8966] = (15996);
   __THREW__ = 0;
   invoke_vii(832,($0|0),(35864|0));
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   do {
    if ($16) {
     label = 42;
    } else {
     HEAP32[(35876)>>2] = 0;
     HEAP32[8968] = (16028);
     __THREW__ = 0;
     invoke_vii(833,($0|0),(35872|0));
     $17 = __THREW__; __THREW__ = 0;
     $18 = $17&1;
     if ($18) {
      label = 42;
     } else {
      HEAP32[(35884)>>2] = 0;
      HEAP32[8970] = (18352);
      HEAP32[(35888)>>2] = 0;
      HEAP8[(35892)>>0] = 0;
      $19 = (__ZNSt3__25ctypeIcE13classic_tableEv()|0);
      HEAP32[(35888)>>2] = $19;
      __THREW__ = 0;
      invoke_vii(834,($0|0),(35880|0));
      $20 = __THREW__; __THREW__ = 0;
      $21 = $20&1;
      if ($21) {
       label = 42;
      } else {
       HEAP32[(35900)>>2] = 0;
       HEAP32[8974] = (18548);
       __THREW__ = 0;
       invoke_vii(835,($0|0),(35896|0));
       $22 = __THREW__; __THREW__ = 0;
       $23 = $22&1;
       if ($23) {
        label = 42;
       } else {
        HEAP32[(35908)>>2] = 0;
        HEAP32[8976] = (18616);
        __THREW__ = 0;
        invoke_vii(836,($0|0),(35904|0));
        $24 = __THREW__; __THREW__ = 0;
        $25 = $24&1;
        if ($25) {
         label = 42;
        } else {
         __THREW__ = 0;
         invoke_vii(837,(35912|0),1);
         $26 = __THREW__; __THREW__ = 0;
         $27 = $26&1;
         if ($27) {
          label = 42;
         } else {
          __THREW__ = 0;
          invoke_vii(838,($0|0),(35912|0));
          $28 = __THREW__; __THREW__ = 0;
          $29 = $28&1;
          if ($29) {
           label = 42;
          } else {
           HEAP32[(35932)>>2] = 0;
           HEAP32[8982] = (18664);
           __THREW__ = 0;
           invoke_vii(839,($0|0),(35928|0));
           $30 = __THREW__; __THREW__ = 0;
           $31 = $30&1;
           if ($31) {
            label = 42;
           } else {
            HEAP32[(35940)>>2] = 0;
            HEAP32[8984] = (18712);
            __THREW__ = 0;
            invoke_vii(840,($0|0),(35936|0));
            $32 = __THREW__; __THREW__ = 0;
            $33 = $32&1;
            if ($33) {
             label = 42;
            } else {
             __ZNSt3__28numpunctIcEC2Ej(35944,1);
             __THREW__ = 0;
             invoke_vii(841,($0|0),(35944|0));
             $34 = __THREW__; __THREW__ = 0;
             $35 = $34&1;
             if ($35) {
              label = 42;
             } else {
              __ZNSt3__28numpunctIwEC2Ej(35968,1);
              __THREW__ = 0;
              invoke_vii(842,($0|0),(35968|0));
              $36 = __THREW__; __THREW__ = 0;
              $37 = $36&1;
              if ($37) {
               label = 42;
              } else {
               HEAP32[(36004)>>2] = 0;
               HEAP32[9000] = (16060);
               __THREW__ = 0;
               invoke_vii(843,($0|0),(36000|0));
               $38 = __THREW__; __THREW__ = 0;
               $39 = $38&1;
               if ($39) {
                label = 42;
               } else {
                HEAP32[(36012)>>2] = 0;
                HEAP32[9002] = (16124);
                __THREW__ = 0;
                invoke_vii(844,($0|0),(36008|0));
                $40 = __THREW__; __THREW__ = 0;
                $41 = $40&1;
                if ($41) {
                 label = 42;
                } else {
                 HEAP32[(36020)>>2] = 0;
                 HEAP32[9004] = (16188);
                 __THREW__ = 0;
                 invoke_vii(845,($0|0),(36016|0));
                 $42 = __THREW__; __THREW__ = 0;
                 $43 = $42&1;
                 if ($43) {
                  label = 42;
                 } else {
                  HEAP32[(36028)>>2] = 0;
                  HEAP32[9006] = (16240);
                  __THREW__ = 0;
                  invoke_vii(846,($0|0),(36024|0));
                  $44 = __THREW__; __THREW__ = 0;
                  $45 = $44&1;
                  if ($45) {
                   label = 42;
                  } else {
                   HEAP32[(36036)>>2] = 0;
                   HEAP32[9008] = (17788);
                   __THREW__ = 0;
                   invoke_vii(847,($0|0),(36032|0));
                   $46 = __THREW__; __THREW__ = 0;
                   $47 = $46&1;
                   if ($47) {
                    label = 42;
                    break;
                   }
                   HEAP32[(36044)>>2] = 0;
                   HEAP32[9010] = (17844);
                   __THREW__ = 0;
                   invoke_vii(848,($0|0),(36040|0));
                   $48 = __THREW__; __THREW__ = 0;
                   $49 = $48&1;
                   if ($49) {
                    label = 42;
                    break;
                   }
                   HEAP32[(36052)>>2] = 0;
                   HEAP32[9012] = (17900);
                   __THREW__ = 0;
                   invoke_vii(849,($0|0),(36048|0));
                   $50 = __THREW__; __THREW__ = 0;
                   $51 = $50&1;
                   if ($51) {
                    label = 42;
                    break;
                   }
                   HEAP32[(36060)>>2] = 0;
                   HEAP32[9014] = (17956);
                   __THREW__ = 0;
                   invoke_vii(850,($0|0),(36056|0));
                   $52 = __THREW__; __THREW__ = 0;
                   $53 = $52&1;
                   if ($53) {
                    label = 42;
                    break;
                   }
                   HEAP32[(36068)>>2] = 0;
                   HEAP32[9016] = (18012);
                   __THREW__ = 0;
                   invoke_vii(851,($0|0),(36064|0));
                   $54 = __THREW__; __THREW__ = 0;
                   $55 = $54&1;
                   if ($55) {
                    label = 42;
                    break;
                   }
                   HEAP32[(36076)>>2] = 0;
                   HEAP32[9018] = (18040);
                   __THREW__ = 0;
                   invoke_vii(852,($0|0),(36072|0));
                   $56 = __THREW__; __THREW__ = 0;
                   $57 = $56&1;
                   if ($57) {
                    label = 42;
                    break;
                   }
                   HEAP32[(36084)>>2] = 0;
                   HEAP32[9020] = (18068);
                   __THREW__ = 0;
                   invoke_vii(853,($0|0),(36080|0));
                   $58 = __THREW__; __THREW__ = 0;
                   $59 = $58&1;
                   if ($59) {
                    label = 42;
                    break;
                   }
                   HEAP32[(36092)>>2] = 0;
                   HEAP32[9022] = (18096);
                   __THREW__ = 0;
                   invoke_vii(854,($0|0),(36088|0));
                   $60 = __THREW__; __THREW__ = 0;
                   $61 = $60&1;
                   if ($61) {
                    label = 42;
                    break;
                   }
                   HEAP32[(36100)>>2] = 0;
                   HEAP32[9024] = (16292);
                   HEAP32[(36104)>>2] = (16340);
                   __THREW__ = 0;
                   invoke_vii(855,($0|0),(36096|0));
                   $62 = __THREW__; __THREW__ = 0;
                   $63 = $62&1;
                   if ($63) {
                    label = 42;
                    break;
                   }
                   HEAP32[(36116)>>2] = 0;
                   HEAP32[9028] = (16376);
                   HEAP32[(36120)>>2] = (16424);
                   __THREW__ = 0;
                   invoke_vii(856,($0|0),(36112|0));
                   $64 = __THREW__; __THREW__ = 0;
                   $65 = $64&1;
                   if ($65) {
                    label = 42;
                    break;
                   }
                   HEAP32[(36132)>>2] = 0;
                   HEAP32[9032] = (18528);
                   __THREW__ = 0;
                   $66 = (invoke_i(762)|0);
                   $67 = __THREW__; __THREW__ = 0;
                   $68 = $67&1;
                   if ($68) {
                    $69 = ___cxa_find_matching_catch_2()|0;
                    $70 = tempRet0;
                    $eh$lpad$body$index3Z2D = $70;$eh$lpad$body$indexZ2D = $69;
                    break;
                   }
                   HEAP32[(36136)>>2] = $66;
                   HEAP32[9032] = (17740);
                   __THREW__ = 0;
                   invoke_vii(857,($0|0),(36128|0));
                   $71 = __THREW__; __THREW__ = 0;
                   $72 = $71&1;
                   if ($72) {
                    label = 42;
                    break;
                   }
                   HEAP32[(36148)>>2] = 0;
                   HEAP32[9036] = (18528);
                   __THREW__ = 0;
                   $73 = (invoke_i(762)|0);
                   $74 = __THREW__; __THREW__ = 0;
                   $75 = $74&1;
                   if ($75) {
                    $76 = ___cxa_find_matching_catch_2()|0;
                    $77 = tempRet0;
                    $eh$lpad$body$index3Z2D = $77;$eh$lpad$body$indexZ2D = $76;
                    break;
                   }
                   HEAP32[(36152)>>2] = $73;
                   HEAP32[9036] = (17764);
                   __THREW__ = 0;
                   invoke_vii(858,($0|0),(36144|0));
                   $78 = __THREW__; __THREW__ = 0;
                   $79 = $78&1;
                   if ($79) {
                    label = 42;
                    break;
                   }
                   HEAP32[(36164)>>2] = 0;
                   HEAP32[9040] = (18124);
                   __THREW__ = 0;
                   invoke_vii(859,($0|0),(36160|0));
                   $80 = __THREW__; __THREW__ = 0;
                   $81 = $80&1;
                   if ($81) {
                    label = 42;
                    break;
                   }
                   HEAP32[(36172)>>2] = 0;
                   HEAP32[9042] = (18156);
                   __THREW__ = 0;
                   invoke_vii(860,($0|0),(36168|0));
                   $82 = __THREW__; __THREW__ = 0;
                   $83 = $82&1;
                   if ($83) {
                    label = 42;
                    break;
                   }
                   return;
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   } while(0);
   if ((label|0) == 42) {
    $88 = ___cxa_find_matching_catch_2()|0;
    $89 = tempRet0;
    $eh$lpad$body$index3Z2D = $89;$eh$lpad$body$indexZ2D = $88;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
   $$0 = $eh$lpad$body$index3Z2D;$$03 = $eh$lpad$body$indexZ2D;
  }
  __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($4);
  $$1 = $$0;$$14 = $$03;
 }
 ___resumeException($$14|0);
 // unreachable;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 128|0);
 HEAP8[$4>>0] = 0;
 $5 = ($1|0)==(0);
 do {
  if (!($5)) {
   __THREW__ = 0;
   invoke_vii(861,($0|0),($1|0));
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if ($7) {
    $8 = ___cxa_find_matching_catch_2()|0;
    $9 = tempRet0;
    __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($0);
    ___resumeException($8|0);
    // unreachable;
   } else {
    __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($0,$1);
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(40696)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(40704)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(40712)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(40744)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(42504)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__27codecvtIwc11__mbstate_tEC2Ej($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($1) + -1)|0;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $2;
 HEAP32[$0>>2] = (18284);
 __THREW__ = 0;
 $4 = (invoke_i(762)|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $8 = ___cxa_find_matching_catch_2()|0;
  $9 = tempRet0;
  ___resumeException($8|0);
  // unreachable;
 } else {
  $7 = ((($0)) + 8|0);
  HEAP32[$7>>2] = $4;
  return;
 }
}
function __ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(42512)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(42520)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(42528)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__28numpunctIcEC2Ej($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($1) + -1)|0;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $2;
 HEAP32[$0>>2] = (18404);
 $4 = ((($0)) + 8|0);
 HEAP8[$4>>0] = 46;
 $5 = ((($0)) + 9|0);
 HEAP8[$5>>0] = 44;
 $6 = ((($0)) + 12|0);
 ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $7 = (($6) + ($$0$i$i<<2)|0);
  HEAP32[$7>>2] = 0;
  $8 = (($$0$i$i) + 1)|0;
  $$0$i$i = $8;
 }
 return;
}
function __ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(40728)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__28numpunctIwEC2Ej($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($1) + -1)|0;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $2;
 HEAP32[$0>>2] = (18444);
 $4 = ((($0)) + 8|0);
 HEAP32[$4>>2] = 46;
 $5 = ((($0)) + 12|0);
 HEAP32[$5>>2] = 44;
 $6 = ((($0)) + 16|0);
 ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $7 = (($6) + ($$0$i$i<<2)|0);
  HEAP32[$7>>2] = 0;
  $8 = (($$0$i$i) + 1)|0;
  $$0$i$i = $8;
 }
 return;
}
function __ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(40752)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(40736)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(40760)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(40768)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(40776)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(42424)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(42432)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(42440)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(42448)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(42456)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(42464)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(42472)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(42480)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(41588)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(42400)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(42408)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(42416)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(42488)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(42496)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$pre14 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214__shared_count12__add_sharedEv($1);
 $3 = ((($0)) + 8|0);
 $4 = ((($0)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$3>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = $7 >> 2;
 $9 = ($8>>>0)>($2>>>0);
 do {
  if ($9) {
   $10 = $6;
   $$pre$phiZ2D = $3;$18 = $10;
  } else {
   $11 = (($2) + 1)|0;
   __THREW__ = 0;
   invoke_vii(862,($3|0),($11|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    $$pre = HEAP32[$3>>2]|0;
    $$pre$phiZ2D = $3;$18 = $$pre;
    break;
   }
   $14 = ___cxa_find_matching_catch_2()|0;
   $15 = tempRet0;
   $16 = ($1|0)==(0|0);
   if (!($16)) {
    (__ZNSt3__214__shared_count16__release_sharedEv($1)|0);
   }
   ___resumeException($14|0);
   // unreachable;
  }
 } while(0);
 $17 = (($18) + ($2<<2)|0);
 $19 = HEAP32[$17>>2]|0;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $22 = $18;
 } else {
  (__ZNSt3__214__shared_count16__release_sharedEv($19)|0);
  $$pre14 = HEAP32[$$pre$phiZ2D>>2]|0;
  $22 = $$pre14;
 }
 $21 = (($22) + ($2<<2)|0);
 HEAP32[$21>>2] = $1;
 return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = ($6>>>0)<($1>>>0);
 $8 = $4;
 $9 = $3;
 L1: do {
  if ($7) {
   $10 = (($1) - ($6))|0;
   __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($0,$10);
  } else {
   $11 = ($6>>>0)>($1>>>0);
   if ($11) {
    $12 = (($8) + ($1<<2)|0);
    $13 = $9;
    while(1) {
     $14 = ($13|0)==($12|0);
     if ($14) {
      break L1;
     }
     $15 = ((($13)) + -4|0);
     HEAP32[$2>>2] = $15;
     $13 = $15;
    }
   }
  }
 } while(0);
 return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$0$i9 = 0, $$pre$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = $7 >> 2;
 $9 = ($8>>>0)<($1>>>0);
 if ($9) {
  $10 = HEAP32[$0>>2]|0;
  $11 = (($6) - ($10))|0;
  $12 = $11 >> 2;
  $13 = (($12) + ($1))|0;
  $14 = ($13>>>0)>(1073741823);
  if ($14) {
   __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
   // unreachable;
  }
  $15 = ((($0)) + 16|0);
  $16 = (($4) - ($10))|0;
  $17 = $16 >> 2;
  $18 = ($17>>>0)<(536870911);
  $19 = $16 >> 1;
  $20 = ($19>>>0)<($13>>>0);
  $$sroa$speculated$i = $20 ? $13 : $19;
  $$0$i9 = $18 ? $$sroa$speculated$i : 1073741823;
  __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($2,$$0$i9,$12,$15);
  $21 = ((($2)) + 8|0);
  $$pre$i = HEAP32[$21>>2]|0;
  $$0$i = $1;$22 = $$pre$i;
  while(1) {
   HEAP32[$22>>2] = 0;
   $23 = HEAP32[$21>>2]|0;
   $24 = ((($23)) + 4|0);
   HEAP32[$21>>2] = $24;
   $25 = (($$0$i) + -1)|0;
   $26 = ($25|0)==(0);
   if ($26) {
    break;
   } else {
    $$0$i = $25;$22 = $24;
   }
  }
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($0,$2);
  __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($2);
 } else {
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($0,$1);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $$pre = HEAP32[$2>>2]|0;
 $$0 = $1;$3 = $$pre;
 while(1) {
  HEAP32[$3>>2] = 0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ((($4)) + 4|0);
  HEAP32[$2>>2] = $5;
  $6 = (($$0) + -1)|0;
  $7 = ($6|0)==(0);
  if ($7) {
   break;
  } else {
   $$0 = $6;$3 = $5;
  }
 }
 return;
}
function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$not$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 do {
  if ($6) {
   $12 = 0;
  } else {
   $7 = ((($3)) + 112|0);
   $8 = HEAP8[$7>>0]|0;
   $$not$i$i = ($8<<24>>24)==(0);
   $9 = ($1>>>0)<(29);
   $or$cond$i$i = $9 & $$not$i$i;
   if ($or$cond$i$i) {
    HEAP8[$7>>0] = 1;
    $12 = $3;
    break;
   } else {
    $10 = $1 << 2;
    $11 = (__Znwj($10)|0);
    $12 = $11;
    break;
   }
  }
 } while(0);
 HEAP32[$0>>2] = $12;
 $13 = (($12) + ($2<<2)|0);
 $14 = ((($0)) + 8|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($0)) + 4|0);
 HEAP32[$15>>2] = $13;
 $16 = (($12) + ($1<<2)|0);
 $17 = ((($0)) + 12|0);
 HEAP32[$17>>2] = $16;
 return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $6 = $2;
 $7 = (($4) - ($6))|0;
 $8 = $7 >> 2;
 $9 = HEAP32[$5>>2]|0;
 $10 = (0 - ($8))|0;
 $11 = (($9) + ($10<<2)|0);
 HEAP32[$5>>2] = $11;
 $12 = ($7|0)>(0);
 if ($12) {
  _memcpy(($11|0),($2|0),($7|0))|0;
  $$pre = HEAP32[$5>>2]|0;
  $$pre$phiZ2D = $5;$15 = $$pre;
 } else {
  $13 = $11;
  $$pre$phiZ2D = $5;$15 = $13;
 }
 $14 = HEAP32[$0>>2]|0;
 HEAP32[$0>>2] = $15;
 HEAP32[$$pre$phiZ2D>>2] = $14;
 $16 = ((($1)) + 8|0);
 $17 = HEAP32[$3>>2]|0;
 $18 = HEAP32[$16>>2]|0;
 HEAP32[$3>>2] = $18;
 HEAP32[$16>>2] = $17;
 $19 = ((($0)) + 8|0);
 $20 = ((($1)) + 12|0);
 $21 = HEAP32[$19>>2]|0;
 $22 = HEAP32[$20>>2]|0;
 HEAP32[$19>>2] = $22;
 HEAP32[$20>>2] = $21;
 $23 = HEAP32[$$pre$phiZ2D>>2]|0;
 HEAP32[$1>>2] = $23;
 return;
}
function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($0) {
 $0 = $0|0;
 var $$pre$i$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $$pre$i$i$i = HEAP32[$3>>2]|0;
 $4 = $$pre$i$i$i;
 while(1) {
  $5 = ($4|0)==($2|0);
  if ($5) {
   break;
  }
  $6 = ((($4)) + -4|0);
  HEAP32[$3>>2] = $6;
  $4 = $6;
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = ($7|0)==(0|0);
 do {
  if (!($8)) {
   $9 = ((($0)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==($7|0);
   if ($11) {
    $12 = ((($10)) + 112|0);
    HEAP8[$12>>0] = 0;
    break;
   } else {
    __ZdlPv($7);
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $$not$i$i = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(1073741823);
 if ($2) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $3 = ((($0)) + 128|0);
 $4 = HEAP8[$3>>0]|0;
 $$not$i$i = ($4<<24>>24)==(0);
 $5 = ($1>>>0)<(29);
 $or$cond$i$i = $5 & $$not$i$i;
 if ($or$cond$i$i) {
  $6 = ((($0)) + 16|0);
  HEAP8[$3>>0] = 1;
  $$0$i$i = $6;
 } else {
  $7 = $1 << 2;
  $8 = (__Znwj($7)|0);
  $$0$i$i = $8;
 }
 $9 = ((($0)) + 4|0);
 HEAP32[$9>>2] = $$0$i$i;
 HEAP32[$0>>2] = $$0$i$i;
 $10 = (($$0$i$i) + ($1<<2)|0);
 $11 = ((($0)) + 8|0);
 HEAP32[$11>>2] = $10;
 return;
}
function __ZNSt3__26locale7classicEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[36176]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire(36176)|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    (invoke_i(863)|0);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $7 = ___cxa_find_matching_catch_2()|0;
     $8 = tempRet0;
     ___resumeException($7|0);
     // unreachable;
    } else {
     HEAP32[10635] = 42536;
     break;
    }
   }
  }
 } while(0);
 $6 = HEAP32[10635]|0;
 return ($6|0);
}
function __ZNSt3__26locale5__imp12make_classicEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5__impC2Ej(36184,1);
 HEAP32[10634] = 36184;
 return (42536|0);
}
function __ZNSt3__26locale5__imp11make_globalEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__26locale7classicEv()|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[10636] = $1;
 __ZNSt3__214__shared_count12__add_sharedEv($1);
 return (42544|0);
}
function __ZNSt3__26locale8__globalEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[36344]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire(36344)|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    (invoke_i(864)|0);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $7 = ___cxa_find_matching_catch_2()|0;
     $8 = tempRet0;
     ___resumeException($7|0);
     // unreachable;
    } else {
     HEAP32[10637] = 42544;
     break;
    }
   }
  }
 } while(0);
 $6 = HEAP32[10637]|0;
 return ($6|0);
}
function __ZNSt3__26localeC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $1 = (invoke_i(865)|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $5 = ___cxa_find_matching_catch_3(0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 } else {
  $4 = HEAP32[$1>>2]|0;
  HEAP32[$0>>2] = $4;
  __ZNSt3__214__shared_count12__add_sharedEv($4);
  return;
 }
}
function __ZNSt3__26localeC2ERKS0_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 __ZNSt3__214__shared_count12__add_sharedEv($2);
 return;
}
function __ZNSt3__26localeD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 (__ZNSt3__214__shared_count16__release_sharedEv($1)|0);
 return;
}
function __ZNKSt3__26locale9has_facetERNS0_2idE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (__ZNSt3__26locale2id5__getEv($1)|0);
 $4 = (__ZNKSt3__26locale5__imp9has_facetEl($2,$3)|0);
 return ($4|0);
}
function __ZNSt3__211char_traitsIcE7compareEPKcS3_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $5 = 0;
 } else {
  $4 = (_memcmp($0,$1,$2)|0);
  $5 = $4;
 }
 return ($5|0);
}
function __ZNSt3__214__shared_countD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__214__shared_count12__add_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+1)|0);
 return;
}
function __ZNSt3__214__shared_count16__release_sharedEv($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ((($4)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  FUNCTION_TABLE_vi[$6 & 1023]($0);
  $$0 = 1;
 } else {
  $$0 = 0;
 }
 return ($$0|0);
}
function __ZNSt3__211__call_onceERVmPvPFvS2_E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_pthread_mutex_lock((42552|0))|0);
 while(1) {
  $3 = HEAP32[$0>>2]|0;
  $4 = ($3|0)==(1);
  if (!($4)) {
   break;
  }
  (_pthread_cond_wait((42580|0),(42552|0))|0);
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   HEAP32[$0>>2] = 1;
   __THREW__ = 0;
   (invoke_ii(866,(42552|0))|0);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if (!($8)) {
    __THREW__ = 0;
    invoke_vi($2|0,($1|0));
    $9 = __THREW__; __THREW__ = 0;
    $10 = $9&1;
    if (!($10)) {
     __THREW__ = 0;
     (invoke_ii(867,(42552|0))|0);
     $11 = __THREW__; __THREW__ = 0;
     $12 = $11&1;
     if (!($12)) {
      HEAP32[$0>>2] = -1;
      __THREW__ = 0;
      (invoke_ii(866,(42552|0))|0);
      $13 = __THREW__; __THREW__ = 0;
      $14 = $13&1;
      if (!($14)) {
       __THREW__ = 0;
       (invoke_ii(868,(42580|0))|0);
       $15 = __THREW__; __THREW__ = 0;
       $16 = $15&1;
       if (!($16)) {
        break;
       }
      }
     }
    }
   }
   $17 = ___cxa_find_matching_catch_3(0|0)|0;
   $18 = tempRet0;
   (___cxa_begin_catch(($17|0))|0);
   __THREW__ = 0;
   (invoke_ii(867,(42552|0))|0);
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if (!($20)) {
    HEAP32[$0>>2] = 0;
    __THREW__ = 0;
    (invoke_ii(866,(42552|0))|0);
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if (!($22)) {
     __THREW__ = 0;
     (invoke_ii(868,(42580|0))|0);
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if (!($24)) {
      __THREW__ = 0;
      invoke_v(642);
      $25 = __THREW__; __THREW__ = 0;
     }
    }
   }
   $26 = ___cxa_find_matching_catch_2()|0;
   $27 = tempRet0;
   __THREW__ = 0;
   invoke_v(643);
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if ($29) {
    $30 = ___cxa_find_matching_catch_3(0|0)|0;
    $31 = tempRet0;
    ___clang_call_terminate($30);
    // unreachable;
   } else {
    ___resumeException($26|0);
    // unreachable;
   }
  } else {
   (_pthread_mutex_unlock((42552|0))|0);
  }
 } while(0);
 return;
}
function __Znwj($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 $$ = $1 ? 1 : $0;
 while(1) {
  $2 = (_malloc($$)|0);
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   label = 6;
   break;
  }
  $4 = (__ZSt15get_new_handlerv()|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   label = 5;
   break;
  }
  FUNCTION_TABLE_v[$4 & 1023]();
 }
 if ((label|0) == 5) {
  $6 = (___cxa_allocate_exception(4)|0);
  __ZNSt9bad_allocC2Ev($6);
  ___cxa_throw(($6|0),(2848|0),(617|0));
  // unreachable;
 }
 else if ((label|0) == 6) {
  return ($2|0);
 }
 return (0)|0;
}
function __Znaj($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj($0)|0);
 return ($1|0);
}
function __ZdlPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($0);
 return;
}
function __ZdaPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZSt17__throw_bad_allocv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(4)|0);
 __ZNSt9bad_allocC2Ev($0);
 ___cxa_throw(($0|0),(2848|0),(617|0));
 // unreachable;
}
function __ZNSt3__218__libcpp_refstringC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($1)|0);
 $3 = (($2) + 13)|0;
 $4 = (__Znwj($3)|0);
 HEAP32[$4>>2] = $2;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = $2;
 $6 = ((($4)) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($4)) + 12|0);
 $8 = (($2) + 1)|0;
 _memcpy(($7|0),($1|0),($8|0))|0;
 HEAP32[$0>>2] = $7;
 return;
}
function __ZNSt11logic_errorC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (18888);
 $2 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(869,($2|0),($1|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_2()|0;
  $6 = tempRet0;
  ___resumeException($5|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNSt13runtime_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (18908);
 $2 = ((($0)) + 4|0);
 $3 = ((($1)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 $6 = HEAP32[$1>>2]|0;
 $7 = $5 ? $6 : $1;
 __THREW__ = 0;
 invoke_vii(869,($2|0),($7|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch_2()|0;
  $11 = tempRet0;
  ___resumeException($10|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNSt13runtime_errorC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (18908);
 $2 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(869,($2|0),($1|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_2()|0;
  $6 = tempRet0;
  ___resumeException($5|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(830,($1|0),(34839|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  ___cxa_free_exception(($1|0));
  ___resumeException($4|0);
  // unreachable;
 } else {
  HEAP32[$1>>2] = (18928);
  ___cxa_throw(($1|0),(2896|0),(620|0));
  // unreachable;
 }
}
function __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(830,($1|0),(34839|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  ___cxa_free_exception(($1|0));
  ___resumeException($4|0);
  // unreachable;
 } else {
  HEAP32[$1>>2] = (18948);
  ___cxa_throw(($1|0),(2912|0),(620|0));
  // unreachable;
 }
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $2 = ((($1)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = ((($1)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($0,$5,$7);
 } else {
  ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;
 }
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$016 = 0, $$017 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2>>>0)>(4294967279);
 if ($3) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $4 = ($2>>>0)<(11);
 if ($4) {
  $11 = $2&255;
  $12 = ((($0)) + 11|0);
  HEAP8[$12>>0] = $11;
  $13 = ($2|0)==(0);
  if ($13) {
   $$017 = $0;
  } else {
   $$016 = $0;
   label = 6;
  }
 } else {
  $5 = (($2) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  HEAP32[$0>>2] = $7;
  $8 = $6 | -2147483648;
  $9 = ((($0)) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = ((($0)) + 4|0);
  HEAP32[$10>>2] = $2;
  $$016 = $7;
  label = 6;
 }
 if ((label|0) == 6) {
  _memcpy(($$016|0),($1|0),($2|0))|0;
  $$017 = $$016;
 }
 $14 = (($$017) + ($2)|0);
 HEAP8[$14>>0] = 0;
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$016 = 0, $$017 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(4294967279);
 if ($3) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $4 = ($1>>>0)<(11);
 if ($4) {
  $11 = $1&255;
  $12 = ((($0)) + 11|0);
  HEAP8[$12>>0] = $11;
  $13 = ($1|0)==(0);
  if ($13) {
   $$017 = $0;
  } else {
   $$016 = $0;
   label = 6;
  }
 } else {
  $5 = (($1) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  HEAP32[$0>>2] = $7;
  $8 = $6 | -2147483648;
  $9 = ((($0)) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = ((($0)) + 4|0);
  HEAP32[$10>>2] = $1;
  $$016 = $7;
  label = 6;
 }
 if ((label|0) == 6) {
  _memset(($$016|0),($2|0),($1|0))|0;
  $$017 = $$016;
 }
 $14 = (($$017) + ($1)|0);
 HEAP8[$14>>0] = 0;
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $5 = ((($1)) + 11|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 $8 = ((($1)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $6&255;
 $11 = $7 ? $9 : $10;
 $12 = ($11>>>0)<($2>>>0);
 if ($12) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0);
  // unreachable;
 } else {
  $13 = HEAP32[$1>>2]|0;
  $14 = $7 ? $13 : $1;
  $15 = (($14) + ($2)|0);
  $16 = (($11) - ($2))|0;
  $17 = ($16>>>0)<($3>>>0);
  $$sroa$speculated = $17 ? $16 : $3;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($0,$15,$$sroa$speculated);
  return;
 }
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 11|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)<(0);
 if ($3) {
  $4 = HEAP32[$0>>2]|0;
  __ZdlPv($4);
 }
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==($1|0);
 if (!($2)) {
  $3 = ((($1)) + 11|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)<(0);
  $6 = HEAP32[$1>>2]|0;
  $7 = $5 ? $6 : $1;
  $8 = ((($1)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $4&255;
  $11 = $5 ? $9 : $10;
  (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($0,$7,$11)|0);
 }
 return ($0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 if ($5) {
  $6 = ((($0)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 & 2147483647;
  $phitmp$i = (($8) + -1)|0;
  $9 = $phitmp$i;
 } else {
  $9 = 10;
 }
 $10 = ($9>>>0)<($2>>>0);
 do {
  if ($10) {
   if ($5) {
    $19 = ((($0)) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $23 = $20;
   } else {
    $21 = $4&255;
    $23 = $21;
   }
   $22 = (($2) - ($9))|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($0,$9,$22,$23,0,$23,$2,$1);
  } else {
   if ($5) {
    $11 = HEAP32[$0>>2]|0;
    $13 = $11;
   } else {
    $13 = $0;
   }
   $12 = ($2|0)==(0);
   if (!($12)) {
    _memmove(($13|0),($1|0),($2|0))|0;
   }
   $14 = (($13) + ($2)|0);
   HEAP8[$14>>0] = 0;
   $15 = HEAP8[$3>>0]|0;
   $16 = ($15<<24>>24)<(0);
   if ($16) {
    $17 = ((($0)) + 4|0);
    HEAP32[$17>>2] = $2;
    break;
   } else {
    $18 = $2&255;
    HEAP8[$3>>0] = $18;
    break;
   }
  }
 } while(0);
 return ($0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $8 = (-18 - ($1))|0;
 $9 = ($8>>>0)<($2>>>0);
 if ($9) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $10 = ((($0)) + 11|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ($11<<24>>24)<(0);
 if ($12) {
  $13 = HEAP32[$0>>2]|0;
  $24 = $13;
 } else {
  $24 = $0;
 }
 $14 = ($1>>>0)<(2147483623);
 if ($14) {
  $15 = (($2) + ($1))|0;
  $16 = $1 << 1;
  $17 = ($15>>>0)<($16>>>0);
  $$sroa$speculated = $17 ? $16 : $15;
  $18 = ($$sroa$speculated>>>0)<(11);
  $19 = (($$sroa$speculated) + 16)|0;
  $20 = $19 & -16;
  $phitmp = $18 ? 11 : $20;
  $21 = $phitmp;
 } else {
  $21 = -17;
 }
 $22 = (__Znwj($21)|0);
 $23 = ($4|0)==(0);
 if (!($23)) {
  _memcpy(($22|0),($24|0),($4|0))|0;
 }
 $25 = ($6|0)==(0);
 if (!($25)) {
  $26 = (($22) + ($4)|0);
  _memcpy(($26|0),($7|0),($6|0))|0;
 }
 $27 = (($3) - ($5))|0;
 $28 = (($27) - ($4))|0;
 $29 = ($28|0)==(0);
 if (!($29)) {
  $30 = (($22) + ($4)|0);
  $31 = (($30) + ($6)|0);
  $32 = (($24) + ($4)|0);
  $33 = (($32) + ($5)|0);
  _memcpy(($31|0),($33|0),($28|0))|0;
 }
 $34 = ($1|0)==(10);
 if (!($34)) {
  __ZdlPv($24);
 }
 HEAP32[$0>>2] = $22;
 $35 = $21 | -2147483648;
 $36 = ((($0)) + 8|0);
 HEAP32[$36>>2] = $35;
 $37 = (($27) + ($6))|0;
 $38 = ((($0)) + 4|0);
 HEAP32[$38>>2] = $37;
 $39 = (($22) + ($37)|0);
 HEAP8[$39>>0] = 0;
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$016 = 0, $$01738 = 0, $$01739 = 0, $$01745 = 0, $$018$off036 = 0, $$018$off037 = 0, $$018$off044 = 0, $$019$off034 = 0, $$019$off043 = 0, $$140 = 0, $$141 = 0, $$146 = 0, $$phitmp$i = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, $phitmp$i21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(4294967279);
 if ($2) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $3 = ((($0)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 if ($5) {
  $6 = ((($0)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 & 2147483647;
  $phitmp$i = (($8) + -1)|0;
  $9 = ((($0)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $12 = $10;$18 = $phitmp$i;
 } else {
  $11 = $4&255;
  $12 = $11;$18 = 10;
 }
 $13 = ($12>>>0)>($1>>>0);
 $$sroa$speculated = $13 ? $12 : $1;
 $14 = ($$sroa$speculated>>>0)<(11);
 $15 = (($$sroa$speculated) + 16)|0;
 $16 = $15 & -16;
 $phitmp$i21 = (($16) + -1)|0;
 $$phitmp$i = $14 ? 10 : $phitmp$i21;
 $17 = ($$phitmp$i|0)==($18|0);
 L8: do {
  if (!($17)) {
   do {
    if ($14) {
     $28 = HEAP32[$0>>2]|0;
     if ($5) {
      $$01739 = $28;$$018$off037 = 0;$$141 = $0;
      label = 16;
     } else {
      $$01745 = $28;$$018$off044 = 0;$$019$off043 = 1;$$146 = $0;
      label = 17;
     }
    } else {
     $19 = ($$phitmp$i>>>0)>($18>>>0);
     $20 = (($$phitmp$i) + 1)|0;
     if ($19) {
      $21 = (__Znwj($20)|0);
      $$016 = $21;
     } else {
      __THREW__ = 0;
      $22 = (invoke_ii(716,($20|0))|0);
      $23 = __THREW__; __THREW__ = 0;
      $24 = $23&1;
      if ($24) {
       $25 = ___cxa_find_matching_catch_3(0|0)|0;
       $26 = tempRet0;
       (___cxa_begin_catch(($25|0))|0);
       ___cxa_end_catch();
       break L8;
      } else {
       $$016 = $22;
      }
     }
     if ($5) {
      $27 = HEAP32[$0>>2]|0;
      $$01739 = $27;$$018$off037 = 1;$$141 = $$016;
      label = 16;
      break;
     } else {
      $$01745 = $0;$$018$off044 = 1;$$019$off043 = 0;$$146 = $$016;
      label = 17;
      break;
     }
    }
   } while(0);
   if ((label|0) == 16) {
    $29 = ((($0)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    $$01738 = $$01739;$$018$off036 = $$018$off037;$$019$off034 = 1;$$140 = $$141;$33 = $30;
   }
   else if ((label|0) == 17) {
    $31 = $4&255;
    $$01738 = $$01745;$$018$off036 = $$018$off044;$$019$off034 = $$019$off043;$$140 = $$146;$33 = $31;
   }
   $32 = (($33) + 1)|0;
   $34 = ($32|0)==(0);
   if (!($34)) {
    _memcpy(($$140|0),($$01738|0),($32|0))|0;
   }
   if ($$019$off034) {
    __ZdlPv($$01738);
   }
   if ($$018$off036) {
    $35 = (($$phitmp$i) + 1)|0;
    $36 = $35 | -2147483648;
    $37 = ((($0)) + 8|0);
    HEAP32[$37>>2] = $36;
    $38 = ((($0)) + 4|0);
    HEAP32[$38>>2] = $12;
    HEAP32[$0>>2] = $$140;
    break;
   } else {
    $39 = $12&255;
    HEAP8[$3>>0] = $39;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($1)|0);
 $3 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($0,$1,$2)|0);
 return ($3|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 if ($5) {
  $6 = ((($0)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $9 = $7;
 } else {
  $8 = $4&255;
  $9 = $8;
 }
 $10 = ($9>>>0)<($1>>>0);
 do {
  if ($10) {
   $11 = (($1) - ($9))|0;
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($0,$11,$2)|0);
  } else {
   if ($5) {
    $12 = HEAP32[$0>>2]|0;
    $13 = (($12) + ($1)|0);
    HEAP8[$13>>0] = 0;
    $14 = ((($0)) + 4|0);
    HEAP32[$14>>2] = $1;
    break;
   } else {
    $15 = (($0) + ($1)|0);
    HEAP8[$15>>0] = 0;
    $16 = $1&255;
    HEAP8[$3>>0] = $16;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(0);
 if (!($3)) {
  $4 = ((($0)) + 11|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = ($5<<24>>24)<(0);
  if ($6) {
   $7 = ((($0)) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = $8 & 2147483647;
   $phitmp$i = (($9) + -1)|0;
   $10 = ((($0)) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $14 = $11;$15 = $phitmp$i;
  } else {
   $12 = $5&255;
   $14 = $12;$15 = 10;
  }
  $13 = (($15) - ($14))|0;
  $16 = ($13>>>0)<($1>>>0);
  if ($16) {
   $17 = (($1) - ($15))|0;
   $18 = (($17) + ($14))|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($0,$15,$18,$14,$14,0,0);
   $$pre = HEAP8[$4>>0]|0;
   $19 = $$pre;
  } else {
   $19 = $5;
  }
  $20 = ($19<<24>>24)<(0);
  if ($20) {
   $21 = HEAP32[$0>>2]|0;
   $23 = $21;
  } else {
   $23 = $0;
  }
  $22 = (($23) + ($14)|0);
  _memset(($22|0),($2|0),($1|0))|0;
  $24 = (($14) + ($1))|0;
  $25 = HEAP8[$4>>0]|0;
  $26 = ($25<<24>>24)<(0);
  if ($26) {
   $27 = ((($0)) + 4|0);
   HEAP32[$27>>2] = $24;
  } else {
   $28 = $24&255;
   HEAP8[$4>>0] = $28;
  }
  $29 = (($23) + ($24)|0);
  HEAP8[$29>>0] = 0;
 }
 return ($0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = (-17 - ($1))|0;
 $8 = ($7>>>0)<($2>>>0);
 if ($8) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $9 = ((($0)) + 11|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)<(0);
 if ($11) {
  $12 = HEAP32[$0>>2]|0;
  $23 = $12;
 } else {
  $23 = $0;
 }
 $13 = ($1>>>0)<(2147483623);
 if ($13) {
  $14 = (($2) + ($1))|0;
  $15 = $1 << 1;
  $16 = ($14>>>0)<($15>>>0);
  $$sroa$speculated = $16 ? $15 : $14;
  $17 = ($$sroa$speculated>>>0)<(11);
  $18 = (($$sroa$speculated) + 16)|0;
  $19 = $18 & -16;
  $phitmp = $17 ? 11 : $19;
  $20 = $phitmp;
 } else {
  $20 = -17;
 }
 $21 = (__Znwj($20)|0);
 $22 = ($4|0)==(0);
 if (!($22)) {
  _memcpy(($21|0),($23|0),($4|0))|0;
 }
 $24 = (($3) - ($5))|0;
 $25 = (($24) - ($4))|0;
 $26 = ($25|0)==(0);
 if (!($26)) {
  $27 = (($21) + ($4)|0);
  $28 = (($27) + ($6)|0);
  $29 = (($23) + ($4)|0);
  $30 = (($29) + ($5)|0);
  _memcpy(($28|0),($30|0),($25|0))|0;
 }
 $31 = ($1|0)==(10);
 if (!($31)) {
  __ZdlPv($23);
 }
 HEAP32[$0>>2] = $21;
 $32 = $20 | -2147483648;
 $33 = ((($0)) + 8|0);
 HEAP32[$33>>2] = $32;
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 if ($5) {
  $6 = ((($0)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 & 2147483647;
  $phitmp$i = (($8) + -1)|0;
  $9 = ((($0)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $13 = $10;$14 = $phitmp$i;
 } else {
  $11 = $4&255;
  $13 = $11;$14 = 10;
 }
 $12 = (($14) - ($13))|0;
 $15 = ($12>>>0)<($2>>>0);
 if ($15) {
  $26 = (($2) - ($14))|0;
  $27 = (($26) + ($13))|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($0,$14,$27,$13,$13,0,$2,$1);
 } else {
  $16 = ($2|0)==(0);
  if (!($16)) {
   if ($5) {
    $17 = HEAP32[$0>>2]|0;
    $19 = $17;
   } else {
    $19 = $0;
   }
   $18 = (($19) + ($13)|0);
   _memcpy(($18|0),($1|0),($2|0))|0;
   $20 = (($13) + ($2))|0;
   $21 = HEAP8[$3>>0]|0;
   $22 = ($21<<24>>24)<(0);
   if ($22) {
    $23 = ((($0)) + 4|0);
    HEAP32[$23>>2] = $20;
   } else {
    $24 = $20&255;
    HEAP8[$3>>0] = $24;
   }
   $25 = (($19) + ($20)|0);
   HEAP8[$25>>0] = 0;
  }
 }
 return ($0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($1)|0);
 $3 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($0,$1,$2)|0);
 return ($3|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$018 = 0, $$019 = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 if ($4) {
  $6 = ((($0)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 & 2147483647;
  $9 = (($8) + -1)|0;
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $$018 = $11;$$019 = $9;
 } else {
  $5 = $3&255;
  $$018 = $5;$$019 = 10;
 }
 $12 = ($$018|0)==($$019|0);
 if ($12) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($0,$$019,1,$$019,$$019,0,0);
  $13 = HEAP8[$2>>0]|0;
  $14 = ($13<<24>>24)>(-1);
  if ($14) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($4) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $15 = (($$018) + 1)|0;
  $16 = $15&255;
  HEAP8[$2>>0] = $16;
  $$pn = $0;
 }
 else if ((label|0) == 8) {
  $17 = HEAP32[$0>>2]|0;
  $18 = (($$018) + 1)|0;
  $19 = ((($0)) + 4|0);
  HEAP32[$19>>2] = $18;
  $$pn = $17;
 }
 $$0 = (($$pn) + ($$018)|0);
 HEAP8[$$0>>0] = $1;
 $20 = ((($$0)) + 1|0);
 HEAP8[$20>>0] = 0;
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEjjPKcj($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$069 = 0, $$070 = 0, $$074 = 0, $$096 = 0, $$297 = 0, $$3 = 0, $$373 = 0, $$377 = 0, $$398 = 0, $$4 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 11|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $8 = ((($0)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $11 = $9;
 } else {
  $10 = $6&255;
  $11 = $10;
 }
 $12 = ($11>>>0)<($1>>>0);
 if ($12) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0);
  // unreachable;
 }
 $13 = (($11) - ($1))|0;
 $14 = ($13>>>0)<($2>>>0);
 $$sroa$speculated = $14 ? $13 : $2;
 if ($7) {
  $15 = ((($0)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16 & 2147483647;
  $phitmp$i = (($17) + -1)|0;
  $20 = $phitmp$i;
 } else {
  $20 = 10;
 }
 $18 = (($$sroa$speculated) - ($11))|0;
 $19 = (($18) + ($20))|0;
 $21 = ($19>>>0)<($4>>>0);
 if ($21) {
  $55 = (($11) + ($4))|0;
  $56 = (($55) - ($$sroa$speculated))|0;
  $57 = (($56) - ($20))|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($0,$20,$57,$11,$1,$$sroa$speculated,$4,$3);
 } else {
  if ($7) {
   $22 = HEAP32[$0>>2]|0;
   $28 = $22;
  } else {
   $28 = $0;
  }
  $23 = ($$sroa$speculated|0)==($4|0);
  do {
   if ($23) {
    $$297 = $4;$$3 = $1;$$373 = $3;$$377 = $4;
    label = 25;
   } else {
    $24 = (($13) - ($$sroa$speculated))|0;
    $25 = ($24|0)==(0);
    if ($25) {
     $$297 = $$sroa$speculated;$$3 = $1;$$373 = $3;$$377 = $4;
     label = 25;
    } else {
     $26 = ($$sroa$speculated>>>0)>($4>>>0);
     $27 = (($28) + ($1)|0);
     if ($26) {
      $29 = ($4|0)==(0);
      if (!($29)) {
       _memmove(($27|0),($3|0),($4|0))|0;
      }
      $44 = (($27) + ($4)|0);
      $45 = (($27) + ($$sroa$speculated)|0);
      _memmove(($44|0),($45|0),($24|0))|0;
      $$398 = $$sroa$speculated;$$4 = $4;
      break;
     }
     $30 = ($27>>>0)<($3>>>0);
     $31 = (($28) + ($11)|0);
     $32 = ($31>>>0)>($3>>>0);
     $or$cond = $30 & $32;
     do {
      if ($or$cond) {
       $33 = (($27) + ($$sroa$speculated)|0);
       $34 = ($33>>>0)>($3>>>0);
       if (!($34)) {
        $35 = (($4) - ($$sroa$speculated))|0;
        $36 = (($3) + ($35)|0);
        $$069 = $1;$$070 = $36;$$074 = $4;$$096 = $$sroa$speculated;
        break;
       }
       $37 = ($$sroa$speculated|0)==(0);
       if (!($37)) {
        _memmove(($27|0),($3|0),($$sroa$speculated|0))|0;
       }
       $38 = (($$sroa$speculated) + ($1))|0;
       $39 = (($3) + ($4)|0);
       $40 = (($4) - ($$sroa$speculated))|0;
       $$069 = $38;$$070 = $39;$$074 = $40;$$096 = 0;
      } else {
       $$069 = $1;$$070 = $3;$$074 = $4;$$096 = $$sroa$speculated;
      }
     } while(0);
     $41 = (($28) + ($$069)|0);
     $42 = (($41) + ($$074)|0);
     $43 = (($41) + ($$096)|0);
     _memmove(($42|0),($43|0),($24|0))|0;
     $$297 = $$096;$$3 = $$069;$$373 = $$070;$$377 = $$074;
     label = 25;
    }
   }
  } while(0);
  if ((label|0) == 25) {
   $46 = ($$377|0)==(0);
   if ($46) {
    $$398 = $$297;$$4 = 0;
   } else {
    $47 = (($28) + ($$3)|0);
    _memmove(($47|0),($$373|0),($$377|0))|0;
    $$398 = $$297;$$4 = $$377;
   }
  }
  $48 = (($$4) - ($$398))|0;
  $49 = (($48) + ($11))|0;
  $50 = HEAP8[$5>>0]|0;
  $51 = ($50<<24>>24)<(0);
  if ($51) {
   $52 = ((($0)) + 4|0);
   HEAP32[$52>>2] = $49;
  } else {
   $53 = $49&255;
   HEAP8[$5>>0] = $53;
  }
  $54 = (($28) + ($49)|0);
  HEAP8[$54>>0] = 0;
 }
 return ($0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEjjPKc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_strlen($3)|0);
 $5 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEjjPKcj($0,$1,$2,$3,$4)|0);
 return ($5|0);
}
function __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$1$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $7 = HEAP32[$0>>2]|0;
  $8 = ((($0)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $11 = $9;$14 = $7;
 } else {
  $10 = $5&255;
  $11 = $10;$14 = $0;
 }
 HEAP8[$3>>0] = $1;
 $12 = ($11>>>0)>($2>>>0);
 if ($12) {
  $13 = (($14) + ($2)|0);
  $15 = (($11) - ($2))|0;
  $16 = (__ZNSt3__211char_traitsIcE4findEPKcjRS2_($13,$15,$3)|0);
  $17 = ($16|0)==(0|0);
  $18 = $16;
  $19 = $14;
  $20 = (($18) - ($19))|0;
  $$0$i = $17 ? -1 : $20;
  $$1$i = $$0$i;
 } else {
  $$1$i = -1;
 }
 STACKTOP = sp;return ($$1$i|0);
}
function __ZNSt3__211char_traitsIcE4findEPKcjRS2_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(0);
 if ($3) {
  $7 = 0;
 } else {
  $4 = HEAP8[$2>>0]|0;
  $5 = $4&255;
  $6 = (_memchr($0,$5,$1)|0);
  $7 = $6;
 }
 return ($7|0);
}
function __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$ = 0, $$sroa$speculated = 0, $$sroa$speculated19 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 11|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $8 = ((($0)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $11 = $9;
 } else {
  $10 = $6&255;
  $11 = $10;
 }
 $12 = ($11>>>0)<($1>>>0);
 $13 = ($4|0)==(-1);
 $or$cond = $13 | $12;
 if ($or$cond) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0);
  // unreachable;
 }
 $14 = (($11) - ($1))|0;
 $15 = ($14>>>0)<($2>>>0);
 $$sroa$speculated = $15 ? $14 : $2;
 if ($7) {
  $16 = HEAP32[$0>>2]|0;
  $18 = $16;
 } else {
  $18 = $0;
 }
 $17 = (($18) + ($1)|0);
 $19 = ($$sroa$speculated>>>0)>($4>>>0);
 $$sroa$speculated19 = $19 ? $4 : $$sroa$speculated;
 $20 = (__ZNSt3__211char_traitsIcE7compareEPKcS3_j($17,$3,$$sroa$speculated19)|0);
 $21 = ($20|0)==(0);
 if ($21) {
  $22 = ($$sroa$speculated>>>0)<($4>>>0);
  $$ = $19&1;
  $$$ = $22 ? -1 : $$;
  return ($$$|0);
 } else {
  return ($20|0);
 }
 return (0)|0;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcjj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($3>>>0)>(4294967279);
 if ($4) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $5 = ($3>>>0)<(11);
 if ($5) {
  $6 = $2&255;
  $7 = ((($0)) + 11|0);
  HEAP8[$7>>0] = $6;
  $$0 = $0;
 } else {
  $8 = (($3) + 16)|0;
  $9 = $8 & -16;
  $10 = (__Znwj($9)|0);
  HEAP32[$0>>2] = $10;
  $11 = $9 | -2147483648;
  $12 = ((($0)) + 8|0);
  HEAP32[$12>>2] = $11;
  $13 = ((($0)) + 4|0);
  HEAP32[$13>>2] = $2;
  $$0 = $10;
 }
 $14 = ($2|0)==(0);
 if (!($14)) {
  _memcpy(($$0|0),($1|0),($2|0))|0;
 }
 $15 = (($$0) + ($2)|0);
 HEAP8[$15>>0] = 0;
 return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2>>>0)>(1073741807);
 if ($3) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $4 = ($2>>>0)<(2);
 do {
  if ($4) {
   $5 = $2&255;
   $6 = ((($0)) + 8|0);
   $7 = ((($6)) + 3|0);
   HEAP8[$7>>0] = $5;
   $$0 = $0;
  } else {
   $8 = (($2) + 4)|0;
   $9 = $8 & -4;
   $10 = ($9>>>0)>(1073741823);
   if ($10) {
    $11 = (___cxa_allocate_exception(4)|0);
    __ZNSt9bad_allocC2Ev($11);
    ___cxa_throw(($11|0),(2848|0),(617|0));
    // unreachable;
   } else {
    $12 = $9 << 2;
    $13 = (__Znwj($12)|0);
    HEAP32[$0>>2] = $13;
    $14 = $9 | -2147483648;
    $15 = ((($0)) + 8|0);
    HEAP32[$15>>2] = $14;
    $16 = ((($0)) + 4|0);
    HEAP32[$16>>2] = $2;
    $$0 = $13;
    break;
   }
  }
 } while(0);
 (__ZNSt3__211char_traitsIwE4copyEPwPKwj($$0,$1,$2)|0);
 $17 = (($$0) + ($2<<2)|0);
 HEAP32[$17>>2] = 0;
 return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(1073741807);
 if ($3) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $4 = ($1>>>0)<(2);
 do {
  if ($4) {
   $5 = $1&255;
   $6 = ((($0)) + 8|0);
   $7 = ((($6)) + 3|0);
   HEAP8[$7>>0] = $5;
   $$0 = $0;
  } else {
   $8 = (($1) + 4)|0;
   $9 = $8 & -4;
   $10 = ($9>>>0)>(1073741823);
   if ($10) {
    $11 = (___cxa_allocate_exception(4)|0);
    __ZNSt9bad_allocC2Ev($11);
    ___cxa_throw(($11|0),(2848|0),(617|0));
    // unreachable;
   } else {
    $12 = $9 << 2;
    $13 = (__Znwj($12)|0);
    HEAP32[$0>>2] = $13;
    $14 = $9 | -2147483648;
    $15 = ((($0)) + 8|0);
    HEAP32[$15>>2] = $14;
    $16 = ((($0)) + 4|0);
    HEAP32[$16>>2] = $1;
    $$0 = $13;
    break;
   }
  }
 } while(0);
 (__ZNSt3__211char_traitsIwE6assignEPwjw($$0,$1,$2)|0);
 $17 = (($$0) + ($1<<2)|0);
 HEAP32[$17>>2] = 0;
 return;
}
function __ZNSt3__211char_traitsIwE6assignEPwjw($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(0);
 if ($3) {
  $5 = $0;
 } else {
  $4 = (_wmemset($0,$2,$1)|0);
  $5 = $4;
 }
 return ($5|0);
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = ((($1)) + 3|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  __ZdlPv($5);
 }
 return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 8|0);
 $4 = ((($3)) + 3|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $7 = HEAP32[$3>>2]|0;
  $8 = $7 & 2147483647;
  $phitmp$i = (($8) + -1)|0;
  $9 = $phitmp$i;
 } else {
  $9 = 1;
 }
 $10 = ($9>>>0)<($2>>>0);
 do {
  if ($10) {
   if ($6) {
    $18 = ((($0)) + 4|0);
    $19 = HEAP32[$18>>2]|0;
    $22 = $19;
   } else {
    $20 = $5&255;
    $22 = $20;
   }
   $21 = (($2) - ($9))|0;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($0,$9,$21,$22,0,$22,$2,$1);
  } else {
   if ($6) {
    $11 = HEAP32[$0>>2]|0;
    $12 = $11;
   } else {
    $12 = $0;
   }
   (__ZNSt3__211char_traitsIwE4moveEPwPKwj($12,$1,$2)|0);
   $13 = (($12) + ($2<<2)|0);
   HEAP32[$13>>2] = 0;
   $14 = HEAP8[$4>>0]|0;
   $15 = ($14<<24>>24)<(0);
   if ($15) {
    $16 = ((($0)) + 4|0);
    HEAP32[$16>>2] = $2;
    break;
   } else {
    $17 = $2&255;
    HEAP8[$4>>0] = $17;
    break;
   }
  }
 } while(0);
 return ($0|0);
}
function __ZNSt3__211char_traitsIwE4moveEPwPKwj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $5 = $0;
 } else {
  $4 = (_wmemmove($0,$1,$2)|0);
  $5 = $4;
 }
 return ($5|0);
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $8 = (1073741806 - ($1))|0;
 $9 = ($8>>>0)<($2>>>0);
 if ($9) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $10 = ((($0)) + 8|0);
 $11 = ((($10)) + 3|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)<(0);
 if ($13) {
  $14 = HEAP32[$0>>2]|0;
  $29 = $14;
 } else {
  $29 = $0;
 }
 $15 = ($1>>>0)<(536870887);
 if ($15) {
  $16 = (($2) + ($1))|0;
  $17 = $1 << 1;
  $18 = ($16>>>0)<($17>>>0);
  $$sroa$speculated = $18 ? $17 : $16;
  $19 = ($$sroa$speculated>>>0)<(2);
  $20 = (($$sroa$speculated) + 4)|0;
  $21 = $20 & -4;
  $22 = $19 ? 2 : $21;
  $23 = ($22>>>0)>(1073741823);
  if ($23) {
   $24 = (___cxa_allocate_exception(4)|0);
   __ZNSt9bad_allocC2Ev($24);
   ___cxa_throw(($24|0),(2848|0),(617|0));
   // unreachable;
  } else {
   $26 = $22;
  }
 } else {
  $26 = 1073741807;
 }
 $25 = $26 << 2;
 $27 = (__Znwj($25)|0);
 $28 = ($4|0)==(0);
 if (!($28)) {
  (__ZNSt3__211char_traitsIwE4copyEPwPKwj($27,$29,$4)|0);
 }
 $30 = ($6|0)==(0);
 if (!($30)) {
  $31 = (($27) + ($4<<2)|0);
  (__ZNSt3__211char_traitsIwE4copyEPwPKwj($31,$7,$6)|0);
 }
 $32 = (($3) - ($5))|0;
 $33 = (($32) - ($4))|0;
 $34 = ($33|0)==(0);
 if (!($34)) {
  $35 = (($29) + ($4<<2)|0);
  $36 = (($35) + ($5<<2)|0);
  $37 = (($27) + ($4<<2)|0);
  $38 = (($37) + ($6<<2)|0);
  (__ZNSt3__211char_traitsIwE4copyEPwPKwj($38,$36,$33)|0);
 }
 $39 = ($1|0)==(1);
 if (!($39)) {
  __ZdlPv($29);
 }
 HEAP32[$0>>2] = $27;
 $40 = $26 | -2147483648;
 HEAP32[$10>>2] = $40;
 $41 = (($32) + ($6))|0;
 $42 = ((($0)) + 4|0);
 HEAP32[$42>>2] = $41;
 $43 = (($27) + ($41<<2)|0);
 HEAP32[$43>>2] = 0;
 return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$01742 = 0, $$018$off040 = 0, $$1435056 = 0, $$144 = 0, $$phitmp$i = 0, $$sink = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, $phitmp$i22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(1073741807);
 if ($2) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $3 = ((($0)) + 8|0);
 $4 = ((($3)) + 3|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $7 = HEAP32[$3>>2]|0;
  $8 = $7 & 2147483647;
  $phitmp$i = (($8) + -1)|0;
  $9 = ((($0)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $12 = $10;$18 = $phitmp$i;
 } else {
  $11 = $5&255;
  $12 = $11;$18 = 1;
 }
 $13 = ($12>>>0)>($1>>>0);
 $$sroa$speculated = $13 ? $12 : $1;
 $14 = ($$sroa$speculated>>>0)<(2);
 $15 = (($$sroa$speculated) + 4)|0;
 $16 = $15 & -4;
 $phitmp$i22 = (($16) + -1)|0;
 $$phitmp$i = $14 ? 1 : $phitmp$i22;
 $17 = ($$phitmp$i|0)==($18|0);
 L8: do {
  if (!($17)) {
   do {
    if ($14) {
     $34 = HEAP32[$0>>2]|0;
     if ($6) {
      $$01742 = $34;$$018$off040 = 0;$$144 = $0;
      label = 21;
     } else {
      $35 = $5&255;
      $36 = (($35) + 1)|0;
      (__ZNSt3__211char_traitsIwE4copyEPwPKwj($0,$34,$36)|0);
      __ZdlPv($34);
      label = 23;
     }
    } else {
     $19 = ($$phitmp$i>>>0)>($18>>>0);
     $20 = (($$phitmp$i) + 1)|0;
     $21 = ($20>>>0)>(1073741823);
     do {
      if ($19) {
       if ($21) {
        $22 = (___cxa_allocate_exception(4)|0);
        __ZNSt9bad_allocC2Ev($22);
        ___cxa_throw(($22|0),(2848|0),(617|0));
        // unreachable;
       } else {
        $23 = $20 << 2;
        $24 = (__Znwj($23)|0);
        $$sink = $24;
        break;
       }
      } else {
       if ($21) {
        $25 = (___cxa_allocate_exception(4)|0);
        __ZNSt9bad_allocC2Ev($25);
        __THREW__ = 0;
        invoke_viii(644,($25|0),(2848|0),(617|0));
        $26 = __THREW__; __THREW__ = 0;
       } else {
        $27 = $20 << 2;
        __THREW__ = 0;
        $28 = (invoke_ii(716,($27|0))|0);
        $29 = __THREW__; __THREW__ = 0;
        $30 = $29&1;
        if (!($30)) {
         $$sink = $28;
         break;
        }
       }
       $31 = ___cxa_find_matching_catch_3(0|0)|0;
       $32 = tempRet0;
       (___cxa_begin_catch(($31|0))|0);
       ___cxa_end_catch();
       break L8;
      }
     } while(0);
     if ($6) {
      $33 = HEAP32[$0>>2]|0;
      $$01742 = $33;$$018$off040 = 1;$$144 = $$sink;
      label = 21;
      break;
     } else {
      $37 = $5&255;
      $38 = (($37) + 1)|0;
      (__ZNSt3__211char_traitsIwE4copyEPwPKwj($$sink,$0,$38)|0);
      $$1435056 = $$sink;
      label = 22;
      break;
     }
    }
   } while(0);
   if ((label|0) == 21) {
    $39 = ((($0)) + 4|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($40) + 1)|0;
    (__ZNSt3__211char_traitsIwE4copyEPwPKwj($$144,$$01742,$41)|0);
    __ZdlPv($$01742);
    if ($$018$off040) {
     $$1435056 = $$144;
     label = 22;
    } else {
     label = 23;
    }
   }
   if ((label|0) == 22) {
    $42 = (($$phitmp$i) + 1)|0;
    $43 = $42 | -2147483648;
    HEAP32[$3>>2] = $43;
    $44 = ((($0)) + 4|0);
    HEAP32[$44>>2] = $12;
    HEAP32[$0>>2] = $$1435056;
    break;
   }
   else if ((label|0) == 23) {
    $45 = $12&255;
    HEAP8[$4>>0] = $45;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_wcslen($1)|0);
 $3 = (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($0,$1,$2)|0);
 return ($3|0);
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = (1073741807 - ($1))|0;
 $8 = ($7>>>0)<($2>>>0);
 if ($8) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $9 = ((($0)) + 8|0);
 $10 = ((($9)) + 3|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ($11<<24>>24)<(0);
 if ($12) {
  $13 = HEAP32[$0>>2]|0;
  $28 = $13;
 } else {
  $28 = $0;
 }
 $14 = ($1>>>0)<(536870887);
 if ($14) {
  $15 = (($2) + ($1))|0;
  $16 = $1 << 1;
  $17 = ($15>>>0)<($16>>>0);
  $$sroa$speculated = $17 ? $16 : $15;
  $18 = ($$sroa$speculated>>>0)<(2);
  $19 = (($$sroa$speculated) + 4)|0;
  $20 = $19 & -4;
  $21 = $18 ? 2 : $20;
  $22 = ($21>>>0)>(1073741823);
  if ($22) {
   $23 = (___cxa_allocate_exception(4)|0);
   __ZNSt9bad_allocC2Ev($23);
   ___cxa_throw(($23|0),(2848|0),(617|0));
   // unreachable;
  } else {
   $25 = $21;
  }
 } else {
  $25 = 1073741807;
 }
 $24 = $25 << 2;
 $26 = (__Znwj($24)|0);
 $27 = ($4|0)==(0);
 if (!($27)) {
  (__ZNSt3__211char_traitsIwE4copyEPwPKwj($26,$28,$4)|0);
 }
 $29 = (($3) - ($5))|0;
 $30 = (($29) - ($4))|0;
 $31 = ($30|0)==(0);
 if (!($31)) {
  $32 = (($28) + ($4<<2)|0);
  $33 = (($32) + ($5<<2)|0);
  $34 = (($26) + ($4<<2)|0);
  $35 = (($34) + ($6<<2)|0);
  (__ZNSt3__211char_traitsIwE4copyEPwPKwj($35,$33,$30)|0);
 }
 $36 = ($1|0)==(1);
 if (!($36)) {
  __ZdlPv($28);
 }
 HEAP32[$0>>2] = $26;
 $37 = $25 | -2147483648;
 HEAP32[$9>>2] = $37;
 return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$018 = 0, $$019 = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = ((($2)) + 3|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 if ($5) {
  $7 = HEAP32[$2>>2]|0;
  $8 = $7 & 2147483647;
  $9 = (($8) + -1)|0;
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $$018 = $11;$$019 = $9;
 } else {
  $6 = $4&255;
  $$018 = $6;$$019 = 1;
 }
 $12 = ($$018|0)==($$019|0);
 if ($12) {
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($0,$$019,1,$$019,$$019,0,0);
  $13 = HEAP8[$3>>0]|0;
  $14 = ($13<<24>>24)>(-1);
  if ($14) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($5) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $15 = (($$018) + 1)|0;
  $16 = $15&255;
  HEAP8[$3>>0] = $16;
  $$pn = $0;
 }
 else if ((label|0) == 8) {
  $17 = HEAP32[$0>>2]|0;
  $18 = (($$018) + 1)|0;
  $19 = ((($0)) + 4|0);
  HEAP32[$19>>2] = $18;
  $$pn = $17;
 }
 $$0 = (($$pn) + ($$018<<2)|0);
 HEAP32[$$0>>2] = $1;
 $20 = ((($$0)) + 4|0);
 HEAP32[$20>>2] = 0;
 return;
}
function __ZNSt3__214error_categoryD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNKSt3__214error_category23default_error_conditionEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $2;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $1;
 return;
}
function __ZNKSt3__214error_category10equivalentEiRKNS_15error_conditionE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 FUNCTION_TABLE_viii[$6 & 1023]($3,$0,$1);
 $7 = ((($3)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($2)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8|0)==($10|0);
 if ($11) {
  $12 = HEAP32[$3>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12|0)==($13|0);
  $15 = $14;
 } else {
  $15 = 0;
 }
 STACKTOP = sp;return ($15|0);
}
function __ZNKSt3__214error_category10equivalentERKNS_10error_codeEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($0|0);
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)==($2|0);
 $8 = $5 & $7;
 return ($8|0);
}
function __ZNSt3__212system_errorD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($0);
 return;
}
function __ZNSt3__212system_errorD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__212__do_message7messageEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strerror($2)|0);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $4 = (_strlen($3)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($0,$3,$4);
 return;
}
function __ZNSt3__212system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0);
 do {
  if (!($5)) {
   $6 = ((($2)) + 11|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = ($7<<24>>24)<(0);
   if ($8) {
    $9 = ((($2)) + 4|0);
    $10 = HEAP32[$9>>2]|0;
    $12 = $10;
   } else {
    $11 = $7&255;
    $12 = $11;
   }
   $13 = ($12|0)==(0);
   if ($13) {
    $19 = $4;
   } else {
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($2,34923)|0);
    $$pre = HEAP32[$1>>2]|0;
    $19 = $$pre;
   }
   $14 = ((($1)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($16)) + 24|0);
   $18 = HEAP32[$17>>2]|0;
   FUNCTION_TABLE_viii[$18 & 1023]($3,$15,$19);
   $20 = ((($3)) + 11|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = ($21<<24>>24)<(0);
   $23 = HEAP32[$3>>2]|0;
   $24 = $22 ? $23 : $3;
   $25 = ((($3)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $21&255;
   $28 = $22 ? $26 : $27;
   __THREW__ = 0;
   (invoke_iiii(679,($2|0),($24|0),($28|0))|0);
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   if ($30) {
    $31 = ___cxa_find_matching_catch_2()|0;
    $32 = tempRet0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
    ___resumeException($31|0);
    // unreachable;
   } else {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
    break;
   }
  }
 } while(0);
 ;HEAP32[$0>>2]=HEAP32[$2>>2]|0;HEAP32[$0+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$2+8>>2]|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $33 = (($2) + ($$0$i$i<<2)|0);
  HEAP32[$33>>2] = 0;
  $34 = (($$0$i$i) + 1)|0;
  $$0$i$i = $34;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__212system_errorC2ENS_10error_codeEPKc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$03 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 12|0;
 $4 = sp;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
 $5 = (_strlen($2)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($4,$2,$5);
 __THREW__ = 0;
 invoke_viii(870,($3|0),($1|0),($4|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 do {
  if ($7) {
   $21 = ___cxa_find_matching_catch_2()|0;
   $22 = tempRet0;
   $$0 = $22;$$03 = $21;
  } else {
   __THREW__ = 0;
   invoke_vii(871,($0|0),($3|0));
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if ($9) {
    $23 = ___cxa_find_matching_catch_2()|0;
    $24 = tempRet0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
    $$0 = $24;$$03 = $23;
    break;
   } else {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
    HEAP32[$0>>2] = (18760);
    $10 = ((($0)) + 8|0);
    $11 = $1;
    $12 = $11;
    $13 = HEAP32[$12>>2]|0;
    $14 = (($11) + 4)|0;
    $15 = $14;
    $16 = HEAP32[$15>>2]|0;
    $17 = $10;
    $18 = $17;
    HEAP32[$18>>2] = $13;
    $19 = (($17) + 4)|0;
    $20 = $19;
    HEAP32[$20>>2] = $16;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
 ___resumeException($$03|0);
 // unreachable;
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = sp + 36|0;
 $1 = (___cxa_get_globals_fast()|0);
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = HEAP32[$1>>2]|0;
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   $5 = ((($3)) + 80|0);
   $6 = ((($3)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if (!($16)) {
    $37 = HEAP32[4694]|0;
    HEAP32[$vararg_buffer7>>2] = $37;
    _abort_message(35012,$vararg_buffer7);
    // unreachable;
   }
   $17 = ($9|0)==(1126902529);
   $18 = ($12|0)==(1129074247);
   $19 = $17 & $18;
   if ($19) {
    $20 = ((($3)) + 44|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $21;
   } else {
    $22 = $5;
   }
   HEAP32[$0>>2] = $22;
   $23 = HEAP32[$3>>2]|0;
   $24 = ((($23)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = HEAP32[696]|0;
   $27 = ((($26)) + 16|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (FUNCTION_TABLE_iiii[$28 & 1023](2784,$23,$0)|0);
   if ($29) {
    $30 = HEAP32[$0>>2]|0;
    $31 = HEAP32[4694]|0;
    $32 = HEAP32[$30>>2]|0;
    $33 = ((($32)) + 8|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (FUNCTION_TABLE_ii[$34 & 1023]($30)|0);
    HEAP32[$vararg_buffer>>2] = $31;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $25;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $35;
    _abort_message(34926,$vararg_buffer);
    // unreachable;
   } else {
    $36 = HEAP32[4694]|0;
    HEAP32[$vararg_buffer3>>2] = $36;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $25;
    _abort_message(34971,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(35050,$vararg_buffer10);
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (_pthread_once((42628|0),(872|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[10658]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(35201,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function _abort_message($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[2925]|0;
 (_vfprintf($2,$0,$1)|0);
 (_fputc(10,$2)|0);
 _abort();
 // unreachable;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $4 = ($0|0)==($1|0);
 if ($4) {
  $$2 = 1;
 } else {
  $5 = ($1|0)==(0|0);
  if ($5) {
   $$2 = 0;
  } else {
   $6 = (___dynamic_cast($1,2808,2792,0)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $$2 = 0;
   } else {
    $8 = ((($3)) + 4|0);
    dest=$8; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$3>>2] = $6;
    $9 = ((($3)) + 8|0);
    HEAP32[$9>>2] = $0;
    $10 = ((($3)) + 12|0);
    HEAP32[$10>>2] = -1;
    $11 = ((($3)) + 48|0);
    HEAP32[$11>>2] = 1;
    $12 = HEAP32[$6>>2]|0;
    $13 = ((($12)) + 28|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = HEAP32[$2>>2]|0;
    FUNCTION_TABLE_viiii[$14 & 1023]($6,$3,$15,1);
    $16 = ((($3)) + 24|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==(1);
    if ($18) {
     $19 = ((($3)) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     HEAP32[$2>>2] = $20;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$2 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$2|0);
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($0|0)==($7|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($0|0)==($6|0);
 do {
  if ($7) {
   $8 = ((($1)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==($2|0);
   if ($10) {
    $11 = ((($1)) + 28|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(1);
    if (!($13)) {
     HEAP32[$11>>2] = $3;
    }
   }
  } else {
   $14 = HEAP32[$1>>2]|0;
   $15 = ($0|0)==($14|0);
   if ($15) {
    $16 = ((($1)) + 16|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==($2|0);
    if (!($18)) {
     $19 = ((($1)) + 20|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==($2|0);
     if (!($21)) {
      $24 = ((($1)) + 32|0);
      HEAP32[$24>>2] = $3;
      HEAP32[$19>>2] = $2;
      $25 = ((($1)) + 40|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = (($26) + 1)|0;
      HEAP32[$25>>2] = $27;
      $28 = ((($1)) + 36|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = ($29|0)==(1);
      if ($30) {
       $31 = ((($1)) + 24|0);
       $32 = HEAP32[$31>>2]|0;
       $33 = ($32|0)==(2);
       if ($33) {
        $34 = ((($1)) + 54|0);
        HEAP8[$34>>0] = 1;
       }
      }
      $35 = ((($1)) + 44|0);
      HEAP32[$35>>2] = 4;
      break;
     }
    }
    $22 = ($3|0)==(1);
    if ($22) {
     $23 = ((($1)) + 32|0);
     HEAP32[$23>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($0|0)==($5|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   HEAP32[$4>>2] = $2;
   $7 = ((($1)) + 24|0);
   HEAP32[$7>>2] = $3;
   $8 = ((($1)) + 36|0);
   HEAP32[$8>>2] = 1;
  } else {
   $9 = ($5|0)==($2|0);
   if (!($9)) {
    $13 = ((($1)) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 1)|0;
    HEAP32[$13>>2] = $15;
    $16 = ((($1)) + 24|0);
    HEAP32[$16>>2] = 2;
    $17 = ((($1)) + 54|0);
    HEAP8[$17>>0] = 1;
    break;
   }
   $10 = ((($1)) + 24|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(2);
   if ($12) {
    HEAP32[$10>>2] = $3;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 53|0);
 HEAP8[$5>>0] = 1;
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==($3|0);
 do {
  if ($8) {
   $9 = ((($1)) + 52|0);
   HEAP8[$9>>0] = 1;
   $10 = ((($1)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    HEAP32[$10>>2] = $2;
    $13 = ((($1)) + 24|0);
    HEAP32[$13>>2] = $4;
    $14 = ((($1)) + 36|0);
    HEAP32[$14>>2] = 1;
    $15 = ((($1)) + 48|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==(1);
    $18 = ($4|0)==(1);
    $or$cond = $17 & $18;
    if (!($or$cond)) {
     break;
    }
    $19 = ((($1)) + 54|0);
    HEAP8[$19>>0] = 1;
    break;
   }
   $20 = ($11|0)==($2|0);
   if (!($20)) {
    $30 = ((($1)) + 36|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($31) + 1)|0;
    HEAP32[$30>>2] = $32;
    $33 = ((($1)) + 54|0);
    HEAP8[$33>>0] = 1;
    break;
   }
   $21 = ((($1)) + 24|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(2);
   if ($23) {
    HEAP32[$21>>2] = $4;
    $27 = $4;
   } else {
    $27 = $22;
   }
   $24 = ((($1)) + 48|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(1);
   $28 = ($27|0)==(1);
   $or$cond22 = $26 & $28;
   if ($or$cond22) {
    $29 = ((($1)) + 54|0);
    HEAP8[$29>>0] = 1;
   }
  }
 } while(0);
 return;
}
function ___dynamic_cast($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$33 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond28 = 0, $or$cond30 = 0, $or$cond32 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + -8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($0) + ($7)|0);
 $9 = ((($5)) + -4|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$4>>2] = $2;
 $11 = ((($4)) + 4|0);
 HEAP32[$11>>2] = $0;
 $12 = ((($4)) + 8|0);
 HEAP32[$12>>2] = $1;
 $13 = ((($4)) + 12|0);
 HEAP32[$13>>2] = $3;
 $14 = ((($4)) + 16|0);
 $15 = ((($4)) + 20|0);
 $16 = ((($4)) + 24|0);
 $17 = ((($4)) + 28|0);
 $18 = ((($4)) + 32|0);
 $19 = ((($4)) + 40|0);
 $20 = ($10|0)==($2|0);
 dest=$14; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$14+36>>1]=0|0;HEAP8[$14+38>>0]=0|0;
 L1: do {
  if ($20) {
   $21 = ((($4)) + 48|0);
   HEAP32[$21>>2] = 1;
   $22 = HEAP32[$2>>2]|0;
   $23 = ((($22)) + 20|0);
   $24 = HEAP32[$23>>2]|0;
   FUNCTION_TABLE_viiiiii[$24 & 1023]($2,$4,$8,$8,1,0);
   $25 = HEAP32[$16>>2]|0;
   $26 = ($25|0)==(1);
   $$ = $26 ? $8 : 0;
   $$0 = $$;
  } else {
   $27 = ((($4)) + 36|0);
   $28 = HEAP32[$10>>2]|0;
   $29 = ((($28)) + 24|0);
   $30 = HEAP32[$29>>2]|0;
   FUNCTION_TABLE_viiiii[$30 & 1023]($10,$4,$8,1,0);
   $31 = HEAP32[$27>>2]|0;
   switch ($31|0) {
   case 0:  {
    $32 = HEAP32[$19>>2]|0;
    $33 = ($32|0)==(1);
    $34 = HEAP32[$17>>2]|0;
    $35 = ($34|0)==(1);
    $or$cond = $33 & $35;
    $36 = HEAP32[$18>>2]|0;
    $37 = ($36|0)==(1);
    $or$cond28 = $or$cond & $37;
    $38 = HEAP32[$15>>2]|0;
    $$33 = $or$cond28 ? $38 : 0;
    $$0 = $$33;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $$0 = 0;
    break L1;
   }
   }
   $39 = HEAP32[$16>>2]|0;
   $40 = ($39|0)==(1);
   if (!($40)) {
    $41 = HEAP32[$19>>2]|0;
    $42 = ($41|0)==(0);
    $43 = HEAP32[$17>>2]|0;
    $44 = ($43|0)==(1);
    $or$cond30 = $42 & $44;
    $45 = HEAP32[$18>>2]|0;
    $46 = ($45|0)==(1);
    $or$cond32 = $or$cond30 & $46;
    if (!($or$cond32)) {
     $$0 = 0;
     break;
    }
   }
   $47 = HEAP32[$14>>2]|0;
   $$0 = $47;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($0|0)==($7|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 } else {
  $9 = ((($0)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_viiiiii[$13 & 1023]($10,$1,$2,$3,$4,$5);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$037$off039 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($0|0)==($6|0);
 do {
  if ($7) {
   $8 = ((($1)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==($2|0);
   if ($10) {
    $11 = ((($1)) + 28|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(1);
    if (!($13)) {
     HEAP32[$11>>2] = $3;
    }
   }
  } else {
   $14 = HEAP32[$1>>2]|0;
   $15 = ($0|0)==($14|0);
   if (!($15)) {
    $49 = ((($0)) + 8|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = HEAP32[$50>>2]|0;
    $52 = ((($51)) + 24|0);
    $53 = HEAP32[$52>>2]|0;
    FUNCTION_TABLE_viiiii[$53 & 1023]($50,$1,$2,$3,$4);
    break;
   }
   $16 = ((($1)) + 16|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==($2|0);
   if (!($18)) {
    $19 = ((($1)) + 20|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($2|0);
    if (!($21)) {
     $24 = ((($1)) + 32|0);
     HEAP32[$24>>2] = $3;
     $25 = ((($1)) + 44|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==(4);
     if ($27) {
      break;
     }
     $28 = ((($1)) + 52|0);
     HEAP8[$28>>0] = 0;
     $29 = ((($1)) + 53|0);
     HEAP8[$29>>0] = 0;
     $30 = ((($0)) + 8|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = HEAP32[$31>>2]|0;
     $33 = ((($32)) + 20|0);
     $34 = HEAP32[$33>>2]|0;
     FUNCTION_TABLE_viiiiii[$34 & 1023]($31,$1,$2,$2,1,$4);
     $35 = HEAP8[$29>>0]|0;
     $36 = ($35<<24>>24)==(0);
     if ($36) {
      $$037$off039 = 0;
      label = 13;
     } else {
      $37 = HEAP8[$28>>0]|0;
      $not$ = ($37<<24>>24)==(0);
      if ($not$) {
       $$037$off039 = 1;
       label = 13;
      } else {
       label = 17;
      }
     }
     do {
      if ((label|0) == 13) {
       HEAP32[$19>>2] = $2;
       $38 = ((($1)) + 40|0);
       $39 = HEAP32[$38>>2]|0;
       $40 = (($39) + 1)|0;
       HEAP32[$38>>2] = $40;
       $41 = ((($1)) + 36|0);
       $42 = HEAP32[$41>>2]|0;
       $43 = ($42|0)==(1);
       if ($43) {
        $44 = ((($1)) + 24|0);
        $45 = HEAP32[$44>>2]|0;
        $46 = ($45|0)==(2);
        if ($46) {
         $47 = ((($1)) + 54|0);
         HEAP8[$47>>0] = 1;
         if ($$037$off039) {
          label = 17;
          break;
         } else {
          $48 = 4;
          break;
         }
        }
       }
       if ($$037$off039) {
        label = 17;
       } else {
        $48 = 4;
       }
      }
     } while(0);
     if ((label|0) == 17) {
      $48 = 3;
     }
     HEAP32[$25>>2] = $48;
     break;
    }
   }
   $22 = ($3|0)==(1);
   if ($22) {
    $23 = ((($1)) + 32|0);
    HEAP32[$23>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($0|0)==($5|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
 } else {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_viiii[$11 & 1023]($8,$1,$2,$3);
 }
 return;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((42632|0),(873|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(35250,$vararg_buffer);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 _free($0);
 $1 = HEAP32[10658]|0;
 $2 = (_pthread_setspecific(($1|0),(0|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 } else {
  _abort_message(35300,$vararg_buffer);
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(874)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $20 = ___cxa_find_matching_catch_3(0|0)|0;
  $21 = tempRet0;
  ___clang_call_terminate($20);
  // unreachable;
 }
 $3 = ($0|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = ((($4)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if ($16) {
    $17 = ((($4)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    __ZSt11__terminatePFvvE($18);
    // unreachable;
   }
  }
 }
 $19 = (__ZSt13get_terminatev()|0);
 __ZSt11__terminatePFvvE($19);
 // unreachable;
}
function __ZSt11__terminatePFvvE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 __THREW__ = 0;
 invoke_v($0|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  __THREW__ = 0;
  invoke_vii(875,(35353|0),($vararg_buffer|0));
  $3 = __THREW__; __THREW__ = 0;
 }
 $4 = ___cxa_find_matching_catch_3(0|0)|0;
 $5 = tempRet0;
 (___cxa_begin_catch(($4|0))|0);
 __THREW__ = 0;
 invoke_vii(875,(35393|0),($vararg_buffer1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = ___cxa_find_matching_catch_3(0|0)|0;
 $8 = tempRet0;
 __THREW__ = 0;
 invoke_v(643);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $11 = ___cxa_find_matching_catch_3(0|0)|0;
  $12 = tempRet0;
  ___clang_call_terminate($11);
  // unreachable;
 } else {
  ___clang_call_terminate($7);
  // unreachable;
 }
}
function __ZSt13get_terminatev() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[4693]|0;HEAP32[4693] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function __ZNSt9bad_allocD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt9bad_alloc4whatEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35443|0);
}
function __ZNSt9exceptionD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt11logic_errorD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (18888);
 $1 = ((($0)) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($1);
 return;
}
function __ZNSt11logic_errorD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt11logic_error4whatEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = (($3) + -1)|0;
 $5 = ($4|0)<(0);
 if ($5) {
  $6 = HEAP32[$0>>2]|0;
  $7 = ((($6)) + -12|0);
  __ZdlPv($7);
 }
 return;
}
function __ZNSt13runtime_errorD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (18908);
 $1 = ((($0)) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($1);
 return;
}
function __ZNSt13runtime_errorD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt13runtime_error4whatEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZNSt12length_errorD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt12out_of_rangeD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt8bad_castD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt8bad_castD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt8bad_cast4whatEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35539|0);
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($0|0)==($7|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 } else {
  $9 = ((($1)) + 52|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = $10&255;
  $12 = ((($1)) + 53|0);
  $13 = ($10&65535) >>> 8;
  $14 = $13&255;
  $15 = ((($0)) + 16|0);
  $16 = ((($0)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (((($0)) + 16|0) + ($17<<3)|0);
  HEAP8[$9>>0] = 0;
  HEAP8[$12>>0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($15,$1,$2,$3,$4,$5);
  $19 = ($17|0)>(1);
  L4: do {
   if ($19) {
    $20 = ((($0)) + 24|0);
    $21 = ((($1)) + 24|0);
    $22 = ((($0)) + 8|0);
    $23 = ((($1)) + 54|0);
    $$0 = $20;
    while(1) {
     $24 = HEAP8[$23>>0]|0;
     $25 = ($24<<24>>24)==(0);
     if (!($25)) {
      break L4;
     }
     $26 = HEAP16[$9>>1]|0;
     $27 = $26&255;
     $28 = ($27<<24>>24)==(0);
     if ($28) {
      $34 = ($26&65535)<(256);
      if (!($34)) {
       $35 = HEAP32[$22>>2]|0;
       $36 = $35 & 1;
       $37 = ($36|0)==(0);
       if ($37) {
        break L4;
       }
      }
     } else {
      $29 = HEAP32[$21>>2]|0;
      $30 = ($29|0)==(1);
      if ($30) {
       break L4;
      }
      $31 = HEAP32[$22>>2]|0;
      $32 = $31 & 2;
      $33 = ($32|0)==(0);
      if ($33) {
       break L4;
      }
     }
     HEAP8[$9>>0] = 0;
     HEAP8[$12>>0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0,$1,$2,$3,$4,$5);
     $38 = ((($$0)) + 8|0);
     $39 = ($38>>>0)<($18>>>0);
     if ($39) {
      $$0 = $38;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP8[$9>>0] = $11;
  HEAP8[$12>>0] = $14;
 }
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($0|0)==($6|0);
 L1: do {
  if ($7) {
   $8 = ((($1)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==($2|0);
   if ($10) {
    $11 = ((($1)) + 28|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(1);
    if (!($13)) {
     HEAP32[$11>>2] = $3;
    }
   }
  } else {
   $14 = HEAP32[$1>>2]|0;
   $15 = ($0|0)==($14|0);
   if (!($15)) {
    $62 = ((($0)) + 16|0);
    $63 = ((($0)) + 12|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = (((($0)) + 16|0) + ($64<<3)|0);
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($62,$1,$2,$3,$4);
    $66 = ((($0)) + 24|0);
    $67 = ($64|0)>(1);
    if (!($67)) {
     break;
    }
    $68 = ((($0)) + 8|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = $69 & 2;
    $71 = ($70|0)==(0);
    if ($71) {
     $72 = ((($1)) + 36|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($73|0)==(1);
     if (!($74)) {
      $80 = $69 & 1;
      $81 = ($80|0)==(0);
      if ($81) {
       $84 = ((($1)) + 54|0);
       $$2 = $66;
       while(1) {
        $93 = HEAP8[$84>>0]|0;
        $94 = ($93<<24>>24)==(0);
        if (!($94)) {
         break L1;
        }
        $95 = HEAP32[$72>>2]|0;
        $96 = ($95|0)==(1);
        if ($96) {
         break L1;
        }
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2,$1,$2,$3,$4);
        $97 = ((($$2)) + 8|0);
        $98 = ($97>>>0)<($65>>>0);
        if ($98) {
         $$2 = $97;
        } else {
         break L1;
        }
       }
      }
      $82 = ((($1)) + 24|0);
      $83 = ((($1)) + 54|0);
      $$1 = $66;
      while(1) {
       $85 = HEAP8[$83>>0]|0;
       $86 = ($85<<24>>24)==(0);
       if (!($86)) {
        break L1;
       }
       $87 = HEAP32[$72>>2]|0;
       $88 = ($87|0)==(1);
       if ($88) {
        $89 = HEAP32[$82>>2]|0;
        $90 = ($89|0)==(1);
        if ($90) {
         break L1;
        }
       }
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1,$1,$2,$3,$4);
       $91 = ((($$1)) + 8|0);
       $92 = ($91>>>0)<($65>>>0);
       if ($92) {
        $$1 = $91;
       } else {
        break L1;
       }
      }
     }
    }
    $75 = ((($1)) + 54|0);
    $$0 = $66;
    while(1) {
     $76 = HEAP8[$75>>0]|0;
     $77 = ($76<<24>>24)==(0);
     if (!($77)) {
      break L1;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0,$1,$2,$3,$4);
     $78 = ((($$0)) + 8|0);
     $79 = ($78>>>0)<($65>>>0);
     if ($79) {
      $$0 = $78;
     } else {
      break L1;
     }
    }
   }
   $16 = ((($1)) + 16|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==($2|0);
   if (!($18)) {
    $19 = ((($1)) + 20|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($2|0);
    if (!($21)) {
     $24 = ((($1)) + 32|0);
     HEAP32[$24>>2] = $3;
     $25 = ((($1)) + 44|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==(4);
     if ($27) {
      break;
     }
     $28 = ((($0)) + 16|0);
     $29 = ((($0)) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (((($0)) + 16|0) + ($30<<3)|0);
     $32 = ((($1)) + 52|0);
     $33 = ((($1)) + 53|0);
     $34 = ((($1)) + 54|0);
     $35 = ((($0)) + 8|0);
     $36 = ((($1)) + 24|0);
     $$081$off0 = 0;$$084 = $28;$$085$off0 = 0;
     L34: while(1) {
      $37 = ($$084>>>0)<($31>>>0);
      if (!($37)) {
       $$283$off0 = $$081$off0;
       label = 20;
       break;
      }
      HEAP8[$32>>0] = 0;
      HEAP8[$33>>0] = 0;
      __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084,$1,$2,$2,1,$4);
      $38 = HEAP8[$34>>0]|0;
      $39 = ($38<<24>>24)==(0);
      if (!($39)) {
       $$283$off0 = $$081$off0;
       label = 20;
       break;
      }
      $40 = HEAP8[$33>>0]|0;
      $41 = ($40<<24>>24)==(0);
      do {
       if ($41) {
        $$182$off0 = $$081$off0;$$186$off0 = $$085$off0;
       } else {
        $42 = HEAP8[$32>>0]|0;
        $43 = ($42<<24>>24)==(0);
        if ($43) {
         $49 = HEAP32[$35>>2]|0;
         $50 = $49 & 1;
         $51 = ($50|0)==(0);
         if ($51) {
          $$283$off0 = 1;
          label = 20;
          break L34;
         } else {
          $$182$off0 = 1;$$186$off0 = $$085$off0;
          break;
         }
        }
        $44 = HEAP32[$36>>2]|0;
        $45 = ($44|0)==(1);
        if ($45) {
         label = 25;
         break L34;
        }
        $46 = HEAP32[$35>>2]|0;
        $47 = $46 & 2;
        $48 = ($47|0)==(0);
        if ($48) {
         label = 25;
         break L34;
        } else {
         $$182$off0 = 1;$$186$off0 = 1;
        }
       }
      } while(0);
      $52 = ((($$084)) + 8|0);
      $$081$off0 = $$182$off0;$$084 = $52;$$085$off0 = $$186$off0;
     }
     do {
      if ((label|0) == 20) {
       if (!($$085$off0)) {
        HEAP32[$19>>2] = $2;
        $53 = ((($1)) + 40|0);
        $54 = HEAP32[$53>>2]|0;
        $55 = (($54) + 1)|0;
        HEAP32[$53>>2] = $55;
        $56 = ((($1)) + 36|0);
        $57 = HEAP32[$56>>2]|0;
        $58 = ($57|0)==(1);
        if ($58) {
         $59 = HEAP32[$36>>2]|0;
         $60 = ($59|0)==(2);
         if ($60) {
          HEAP8[$34>>0] = 1;
          if ($$283$off0) {
           label = 25;
           break;
          } else {
           $61 = 4;
           break;
          }
         }
        }
       }
       if ($$283$off0) {
        label = 25;
       } else {
        $61 = 4;
       }
      }
     } while(0);
     if ((label|0) == 25) {
      $61 = 3;
     }
     HEAP32[$25>>2] = $61;
     break;
    }
   }
   $22 = ($3|0)==(1);
   if ($22) {
    $23 = ((($1)) + 32|0);
    HEAP32[$23>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($0|0)==($5|0);
 L1: do {
  if ($6) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
  } else {
   $7 = ((($0)) + 16|0);
   $8 = ((($0)) + 12|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (((($0)) + 16|0) + ($9<<3)|0);
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($7,$1,$2,$3);
   $11 = ($9|0)>(1);
   if ($11) {
    $12 = ((($0)) + 24|0);
    $13 = ((($1)) + 54|0);
    $$0 = $12;
    while(1) {
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0,$1,$2,$3);
     $14 = HEAP8[$13>>0]|0;
     $15 = ($14<<24>>24)==(0);
     if (!($15)) {
      break L1;
     }
     $16 = ((($$0)) + 8|0);
     $17 = ($16>>>0)<($10>>>0);
     if ($17) {
      $$0 = $16;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >> 8;
 $7 = $5 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = $6;
 } else {
  $9 = HEAP32[$2>>2]|0;
  $10 = (($9) + ($6)|0);
  $11 = HEAP32[$10>>2]|0;
  $$0 = $11;
 }
 $12 = HEAP32[$0>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($2) + ($$0)|0);
 $17 = $5 & 2;
 $18 = ($17|0)!=(0);
 $19 = $18 ? $3 : 2;
 FUNCTION_TABLE_viiii[$15 & 1023]($12,$1,$16,$19);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 >> 8;
 $9 = $7 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  $$0 = $8;
 } else {
  $11 = HEAP32[$3>>2]|0;
  $12 = (($11) + ($8)|0);
  $13 = HEAP32[$12>>2]|0;
  $$0 = $13;
 }
 $14 = HEAP32[$0>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($3) + ($$0)|0);
 $19 = $7 & 2;
 $20 = ($19|0)!=(0);
 $21 = $20 ? $4 : 2;
 FUNCTION_TABLE_viiiiii[$17 & 1023]($14,$1,$2,$18,$21,$5);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 >> 8;
 $8 = $6 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = $7;
 } else {
  $10 = HEAP32[$2>>2]|0;
  $11 = (($10) + ($7)|0);
  $12 = HEAP32[$11>>2]|0;
  $$0 = $12;
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($2) + ($$0)|0);
 $18 = $6 & 2;
 $19 = ($18|0)!=(0);
 $20 = $19 ? $3 : 2;
 FUNCTION_TABLE_viiiii[$16 & 1023]($13,$1,$17,$20,$4);
 return;
}
function __ZNSt8bad_castC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (18968);
 return;
}
function ___cxa_guard_acquire($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(1);
 if ($2) {
  $$0 = 0;
 } else {
  HEAP8[$0>>0] = 1;
  $$0 = 1;
 }
 return ($$0|0);
}
function ___cxa_guard_release($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___cxa_guard_abort($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (18868);
 return;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[10659]|0;HEAP32[10659] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function ___cxa_can_catch($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $4;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iiii[$7 & 1023]($0,$1,$3)|0);
 $9 = $8&1;
 if ($8) {
  $10 = HEAP32[$3>>2]|0;
  HEAP32[$2>>2] = $10;
 }
 STACKTOP = sp;return ($9|0);
}
function ___cxa_is_pointer_type($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $4 = 0;
 } else {
  $2 = (___dynamic_cast($0,2808,2960,0)|0);
  $phitmp = ($2|0)!=(0|0);
  $4 = $phitmp;
 }
 $3 = $4&1;
 return ($3|0);
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _pthread_mutex_lock(x) {
    x = x | 0;
    return 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _pthread_cond_broadcast(x) {
    x = x | 0;
    return 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = tempRet0;
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _pthread_mutex_unlock(x) {
    x = x | 0;
    return 0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16)|0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        ___setErrNo(12);
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        return -1;
      }
    }
    return oldDynamicTop|0;
}
function _pthread_self() {
    return 0;
}

  
function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return FUNCTION_TABLE_iiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}


function dynCall_iiiiiid(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
  return FUNCTION_TABLE_iiiiiid[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,+a6)|0;
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&1023](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&1023](a1|0,a2|0);
}


function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&1023](a1|0)|0;
}


function dynCall_viidi(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=a4|0;
  FUNCTION_TABLE_viidi[index&1023](a1|0,a2|0,+a3,a4|0);
}


function dynCall_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
  return FUNCTION_TABLE_iiiiiiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
}


function dynCall_viidddiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=+a4; a5=+a5; a6=a6|0; a7=a7|0; a8=a8|0;
  FUNCTION_TABLE_viidddiii[index&1023](a1|0,a2|0,+a3,+a4,+a5,a6|0,a7|0,a8|0);
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&1023](a1|0,a2|0,a3|0)|0;
}


function dynCall_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
  FUNCTION_TABLE_viiiiiiiiiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_di(index,a1) {
  index = index|0;
  a1=a1|0;
  return +FUNCTION_TABLE_di[index&1023](a1|0);
}


function dynCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  return FUNCTION_TABLE_iiiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
}


function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  FUNCTION_TABLE_viiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}


function dynCall_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
  FUNCTION_TABLE_viiiiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&1023](a1|0,a2|0)|0;
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_diii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return +FUNCTION_TABLE_diii[index&1023](a1|0,a2|0,a3|0);
}


function dynCall_dii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return +FUNCTION_TABLE_dii[index&1023](a1|0,a2|0);
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&1023]()|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&1023](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&1023](a1|0,a2|0,a3|0);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&1023]();
}


function dynCall_viid(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3;
  FUNCTION_TABLE_viid[index&1023](a1|0,a2|0,+a3);
}


function dynCall_iiiiid(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=+a5;
  return FUNCTION_TABLE_iiiiid[index&511](a1|0,a2|0,a3|0,a4|0,+a5)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&1023](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_iiiiiiii(0);return 0;
}
function b1(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = +p5; nullFunc_iiiiiid(1);return 0;
}
function b2(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(2);
}
function b3(p0) {
 p0 = p0|0; nullFunc_vi(3);
}
function b4(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(4);
}
function b5(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iiiiiii(5);return 0;
}
function b6(p0) {
 p0 = p0|0; nullFunc_ii(6);return 0;
}
function _pthread_mutex_unlock__wrapper(p0) {
 p0 = p0|0; return _pthread_mutex_unlock(p0|0)|0;
}
function _pthread_mutex_lock__wrapper(p0) {
 p0 = p0|0; return _pthread_mutex_lock(p0|0)|0;
}
function _pthread_cond_broadcast__wrapper(p0) {
 p0 = p0|0; return _pthread_cond_broadcast(p0|0)|0;
}
function b7(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = p3|0; nullFunc_viidi(7);
}
function b8(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0; nullFunc_iiiiiiiiiiii(8);return 0;
}
function b9(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = +p3;p4 = +p4;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_viidddiii(9);
}
function b10(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(10);return 0;
}
function b11(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0;p11 = p11|0;p12 = p12|0;p13 = p13|0;p14 = p14|0; nullFunc_viiiiiiiiiiiiiii(11);
}
function b12(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(12);
}
function b13(p0) {
 p0 = p0|0; nullFunc_di(13);return +0;
}
function b14(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_iiiiiiiii(14);return 0;
}
function b15(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(15);
}
function b16(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0; nullFunc_viiiiiiiiii(16);
}
function b17(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(17);return 0;
}
function b18(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(18);return 0;
}
function b19(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_diii(19);return +0;
}
function b20(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_dii(20);return +0;
}
function b21() {
 ; nullFunc_i(21);return 0;
}
function b22(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(22);return 0;
}
function b23(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(23);
}
function ___cxa_throw__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; ___cxa_throw(p0|0,p1|0,p2|0);
}
function b24() {
 ; nullFunc_v(24);
}
function ___cxa_pure_virtual__wrapper() {
 ; ___cxa_pure_virtual();
}
function ___cxa_rethrow__wrapper() {
 ; ___cxa_rethrow();
}
function ___cxa_end_catch__wrapper() {
 ; ___cxa_end_catch();
}
function b25(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = +p2; nullFunc_viid(25);
}
function b26(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = +p4; nullFunc_iiiiid(26);return 0;
}
function b27(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(27);
}
function ___assert_fail__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; ___assert_fail(p0|0,p1|0,p2|0,p3|0);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiiiiiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,__ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,b0,b0,__ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b0,b0,__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_iiiiiid = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,b1,b1,b1,__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_viiiii = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b2,b2,b2,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_vi = [b3,__ZN10SourceCode7ProcessEv,b3,__ZN22AsmException_FileErrorD2Ev,__ZN37AsmException_FileError_ReadSourceFileD0Ev,__ZNK22AsmException_FileError5PrintEv,b3,__ZN24AsmException_SyntaxErrorD2Ev,__ZN41AsmException_SyntaxError_MismatchedBracesD0Ev,__ZNK24AsmException_SyntaxError5PrintEv,b3,__ZN39AsmException_SyntaxError_ForWithoutNextD0Ev,b3,__ZN35AsmException_SyntaxError_NoEndMacroD0Ev,b3,__ZN39AsmException_SyntaxError_IfWithoutEndifD0Ev,b3,__ZN36AsmException_SyntaxError_TooManyFORsD0Ev,b3,__ZN39AsmException_SyntaxError_NextWithoutForD0Ev,b3,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__219basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__219basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZTv0_n12_NSt3__219basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZTv0_n12_NSt3__219basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev
,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN35AsmException_SyntaxError_TooManyIFsD0Ev,b3,__ZN38AsmException_SyntaxError_ElseWithoutIfD0Ev,b3,__ZN38AsmException_SyntaxError_ElifWithoutIfD0Ev,b3,__ZN39AsmException_SyntaxError_EndifWithoutIfD0Ev,b3,__ZN39AsmException_SyntaxError_NoNestedMacrosD0Ev,b3,__ZN43AsmException_SyntaxError_EndMacroUnexpectedD0Ev,b3,__ZN10LineParser9EvalPowerEv,__ZN10LineParser12EvalMultiplyEv,__ZN10LineParser10EvalDivideEv,__ZN10LineParser7EvalModEv
,__ZN10LineParser7EvalDivEv,__ZN10LineParser13EvalShiftLeftEv,__ZN10LineParser14EvalShiftRightEv,__ZN10LineParser7EvalAddEv,__ZN10LineParser12EvalSubtractEv,__ZN10LineParser9EvalEqualEv,__ZN10LineParser12EvalNotEqualEv,__ZN10LineParser19EvalLessThanOrEqualEv,__ZN10LineParser19EvalMoreThanOrEqualEv,__ZN10LineParser12EvalLessThanEv,__ZN10LineParser12EvalMoreThanEv,__ZN10LineParser7EvalAndEv,__ZN10LineParser6EvalOrEv,__ZN10LineParser7EvalEorEv,__ZN37AsmException_SyntaxError_MissingValueD0Ev,b3,__ZN39AsmException_SyntaxError_DivisionByZeroD0Ev,b3,__ZN37AsmException_SyntaxError_NumberTooBigD0Ev,b3,__ZN41AsmException_SyntaxError_IllegalOperationD0Ev,b3,__ZN10LineParser10EvalNegateEv,__ZN10LineParser10EvalPosateEv,__ZN10LineParser6EvalHiEv,__ZN10LineParser6EvalLoEv,__ZN10LineParser7EvalSinEv,__ZN10LineParser7EvalCosEv,__ZN10LineParser7EvalTanEv,__ZN10LineParser10EvalArcSinEv
,__ZN10LineParser10EvalArcCosEv,__ZN10LineParser10EvalArcTanEv,__ZN10LineParser8EvalSqrtEv,__ZN10LineParser12EvalDegToRadEv,__ZN10LineParser12EvalRadToDegEv,__ZN10LineParser7EvalIntEv,__ZN10LineParser7EvalAbsEv,__ZN10LineParser7EvalSgnEv,__ZN10LineParser7EvalRndEv,__ZN10LineParser7EvalNotEv,__ZN10LineParser7EvalLogEv,__ZN10LineParser6EvalLnEv,__ZN10LineParser7EvalExpEv,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__219basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__219basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZTv0_n12_NSt3__219basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZTv0_n12_NSt3__219basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZN31AsmException_SyntaxError_BadHexD0Ev,b3,__ZN31AsmException_SyntaxError_BadBinD0Ev,b3,__ZN41AsmException_SyntaxError_SymbolNotDefinedD0Ev,b3,__ZN41AsmException_SyntaxError_InvalidCharacterD0Ev,b3,__ZN40AsmException_SyntaxError_EmptyExpressionD0Ev
,b3,__ZN46AsmException_SyntaxError_MismatchedParenthesesD0Ev,b3,__ZN45AsmException_SyntaxError_ExpressionTooComplexD0Ev,b3,__ZN22AsmException_FileErrorD0Ev,b3,__ZN24AsmException_SyntaxErrorD0Ev,b3,__ZN34AsmException_SyntaxError_NoImpliedD0Ev,b3,__ZN36AsmException_SyntaxError_NoImmediateD0Ev,b3,__ZN36AsmException_SyntaxError_ImmTooLargeD0Ev,b3,__ZN36AsmException_SyntaxError_ImmNegativeD0Ev,b3,__ZN40AsmException_SyntaxError_UnexpectedCommaD0Ev,b3,__ZN32AsmException_SyntaxError_6502BugD0Ev,b3,__ZN41AsmException_SyntaxError_BranchOutOfRangeD0Ev,b3,__ZN35AsmException_SyntaxError_NoAbsoluteD0Ev,b3,__ZN35AsmException_SyntaxError_NoIndexedXD0Ev,b3,__ZN35AsmException_SyntaxError_NoIndexedYD0Ev,b3,__ZN35AsmException_SyntaxError_BadIndexedD0Ev
,b3,__ZN36AsmException_SyntaxError_BadAbsoluteD0Ev,b3,__ZN36AsmException_SyntaxError_BadIndirectD0Ev,b3,__ZN35AsmException_SyntaxError_BadAddressD0Ev,b3,__ZN36AsmException_SyntaxError_NotZeroPageD0Ev,b3,__ZN35AsmException_SyntaxError_NoIndirectD0Ev,b3,__ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__214basic_ofstreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__214basic_ofstreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__214basic_ifstreamIcNS_11char_traitsIcEEED0Ev,__ZN35AsmException_FileError_OpenDiscDestD0Ev,b3,__ZN37AsmException_FileError_OpenDiscSourceD0Ev,b3,__ZN37AsmException_FileError_ReadDiscSourceD0Ev,b3,__ZN36AsmException_FileError_WriteDiscDestD0Ev,b3,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED0Ev,b3
,b3,b3,b3,b3,b3,b3,b3,__ZN30AsmException_FileError_BadNameD0Ev,b3,__ZN35AsmException_FileError_TooManyFilesD0Ev,b3,__ZN33AsmException_FileError_FileExistsD0Ev,b3,__ZN31AsmException_FileError_DiscFullD0Ev,b3,__ZN10SourceFile7ProcessEv,b3,b3,b3,b3,__ZN10SourceFileD2Ev,__ZN10SourceFileD0Ev,__ZN37AsmException_FileError_OpenSourceFileD0Ev,b3,__ZN44AsmException_SyntaxError_LabelAlreadyDefinedD0Ev,b3,__ZN42AsmException_SyntaxError_UnrecognisedTokenD0Ev,b3,b3,b3
,b3,b3,__ZN13MacroInstanceD2Ev,__ZN13MacroInstanceD0Ev,__ZN34AsmException_AssembleError_OverlapD0Ev,b3,__ZN35AsmException_AssembleError_GuardHitD0Ev,b3,__ZN38AsmException_AssembleError_OutOfMemoryD0Ev,b3,__ZN43AsmException_AssembleError_InconsistentCodeD0Ev,b3,__ZN35AsmException_AssembleError_FileOpenD0Ev,b3,__ZN35AsmException_AssembleError_FileReadD0Ev,b3,__ZN10LineParser17HandleDefineLabelEv,__ZN10LineParser19HandleDefineCommentEv,__ZN10LineParser24HandleStatementSeparatorEv,__ZN10LineParser11HandlePrintEv,__ZN10LineParser9HandleCpuEv,__ZN10LineParser9HandleOrgEv,__ZN10LineParser13HandleIncludeEv,__ZN10LineParser10HandleEqubEv,__ZN10LineParser10HandleEqudEv,__ZN10LineParser10HandleEquwEv,__ZN10LineParser10HandleSaveEv,__ZN10LineParser9HandleForEv,__ZN10LineParser10HandleNextEv,__ZN10LineParser8HandleIfEv
,b3,b3,__ZN10LineParser15HandleDirectiveEv,b3,b3,__ZN10LineParser11HandleAlignEv,__ZN10LineParser12HandleSkipToEv,__ZN10LineParser10HandleSkipEv,__ZN10LineParser11HandleGuardEv,__ZN10LineParser11HandleClearEv,__ZN10LineParser12HandleIncBinEv,__ZN10LineParser15HandleOpenBraceEv,__ZN10LineParser16HandleCloseBraceEv,__ZN10LineParser13HandleMapCharEv,__ZN10LineParser13HandlePutFileEv,__ZN10LineParser14HandlePutBasicEv,__ZN10LineParser11HandleMacroEv,b3,__ZN10LineParser14HandleEndMacroEv,b3,__ZN10LineParser11HandleErrorEv,__ZN10LineParser15HandleCopyBlockEv,__ZN35AsmException_SyntaxError_OutOfRangeD0Ev,b3,__ZN22AsmException_UserErrorD2Ev,__ZN22AsmException_UserErrorD0Ev,b3,__ZN37AsmException_SyntaxError_MissingQuoteD0Ev,b3,__ZN43AsmException_SyntaxError_DuplicateMacroNameD0Ev
,b3,__ZN41AsmException_SyntaxError_InvalidMacroNameD0Ev,b3,__ZN42AsmException_SyntaxError_InvalidSymbolNameD0Ev,b3,__ZN37AsmException_SyntaxError_MissingCommaD0Ev,b3,__ZN38AsmException_SyntaxError_BackwardsSkipD0Ev,b3,__ZN37AsmException_SyntaxError_BadAlignmentD0Ev,b3,__ZN32AsmException_SyntaxError_BadStepD0Ev,b3,__ZN40AsmException_SyntaxError_OnlyOneAnonSaveD0Ev,b3,__ZN35AsmException_SyntaxError_NoAnonSaveD0Ev,b3,__ZN30AsmException_FileError_OpenObjD0Ev,b3,__ZN31AsmException_FileError_WriteObjD0Ev,b3,__ZN36AsmException_SyntaxError_CantIncludeD0Ev,b3,__ZN42AsmException_SyntaxError_SecondPassProblemD0Ev,b3,b3,b3,b3,b3,b3
,b3,__ZNSt3__28ios_baseD2Ev,__ZNSt3__28ios_baseD0Ev,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev,b3,b3,b3,b3,b3,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev
,__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__28ios_base7failureD2Ev,__ZNSt3__28ios_base7failureD0Ev,b3,__ZNSt3__214error_categoryD2Ev,__ZNSt3__219__iostream_categoryD0Ev,b3,b3,b3,b3,b3,__ZNSt3__211__stdoutbufIwED0Ev,b3,b3,b3,b3,__ZNSt3__211__stdoutbufIcED0Ev,b3,b3,b3,b3,__ZNSt3__210__stdinbufIwED0Ev,b3,b3,b3,b3,__ZNSt3__210__stdinbufIcED0Ev,b3,b3
,b3,b3,__ZNSt3__27collateIcED2Ev,__ZNSt3__27collateIcED0Ev,__ZNSt3__26locale5facet16__on_zero_sharedEv,b3,b3,b3,__ZNSt3__27collateIwED2Ev,__ZNSt3__27collateIwED0Ev,b3,b3,b3,__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev
,__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,__ZNSt3__210moneypunctIcLb0EED2Ev,__ZNSt3__210moneypunctIcLb0EED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__210moneypunctIcLb1EED2Ev,__ZNSt3__210moneypunctIcLb1EED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__210moneypunctIwLb0EED2Ev
,__ZNSt3__210moneypunctIwLb0EED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__210moneypunctIwLb1EED2Ev,__ZNSt3__210moneypunctIwLb1EED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev
,__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,__ZNSt3__28messagesIcED2Ev,__ZNSt3__28messagesIcED0Ev,b3,b3,b3,__ZNSt3__28messagesIwED2Ev,__ZNSt3__28messagesIwED0Ev,b3,b3,b3,__ZNSt3__26locale5facetD2Ev,__ZNSt3__216__narrow_to_utf8ILj32EED0Ev,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__217__widen_from_utf8ILj32EED0Ev,__ZNSt3__27codecvtIwc11__mbstate_tED2Ev,__ZNSt3__27codecvtIwc11__mbstate_tED0Ev,b3
,b3,b3,b3,b3,b3,b3,__ZNSt3__26locale5__impD2Ev,__ZNSt3__26locale5__impD0Ev,__ZNSt3__25ctypeIcED2Ev,__ZNSt3__25ctypeIcED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__28numpunctIcED2Ev,__ZNSt3__28numpunctIcED0Ev,b3,b3,b3,b3,b3,__ZNSt3__28numpunctIwED2Ev,__ZNSt3__28numpunctIwED0Ev,b3,b3,b3
,b3,b3,__ZNSt3__26locale5facetD0Ev,__ZNSt3__25ctypeIwED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__27codecvtIcc11__mbstate_tED0Ev,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__27codecvtIDsc11__mbstate_tED0Ev,b3,b3,b3,b3,b3
,b3,b3,__ZNSt3__27codecvtIDic11__mbstate_tED0Ev,__ZNSt3__212system_errorD2Ev,__ZNSt3__212system_errorD0Ev,b3,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b3,b3,b3,b3,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b3,b3,b3,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b3,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,b3,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,__ZNSt12length_errorD0Ev,__ZNSt12out_of_rangeD0Ev,__ZNSt8bad_castD2Ev,__ZNSt8bad_castD0Ev
,b3,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b3,b3,b3,b3,b3,b3,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev,__ZN10LineParser7ProcessEv,__ZN10LineParserD2Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev,b3,b3,__ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev,b3,b3,b3,b3,b3
,b3,__ZNSt3__26localeD2Ev,b3,b3,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev,__ZNSt3__28ios_base33__set_badbit_and_consider_rethrowEv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEEC2Ev,b3,b3,b3,b3,b3,__ZN10SourceCodeD2Ev,b3,b3,b3,b3,b3,b3,b3,b3,__ZN10MacroTableD2Ev,__ZN5MacroD2Ev,b3,b3,__ZN10ObjectCode14InitialisePassEv
,_srand,b3,__ZN9DiscImageD2Ev,b3,__ZN38AsmException_AssembleError_OutOfMemoryC2Ev,__ZN35AsmException_AssembleError_GuardHitC2Ev,__ZN34AsmException_AssembleError_OverlapC2Ev,__ZN43AsmException_AssembleError_InconsistentCodeC2Ev,b3,__ZN11SymbolTableC2Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,_cleanup,_cleanup_396,b3,b3,b3,b3,__ZNSt3__28ios_base4InitD2Ev,b3,b3,b3,b3,b3,b3,__ZNSt3__26locale2id6__initEv,__ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,___cxx_global_array_dtor,___cxx_global_array_dtor_69,___cxx_global_array_dtor_117,___cxx_global_array_dtor_54,b3,___cxx_global_array_dtor_93,___cxx_global_array_dtor_120,b3,b3,__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev,_freelocale,b3,b3,__ZNSt3__212__do_nothingEPv,b3,__ZNSt3__221__throw_runtime_errorEPKc,b3,b3,b3,b3,b3
,_free,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_vii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN10SourceFile14SetFilePointerEi,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,__ZN13MacroInstance14SetFilePointerEi,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE,b4,b4,b4,b4,__ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE,b4,b4,b4,b4,__ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE,b4,b4,b4,b4,__ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__210moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv,b4,__ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv,b4,b4,b4,b4,__ZNKSt3__210moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv,b4,__ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv,b4
,b4,b4,b4,__ZNKSt3__210moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv,b4,__ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv,b4,b4,b4,b4,__ZNKSt3__210moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv,b4,__ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__28messagesIcE8do_closeEi,b4,b4,b4,b4,__ZNKSt3__28messagesIwE8do_closeEi,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__28numpunctIcE11do_groupingEv,__ZNKSt3__28numpunctIcE11do_truenameEv,__ZNKSt3__28numpunctIcE12do_falsenameEv,b4,b4,b4,b4,__ZNKSt3__28numpunctIwE11do_groupingEv
,__ZNKSt3__28numpunctIwE11do_truenameEv,__ZNKSt3__28numpunctIwE12do_falsenameEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,__ZN11StringUtils18ExpandTabsToSpacesERNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__28ios_base4initEPv,b4,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev,b4,__ZNKSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv,b4,b4,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_,b4
,b4,b4,b4,__ZNSt3__28ios_base5clearEj,b4,b4,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc,b4,b4,b4,b4,b4,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev,b4,b4,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE5tellgEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,__ZN10ObjectCode9Assemble1Ej,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN10SourceCode12CopyForStackEPKS_,b4,b4,b4,b4,b4
,b4,__ZN10SourceFileC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN10ObjectCode7PutByteEj,b4,b4,b4,b4,b4,b4,__ZN10ObjectCode6IncBinEPKc,b4,b4,b4,__ZN10LineParser13GetSymbolNameEv
,b4,__ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIKS6_EEvRT_,__ZN10SourceCode21SetCurrentIfConditionEb,b4,b4,b4,b4,__ZNSt3__28ios_base16__call_callbacksENS0_5eventE,b4,__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt13runtime_errorC2EPKc,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj
,b4,b4,__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw,b4,b4,b4,__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt11logic_errorC2EPKc,__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej,__ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_,__ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_,__ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_,__ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_,__ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_,__ZNSt3__27codecvtIwc11__mbstate_tEC2Ej,__ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_
,__ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_,__ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_,__ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_,__ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_,__ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_,__ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_,__ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_,__ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_,__ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_,__ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_,__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj,__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj,b4,b4,b4,b4,b4,b4
,__ZNSt3__218__libcpp_refstringC2EPKc,b4,__ZNSt13runtime_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b4,b4,b4,_abort_message,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_iiiiiii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b5,b5,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl
,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b5,b5,b5,b5,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,b5,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,b5,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,b5,b5,b5,b5
,b5,b5,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b5,b5,b5,__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_ii = [b6,b6,b6,b6,b6,b6,__ZNK37AsmException_FileError_ReadSourceFile7MessageEv,b6,b6,b6,__ZNK41AsmException_SyntaxError_MismatchedBraces7MessageEv,b6,__ZNK39AsmException_SyntaxError_ForWithoutNext7MessageEv,b6,__ZNK35AsmException_SyntaxError_NoEndMacro7MessageEv,b6,__ZNK39AsmException_SyntaxError_IfWithoutEndif7MessageEv,b6,__ZNK36AsmException_SyntaxError_TooManyFORs7MessageEv,b6,__ZNK39AsmException_SyntaxError_NextWithoutFor7MessageEv,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,b6,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv,b6,b6,b6,b6,__ZNK35AsmException_SyntaxError_TooManyIFs7MessageEv,b6,__ZNK38AsmException_SyntaxError_ElseWithoutIf7MessageEv,b6,__ZNK38AsmException_SyntaxError_ElifWithoutIf7MessageEv,b6,__ZNK39AsmException_SyntaxError_EndifWithoutIf7MessageEv,b6,__ZNK39AsmException_SyntaxError_NoNestedMacros7MessageEv,b6,__ZNK43AsmException_SyntaxError_EndMacroUnexpected7MessageEv,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNK37AsmException_SyntaxError_MissingValue7MessageEv,b6,__ZNK39AsmException_SyntaxError_DivisionByZero7MessageEv,b6,__ZNK37AsmException_SyntaxError_NumberTooBig7MessageEv,b6,__ZNK41AsmException_SyntaxError_IllegalOperation7MessageEv,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNK31AsmException_SyntaxError_BadHex7MessageEv,b6,__ZNK31AsmException_SyntaxError_BadBin7MessageEv,b6,__ZNK41AsmException_SyntaxError_SymbolNotDefined7MessageEv,b6,__ZNK41AsmException_SyntaxError_InvalidCharacter7MessageEv,b6
,__ZNK40AsmException_SyntaxError_EmptyExpression7MessageEv,b6,__ZNK46AsmException_SyntaxError_MismatchedParentheses7MessageEv,b6,__ZNK45AsmException_SyntaxError_ExpressionTooComplex7MessageEv,b6,__ZNK22AsmException_FileError7MessageEv,b6,__ZNK24AsmException_SyntaxError7MessageEv,b6,__ZNK34AsmException_SyntaxError_NoImplied7MessageEv,b6,__ZNK36AsmException_SyntaxError_NoImmediate7MessageEv,b6,__ZNK36AsmException_SyntaxError_ImmTooLarge7MessageEv,b6,__ZNK36AsmException_SyntaxError_ImmNegative7MessageEv,b6,__ZNK40AsmException_SyntaxError_UnexpectedComma7MessageEv,b6,__ZNK32AsmException_SyntaxError_6502Bug7MessageEv,b6,__ZNK41AsmException_SyntaxError_BranchOutOfRange7MessageEv,b6,__ZNK35AsmException_SyntaxError_NoAbsolute7MessageEv,b6,__ZNK35AsmException_SyntaxError_NoIndexedX7MessageEv,b6,__ZNK35AsmException_SyntaxError_NoIndexedY7MessageEv,b6
,__ZNK35AsmException_SyntaxError_BadIndexed7MessageEv,b6,__ZNK36AsmException_SyntaxError_BadAbsolute7MessageEv,b6,__ZNK36AsmException_SyntaxError_BadIndirect7MessageEv,b6,__ZNK35AsmException_SyntaxError_BadAddress7MessageEv,b6,__ZNK36AsmException_SyntaxError_NotZeroPage7MessageEv,b6,__ZNK35AsmException_SyntaxError_NoIndirect7MessageEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNK35AsmException_FileError_OpenDiscDest7MessageEv,b6,__ZNK37AsmException_FileError_OpenDiscSource7MessageEv,b6,__ZNK37AsmException_FileError_ReadDiscSource7MessageEv,b6,__ZNK36AsmException_FileError_WriteDiscDest7MessageEv,b6,b6,b6
,b6,b6,b6,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9underflowEv,b6,b6,b6,__ZNK30AsmException_FileError_BadName7MessageEv,b6,__ZNK35AsmException_FileError_TooManyFiles7MessageEv,b6,__ZNK33AsmException_FileError_FileExists7MessageEv,b6,__ZNK31AsmException_FileError_DiscFull7MessageEv,b6,b6,__ZN10SourceFile14GetFilePointerEv,b6,__ZN10SourceFile7IsAtEndEv,b6,b6,b6,__ZNK37AsmException_FileError_OpenSourceFile7MessageEv,b6,__ZNK44AsmException_SyntaxError_LabelAlreadyDefined7MessageEv,b6,__ZNK42AsmException_SyntaxError_UnrecognisedToken7MessageEv,b6,__ZN13MacroInstance14GetFilePointerEv
,b6,__ZN13MacroInstance7IsAtEndEv,b6,b6,b6,__ZNK34AsmException_AssembleError_Overlap7MessageEv,b6,__ZNK35AsmException_AssembleError_GuardHit7MessageEv,b6,__ZNK38AsmException_AssembleError_OutOfMemory7MessageEv,b6,__ZNK43AsmException_AssembleError_InconsistentCode7MessageEv,b6,__ZNK35AsmException_AssembleError_FileOpen7MessageEv,b6,__ZNK35AsmException_AssembleError_FileRead7MessageEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNK35AsmException_SyntaxError_OutOfRange7MessageEv,b6,b6,__ZNK22AsmException_UserError7MessageEv,b6,__ZNK37AsmException_SyntaxError_MissingQuote7MessageEv,b6
,__ZNK43AsmException_SyntaxError_DuplicateMacroName7MessageEv,b6,__ZNK41AsmException_SyntaxError_InvalidMacroName7MessageEv,b6,__ZNK42AsmException_SyntaxError_InvalidSymbolName7MessageEv,b6,__ZNK37AsmException_SyntaxError_MissingComma7MessageEv,b6,__ZNK38AsmException_SyntaxError_BackwardsSkip7MessageEv,b6,__ZNK37AsmException_SyntaxError_BadAlignment7MessageEv,b6,__ZNK32AsmException_SyntaxError_BadStep7MessageEv,b6,__ZNK40AsmException_SyntaxError_OnlyOneAnonSave7MessageEv,b6,__ZNK35AsmException_SyntaxError_NoAnonSave7MessageEv,b6,__ZNK30AsmException_FileError_OpenObj7MessageEv,b6,__ZNK31AsmException_FileError_WriteObj7MessageEv,b6,__ZNK36AsmException_SyntaxError_CantInclude7MessageEv,b6,__ZNK42AsmException_SyntaxError_SecondPassProblem7MessageEv,___stdio_close,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,b6,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,__ZNKSt13runtime_error4whatEv,b6,b6,__ZNKSt3__219__iostream_category4nameEv,b6,b6,b6,b6,b6,b6,__ZNSt3__211__stdoutbufIwE4syncEv,b6,b6,b6,b6,__ZNSt3__211__stdoutbufIcE4syncEv,b6,b6,b6,b6,__ZNSt3__210__stdinbufIwE9underflowEv,__ZNSt3__210__stdinbufIwE5uflowEv,b6,b6,b6,__ZNSt3__210__stdinbufIcE9underflowEv
,__ZNSt3__210__stdinbufIcE5uflowEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,b6,b6,b6,b6,b6,b6,__ZNKSt3__220__time_get_c_storageIcE7__weeksEv,__ZNKSt3__220__time_get_c_storageIcE8__monthsEv,__ZNKSt3__220__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__220__time_get_c_storageIcE3__cEv,__ZNKSt3__220__time_get_c_storageIcE3__rEv,__ZNKSt3__220__time_get_c_storageIcE3__xEv,__ZNKSt3__220__time_get_c_storageIcE3__XEv,b6,b6,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,b6,b6,b6,b6,b6,b6,__ZNKSt3__220__time_get_c_storageIwE7__weeksEv,__ZNKSt3__220__time_get_c_storageIwE8__monthsEv,__ZNKSt3__220__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__220__time_get_c_storageIwE3__cEv,__ZNKSt3__220__time_get_c_storageIwE3__rEv,__ZNKSt3__220__time_get_c_storageIwE3__xEv
,__ZNKSt3__220__time_get_c_storageIwE3__XEv,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv,b6,b6,b6,b6,__ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv,b6,b6,b6,b6,__ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv,b6,b6,b6,b6,__ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv,b6,b6,b6
,b6,__ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv,b6,b6,b6,b6,__ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv,b6,b6,b6,b6,__ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv,b6,b6,b6,b6,__ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv,b6,__ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv,b6,b6,b6,b6
,b6,b6,__ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv,b6,__ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__28numpunctIcE16do_decimal_pointEv,__ZNKSt3__28numpunctIcE16do_thousands_sepEv,b6,b6,b6,b6,b6,__ZNKSt3__28numpunctIwE16do_decimal_pointEv,__ZNKSt3__28numpunctIwE16do_thousands_sepEv,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv,b6,__ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv,b6,b6,b6,b6,__ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv
,b6,__ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt9bad_alloc4whatEv,b6,b6,__ZNKSt11logic_error4whatEv,b6,b6,b6,b6,b6,b6
,__ZNKSt8bad_cast4whatEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__28ios_base6getlocEv
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__Znwj,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE3getEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN10LineParser29AdvanceAndCheckEndOfStatementEv,b6,b6,b6,__Znaj,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE5flushEv,b6,b6,b6,b6,_uselocale,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_wcslen,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_pthread_mutex_unlock__wrapper,_pthread_mutex_lock__wrapper,_pthread_cond_broadcast__wrapper,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_viidi = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN11SymbolTable9AddSymbolERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEdb,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_iiiiiiiiiiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_,b8,b8,b8,b8,b8,b8
,b8,__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_viidddiii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN10SourceCode6AddForERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEdddiS8_i,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_iiii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,b10,b10,b10,b10,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,b10,b10,b10,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE6setbufEPci,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,___stdout_write,___stdio_seek,___stdio_write,___stdio_read
,_sn_write,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,b10,b10,b10,b10,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,b10,b10,b10,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNKSt3__214error_category10equivalentEiRKNS_15error_conditionE,__ZNKSt3__214error_category10equivalentERKNS_10error_codeEi,b10,b10,b10,b10,__ZNSt3__211__stdoutbufIwE6xsputnEPKwi,b10,b10,b10,b10,__ZNSt3__211__stdoutbufIcE6xsputnEPKci,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,__ZNKSt3__27collateIcE7do_hashEPKcS3_,b10,b10,b10,b10,__ZNKSt3__27collateIwE7do_hashEPKwS3_,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b10,b10,b10,b10,__ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNKSt3__25ctypeIcE10do_toupperEPcPKc,b10,__ZNKSt3__25ctypeIcE10do_tolowerEPcPKc,b10,b10,__ZNKSt3__25ctypeIcE9do_narrowEcc,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,__ZNKSt3__25ctypeIwE5do_isEtw,b10,b10,b10,b10,__ZNKSt3__25ctypeIwE10do_toupperEPwPKw,b10,__ZNKSt3__25ctypeIwE10do_tolowerEPwPKw,b10,b10,__ZNKSt3__25ctypeIwE9do_narrowEwc,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE4readEPci,b10,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5writeEPKci,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__Z11ImportBASICPKcPhPi,b10,b10
,b10,b10,b10,b10,b10,b10,_do_read_309,b10,b10,b10,b10,b10,b10,b10,b10,_newlocale,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,_vasprintf,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorIS9_EE5valueERS5_E4typeES9_S9_,b10,b10,b10,b10
,b10,b10,b10,__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorIS9_EE5valueERS5_E4typeES9_S9_,b10,b10,b10,b10,b10,b10,b10,b10,b10,_wcrtomb,b10,b10,_mbtowc,_mbrlen,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10];
var FUNCTION_TABLE_viiiiiiiiiiiiiii = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,__ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i,b11,__ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11];
var FUNCTION_TABLE_viiiiii = [b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,b12,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNKSt3__28messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b12,b12,b12,b12,__ZNKSt3__28messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b12,b12,b12,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZN9DiscImage7AddFileEPKcPKhiii,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12];
var FUNCTION_TABLE_di = [b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZN10LineParser8GetValueEv,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13];
var FUNCTION_TABLE_iiiiiiiii = [b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,b14,b14,b14,b14,b14,b14,b14,b14,__ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_
,__ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,b14,b14,b14,b14,b14,b14,__ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14];
var FUNCTION_TABLE_viiiiiii = [b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,__ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE,b15,__ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE,b15,b15,b15,__ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE,__ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15];
var FUNCTION_TABLE_viiiiiiiiii = [b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri,b16,b16,b16
,b16,b16,b16,b16,__ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri,b16,b16,__ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri,b16,__ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16];
var FUNCTION_TABLE_iii = [b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi,b17,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE8overflowEi,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZN10SourceFile7GetLineERNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZN13MacroInstance7GetLineERNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,b17,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNSt3__211__stdoutbufIwE8overflowEj,b17,b17,b17,b17,__ZNSt3__211__stdoutbufIcE8overflowEi,b17,b17,b17,b17,__ZNSt3__210__stdinbufIwE9pbackfailEj,b17,b17,b17
,b17,__ZNSt3__210__stdinbufIcE9pbackfailEi,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNKSt3__25ctypeIcE10do_toupperEc,b17,__ZNKSt3__25ctypeIcE10do_tolowerEc,b17,__ZNKSt3__25ctypeIcE8do_widenEc,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,__ZNKSt3__25ctypeIwE10do_toupperEw,b17,__ZNKSt3__25ctypeIwE10do_tolowerEw,b17,__ZNKSt3__25ctypeIwE8do_widenEc,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi,b17,b17
,__ZNKSt3__26locale9use_facetERNS0_2idE,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE5seekgENS_4fposI11__mbstate_tEE,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERd,b17,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERj,b17,b17,b17,b17,b17,__ZNK11SymbolTable15IsSymbolDefinedERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b17,b17,b17,b17,b17,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc,b17
,b17,b17,b17,__ZN10LineParser23EvaluateExpressionAsIntEb,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNKSt3__26locale9has_facetERNS0_2idE,b17,b17,__ZN11StringUtils13EatWhitespaceERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERj,b17,b17,b17,__ZNK10MacroTable3GetERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNK10ObjectCode10GetMappingEi,b17,b17,__ZN10LineParser31EvaluateExpressionAsUnsignedIntEb,b17,b17,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc,b17,b17,b17,b17,b17,b17
,__ZNK10MacroTable6ExistsERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,_isxdigit_l,_isdigit_l,b17,b17,b17,b17,b17,b17,b17,__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17];
var FUNCTION_TABLE_iiiiii = [b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,__ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_,b18,b18,b18,b18,__ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,b18,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,b18,b18,b18,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,b18,b18,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,b18,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,b18,b18,b18,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b18,b18,__ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,b18,b18,b18,b18,b18
,b18,__ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b18,b18,__ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc,b18,b18,b18,__ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b18,b18,__ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,b18,b18,b18,b18,__ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b18,b18
,__ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,_wcsnrtombs,b18,_mbsnrtowcs,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18];
var FUNCTION_TABLE_diii = [b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZNSt3__215__num_get_floatIeEET_PKcS3_Rj,__ZNSt3__215__num_get_floatIdEET_PKcS3_Rj,__ZNSt3__215__num_get_floatIfEET_PKcS3_Rj,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19];
var FUNCTION_TABLE_dii = [b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZNK11SymbolTable9GetSymbolERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZN10LineParser18EvaluateExpressionEb,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20];
var FUNCTION_TABLE_i = [b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,__Z16GetBASICErrorNumv,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,__ZNSt3__26__clocEv,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,___ctype_tolower_loc,___ctype_toupper_loc,___ctype_b_loc,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,__ZNSt3__26locale5__imp12make_classicEv,__ZNSt3__26locale5__imp11make_globalEv,__ZNSt3__26locale8__globalEv,b21,b21,b21
,b21,b21,b21,b21,b21,___cxa_get_globals_fast,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21];
var FUNCTION_TABLE_iiiii = [b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,__ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_,b22,b22,b22,b22,b22,__ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE5seekgExNS_8ios_base7seekdirE,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z,b22,b22,b22,b22,b22,b22,b22,__ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji,__ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji,__ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji,__ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji,__ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji,__ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji,b22,b22
,b22,__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,_mbsrtowcs,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,_catgets,b22,b22,b22,_mbrtowc,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22];
var FUNCTION_TABLE_viii = [b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,__ZN10SourceCode10AddIfLevelERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi,__ZN10SourceCode9StartElifERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi,b23,__ZN10SourceCode9StartElseERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi,__ZN10SourceCode13RemoveIfLevelERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZN10SourceCode10StartMacroERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi,b23,__ZN10SourceCode8EndMacroERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,__ZNKSt3__214error_category23default_error_conditionEi,b23,b23,__ZNKSt3__219__iostream_category7messageEi,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,__ZN10LineParserC2EP10SourceCodeNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE,b23,b23,b23,b23,b23,b23,b23,___cxa_throw__wrapper,__ZN41AsmException_SyntaxError_MismatchedBracesC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj,__ZN36AsmException_SyntaxError_TooManyFORsC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi,__ZN39AsmException_SyntaxError_NextWithoutForC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc,__ZN5MacroC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi,__ZN37AsmException_SyntaxError_MissingValueC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi,__ZN41AsmException_SyntaxError_IllegalOperationC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi,__ZN39AsmException_SyntaxError_DivisionByZeroC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi,b23,b23,b23,b23,b23,__ZN41AsmException_SyntaxError_InvalidCharacterC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi,__ZNK10SourceCode19GetSymbolNameSuffixEi,b23,b23,b23,b23,b23,__ZN45AsmException_SyntaxError_ExpressionTooComplexC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi,b23,__ZN10LineParser14SkipExpressionEib,__ZN46AsmException_SyntaxError_MismatchedParenthesesC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi,b23,b23
,b23,__ZN10ObjectCode9Assemble2Ejj,__ZN10ObjectCode9Assemble3Ejj,b23,__ZN35AsmException_SyntaxError_NoIndirectC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi,__ZN36AsmException_SyntaxError_NotZeroPageC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi,__ZN35AsmException_SyntaxError_BadAddressC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi,__ZN36AsmException_SyntaxError_BadIndirectC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi,__ZN36AsmException_SyntaxError_BadAbsoluteC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi,__ZN35AsmException_SyntaxError_BadIndexedC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi,b23,b23,b23,b23,b23,b23,b23,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b,b23,__ZN42AsmException_SyntaxError_UnrecognisedTokenC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi,b23,b23,b23,__ZN13MacroInstanceC2EPK5MacroPK10SourceCode,b23,b23,b23,b23,__ZN9DiscImageC2EPKcS1_,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZN44AsmException_SyntaxError_LabelAlreadyDefinedC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi,__ZN42AsmException_SyntaxError_InvalidSymbolNameC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi,__ZN37AsmException_SyntaxError_MissingCommaC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi,__ZN37AsmException_SyntaxError_MissingQuoteC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi,__ZN35AsmException_SyntaxError_OutOfRangeC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi,__ZN40AsmException_SyntaxError_UnexpectedCommaC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi,__ZN40AsmException_SyntaxError_EmptyExpressionC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi,b23,b23,__ZN37AsmException_SyntaxError_NumberTooBigC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,__ZNSt3__28ios_base7failureC2EPKcRKNS_10error_codeE,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,__ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,b23
,b23,b23,b23,b23,b23,__ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,__ZNSt3__212system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23];
var FUNCTION_TABLE_v = [b24,b24,___cxa_pure_virtual__wrapper,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,__ZL25default_terminate_handlerv,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,___cxa_rethrow__wrapper,___cxa_end_catch__wrapper,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZSt17__throw_bad_allocv,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24];
var FUNCTION_TABLE_viid = [b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,__ZN11SymbolTable12ChangeSymbolERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEd,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25];
var FUNCTION_TABLE_iiiiid = [b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,b26,b26,b26,b26,b26,b26,b26,b26,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26];
var FUNCTION_TABLE_viiii = [b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,b27,b27,b27,b27,b27,b27,b27,b27,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,__ZNKSt3__27collateIcE12do_transformEPKcS3_,b27,b27,b27,b27,__ZNKSt3__27collateIwE12do_transformEPKwS3_,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b27,b27,b27,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcjj,b27,___assert_fail__wrapper,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,__ZN22AsmException_UserErrorC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEiS6_,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27];

  return { _main: _main, ___udivdi3: ___udivdi3, _bitshift64Lshr: _bitshift64Lshr, ___udivmoddi4: ___udivmoddi4, _fflush: _fflush, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _llvm_cttz_i32: _llvm_cttz_i32, _sbrk: _sbrk, _memcpy: _memcpy, ___muldi3: ___muldi3, _bitshift64Shl: _bitshift64Shl, ___uremdi3: ___uremdi3, _i64Subtract: _i64Subtract, _memset: _memset, _i64Add: _i64Add, _pthread_self: _pthread_self, _pthread_mutex_unlock: _pthread_mutex_unlock, _pthread_cond_broadcast: _pthread_cond_broadcast, ___errno_location: ___errno_location, ___muldsi3: ___muldsi3, ___cxa_can_catch: ___cxa_can_catch, _free: _free, _memmove: _memmove, _malloc: _malloc, _pthread_mutex_lock: _pthread_mutex_lock, __GLOBAL__I_000101: __GLOBAL__I_000101, __GLOBAL__sub_I_iostream_cpp: __GLOBAL__sub_I_iostream_cpp, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_iiiiiid: dynCall_iiiiiid, dynCall_viiiii: dynCall_viiiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_ii: dynCall_ii, dynCall_viidi: dynCall_viidi, dynCall_iiiiiiiiiiii: dynCall_iiiiiiiiiiii, dynCall_viidddiii: dynCall_viidddiii, dynCall_iiii: dynCall_iiii, dynCall_viiiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_di: dynCall_di, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiiiiiiii: dynCall_viiiiiiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_diii: dynCall_diii, dynCall_dii: dynCall_dii, dynCall_i: dynCall_i, dynCall_iiiii: dynCall_iiiii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_viid: dynCall_viid, dynCall_iiiiid: dynCall_iiiiid, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real__llvm_cttz_i32 = asm["_llvm_cttz_i32"]; asm["_llvm_cttz_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_cttz_i32.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_is_pointer_type.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__sbrk.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____muldi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____uremdi3.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real____udivmoddi4 = asm["___udivmoddi4"]; asm["___udivmoddi4"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivmoddi4.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__pthread_self = asm["_pthread_self"]; asm["_pthread_self"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_self.apply(null, arguments);
};

var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"]; asm["_pthread_mutex_unlock"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_mutex_unlock.apply(null, arguments);
};

var real___GLOBAL__I_000101 = asm["__GLOBAL__I_000101"]; asm["__GLOBAL__I_000101"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__I_000101.apply(null, arguments);
};

var real___GLOBAL__sub_I_iostream_cpp = asm["__GLOBAL__sub_I_iostream_cpp"]; asm["__GLOBAL__sub_I_iostream_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_iostream_cpp.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__pthread_cond_broadcast = asm["_pthread_cond_broadcast"]; asm["_pthread_cond_broadcast"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_cond_broadcast.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real____muldsi3 = asm["___muldsi3"]; asm["___muldsi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____muldsi3.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_can_catch.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivdi3.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__pthread_mutex_lock = asm["_pthread_mutex_lock"]; asm["_pthread_mutex_lock"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_mutex_lock.apply(null, arguments);
};
var _main = Module["_main"] = asm["_main"];
var _llvm_cttz_i32 = Module["_llvm_cttz_i32"] = asm["_llvm_cttz_i32"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _memset = Module["_memset"] = asm["_memset"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var ___udivmoddi4 = Module["___udivmoddi4"] = asm["___udivmoddi4"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _pthread_self = Module["_pthread_self"] = asm["_pthread_self"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var __GLOBAL__I_000101 = Module["__GLOBAL__I_000101"] = asm["__GLOBAL__I_000101"];
var __GLOBAL__sub_I_iostream_cpp = Module["__GLOBAL__sub_I_iostream_cpp"] = asm["__GLOBAL__sub_I_iostream_cpp"];
var _free = Module["_free"] = asm["_free"];
var _pthread_cond_broadcast = Module["_pthread_cond_broadcast"] = asm["_pthread_cond_broadcast"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldsi3 = Module["___muldsi3"] = asm["___muldsi3"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_iiiiiid = Module["dynCall_iiiiiid"] = asm["dynCall_iiiiiid"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viidi = Module["dynCall_viidi"] = asm["dynCall_viidi"];
var dynCall_iiiiiiiiiiii = Module["dynCall_iiiiiiiiiiii"] = asm["dynCall_iiiiiiiiiiii"];
var dynCall_viidddiii = Module["dynCall_viidddiii"] = asm["dynCall_viidddiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_di = Module["dynCall_di"] = asm["dynCall_di"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiiiiiiii = Module["dynCall_viiiiiiiiii"] = asm["dynCall_viiiiiiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_diii = Module["dynCall_diii"] = asm["dynCall_diii"];
var dynCall_dii = Module["dynCall_dii"] = asm["dynCall_dii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_viid = Module["dynCall_viid"] = asm["dynCall_viid"];
var dynCall_iiiiid = Module["dynCall_iiiiid"] = asm["dynCall_iiiiid"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===





function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  } else if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



